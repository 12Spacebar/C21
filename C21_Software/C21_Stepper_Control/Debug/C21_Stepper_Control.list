
C21_Stepper_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c54  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001d60  08001d60  00011d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d84  08001d84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d84  08001d84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d84  08001d84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d84  08001d84  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d88  08001d88  00011d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001d98  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001d98  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000702d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001281  00000000  00000000  00027062  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  000282e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  00028bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001300b  00000000  00000000  00029410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005eef  00000000  00000000  0003c41b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b40d  00000000  00000000  0004230a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ad717  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002480  00000000  00000000  000ad794  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d48 	.word	0x08001d48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d48 	.word	0x08001d48

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa68 	bl	8000624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f830 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8f8 	bl	800034c <MX_GPIO_Init>
  MX_TIM3_Init();
 800015c:	f000 f872 	bl	8000244 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10, GPIO_PIN_SET);
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000166:	4812      	ldr	r0, [pc, #72]	; (80001b0 <main+0x64>)
 8000168:	f000 fd1e 	bl	8000ba8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, GPIO_PIN_SET);
 800016c:	2201      	movs	r2, #1
 800016e:	2180      	movs	r1, #128	; 0x80
 8000170:	4810      	ldr	r0, [pc, #64]	; (80001b4 <main+0x68>)
 8000172:	f000 fd19 	bl	8000ba8 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11, GPIO_PIN_SET);
 8000176:	2201      	movs	r2, #1
 8000178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800017c:	480c      	ldr	r0, [pc, #48]	; (80001b0 <main+0x64>)
 800017e:	f000 fd13 	bl	8000ba8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, GPIO_PIN_SET);
 8000182:	2201      	movs	r2, #1
 8000184:	2140      	movs	r1, #64	; 0x40
 8000186:	480b      	ldr	r0, [pc, #44]	; (80001b4 <main+0x68>)
 8000188:	f000 fd0e 	bl	8000ba8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 800018c:	2001      	movs	r0, #1
 800018e:	f000 faab 	bl	80006e8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11, GPIO_PIN_RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000198:	4805      	ldr	r0, [pc, #20]	; (80001b0 <main+0x64>)
 800019a:	f000 fd05 	bl	8000ba8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, GPIO_PIN_RESET);
 800019e:	2200      	movs	r2, #0
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4804      	ldr	r0, [pc, #16]	; (80001b4 <main+0x68>)
 80001a4:	f000 fd00 	bl	8000ba8 <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 80001a8:	2001      	movs	r0, #1
 80001aa:	f000 fa9d 	bl	80006e8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11, GPIO_PIN_SET);
 80001ae:	e7e2      	b.n	8000176 <main+0x2a>
 80001b0:	40010c00 	.word	0x40010c00
 80001b4:	40010800 	.word	0x40010800

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b090      	sub	sp, #64	; 0x40
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	2228      	movs	r2, #40	; 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f001 fdb6 	bl	8001d38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]
 80001d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001da:	2301      	movs	r3, #1
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e8:	2301      	movs	r3, #1
 80001ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ec:	2302      	movs	r3, #2
 80001ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0318 	add.w	r3, r7, #24
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fce9 	bl	8000bd8 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800020c:	f000 f8fe 	bl	800040c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2102      	movs	r1, #2
 800022a:	4618      	mov	r0, r3
 800022c:	f000 ff54 	bl	80010d8 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000236:	f000 f8e9 	bl	800040c <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	; 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08e      	sub	sp, #56	; 0x38
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800024a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000258:	f107 0320 	add.w	r3, r7, #32
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
 8000270:	615a      	str	r2, [r3, #20]
 8000272:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000274:	4b33      	ldr	r3, [pc, #204]	; (8000344 <MX_TIM3_Init+0x100>)
 8000276:	4a34      	ldr	r2, [pc, #208]	; (8000348 <MX_TIM3_Init+0x104>)
 8000278:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 800027a:	4b32      	ldr	r3, [pc, #200]	; (8000344 <MX_TIM3_Init+0x100>)
 800027c:	2223      	movs	r2, #35	; 0x23
 800027e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000280:	4b30      	ldr	r3, [pc, #192]	; (8000344 <MX_TIM3_Init+0x100>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000286:	4b2f      	ldr	r3, [pc, #188]	; (8000344 <MX_TIM3_Init+0x100>)
 8000288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800028c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800028e:	4b2d      	ldr	r3, [pc, #180]	; (8000344 <MX_TIM3_Init+0x100>)
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000294:	4b2b      	ldr	r3, [pc, #172]	; (8000344 <MX_TIM3_Init+0x100>)
 8000296:	2200      	movs	r2, #0
 8000298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800029a:	482a      	ldr	r0, [pc, #168]	; (8000344 <MX_TIM3_Init+0x100>)
 800029c:	f001 f886 	bl	80013ac <HAL_TIM_Base_Init>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80002a6:	f000 f8b1 	bl	800040c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80002b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b4:	4619      	mov	r1, r3
 80002b6:	4823      	ldr	r0, [pc, #140]	; (8000344 <MX_TIM3_Init+0x100>)
 80002b8:	f001 f99e 	bl	80015f8 <HAL_TIM_ConfigClockSource>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80002c2:	f000 f8a3 	bl	800040c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002c6:	481f      	ldr	r0, [pc, #124]	; (8000344 <MX_TIM3_Init+0x100>)
 80002c8:	f001 f89b 	bl	8001402 <HAL_TIM_PWM_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80002d2:	f000 f89b 	bl	800040c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d6:	2300      	movs	r3, #0
 80002d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002da:	2300      	movs	r3, #0
 80002dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	4619      	mov	r1, r3
 80002e4:	4817      	ldr	r0, [pc, #92]	; (8000344 <MX_TIM3_Init+0x100>)
 80002e6:	f001 fcbf 	bl	8001c68 <HAL_TIMEx_MasterConfigSynchronization>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80002f0:	f000 f88c 	bl	800040c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002f4:	2360      	movs	r3, #96	; 0x60
 80002f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80002f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002fe:	2300      	movs	r3, #0
 8000300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2208      	movs	r2, #8
 800030a:	4619      	mov	r1, r3
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <MX_TIM3_Init+0x100>)
 800030e:	f001 f8ad 	bl	800146c <HAL_TIM_PWM_ConfigChannel>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000318:	f000 f878 	bl	800040c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	220c      	movs	r2, #12
 8000324:	4619      	mov	r1, r3
 8000326:	4807      	ldr	r0, [pc, #28]	; (8000344 <MX_TIM3_Init+0x100>)
 8000328:	f001 f8a0 	bl	800146c <HAL_TIM_PWM_ConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000332:	f000 f86b 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <MX_TIM3_Init+0x100>)
 8000338:	f000 f8be 	bl	80004b8 <HAL_TIM_MspPostInit>

}
 800033c:	bf00      	nop
 800033e:	3738      	adds	r7, #56	; 0x38
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000028 	.word	0x20000028
 8000348:	40000400 	.word	0x40000400

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	4b27      	ldr	r3, [pc, #156]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a26      	ldr	r2, [pc, #152]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000366:	f043 0320 	orr.w	r3, r3, #32
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b24      	ldr	r3, [pc, #144]	; (8000400 <MX_GPIO_Init+0xb4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0320 	and.w	r3, r3, #32
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <MX_GPIO_Init+0xb4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a20      	ldr	r2, [pc, #128]	; (8000400 <MX_GPIO_Init+0xb4>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1a      	ldr	r2, [pc, #104]	; (8000400 <MX_GPIO_Init+0xb4>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <MX_GPIO_Init+0xb4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	21f0      	movs	r1, #240	; 0xf0
 80003ac:	4815      	ldr	r0, [pc, #84]	; (8000404 <MX_GPIO_Init+0xb8>)
 80003ae:	f000 fbfb 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80003b8:	4813      	ldr	r0, [pc, #76]	; (8000408 <MX_GPIO_Init+0xbc>)
 80003ba:	f000 fbf5 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80003be:	23f0      	movs	r3, #240	; 0xf0
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	480b      	ldr	r0, [pc, #44]	; (8000404 <MX_GPIO_Init+0xb8>)
 80003d6:	f000 fa8d 	bl	80008f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80003da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	4805      	ldr	r0, [pc, #20]	; (8000408 <MX_GPIO_Init+0xbc>)
 80003f4:	f000 fa7e 	bl	80008f4 <HAL_GPIO_Init>

}
 80003f8:	bf00      	nop
 80003fa:	3720      	adds	r7, #32
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40021000 	.word	0x40021000
 8000404:	40010800 	.word	0x40010800
 8000408:	40010c00 	.word	0x40010c00

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <HAL_TIM_Base_MspInit+0x34>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d10b      	bne.n	80004a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800048e:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 8000494:	f043 0302 	orr.w	r3, r3, #2
 8000498:	61d3      	str	r3, [r2, #28]
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_TIM_Base_MspInit+0x38>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	f003 0302 	and.w	r3, r3, #2
 80004a2:	60fb      	str	r3, [r7, #12]
 80004a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004a6:	bf00      	nop
 80004a8:	3714      	adds	r7, #20
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr
 80004b0:	40000400 	.word	0x40000400
 80004b4:	40021000 	.word	0x40021000

080004b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <HAL_TIM_MspPostInit+0x58>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d117      	bne.n	8000508 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_TIM_MspPostInit+0x5c>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_TIM_MspPostInit+0x5c>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_TIM_MspPostInit+0x5c>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004f0:	2303      	movs	r3, #3
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	2302      	movs	r3, #2
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	2302      	movs	r3, #2
 80004fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <HAL_TIM_MspPostInit+0x60>)
 8000504:	f000 f9f6 	bl	80008f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40000400 	.word	0x40000400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010c00 	.word	0x40010c00

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <HardFault_Handler+0x4>

0800052e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <MemManage_Handler+0x4>

08000534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <BusFault_Handler+0x4>

0800053a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <UsageFault_Handler+0x4>

08000540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000568:	f000 f8a2 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <SystemInit+0x5c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <SystemInit+0x5c>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <SystemInit+0x5c>)
 8000582:	685a      	ldr	r2, [r3, #4]
 8000584:	4911      	ldr	r1, [pc, #68]	; (80005cc <SystemInit+0x5c>)
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <SystemInit+0x60>)
 8000588:	4013      	ands	r3, r2
 800058a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <SystemInit+0x5c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <SystemInit+0x5c>)
 8000592:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <SystemInit+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <SystemInit+0x5c>)
 80005a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <SystemInit+0x5c>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <SystemInit+0x5c>)
 80005ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <SystemInit+0x5c>)
 80005b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <SystemInit+0x64>)
 80005be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005c2:	609a      	str	r2, [r3, #8]
#endif 
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	40021000 	.word	0x40021000
 80005d0:	f8ff0000 	.word	0xf8ff0000
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005da:	e003      	b.n	80005e4 <LoopCopyDataInit>

080005dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005dc:	4b0b      	ldr	r3, [pc, #44]	; (800060c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005e2:	3104      	adds	r1, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005e4:	480a      	ldr	r0, [pc, #40]	; (8000610 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005ec:	d3f6      	bcc.n	80005dc <CopyDataInit>
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005f0:	e002      	b.n	80005f8 <LoopFillZerobss>

080005f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005f4:	f842 3b04 	str.w	r3, [r2], #4

080005f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005fc:	d3f9      	bcc.n	80005f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005fe:	f7ff ffb7 	bl	8000570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000602:	f001 fb75 	bl	8001cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff fda1 	bl	800014c <main>
  bx lr
 800060a:	4770      	bx	lr
  ldr r3, =_sidata
 800060c:	08001d8c 	.word	0x08001d8c
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000614:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000618:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800061c:	2000006c 	.word	0x2000006c

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>
	...

08000624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_Init+0x28>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_Init+0x28>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f929 	bl	800088c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f808 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff feea 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0x54>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_InitTick+0x58>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	fbb3 f3f1 	udiv	r3, r3, r1
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f933 	bl	80008da <HAL_SYSTICK_Config>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e00e      	b.n	800069c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d80a      	bhi.n	800069a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000684:	2200      	movs	r2, #0
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f04f 30ff 	mov.w	r0, #4294967295
 800068c:	f000 f909 	bl	80008a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_InitTick+0x5c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000004 	.word	0x20000004

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <HAL_IncTick+0x1c>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x20>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a03      	ldr	r2, [pc, #12]	; (80006d0 <HAL_IncTick+0x20>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	20000008 	.word	0x20000008
 80006d0:	20000068 	.word	0x20000068

080006d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  return uwTick;
 80006d8:	4b02      	ldr	r3, [pc, #8]	; (80006e4 <HAL_GetTick+0x10>)
 80006da:	681b      	ldr	r3, [r3, #0]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr
 80006e4:	20000068 	.word	0x20000068

080006e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f0:	f7ff fff0 	bl	80006d4 <HAL_GetTick>
 80006f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000700:	d005      	beq.n	800070e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_Delay+0x40>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4413      	add	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800070e:	bf00      	nop
 8000710:	f7ff ffe0 	bl	80006d4 <HAL_GetTick>
 8000714:	4602      	mov	r2, r0
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	429a      	cmp	r2, r3
 800071e:	d8f7      	bhi.n	8000710 <HAL_Delay+0x28>
  {
  }
}
 8000720:	bf00      	nop
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000008 	.word	0x20000008

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0a      	blt.n	80007ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	490c      	ldr	r1, [pc, #48]	; (80007dc <__NVIC_SetPriority+0x4c>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b8:	e00a      	b.n	80007d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <__NVIC_SetPriority+0x50>)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	3b04      	subs	r3, #4
 80007c8:	0112      	lsls	r2, r2, #4
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	440b      	add	r3, r1
 80007ce:	761a      	strb	r2, [r3, #24]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e100 	.word	0xe000e100
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b089      	sub	sp, #36	; 0x24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	f1c3 0307 	rsb	r3, r3, #7
 80007fe:	2b04      	cmp	r3, #4
 8000800:	bf28      	it	cs
 8000802:	2304      	movcs	r3, #4
 8000804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3304      	adds	r3, #4
 800080a:	2b06      	cmp	r3, #6
 800080c:	d902      	bls.n	8000814 <NVIC_EncodePriority+0x30>
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3b03      	subs	r3, #3
 8000812:	e000      	b.n	8000816 <NVIC_EncodePriority+0x32>
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	f04f 32ff 	mov.w	r2, #4294967295
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43da      	mvns	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	401a      	ands	r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43d9      	mvns	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	4313      	orrs	r3, r2
         );
}
 800083e:	4618      	mov	r0, r3
 8000840:	3724      	adds	r7, #36	; 0x24
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000858:	d301      	bcc.n	800085e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085a:	2301      	movs	r3, #1
 800085c:	e00f      	b.n	800087e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <SysTick_Config+0x40>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000866:	210f      	movs	r1, #15
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f7ff ff90 	bl	8000790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SysTick_Config+0x40>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SysTick_Config+0x40>)
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000e010 	.word	0xe000e010

0800088c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff49 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b4:	f7ff ff5e 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f7ff ff90 	bl	80007e4 <NVIC_EncodePriority>
 80008c4:	4602      	mov	r2, r0
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff5f 	bl	8000790 <__NVIC_SetPriority>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f7ff ffb0 	bl	8000848 <SysTick_Config>
 80008e8:	4603      	mov	r3, r0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e127      	b.n	8000b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000908:	2201      	movs	r2, #1
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8116 	bne.w	8000b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b12      	cmp	r3, #18
 800092c:	d034      	beq.n	8000998 <HAL_GPIO_Init+0xa4>
 800092e:	2b12      	cmp	r3, #18
 8000930:	d80d      	bhi.n	800094e <HAL_GPIO_Init+0x5a>
 8000932:	2b02      	cmp	r3, #2
 8000934:	d02b      	beq.n	800098e <HAL_GPIO_Init+0x9a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d804      	bhi.n	8000944 <HAL_GPIO_Init+0x50>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d031      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d01c      	beq.n	800097c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000942:	e048      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000944:	2b03      	cmp	r3, #3
 8000946:	d043      	beq.n	80009d0 <HAL_GPIO_Init+0xdc>
 8000948:	2b11      	cmp	r3, #17
 800094a:	d01b      	beq.n	8000984 <HAL_GPIO_Init+0x90>
          break;
 800094c:	e043      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094e:	4a89      	ldr	r2, [pc, #548]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d026      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000954:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d806      	bhi.n	8000968 <HAL_GPIO_Init+0x74>
 800095a:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x284>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d020      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000960:	4a86      	ldr	r2, [pc, #536]	; (8000b7c <HAL_GPIO_Init+0x288>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d01d      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 8000966:	e036      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000968:	4a85      	ldr	r2, [pc, #532]	; (8000b80 <HAL_GPIO_Init+0x28c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d019      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800096e:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x290>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d016      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000974:	4a84      	ldr	r2, [pc, #528]	; (8000b88 <HAL_GPIO_Init+0x294>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 800097a:	e02c      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e028      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	3304      	adds	r3, #4
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e023      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	3308      	adds	r3, #8
 8000994:	623b      	str	r3, [r7, #32]
          break;
 8000996:	e01e      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	330c      	adds	r3, #12
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e019      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009aa:	2304      	movs	r3, #4
 80009ac:	623b      	str	r3, [r7, #32]
          break;
 80009ae:	e012      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d105      	bne.n	80009c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	611a      	str	r2, [r3, #16]
          break;
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c4:	2308      	movs	r3, #8
 80009c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	615a      	str	r2, [r3, #20]
          break;
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d801      	bhi.n	80009e0 <HAL_GPIO_Init+0xec>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	e001      	b.n	80009e4 <HAL_GPIO_Init+0xf0>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3304      	adds	r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2bff      	cmp	r3, #255	; 0xff
 80009ea:	d802      	bhi.n	80009f2 <HAL_GPIO_Init+0xfe>
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	e002      	b.n	80009f8 <HAL_GPIO_Init+0x104>
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	3b08      	subs	r3, #8
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	210f      	movs	r1, #15
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	401a      	ands	r2, r3
 8000a0a:	6a39      	ldr	r1, [r7, #32]
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	431a      	orrs	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8096 	beq.w	8000b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	220f      	movs	r2, #15
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0x19e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00d      	beq.n	8000a8e <HAL_GPIO_Init+0x19a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <HAL_GPIO_Init+0x2a8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x196>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_Init+0x192>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e004      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a92:	2300      	movs	r3, #0
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4093      	lsls	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa4:	493a      	ldr	r1, [pc, #232]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4938      	ldr	r1, [pc, #224]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4933      	ldr	r1, [pc, #204]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	604b      	str	r3, [r1, #4]
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4929      	ldr	r1, [pc, #164]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	4924      	ldr	r1, [pc, #144]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	608b      	str	r3, [r1, #8]
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	491f      	ldr	r1, [pc, #124]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	491a      	ldr	r1, [pc, #104]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	4915      	ldr	r1, [pc, #84]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f47f aed0 	bne.w	8000908 <HAL_GPIO_Init+0x14>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	372c      	adds	r7, #44	; 0x2c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	10210000 	.word	0x10210000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d101      	bne.n	8000bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e26c      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 8087 	beq.w	8000d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bf8:	4b92      	ldr	r3, [pc, #584]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 030c 	and.w	r3, r3, #12
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	d00c      	beq.n	8000c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c04:	4b8f      	ldr	r3, [pc, #572]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b08      	cmp	r3, #8
 8000c0e:	d112      	bne.n	8000c36 <HAL_RCC_OscConfig+0x5e>
 8000c10:	4b8c      	ldr	r3, [pc, #560]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1c:	d10b      	bne.n	8000c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1e:	4b89      	ldr	r3, [pc, #548]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d06c      	beq.n	8000d04 <HAL_RCC_OscConfig+0x12c>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d168      	bne.n	8000d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e246      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3e:	d106      	bne.n	8000c4e <HAL_RCC_OscConfig+0x76>
 8000c40:	4b80      	ldr	r3, [pc, #512]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a7f      	ldr	r2, [pc, #508]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e02e      	b.n	8000cac <HAL_RCC_OscConfig+0xd4>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10c      	bne.n	8000c70 <HAL_RCC_OscConfig+0x98>
 8000c56:	4b7b      	ldr	r3, [pc, #492]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a7a      	ldr	r2, [pc, #488]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b78      	ldr	r3, [pc, #480]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a77      	ldr	r2, [pc, #476]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e01d      	b.n	8000cac <HAL_RCC_OscConfig+0xd4>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c78:	d10c      	bne.n	8000c94 <HAL_RCC_OscConfig+0xbc>
 8000c7a:	4b72      	ldr	r3, [pc, #456]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a71      	ldr	r2, [pc, #452]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	4b6f      	ldr	r3, [pc, #444]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a6e      	ldr	r2, [pc, #440]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e00b      	b.n	8000cac <HAL_RCC_OscConfig+0xd4>
 8000c94:	4b6b      	ldr	r3, [pc, #428]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a6a      	ldr	r2, [pc, #424]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b68      	ldr	r3, [pc, #416]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a67      	ldr	r2, [pc, #412]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d013      	beq.n	8000cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fd0e 	bl	80006d4 <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cbc:	f7ff fd0a 	bl	80006d4 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b64      	cmp	r3, #100	; 0x64
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e1fa      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cce:	4b5d      	ldr	r3, [pc, #372]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f0      	beq.n	8000cbc <HAL_RCC_OscConfig+0xe4>
 8000cda:	e014      	b.n	8000d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fcfa 	bl	80006d4 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fcf6 	bl	80006d4 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e1e6      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cf6:	4b53      	ldr	r3, [pc, #332]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x10c>
 8000d02:	e000      	b.n	8000d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d063      	beq.n	8000dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d12:	4b4c      	ldr	r3, [pc, #304]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f003 030c 	and.w	r3, r3, #12
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00b      	beq.n	8000d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d1e:	4b49      	ldr	r3, [pc, #292]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d11c      	bne.n	8000d64 <HAL_RCC_OscConfig+0x18c>
 8000d2a:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d116      	bne.n	8000d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d36:	4b43      	ldr	r3, [pc, #268]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <HAL_RCC_OscConfig+0x176>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d001      	beq.n	8000d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e1ba      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4e:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4939      	ldr	r1, [pc, #228]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	e03a      	b.n	8000dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	691b      	ldr	r3, [r3, #16]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d020      	beq.n	8000dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <HAL_RCC_OscConfig+0x270>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d72:	f7ff fcaf 	bl	80006d4 <HAL_GetTick>
 8000d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7a:	f7ff fcab 	bl	80006d4 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e19b      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f0      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	4927      	ldr	r1, [pc, #156]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	4313      	orrs	r3, r2
 8000daa:	600b      	str	r3, [r1, #0]
 8000dac:	e015      	b.n	8000dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <HAL_RCC_OscConfig+0x270>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db4:	f7ff fc8e 	bl	80006d4 <HAL_GetTick>
 8000db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	e008      	b.n	8000dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dbc:	f7ff fc8a 	bl	80006d4 <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d901      	bls.n	8000dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e17a      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f0      	bne.n	8000dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d03a      	beq.n	8000e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d019      	beq.n	8000e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_RCC_OscConfig+0x274>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df4:	f7ff fc6e 	bl	80006d4 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fc6a 	bl	80006d4 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e15a      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f0      	beq.n	8000dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f000 faa8 	bl	8001370 <RCC_Delay>
 8000e20:	e01c      	b.n	8000e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_RCC_OscConfig+0x274>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e28:	f7ff fc54 	bl	80006d4 <HAL_GetTick>
 8000e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e2e:	e00f      	b.n	8000e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e30:	f7ff fc50 	bl	80006d4 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d908      	bls.n	8000e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	e140      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000
 8000e48:	42420000 	.word	0x42420000
 8000e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e50:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1e9      	bne.n	8000e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 0304 	and.w	r3, r3, #4
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f000 80a6 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e6e:	4b97      	ldr	r3, [pc, #604]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d10d      	bne.n	8000e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b94      	ldr	r3, [pc, #592]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a93      	ldr	r2, [pc, #588]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b91      	ldr	r3, [pc, #580]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e92:	2301      	movs	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e96:	4b8e      	ldr	r3, [pc, #568]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d118      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea2:	4b8b      	ldr	r3, [pc, #556]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a8a      	ldr	r2, [pc, #552]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fc11 	bl	80006d4 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb6:	f7ff fc0d 	bl	80006d4 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b64      	cmp	r3, #100	; 0x64
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e0fd      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec8:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <HAL_RCC_OscConfig+0x4f8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d106      	bne.n	8000eea <HAL_RCC_OscConfig+0x312>
 8000edc:	4b7b      	ldr	r3, [pc, #492]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4a7a      	ldr	r2, [pc, #488]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6213      	str	r3, [r2, #32]
 8000ee8:	e02d      	b.n	8000f46 <HAL_RCC_OscConfig+0x36e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x334>
 8000ef2:	4b76      	ldr	r3, [pc, #472]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a75      	ldr	r2, [pc, #468]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ef8:	f023 0301 	bic.w	r3, r3, #1
 8000efc:	6213      	str	r3, [r2, #32]
 8000efe:	4b73      	ldr	r3, [pc, #460]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a72      	ldr	r2, [pc, #456]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	f023 0304 	bic.w	r3, r3, #4
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	e01c      	b.n	8000f46 <HAL_RCC_OscConfig+0x36e>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x356>
 8000f14:	4b6d      	ldr	r3, [pc, #436]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	4a6c      	ldr	r2, [pc, #432]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6213      	str	r3, [r2, #32]
 8000f20:	4b6a      	ldr	r3, [pc, #424]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4a69      	ldr	r2, [pc, #420]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6213      	str	r3, [r2, #32]
 8000f2c:	e00b      	b.n	8000f46 <HAL_RCC_OscConfig+0x36e>
 8000f2e:	4b67      	ldr	r3, [pc, #412]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4a66      	ldr	r2, [pc, #408]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 0301 	bic.w	r3, r3, #1
 8000f38:	6213      	str	r3, [r2, #32]
 8000f3a:	4b64      	ldr	r3, [pc, #400]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a63      	ldr	r2, [pc, #396]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f40:	f023 0304 	bic.w	r3, r3, #4
 8000f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d015      	beq.n	8000f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fbc1 	bl	80006d4 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f54:	e00a      	b.n	8000f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f56:	f7ff fbbd 	bl	80006d4 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e0ab      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6c:	4b57      	ldr	r3, [pc, #348]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f6e:	6a1b      	ldr	r3, [r3, #32]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0ee      	beq.n	8000f56 <HAL_RCC_OscConfig+0x37e>
 8000f78:	e014      	b.n	8000fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7a:	f7ff fbab 	bl	80006d4 <HAL_GetTick>
 8000f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f80:	e00a      	b.n	8000f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f82:	f7ff fba7 	bl	80006d4 <HAL_GetTick>
 8000f86:	4602      	mov	r2, r0
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e095      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f98:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1ee      	bne.n	8000f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d105      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000faa:	4b48      	ldr	r3, [pc, #288]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	4a47      	ldr	r2, [pc, #284]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8081 	beq.w	80010c2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc0:	4b42      	ldr	r3, [pc, #264]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 030c 	and.w	r3, r3, #12
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d061      	beq.n	8001090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d146      	bne.n	8001062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd4:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_OscConfig+0x4fc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fda:	f7ff fb7b 	bl	80006d4 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe2:	f7ff fb77 	bl	80006d4 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e067      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f0      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d108      	bne.n	800101c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800100a:	4b30      	ldr	r3, [pc, #192]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	492d      	ldr	r1, [pc, #180]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a19      	ldr	r1, [r3, #32]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	430b      	orrs	r3, r1
 800102e:	4927      	ldr	r1, [pc, #156]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_RCC_OscConfig+0x4fc>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fb4b 	bl	80006d4 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fb47 	bl	80006d4 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e037      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0f0      	beq.n	8001042 <HAL_RCC_OscConfig+0x46a>
 8001060:	e02f      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <HAL_RCC_OscConfig+0x4fc>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fb34 	bl	80006d4 <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001070:	f7ff fb30 	bl	80006d4 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e020      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x498>
 800108e:	e018      	b.n	80010c2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69db      	ldr	r3, [r3, #28]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e013      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_RCC_OscConfig+0x4f4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d001      	beq.n	80010c2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40007000 	.word	0x40007000
 80010d4:	42420060 	.word	0x42420060

080010d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0d0      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b6a      	ldr	r3, [pc, #424]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d910      	bls.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b67      	ldr	r3, [pc, #412]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4965      	ldr	r1, [pc, #404]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4313      	orrs	r3, r2
 8001108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	4b63      	ldr	r3, [pc, #396]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d001      	beq.n	800111c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0b8      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a58      	ldr	r2, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800113e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a52      	ldr	r2, [pc, #328]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001156:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001158:	4b50      	ldr	r3, [pc, #320]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	494d      	ldr	r1, [pc, #308]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	4313      	orrs	r3, r2
 8001168:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d040      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	4b47      	ldr	r3, [pc, #284]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d115      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e07f      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e073      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06b      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4936      	ldr	r1, [pc, #216]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fa84 	bl	80006d4 <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fa80 	bl	80006d4 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e053      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d210      	bcs.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f023 0207 	bic.w	r2, r3, #7
 800120e:	4922      	ldr	r1, [pc, #136]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	4313      	orrs	r3, r2
 8001214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001216:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d001      	beq.n	8001228 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e032      	b.n	800128e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d008      	beq.n	8001246 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4916      	ldr	r1, [pc, #88]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001242:	4313      	orrs	r3, r2
 8001244:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	2b00      	cmp	r3, #0
 8001250:	d009      	beq.n	8001266 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001266:	f000 f821 	bl	80012ac <HAL_RCC_GetSysClockFreq>
 800126a:	4601      	mov	r1, r0
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001278:	5cd3      	ldrb	r3, [r2, r3]
 800127a:	fa21 f303 	lsr.w	r3, r1, r3
 800127e:	4a09      	ldr	r2, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x1cc>)
 8001280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f9e2 	bl	8000650 <HAL_InitTick>

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40022000 	.word	0x40022000
 800129c:	40021000 	.word	0x40021000
 80012a0:	08001d74 	.word	0x08001d74
 80012a4:	20000000 	.word	0x20000000
 80012a8:	20000004 	.word	0x20000004

080012ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012ac:	b490      	push	{r4, r7}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012b2:	4b2a      	ldr	r3, [pc, #168]	; (800135c <HAL_RCC_GetSysClockFreq+0xb0>)
 80012b4:	1d3c      	adds	r4, r7, #4
 80012b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012bc:	4b28      	ldr	r3, [pc, #160]	; (8001360 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012d6:	4b23      	ldr	r3, [pc, #140]	; (8001364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d002      	beq.n	80012ec <HAL_RCC_GetSysClockFreq+0x40>
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d003      	beq.n	80012f2 <HAL_RCC_GetSysClockFreq+0x46>
 80012ea:	e02d      	b.n	8001348 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012ee:	623b      	str	r3, [r7, #32]
      break;
 80012f0:	e02d      	b.n	800134e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	0c9b      	lsrs	r3, r3, #18
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012fe:	4413      	add	r3, r2
 8001300:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001304:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	0c5b      	lsrs	r3, r3, #17
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800131e:	4413      	add	r3, r2
 8001320:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001324:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_RCC_GetSysClockFreq+0xbc>)
 800132a:	fb02 f203 	mul.w	r2, r2, r3
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	fbb2 f3f3 	udiv	r3, r2, r3
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
 8001336:	e004      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4a0c      	ldr	r2, [pc, #48]	; (800136c <HAL_RCC_GetSysClockFreq+0xc0>)
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	623b      	str	r3, [r7, #32]
      break;
 8001346:	e002      	b.n	800134e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_RCC_GetSysClockFreq+0xbc>)
 800134a:	623b      	str	r3, [r7, #32]
      break;
 800134c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800134e:	6a3b      	ldr	r3, [r7, #32]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bc90      	pop	{r4, r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	08001d60 	.word	0x08001d60
 8001360:	08001d70 	.word	0x08001d70
 8001364:	40021000 	.word	0x40021000
 8001368:	007a1200 	.word	0x007a1200
 800136c:	003d0900 	.word	0x003d0900

08001370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <RCC_Delay+0x34>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <RCC_Delay+0x38>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	0a5b      	lsrs	r3, r3, #9
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800138c:	bf00      	nop
  }
  while (Delay --);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	60fa      	str	r2, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f9      	bne.n	800138c <RCC_Delay+0x1c>
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000000 	.word	0x20000000
 80013a8:	10624dd3 	.word	0x10624dd3

080013ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e01d      	b.n	80013fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d106      	bne.n	80013d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff f852 	bl	800047c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3304      	adds	r3, #4
 80013e8:	4619      	mov	r1, r3
 80013ea:	4610      	mov	r0, r2
 80013ec:	f000 f9bc 	bl	8001768 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e01d      	b.n	8001450 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d106      	bne.n	800142e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f815 	bl	8001458 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2202      	movs	r2, #2
 8001432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f000 f991 	bl	8001768 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
	...

0800146c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800147e:	2b01      	cmp	r3, #1
 8001480:	d101      	bne.n	8001486 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001482:	2302      	movs	r3, #2
 8001484:	e0b4      	b.n	80015f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	f200 809f 	bhi.w	80015dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014d9 	.word	0x080014d9
 80014a8:	080015dd 	.word	0x080015dd
 80014ac:	080015dd 	.word	0x080015dd
 80014b0:	080015dd 	.word	0x080015dd
 80014b4:	08001519 	.word	0x08001519
 80014b8:	080015dd 	.word	0x080015dd
 80014bc:	080015dd 	.word	0x080015dd
 80014c0:	080015dd 	.word	0x080015dd
 80014c4:	0800155b 	.word	0x0800155b
 80014c8:	080015dd 	.word	0x080015dd
 80014cc:	080015dd 	.word	0x080015dd
 80014d0:	080015dd 	.word	0x080015dd
 80014d4:	0800159b 	.word	0x0800159b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f9a4 	bl	800182c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	699a      	ldr	r2, [r3, #24]
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0208 	orr.w	r2, r2, #8
 80014f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0204 	bic.w	r2, r2, #4
 8001502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6999      	ldr	r1, [r3, #24]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	619a      	str	r2, [r3, #24]
      break;
 8001516:	e062      	b.n	80015de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f9ea 	bl	80018f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699a      	ldr	r2, [r3, #24]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699a      	ldr	r2, [r3, #24]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6999      	ldr	r1, [r3, #24]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	021a      	lsls	r2, r3, #8
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	619a      	str	r2, [r3, #24]
      break;
 8001558:	e041      	b.n	80015de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fa33 	bl	80019cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69da      	ldr	r2, [r3, #28]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 0208 	orr.w	r2, r2, #8
 8001574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	69da      	ldr	r2, [r3, #28]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0204 	bic.w	r2, r2, #4
 8001584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	69d9      	ldr	r1, [r3, #28]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	61da      	str	r2, [r3, #28]
      break;
 8001598:	e021      	b.n	80015de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 fa7d 	bl	8001aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69da      	ldr	r2, [r3, #28]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	69d9      	ldr	r1, [r3, #28]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	021a      	lsls	r2, r3, #8
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	61da      	str	r2, [r3, #28]
      break;
 80015da:	e000      	b.n	80015de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80015dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <HAL_TIM_ConfigClockSource+0x18>
 800160c:	2302      	movs	r3, #2
 800160e:	e0a6      	b.n	800175e <HAL_TIM_ConfigClockSource+0x166>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2202      	movs	r2, #2
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800162e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001636:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b40      	cmp	r3, #64	; 0x40
 8001646:	d067      	beq.n	8001718 <HAL_TIM_ConfigClockSource+0x120>
 8001648:	2b40      	cmp	r3, #64	; 0x40
 800164a:	d80b      	bhi.n	8001664 <HAL_TIM_ConfigClockSource+0x6c>
 800164c:	2b10      	cmp	r3, #16
 800164e:	d073      	beq.n	8001738 <HAL_TIM_ConfigClockSource+0x140>
 8001650:	2b10      	cmp	r3, #16
 8001652:	d802      	bhi.n	800165a <HAL_TIM_ConfigClockSource+0x62>
 8001654:	2b00      	cmp	r3, #0
 8001656:	d06f      	beq.n	8001738 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001658:	e078      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800165a:	2b20      	cmp	r3, #32
 800165c:	d06c      	beq.n	8001738 <HAL_TIM_ConfigClockSource+0x140>
 800165e:	2b30      	cmp	r3, #48	; 0x30
 8001660:	d06a      	beq.n	8001738 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001662:	e073      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001664:	2b70      	cmp	r3, #112	; 0x70
 8001666:	d00d      	beq.n	8001684 <HAL_TIM_ConfigClockSource+0x8c>
 8001668:	2b70      	cmp	r3, #112	; 0x70
 800166a:	d804      	bhi.n	8001676 <HAL_TIM_ConfigClockSource+0x7e>
 800166c:	2b50      	cmp	r3, #80	; 0x50
 800166e:	d033      	beq.n	80016d8 <HAL_TIM_ConfigClockSource+0xe0>
 8001670:	2b60      	cmp	r3, #96	; 0x60
 8001672:	d041      	beq.n	80016f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001674:	e06a      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800167a:	d066      	beq.n	800174a <HAL_TIM_ConfigClockSource+0x152>
 800167c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001680:	d017      	beq.n	80016b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001682:	e063      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f000 fac9 	bl	8001c2a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80016a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	609a      	str	r2, [r3, #8]
      break;
 80016b0:	e04c      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f000 fab2 	bl	8001c2a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016d4:	609a      	str	r2, [r3, #8]
      break;
 80016d6:	e039      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f000 fa29 	bl	8001b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2150      	movs	r1, #80	; 0x50
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fa80 	bl	8001bf6 <TIM_ITRx_SetConfig>
      break;
 80016f6:	e029      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	461a      	mov	r2, r3
 8001706:	f000 fa47 	bl	8001b98 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2160      	movs	r1, #96	; 0x60
 8001710:	4618      	mov	r0, r3
 8001712:	f000 fa70 	bl	8001bf6 <TIM_ITRx_SetConfig>
      break;
 8001716:	e019      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	461a      	mov	r2, r3
 8001726:	f000 fa09 	bl	8001b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fa60 	bl	8001bf6 <TIM_ITRx_SetConfig>
      break;
 8001736:	e009      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f000 fa57 	bl	8001bf6 <TIM_ITRx_SetConfig>
      break;
 8001748:	e000      	b.n	800174c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800174a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a29      	ldr	r2, [pc, #164]	; (8001820 <TIM_Base_SetConfig+0xb8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00b      	beq.n	8001798 <TIM_Base_SetConfig+0x30>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001786:	d007      	beq.n	8001798 <TIM_Base_SetConfig+0x30>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a26      	ldr	r2, [pc, #152]	; (8001824 <TIM_Base_SetConfig+0xbc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d003      	beq.n	8001798 <TIM_Base_SetConfig+0x30>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a25      	ldr	r2, [pc, #148]	; (8001828 <TIM_Base_SetConfig+0xc0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d108      	bne.n	80017aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800179e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <TIM_Base_SetConfig+0xb8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00b      	beq.n	80017ca <TIM_Base_SetConfig+0x62>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017b8:	d007      	beq.n	80017ca <TIM_Base_SetConfig+0x62>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <TIM_Base_SetConfig+0xbc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d003      	beq.n	80017ca <TIM_Base_SetConfig+0x62>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <TIM_Base_SetConfig+0xc0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d108      	bne.n	80017dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <TIM_Base_SetConfig+0xb8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d103      	bne.n	8001810 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	615a      	str	r2, [r3, #20]
}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40012c00 	.word	0x40012c00
 8001824:	40000400 	.word	0x40000400
 8001828:	40000800 	.word	0x40000800

0800182c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	f023 0201 	bic.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800185a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 0303 	bic.w	r3, r3, #3
 8001862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f023 0302 	bic.w	r3, r3, #2
 8001874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4313      	orrs	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <TIM_OC1_SetConfig+0xc8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d10c      	bne.n	80018a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f023 0308 	bic.w	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <TIM_OC1_SetConfig+0xc8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d111      	bne.n	80018ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	621a      	str	r2, [r3, #32]
}
 80018e8:	bf00      	nop
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	f023 0210 	bic.w	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800192e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f023 0320 	bic.w	r3, r3, #32
 8001942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4313      	orrs	r3, r2
 800194e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <TIM_OC2_SetConfig+0xd0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d10d      	bne.n	8001974 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800195e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001972:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <TIM_OC2_SetConfig+0xd0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d113      	bne.n	80019a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800198a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	621a      	str	r2, [r3, #32]
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40012c00 	.word	0x40012c00

080019cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <TIM_OC3_SetConfig+0xd0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10d      	bne.n	8001a46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <TIM_OC3_SetConfig+0xd0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d113      	bne.n	8001a76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	621a      	str	r2, [r3, #32]
}
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40012c00 	.word	0x40012c00

08001aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	031b      	lsls	r3, r3, #12
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <TIM_OC4_SetConfig+0x98>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d109      	bne.n	8001b14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	621a      	str	r2, [r3, #32]
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f023 0201 	bic.w	r2, r3, #1
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f023 030a 	bic.w	r3, r3, #10
 8001b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	621a      	str	r2, [r3, #32]
}
 8001b8e:	bf00      	nop
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b087      	sub	sp, #28
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f023 0210 	bic.w	r2, r3, #16
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001bc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	031b      	lsls	r3, r3, #12
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	621a      	str	r2, [r3, #32]
}
 8001bec:	bf00      	nop
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f043 0307 	orr.w	r3, r3, #7
 8001c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	609a      	str	r2, [r3, #8]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c44:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	021a      	lsls	r2, r3, #8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	609a      	str	r2, [r3, #8]
}
 8001c5e:	bf00      	nop
 8001c60:	371c      	adds	r7, #28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e032      	b.n	8001ce6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cb8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <__libc_init_array>:
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	2500      	movs	r5, #0
 8001cf4:	4e0c      	ldr	r6, [pc, #48]	; (8001d28 <__libc_init_array+0x38>)
 8001cf6:	4c0d      	ldr	r4, [pc, #52]	; (8001d2c <__libc_init_array+0x3c>)
 8001cf8:	1ba4      	subs	r4, r4, r6
 8001cfa:	10a4      	asrs	r4, r4, #2
 8001cfc:	42a5      	cmp	r5, r4
 8001cfe:	d109      	bne.n	8001d14 <__libc_init_array+0x24>
 8001d00:	f000 f822 	bl	8001d48 <_init>
 8001d04:	2500      	movs	r5, #0
 8001d06:	4e0a      	ldr	r6, [pc, #40]	; (8001d30 <__libc_init_array+0x40>)
 8001d08:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <__libc_init_array+0x44>)
 8001d0a:	1ba4      	subs	r4, r4, r6
 8001d0c:	10a4      	asrs	r4, r4, #2
 8001d0e:	42a5      	cmp	r5, r4
 8001d10:	d105      	bne.n	8001d1e <__libc_init_array+0x2e>
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
 8001d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d18:	4798      	blx	r3
 8001d1a:	3501      	adds	r5, #1
 8001d1c:	e7ee      	b.n	8001cfc <__libc_init_array+0xc>
 8001d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d22:	4798      	blx	r3
 8001d24:	3501      	adds	r5, #1
 8001d26:	e7f2      	b.n	8001d0e <__libc_init_array+0x1e>
 8001d28:	08001d84 	.word	0x08001d84
 8001d2c:	08001d84 	.word	0x08001d84
 8001d30:	08001d84 	.word	0x08001d84
 8001d34:	08001d88 	.word	0x08001d88

08001d38 <memset>:
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4402      	add	r2, r0
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d100      	bne.n	8001d42 <memset+0xa>
 8001d40:	4770      	bx	lr
 8001d42:	f803 1b01 	strb.w	r1, [r3], #1
 8001d46:	e7f9      	b.n	8001d3c <memset+0x4>

08001d48 <_init>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	bf00      	nop
 8001d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d4e:	bc08      	pop	{r3}
 8001d50:	469e      	mov	lr, r3
 8001d52:	4770      	bx	lr

08001d54 <_fini>:
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	bf00      	nop
 8001d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5a:	bc08      	pop	{r3}
 8001d5c:	469e      	mov	lr, r3
 8001d5e:	4770      	bx	lr
