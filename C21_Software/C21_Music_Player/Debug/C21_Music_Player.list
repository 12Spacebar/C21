
C21_Music_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008614  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d16c  0800d16c  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  0800d16c  0800d16c  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d16c  0800d16c  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d16c  0800d16c  0001d16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d170  0800d170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800d174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002878  20000224  0800d398  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a9c  0800d398  00022a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c053  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d20  00000000  00000000  0003c2a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000155db  00000000  00000000  0003ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001008  00000000  00000000  000555a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000027f8  00000000  00000000  000565a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015195  00000000  00000000  00058da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00010f07  00000000  00000000  0006df35  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00077af1  00000000  00000000  0007ee3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000f692d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000375c  00000000  00000000  000f69a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000224 	.word	0x20000224
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b40 	.word	0x08004b40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000228 	.word	0x20000228
 8000148:	08004b40 	.word	0x08004b40

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800014e:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000156:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000158:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 800015c:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800015e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000160:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000162:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000164:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000166:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000168:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800016c:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800016e:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	940d      	str	r4, [sp, #52]	; 0x34
 8000172:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800017a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800017e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000182:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000184:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000186:	f001 f8b3 	bl	80012f0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800018a:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000190:	4629      	mov	r1, r5
 8000192:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000194:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000196:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000198:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800019a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800019c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800019e:	f001 fad5 	bl	800174c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001a2:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001a4:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001a6:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001a8:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001aa:	f001 fb8f 	bl	80018cc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80001ae:	b015      	add	sp, #84	; 0x54
 80001b0:	bd30      	pop	{r4, r5, pc}
 80001b2:	bf00      	nop

080001b4 <main>:
{
 80001b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b8:	2400      	movs	r4, #0
{
 80001ba:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 80001bc:	f000 fd6a 	bl	8000c94 <HAL_Init>
  SystemClock_Config();
 80001c0:	f7ff ffc4 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80001c8:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001cc:	f8df b324 	ldr.w	fp, [pc, #804]	; 80004f4 <main+0x340>
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001d0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001d2:	f8db 3018 	ldr.w	r3, [fp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001d6:	f240 4182 	movw	r1, #1154	; 0x482
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001da:	f043 0320 	orr.w	r3, r3, #32
 80001de:	f8cb 3018 	str.w	r3, [fp, #24]
 80001e2:	f8db 3018 	ldr.w	r3, [fp, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001e6:	48b2      	ldr	r0, [pc, #712]	; (80004b0 <main+0x2fc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001e8:	f003 0320 	and.w	r3, r3, #32
 80001ec:	9305      	str	r3, [sp, #20]
 80001ee:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	f8db 3018 	ldr.w	r3, [fp, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB1 PB10 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f4:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	f8cb 3018 	str.w	r3, [fp, #24]
 80001fe:	f8db 3018 	ldr.w	r3, [fp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000202:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000204:	f003 0304 	and.w	r3, r3, #4
 8000208:	9306      	str	r3, [sp, #24]
 800020a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020c:	f8db 3018 	ldr.w	r3, [fp, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000210:	f44f 7a82 	mov.w	sl, #260	; 0x104
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000214:	f043 0308 	orr.w	r3, r3, #8
 8000218:	f8cb 3018 	str.w	r3, [fp, #24]
 800021c:	f8db 3018 	ldr.w	r3, [fp, #24]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000220:	f44f 7900 	mov.w	r9, #512	; 0x200
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	f003 0308 	and.w	r3, r3, #8
 8000228:	9307      	str	r3, [sp, #28]
 800022a:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 800022c:	f000 ffde 	bl	80011ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000230:	4622      	mov	r2, r4
 8000232:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000236:	489f      	ldr	r0, [pc, #636]	; (80004b4 <main+0x300>)
 8000238:	f000 ffd8 	bl	80011ec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin;
 800023c:	f240 4382 	movw	r3, #1154	; 0x482
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000240:	a915      	add	r1, sp, #84	; 0x54
 8000242:	489b      	ldr	r0, [pc, #620]	; (80004b0 <main+0x2fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000244:	9417      	str	r4, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000246:	e9cd 3715 	strd	r3, r7, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024a:	9518      	str	r5, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024c:	f000 fed4 	bl	8000ff8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000250:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000254:	2608      	movs	r6, #8
  hspi1.Init.CRCPolynomial = 10;
 8000256:	f04f 080a 	mov.w	r8, #10
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025a:	a915      	add	r1, sp, #84	; 0x54
 800025c:	4895      	ldr	r0, [pc, #596]	; (80004b4 <main+0x300>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025e:	e9cd 7416 	strd	r7, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000262:	9518      	str	r5, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000264:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000266:	f000 fec7 	bl	8000ff8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800026a:	f8db 3014 	ldr.w	r3, [fp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800026e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000270:	433b      	orrs	r3, r7
 8000272:	f8cb 3014 	str.w	r3, [fp, #20]
 8000276:	f8db 3014 	ldr.w	r3, [fp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800027a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800027c:	403b      	ands	r3, r7
 800027e:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000280:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000282:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000284:	f000 fd4e 	bl	8000d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000288:	200c      	movs	r0, #12
 800028a:	f000 fd81 	bl	8000d90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800028e:	4622      	mov	r2, r4
 8000290:	4621      	mov	r1, r4
 8000292:	200d      	movs	r0, #13
 8000294:	f000 fd46 	bl	8000d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000298:	200d      	movs	r0, #13
 800029a:	f000 fd79 	bl	8000d90 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800029e:	4621      	mov	r1, r4
 80002a0:	4622      	mov	r2, r4
 80002a2:	200f      	movs	r0, #15
 80002a4:	f000 fd3e 	bl	8000d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002a8:	200f      	movs	r0, #15
 80002aa:	f000 fd71 	bl	8000d90 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80002ae:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <main+0x304>)
 80002b0:	4a82      	ldr	r2, [pc, #520]	; (80004bc <main+0x308>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002b2:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002b4:	e9c3 2a00 	strd	r2, sl, [r3]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002b8:	e9c3 9606 	strd	r9, r6, [r3, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002bc:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c0:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002c4:	e9c3 4408 	strd	r4, r4, [r3, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002c8:	629c      	str	r4, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002ca:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002ce:	f001 fcb5 	bl	8001c3c <HAL_SPI_Init>
  MX_FATFS_Init();
 80002d2:	f002 fa6b 	bl	80027ac <MX_FATFS_Init>
  huart2.Init.BaudRate = 115200;
 80002d6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002da:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 80002dc:	4b78      	ldr	r3, [pc, #480]	; (80004c0 <main+0x30c>)
 80002de:	f8df c218 	ldr.w	ip, [pc, #536]	; 80004f8 <main+0x344>
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002e2:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 80002e4:	e9c3 c100 	strd	ip, r1, [r3]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e8:	e9c3 4402 	strd	r4, r4, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ec:	611c      	str	r4, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ee:	e9c3 4406 	strd	r4, r4, [r3, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f2:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f4:	f002 f9fa 	bl	80026ec <HAL_UART_Init>
  hspi2.Instance = SPI2;
 80002f8:	4b72      	ldr	r3, [pc, #456]	; (80004c4 <main+0x310>)
 80002fa:	4a73      	ldr	r2, [pc, #460]	; (80004c8 <main+0x314>)
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002fc:	4618      	mov	r0, r3
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002fe:	e9c3 a401 	strd	sl, r4, [r3, #4]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000302:	e9c3 4905 	strd	r4, r9, [r3, #20]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000306:	e9c3 4403 	strd	r4, r4, [r3, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800030a:	e9c3 4407 	strd	r4, r4, [r3, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800030e:	e9c3 4409 	strd	r4, r4, [r3, #36]	; 0x24
  hspi2.Init.CRCPolynomial = 10;
 8000312:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
  hspi2.Instance = SPI2;
 8000316:	601a      	str	r2, [r3, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000318:	f001 fc90 	bl	8001c3c <HAL_SPI_Init>
  hpcd_USB_FS.Instance = USB;
 800031c:	4b6b      	ldr	r3, [pc, #428]	; (80004cc <main+0x318>)
 800031e:	4a6c      	ldr	r2, [pc, #432]	; (80004d0 <main+0x31c>)
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000320:	4618      	mov	r0, r3
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000322:	e9c3 6501 	strd	r6, r5, [r3, #4]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000326:	e9c3 4406 	strd	r4, r4, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800032a:	621c      	str	r4, [r3, #32]
  hpcd_USB_FS.Instance = USB;
 800032c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800032e:	f04f 0a47 	mov.w	sl, #71	; 0x47
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000332:	f000 ff5f 	bl	80011f4 <HAL_PCD_Init>
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000336:	2380      	movs	r3, #128	; 0x80
  htim2.Init.Period = 22050;
 8000338:	f245 6222 	movw	r2, #22050	; 0x5622
  htim2.Instance = TIM2;
 800033c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000340:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000344:	f04f 0960 	mov.w	r9, #96	; 0x60
  htim2.Instance = TIM2;
 8000348:	4e62      	ldr	r6, [pc, #392]	; (80004d4 <main+0x320>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034c:	4630      	mov	r0, r6
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800034e:	61b3      	str	r3, [r6, #24]
  htim2.Init.Period = 22050;
 8000350:	60f2      	str	r2, [r6, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000352:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000354:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8000358:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 800035c:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8000360:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000362:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8000366:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000368:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800036c:	6134      	str	r4, [r6, #16]
  htim2.Instance = TIM2;
 800036e:	6031      	str	r1, [r6, #0]
  htim2.Init.Prescaler = 71;
 8000370:	f8c6 a004 	str.w	sl, [r6, #4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000374:	f002 f872 	bl	800245c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000378:	a90a      	add	r1, sp, #40	; 0x28
 800037a:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037c:	950a      	str	r5, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037e:	f001 fed7 	bl	8002130 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000382:	4630      	mov	r0, r6
 8000384:	f002 f886 	bl	8002494 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000388:	a908      	add	r1, sp, #32
 800038a:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000390:	f002 f946 	bl	8002620 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000394:	4622      	mov	r2, r4
 8000396:	a915      	add	r1, sp, #84	; 0x54
 8000398:	4630      	mov	r0, r6
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800039a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039e:	9419      	str	r4, [sp, #100]	; 0x64
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a0:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a4:	f002 f8c0 	bl	8002528 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80003a8:	4630      	mov	r0, r6
 80003aa:	f000 fb0d 	bl	80009c8 <HAL_TIM_MspPostInit>
  htim1.Init.Period = 1000;
 80003ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim1.Instance = TIM1;
 80003b2:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80004fc <main+0x348>
 80003b6:	4a48      	ldr	r2, [pc, #288]	; (80004d8 <main+0x324>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003b8:	4640      	mov	r0, r8
  htim1.Instance = TIM1;
 80003ba:	f8c8 2000 	str.w	r2, [r8]
  htim1.Init.Period = 1000;
 80003be:	f8c8 300c 	str.w	r3, [r8, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c2:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80003c6:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ca:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ce:	e9c8 a401 	strd	sl, r4, [r8, #4]
  htim1.Init.RepetitionCounter = 0;
 80003d2:	e9c8 4404 	strd	r4, r4, [r8, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d6:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003da:	f002 f83f 	bl	800245c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003de:	a915      	add	r1, sp, #84	; 0x54
 80003e0:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e2:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003e4:	f001 fea4 	bl	8002130 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e8:	a90a      	add	r1, sp, #40	; 0x28
 80003ea:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f0:	f002 f916 	bl	8002620 <HAL_TIMEx_MasterConfigSynchronization>
  htim3.Init.Period = 255;
 80003f4:	23ff      	movs	r3, #255	; 0xff
  htim3.Instance = TIM3;
 80003f6:	4d39      	ldr	r5, [pc, #228]	; (80004dc <main+0x328>)
 80003f8:	4a39      	ldr	r2, [pc, #228]	; (80004e0 <main+0x32c>)
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003fa:	4628      	mov	r0, r5
  htim3.Init.Period = 255;
 80003fc:	60eb      	str	r3, [r5, #12]
  htim3.Instance = TIM3;
 80003fe:	602a      	str	r2, [r5, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000400:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000404:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8000408:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 800040c:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8000410:	941b      	str	r4, [sp, #108]	; 0x6c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000412:	e9c5 7401 	strd	r7, r4, [r5, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000416:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800041a:	f002 f83b 	bl	8002494 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800041e:	a90a      	add	r1, sp, #40	; 0x28
 8000420:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000422:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000426:	f002 f8fb 	bl	8002620 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800042a:	2204      	movs	r2, #4
 800042c:	a915      	add	r1, sp, #84	; 0x54
 800042e:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 8000430:	e9cd 9415 	strd	r9, r4, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000434:	9417      	str	r4, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000436:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000438:	f002 f876 	bl	8002528 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800043c:	4628      	mov	r0, r5
 800043e:	f000 fac3 	bl	80009c8 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start_IT(&htim1);
 8000442:	4640      	mov	r0, r8
 8000444:	f001 fe40 	bl	80020c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000448:	4621      	mov	r1, r4
 800044a:	4630      	mov	r0, r6
 800044c:	f001 fe6e 	bl	800212c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10000);
 8000450:	f242 7210 	movw	r2, #10000	; 0x2710
 8000454:	6833      	ldr	r3, [r6, #0]
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000456:	2104      	movs	r1, #4
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10000);
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800045a:	4628      	mov	r0, r5
 800045c:	f001 fe66 	bl	800212c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 800);
 8000460:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000464:	682b      	ldr	r3, [r5, #0]
  fres = f_mount ( &fs ,  "" ,   1);
 8000466:	463a      	mov	r2, r7
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 800);
 8000468:	6399      	str	r1, [r3, #56]	; 0x38
  fres = f_mount ( &fs ,  "" ,   1);
 800046a:	481e      	ldr	r0, [pc, #120]	; (80004e4 <main+0x330>)
 800046c:	491e      	ldr	r1, [pc, #120]	; (80004e8 <main+0x334>)
 800046e:	f004 f837 	bl	80044e0 <f_mount>
 8000472:	4c1e      	ldr	r4, [pc, #120]	; (80004ec <main+0x338>)
 8000474:	7020      	strb	r0, [r4, #0]
   while ( fres !=  FR_OK ){
 8000476:	b168      	cbz	r0, 8000494 <main+0x2e0>
 	  fres = f_mount ( &fs ,  "" ,   1);
 8000478:	4f1b      	ldr	r7, [pc, #108]	; (80004e8 <main+0x334>)
 800047a:	4e1a      	ldr	r6, [pc, #104]	; (80004e4 <main+0x330>)
 800047c:	2201      	movs	r2, #1
 800047e:	4639      	mov	r1, r7
 8000480:	4630      	mov	r0, r6
 8000482:	f004 f82d 	bl	80044e0 <f_mount>
 8000486:	7020      	strb	r0, [r4, #0]
 	  HAL_Delay(100);
 8000488:	2064      	movs	r0, #100	; 0x64
 800048a:	f000 fc27 	bl	8000cdc <HAL_Delay>
   while ( fres !=  FR_OK ){
 800048e:	7823      	ldrb	r3, [r4, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1f3      	bne.n	800047c <main+0x2c8>
   ST7735_Init();
 8000494:	f000 f8f6 	bl	8000684 <ST7735_Init>
   FRESULT res = f_open(&file, "trungthu.wav", FA_READ);
 8000498:	2201      	movs	r2, #1
 800049a:	4915      	ldr	r1, [pc, #84]	; (80004f0 <main+0x33c>)
 800049c:	a80a      	add	r0, sp, #40	; 0x28
 800049e:	f004 f85f 	bl	8004560 <f_open>
   if(res != FR_OK) {
 80004a2:	b368      	cbz	r0, 8000500 <main+0x34c>
       return -1;
 80004a4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80004a8:	b021      	add	sp, #132	; 0x84
 80004aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004ae:	bf00      	nop
 80004b0:	40010c00 	.word	0x40010c00
 80004b4:	40010800 	.word	0x40010800
 80004b8:	200015e8 	.word	0x200015e8
 80004bc:	40013000 	.word	0x40013000
 80004c0:	20001680 	.word	0x20001680
 80004c4:	20000478 	.word	0x20000478
 80004c8:	40003800 	.word	0x40003800
 80004cc:	20001750 	.word	0x20001750
 80004d0:	40005c00 	.word	0x40005c00
 80004d4:	20001640 	.word	0x20001640
 80004d8:	40012c00 	.word	0x40012c00
 80004dc:	20001500 	.word	0x20001500
 80004e0:	40000400 	.word	0x40000400
 80004e4:	200004d0 	.word	0x200004d0
 80004e8:	0800cb74 	.word	0x0800cb74
 80004ec:	2000174c 	.word	0x2000174c
 80004f0:	0800cb68 	.word	0x0800cb68
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40004400 	.word	0x40004400
 80004fc:	200015a4 	.word	0x200015a4
      res = f_read(&file, header, sizeof(header), &bytesRead);
 8000500:	a915      	add	r1, sp, #84	; 0x54
 8000502:	ab08      	add	r3, sp, #32
 8000504:	222c      	movs	r2, #44	; 0x2c
 8000506:	a80a      	add	r0, sp, #40	; 0x28
 8000508:	f004 f92a 	bl	8004760 <f_read>
      if(res != FR_OK) {
 800050c:	4601      	mov	r1, r0
 800050e:	bb58      	cbnz	r0, 8000568 <main+0x3b4>
      ST7735_DrawImage(0, 0, 128, 128, &doge);
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	4c18      	ldr	r4, [pc, #96]	; (8000574 <main+0x3c0>)
 8000514:	461a      	mov	r2, r3
 8000516:	9400      	str	r4, [sp, #0]
 8000518:	f000 f8e8 	bl	80006ec <ST7735_DrawImage>
   while(f_eof (&file) == 0){
 800051c:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 8000520:	429a      	cmp	r2, r3
 8000522:	d015      	beq.n	8000550 <main+0x39c>
   res = f_read(&file, data, sizeof(data), &bytesRead);
 8000524:	ab08      	add	r3, sp, #32
 8000526:	2201      	movs	r2, #1
 8000528:	a903      	add	r1, sp, #12
 800052a:	a80a      	add	r0, sp, #40	; 0x28
 800052c:	f004 f918 	bl	8004760 <f_read>
         if(res != FR_OK) {
 8000530:	b9d0      	cbnz	r0, 8000568 <main+0x3b4>
         __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 255 - data[0]);
 8000532:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000536:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800053a:	6829      	ldr	r1, [r5, #0]
 800053c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000540:	638b      	str	r3, [r1, #56]	; 0x38
             asm("NOP");
 8000542:	bf00      	nop
         for(int a = 0; a <450; a++){
 8000544:	3a01      	subs	r2, #1
 8000546:	d1fc      	bne.n	8000542 <main+0x38e>
   while(f_eof (&file) == 0){
 8000548:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800054c:	429a      	cmp	r2, r3
 800054e:	d1e9      	bne.n	8000524 <main+0x370>
      res = f_close(&file);
 8000550:	a80a      	add	r0, sp, #40	; 0x28
 8000552:	f004 fa43 	bl	80049dc <f_close>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, sin_table[i]);
 8000556:	6828      	ldr	r0, [r5, #0]
 8000558:	4907      	ldr	r1, [pc, #28]	; (8000578 <main+0x3c4>)
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <main+0x3c8>)
 800055c:	f833 2f02 	ldrh.w	r2, [r3, #2]!
	  for(int i = 0; i< 256; i++){
 8000560:	428b      	cmp	r3, r1
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, sin_table[i]);
 8000562:	6382      	str	r2, [r0, #56]	; 0x38
	  for(int i = 0; i< 256; i++){
 8000564:	d1fa      	bne.n	800055c <main+0x3a8>
 8000566:	e7f8      	b.n	800055a <main+0x3a6>
             f_close(&file);
 8000568:	a80a      	add	r0, sp, #40	; 0x28
 800056a:	f004 fa37 	bl	80049dc <f_close>
             return -2;
 800056e:	f06f 0001 	mvn.w	r0, #1
 8000572:	e799      	b.n	80004a8 <main+0x2f4>
 8000574:	08004b68 	.word	0x08004b68
 8000578:	200001fe 	.word	0x200001fe
 800057c:	1ffffffe 	.word	0x1ffffffe

08000580 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 8000584:	b510      	push	{r4, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	ac02      	add	r4, sp, #8
 800058a:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <ST7735_WriteCommand+0x28>)
 8000596:	f000 fe29 	bl	80011ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800059a:	4621      	mov	r1, r4
 800059c:	f04f 33ff 	mov.w	r3, #4294967295
 80005a0:	2201      	movs	r2, #1
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <ST7735_WriteCommand+0x2c>)
 80005a4:	f001 fb8a 	bl	8001cbc <HAL_SPI_Transmit>
}
 80005a8:	b002      	add	sp, #8
 80005aa:	bd10      	pop	{r4, pc}
 80005ac:	40010800 	.word	0x40010800
 80005b0:	20000478 	.word	0x20000478

080005b4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	4604      	mov	r4, r0
 80005b8:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c0:	4805      	ldr	r0, [pc, #20]	; (80005d8 <ST7735_WriteData+0x24>)
 80005c2:	f000 fe13 	bl	80011ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,1000);
 80005c6:	b2aa      	uxth	r2, r5
 80005c8:	4621      	mov	r1, r4
}
 80005ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,1000);
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	4802      	ldr	r0, [pc, #8]	; (80005dc <ST7735_WriteData+0x28>)
 80005d4:	f001 bb72 	b.w	8001cbc <HAL_SPI_Transmit>
 80005d8:	40010800 	.word	0x40010800
 80005dc:	20000478 	.word	0x20000478

080005e0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80005e2:	7805      	ldrb	r5, [r0, #0]
 80005e4:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 80005e6:	3d01      	subs	r5, #1
 80005e8:	b2ed      	uxtb	r5, r5
 80005ea:	2dff      	cmp	r5, #255	; 0xff
 80005ec:	d00f      	beq.n	800060e <ST7735_ExecuteCommandList+0x2e>
        uint8_t cmd = *addr++;
        ST7735_WriteCommand(cmd);
 80005ee:	4634      	mov	r4, r6
 80005f0:	f814 0b02 	ldrb.w	r0, [r4], #2
 80005f4:	f7ff ffc6 	bl	8000584 <ST7735_WriteCommand>

        numArgs = *addr++;
 80005f8:	7876      	ldrb	r6, [r6, #1]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
        numArgs &= ~DELAY;
        if(numArgs) {
 80005fa:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 80005fe:	d111      	bne.n	8000624 <ST7735_ExecuteCommandList+0x44>
            ST7735_WriteData((uint8_t*)addr, numArgs);
            addr += numArgs;
        }

        if(ms) {
 8000600:	0633      	lsls	r3, r6, #24
 8000602:	d405      	bmi.n	8000610 <ST7735_ExecuteCommandList+0x30>
            ms = *addr++;
 8000604:	4626      	mov	r6, r4
    while(numCommands--) {
 8000606:	3d01      	subs	r5, #1
 8000608:	b2ed      	uxtb	r5, r5
 800060a:	2dff      	cmp	r5, #255	; 0xff
 800060c:	d1ef      	bne.n	80005ee <ST7735_ExecuteCommandList+0xe>
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 800060e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ms = *addr++;
 8000610:	7820      	ldrb	r0, [r4, #0]
 8000612:	3401      	adds	r4, #1
 8000614:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 8000616:	bf08      	it	eq
 8000618:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 800061c:	f000 fb5e 	bl	8000cdc <HAL_Delay>
            ms = *addr++;
 8000620:	4626      	mov	r6, r4
 8000622:	e7f0      	b.n	8000606 <ST7735_ExecuteCommandList+0x26>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000624:	4620      	mov	r0, r4
 8000626:	4639      	mov	r1, r7
 8000628:	f7ff ffc4 	bl	80005b4 <ST7735_WriteData>
            addr += numArgs;
 800062c:	443c      	add	r4, r7
 800062e:	e7e7      	b.n	8000600 <ST7735_ExecuteCommandList+0x20>

08000630 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4616      	mov	r6, r2
 8000634:	b083      	sub	sp, #12
 8000636:	4607      	mov	r7, r0
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000638:	202a      	movs	r0, #42	; 0x2a
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800063a:	460d      	mov	r5, r1
 800063c:	461c      	mov	r4, r3
    ST7735_WriteCommand(ST7735_CASET);
 800063e:	f7ff ffa1 	bl	8000584 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000642:	2300      	movs	r3, #0
    ST7735_WriteData(data, sizeof(data));
 8000644:	a801      	add	r0, sp, #4
 8000646:	2104      	movs	r1, #4
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000648:	3702      	adds	r7, #2
 800064a:	3602      	adds	r6, #2
 800064c:	f88d 3004 	strb.w	r3, [sp, #4]
 8000650:	f88d 3006 	strb.w	r3, [sp, #6]
 8000654:	f88d 7005 	strb.w	r7, [sp, #5]
 8000658:	f88d 6007 	strb.w	r6, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 800065c:	f7ff ffaa 	bl	80005b4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000660:	202b      	movs	r0, #43	; 0x2b
 8000662:	f7ff ff8f 	bl	8000584 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000666:	3503      	adds	r5, #3
    data[3] = y1 + ST7735_YSTART;
    ST7735_WriteData(data, sizeof(data));
 8000668:	a801      	add	r0, sp, #4
 800066a:	2104      	movs	r1, #4
    data[3] = y1 + ST7735_YSTART;
 800066c:	3403      	adds	r4, #3
    data[1] = y0 + ST7735_YSTART;
 800066e:	f88d 5005 	strb.w	r5, [sp, #5]
    data[3] = y1 + ST7735_YSTART;
 8000672:	f88d 4007 	strb.w	r4, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8000676:	f7ff ff9d 	bl	80005b4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800067a:	202c      	movs	r0, #44	; 0x2c
 800067c:	f7ff ff82 	bl	8000584 <ST7735_WriteCommand>
}
 8000680:	b003      	add	sp, #12
 8000682:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000684 <ST7735_Init>:

void ST7735_Init() {
 8000684:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000686:	4c14      	ldr	r4, [pc, #80]	; (80006d8 <ST7735_Init+0x54>)
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000688:	4d14      	ldr	r5, [pc, #80]	; (80006dc <ST7735_Init+0x58>)
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800068a:	4620      	mov	r0, r4
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	f000 fdab 	bl	80011ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000696:	4628      	mov	r0, r5
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	f000 fda5 	bl	80011ec <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80006a2:	2005      	movs	r0, #5
 80006a4:	f000 fb1a 	bl	8000cdc <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ae:	4628      	mov	r0, r5
 80006b0:	f000 fd9c 	bl	80011ec <HAL_GPIO_WritePin>
    ST7735_Select();
    ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <ST7735_Init+0x5c>)
 80006b6:	f7ff ff93 	bl	80005e0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <ST7735_Init+0x60>)
 80006bc:	f7ff ff90 	bl	80005e0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <ST7735_Init+0x64>)
 80006c2:	f7ff ff8d 	bl	80005e0 <ST7735_ExecuteCommandList>
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80006c6:	4620      	mov	r0, r4
    ST7735_Unselect();
}
 80006c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	f000 bd8b 	b.w	80011ec <HAL_GPIO_WritePin>
 80006d6:	bf00      	nop
 80006d8:	40010c00 	.word	0x40010c00
 80006dc:	40010800 	.word	0x40010800
 80006e0:	0800cb78 	.word	0x0800cb78
 80006e4:	0800cbb4 	.word	0x0800cbb4
 80006e8:	0800cbc4 	.word	0x0800cbc4

080006ec <ST7735_DrawImage>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80006ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80006f0:	287f      	cmp	r0, #127	; 0x7f
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80006f2:	9f06      	ldr	r7, [sp, #24]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80006f4:	d832      	bhi.n	800075c <ST7735_DrawImage+0x70>
 80006f6:	297f      	cmp	r1, #127	; 0x7f
 80006f8:	d830      	bhi.n	800075c <ST7735_DrawImage+0x70>
    if((x + w - 1) >= ST7735_WIDTH) return;
 80006fa:	1884      	adds	r4, r0, r2
 80006fc:	2c80      	cmp	r4, #128	; 0x80
 80006fe:	dc2d      	bgt.n	800075c <ST7735_DrawImage+0x70>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000700:	18cc      	adds	r4, r1, r3
 8000702:	2c80      	cmp	r4, #128	; 0x80
 8000704:	dc2a      	bgt.n	800075c <ST7735_DrawImage+0x70>
 8000706:	461d      	mov	r5, r3
 8000708:	4616      	mov	r6, r2
 800070a:	4688      	mov	r8, r1
 800070c:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	4812      	ldr	r0, [pc, #72]	; (8000760 <ST7735_DrawImage+0x74>)
 8000716:	f000 fd69 	bl	80011ec <HAL_GPIO_WritePin>

    ST7735_Select();
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800071a:	b2e0      	uxtb	r0, r4
 800071c:	fa5f f188 	uxtb.w	r1, r8
 8000720:	1e6b      	subs	r3, r5, #1
 8000722:	1e72      	subs	r2, r6, #1
 8000724:	440b      	add	r3, r1
 8000726:	4402      	add	r2, r0
 8000728:	b2db      	uxtb	r3, r3
 800072a:	b2d2      	uxtb	r2, r2
 800072c:	f7ff ff80 	bl	8000630 <ST7735_SetAddressWindow>

    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	480b      	ldr	r0, [pc, #44]	; (8000764 <ST7735_DrawImage+0x78>)
 8000738:	f000 fd58 	bl	80011ec <HAL_GPIO_WritePin>
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, (uint8_t*)data, sizeof(uint16_t)*w*h);
 800073c:	006a      	lsls	r2, r5, #1
 800073e:	fb02 f206 	mul.w	r2, r2, r6
 8000742:	4639      	mov	r1, r7
 8000744:	b292      	uxth	r2, r2
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <ST7735_DrawImage+0x7c>)
 8000748:	f001 fb86 	bl	8001e58 <HAL_SPI_Transmit_DMA>
//    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
    ST7735_Unselect();
}
 800074c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <ST7735_DrawImage+0x74>)
 8000758:	f000 bd48 	b.w	80011ec <HAL_GPIO_WritePin>
}
 800075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000760:	40010c00 	.word	0x40010c00
 8000764:	40010800 	.word	0x40010800
 8000768:	20000478 	.word	0x20000478

0800076c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076c:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <HAL_MspInit+0x3c>)
{
 800076e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000770:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000772:	490e      	ldr	r1, [pc, #56]	; (80007ac <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000774:	f042 0201 	orr.w	r2, r2, #1
 8000778:	619a      	str	r2, [r3, #24]
 800077a:	699a      	ldr	r2, [r3, #24]
 800077c:	f002 0201 	and.w	r2, r2, #1
 8000780:	9200      	str	r2, [sp, #0]
 8000782:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	69da      	ldr	r2, [r3, #28]
 8000786:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800078a:	61da      	str	r2, [r3, #28]
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000796:	684b      	ldr	r3, [r1, #4]
 8000798:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800079c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	b002      	add	sp, #8
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000

080007b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 80007b4:	6803      	ldr	r3, [r0, #0]
 80007b6:	4a56      	ldr	r2, [pc, #344]	; (8000910 <HAL_SPI_MspInit+0x160>)
{
 80007b8:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 80007ba:	4293      	cmp	r3, r2
{
 80007bc:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80007c2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 80007c6:	d004      	beq.n	80007d2 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80007c8:	4a52      	ldr	r2, [pc, #328]	; (8000914 <HAL_SPI_MspInit+0x164>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d05c      	beq.n	8000888 <HAL_SPI_MspInit+0xd8>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007ce:	b009      	add	sp, #36	; 0x24
 80007d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007d2:	2128      	movs	r1, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d6:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007d8:	4b4f      	ldr	r3, [pc, #316]	; (8000918 <HAL_SPI_MspInit+0x168>)
 80007da:	699a      	ldr	r2, [r3, #24]
 80007dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699a      	ldr	r2, [r3, #24]
 80007e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80007e8:	9200      	str	r2, [sp, #0]
 80007ea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	699a      	ldr	r2, [r3, #24]
 80007ee:	f042 0208 	orr.w	r2, r2, #8
 80007f2:	619a      	str	r2, [r3, #24]
 80007f4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007f6:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f8:	f003 0308 	and.w	r3, r3, #8
 80007fc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	4846      	ldr	r0, [pc, #280]	; (800091c <HAL_SPI_MspInit+0x16c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f000 fbf6 	bl	8000ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800080c:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	4843      	ldr	r0, [pc, #268]	; (800091c <HAL_SPI_MspInit+0x16c>)
 8000810:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000814:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f000 fbed 	bl	8000ff8 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800081e:	2080      	movs	r0, #128	; 0x80
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000824:	4a3e      	ldr	r2, [pc, #248]	; (8000920 <HAL_SPI_MspInit+0x170>)
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000826:	4e3f      	ldr	r6, [pc, #252]	; (8000924 <HAL_SPI_MspInit+0x174>)
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000828:	6853      	ldr	r3, [r2, #4]
 800082a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	6053      	str	r3, [r2, #4]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000834:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <HAL_SPI_MspInit+0x178>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000836:	60f0      	str	r0, [r6, #12]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000838:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800083e:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000842:	61b4      	str	r4, [r6, #24]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000844:	6033      	str	r3, [r6, #0]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000846:	61f1      	str	r1, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000848:	f000 fac8 	bl	8000ddc <HAL_DMA_Init>
 800084c:	2800      	cmp	r0, #0
 800084e:	d158      	bne.n	8000902 <HAL_SPI_MspInit+0x152>
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	2080      	movs	r0, #128	; 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000852:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000854:	2710      	movs	r7, #16
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000856:	2120      	movs	r1, #32
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800085c:	4c33      	ldr	r4, [pc, #204]	; (800092c <HAL_SPI_MspInit+0x17c>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800085e:	64ee      	str	r6, [r5, #76]	; 0x4c
 8000860:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000862:	4e33      	ldr	r6, [pc, #204]	; (8000930 <HAL_SPI_MspInit+0x180>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000864:	60e0      	str	r0, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000866:	4620      	mov	r0, r4
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000868:	e9c4 6700 	strd	r6, r7, [r4]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800086c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000870:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000872:	e9c4 3304 	strd	r3, r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000876:	f000 fab1 	bl	8000ddc <HAL_DMA_Init>
 800087a:	b108      	cbz	r0, 8000880 <HAL_SPI_MspInit+0xd0>
      Error_Handler();
 800087c:	f7ff fe80 	bl	8000580 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000880:	64ac      	str	r4, [r5, #72]	; 0x48
 8000882:	6265      	str	r5, [r4, #36]	; 0x24
}
 8000884:	b009      	add	sp, #36	; 0x24
 8000886:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000888:	f44f 4120 	mov.w	r1, #40960	; 0xa000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088e:	2603      	movs	r6, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <HAL_SPI_MspInit+0x168>)
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000898:	61da      	str	r2, [r3, #28]
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008a0:	9202      	str	r2, [sp, #8]
 80008a2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	699a      	ldr	r2, [r3, #24]
 80008a6:	f042 0208 	orr.w	r2, r2, #8
 80008aa:	619a      	str	r2, [r3, #24]
 80008ac:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80008ae:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <HAL_SPI_MspInit+0x16c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008be:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f000 fb9a 	bl	8000ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	a904      	add	r1, sp, #16
 80008ca:	4814      	ldr	r0, [pc, #80]	; (800091c <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80008cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f000 fb91 	bl	8000ff8 <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d6:	2010      	movs	r0, #16
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008d8:	2280      	movs	r2, #128	; 0x80
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80008de:	4e15      	ldr	r6, [pc, #84]	; (8000934 <HAL_SPI_MspInit+0x184>)
 80008e0:	4915      	ldr	r1, [pc, #84]	; (8000938 <HAL_SPI_MspInit+0x188>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008e2:	e9c6 0401 	strd	r0, r4, [r6, #4]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80008e6:	4630      	mov	r0, r6
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e8:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80008ec:	61b4      	str	r4, [r6, #24]
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80008ee:	6031      	str	r1, [r6, #0]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	60f2      	str	r2, [r6, #12]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008f2:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80008f4:	f000 fa72 	bl	8000ddc <HAL_DMA_Init>
 80008f8:	b930      	cbnz	r0, 8000908 <HAL_SPI_MspInit+0x158>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80008fa:	64ae      	str	r6, [r5, #72]	; 0x48
 80008fc:	6275      	str	r5, [r6, #36]	; 0x24
}
 80008fe:	b009      	add	sp, #36	; 0x24
 8000900:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000902:	f7ff fe3d 	bl	8000580 <Error_Handler>
 8000906:	e7a3      	b.n	8000850 <HAL_SPI_MspInit+0xa0>
      Error_Handler();
 8000908:	f7ff fe3a 	bl	8000580 <Error_Handler>
 800090c:	e7f5      	b.n	80008fa <HAL_SPI_MspInit+0x14a>
 800090e:	bf00      	nop
 8000910:	40013000 	.word	0x40013000
 8000914:	40003800 	.word	0x40003800
 8000918:	40021000 	.word	0x40021000
 800091c:	40010c00 	.word	0x40010c00
 8000920:	40010000 	.word	0x40010000
 8000924:	200016c0 	.word	0x200016c0
 8000928:	4002001c 	.word	0x4002001c
 800092c:	200019e8 	.word	0x200019e8
 8000930:	40020030 	.word	0x40020030
 8000934:	20001708 	.word	0x20001708
 8000938:	40020058 	.word	0x40020058

0800093c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800093c:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM1)
 800093e:	6803      	ldr	r3, [r0, #0]
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_TIM_Base_MspInit+0x58>)
{
 8000942:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8000944:	4293      	cmp	r3, r2
 8000946:	d00f      	beq.n	8000968 <HAL_TIM_Base_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8000948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800094c:	d10a      	bne.n	8000964 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800094e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000952:	69da      	ldr	r2, [r3, #28]
 8000954:	f042 0201 	orr.w	r2, r2, #1
 8000958:	61da      	str	r2, [r3, #28]
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000964:	b002      	add	sp, #8
 8000966:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000968:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800096c:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800096e:	699c      	ldr	r4, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000970:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000972:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000976:	619c      	str	r4, [r3, #24]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000982:	f000 f9cf 	bl	8000d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000986:	2019      	movs	r0, #25
}
 8000988:	b002      	add	sp, #8
 800098a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800098e:	f000 b9ff 	b.w	8000d90 <HAL_NVIC_EnableIRQ>
 8000992:	bf00      	nop
 8000994:	40012c00 	.word	0x40012c00
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 800099c:	6802      	ldr	r2, [r0, #0]
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_TIM_PWM_MspInit+0x28>)
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d000      	beq.n	80009a6 <HAL_TIM_PWM_MspInit+0xa>
 80009a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009a6:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80009aa:	69da      	ldr	r2, [r3, #28]
{
 80009ac:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ae:	f042 0202 	orr.w	r2, r2, #2
 80009b2:	61da      	str	r2, [r3, #28]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	9301      	str	r3, [sp, #4]
 80009bc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009be:	b002      	add	sp, #8
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40000400 	.word	0x40000400

080009c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	2300      	movs	r3, #0
{
 80009ca:	b530      	push	{r4, r5, lr}
  if(htim->Instance==TIM2)
 80009cc:	6802      	ldr	r2, [r0, #0]
{
 80009ce:	b087      	sub	sp, #28
  if(htim->Instance==TIM2)
 80009d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80009d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM2)
 80009dc:	d01a      	beq.n	8000a14 <HAL_TIM_MspPostInit+0x4c>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <HAL_TIM_MspPostInit+0x90>)
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d001      	beq.n	80009e8 <HAL_TIM_MspPostInit+0x20>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009e4:	b007      	add	sp, #28
 80009e6:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009ea:	2580      	movs	r5, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80009f0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	f042 0204 	orr.w	r2, r2, #4
 80009f8:	619a      	str	r2, [r3, #24]
 80009fa:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a04:	9502      	str	r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f000 faf4 	bl	8000ff8 <HAL_GPIO_Init>
}
 8000a10:	b007      	add	sp, #28
 8000a12:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a16:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a1e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000a22:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	f042 0204 	orr.w	r2, r2, #4
 8000a2a:	619a      	str	r2, [r3, #24]
 8000a2c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <HAL_TIM_MspPostInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a38:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f000 fadb 	bl	8000ff8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <HAL_TIM_MspPostInit+0x98>)
 8000a44:	6853      	ldr	r3, [r2, #4]
 8000a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6053      	str	r3, [r2, #4]
}
 8000a54:	b007      	add	sp, #28
 8000a56:	bd30      	pop	{r4, r5, pc}
 8000a58:	40000400 	.word	0x40000400
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010000 	.word	0x40010000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8000a68:	6802      	ldr	r2, [r0, #0]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x68>)
{
 8000a6c:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 8000a6e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000a74:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART2)
 8000a78:	d001      	beq.n	8000a7e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a7a:	b006      	add	sp, #24
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a7e:	2104      	movs	r1, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a84:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000a88:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a90:	61da      	str	r2, [r3, #28]
 8000a92:	69da      	ldr	r2, [r3, #28]
 8000a94:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa4:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	400b      	ands	r3, r1
 8000aa8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f000 faa1 	bl	8000ff8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ab6:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_UART_MspInit+0x6c>)
 8000aba:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ac2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f000 fa98 	bl	8000ff8 <HAL_GPIO_Init>
}
 8000ac8:	b006      	add	sp, #24
 8000aca:	bd70      	pop	{r4, r5, r6, pc}
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40010800 	.word	0x40010800

08000ad4 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8000ad4:	6802      	ldr	r2, [r0, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_PCD_MspInit+0x28>)
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d000      	beq.n	8000ade <HAL_PCD_MspInit+0xa>
 8000adc:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ade:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000ae2:	69da      	ldr	r2, [r3, #28]
{
 8000ae4:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8000ae6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000aea:	61da      	str	r2, [r3, #28]
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000af6:	b002      	add	sp, #8
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40005c00 	.word	0x40005c00

08000b00 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <SDTimer_Handler+0x20>)
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	b11a      	cbz	r2, 8000b0e <SDTimer_Handler+0xe>
    Timer1--;
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	3a01      	subs	r2, #1
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SDTimer_Handler+0x24>)
 8000b10:	7813      	ldrb	r3, [r2, #0]
 8000b12:	b11b      	cbz	r3, 8000b1c <SDTimer_Handler+0x1c>
    Timer2--;
 8000b14:	7813      	ldrb	r3, [r2, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	7013      	strb	r3, [r2, #0]
}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20001a31 	.word	0x20001a31
 8000b24:	20001a30 	.word	0x20001a30

08000b28 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	e7fe      	b.n	8000b2c <HardFault_Handler>
 8000b2e:	bf00      	nop

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler>
 8000b32:	bf00      	nop

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	e7fe      	b.n	8000b34 <BusFault_Handler>
 8000b36:	bf00      	nop

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler>
 8000b3a:	bf00      	nop

08000b3c <SVC_Handler>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <DebugMon_Handler>:
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <PendSV_Handler>:
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <SysTick_Handler+0x24>)
 8000b4c:	7813      	ldrb	r3, [r2, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	7013      	strb	r3, [r2, #0]
  if(FatFsCnt >= 10)
 8000b54:	7813      	ldrb	r3, [r2, #0]
 8000b56:	2b09      	cmp	r3, #9
 8000b58:	d903      	bls.n	8000b62 <SysTick_Handler+0x1a>
  {
    FatFsCnt = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	7013      	strb	r3, [r2, #0]
    SDTimer_Handler();
 8000b5e:	f7ff ffcf 	bl	8000b00 <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8000b66:	f000 b8a7 	b.w	8000cb8 <HAL_IncTick>
 8000b6a:	bf00      	nop
 8000b6c:	20000244 	.word	0x20000244

08000b70 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b70:	4801      	ldr	r0, [pc, #4]	; (8000b78 <DMA1_Channel2_IRQHandler+0x8>)
 8000b72:	f000 b9ab 	b.w	8000ecc <HAL_DMA_IRQHandler>
 8000b76:	bf00      	nop
 8000b78:	200016c0 	.word	0x200016c0

08000b7c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b7c:	4801      	ldr	r0, [pc, #4]	; (8000b84 <DMA1_Channel3_IRQHandler+0x8>)
 8000b7e:	f000 b9a5 	b.w	8000ecc <HAL_DMA_IRQHandler>
 8000b82:	bf00      	nop
 8000b84:	200019e8 	.word	0x200019e8

08000b88 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000b88:	4801      	ldr	r0, [pc, #4]	; (8000b90 <DMA1_Channel5_IRQHandler+0x8>)
 8000b8a:	f000 b99f 	b.w	8000ecc <HAL_DMA_IRQHandler>
 8000b8e:	bf00      	nop
 8000b90:	20001708 	.word	0x20001708

08000b94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <TIM1_UP_IRQHandler+0x14>)
 8000b98:	f001 fb7a 	bl	8002290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  counter++;
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <TIM1_UP_IRQHandler+0x18>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ba4:	bd08      	pop	{r3, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200015a4 	.word	0x200015a4
 8000bac:	20000240 	.word	0x20000240

08000bb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb0:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bb2:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bb6:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8000bbe:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8000bc2:	f041 0101 	orr.w	r1, r1, #1
 8000bc6:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8000bc8:	6859      	ldr	r1, [r3, #4]
 8000bca:	400a      	ands	r2, r1
 8000bcc:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000bd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000bd8:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000be0:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000be8:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8000bea:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bec:	6084      	str	r4, [r0, #8]
#endif 
}
 8000bee:	bc30      	pop	{r4, r5}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	f8ff0000 	.word	0xf8ff0000
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c02:	e003      	b.n	8000c0c <LoopCopyDataInit>

08000c04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c0a:	3104      	adds	r1, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c0c:	480a      	ldr	r0, [pc, #40]	; (8000c38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c14:	d3f6      	bcc.n	8000c04 <CopyDataInit>
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c18:	e002      	b.n	8000c20 <LoopFillZerobss>

08000c1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c1c:	f842 3b04 	str.w	r3, [r2], #4

08000c20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c24:	d3f9      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c26:	f7ff ffc3 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f003 ff65 	bl	8004af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2e:	f7ff fac1 	bl	80001b4 <main>
  bx lr
 8000c32:	4770      	bx	lr
  ldr r3, =_sidata
 8000c34:	0800d174 	.word	0x0800d174
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c3c:	20000224 	.word	0x20000224
  ldr r2, =_sbss
 8000c40:	20000224 	.word	0x20000224
  ldr r3, = _ebss
 8000c44:	20002a9c 	.word	0x20002a9c

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <HAL_InitTick+0x3c>)
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_InitTick+0x40>)
 8000c56:	7809      	ldrb	r1, [r1, #0]
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000c5e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	fbb2 f0f3 	udiv	r0, r2, r3
 8000c64:	f000 f8a2 	bl	8000dac <HAL_SYSTICK_Config>
 8000c68:	b908      	cbnz	r0, 8000c6e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	2d0f      	cmp	r5, #15
 8000c6c:	d901      	bls.n	8000c72 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c74:	4602      	mov	r2, r0
 8000c76:	4629      	mov	r1, r5
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f000 f852 	bl	8000d24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_InitTick+0x44>)
 8000c82:	4620      	mov	r0, r4
 8000c84:	601d      	str	r5, [r3, #0]
}
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
 8000c88:	20000204 	.word	0x20000204
 8000c8c:	20000200 	.word	0x20000200
 8000c90:	20000208 	.word	0x20000208

08000c94 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x20>)
{
 8000c96:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	f043 0310 	orr.w	r3, r3, #16
 8000ca0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca2:	f000 f82d 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f7ff ffd0 	bl	8000c4c <HAL_InitTick>
  HAL_MspInit();
 8000cac:	f7ff fd5e 	bl	800076c <HAL_MspInit>
}
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	bd08      	pop	{r3, pc}
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000cb8:	4a03      	ldr	r2, [pc, #12]	; (8000cc8 <HAL_IncTick+0x10>)
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <HAL_IncTick+0x14>)
 8000cbc:	6811      	ldr	r1, [r2, #0]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	440b      	add	r3, r1
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	20001a34 	.word	0x20001a34
 8000ccc:	20000204 	.word	0x20000204

08000cd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <HAL_GetTick+0x8>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20001a34 	.word	0x20001a34

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b538      	push	{r3, r4, r5, lr}
 8000cde:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff fff6 	bl	8000cd0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000ce6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000ce8:	d002      	beq.n	8000cf0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_Delay+0x20>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf0:	f7ff ffee 	bl	8000cd0 <HAL_GetTick>
 8000cf4:	1b40      	subs	r0, r0, r5
 8000cf6:	42a0      	cmp	r0, r4
 8000cf8:	d3fa      	bcc.n	8000cf0 <HAL_Delay+0x14>
  {
  }
}
 8000cfa:	bd38      	pop	{r3, r4, r5, pc}
 8000cfc:	20000204 	.word	0x20000204

08000d00 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d00:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d06:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d0a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	400b      	ands	r3, r1
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000d18:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d1a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b430      	push	{r4, r5}
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2e:	f1c3 0507 	rsb	r5, r3, #7
 8000d32:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d34:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	bf28      	it	cs
 8000d3a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3c:	2c06      	cmp	r4, #6
 8000d3e:	d919      	bls.n	8000d74 <HAL_NVIC_SetPriority+0x50>
 8000d40:	f04f 34ff 	mov.w	r4, #4294967295
 8000d44:	3b03      	subs	r3, #3
 8000d46:	409c      	lsls	r4, r3
 8000d48:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	40aa      	lsls	r2, r5
 8000d52:	ea21 0102 	bic.w	r1, r1, r2
 8000d56:	fa01 f203 	lsl.w	r2, r1, r3
 8000d5a:	4322      	orrs	r2, r4
 8000d5c:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	db0a      	blt.n	8000d7a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000d68:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000d6c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000d70:	bc30      	pop	{r4, r5}
 8000d72:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d74:	2400      	movs	r4, #0
 8000d76:	4623      	mov	r3, r4
 8000d78:	e7e8      	b.n	8000d4c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_NVIC_SetPriority+0x68>)
 8000d7c:	f000 000f 	and.w	r0, r0, #15
 8000d80:	4403      	add	r3, r0
 8000d82:	761a      	strb	r2, [r3, #24]
 8000d84:	bc30      	pop	{r4, r5}
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	e000ecfc 	.word	0xe000ecfc

08000d90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d90:	2800      	cmp	r0, #0
 8000d92:	db07      	blt.n	8000da4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d94:	2301      	movs	r3, #1
 8000d96:	f000 011f 	and.w	r1, r0, #31
 8000d9a:	4a03      	ldr	r2, [pc, #12]	; (8000da8 <HAL_NVIC_EnableIRQ+0x18>)
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	0940      	lsrs	r0, r0, #5
 8000da0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	3801      	subs	r0, #1
 8000dae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000db2:	d20d      	bcs.n	8000dd0 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db4:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db6:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	4c06      	ldr	r4, [pc, #24]	; (8000dd8 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc6:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000dc8:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dcc:	6019      	str	r1, [r3, #0]
 8000dce:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	e000e010 	.word	0xe000e010
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ddc:	b350      	cbz	r0, 8000e34 <HAL_DMA_Init+0x58>
 8000dde:	4602      	mov	r2, r0
{
 8000de0:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000de2:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000de6:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000de8:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8000dea:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dec:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dee:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df0:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000df2:	4911      	ldr	r1, [pc, #68]	; (8000e38 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df4:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000df6:	4f11      	ldr	r7, [pc, #68]	; (8000e3c <HAL_DMA_Init+0x60>)
 8000df8:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dfa:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfc:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dfe:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e02:	4333      	orrs	r3, r6
 8000e04:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e06:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e08:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8000e0a:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e0c:	0909      	lsrs	r1, r1, #4
 8000e0e:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e10:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e14:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e16:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e1a:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e1c:	4908      	ldr	r1, [pc, #32]	; (8000e40 <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 8000e1e:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8000e20:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8000e22:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8000e24:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e26:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000e28:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8000e2c:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 8000e30:	bcf0      	pop	{r4, r5, r6, r7}
 8000e32:	4770      	bx	lr
    return HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
}
 8000e36:	4770      	bx	lr
 8000e38:	bffdfff8 	.word	0xbffdfff8
 8000e3c:	cccccccd 	.word	0xcccccccd
 8000e40:	40020000 	.word	0x40020000

08000e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e44:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e46:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000e4a:	2c01      	cmp	r4, #1
 8000e4c:	d032      	beq.n	8000eb4 <HAL_DMA_Start_IT+0x70>
 8000e4e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e50:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000e54:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e58:	42a5      	cmp	r5, r4
 8000e5a:	d125      	bne.n	8000ea8 <HAL_DMA_Start_IT+0x64>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e5c:	2600      	movs	r6, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e5e:	f04f 0e02 	mov.w	lr, #2
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e62:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e64:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000e66:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e68:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8000e6a:	f8d0 c03c 	ldr.w	ip, [r0, #60]	; 0x3c
 8000e6e:	40bd      	lsls	r5, r7
    __HAL_DMA_DISABLE(hdma);
 8000e70:	f026 0601 	bic.w	r6, r6, #1

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e74:	6847      	ldr	r7, [r0, #4]
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e76:	f880 e021 	strb.w	lr, [r0, #33]	; 0x21
    __HAL_DMA_DISABLE(hdma);
 8000e7a:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e7c:	f8cc 5004 	str.w	r5, [ip, #4]
  hdma->Instance->CNDTR = DataLength;
 8000e80:	6063      	str	r3, [r4, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 8000e82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e84:	2f10      	cmp	r7, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e86:	bf0b      	itete	eq
 8000e88:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e8a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e8c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e8e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000e90:	b19b      	cbz	r3, 8000eba <HAL_DMA_Start_IT+0x76>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	f043 030e 	orr.w	r3, r3, #14
 8000e98:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9a:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 8000e9c:	6822      	ldr	r2, [r4, #0]
}
 8000e9e:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8000ea0:	f042 0201 	orr.w	r2, r2, #1
 8000ea4:	6022      	str	r2, [r4, #0]
}
 8000ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hdma); 
 8000ea8:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8000eaa:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma); 
 8000eac:	f880 2020 	strb.w	r2, [r0, #32]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hdma);
 8000eb4:	2302      	movs	r3, #2
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f043 030a 	orr.w	r3, r3, #10
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	e7e6      	b.n	8000e9a <HAL_DMA_Start_IT+0x56>

08000ecc <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ecc:	2204      	movs	r2, #4
{
 8000ece:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ed0:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ed4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000ed6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ed8:	408a      	lsls	r2, r1
 8000eda:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000edc:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ede:	d01f      	beq.n	8000f20 <HAL_DMA_IRQHandler+0x54>
 8000ee0:	076a      	lsls	r2, r5, #29
 8000ee2:	d51d      	bpl.n	8000f20 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	0691      	lsls	r1, r2, #26
 8000ee8:	d403      	bmi.n	8000ef2 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	f022 0204 	bic.w	r2, r2, #4
 8000ef0:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ef2:	4a3f      	ldr	r2, [pc, #252]	; (8000ff0 <HAL_DMA_IRQHandler+0x124>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d05c      	beq.n	8000fb2 <HAL_DMA_IRQHandler+0xe6>
 8000ef8:	3214      	adds	r2, #20
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d061      	beq.n	8000fc2 <HAL_DMA_IRQHandler+0xf6>
 8000efe:	3214      	adds	r2, #20
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d068      	beq.n	8000fd6 <HAL_DMA_IRQHandler+0x10a>
 8000f04:	3214      	adds	r2, #20
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d06b      	beq.n	8000fe2 <HAL_DMA_IRQHandler+0x116>
 8000f0a:	3214      	adds	r2, #20
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d05d      	beq.n	8000fcc <HAL_DMA_IRQHandler+0x100>
 8000f10:	3214      	adds	r2, #20
 8000f12:	4293      	cmp	r3, r2
 8000f14:	bf0c      	ite	eq
 8000f16:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000f1a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000f1e:	e049      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xe8>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000f20:	2202      	movs	r2, #2
 8000f22:	408a      	lsls	r2, r1
 8000f24:	4222      	tst	r2, r4
 8000f26:	d022      	beq.n	8000f6e <HAL_DMA_IRQHandler+0xa2>
 8000f28:	07aa      	lsls	r2, r5, #30
 8000f2a:	d520      	bpl.n	8000f6e <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	0691      	lsls	r1, r2, #26
 8000f30:	d406      	bmi.n	8000f40 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8000f32:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	f022 020a 	bic.w	r2, r2, #10
 8000f3a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000f3c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f40:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <HAL_DMA_IRQHandler+0x124>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d02b      	beq.n	8000f9e <HAL_DMA_IRQHandler+0xd2>
 8000f46:	3214      	adds	r2, #20
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d042      	beq.n	8000fd2 <HAL_DMA_IRQHandler+0x106>
 8000f4c:	3214      	adds	r2, #20
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d044      	beq.n	8000fdc <HAL_DMA_IRQHandler+0x110>
 8000f52:	3214      	adds	r2, #20
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d036      	beq.n	8000fc6 <HAL_DMA_IRQHandler+0xfa>
 8000f58:	3214      	adds	r2, #20
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d044      	beq.n	8000fe8 <HAL_DMA_IRQHandler+0x11c>
 8000f5e:	3214      	adds	r2, #20
 8000f60:	4293      	cmp	r3, r2
 8000f62:	bf0c      	ite	eq
 8000f64:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000f68:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000f6c:	e018      	b.n	8000fa0 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f6e:	2208      	movs	r2, #8
 8000f70:	408a      	lsls	r2, r1
 8000f72:	4222      	tst	r2, r4
 8000f74:	d01b      	beq.n	8000fae <HAL_DMA_IRQHandler+0xe2>
 8000f76:	072a      	lsls	r2, r5, #28
 8000f78:	d519      	bpl.n	8000fae <HAL_DMA_IRQHandler+0xe2>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f7a:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8000f7c:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7e:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f80:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f84:	f024 040e 	bic.w	r4, r4, #14
 8000f88:	601c      	str	r4, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8000f8a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f8c:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f8e:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000f90:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000f94:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000f98:	b14b      	cbz	r3, 8000fae <HAL_DMA_IRQHandler+0xe2>
}
 8000f9a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000f9c:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000f9e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000fa0:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fa2:	4c14      	ldr	r4, [pc, #80]	; (8000ff4 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8000fa4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fa6:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000fa8:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000fac:	b93a      	cbnz	r2, 8000fbe <HAL_DMA_IRQHandler+0xf2>
}
 8000fae:	bc70      	pop	{r4, r5, r6}
 8000fb0:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	490f      	ldr	r1, [pc, #60]	; (8000ff4 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8000fb6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fb8:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d0f7      	beq.n	8000fae <HAL_DMA_IRQHandler+0xe2>
}
 8000fbe:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8000fc0:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fc2:	2340      	movs	r3, #64	; 0x40
 8000fc4:	e7f6      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	e7e9      	b.n	8000fa0 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000fd0:	e7f0      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	e7e4      	b.n	8000fa0 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fda:	e7eb      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe0:	e7de      	b.n	8000fa0 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000fe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe6:	e7e5      	b.n	8000fb4 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fec:	e7d8      	b.n	8000fa0 <HAL_DMA_IRQHandler+0xd4>
 8000fee:	bf00      	nop
 8000ff0:	40020008 	.word	0x40020008
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff8:	680a      	ldr	r2, [r1, #0]
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	f000 80dc 	beq.w	80011b8 <HAL_GPIO_Init+0x1c0>
{
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8001004:	f04f 0a00 	mov.w	sl, #0
{
 8001008:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 800100a:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800100c:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80011e0 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001010:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80011e4 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001014:	4f6d      	ldr	r7, [pc, #436]	; (80011cc <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001016:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80011e8 <HAL_GPIO_Init+0x1f0>
 800101a:	e003      	b.n	8001024 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 800101c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	fa32 f305 	lsrs.w	r3, r2, r5
 8001022:	d079      	beq.n	8001118 <HAL_GPIO_Init+0x120>
    ioposition = (0x01uL << position);
 8001024:	2301      	movs	r3, #1
 8001026:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001028:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 800102c:	42a3      	cmp	r3, r4
 800102e:	d1f5      	bne.n	800101c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001030:	684a      	ldr	r2, [r1, #4]
 8001032:	2a12      	cmp	r2, #18
 8001034:	f000 809f 	beq.w	8001176 <HAL_GPIO_Init+0x17e>
 8001038:	f200 8088 	bhi.w	800114c <HAL_GPIO_Init+0x154>
 800103c:	2a02      	cmp	r2, #2
 800103e:	f000 809e 	beq.w	800117e <HAL_GPIO_Init+0x186>
 8001042:	d97d      	bls.n	8001140 <HAL_GPIO_Init+0x148>
 8001044:	2a03      	cmp	r2, #3
 8001046:	d06a      	beq.n	800111e <HAL_GPIO_Init+0x126>
 8001048:	2a11      	cmp	r2, #17
 800104a:	d102      	bne.n	8001052 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800104c:	68cb      	ldr	r3, [r1, #12]
 800104e:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001052:	2cff      	cmp	r4, #255	; 0xff
 8001054:	d867      	bhi.n	8001126 <HAL_GPIO_Init+0x12e>
 8001056:	4681      	mov	r9, r0
 8001058:	6803      	ldr	r3, [r0, #0]
 800105a:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800105c:	260f      	movs	r6, #15
 800105e:	fa06 fb02 	lsl.w	fp, r6, r2
 8001062:	ea23 030b 	bic.w	r3, r3, fp
 8001066:	fa0a f202 	lsl.w	r2, sl, r2
 800106a:	4313      	orrs	r3, r2
 800106c:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001070:	684a      	ldr	r2, [r1, #4]
 8001072:	00d3      	lsls	r3, r2, #3
 8001074:	d562      	bpl.n	800113c <HAL_GPIO_Init+0x144>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001076:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800107a:	f025 0303 	bic.w	r3, r5, #3
 800107e:	f049 0901 	orr.w	r9, r9, #1
 8001082:	f8cc 9018 	str.w	r9, [ip, #24]
 8001086:	f8dc 9018 	ldr.w	r9, [ip, #24]
 800108a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800108e:	f009 0901 	and.w	r9, r9, #1
 8001092:	f8cd 900c 	str.w	r9, [sp, #12]
 8001096:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800109a:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800109e:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010a2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80010a6:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010aa:	fa06 f609 	lsl.w	r6, r6, r9
 80010ae:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010b2:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010b4:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010b6:	d011      	beq.n	80010dc <HAL_GPIO_Init+0xe4>
 80010b8:	4540      	cmp	r0, r8
 80010ba:	d064      	beq.n	8001186 <HAL_GPIO_Init+0x18e>
 80010bc:	4e44      	ldr	r6, [pc, #272]	; (80011d0 <HAL_GPIO_Init+0x1d8>)
 80010be:	42b0      	cmp	r0, r6
 80010c0:	d07b      	beq.n	80011ba <HAL_GPIO_Init+0x1c2>
 80010c2:	4e44      	ldr	r6, [pc, #272]	; (80011d4 <HAL_GPIO_Init+0x1dc>)
 80010c4:	42b0      	cmp	r0, r6
 80010c6:	bf0c      	ite	eq
 80010c8:	f04f 0b03 	moveq.w	fp, #3
 80010cc:	f04f 0b04 	movne.w	fp, #4
 80010d0:	9e01      	ldr	r6, [sp, #4]
 80010d2:	fa0b f909 	lsl.w	r9, fp, r9
 80010d6:	ea46 0609 	orr.w	r6, r6, r9
 80010da:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 80010dc:	9e01      	ldr	r6, [sp, #4]
 80010de:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80010e0:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e2:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 80010e4:	bf4c      	ite	mi
 80010e6:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e8:	43a3      	bicpl	r3, r4
 80010ea:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80010ec:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ee:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 80010f0:	bf4c      	ite	mi
 80010f2:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010f4:	43a3      	bicpl	r3, r4
 80010f6:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f8:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fa:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 80010fc:	bf4c      	ite	mi
 80010fe:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001100:	43a3      	bicpl	r3, r4
 8001102:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001104:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	d515      	bpl.n	8001136 <HAL_GPIO_Init+0x13e>
          SET_BIT(EXTI->FTSR, iocurrent);
 800110a:	431c      	orrs	r4, r3
 800110c:	60fc      	str	r4, [r7, #12]
 800110e:	680a      	ldr	r2, [r1, #0]
	position++;
 8001110:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	fa32 f305 	lsrs.w	r3, r2, r5
 8001116:	d185      	bne.n	8001024 <HAL_GPIO_Init+0x2c>
  }
}
 8001118:	b005      	add	sp, #20
 800111a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800111e:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001120:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001124:	d997      	bls.n	8001056 <HAL_GPIO_Init+0x5e>
 8001126:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 800112a:	3a08      	subs	r2, #8
 800112c:	6843      	ldr	r3, [r0, #4]
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	f100 0904 	add.w	r9, r0, #4
 8001134:	e792      	b.n	800105c <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001136:	ea23 0404 	bic.w	r4, r3, r4
 800113a:	60fc      	str	r4, [r7, #12]
 800113c:	680a      	ldr	r2, [r1, #0]
 800113e:	e76d      	b.n	800101c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001140:	b1a2      	cbz	r2, 800116c <HAL_GPIO_Init+0x174>
 8001142:	2a01      	cmp	r2, #1
 8001144:	d185      	bne.n	8001052 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001146:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800114a:	e782      	b.n	8001052 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 800114c:	4e22      	ldr	r6, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x1e0>)
 800114e:	42b2      	cmp	r2, r6
 8001150:	d00c      	beq.n	800116c <HAL_GPIO_Init+0x174>
 8001152:	d920      	bls.n	8001196 <HAL_GPIO_Init+0x19e>
 8001154:	4e21      	ldr	r6, [pc, #132]	; (80011dc <HAL_GPIO_Init+0x1e4>)
 8001156:	42b2      	cmp	r2, r6
 8001158:	d008      	beq.n	800116c <HAL_GPIO_Init+0x174>
 800115a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 800115e:	42b2      	cmp	r2, r6
 8001160:	d004      	beq.n	800116c <HAL_GPIO_Init+0x174>
 8001162:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 8001166:	42b2      	cmp	r2, r6
 8001168:	f47f af73 	bne.w	8001052 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116c:	688a      	ldr	r2, [r1, #8]
 800116e:	b9e2      	cbnz	r2, 80011aa <HAL_GPIO_Init+0x1b2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001170:	f04f 0a04 	mov.w	sl, #4
 8001174:	e76d      	b.n	8001052 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001176:	68cb      	ldr	r3, [r1, #12]
 8001178:	f103 0a0c 	add.w	sl, r3, #12
          break;
 800117c:	e769      	b.n	8001052 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800117e:	68cb      	ldr	r3, [r1, #12]
 8001180:	f103 0a08 	add.w	sl, r3, #8
          break;
 8001184:	e765      	b.n	8001052 <HAL_GPIO_Init+0x5a>
 8001186:	f04f 0b01 	mov.w	fp, #1
 800118a:	fa0b f909 	lsl.w	r9, fp, r9
 800118e:	ea46 0609 	orr.w	r6, r6, r9
 8001192:	9601      	str	r6, [sp, #4]
 8001194:	e7a2      	b.n	80010dc <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 8001196:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800119a:	42b2      	cmp	r2, r6
 800119c:	d0e6      	beq.n	800116c <HAL_GPIO_Init+0x174>
 800119e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80011a2:	42b2      	cmp	r2, r6
 80011a4:	f47f af55 	bne.w	8001052 <HAL_GPIO_Init+0x5a>
 80011a8:	e7e0      	b.n	800116c <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011aa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80011ac:	bf0c      	ite	eq
 80011ae:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 80011b0:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b2:	f04f 0a08 	mov.w	sl, #8
 80011b6:	e74c      	b.n	8001052 <HAL_GPIO_Init+0x5a>
 80011b8:	4770      	bx	lr
 80011ba:	f04f 0b02 	mov.w	fp, #2
 80011be:	9e01      	ldr	r6, [sp, #4]
 80011c0:	fa0b f909 	lsl.w	r9, fp, r9
 80011c4:	ea46 0609 	orr.w	r6, r6, r9
 80011c8:	9601      	str	r6, [sp, #4]
 80011ca:	e787      	b.n	80010dc <HAL_GPIO_Init+0xe4>
 80011cc:	40010400 	.word	0x40010400
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40011400 	.word	0x40011400
 80011d8:	10210000 	.word	0x10210000
 80011dc:	10310000 	.word	0x10310000
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40010800 	.word	0x40010800
 80011e8:	40010c00 	.word	0x40010c00

080011ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ec:	b902      	cbnz	r2, 80011f0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ee:	0409      	lsls	r1, r1, #16
 80011f0:	6101      	str	r1, [r0, #16]
  }
}
 80011f2:	4770      	bx	lr

080011f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d074      	beq.n	80012e6 <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011fc:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001200:	4604      	mov	r4, r0
 8001202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001206:	2b00      	cmp	r3, #0
 8001208:	d068      	beq.n	80012dc <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800120a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800120c:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800120e:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8001212:	6820      	ldr	r0, [r4, #0]
 8001214:	f001 faa2 	bl	800275c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001218:	f856 cb10 	ldr.w	ip, [r6], #16
 800121c:	466d      	mov	r5, sp
 800121e:	4637      	mov	r7, r6
 8001220:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	1d27      	adds	r7, r4, #4
 8001228:	602b      	str	r3, [r5, #0]
 800122a:	4660      	mov	r0, ip
 800122c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001230:	f001 fa8c 	bl	800274c <USB_CoreInit>
 8001234:	4605      	mov	r5, r0
 8001236:	b130      	cbz	r0, 8001246 <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001238:	2302      	movs	r3, #2
    return HAL_ERROR;
 800123a:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800123c:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001240:	4628      	mov	r0, r5
 8001242:	b007      	add	sp, #28
 8001244:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001246:	4601      	mov	r1, r0
 8001248:	6820      	ldr	r0, [r4, #0]
 800124a:	f001 fa91 	bl	8002770 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800124e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8001252:	f1bc 0f00 	cmp.w	ip, #0
 8001256:	d029      	beq.n	80012ac <HAL_PCD_Init+0xb8>
 8001258:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 800125a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800125e:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 8001260:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 8001266:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800126a:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126c:	b2e8      	uxtb	r0, r5
 800126e:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 8001270:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001274:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001278:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800127e:	d3ef      	bcc.n	8001260 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001280:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8001282:	4619      	mov	r1, r3
 8001284:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001288:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 800128a:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 800128e:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001292:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001294:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001296:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 8001298:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800129c:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012a0:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012a4:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a8:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012aa:	d3eb      	bcc.n	8001284 <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012ae:	466d      	mov	r5, sp
 80012b0:	f8d4 c000 	ldr.w	ip, [r4]
 80012b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012b6:	6833      	ldr	r3, [r6, #0]
 80012b8:	4660      	mov	r0, ip
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80012c0:	f001 fa58 	bl	8002774 <USB_DevInit>
 80012c4:	4605      	mov	r5, r0
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d1b6      	bne.n	8001238 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 80012ca:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80012cc:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 80012d0:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80012d2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80012d6:	f001 fa67 	bl	80027a8 <USB_DevDisconnect>
  return HAL_OK;
 80012da:	e7b1      	b.n	8001240 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 80012dc:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 80012e0:	f7ff fbf8 	bl	8000ad4 <HAL_PCD_MspInit>
 80012e4:	e791      	b.n	800120a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 80012e6:	2501      	movs	r5, #1
}
 80012e8:	4628      	mov	r0, r5
 80012ea:	b007      	add	sp, #28
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	bf00      	nop

080012f0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f0:	2800      	cmp	r0, #0
 80012f2:	f000 8155 	beq.w	80015a0 <HAL_RCC_OscConfig+0x2b0>
{
 80012f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	6803      	ldr	r3, [r0, #0]
{
 80012fc:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	07dd      	lsls	r5, r3, #31
 8001300:	4604      	mov	r4, r0
 8001302:	d535      	bpl.n	8001370 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001304:	49a8      	ldr	r1, [pc, #672]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 8001306:	684a      	ldr	r2, [r1, #4]
 8001308:	f002 020c 	and.w	r2, r2, #12
 800130c:	2a04      	cmp	r2, #4
 800130e:	f000 8105 	beq.w	800151c <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001312:	684a      	ldr	r2, [r1, #4]
 8001314:	f002 020c 	and.w	r2, r2, #12
 8001318:	2a08      	cmp	r2, #8
 800131a:	f000 80fb 	beq.w	8001514 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	6863      	ldr	r3, [r4, #4]
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d010      	beq.n	8001348 <HAL_RCC_OscConfig+0x58>
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8120 	beq.w	800156c <HAL_RCC_OscConfig+0x27c>
 800132c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001330:	f000 8178 	beq.w	8001624 <HAL_RCC_OscConfig+0x334>
 8001334:	4b9c      	ldr	r3, [pc, #624]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e004      	b.n	8001352 <HAL_RCC_OscConfig+0x62>
 8001348:	4a97      	ldr	r2, [pc, #604]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 800134a:	6813      	ldr	r3, [r2, #0]
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fcbd 	bl	8000cd0 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4d94      	ldr	r5, [pc, #592]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8001358:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	e005      	b.n	8001368 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fcb8 	bl	8000cd0 <HAL_GetTick>
 8001360:	1b80      	subs	r0, r0, r6
 8001362:	2864      	cmp	r0, #100	; 0x64
 8001364:	f200 80f5 	bhi.w	8001552 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	039a      	lsls	r2, r3, #14
 800136c:	d5f6      	bpl.n	800135c <HAL_RCC_OscConfig+0x6c>
 800136e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001370:	079f      	lsls	r7, r3, #30
 8001372:	d44d      	bmi.n	8001410 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001374:	071a      	lsls	r2, r3, #28
 8001376:	d522      	bpl.n	80013be <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001378:	69a3      	ldr	r3, [r4, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 80ba 	beq.w	80014f4 <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001380:	2201      	movs	r2, #1
 8001382:	4b8a      	ldr	r3, [pc, #552]	; (80015ac <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001384:	4d88      	ldr	r5, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 8001386:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001388:	f7ff fca2 	bl	8000cd0 <HAL_GetTick>
 800138c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138e:	e005      	b.n	800139c <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001390:	f7ff fc9e 	bl	8000cd0 <HAL_GetTick>
 8001394:	1b80      	subs	r0, r0, r6
 8001396:	2802      	cmp	r0, #2
 8001398:	f200 80db 	bhi.w	8001552 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800139e:	079b      	lsls	r3, r3, #30
 80013a0:	d5f6      	bpl.n	8001390 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013a2:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <HAL_RCC_OscConfig+0x2c0>)
 80013a4:	4a83      	ldr	r2, [pc, #524]	; (80015b4 <HAL_RCC_OscConfig+0x2c4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ac:	0a5b      	lsrs	r3, r3, #9
 80013ae:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80013b0:	bf00      	nop
  }
  while (Delay --);
 80013b2:	9b01      	ldr	r3, [sp, #4]
 80013b4:	1e5a      	subs	r2, r3, #1
 80013b6:	9201      	str	r2, [sp, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f9      	bne.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 80013bc:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013be:	075d      	lsls	r5, r3, #29
 80013c0:	d569      	bpl.n	8001496 <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b79      	ldr	r3, [pc, #484]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	00d0      	lsls	r0, r2, #3
 80013c8:	f100 80ec 	bmi.w	80015a4 <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 80013cc:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013d4:	61da      	str	r2, [r3, #28]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4b75      	ldr	r3, [pc, #468]	; (80015b8 <HAL_RCC_OscConfig+0x2c8>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	05d1      	lsls	r1, r2, #23
 80013e6:	f140 80a3 	bpl.w	8001530 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	68e3      	ldr	r3, [r4, #12]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d037      	beq.n	8001460 <HAL_RCC_OscConfig+0x170>
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80e7 	beq.w	80015c4 <HAL_RCC_OscConfig+0x2d4>
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	f000 811f 	beq.w	800163e <HAL_RCC_OscConfig+0x34e>
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	621a      	str	r2, [r3, #32]
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	f022 0204 	bic.w	r2, r2, #4
 800140c:	621a      	str	r2, [r3, #32]
 800140e:	e02c      	b.n	800146a <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001410:	4a65      	ldr	r2, [pc, #404]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 8001412:	6851      	ldr	r1, [r2, #4]
 8001414:	f011 0f0c 	tst.w	r1, #12
 8001418:	d061      	beq.n	80014de <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800141a:	6851      	ldr	r1, [r2, #4]
 800141c:	f001 010c 	and.w	r1, r1, #12
 8001420:	2908      	cmp	r1, #8
 8001422:	d059      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001424:	6923      	ldr	r3, [r4, #16]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80eb 	beq.w	8001602 <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 800142c:	2201      	movs	r2, #1
 800142e:	4b63      	ldr	r3, [pc, #396]	; (80015bc <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4d5d      	ldr	r5, [pc, #372]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 8001432:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001434:	f7ff fc4c 	bl	8000cd0 <HAL_GetTick>
 8001438:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	e005      	b.n	8001448 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc48 	bl	8000cd0 <HAL_GetTick>
 8001440:	1b80      	subs	r0, r0, r6
 8001442:	2802      	cmp	r0, #2
 8001444:	f200 8085 	bhi.w	8001552 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	0798      	lsls	r0, r3, #30
 800144c:	d5f6      	bpl.n	800143c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	6962      	ldr	r2, [r4, #20]
 8001452:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001456:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800145a:	602b      	str	r3, [r5, #0]
 800145c:	6823      	ldr	r3, [r4, #0]
 800145e:	e789      	b.n	8001374 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 8001462:	6a13      	ldr	r3, [r2, #32]
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800146a:	f7ff fc31 	bl	8000cd0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146e:	4e4e      	ldr	r6, [pc, #312]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8001470:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001472:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001476:	e005      	b.n	8001484 <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f7ff fc2a 	bl	8000cd0 <HAL_GetTick>
 800147c:	eba0 0008 	sub.w	r0, r0, r8
 8001480:	42b8      	cmp	r0, r7
 8001482:	d866      	bhi.n	8001552 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	6a33      	ldr	r3, [r6, #32]
 8001486:	079b      	lsls	r3, r3, #30
 8001488:	d5f6      	bpl.n	8001478 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 800148a:	b125      	cbz	r5, 8001496 <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4a46      	ldr	r2, [pc, #280]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 800148e:	69d3      	ldr	r3, [r2, #28]
 8001490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001494:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	69e0      	ldr	r0, [r4, #28]
 8001498:	b1d0      	cbz	r0, 80014d0 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800149a:	4d43      	ldr	r5, [pc, #268]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 800149c:	686a      	ldr	r2, [r5, #4]
 800149e:	f002 020c 	and.w	r2, r2, #12
 80014a2:	2a08      	cmp	r2, #8
 80014a4:	f000 80d3 	beq.w	800164e <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80014aa:	f04f 0100 	mov.w	r1, #0
 80014ae:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b0:	f000 80de 	beq.w	8001670 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80014b4:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc0b 	bl	8000cd0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ba:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80014bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	e004      	b.n	80014ca <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c0:	f7ff fc06 	bl	8000cd0 <HAL_GetTick>
 80014c4:	1b40      	subs	r0, r0, r5
 80014c6:	2802      	cmp	r0, #2
 80014c8:	d843      	bhi.n	8001552 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	d4f7      	bmi.n	80014c0 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 80014d0:	2000      	movs	r0, #0
}
 80014d2:	b002      	add	sp, #8
 80014d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014d8:	6852      	ldr	r2, [r2, #4]
 80014da:	03d6      	lsls	r6, r2, #15
 80014dc:	d4a2      	bmi.n	8001424 <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	0795      	lsls	r5, r2, #30
 80014e4:	d539      	bpl.n	800155a <HAL_RCC_OscConfig+0x26a>
 80014e6:	6922      	ldr	r2, [r4, #16]
 80014e8:	2a01      	cmp	r2, #1
 80014ea:	d036      	beq.n	800155a <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 80014ec:	2001      	movs	r0, #1
}
 80014ee:	b002      	add	sp, #8
 80014f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80014f4:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f6:	4d2c      	ldr	r5, [pc, #176]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 80014f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80014fa:	f7ff fbe9 	bl	8000cd0 <HAL_GetTick>
 80014fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001500:	e004      	b.n	800150c <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001502:	f7ff fbe5 	bl	8000cd0 <HAL_GetTick>
 8001506:	1b80      	subs	r0, r0, r6
 8001508:	2802      	cmp	r0, #2
 800150a:	d822      	bhi.n	8001552 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800150c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800150e:	079f      	lsls	r7, r3, #30
 8001510:	d4f7      	bmi.n	8001502 <HAL_RCC_OscConfig+0x212>
 8001512:	e753      	b.n	80013bc <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001514:	684a      	ldr	r2, [r1, #4]
 8001516:	03d0      	lsls	r0, r2, #15
 8001518:	f57f af01 	bpl.w	800131e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4a22      	ldr	r2, [pc, #136]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	0391      	lsls	r1, r2, #14
 8001522:	f57f af25 	bpl.w	8001370 <HAL_RCC_OscConfig+0x80>
 8001526:	6862      	ldr	r2, [r4, #4]
 8001528:	2a00      	cmp	r2, #0
 800152a:	f47f af21 	bne.w	8001370 <HAL_RCC_OscConfig+0x80>
 800152e:	e7dd      	b.n	80014ec <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001530:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001538:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800153a:	f7ff fbc9 	bl	8000cd0 <HAL_GetTick>
 800153e:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	6833      	ldr	r3, [r6, #0]
 8001542:	05da      	lsls	r2, r3, #23
 8001544:	f53f af51 	bmi.w	80013ea <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001548:	f7ff fbc2 	bl	8000cd0 <HAL_GetTick>
 800154c:	1bc0      	subs	r0, r0, r7
 800154e:	2864      	cmp	r0, #100	; 0x64
 8001550:	d9f6      	bls.n	8001540 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8001552:	2003      	movs	r0, #3
}
 8001554:	b002      	add	sp, #8
 8001556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4913      	ldr	r1, [pc, #76]	; (80015a8 <HAL_RCC_OscConfig+0x2b8>)
 800155c:	6960      	ldr	r0, [r4, #20]
 800155e:	680a      	ldr	r2, [r1, #0]
 8001560:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001564:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001568:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156a:	e703      	b.n	8001374 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001570:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001574:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001584:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001586:	f7ff fba3 	bl	8000cd0 <HAL_GetTick>
 800158a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158c:	e004      	b.n	8001598 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff fb9f 	bl	8000cd0 <HAL_GetTick>
 8001592:	1b80      	subs	r0, r0, r6
 8001594:	2864      	cmp	r0, #100	; 0x64
 8001596:	d8dc      	bhi.n	8001552 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	039b      	lsls	r3, r3, #14
 800159c:	d4f7      	bmi.n	800158e <HAL_RCC_OscConfig+0x29e>
 800159e:	e6e6      	b.n	800136e <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
}
 80015a2:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80015a4:	2500      	movs	r5, #0
 80015a6:	e71b      	b.n	80013e0 <HAL_RCC_OscConfig+0xf0>
 80015a8:	40021000 	.word	0x40021000
 80015ac:	42420480 	.word	0x42420480
 80015b0:	20000200 	.word	0x20000200
 80015b4:	10624dd3 	.word	0x10624dd3
 80015b8:	40007000 	.word	0x40007000
 80015bc:	42420000 	.word	0x42420000
 80015c0:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80015cc:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ce:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	f022 0201 	bic.w	r2, r2, #1
 80015d4:	621a      	str	r2, [r3, #32]
 80015d6:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	f022 0204 	bic.w	r2, r2, #4
 80015e0:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb75 	bl	8000cd0 <HAL_GetTick>
 80015e6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	e004      	b.n	80015f4 <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb71 	bl	8000cd0 <HAL_GetTick>
 80015ee:	1bc0      	subs	r0, r0, r7
 80015f0:	4540      	cmp	r0, r8
 80015f2:	d8ae      	bhi.n	8001552 <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f4:	6a33      	ldr	r3, [r6, #32]
 80015f6:	0798      	lsls	r0, r3, #30
 80015f8:	d4f7      	bmi.n	80015ea <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 80015fa:	2d00      	cmp	r5, #0
 80015fc:	f43f af4b 	beq.w	8001496 <HAL_RCC_OscConfig+0x1a6>
 8001600:	e744      	b.n	800148c <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 8001602:	4a34      	ldr	r2, [pc, #208]	; (80016d4 <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001604:	4d34      	ldr	r5, [pc, #208]	; (80016d8 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 8001606:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001608:	f7ff fb62 	bl	8000cd0 <HAL_GetTick>
 800160c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	e004      	b.n	800161a <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001610:	f7ff fb5e 	bl	8000cd0 <HAL_GetTick>
 8001614:	1b80      	subs	r0, r0, r6
 8001616:	2802      	cmp	r0, #2
 8001618:	d89b      	bhi.n	8001552 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	682b      	ldr	r3, [r5, #0]
 800161c:	0799      	lsls	r1, r3, #30
 800161e:	d4f7      	bmi.n	8001610 <HAL_RCC_OscConfig+0x320>
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	e6a7      	b.n	8001374 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001624:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001628:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	e689      	b.n	8001352 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163e:	f042 0204 	orr.w	r2, r2, #4
 8001642:	621a      	str	r2, [r3, #32]
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	f042 0201 	orr.w	r2, r2, #1
 800164a:	621a      	str	r2, [r3, #32]
 800164c:	e70d      	b.n	800146a <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800164e:	2801      	cmp	r0, #1
 8001650:	f43f af4d 	beq.w	80014ee <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 8001654:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001656:	6a22      	ldr	r2, [r4, #32]
 8001658:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800165c:	4291      	cmp	r1, r2
 800165e:	f47f af45 	bne.w	80014ec <HAL_RCC_OscConfig+0x1fc>
 8001662:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001664:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001668:	1a18      	subs	r0, r3, r0
 800166a:	bf18      	it	ne
 800166c:	2001      	movne	r0, #1
 800166e:	e73e      	b.n	80014ee <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8001670:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8001672:	f7ff fb2d 	bl	8000cd0 <HAL_GetTick>
 8001676:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001678:	e005      	b.n	8001686 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167a:	f7ff fb29 	bl	8000cd0 <HAL_GetTick>
 800167e:	1b80      	subs	r0, r0, r6
 8001680:	2802      	cmp	r0, #2
 8001682:	f63f af66 	bhi.w	8001552 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	0199      	lsls	r1, r3, #6
 800168a:	d4f6      	bmi.n	800167a <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800168c:	6a22      	ldr	r2, [r4, #32]
 800168e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001692:	d105      	bne.n	80016a0 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001694:	686b      	ldr	r3, [r5, #4]
 8001696:	68a1      	ldr	r1, [r4, #8]
 8001698:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800169c:	430b      	orrs	r3, r1
 800169e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80016a0:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_RCC_OscConfig+0x3e8>)
 80016a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	4302      	orrs	r2, r0
 80016aa:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80016ae:	480b      	ldr	r0, [pc, #44]	; (80016dc <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80016b4:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b6:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb0a 	bl	8000cd0 <HAL_GetTick>
 80016bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016be:	e005      	b.n	80016cc <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fb06 	bl	8000cd0 <HAL_GetTick>
 80016c4:	1b40      	subs	r0, r0, r5
 80016c6:	2802      	cmp	r0, #2
 80016c8:	f63f af43 	bhi.w	8001552 <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	019a      	lsls	r2, r3, #6
 80016d0:	d5f6      	bpl.n	80016c0 <HAL_RCC_OscConfig+0x3d0>
 80016d2:	e6fd      	b.n	80014d0 <HAL_RCC_OscConfig+0x1e0>
 80016d4:	42420000 	.word	0x42420000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	42420060 	.word	0x42420060

080016e0 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016e0:	f240 2201 	movw	r2, #513	; 0x201
{
 80016e4:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_RCC_GetSysClockFreq+0x5c>)
 80016e8:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80016ec:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80016f6:	4912      	ldr	r1, [pc, #72]	; (8001740 <HAL_RCC_GetSysClockFreq+0x60>)
 80016f8:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80016fa:	f003 020c 	and.w	r2, r3, #12
 80016fe:	2a08      	cmp	r2, #8
 8001700:	d002      	beq.n	8001708 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8001702:	4810      	ldr	r0, [pc, #64]	; (8001744 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001704:	b006      	add	sp, #24
 8001706:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001708:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800170c:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800170e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001710:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001714:	d404      	bmi.n	8001720 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001716:	480c      	ldr	r0, [pc, #48]	; (8001748 <HAL_RCC_GetSysClockFreq+0x68>)
 8001718:	fb00 f002 	mul.w	r0, r0, r2
}
 800171c:	b006      	add	sp, #24
 800171e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001720:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001722:	4808      	ldr	r0, [pc, #32]	; (8001744 <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001724:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001728:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800172c:	4463      	add	r3, ip
 800172e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001732:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001736:	b006      	add	sp, #24
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	08004b58 	.word	0x08004b58
 8001740:	40021000 	.word	0x40021000
 8001744:	007a1200 	.word	0x007a1200
 8001748:	003d0900 	.word	0x003d0900

0800174c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800174c:	b178      	cbz	r0, 800176e <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_RCC_ClockConfig+0x12c>)
 8001750:	6813      	ldr	r3, [r2, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	428b      	cmp	r3, r1
 8001758:	d20b      	bcs.n	8001772 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	6813      	ldr	r3, [r2, #0]
 800175c:	f023 0307 	bic.w	r3, r3, #7
 8001760:	430b      	orrs	r3, r1
 8001762:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001764:	6813      	ldr	r3, [r2, #0]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	428b      	cmp	r3, r1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
}
 8001770:	4770      	bx	lr
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001772:	6803      	ldr	r3, [r0, #0]
{
 8001774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	079d      	lsls	r5, r3, #30
 800177a:	d514      	bpl.n	80017a6 <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	075c      	lsls	r4, r3, #29
 800177e:	d504      	bpl.n	800178a <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001780:	4c3e      	ldr	r4, [pc, #248]	; (800187c <HAL_RCC_ClockConfig+0x130>)
 8001782:	6862      	ldr	r2, [r4, #4]
 8001784:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001788:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178a:	071a      	lsls	r2, r3, #28
 800178c:	d504      	bpl.n	8001798 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178e:	4c3b      	ldr	r4, [pc, #236]	; (800187c <HAL_RCC_ClockConfig+0x130>)
 8001790:	6862      	ldr	r2, [r4, #4]
 8001792:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001796:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4c38      	ldr	r4, [pc, #224]	; (800187c <HAL_RCC_ClockConfig+0x130>)
 800179a:	6885      	ldr	r5, [r0, #8]
 800179c:	6862      	ldr	r2, [r4, #4]
 800179e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017a2:	432a      	orrs	r2, r5
 80017a4:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a6:	07df      	lsls	r7, r3, #31
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	d520      	bpl.n	80017f0 <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b4:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	d056      	beq.n	8001866 <HAL_RCC_ClockConfig+0x11a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b8:	2a02      	cmp	r2, #2
 80017ba:	d059      	beq.n	8001870 <HAL_RCC_ClockConfig+0x124>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	0799      	lsls	r1, r3, #30
 80017be:	d527      	bpl.n	8001810 <HAL_RCC_ClockConfig+0xc4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c0:	4e2e      	ldr	r6, [pc, #184]	; (800187c <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	6873      	ldr	r3, [r6, #4]
 80017c8:	f023 0303 	bic.w	r3, r3, #3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa7e 	bl	8000cd0 <HAL_GetTick>
 80017d4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e004      	b.n	80017e2 <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa7a 	bl	8000cd0 <HAL_GetTick>
 80017dc:	1bc0      	subs	r0, r0, r7
 80017de:	4540      	cmp	r0, r8
 80017e0:	d844      	bhi.n	800186c <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e2:	6873      	ldr	r3, [r6, #4]
 80017e4:	6862      	ldr	r2, [r4, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80017ee:	d1f3      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017f0:	4a21      	ldr	r2, [pc, #132]	; (8001878 <HAL_RCC_ClockConfig+0x12c>)
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	42ab      	cmp	r3, r5
 80017fa:	d90c      	bls.n	8001816 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fc:	6813      	ldr	r3, [r2, #0]
 80017fe:	f023 0307 	bic.w	r3, r3, #7
 8001802:	432b      	orrs	r3, r5
 8001804:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	6813      	ldr	r3, [r2, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	42ab      	cmp	r3, r5
 800180e:	d002      	beq.n	8001816 <HAL_RCC_ClockConfig+0xca>
    return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
}
 8001812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	075a      	lsls	r2, r3, #29
 800181a:	d506      	bpl.n	800182a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800181c:	4917      	ldr	r1, [pc, #92]	; (800187c <HAL_RCC_ClockConfig+0x130>)
 800181e:	68e0      	ldr	r0, [r4, #12]
 8001820:	684a      	ldr	r2, [r1, #4]
 8001822:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001826:	4302      	orrs	r2, r0
 8001828:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	071b      	lsls	r3, r3, #28
 800182c:	d412      	bmi.n	8001854 <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800182e:	f7ff ff57 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x130>)
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x134>)
 8001836:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 8001838:	4912      	ldr	r1, [pc, #72]	; (8001884 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800183a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_RCC_ClockConfig+0x13c>)
 8001842:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 8001846:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001848:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800184a:	f7ff f9ff 	bl	8000c4c <HAL_InitTick>
  return HAL_OK;
 800184e:	2000      	movs	r0, #0
}
 8001850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001854:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x130>)
 8001856:	6921      	ldr	r1, [r4, #16]
 8001858:	6853      	ldr	r3, [r2, #4]
 800185a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800185e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001862:	6053      	str	r3, [r2, #4]
 8001864:	e7e3      	b.n	800182e <HAL_RCC_ClockConfig+0xe2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	039e      	lsls	r6, r3, #14
 8001868:	d4aa      	bmi.n	80017c0 <HAL_RCC_ClockConfig+0x74>
 800186a:	e7d1      	b.n	8001810 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 800186c:	2003      	movs	r0, #3
 800186e:	e7ef      	b.n	8001850 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001870:	0198      	lsls	r0, r3, #6
 8001872:	d4a5      	bmi.n	80017c0 <HAL_RCC_ClockConfig+0x74>
 8001874:	e7cc      	b.n	8001810 <HAL_RCC_ClockConfig+0xc4>
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000
 800187c:	40021000 	.word	0x40021000
 8001880:	0800cbf0 	.word	0x0800cbf0
 8001884:	20000208 	.word	0x20000208
 8001888:	20000200 	.word	0x20000200

0800188c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <HAL_RCC_GetPCLK1Freq+0x14>)
 800188e:	4905      	ldr	r1, [pc, #20]	; (80018a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001890:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001894:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001898:	5ccb      	ldrb	r3, [r1, r3]
 800189a:	6810      	ldr	r0, [r2, #0]
}
 800189c:	40d8      	lsrs	r0, r3
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	0800cc00 	.word	0x0800cc00
 80018a8:	20000200 	.word	0x20000200

080018ac <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80018ae:	4905      	ldr	r1, [pc, #20]	; (80018c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80018b0:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80018b2:	4a05      	ldr	r2, [pc, #20]	; (80018c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018b4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	6810      	ldr	r0, [r2, #0]
}
 80018bc:	40d8      	lsrs	r0, r3
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000
 80018c4:	0800cc00 	.word	0x0800cc00
 80018c8:	20000200 	.word	0x20000200

080018cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018d0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018d2:	6800      	ldr	r0, [r0, #0]
{
 80018d4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80018d6:	07c5      	lsls	r5, r0, #31
 80018d8:	d52a      	bpl.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	00d1      	lsls	r1, r2, #3
 80018e0:	d53d      	bpl.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 80018e4:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	05d2      	lsls	r2, r2, #23
 80018ea:	d546      	bpl.n	800197a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018ec:	4935      	ldr	r1, [pc, #212]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80018ee:	6860      	ldr	r0, [r4, #4]
 80018f0:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018f2:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80018f6:	d00f      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80018f8:	f400 7340 	and.w	r3, r0, #768	; 0x300
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00b      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001900:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001902:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001904:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001908:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800190c:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800190e:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001910:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001912:	07d8      	lsls	r0, r3, #31
 8001914:	d445      	bmi.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8001916:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001918:	4a2a      	ldr	r2, [pc, #168]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800191a:	6a13      	ldr	r3, [r2, #32]
 800191c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001920:	4303      	orrs	r3, r0
 8001922:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001924:	b11d      	cbz	r5, 800192e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001926:	69d3      	ldr	r3, [r2, #28]
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001930:	0783      	lsls	r3, r0, #30
 8001932:	d506      	bpl.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001934:	4a23      	ldr	r2, [pc, #140]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001936:	68a1      	ldr	r1, [r4, #8]
 8001938:	6853      	ldr	r3, [r2, #4]
 800193a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800193e:	430b      	orrs	r3, r1
 8001940:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001942:	f010 0010 	ands.w	r0, r0, #16
 8001946:	d007      	beq.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001948:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800194c:	68e1      	ldr	r1, [r4, #12]
 800194e:	6853      	ldr	r3, [r2, #4]
 8001950:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001954:	430b      	orrs	r3, r1
 8001956:	6053      	str	r3, [r2, #4]
}
 8001958:	b002      	add	sp, #8
 800195a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001960:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001966:	61da      	str	r2, [r3, #28]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	05d2      	lsls	r2, r2, #23
 8001978:	d4b8      	bmi.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001982:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001984:	f7ff f9a4 	bl	8000cd0 <HAL_GetTick>
 8001988:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	6833      	ldr	r3, [r6, #0]
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	d4ad      	bmi.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001990:	f7ff f99e 	bl	8000cd0 <HAL_GetTick>
 8001994:	1bc0      	subs	r0, r0, r7
 8001996:	2864      	cmp	r0, #100	; 0x64
 8001998:	d9f7      	bls.n	800198a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800199a:	2003      	movs	r0, #3
}
 800199c:	b002      	add	sp, #8
 800199e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a2:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 80019a4:	f7ff f994 	bl	8000cd0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a8:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80019ac:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ae:	6a33      	ldr	r3, [r6, #32]
 80019b0:	079a      	lsls	r2, r3, #30
 80019b2:	d4b0      	bmi.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff f98c 	bl	8000cd0 <HAL_GetTick>
 80019b8:	eba0 0008 	sub.w	r0, r0, r8
 80019bc:	42b8      	cmp	r0, r7
 80019be:	d9f6      	bls.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80019c0:	e7eb      	b.n	800199a <HAL_RCCEx_PeriphCLKConfig+0xce>
 80019c2:	bf00      	nop
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40007000 	.word	0x40007000
 80019cc:	42420440 	.word	0x42420440

080019d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d4:	4607      	mov	r7, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	4616      	mov	r6, r2
 80019da:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019dc:	683c      	ldr	r4, [r7, #0]
 80019de:	e001      	b.n	80019e4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 80019e0:	1c73      	adds	r3, r6, #1
 80019e2:	d106      	bne.n	80019f2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019e4:	68a0      	ldr	r0, [r4, #8]
 80019e6:	ea35 0300 	bics.w	r3, r5, r0
 80019ea:	d0f9      	beq.n	80019e0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80019ec:	2000      	movs	r0, #0
}
 80019ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80019f2:	f7ff f96d 	bl	8000cd0 <HAL_GetTick>
 80019f6:	eba0 0008 	sub.w	r0, r0, r8
 80019fa:	4286      	cmp	r6, r0
 80019fc:	d8ee      	bhi.n	80019dc <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019fe:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a02:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a04:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001a0c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a0e:	d014      	beq.n	8001a3a <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a12:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a16:	d007      	beq.n	8001a28 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8001a18:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8001a1a:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8001a1c:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001a20:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001a24:	2003      	movs	r0, #3
 8001a26:	e7e2      	b.n	80019ee <SPI_WaitFlagStateUntilTimeout.constprop.6+0x1e>
          SPI_RESET_CRC(hspi);
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e7ee      	b.n	8001a18 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001a40:	d002      	beq.n	8001a48 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a42:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001a46:	d1e3      	bne.n	8001a10 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x40>
          __HAL_SPI_DISABLE(hspi);
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e7de      	b.n	8001a10 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x40>
 8001a52:	bf00      	nop

08001a54 <HAL_SPI_TransmitReceive.part.2>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8001a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a58:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001a5a:	2001      	movs	r0, #1
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8001a5c:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8001a5e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8001a62:	4691      	mov	r9, r2
 8001a64:	4698      	mov	r8, r3
 8001a66:	460f      	mov	r7, r1
 8001a68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 8001a6a:	f7ff f931 	bl	8000cd0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001a6e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001a72:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8001a74:	b2d2      	uxtb	r2, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a76:	2a01      	cmp	r2, #1
  tmp_mode            = hspi->Init.Mode;
 8001a78:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a7a:	d011      	beq.n	8001aa0 <HAL_SPI_TransmitReceive.part.2+0x4c>
 8001a7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a80:	d009      	beq.n	8001a96 <HAL_SPI_TransmitReceive.part.2+0x42>
    errorcode = HAL_BUSY;
 8001a82:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001a84:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001a86:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001a88:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a8c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001a90:	b003      	add	sp, #12
 8001a92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a96:	68a1      	ldr	r1, [r4, #8]
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	d1f2      	bne.n	8001a82 <HAL_SPI_TransmitReceive.part.2+0x2e>
 8001a9c:	2a04      	cmp	r2, #4
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_SPI_TransmitReceive.part.2+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001aa0:	2f00      	cmp	r7, #0
 8001aa2:	d064      	beq.n	8001b6e <HAL_SPI_TransmitReceive.part.2+0x11a>
 8001aa4:	f1b9 0f00 	cmp.w	r9, #0
 8001aa8:	d061      	beq.n	8001b6e <HAL_SPI_TransmitReceive.part.2+0x11a>
 8001aaa:	f1b8 0f00 	cmp.w	r8, #0
 8001aae:	d05e      	beq.n	8001b6e <HAL_SPI_TransmitReceive.part.2+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ab0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ab4:	6821      	ldr	r1, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ab6:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ab8:	bf1c      	itt	ne
 8001aba:	2205      	movne	r2, #5
 8001abc:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8001ac4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001ac8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001acc:	6808      	ldr	r0, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ace:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ad2:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 8001ad4:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ad8:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ada:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8001ade:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ae2:	d546      	bpl.n	8001b72 <HAL_SPI_TransmitReceive.part.2+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ae4:	68e2      	ldr	r2, [r4, #12]
 8001ae6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001aea:	d05a      	beq.n	8001ba2 <HAL_SPI_TransmitReceive.part.2+0x14e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d145      	bne.n	8001b7c <HAL_SPI_TransmitReceive.part.2+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001af0:	783b      	ldrb	r3, [r7, #0]
 8001af2:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8001af4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001af6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001afc:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001afe:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b00:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 8001b02:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b04:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001b06:	b292      	uxth	r2, r2
 8001b08:	b91a      	cbnz	r2, 8001b12 <HAL_SPI_TransmitReceive.part.2+0xbe>
 8001b0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d038      	beq.n	8001b84 <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	6893      	ldr	r3, [r2, #8]
 8001b16:	0798      	lsls	r0, r3, #30
 8001b18:	d50f      	bpl.n	8001b3a <HAL_SPI_TransmitReceive.part.2+0xe6>
 8001b1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	b163      	cbz	r3, 8001b3a <HAL_SPI_TransmitReceive.part.2+0xe6>
 8001b20:	b15f      	cbz	r7, 8001b3a <HAL_SPI_TransmitReceive.part.2+0xe6>
        txallowed = 0U;
 8001b22:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001b24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8001b2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001b2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001b2e:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8001b30:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001b38:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b3a:	6893      	ldr	r3, [r2, #8]
 8001b3c:	07d9      	lsls	r1, r3, #31
 8001b3e:	d50d      	bpl.n	8001b5c <HAL_SPI_TransmitReceive.part.2+0x108>
 8001b40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	b153      	cbz	r3, 8001b5c <HAL_SPI_TransmitReceive.part.2+0x108>
        txallowed = 1U;
 8001b46:	2701      	movs	r7, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b4c:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001b4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001b50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8001b56:	443a      	add	r2, r7
        hspi->RxXferCount--;
 8001b58:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001b5a:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b5c:	f7ff f8b8 	bl	8000cd0 <HAL_GetTick>
 8001b60:	1b80      	subs	r0, r0, r6
 8001b62:	4285      	cmp	r5, r0
 8001b64:	d8ce      	bhi.n	8001b04 <HAL_SPI_TransmitReceive.part.2+0xb0>
 8001b66:	1c6b      	adds	r3, r5, #1
 8001b68:	d0cc      	beq.n	8001b04 <HAL_SPI_TransmitReceive.part.2+0xb0>
        errorcode = HAL_TIMEOUT;
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	e78a      	b.n	8001a84 <HAL_SPI_TransmitReceive.part.2+0x30>
    errorcode = HAL_ERROR;
 8001b6e:	2001      	movs	r0, #1
 8001b70:	e788      	b.n	8001a84 <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_ENABLE(hspi);
 8001b72:	680a      	ldr	r2, [r1, #0]
 8001b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b78:	600a      	str	r2, [r1, #0]
 8001b7a:	e7b3      	b.n	8001ae4 <HAL_SPI_TransmitReceive.part.2+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b7c:	f1b8 0f01 	cmp.w	r8, #1
 8001b80:	d1bf      	bne.n	8001b02 <HAL_SPI_TransmitReceive.part.2+0xae>
 8001b82:	e7b5      	b.n	8001af0 <HAL_SPI_TransmitReceive.part.2+0x9c>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b84:	4633      	mov	r3, r6
 8001b86:	462a      	mov	r2, r5
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff ff20 	bl	80019d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d046      	beq.n	8001c22 <HAL_SPI_TransmitReceive.part.2+0x1ce>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b94:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001b98:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b9e:	6562      	str	r2, [r4, #84]	; 0x54
 8001ba0:	e770      	b.n	8001a84 <HAL_SPI_TransmitReceive.part.2+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d034      	beq.n	8001c10 <HAL_SPI_TransmitReceive.part.2+0x1bc>
 8001ba6:	f1b8 0f01 	cmp.w	r8, #1
 8001baa:	d031      	beq.n	8001c10 <HAL_SPI_TransmitReceive.part.2+0x1bc>
        txallowed = 1U;
 8001bac:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001bae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b91b      	cbnz	r3, 8001bbc <HAL_SPI_TransmitReceive.part.2+0x168>
 8001bb4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0e3      	beq.n	8001b84 <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	0791      	lsls	r1, r2, #30
 8001bc2:	d50d      	bpl.n	8001be0 <HAL_SPI_TransmitReceive.part.2+0x18c>
 8001bc4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001bc6:	b292      	uxth	r2, r2
 8001bc8:	b152      	cbz	r2, 8001be0 <HAL_SPI_TransmitReceive.part.2+0x18c>
 8001bca:	b14f      	cbz	r7, 8001be0 <HAL_SPI_TransmitReceive.part.2+0x18c>
        txallowed = 0U;
 8001bcc:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001bd0:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001bd4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001bd6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bd8:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001bda:	3a01      	subs	r2, #1
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	07d2      	lsls	r2, r2, #31
 8001be4:	d50c      	bpl.n	8001c00 <HAL_SPI_TransmitReceive.part.2+0x1ac>
 8001be6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001be8:	b292      	uxth	r2, r2
 8001bea:	b14a      	cbz	r2, 8001c00 <HAL_SPI_TransmitReceive.part.2+0x1ac>
        txallowed = 1U;
 8001bec:	2701      	movs	r7, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bf2:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8001bf6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bf8:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c00:	f7ff f866 	bl	8000cd0 <HAL_GetTick>
 8001c04:	1b80      	subs	r0, r0, r6
 8001c06:	42a8      	cmp	r0, r5
 8001c08:	d3d1      	bcc.n	8001bae <HAL_SPI_TransmitReceive.part.2+0x15a>
 8001c0a:	1c6b      	adds	r3, r5, #1
 8001c0c:	d0cf      	beq.n	8001bae <HAL_SPI_TransmitReceive.part.2+0x15a>
 8001c0e:	e7ac      	b.n	8001b6a <HAL_SPI_TransmitReceive.part.2+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c10:	f837 3b02 	ldrh.w	r3, [r7], #2
 8001c14:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8001c16:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c18:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001c20:	e7c4      	b.n	8001bac <HAL_SPI_TransmitReceive.part.2+0x158>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c22:	68a3      	ldr	r3, [r4, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f af2d 	bne.w	8001a84 <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	9001      	str	r0, [sp, #4]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	9201      	str	r2, [sp, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	9b01      	ldr	r3, [sp, #4]
 8001c38:	e724      	b.n	8001a84 <HAL_SPI_TransmitReceive.part.2+0x30>
 8001c3a:	bf00      	nop

08001c3c <HAL_SPI_Init>:
  if (hspi == NULL)
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d03b      	beq.n	8001cb8 <HAL_SPI_Init+0x7c>
{
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c42:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c44:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8001c48:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4a:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c4c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001c50:	b361      	cbz	r1, 8001cac <HAL_SPI_Init+0x70>
 8001c52:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c54:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c58:	2702      	movs	r7, #2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c5a:	2100      	movs	r1, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001c5c:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c5e:	68e0      	ldr	r0, [r4, #12]
 8001c60:	4333      	orrs	r3, r6
 8001c62:	6926      	ldr	r6, [r4, #16]
 8001c64:	4303      	orrs	r3, r0
 8001c66:	6960      	ldr	r0, [r4, #20]
 8001c68:	4333      	orrs	r3, r6
 8001c6a:	69e6      	ldr	r6, [r4, #28]
 8001c6c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8001c70:	4303      	orrs	r3, r0
 8001c72:	6a20      	ldr	r0, [r4, #32]
 8001c74:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 8001c76:	6826      	ldr	r6, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c78:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c7c:	4303      	orrs	r3, r0
 8001c7e:	f40c 7000 	and.w	r0, ip, #512	; 0x200
 8001c82:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8001c84:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c8a:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001c8c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c90:	f00c 0204 	and.w	r2, ip, #4
  __HAL_SPI_DISABLE(hspi);
 8001c94:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c96:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c98:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c9a:	69f3      	ldr	r3, [r6, #28]
  return HAL_OK;
 8001c9c:	4608      	mov	r0, r1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ca2:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ca4:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ca6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8001caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001cac:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001cb0:	f7fe fd7e 	bl	80007b0 <HAL_SPI_MspInit>
 8001cb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cb6:	e7cd      	b.n	8001c54 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001cb8:	2001      	movs	r0, #1
}
 8001cba:	4770      	bx	lr

08001cbc <HAL_SPI_Transmit>:
{
 8001cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 8001cc0:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 8001cc4:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8001cc6:	2c01      	cmp	r4, #1
 8001cc8:	d077      	beq.n	8001dba <HAL_SPI_Transmit+0xfe>
 8001cca:	461d      	mov	r5, r3
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4617      	mov	r7, r2
 8001cd6:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8001cd8:	f7fe fffa 	bl	8000cd0 <HAL_GetTick>
 8001cdc:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001cde:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001ce2:	b2c0      	uxtb	r0, r0
 8001ce4:	2801      	cmp	r0, #1
 8001ce6:	d009      	beq.n	8001cfc <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8001ce8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001cea:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001cec:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001cee:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cf2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001cf6:	b002      	add	sp, #8
 8001cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8001cfc:	f1b8 0f00 	cmp.w	r8, #0
 8001d00:	d0f3      	beq.n	8001cea <HAL_SPI_Transmit+0x2e>
 8001d02:	2f00      	cmp	r7, #0
 8001d04:	d0f1      	beq.n	8001cea <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d06:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d08:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d0a:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d0c:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d10:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d14:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d16:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d18:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8001d1a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001d1e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d20:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
 8001d24:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001d26:	86a7      	strh	r7, [r4, #52]	; 0x34
 8001d28:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d2a:	d103      	bne.n	8001d34 <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d32:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	0652      	lsls	r2, r2, #25
 8001d38:	d543      	bpl.n	8001dc2 <HAL_SPI_Transmit+0x106>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d3a:	68e2      	ldr	r2, [r4, #12]
 8001d3c:	6861      	ldr	r1, [r4, #4]
 8001d3e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d42:	d04f      	beq.n	8001de4 <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d44:	2900      	cmp	r1, #0
 8001d46:	d141      	bne.n	8001dcc <HAL_SPI_Transmit+0x110>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d48:	f898 2000 	ldrb.w	r2, [r8]
 8001d4c:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001d4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d50:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d56:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001d58:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d5a:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001d5c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d5e:	b292      	uxth	r2, r2
 8001d60:	b18a      	cbz	r2, 8001d86 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	0792      	lsls	r2, r2, #30
 8001d68:	d533      	bpl.n	8001dd2 <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001d70:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d72:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d74:	3a01      	subs	r2, #1
 8001d76:	b292      	uxth	r2, r2
 8001d78:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d7a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d7c:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 8001d7e:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d80:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d1ed      	bne.n	8001d62 <HAL_SPI_Transmit+0xa6>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d86:	4633      	mov	r3, r6
 8001d88:	462a      	mov	r2, r5
 8001d8a:	2180      	movs	r1, #128	; 0x80
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f7ff fe1f 	bl	80019d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001d92:	b120      	cbz	r0, 8001d9e <HAL_SPI_Transmit+0xe2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d94:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d9c:	6562      	str	r2, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d9e:	68a3      	ldr	r3, [r4, #8]
 8001da0:	b933      	cbnz	r3, 8001db0 <HAL_SPI_Transmit+0xf4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	68d3      	ldr	r3, [r2, #12]
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	6893      	ldr	r3, [r2, #8]
 8001dac:	9301      	str	r3, [sp, #4]
 8001dae:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001db0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001db2:	3000      	adds	r0, #0
 8001db4:	bf18      	it	ne
 8001db6:	2001      	movne	r0, #1
error:
 8001db8:	e797      	b.n	8001cea <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8001dba:	2002      	movs	r0, #2
}
 8001dbc:	b002      	add	sp, #8
 8001dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e7b6      	b.n	8001d3a <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dcc:	2f01      	cmp	r7, #1
 8001dce:	d1c5      	bne.n	8001d5c <HAL_SPI_Transmit+0xa0>
 8001dd0:	e7ba      	b.n	8001d48 <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dd2:	f7fe ff7d 	bl	8000cd0 <HAL_GetTick>
 8001dd6:	1b80      	subs	r0, r0, r6
 8001dd8:	42a8      	cmp	r0, r5
 8001dda:	d3bf      	bcc.n	8001d5c <HAL_SPI_Transmit+0xa0>
 8001ddc:	1c6b      	adds	r3, r5, #1
 8001dde:	d0bd      	beq.n	8001d5c <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8001de0:	2003      	movs	r0, #3
 8001de2:	e782      	b.n	8001cea <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001de4:	b311      	cbz	r1, 8001e2c <HAL_SPI_Transmit+0x170>
 8001de6:	2f01      	cmp	r7, #1
 8001de8:	d020      	beq.n	8001e2c <HAL_SPI_Transmit+0x170>
    while (hspi->TxXferCount > 0U)
 8001dea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0c9      	beq.n	8001d86 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	0790      	lsls	r0, r2, #30
 8001df8:	d510      	bpl.n	8001e1c <HAL_SPI_Transmit+0x160>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dfc:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001e00:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001e02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e04:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e0c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0b8      	beq.n	8001d86 <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	0790      	lsls	r0, r2, #30
 8001e1a:	d4ee      	bmi.n	8001dfa <HAL_SPI_Transmit+0x13e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e1c:	f7fe ff58 	bl	8000cd0 <HAL_GetTick>
 8001e20:	1b80      	subs	r0, r0, r6
 8001e22:	42a8      	cmp	r0, r5
 8001e24:	d3e1      	bcc.n	8001dea <HAL_SPI_Transmit+0x12e>
 8001e26:	1c69      	adds	r1, r5, #1
 8001e28:	d0df      	beq.n	8001dea <HAL_SPI_Transmit+0x12e>
 8001e2a:	e7d9      	b.n	8001de0 <HAL_SPI_Transmit+0x124>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e2c:	4641      	mov	r1, r8
 8001e2e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001e32:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001e34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e36:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001e3e:	e7d4      	b.n	8001dea <HAL_SPI_Transmit+0x12e>

08001e40 <HAL_SPI_TransmitReceive>:
{
 8001e40:	b410      	push	{r4}
  __HAL_LOCK(hspi);
 8001e42:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8001e46:	2c01      	cmp	r4, #1
 8001e48:	d002      	beq.n	8001e50 <HAL_SPI_TransmitReceive+0x10>
}
 8001e4a:	bc10      	pop	{r4}
 8001e4c:	f7ff be02 	b.w	8001a54 <HAL_SPI_TransmitReceive.part.2>
 8001e50:	2002      	movs	r0, #2
 8001e52:	bc10      	pop	{r4}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop

08001e58 <HAL_SPI_Transmit_DMA>:
{
 8001e58:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8001e5a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d046      	beq.n	8001ef0 <HAL_SPI_Transmit_DMA+0x98>
 8001e62:	2301      	movs	r3, #1
 8001e64:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e66:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
  __HAL_LOCK(hspi);
 8001e6a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8001e6e:	b2c0      	uxtb	r0, r0
 8001e70:	4298      	cmp	r0, r3
 8001e72:	d004      	beq.n	8001e7e <HAL_SPI_Transmit_DMA+0x26>
    errorcode = HAL_BUSY;
 8001e74:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8001e76:	2300      	movs	r3, #0
 8001e78:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e7c:	bd38      	pop	{r3, r4, r5, pc}
  if ((pData == NULL) || (Size == 0U))
 8001e7e:	2900      	cmp	r1, #0
 8001e80:	d0f9      	beq.n	8001e76 <HAL_SPI_Transmit_DMA+0x1e>
 8001e82:	2a00      	cmp	r2, #0
 8001e84:	d0f7      	beq.n	8001e76 <HAL_SPI_Transmit_DMA+0x1e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e86:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e88:	2503      	movs	r5, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e8a:	68a0      	ldr	r0, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e8c:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e94:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxXferSize  = Size;
 8001e96:	86a2      	strh	r2, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e98:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e9a:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e9c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxISR       = NULL;
 8001e9e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ea2:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8001ea4:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferCount = 0U;
 8001ea6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ea8:	d103      	bne.n	8001eb2 <HAL_SPI_Transmit_DMA+0x5a>
    SPI_1LINE_TX(hspi);
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb0:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferAbortCallback = NULL;
 8001eb2:	2300      	movs	r3, #0
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001eb4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001eb6:	4d14      	ldr	r5, [pc, #80]	; (8001f08 <HAL_SPI_Transmit_DMA+0xb0>)
  hspi->hdmatx->XferAbortCallback = NULL;
 8001eb8:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8001eba:	62c5      	str	r5, [r0, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_SPI_Transmit_DMA+0xb4>)
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001ebe:	4d14      	ldr	r5, [pc, #80]	; (8001f10 <HAL_SPI_Transmit_DMA+0xb8>)
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8001ec0:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001ec2:	320c      	adds	r2, #12
                                 hspi->TxXferCount))
 8001ec4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8001ec6:	6305      	str	r5, [r0, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8001ec8:	f7fe ffbc 	bl	8000e44 <HAL_DMA_Start_IT>
 8001ecc:	b990      	cbnz	r0, 8001ef4 <HAL_SPI_Transmit_DMA+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	0652      	lsls	r2, r2, #25
 8001ed4:	d403      	bmi.n	8001ede <HAL_SPI_Transmit_DMA+0x86>
    __HAL_SPI_ENABLE(hspi);
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001edc:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	f042 0220 	orr.w	r2, r2, #32
 8001ee4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	f042 0202 	orr.w	r2, r2, #2
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e7c2      	b.n	8001e76 <HAL_SPI_Transmit_DMA+0x1e>
  __HAL_LOCK(hspi);
 8001ef0:	2002      	movs	r0, #2
}
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}
    hspi->State = HAL_SPI_STATE_READY;
 8001ef4:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001ef6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001ef8:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8001f00:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    goto error;
 8001f04:	e7b7      	b.n	8001e76 <HAL_SPI_Transmit_DMA+0x1e>
 8001f06:	bf00      	nop
 8001f08:	08001f1d 	.word	0x08001f1d
 8001f0c:	08001f51 	.word	0x08001f51
 8001f10:	08001f2d 	.word	0x08001f2d

08001f14 <HAL_SPI_TxCpltCallback>:
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop

08001f18 <HAL_SPI_TxHalfCpltCallback>:
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop

08001f1c <SPI_DMAHalfTransmitCplt>:
{
 8001f1c:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8001f1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f20:	f7ff fffa 	bl	8001f18 <HAL_SPI_TxHalfCpltCallback>
}
 8001f24:	bd08      	pop	{r3, pc}
 8001f26:	bf00      	nop

08001f28 <HAL_SPI_ErrorCallback>:
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop

08001f2c <SPI_DMAError>:
{
 8001f2c:	b510      	push	{r4, lr}
  hspi->State = HAL_SPI_STATE_READY;
 8001f2e:	2401      	movs	r4, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001f32:	6819      	ldr	r1, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8001f34:	4618      	mov	r0, r3
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8001f36:	684a      	ldr	r2, [r1, #4]
 8001f38:	f022 0203 	bic.w	r2, r2, #3
 8001f3c:	604a      	str	r2, [r1, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8001f3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f40:	f042 0210 	orr.w	r2, r2, #16
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001f46:	f883 4051 	strb.w	r4, [r3, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8001f4a:	f7ff ffed 	bl	8001f28 <HAL_SPI_ErrorCallback>
}
 8001f4e:	bd10      	pop	{r4, pc}

08001f50 <SPI_DMATransmitCplt>:
{
 8001f50:	b530      	push	{r4, r5, lr}
 8001f52:	4605      	mov	r5, r0
 8001f54:	b083      	sub	sp, #12
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f56:	6a44      	ldr	r4, [r0, #36]	; 0x24
  tickstart = HAL_GetTick();
 8001f58:	f7fe feba 	bl	8000cd0 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8001f5c:	682a      	ldr	r2, [r5, #0]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	0693      	lsls	r3, r2, #26
 8001f62:	d427      	bmi.n	8001fb4 <SPI_DMATransmitCplt+0x64>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001f64:	6825      	ldr	r5, [r4, #0]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f66:	4603      	mov	r3, r0
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001f68:	6869      	ldr	r1, [r5, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f6a:	2264      	movs	r2, #100	; 0x64
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8001f6c:	f021 0120 	bic.w	r1, r1, #32
 8001f70:	6069      	str	r1, [r5, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001f72:	6868      	ldr	r0, [r5, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f74:	2180      	movs	r1, #128	; 0x80
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001f76:	f020 0002 	bic.w	r0, r0, #2
 8001f7a:	6068      	str	r0, [r5, #4]
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7ff fd27 	bl	80019d0 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001f82:	b138      	cbz	r0, 8001f94 <SPI_DMATransmitCplt+0x44>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f86:	f043 0320 	orr.w	r3, r3, #32
 8001f8a:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001f8e:	f043 0320 	orr.w	r3, r3, #32
 8001f92:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f94:	68a3      	ldr	r3, [r4, #8]
 8001f96:	b933      	cbnz	r3, 8001fa6 <SPI_DMATransmitCplt+0x56>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	68d3      	ldr	r3, [r2, #12]
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	6893      	ldr	r3, [r2, #8]
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY;
 8001fa6:	2301      	movs	r3, #1
    hspi->TxXferCount = 0U;
 8001fa8:	2200      	movs	r2, #0
 8001faa:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8001fac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001fb2:	b923      	cbnz	r3, 8001fbe <SPI_DMATransmitCplt+0x6e>
  HAL_SPI_TxCpltCallback(hspi);
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	f7ff ffad 	bl	8001f14 <HAL_SPI_TxCpltCallback>
}
 8001fba:	b003      	add	sp, #12
 8001fbc:	bd30      	pop	{r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	f7ff ffb2 	bl	8001f28 <HAL_SPI_ErrorCallback>
}
 8001fc4:	b003      	add	sp, #12
 8001fc6:	bd30      	pop	{r4, r5, pc}

08001fc8 <HAL_SPI_GetState>:
  return hspi->State;
 8001fc8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop

08001fd0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd0:	6a02      	ldr	r2, [r0, #32]
{
 8001fd2:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fd8:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fda:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8001fdc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001fde:	6847      	ldr	r7, [r0, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001fe0:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx = TIMx->CCMR1;
 8001fe4:	6982      	ldr	r2, [r0, #24]
  tmpccer |= OC_Config->OCPolarity;
 8001fe6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fe8:	4d0d      	ldr	r5, [pc, #52]	; (8002020 <TIM_OC1_SetConfig+0x50>)
  tmpccmrx |= OC_Config->OCMode;
 8001fea:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fec:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ff0:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8001ff2:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001ff6:	d006      	beq.n	8002006 <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ffa:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ffc:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001ffe:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8002000:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002002:	6203      	str	r3, [r0, #32]
}
 8002004:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8002006:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002008:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 800200c:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002010:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8002014:	4333      	orrs	r3, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8002016:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002018:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800201c:	4327      	orrs	r7, r4
 800201e:	e7eb      	b.n	8001ff8 <TIM_OC1_SetConfig+0x28>
 8002020:	40012c00 	.word	0x40012c00

08002024 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002024:	6a02      	ldr	r2, [r0, #32]
{
 8002026:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002028:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800202c:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800202e:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8002030:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002032:	6847      	ldr	r7, [r0, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8002034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 8002038:	69c2      	ldr	r2, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800203a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800203e:	4d0f      	ldr	r5, [pc, #60]	; (800207c <TIM_OC3_SetConfig+0x58>)
  tmpccmrx |= OC_Config->OCMode;
 8002040:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002042:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002046:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8002048:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800204c:	d006      	beq.n	800205c <TIM_OC3_SetConfig+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800204e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002050:	6047      	str	r7, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002052:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002054:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8002056:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002058:	6203      	str	r3, [r0, #32]
}
 800205a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800205c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800205e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002062:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002066:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800206a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800206e:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002074:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 8002078:	e7e9      	b.n	800204e <TIM_OC3_SetConfig+0x2a>
 800207a:	bf00      	nop
 800207c:	40012c00 	.word	0x40012c00

08002080 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002080:	6a02      	ldr	r2, [r0, #32]
{
 8002082:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002084:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002088:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800208a:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800208c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800208e:	6845      	ldr	r5, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 8002090:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 8002094:	69c2      	ldr	r2, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002096:	ea43 3306 	orr.w	r3, r3, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800209a:	4e0a      	ldr	r6, [pc, #40]	; (80020c4 <TIM_OC4_SetConfig+0x44>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800209c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800209e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a2:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020a4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020a8:	d104      	bne.n	80020b4 <TIM_OC4_SetConfig+0x34>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020aa:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020ac:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020b0:	ea45 1584 	orr.w	r5, r5, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020b4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80020b6:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80020b8:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80020ba:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80020bc:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80020be:	6203      	str	r3, [r0, #32]
}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40012c00 	.word	0x40012c00

080020c8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020c8:	6803      	ldr	r3, [r0, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	f042 0201 	orr.w	r2, r2, #1
 80020d0:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d8:	2a06      	cmp	r2, #6
 80020da:	d003      	beq.n	80020e4 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]
}
 80020e4:	2000      	movs	r0, #0
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_OC_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020e8:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ea:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020ec:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80020f0:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80020f2:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80020f6:	ea20 0001 	bic.w	r0, r0, r1
 80020fa:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80020fc:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <HAL_TIM_OC_Start+0x40>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002100:	4301      	orrs	r1, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002102:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002104:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002106:	d00a      	beq.n	800211e <HAL_TIM_OC_Start+0x36>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210e:	2a06      	cmp	r2, #6
 8002110:	d003      	beq.n	800211a <HAL_TIM_OC_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
}
 800211a:	2000      	movs	r0, #0
 800211c:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 800211e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002124:	645a      	str	r2, [r3, #68]	; 0x44
 8002126:	e7ef      	b.n	8002108 <HAL_TIM_OC_Start+0x20>
 8002128:	40012c00 	.word	0x40012c00

0800212c <HAL_TIM_PWM_Start>:
 800212c:	f7ff bfdc 	b.w	80020e8 <HAL_TIM_OC_Start>

08002130 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002130:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002134:	2b01      	cmp	r3, #1
 8002136:	d05a      	beq.n	80021ee <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	2202      	movs	r2, #2
{
 800213a:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800213c:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 800213e:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002144:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002146:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002148:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800214c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8002150:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8002152:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8002156:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002158:	d074      	beq.n	8002244 <HAL_TIM_ConfigClockSource+0x114>
 800215a:	d94a      	bls.n	80021f2 <HAL_TIM_ConfigClockSource+0xc2>
 800215c:	2c60      	cmp	r4, #96	; 0x60
 800215e:	d02d      	beq.n	80021bc <HAL_TIM_ConfigClockSource+0x8c>
 8002160:	d956      	bls.n	8002210 <HAL_TIM_ConfigClockSource+0xe0>
 8002162:	2c70      	cmp	r4, #112	; 0x70
 8002164:	d01a      	beq.n	800219c <HAL_TIM_ConfigClockSource+0x6c>
 8002166:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800216a:	d10e      	bne.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800216c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8002170:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8002172:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002174:	432a      	orrs	r2, r5
 8002176:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800217e:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8002180:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002188:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800218a:	2300      	movs	r3, #0
}
 800218c:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 800218e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8002190:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8002194:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8002198:	4618      	mov	r0, r3
}
 800219a:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800219c:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 80021a0:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 80021a2:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021a4:	432a      	orrs	r2, r5
 80021a6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021aa:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ae:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80021b0:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80021b2:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021b4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80021b8:	609a      	str	r2, [r3, #8]
      break;
 80021ba:	e7e6      	b.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021bc:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021be:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c0:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021c4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021c6:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c8:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80021ca:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021cc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021d4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021d8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80021dc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80021de:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80021e0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021e6:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	e7cd      	b.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80021ee:	2002      	movs	r0, #2
}
 80021f0:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80021f2:	2c10      	cmp	r4, #16
 80021f4:	d004      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0xd0>
 80021f6:	d93d      	bls.n	8002274 <HAL_TIM_ConfigClockSource+0x144>
 80021f8:	2c20      	cmp	r4, #32
 80021fa:	d001      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0xd0>
 80021fc:	2c30      	cmp	r4, #48	; 0x30
 80021fe:	d1c4      	bne.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8002200:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002202:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002206:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800220a:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 800220c:	609c      	str	r4, [r3, #8]
 800220e:	e7bc      	b.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002210:	2c50      	cmp	r4, #80	; 0x50
 8002212:	d1ba      	bne.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8002214:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002216:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002218:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800221a:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800221e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002220:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002222:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002224:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002228:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800222c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002230:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002234:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002236:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002238:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800223c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	e7a2      	b.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8002244:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002246:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002248:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224a:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224e:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002250:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002252:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002254:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002258:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800225c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002260:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002264:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002266:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002268:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800226c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	e78a      	b.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002274:	2c00      	cmp	r4, #0
 8002276:	d0c3      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0xd0>
 8002278:	e787      	b.n	800218a <HAL_TIM_ConfigClockSource+0x5a>
 800227a:	bf00      	nop

0800227c <HAL_TIM_PeriodElapsedCallback>:
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <HAL_TIM_OC_DelayElapsedCallback>:
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop

08002284 <HAL_TIM_IC_CaptureCallback>:
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop

0800228c <HAL_TIM_TriggerCallback>:
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop

08002290 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002290:	6803      	ldr	r3, [r0, #0]
{
 8002292:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002294:	691a      	ldr	r2, [r3, #16]
{
 8002296:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002298:	0791      	lsls	r1, r2, #30
 800229a:	d502      	bpl.n	80022a2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	0792      	lsls	r2, r2, #30
 80022a0:	d45f      	bmi.n	8002362 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	0750      	lsls	r0, r2, #29
 80022a6:	d502      	bpl.n	80022ae <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	0751      	lsls	r1, r2, #29
 80022ac:	d446      	bmi.n	800233c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	0712      	lsls	r2, r2, #28
 80022b2:	d502      	bpl.n	80022ba <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	0710      	lsls	r0, r2, #28
 80022b8:	d42e      	bmi.n	8002318 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	06d2      	lsls	r2, r2, #27
 80022be:	d502      	bpl.n	80022c6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	06d0      	lsls	r0, r2, #27
 80022c4:	d418      	bmi.n	80022f8 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	07d1      	lsls	r1, r2, #31
 80022ca:	d502      	bpl.n	80022d2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	07d2      	lsls	r2, r2, #31
 80022d0:	d45d      	bmi.n	800238e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	0610      	lsls	r0, r2, #24
 80022d6:	d502      	bpl.n	80022de <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	0611      	lsls	r1, r2, #24
 80022dc:	d45f      	bmi.n	800239e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	0652      	lsls	r2, r2, #25
 80022e2:	d502      	bpl.n	80022ea <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	0650      	lsls	r0, r2, #25
 80022e8:	d461      	bmi.n	80023ae <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	0691      	lsls	r1, r2, #26
 80022ee:	d502      	bpl.n	80022f6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	0692      	lsls	r2, r2, #26
 80022f4:	d443      	bmi.n	800237e <HAL_TIM_IRQHandler+0xee>
}
 80022f6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022f8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022fc:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022fe:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002300:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002302:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002304:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002308:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230a:	d064      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800230c:	f7ff ffba 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002310:	2200      	movs	r2, #0
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	7722      	strb	r2, [r4, #28]
 8002316:	e7d6      	b.n	80022c6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002318:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800231e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002320:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002324:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002326:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002328:	d152      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	f7ff ffa9 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232e:	4620      	mov	r0, r4
 8002330:	f7ff ffaa 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002334:	2200      	movs	r2, #0
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	7722      	strb	r2, [r4, #28]
 800233a:	e7be      	b.n	80022ba <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800233c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002340:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002342:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002344:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002346:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002348:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800234e:	d13c      	bne.n	80023ca <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002350:	f7ff ff96 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff ff97 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235a:	2200      	movs	r2, #0
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	7722      	strb	r2, [r4, #28]
 8002360:	e7a5      	b.n	80022ae <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002362:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002366:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002368:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236e:	079b      	lsls	r3, r3, #30
 8002370:	d025      	beq.n	80023be <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002372:	f7ff ff87 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	2200      	movs	r2, #0
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	7722      	strb	r2, [r4, #28]
 800237c:	e791      	b.n	80022a2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800237e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002382:	4620      	mov	r0, r4
}
 8002384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002388:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800238a:	f000 b96b 	b.w	8002664 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800238e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002392:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002394:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002396:	f7ff ff71 	bl	800227c <HAL_TIM_PeriodElapsedCallback>
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	e799      	b.n	80022d2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800239e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80023a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023a6:	f000 f95f 	bl	8002668 <HAL_TIMEx_BreakCallback>
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	e797      	b.n	80022de <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80023b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023b6:	f7ff ff69 	bl	800228c <HAL_TIM_TriggerCallback>
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	e795      	b.n	80022ea <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023be:	f7ff ff5f 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff ff60 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
 80023c8:	e7d5      	b.n	8002376 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80023ca:	f7ff ff5b 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 80023ce:	e7c4      	b.n	800235a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80023d0:	f7ff ff58 	bl	8002284 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e7ae      	b.n	8002334 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	f7ff ff53 	bl	8002280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023da:	4620      	mov	r0, r4
 80023dc:	f7ff ff54 	bl	8002288 <HAL_TIM_PWM_PulseFinishedCallback>
 80023e0:	e796      	b.n	8002310 <HAL_TIM_IRQHandler+0x80>
 80023e2:	bf00      	nop

080023e4 <TIM_Base_SetConfig>:
{
 80023e4:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023e6:	4e1c      	ldr	r6, [pc, #112]	; (8002458 <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 80023e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ea:	42b0      	cmp	r0, r6
 80023ec:	694d      	ldr	r5, [r1, #20]
 80023ee:	688c      	ldr	r4, [r1, #8]
 80023f0:	680a      	ldr	r2, [r1, #0]
 80023f2:	d01d      	beq.n	8002430 <TIM_Base_SetConfig+0x4c>
 80023f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023f8:	d011      	beq.n	800241e <TIM_Base_SetConfig+0x3a>
 80023fa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80023fe:	42b0      	cmp	r0, r6
 8002400:	d00d      	beq.n	800241e <TIM_Base_SetConfig+0x3a>
 8002402:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002406:	42b0      	cmp	r0, r6
 8002408:	d009      	beq.n	800241e <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800240a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800240e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002410:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002412:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002414:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002416:	6282      	str	r2, [r0, #40]	; 0x28
}
 8002418:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800241a:	6143      	str	r3, [r0, #20]
}
 800241c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800241e:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002424:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002426:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242c:	430b      	orrs	r3, r1
 800242e:	e7ec      	b.n	800240a <TIM_Base_SetConfig+0x26>
    tmpcr1 |= Structure->CounterMode;
 8002430:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002436:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002438:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800243a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002444:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002446:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002448:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800244a:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800244c:	690b      	ldr	r3, [r1, #16]
}
 800244e:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = Structure->RepetitionCounter;
 8002450:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002452:	2301      	movs	r3, #1
 8002454:	6143      	str	r3, [r0, #20]
}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00

0800245c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800245c:	b1b8      	cbz	r0, 800248e <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 800245e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8002462:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002464:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002468:	4604      	mov	r4, r0
 800246a:	b15b      	cbz	r3, 8002484 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 800246c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002470:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002474:	1d21      	adds	r1, r4, #4
 8002476:	f7ff ffb5 	bl	80023e4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800247a:	2301      	movs	r3, #1
  return HAL_OK;
 800247c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800247e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002482:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002484:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002488:	f7fe fa58 	bl	800093c <HAL_TIM_Base_MspInit>
 800248c:	e7ee      	b.n	800246c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800248e:	2001      	movs	r0, #1
}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002494:	b1b8      	cbz	r0, 80024c6 <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800249a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800249c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024a0:	4604      	mov	r4, r0
 80024a2:	b15b      	cbz	r3, 80024bc <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ac:	1d21      	adds	r1, r4, #4
 80024ae:	f7ff ff99 	bl	80023e4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80024b2:	2301      	movs	r3, #1
  return HAL_OK;
 80024b4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80024ba:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80024bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80024c0:	f7fe fa6c 	bl	800099c <HAL_TIM_PWM_MspInit>
 80024c4:	e7ee      	b.n	80024a4 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80024c6:	2001      	movs	r0, #1
}
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop

080024cc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024cc:	6a02      	ldr	r2, [r0, #32]
{
 80024ce:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d0:	f022 0210 	bic.w	r2, r2, #16
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024d4:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024d6:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 80024d8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80024da:	6847      	ldr	r7, [r0, #4]
  tmpccer &= ~TIM_CCER_CC2P;
 80024dc:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx = TIMx->CCMR1;
 80024e0:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024e2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024e6:	4d0f      	ldr	r5, [pc, #60]	; (8002524 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024e8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024ea:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024ee:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024f0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024f4:	d006      	beq.n	8002504 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 80024f6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80024f8:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80024fa:	6182      	str	r2, [r0, #24]
}
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80024fe:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002500:	6203      	str	r3, [r0, #32]
}
 8002502:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002504:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800250a:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800250e:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002512:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002516:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8002518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800251c:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 8002520:	e7e9      	b.n	80024f6 <TIM_OC2_SetConfig+0x2a>
 8002522:	bf00      	nop
 8002524:	40012c00 	.word	0x40012c00

08002528 <HAL_TIM_PWM_ConfigChannel>:
{
 8002528:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800252a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800252e:	2b01      	cmp	r3, #1
 8002530:	d074      	beq.n	800261c <HAL_TIM_PWM_ConfigChannel+0xf4>
 8002532:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8002536:	2101      	movs	r1, #1
 8002538:	4604      	mov	r4, r0
 800253a:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800253e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8002542:	2a0c      	cmp	r2, #12
 8002544:	d819      	bhi.n	800257a <HAL_TIM_PWM_ConfigChannel+0x52>
 8002546:	e8df f002 	tbb	[pc, r2]
 800254a:	1807      	.short	0x1807
 800254c:	18381818 	.word	0x18381818
 8002550:	18511818 	.word	0x18511818
 8002554:	1818      	.short	0x1818
 8002556:	1f          	.byte	0x1f
 8002557:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002558:	4629      	mov	r1, r5
 800255a:	6800      	ldr	r0, [r0, #0]
 800255c:	f7ff fd38 	bl	8001fd0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002560:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002562:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002564:	6999      	ldr	r1, [r3, #24]
 8002566:	f041 0108 	orr.w	r1, r1, #8
 800256a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800256c:	6999      	ldr	r1, [r3, #24]
 800256e:	f021 0104 	bic.w	r1, r1, #4
 8002572:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	4302      	orrs	r2, r0
 8002578:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800257a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800257c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800257e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002582:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002586:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002588:	4629      	mov	r1, r5
 800258a:	6800      	ldr	r0, [r0, #0]
 800258c:	f7ff fd78 	bl	8002080 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002590:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002592:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002594:	69d9      	ldr	r1, [r3, #28]
 8002596:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800259a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800259c:	69d9      	ldr	r1, [r3, #28]
 800259e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025a2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80025aa:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80025ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025ae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80025b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80025b8:	e7e5      	b.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025ba:	4629      	mov	r1, r5
 80025bc:	6800      	ldr	r0, [r0, #0]
 80025be:	f7ff ff85 	bl	80024cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025c4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025c6:	6999      	ldr	r1, [r3, #24]
 80025c8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80025cc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025ce:	6999      	ldr	r1, [r3, #24]
 80025d0:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025d4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025d6:	699a      	ldr	r2, [r3, #24]
 80025d8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80025dc:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80025de:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025e0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80025e2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80025e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80025ea:	e7cc      	b.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025ec:	4629      	mov	r1, r5
 80025ee:	6800      	ldr	r0, [r0, #0]
 80025f0:	f7ff fd18 	bl	8002024 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025f4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025f6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80025f8:	69d9      	ldr	r1, [r3, #28]
 80025fa:	f041 0108 	orr.w	r1, r1, #8
 80025fe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002600:	69d9      	ldr	r1, [r3, #28]
 8002602:	f021 0104 	bic.w	r1, r1, #4
 8002606:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	4302      	orrs	r2, r0
 800260c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800260e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002610:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002612:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8002616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800261a:	e7b4      	b.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 800261c:	2002      	movs	r0, #2
}
 800261e:	bd38      	pop	{r3, r4, r5, pc}

08002620 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002620:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002624:	2a01      	cmp	r2, #1
 8002626:	d01a      	beq.n	800265e <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	2202      	movs	r2, #2
{
 800262a:	b4f0      	push	{r4, r5, r6, r7}
 800262c:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800262e:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 8002630:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8002632:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002638:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800263a:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 800263e:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002642:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 8002644:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 8002646:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800264c:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 800264e:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002650:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002652:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002656:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 800265a:	bcf0      	pop	{r4, r5, r6, r7}
 800265c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800265e:	2002      	movs	r0, #2
}
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop

08002664 <HAL_TIMEx_CommutCallback>:
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop

08002668 <HAL_TIMEx_BreakCallback>:
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop

0800266c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800266c:	b538      	push	{r3, r4, r5, lr}
 800266e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002670:	6803      	ldr	r3, [r0, #0]
 8002672:	68c0      	ldr	r0, [r0, #12]
 8002674:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002676:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002678:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800267c:	4301      	orrs	r1, r0
 800267e:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002680:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002682:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002686:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800268a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800268c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002690:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002692:	430a      	orrs	r2, r1
 8002694:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002696:	695a      	ldr	r2, [r3, #20]
 8002698:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800269a:	4912      	ldr	r1, [pc, #72]	; (80026e4 <UART_SetConfig+0x78>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800269c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026a0:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 80026a2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026a4:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 80026a6:	d01a      	beq.n	80026de <UART_SetConfig+0x72>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026a8:	f7ff f8f0 	bl	800188c <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ac:	6863      	ldr	r3, [r4, #4]
 80026ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80026bc:	2364      	movs	r3, #100	; 0x64
 80026be:	490a      	ldr	r1, [pc, #40]	; (80026e8 <UART_SetConfig+0x7c>)
 80026c0:	6824      	ldr	r4, [r4, #0]
 80026c2:	fba1 5200 	umull	r5, r2, r1, r0
 80026c6:	0952      	lsrs	r2, r2, #5
 80026c8:	fb03 0312 	mls	r3, r3, r2, r0
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	3332      	adds	r3, #50	; 0x32
 80026d0:	fba1 1303 	umull	r1, r3, r1, r3
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80026da:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 80026de:	f7ff f8e5 	bl	80018ac <HAL_RCC_GetPCLK2Freq>
 80026e2:	e7e3      	b.n	80026ac <UART_SetConfig+0x40>
 80026e4:	40013800 	.word	0x40013800
 80026e8:	51eb851f 	.word	0x51eb851f

080026ec <HAL_UART_Init>:
  if (huart == NULL)
 80026ec:	b360      	cbz	r0, 8002748 <HAL_UART_Init+0x5c>
{
 80026ee:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80026f0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80026f4:	4604      	mov	r4, r0
 80026f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026fa:	b303      	cbz	r3, 800273e <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80026fc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80026fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002700:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002704:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002706:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800270c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800270e:	f7ff ffad 	bl	800266c <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002714:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002716:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 8002718:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002728:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002730:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002734:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002738:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800273c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800273e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002742:	f7fe f98f 	bl	8000a64 <HAL_UART_MspInit>
 8002746:	e7d9      	b.n	80026fc <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8002748:	2001      	movs	r0, #1
}
 800274a:	4770      	bx	lr

0800274c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800274c:	b084      	sub	sp, #16
 800274e:	a801      	add	r0, sp, #4
 8002750:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002754:	b004      	add	sp, #16
 8002756:	2000      	movs	r0, #0
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop

0800275c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800275c:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 8002760:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 8002762:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002766:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 8002768:	400b      	ands	r3, r1
 800276a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 800276e:	4770      	bx	lr

08002770 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002770:	2000      	movs	r0, #0
 8002772:	4770      	bx	lr

08002774 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002774:	b084      	sub	sp, #16
 8002776:	b470      	push	{r4, r5, r6}
 8002778:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800277a:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800277c:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 800277e:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 8002782:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002786:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800278a:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800278e:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 8002792:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 8002794:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 8002798:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 800279c:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80027a0:	bc70      	pop	{r4, r5, r6}
 80027a2:	b004      	add	sp, #16
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop

080027a8 <USB_DevDisconnect>:
 80027a8:	2000      	movs	r0, #0
 80027aa:	4770      	bx	lr

080027ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80027ac:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80027ae:	4903      	ldr	r1, [pc, #12]	; (80027bc <MX_FATFS_Init+0x10>)
 80027b0:	4803      	ldr	r0, [pc, #12]	; (80027c0 <MX_FATFS_Init+0x14>)
 80027b2:	f002 f93f 	bl	8004a34 <FATFS_LinkDriver>
 80027b6:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <MX_FATFS_Init+0x18>)
 80027b8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80027ba:	bd08      	pop	{r3, pc}
 80027bc:	20001a38 	.word	0x20001a38
 80027c0:	20000210 	.word	0x20000210
 80027c4:	20001a3c 	.word	0x20001a3c

080027c8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 80027c8:	2000      	movs	r0, #0
 80027ca:	4770      	bx	lr

080027cc <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80027cc:	b510      	push	{r4, lr}
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80027ce:	4c09      	ldr	r4, [pc, #36]	; (80027f4 <SPI_TxByte+0x28>)
{
 80027d0:	b082      	sub	sp, #8
 80027d2:	f88d 0007 	strb.w	r0, [sp, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fbf6 	bl	8001fc8 <HAL_SPI_GetState>
 80027dc:	2801      	cmp	r0, #1
 80027de:	d1fa      	bne.n	80027d6 <SPI_TxByte+0xa>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80027e0:	4602      	mov	r2, r0
 80027e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e6:	f10d 0107 	add.w	r1, sp, #7
 80027ea:	4802      	ldr	r0, [pc, #8]	; (80027f4 <SPI_TxByte+0x28>)
 80027ec:	f7ff fa66 	bl	8001cbc <HAL_SPI_Transmit>
}
 80027f0:	b002      	add	sp, #8
 80027f2:	bd10      	pop	{r4, pc}
 80027f4:	200015e8 	.word	0x200015e8

080027f8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
  uint8_t dummy, data;
  dummy = 0xFF;
 80027f8:	22ff      	movs	r2, #255	; 0xff
  data = 0;
 80027fa:	2300      	movs	r3, #0
{
 80027fc:	b510      	push	{r4, lr}
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027fe:	4c0d      	ldr	r4, [pc, #52]	; (8002834 <SPI_RxByte+0x3c>)
{
 8002800:	b084      	sub	sp, #16
  dummy = 0xFF;
 8002802:	f88d 200e 	strb.w	r2, [sp, #14]
  data = 0;
 8002806:	f88d 300f 	strb.w	r3, [sp, #15]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff fbdc 	bl	8001fc8 <HAL_SPI_GetState>
 8002810:	2801      	cmp	r0, #1
 8002812:	d1fa      	bne.n	800280a <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002818:	4603      	mov	r3, r0
 800281a:	9200      	str	r2, [sp, #0]
 800281c:	f10d 010e 	add.w	r1, sp, #14
 8002820:	f10d 020f 	add.w	r2, sp, #15
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <SPI_RxByte+0x3c>)
 8002826:	f7ff fb0b 	bl	8001e40 <HAL_SPI_TransmitReceive>
  
  return data;
}
 800282a:	f89d 000f 	ldrb.w	r0, [sp, #15]
 800282e:	b004      	add	sp, #16
 8002830:	bd10      	pop	{r4, pc}
 8002832:	bf00      	nop
 8002834:	200015e8 	.word	0x200015e8

08002838 <SD_PowerOn>:
  return res;
}

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8002838:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800283a:	2201      	movs	r2, #1
{
 800283c:	b083      	sub	sp, #12
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800283e:	2180      	movs	r1, #128	; 0x80
 8002840:	481a      	ldr	r0, [pc, #104]	; (80028ac <SD_PowerOn+0x74>)
 8002842:	f7fe fcd3 	bl	80011ec <HAL_GPIO_WritePin>
 8002846:	240a      	movs	r4, #10
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
  
  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 8002848:	20ff      	movs	r0, #255	; 0xff
 800284a:	f7ff ffbf 	bl	80027cc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800284e:	3c01      	subs	r4, #1
 8002850:	d1fa      	bne.n	8002848 <SD_PowerOn+0x10>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002852:	4622      	mov	r2, r4
 8002854:	4815      	ldr	r0, [pc, #84]	; (80028ac <SD_PowerOn+0x74>)
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	f7fe fcc8 	bl	80011ec <HAL_GPIO_WritePin>
  
  /* SPI Chips Select */
  SELECT();
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800285c:	2340      	movs	r3, #64	; 0x40
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
 800285e:	f44f 4215 	mov.w	r2, #38144	; 0x9500
 8002862:	4618      	mov	r0, r3
  cmd_arg[0] = (CMD0 | 0x40);
 8002864:	9300      	str	r3, [sp, #0]
  cmd_arg[3] = 0;
 8002866:	f8ad 2004 	strh.w	r2, [sp, #4]
 800286a:	466c      	mov	r4, sp
 800286c:	f10d 0505 	add.w	r5, sp, #5
 8002870:	e001      	b.n	8002876 <SD_PowerOn+0x3e>
 8002872:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  cmd_arg[5] = 0x95;
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 8002876:	f7ff ffa9 	bl	80027cc <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800287a:	42ac      	cmp	r4, r5
 800287c:	d1f9      	bne.n	8002872 <SD_PowerOn+0x3a>
 800287e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8002882:	e001      	b.n	8002888 <SD_PowerOn+0x50>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8002884:	3c01      	subs	r4, #1
 8002886:	d003      	beq.n	8002890 <SD_PowerOn+0x58>
 8002888:	f7ff ffb6 	bl	80027f8 <SPI_RxByte>
 800288c:	2801      	cmp	r0, #1
 800288e:	d1f9      	bne.n	8002884 <SD_PowerOn+0x4c>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002890:	2201      	movs	r2, #1
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	4805      	ldr	r0, [pc, #20]	; (80028ac <SD_PowerOn+0x74>)
 8002896:	f7fe fca9 	bl	80011ec <HAL_GPIO_WritePin>
  {
    Count--;
  }
  
  DESELECT();
  SPI_TxByte(0XFF);
 800289a:	20ff      	movs	r0, #255	; 0xff
 800289c:	f7ff ff96 	bl	80027cc <SPI_TxByte>
  
  PowerFlag = 1;
 80028a0:	2201      	movs	r2, #1
 80028a2:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <SD_PowerOn+0x78>)
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	b003      	add	sp, #12
 80028a8:	bd30      	pop	{r4, r5, pc}
 80028aa:	bf00      	nop
 80028ac:	40010c00 	.word	0x40010c00
 80028b0:	20000246 	.word	0x20000246

080028b4 <SD_ReadyWait>:
  Timer2 = 50;
 80028b4:	2332      	movs	r3, #50	; 0x32
{
 80028b6:	b510      	push	{r4, lr}
  Timer2 = 50;
 80028b8:	4c05      	ldr	r4, [pc, #20]	; (80028d0 <SD_ReadyWait+0x1c>)
 80028ba:	7023      	strb	r3, [r4, #0]
  SPI_RxByte();
 80028bc:	f7ff ff9c 	bl	80027f8 <SPI_RxByte>
 80028c0:	e001      	b.n	80028c6 <SD_ReadyWait+0x12>
  } while ((res != 0xFF) && Timer2);
 80028c2:	7823      	ldrb	r3, [r4, #0]
 80028c4:	b11b      	cbz	r3, 80028ce <SD_ReadyWait+0x1a>
    res = SPI_RxByte();
 80028c6:	f7ff ff97 	bl	80027f8 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 80028ca:	28ff      	cmp	r0, #255	; 0xff
 80028cc:	d1f9      	bne.n	80028c2 <SD_ReadyWait+0xe>
}
 80028ce:	bd10      	pop	{r4, pc}
 80028d0:	20001a30 	.word	0x20001a30

080028d4 <SD_TxDataBlock>:
}

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4605      	mov	r5, r0
 80028d8:	460c      	mov	r4, r1
  uint8_t resp, wc;
  uint8_t i = 0;
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80028da:	f7ff ffeb 	bl	80028b4 <SD_ReadyWait>
 80028de:	28ff      	cmp	r0, #255	; 0xff
 80028e0:	d001      	beq.n	80028e6 <SD_TxDataBlock+0x12>
    return FALSE;
 80028e2:	2000      	movs	r0, #0
  
  if ((resp & 0x1F) == 0x05)
    return TRUE;
  else
    return FALSE;
}
 80028e4:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(token);      
 80028e6:	4620      	mov	r0, r4
 80028e8:	f7ff ff70 	bl	80027cc <SPI_TxByte>
  if (token != 0xFD) 
 80028ec:	2cfd      	cmp	r4, #253	; 0xfd
 80028ee:	d028      	beq.n	8002942 <SD_TxDataBlock+0x6e>
 80028f0:	1cac      	adds	r4, r5, #2
 80028f2:	f205 2502 	addw	r5, r5, #514	; 0x202
      SPI_TxByte(*buff++);
 80028f6:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 80028fa:	f7ff ff67 	bl	80027cc <SPI_TxByte>
 80028fe:	3402      	adds	r4, #2
      SPI_TxByte(*buff++);
 8002900:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 8002904:	f7ff ff62 	bl	80027cc <SPI_TxByte>
    } while (--wc);
 8002908:	42ac      	cmp	r4, r5
 800290a:	d1f4      	bne.n	80028f6 <SD_TxDataBlock+0x22>
    SPI_RxByte();       /* CRC 무시 */
 800290c:	f7ff ff74 	bl	80027f8 <SPI_RxByte>
    SPI_RxByte();
 8002910:	2441      	movs	r4, #65	; 0x41
 8002912:	f7ff ff71 	bl	80027f8 <SPI_RxByte>
 8002916:	e002      	b.n	800291e <SD_TxDataBlock+0x4a>
    while (i <= 64) 
 8002918:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800291c:	d007      	beq.n	800292e <SD_TxDataBlock+0x5a>
      resp = SPI_RxByte();
 800291e:	f7ff ff6b 	bl	80027f8 <SPI_RxByte>
 8002922:	f000 051f 	and.w	r5, r0, #31
      if ((resp & 0x1F) == 0x05) 
 8002926:	2d05      	cmp	r5, #5
 8002928:	f104 33ff 	add.w	r3, r4, #4294967295
 800292c:	d1f4      	bne.n	8002918 <SD_TxDataBlock+0x44>
    while (SPI_RxByte() == 0);
 800292e:	f7ff ff63 	bl	80027f8 <SPI_RxByte>
 8002932:	2800      	cmp	r0, #0
 8002934:	d0fb      	beq.n	800292e <SD_TxDataBlock+0x5a>
    return FALSE;
 8002936:	f1a5 0005 	sub.w	r0, r5, #5
 800293a:	fab0 f080 	clz	r0, r0
 800293e:	0940      	lsrs	r0, r0, #5
}
 8002940:	bd38      	pop	{r3, r4, r5, pc}
 8002942:	2500      	movs	r5, #0
 8002944:	e7f7      	b.n	8002936 <SD_TxDataBlock+0x62>
 8002946:	bf00      	nop

08002948 <SD_SendCmd.part.0>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
 8002948:	b538      	push	{r3, r4, r5, lr}
 800294a:	460c      	mov	r4, r1
 800294c:	4605      	mov	r5, r0
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
    return 0xFF;
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800294e:	f7ff ff3d 	bl	80027cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002952:	0e20      	lsrs	r0, r4, #24
 8002954:	f7ff ff3a 	bl	80027cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002958:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800295c:	f7ff ff36 	bl	80027cc <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002960:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002964:	f7ff ff32 	bl	80027cc <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002968:	b2e0      	uxtb	r0, r4
 800296a:	f7ff ff2f 	bl	80027cc <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
  if (cmd == CMD0)
 800296e:	2d40      	cmp	r5, #64	; 0x40
 8002970:	d017      	beq.n	80029a2 <SD_SendCmd.part.0+0x5a>
    crc = 0x95; /* CRC for CMD0(0) */
  
  if (cmd == CMD8)
 8002972:	2d48      	cmp	r5, #72	; 0x48
 8002974:	d10d      	bne.n	8002992 <SD_SendCmd.part.0+0x4a>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002976:	2087      	movs	r0, #135	; 0x87
 8002978:	f7ff ff28 	bl	80027cc <SPI_TxByte>
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
 800297c:	240a      	movs	r4, #10
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
  do
  {
    res = SPI_RxByte();
 800297e:	f7ff ff3b 	bl	80027f8 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 8002982:	0602      	lsls	r2, r0, #24
 8002984:	f104 33ff 	add.w	r3, r4, #4294967295
 8002988:	d502      	bpl.n	8002990 <SD_SendCmd.part.0+0x48>
 800298a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800298e:	d1f6      	bne.n	800297e <SD_SendCmd.part.0+0x36>
  
  return res;
}
 8002990:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(crc);
 8002992:	2000      	movs	r0, #0
 8002994:	f7ff ff1a 	bl	80027cc <SPI_TxByte>
  if (cmd == CMD12)
 8002998:	2d4c      	cmp	r5, #76	; 0x4c
 800299a:	d1ef      	bne.n	800297c <SD_SendCmd.part.0+0x34>
    SPI_RxByte();
 800299c:	f7ff ff2c 	bl	80027f8 <SPI_RxByte>
 80029a0:	e7ec      	b.n	800297c <SD_SendCmd.part.0+0x34>
  SPI_TxByte(crc);
 80029a2:	2095      	movs	r0, #149	; 0x95
 80029a4:	f7ff ff12 	bl	80027cc <SPI_TxByte>
 80029a8:	e7e8      	b.n	800297c <SD_SendCmd.part.0+0x34>
 80029aa:	bf00      	nop

080029ac <SD_SendCmd>:
{
 80029ac:	b538      	push	{r3, r4, r5, lr}
 80029ae:	4604      	mov	r4, r0
 80029b0:	460d      	mov	r5, r1
  if (SD_ReadyWait() != 0xFF)
 80029b2:	f7ff ff7f 	bl	80028b4 <SD_ReadyWait>
 80029b6:	28ff      	cmp	r0, #255	; 0xff
 80029b8:	d001      	beq.n	80029be <SD_SendCmd+0x12>
}
 80029ba:	20ff      	movs	r0, #255	; 0xff
 80029bc:	bd38      	pop	{r3, r4, r5, pc}
 80029be:	4629      	mov	r1, r5
 80029c0:	4620      	mov	r0, r4
 80029c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029c6:	f7ff bfbf 	b.w	8002948 <SD_SendCmd.part.0>
 80029ca:	bf00      	nop

080029cc <SD_RxDataBlock>:
  Timer1 = 10;
 80029cc:	230a      	movs	r3, #10
{
 80029ce:	b570      	push	{r4, r5, r6, lr}
  Timer1 = 10;
 80029d0:	4e11      	ldr	r6, [pc, #68]	; (8002a18 <SD_RxDataBlock+0x4c>)
{
 80029d2:	4604      	mov	r4, r0
 80029d4:	460d      	mov	r5, r1
  Timer1 = 10;
 80029d6:	7033      	strb	r3, [r6, #0]
 80029d8:	e003      	b.n	80029e2 <SD_RxDataBlock+0x16>
  } while((token == 0xFF) && Timer1);
 80029da:	7833      	ldrb	r3, [r6, #0]
 80029dc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80029e0:	b1bb      	cbz	r3, 8002a12 <SD_RxDataBlock+0x46>
    token = SPI_RxByte();
 80029e2:	f7ff ff09 	bl	80027f8 <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 80029e6:	28ff      	cmp	r0, #255	; 0xff
 80029e8:	d0f7      	beq.n	80029da <SD_RxDataBlock+0xe>
  if(token != 0xFE)
 80029ea:	28fe      	cmp	r0, #254	; 0xfe
 80029ec:	d112      	bne.n	8002a14 <SD_RxDataBlock+0x48>
 80029ee:	3402      	adds	r4, #2
  *buff = SPI_RxByte();
 80029f0:	f7ff ff02 	bl	80027f8 <SPI_RxByte>
 80029f4:	f804 0c02 	strb.w	r0, [r4, #-2]
 80029f8:	f7ff fefe 	bl	80027f8 <SPI_RxByte>
  } while(btr -= 2);
 80029fc:	3d02      	subs	r5, #2
  *buff = SPI_RxByte();
 80029fe:	f804 0c01 	strb.w	r0, [r4, #-1]
 8002a02:	f104 0402 	add.w	r4, r4, #2
  } while(btr -= 2);
 8002a06:	d1f3      	bne.n	80029f0 <SD_RxDataBlock+0x24>
  SPI_RxByte(); /* CRC 무시 */
 8002a08:	f7ff fef6 	bl	80027f8 <SPI_RxByte>
  SPI_RxByte();
 8002a0c:	f7ff fef4 	bl	80027f8 <SPI_RxByte>
 8002a10:	2001      	movs	r0, #1
}
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 8002a14:	2000      	movs	r0, #0
}
 8002a16:	bd70      	pop	{r4, r5, r6, pc}
 8002a18:	20001a31 	.word	0x20001a31

08002a1c <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002a1c:	b960      	cbnz	r0, 8002a38 <SD_disk_initialize+0x1c>
{
 8002a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return STA_NOINIT;  
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002a22:	4d75      	ldr	r5, [pc, #468]	; (8002bf8 <SD_disk_initialize+0x1dc>)
{
 8002a24:	b082      	sub	sp, #8
  if(Stat & STA_NODISK)
 8002a26:	782a      	ldrb	r2, [r5, #0]
 8002a28:	f012 0402 	ands.w	r4, r2, #2
 8002a2c:	d006      	beq.n	8002a3c <SD_disk_initialize+0x20>
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 8002a2e:	7828      	ldrb	r0, [r5, #0]
 8002a30:	b2c0      	uxtb	r0, r0
}
 8002a32:	b002      	add	sp, #8
 8002a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return STA_NOINIT;  
 8002a38:	2001      	movs	r0, #1
}
 8002a3a:	4770      	bx	lr
  SD_PowerOn();         
 8002a3c:	f7ff fefc 	bl	8002838 <SD_PowerOn>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002a40:	4622      	mov	r2, r4
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	486d      	ldr	r0, [pc, #436]	; (8002bfc <SD_disk_initialize+0x1e0>)
 8002a46:	f7fe fbd1 	bl	80011ec <HAL_GPIO_WritePin>
  if (SD_ReadyWait() != 0xFF)
 8002a4a:	f7ff ff33 	bl	80028b4 <SD_ReadyWait>
 8002a4e:	28ff      	cmp	r0, #255	; 0xff
 8002a50:	d010      	beq.n	8002a74 <SD_disk_initialize+0x58>
  CardType = type;
 8002a52:	2400      	movs	r4, #0
 8002a54:	4b6a      	ldr	r3, [pc, #424]	; (8002c00 <SD_disk_initialize+0x1e4>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002a56:	2201      	movs	r2, #1
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	4868      	ldr	r0, [pc, #416]	; (8002bfc <SD_disk_initialize+0x1e0>)
  CardType = type;
 8002a5c:	701c      	strb	r4, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002a5e:	f7fe fbc5 	bl	80011ec <HAL_GPIO_WritePin>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002a62:	f7ff fec9 	bl	80027f8 <SPI_RxByte>
  return Stat;
 8002a66:	7828      	ldrb	r0, [r5, #0]
  PowerFlag = 0;
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <SD_disk_initialize+0x1e8>)
  return Stat;
 8002a6a:	b2c0      	uxtb	r0, r0
  PowerFlag = 0;
 8002a6c:	701c      	strb	r4, [r3, #0]
}
 8002a6e:	b002      	add	sp, #8
 8002a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a74:	4621      	mov	r1, r4
 8002a76:	2040      	movs	r0, #64	; 0x40
 8002a78:	f7ff ff66 	bl	8002948 <SD_SendCmd.part.0>
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002a7c:	2801      	cmp	r0, #1
 8002a7e:	d1e8      	bne.n	8002a52 <SD_disk_initialize+0x36>
    Timer1 = 100;
 8002a80:	2364      	movs	r3, #100	; 0x64
 8002a82:	4c61      	ldr	r4, [pc, #388]	; (8002c08 <SD_disk_initialize+0x1ec>)
 8002a84:	7023      	strb	r3, [r4, #0]
  if (SD_ReadyWait() != 0xFF)
 8002a86:	f7ff ff15 	bl	80028b4 <SD_ReadyWait>
 8002a8a:	28ff      	cmp	r0, #255	; 0xff
 8002a8c:	d045      	beq.n	8002b1a <SD_disk_initialize+0xfe>
 8002a8e:	f7ff ff11 	bl	80028b4 <SD_ReadyWait>
 8002a92:	28ff      	cmp	r0, #255	; 0xff
 8002a94:	f000 809a 	beq.w	8002bcc <SD_disk_initialize+0x1b0>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002a98:	2601      	movs	r6, #1
 8002a9a:	e005      	b.n	8002aa8 <SD_disk_initialize+0x8c>
  if (SD_ReadyWait() != 0xFF)
 8002a9c:	f7ff ff0a 	bl	80028b4 <SD_ReadyWait>
 8002aa0:	28ff      	cmp	r0, #255	; 0xff
 8002aa2:	d033      	beq.n	8002b0c <SD_disk_initialize+0xf0>
      } while (Timer1);
 8002aa4:	7823      	ldrb	r3, [r4, #0]
 8002aa6:	b1ab      	cbz	r3, 8002ad4 <SD_disk_initialize+0xb8>
        if (type == 2) 
 8002aa8:	2e02      	cmp	r6, #2
 8002aaa:	d1f7      	bne.n	8002a9c <SD_disk_initialize+0x80>
  if (SD_ReadyWait() != 0xFF)
 8002aac:	f7ff ff02 	bl	80028b4 <SD_ReadyWait>
 8002ab0:	28ff      	cmp	r0, #255	; 0xff
 8002ab2:	d1f7      	bne.n	8002aa4 <SD_disk_initialize+0x88>
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2077      	movs	r0, #119	; 0x77
 8002ab8:	f7ff ff46 	bl	8002948 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002abc:	2801      	cmp	r0, #1
 8002abe:	d8f1      	bhi.n	8002aa4 <SD_disk_initialize+0x88>
  if (SD_ReadyWait() != 0xFF)
 8002ac0:	f7ff fef8 	bl	80028b4 <SD_ReadyWait>
 8002ac4:	28ff      	cmp	r0, #255	; 0xff
 8002ac6:	d1ed      	bne.n	8002aa4 <SD_disk_initialize+0x88>
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2069      	movs	r0, #105	; 0x69
 8002acc:	f7ff ff3c 	bl	8002948 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d1e7      	bne.n	8002aa4 <SD_disk_initialize+0x88>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002ad4:	7823      	ldrb	r3, [r4, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0bb      	beq.n	8002a52 <SD_disk_initialize+0x36>
  if (SD_ReadyWait() != 0xFF)
 8002ada:	f7ff feeb 	bl	80028b4 <SD_ReadyWait>
 8002ade:	28ff      	cmp	r0, #255	; 0xff
 8002ae0:	d1b7      	bne.n	8002a52 <SD_disk_initialize+0x36>
 8002ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ae6:	2050      	movs	r0, #80	; 0x50
 8002ae8:	f7ff ff2e 	bl	8002948 <SD_SendCmd.part.0>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002aec:	2800      	cmp	r0, #0
 8002aee:	d1b0      	bne.n	8002a52 <SD_disk_initialize+0x36>
  CardType = type;
 8002af0:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <SD_disk_initialize+0x1e4>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	4841      	ldr	r0, [pc, #260]	; (8002bfc <SD_disk_initialize+0x1e0>)
  CardType = type;
 8002af8:	701e      	strb	r6, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002afa:	f7fe fb77 	bl	80011ec <HAL_GPIO_WritePin>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002afe:	f7ff fe7b 	bl	80027f8 <SPI_RxByte>
    Stat &= ~STA_NOINIT; 
 8002b02:	782b      	ldrb	r3, [r5, #0]
 8002b04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b08:	702b      	strb	r3, [r5, #0]
 8002b0a:	e790      	b.n	8002a2e <SD_disk_initialize+0x12>
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2041      	movs	r0, #65	; 0x41
 8002b10:	f7ff ff1a 	bl	8002948 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD1, 0) == 0)
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d1c5      	bne.n	8002aa4 <SD_disk_initialize+0x88>
 8002b18:	e7dc      	b.n	8002ad4 <SD_disk_initialize+0xb8>
 8002b1a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b1e:	2048      	movs	r0, #72	; 0x48
 8002b20:	f7ff ff12 	bl	8002948 <SD_SendCmd.part.0>
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002b24:	2801      	cmp	r0, #1
 8002b26:	d1b2      	bne.n	8002a8e <SD_disk_initialize+0x72>
 8002b28:	f10d 0804 	add.w	r8, sp, #4
 8002b2c:	4646      	mov	r6, r8
 8002b2e:	af02      	add	r7, sp, #8
        ocr[n] = SPI_RxByte();
 8002b30:	f7ff fe62 	bl	80027f8 <SPI_RxByte>
 8002b34:	f806 0b01 	strb.w	r0, [r6], #1
      for (n = 0; n < 4; n++)
 8002b38:	42b7      	cmp	r7, r6
 8002b3a:	d1f9      	bne.n	8002b30 <SD_disk_initialize+0x114>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d186      	bne.n	8002a52 <SD_disk_initialize+0x36>
 8002b44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002b48:	2baa      	cmp	r3, #170	; 0xaa
 8002b4a:	d182      	bne.n	8002a52 <SD_disk_initialize+0x36>
 8002b4c:	e001      	b.n	8002b52 <SD_disk_initialize+0x136>
        } while (Timer1);
 8002b4e:	7823      	ldrb	r3, [r4, #0]
 8002b50:	b1a3      	cbz	r3, 8002b7c <SD_disk_initialize+0x160>
  if (SD_ReadyWait() != 0xFF)
 8002b52:	f7ff feaf 	bl	80028b4 <SD_ReadyWait>
 8002b56:	28ff      	cmp	r0, #255	; 0xff
 8002b58:	d1f9      	bne.n	8002b4e <SD_disk_initialize+0x132>
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2077      	movs	r0, #119	; 0x77
 8002b5e:	f7ff fef3 	bl	8002948 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b62:	2801      	cmp	r0, #1
 8002b64:	d8f3      	bhi.n	8002b4e <SD_disk_initialize+0x132>
  if (SD_ReadyWait() != 0xFF)
 8002b66:	f7ff fea5 	bl	80028b4 <SD_ReadyWait>
 8002b6a:	28ff      	cmp	r0, #255	; 0xff
 8002b6c:	d1ef      	bne.n	8002b4e <SD_disk_initialize+0x132>
 8002b6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b72:	2069      	movs	r0, #105	; 0x69
 8002b74:	f7ff fee8 	bl	8002948 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b78:	2800      	cmp	r0, #0
 8002b7a:	d1e8      	bne.n	8002b4e <SD_disk_initialize+0x132>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b7c:	7823      	ldrb	r3, [r4, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f43f af67 	beq.w	8002a52 <SD_disk_initialize+0x36>
  if (SD_ReadyWait() != 0xFF)
 8002b84:	f7ff fe96 	bl	80028b4 <SD_ReadyWait>
 8002b88:	28ff      	cmp	r0, #255	; 0xff
 8002b8a:	f47f af62 	bne.w	8002a52 <SD_disk_initialize+0x36>
 8002b8e:	2100      	movs	r1, #0
 8002b90:	207a      	movs	r0, #122	; 0x7a
 8002b92:	f7ff fed9 	bl	8002948 <SD_SendCmd.part.0>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b96:	2800      	cmp	r0, #0
 8002b98:	f47f af5b 	bne.w	8002a52 <SD_disk_initialize+0x36>
 8002b9c:	4604      	mov	r4, r0
            ocr[n] = SPI_RxByte();
 8002b9e:	f7ff fe2b 	bl	80027f8 <SPI_RxByte>
 8002ba2:	f808 0004 	strb.w	r0, [r8, r4]
 8002ba6:	3401      	adds	r4, #1
          for (n = 0; n < 4; n++)
 8002ba8:	2c04      	cmp	r4, #4
 8002baa:	d1f8      	bne.n	8002b9e <SD_disk_initialize+0x182>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002bac:	f89d 3004 	ldrb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002bb0:	2201      	movs	r2, #1
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002bb2:	065b      	lsls	r3, r3, #25
  CardType = type;
 8002bb4:	bf4c      	ite	mi
 8002bb6:	2406      	movmi	r4, #6
 8002bb8:	2402      	movpl	r4, #2
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <SD_disk_initialize+0x1e4>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002bbc:	2180      	movs	r1, #128	; 0x80
 8002bbe:	480f      	ldr	r0, [pc, #60]	; (8002bfc <SD_disk_initialize+0x1e0>)
  CardType = type;
 8002bc0:	701c      	strb	r4, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002bc2:	f7fe fb13 	bl	80011ec <HAL_GPIO_WritePin>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002bc6:	f7ff fe17 	bl	80027f8 <SPI_RxByte>
 8002bca:	e79a      	b.n	8002b02 <SD_disk_initialize+0xe6>
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2077      	movs	r0, #119	; 0x77
 8002bd0:	f7ff feba 	bl	8002948 <SD_SendCmd.part.0>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bd4:	2801      	cmp	r0, #1
 8002bd6:	f63f af5f 	bhi.w	8002a98 <SD_disk_initialize+0x7c>
  if (SD_ReadyWait() != 0xFF)
 8002bda:	f7ff fe6b 	bl	80028b4 <SD_ReadyWait>
 8002bde:	28ff      	cmp	r0, #255	; 0xff
 8002be0:	f47f af5a 	bne.w	8002a98 <SD_disk_initialize+0x7c>
 8002be4:	2100      	movs	r1, #0
 8002be6:	2069      	movs	r0, #105	; 0x69
 8002be8:	f7ff feae 	bl	8002948 <SD_SendCmd.part.0>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bec:	2801      	cmp	r0, #1
 8002bee:	f63f af53 	bhi.w	8002a98 <SD_disk_initialize+0x7c>
 8002bf2:	2602      	movs	r6, #2
 8002bf4:	e758      	b.n	8002aa8 <SD_disk_initialize+0x8c>
 8002bf6:	bf00      	nop
 8002bf8:	2000020c 	.word	0x2000020c
 8002bfc:	40010c00 	.word	0x40010c00
 8002c00:	20000245 	.word	0x20000245
 8002c04:	20000246 	.word	0x20000246
 8002c08:	20001a31 	.word	0x20001a31

08002c0c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
 8002c0c:	b918      	cbnz	r0, 8002c16 <SD_disk_status+0xa>
    return STA_NOINIT; 
  
  return Stat;
 8002c0e:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <SD_disk_status+0x10>)
 8002c10:	7818      	ldrb	r0, [r3, #0]
 8002c12:	b2c0      	uxtb	r0, r0
 8002c14:	4770      	bx	lr
    return STA_NOINIT; 
 8002c16:	2001      	movs	r0, #1
}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000020c 	.word	0x2000020c

08002c20 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002c20:	b570      	push	{r4, r5, r6, lr}
  if (pdrv || !count)
 8002c22:	bb08      	cbnz	r0, 8002c68 <SD_disk_read+0x48>
 8002c24:	461c      	mov	r4, r3
 8002c26:	b1fb      	cbz	r3, 8002c68 <SD_disk_read+0x48>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <SD_disk_read+0xac>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	07d8      	lsls	r0, r3, #31
 8002c2e:	d41e      	bmi.n	8002c6e <SD_disk_read+0x4e>
    return RES_NOTRDY;
  
  if (!(CardType & 4))
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <SD_disk_read+0xb0>)
 8002c32:	4616      	mov	r6, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	460d      	mov	r5, r1
 8002c38:	075b      	lsls	r3, r3, #29
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002c3a:	bf58      	it	pl
 8002c3c:	0256      	lslpl	r6, r2, #9
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	2200      	movs	r2, #0
 8002c42:	4824      	ldr	r0, [pc, #144]	; (8002cd4 <SD_disk_read+0xb4>)
 8002c44:	f7fe fad2 	bl	80011ec <HAL_GPIO_WritePin>
  
  SELECT();
  
  if (count == 1) 
 8002c48:	2c01      	cmp	r4, #1
 8002c4a:	d013      	beq.n	8002c74 <SD_disk_read+0x54>
  if (SD_ReadyWait() != 0xFF)
 8002c4c:	f7ff fe32 	bl	80028b4 <SD_ReadyWait>
 8002c50:	28ff      	cmp	r0, #255	; 0xff
 8002c52:	d022      	beq.n	8002c9a <SD_disk_read+0x7a>
 8002c54:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002c56:	2201      	movs	r2, #1
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	481e      	ldr	r0, [pc, #120]	; (8002cd4 <SD_disk_read+0xb4>)
 8002c5c:	f7fe fac6 	bl	80011ec <HAL_GPIO_WritePin>
      SD_SendCmd(CMD12, 0); 
    }
  }
  
  DESELECT();
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002c60:	f7ff fdca 	bl	80027f8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
}
 8002c64:	4620      	mov	r0, r4
 8002c66:	bd70      	pop	{r4, r5, r6, pc}
    return RES_PARERR;
 8002c68:	2404      	movs	r4, #4
}
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	bd70      	pop	{r4, r5, r6, pc}
    return RES_NOTRDY;
 8002c6e:	2403      	movs	r4, #3
}
 8002c70:	4620      	mov	r0, r4
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
  if (SD_ReadyWait() != 0xFF)
 8002c74:	f7ff fe1e 	bl	80028b4 <SD_ReadyWait>
 8002c78:	28ff      	cmp	r0, #255	; 0xff
 8002c7a:	d1eb      	bne.n	8002c54 <SD_disk_read+0x34>
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	2051      	movs	r0, #81	; 0x51
 8002c80:	f7ff fe62 	bl	8002948 <SD_SendCmd.part.0>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d1e5      	bne.n	8002c54 <SD_disk_read+0x34>
 8002c88:	4628      	mov	r0, r5
 8002c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c8e:	f7ff fe9d 	bl	80029cc <SD_RxDataBlock>
 8002c92:	fab0 f480 	clz	r4, r0
 8002c96:	0964      	lsrs	r4, r4, #5
 8002c98:	e7dd      	b.n	8002c56 <SD_disk_read+0x36>
 8002c9a:	4631      	mov	r1, r6
 8002c9c:	2052      	movs	r0, #82	; 0x52
 8002c9e:	f7ff fe53 	bl	8002948 <SD_SendCmd.part.0>
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002ca2:	2800      	cmp	r0, #0
 8002ca4:	d1d6      	bne.n	8002c54 <SD_disk_read+0x34>
 8002ca6:	e001      	b.n	8002cac <SD_disk_read+0x8c>
      } while (--count);
 8002ca8:	3c01      	subs	r4, #1
 8002caa:	d009      	beq.n	8002cc0 <SD_disk_read+0xa0>
        if (!SD_RxDataBlock(buff, 512))
 8002cac:	4628      	mov	r0, r5
 8002cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cb2:	f7ff fe8b 	bl	80029cc <SD_RxDataBlock>
        buff += 512;
 8002cb6:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!SD_RxDataBlock(buff, 512))
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d1f4      	bne.n	8002ca8 <SD_disk_read+0x88>
 8002cbe:	2401      	movs	r4, #1
      SD_SendCmd(CMD12, 0); 
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	204c      	movs	r0, #76	; 0x4c
 8002cc4:	f7ff fe72 	bl	80029ac <SD_SendCmd>
 8002cc8:	e7c5      	b.n	8002c56 <SD_disk_read+0x36>
 8002cca:	bf00      	nop
 8002ccc:	2000020c 	.word	0x2000020c
 8002cd0:	20000245 	.word	0x20000245
 8002cd4:	40010c00 	.word	0x40010c00

08002cd8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdrv || !count)
 8002cda:	bb40      	cbnz	r0, 8002d2e <SD_disk_write+0x56>
 8002cdc:	461c      	mov	r4, r3
 8002cde:	b333      	cbz	r3, 8002d2e <SD_disk_write+0x56>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 8002ce0:	4b32      	ldr	r3, [pc, #200]	; (8002dac <SD_disk_write+0xd4>)
 8002ce2:	4616      	mov	r6, r2
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	07d5      	lsls	r5, r2, #31
 8002ce8:	d424      	bmi.n	8002d34 <SD_disk_write+0x5c>
    return RES_NOTRDY;
  
  if (Stat & STA_PROTECT)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	0758      	lsls	r0, r3, #29
 8002cee:	d424      	bmi.n	8002d3a <SD_disk_write+0x62>
    return RES_WRPRT;
  
  if (!(CardType & 4))
 8002cf0:	4f2f      	ldr	r7, [pc, #188]	; (8002db0 <SD_disk_write+0xd8>)
 8002cf2:	460d      	mov	r5, r1
 8002cf4:	783b      	ldrb	r3, [r7, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002cf6:	2180      	movs	r1, #128	; 0x80
  if (!(CardType & 4))
 8002cf8:	075a      	lsls	r2, r3, #29
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002cfa:	482e      	ldr	r0, [pc, #184]	; (8002db4 <SD_disk_write+0xdc>)
 8002cfc:	f04f 0200 	mov.w	r2, #0
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002d00:	bf58      	it	pl
 8002d02:	0276      	lslpl	r6, r6, #9
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002d04:	f7fe fa72 	bl	80011ec <HAL_GPIO_WritePin>
  
  SELECT();
  
  if (count == 1) 
 8002d08:	2c01      	cmp	r4, #1
 8002d0a:	d022      	beq.n	8002d52 <SD_disk_write+0x7a>
      count = 0;
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002d0c:	783b      	ldrb	r3, [r7, #0]
 8002d0e:	079b      	lsls	r3, r3, #30
 8002d10:	d416      	bmi.n	8002d40 <SD_disk_write+0x68>
  if (SD_ReadyWait() != 0xFF)
 8002d12:	f7ff fdcf 	bl	80028b4 <SD_ReadyWait>
 8002d16:	28ff      	cmp	r0, #255	; 0xff
 8002d18:	d02d      	beq.n	8002d76 <SD_disk_write+0x9e>
{
 8002d1a:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	4824      	ldr	r0, [pc, #144]	; (8002db4 <SD_disk_write+0xdc>)
 8002d22:	f7fe fa63 	bl	80011ec <HAL_GPIO_WritePin>
      }
    }
  }
  
  DESELECT();
  SPI_RxByte();
 8002d26:	f7ff fd67 	bl	80027f8 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
}
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return RES_PARERR;
 8002d2e:	2404      	movs	r4, #4
}
 8002d30:	4620      	mov	r0, r4
 8002d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return RES_NOTRDY;
 8002d34:	2403      	movs	r4, #3
}
 8002d36:	4620      	mov	r0, r4
 8002d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return RES_WRPRT;
 8002d3a:	2402      	movs	r4, #2
}
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SD_SendCmd(CMD55, 0);
 8002d40:	2100      	movs	r1, #0
 8002d42:	2077      	movs	r0, #119	; 0x77
 8002d44:	f7ff fe32 	bl	80029ac <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002d48:	4621      	mov	r1, r4
 8002d4a:	2057      	movs	r0, #87	; 0x57
 8002d4c:	f7ff fe2e 	bl	80029ac <SD_SendCmd>
 8002d50:	e7df      	b.n	8002d12 <SD_disk_write+0x3a>
  if (SD_ReadyWait() != 0xFF)
 8002d52:	f7ff fdaf 	bl	80028b4 <SD_ReadyWait>
 8002d56:	28ff      	cmp	r0, #255	; 0xff
 8002d58:	d1df      	bne.n	8002d1a <SD_disk_write+0x42>
 8002d5a:	4631      	mov	r1, r6
 8002d5c:	2058      	movs	r0, #88	; 0x58
 8002d5e:	f7ff fdf3 	bl	8002948 <SD_SendCmd.part.0>
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d1d9      	bne.n	8002d1a <SD_disk_write+0x42>
 8002d66:	4628      	mov	r0, r5
 8002d68:	21fe      	movs	r1, #254	; 0xfe
 8002d6a:	f7ff fdb3 	bl	80028d4 <SD_TxDataBlock>
 8002d6e:	fab0 f480 	clz	r4, r0
 8002d72:	0964      	lsrs	r4, r4, #5
 8002d74:	e7d2      	b.n	8002d1c <SD_disk_write+0x44>
 8002d76:	4631      	mov	r1, r6
 8002d78:	2059      	movs	r0, #89	; 0x59
 8002d7a:	f7ff fde5 	bl	8002948 <SD_SendCmd.part.0>
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d1cb      	bne.n	8002d1a <SD_disk_write+0x42>
 8002d82:	e001      	b.n	8002d88 <SD_disk_write+0xb0>
      } while (--count);
 8002d84:	3c01      	subs	r4, #1
 8002d86:	d007      	beq.n	8002d98 <SD_disk_write+0xc0>
        if(!SD_TxDataBlock(buff, 0xFC))
 8002d88:	4628      	mov	r0, r5
 8002d8a:	21fc      	movs	r1, #252	; 0xfc
 8002d8c:	f7ff fda2 	bl	80028d4 <SD_TxDataBlock>
        buff += 512;
 8002d90:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if(!SD_TxDataBlock(buff, 0xFC))
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d1f5      	bne.n	8002d84 <SD_disk_write+0xac>
      if(!SD_TxDataBlock(0, 0xFD))
 8002d98:	21fd      	movs	r1, #253	; 0xfd
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7ff fd9a 	bl	80028d4 <SD_TxDataBlock>
 8002da0:	2800      	cmp	r0, #0
 8002da2:	d0ba      	beq.n	8002d1a <SD_disk_write+0x42>
 8002da4:	3400      	adds	r4, #0
 8002da6:	bf18      	it	ne
 8002da8:	2401      	movne	r4, #1
 8002daa:	e7b7      	b.n	8002d1c <SD_disk_write+0x44>
 8002dac:	2000020c 	.word	0x2000020c
 8002db0:	20000245 	.word	0x20000245
 8002db4:	40010c00 	.word	0x40010c00

08002db8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002db8:	b570      	push	{r4, r5, r6, lr}
 8002dba:	b086      	sub	sp, #24
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
 8002dbc:	bb10      	cbnz	r0, 8002e04 <SD_disk_ioctl+0x4c>
    return RES_PARERR;
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 8002dbe:	2905      	cmp	r1, #5
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	4615      	mov	r5, r2
 8002dc4:	d013      	beq.n	8002dee <SD_disk_ioctl+0x36>
      res = RES_PARERR;
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <SD_disk_ioctl+0x17c>)
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	f012 0201 	ands.w	r2, r2, #1
 8002dce:	d11d      	bne.n	8002e0c <SD_disk_ioctl+0x54>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002dd0:	2180      	movs	r1, #128	; 0x80
 8002dd2:	4859      	ldr	r0, [pc, #356]	; (8002f38 <SD_disk_ioctl+0x180>)
 8002dd4:	f7fe fa0a 	bl	80011ec <HAL_GPIO_WritePin>
      return RES_NOTRDY;
    
    SELECT();
    
    switch (ctrl) 
 8002dd8:	2c0d      	cmp	r4, #13
 8002dda:	d831      	bhi.n	8002e40 <SD_disk_ioctl+0x88>
 8002ddc:	e8df f004 	tbb	[pc, r4]
 8002de0:	3042665f 	.word	0x3042665f
 8002de4:	30303030 	.word	0x30303030
 8002de8:	47303030 	.word	0x47303030
 8002dec:	204d      	.short	0x204d
    switch (*ptr) 
 8002dee:	7813      	ldrb	r3, [r2, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d00f      	beq.n	8002e14 <SD_disk_ioctl+0x5c>
 8002df4:	d32f      	bcc.n	8002e56 <SD_disk_ioctl+0x9e>
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d104      	bne.n	8002e04 <SD_disk_ioctl+0x4c>
  return PowerFlag;
 8002dfa:	4b50      	ldr	r3, [pc, #320]	; (8002f3c <SD_disk_ioctl+0x184>)
      res = RES_OK;             /* Power Check */
 8002dfc:	4604      	mov	r4, r0
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	7053      	strb	r3, [r2, #1]
      break;
 8002e02:	e000      	b.n	8002e06 <SD_disk_ioctl+0x4e>
      res = RES_PARERR;
 8002e04:	2404      	movs	r4, #4
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 8002e06:	4620      	mov	r0, r4
 8002e08:	b006      	add	sp, #24
 8002e0a:	bd70      	pop	{r4, r5, r6, pc}
      return RES_NOTRDY;
 8002e0c:	2403      	movs	r4, #3
}
 8002e0e:	4620      	mov	r0, r4
 8002e10:	b006      	add	sp, #24
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	9001      	str	r0, [sp, #4]
      SD_PowerOn();             /* Power On */
 8002e16:	f7ff fd0f 	bl	8002838 <SD_PowerOn>
      res = RES_OK;
 8002e1a:	9801      	ldr	r0, [sp, #4]
 8002e1c:	4604      	mov	r4, r0
      break;
 8002e1e:	e7f2      	b.n	8002e06 <SD_disk_ioctl+0x4e>
  if (SD_ReadyWait() != 0xFF)
 8002e20:	f7ff fd48 	bl	80028b4 <SD_ReadyWait>
 8002e24:	28ff      	cmp	r0, #255	; 0xff
 8002e26:	d10b      	bne.n	8002e40 <SD_disk_ioctl+0x88>
 8002e28:	2100      	movs	r1, #0
 8002e2a:	207a      	movs	r0, #122	; 0x7a
 8002e2c:	f7ff fd8c 	bl	8002948 <SD_SendCmd.part.0>
      if (SD_SendCmd(CMD58, 0) == 0) 
 8002e30:	b930      	cbnz	r0, 8002e40 <SD_disk_ioctl+0x88>
 8002e32:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 8002e34:	f7ff fce0 	bl	80027f8 <SPI_RxByte>
 8002e38:	f805 0b01 	strb.w	r0, [r5], #1
        for (n = 0; n < 4; n++)
 8002e3c:	42ac      	cmp	r4, r5
 8002e3e:	d1f9      	bne.n	8002e34 <SD_disk_ioctl+0x7c>
      res = RES_PARERR;
 8002e40:	2404      	movs	r4, #4
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002e42:	2201      	movs	r2, #1
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	483c      	ldr	r0, [pc, #240]	; (8002f38 <SD_disk_ioctl+0x180>)
 8002e48:	f7fe f9d0 	bl	80011ec <HAL_GPIO_WritePin>
    SPI_RxByte();
 8002e4c:	f7ff fcd4 	bl	80027f8 <SPI_RxByte>
}
 8002e50:	4620      	mov	r0, r4
 8002e52:	b006      	add	sp, #24
 8002e54:	bd70      	pop	{r4, r5, r6, pc}
  return PowerFlag;
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <SD_disk_ioctl+0x184>)
      if (SD_CheckPower())
 8002e58:	781c      	ldrb	r4, [r3, #0]
 8002e5a:	2c00      	cmp	r4, #0
 8002e5c:	d0d3      	beq.n	8002e06 <SD_disk_ioctl+0x4e>
  PowerFlag = 0;
 8002e5e:	7018      	strb	r0, [r3, #0]
      res = RES_OK;
 8002e60:	4604      	mov	r4, r0
 8002e62:	e7d0      	b.n	8002e06 <SD_disk_ioctl+0x4e>
      *(WORD*) buff = 512;
 8002e64:	f44f 7300 	mov.w	r3, #512	; 0x200
      res = RES_OK;
 8002e68:	2400      	movs	r4, #0
      *(WORD*) buff = 512;
 8002e6a:	802b      	strh	r3, [r5, #0]
      break;
 8002e6c:	e7e9      	b.n	8002e42 <SD_disk_ioctl+0x8a>
  if (SD_ReadyWait() != 0xFF)
 8002e6e:	f7ff fd21 	bl	80028b4 <SD_ReadyWait>
 8002e72:	28ff      	cmp	r0, #255	; 0xff
 8002e74:	d050      	beq.n	8002f18 <SD_disk_ioctl+0x160>
  res = RES_ERROR;
 8002e76:	2401      	movs	r4, #1
 8002e78:	e7e3      	b.n	8002e42 <SD_disk_ioctl+0x8a>
  if (SD_ReadyWait() != 0xFF)
 8002e7a:	f7ff fd1b 	bl	80028b4 <SD_ReadyWait>
 8002e7e:	28ff      	cmp	r0, #255	; 0xff
 8002e80:	d1f9      	bne.n	8002e76 <SD_disk_ioctl+0xbe>
 8002e82:	2100      	movs	r1, #0
 8002e84:	204a      	movs	r0, #74	; 0x4a
 8002e86:	f7ff fd5f 	bl	8002948 <SD_SendCmd.part.0>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d1f3      	bne.n	8002e76 <SD_disk_ioctl+0xbe>
 8002e8e:	4628      	mov	r0, r5
 8002e90:	2110      	movs	r1, #16
 8002e92:	f7ff fd9b 	bl	80029cc <SD_RxDataBlock>
  res = RES_ERROR;
 8002e96:	fab0 f480 	clz	r4, r0
 8002e9a:	0964      	lsrs	r4, r4, #5
 8002e9c:	e7d1      	b.n	8002e42 <SD_disk_ioctl+0x8a>
      if (SD_ReadyWait() == 0xFF)
 8002e9e:	f7ff fd09 	bl	80028b4 <SD_ReadyWait>
  res = RES_ERROR;
 8002ea2:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8002ea6:	bf18      	it	ne
 8002ea8:	2401      	movne	r4, #1
 8002eaa:	e7ca      	b.n	8002e42 <SD_disk_ioctl+0x8a>
  if (SD_ReadyWait() != 0xFF)
 8002eac:	f7ff fd02 	bl	80028b4 <SD_ReadyWait>
 8002eb0:	28ff      	cmp	r0, #255	; 0xff
 8002eb2:	d1e0      	bne.n	8002e76 <SD_disk_ioctl+0xbe>
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2049      	movs	r0, #73	; 0x49
 8002eb8:	f7ff fd46 	bl	8002948 <SD_SendCmd.part.0>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	2800      	cmp	r0, #0
 8002ec0:	d1d9      	bne.n	8002e76 <SD_disk_ioctl+0xbe>
 8002ec2:	2110      	movs	r1, #16
 8002ec4:	a802      	add	r0, sp, #8
 8002ec6:	f7ff fd81 	bl	80029cc <SD_RxDataBlock>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d0d3      	beq.n	8002e76 <SD_disk_ioctl+0xbe>
        if ((csd[0] >> 6) == 1) 
 8002ece:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002ed2:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002ed6:	0989      	lsrs	r1, r1, #6
 8002ed8:	2901      	cmp	r1, #1
 8002eda:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002ede:	d022      	beq.n	8002f26 <SD_disk_ioctl+0x16e>
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002ee0:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8002ee4:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8002ee8:	f001 010f 	and.w	r1, r1, #15
 8002eec:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002ef0:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8002ef4:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002ef8:	0992      	lsrs	r2, r2, #6
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	f003 0306 	and.w	r3, r3, #6
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002f00:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8002f04:	0280      	lsls	r0, r0, #10
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002f06:	4419      	add	r1, r3
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002f08:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8002f0c:	1c53      	adds	r3, r2, #1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002f0e:	4403      	add	r3, r0
 8002f10:	1fca      	subs	r2, r1, #7
 8002f12:	4093      	lsls	r3, r2
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	e794      	b.n	8002e42 <SD_disk_ioctl+0x8a>
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2049      	movs	r0, #73	; 0x49
 8002f1c:	f7ff fd14 	bl	8002948 <SD_SendCmd.part.0>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d1a8      	bne.n	8002e76 <SD_disk_ioctl+0xbe>
 8002f24:	e7b3      	b.n	8002e8e <SD_disk_ioctl+0xd6>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f26:	3301      	adds	r3, #1
 8002f28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
          *(DWORD*) buff = (DWORD) csize << 10;
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	029b      	lsls	r3, r3, #10
 8002f30:	602b      	str	r3, [r5, #0]
 8002f32:	e786      	b.n	8002e42 <SD_disk_ioctl+0x8a>
 8002f34:	2000020c 	.word	0x2000020c
 8002f38:	40010c00 	.word	0x40010c00
 8002f3c:	20000246 	.word	0x20000246

08002f40 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002f40:	f7ff bd6c 	b.w	8002a1c <SD_disk_initialize>

08002f44 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8002f44:	f7ff be62 	b.w	8002c0c <SD_disk_status>

08002f48 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8002f48:	f7ff be6a 	b.w	8002c20 <SD_disk_read>

08002f4c <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8002f4c:	f7ff bec4 	b.w	8002cd8 <SD_disk_write>

08002f50 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002f50:	f7ff bf32 	b.w	8002db8 <SD_disk_ioctl>

08002f54 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <disk_status+0x10>)
 8002f56:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	4403      	add	r3, r0
 8002f5e:	6852      	ldr	r2, [r2, #4]
 8002f60:	7a18      	ldrb	r0, [r3, #8]
 8002f62:	4710      	bx	r2
 8002f64:	20000468 	.word	0x20000468

08002f68 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <disk_initialize+0x1c>)
 8002f6a:	5c1a      	ldrb	r2, [r3, r0]
 8002f6c:	b942      	cbnz	r2, 8002f80 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8002f6e:	2101      	movs	r1, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002f70:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002f74:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8002f76:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002f78:	4403      	add	r3, r0
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	7a18      	ldrb	r0, [r3, #8]
 8002f7e:	4710      	bx	r2
  }
  return stat;
}
 8002f80:	2000      	movs	r0, #0
 8002f82:	4770      	bx	lr
 8002f84:	20000468 	.word	0x20000468

08002f88 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002f88:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002f8a:	4c05      	ldr	r4, [pc, #20]	; (8002fa0 <disk_read+0x18>)
 8002f8c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002f90:	686d      	ldr	r5, [r5, #4]
 8002f92:	4404      	add	r4, r0
 8002f94:	68ad      	ldr	r5, [r5, #8]
 8002f96:	7a20      	ldrb	r0, [r4, #8]
 8002f98:	46ac      	mov	ip, r5
  return res;
}
 8002f9a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002f9c:	4760      	bx	ip
 8002f9e:	bf00      	nop
 8002fa0:	20000468 	.word	0x20000468

08002fa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002fa4:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002fa6:	4c05      	ldr	r4, [pc, #20]	; (8002fbc <disk_write+0x18>)
 8002fa8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002fac:	686d      	ldr	r5, [r5, #4]
 8002fae:	4404      	add	r4, r0
 8002fb0:	68ed      	ldr	r5, [r5, #12]
 8002fb2:	7a20      	ldrb	r0, [r4, #8]
 8002fb4:	46ac      	mov	ip, r5
  return res;
}
 8002fb6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002fb8:	4760      	bx	ip
 8002fba:	bf00      	nop
 8002fbc:	20000468 	.word	0x20000468

08002fc0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <disk_ioctl+0x18>)
{
 8002fc2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002fc4:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8002fc8:	6864      	ldr	r4, [r4, #4]
 8002fca:	4403      	add	r3, r0
 8002fcc:	6924      	ldr	r4, [r4, #16]
 8002fce:	7a18      	ldrb	r0, [r3, #8]
 8002fd0:	4623      	mov	r3, r4
  return res;
}
 8002fd2:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002fd4:	4718      	bx	r3
 8002fd6:	bf00      	nop
 8002fd8:	20000468 	.word	0x20000468

08002fdc <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8002fdc:	4a1f      	ldr	r2, [pc, #124]	; (800305c <chk_lock+0x80>)
{
 8002fde:	b430      	push	{r4, r5}
		if (Files[i].fs) {	/* Existing entry */
 8002fe0:	6813      	ldr	r3, [r2, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d037      	beq.n	8003056 <chk_lock+0x7a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002fe6:	6804      	ldr	r4, [r0, #0]
 8002fe8:	429c      	cmp	r4, r3
 8002fea:	d00d      	beq.n	8003008 <chk_lock+0x2c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002fec:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
 8002fee:	68d3      	ldr	r3, [r2, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02d      	beq.n	8003050 <chk_lock+0x74>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002ff4:	6805      	ldr	r5, [r0, #0]
 8002ff6:	42ab      	cmp	r3, r5
 8002ff8:	d01c      	beq.n	8003034 <chk_lock+0x58>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002ffa:	bb4c      	cbnz	r4, 8003050 <chk_lock+0x74>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8002ffc:	bc30      	pop	{r4, r5}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002ffe:	2902      	cmp	r1, #2
 8003000:	bf0c      	ite	eq
 8003002:	2000      	moveq	r0, #0
 8003004:	2012      	movne	r0, #18
}
 8003006:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003008:	6854      	ldr	r4, [r2, #4]
 800300a:	6883      	ldr	r3, [r0, #8]
 800300c:	429c      	cmp	r4, r3
 800300e:	d1ed      	bne.n	8002fec <chk_lock+0x10>
				Files[i].clu == dp->sclust &&
 8003010:	8914      	ldrh	r4, [r2, #8]
 8003012:	88c3      	ldrh	r3, [r0, #6]
 8003014:	429c      	cmp	r4, r3
 8003016:	d1e9      	bne.n	8002fec <chk_lock+0x10>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003018:	2000      	movs	r0, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800301a:	b9b1      	cbnz	r1, 800304a <chk_lock+0x6e>
}
 800301c:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800301e:	0043      	lsls	r3, r0, #1
 8003020:	4403      	add	r3, r0
 8003022:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8003026:	8953      	ldrh	r3, [r2, #10]
 8003028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302c:	bf14      	ite	ne
 800302e:	2000      	movne	r0, #0
 8003030:	2010      	moveq	r0, #16
}
 8003032:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003034:	6915      	ldr	r5, [r2, #16]
 8003036:	6883      	ldr	r3, [r0, #8]
 8003038:	429d      	cmp	r5, r3
 800303a:	d1de      	bne.n	8002ffa <chk_lock+0x1e>
				Files[i].clu == dp->sclust &&
 800303c:	88c3      	ldrh	r3, [r0, #6]
 800303e:	8a90      	ldrh	r0, [r2, #20]
 8003040:	4298      	cmp	r0, r3
 8003042:	d1da      	bne.n	8002ffa <chk_lock+0x1e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003044:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003046:	2900      	cmp	r1, #0
 8003048:	d0e8      	beq.n	800301c <chk_lock+0x40>
}
 800304a:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800304c:	2010      	movs	r0, #16
}
 800304e:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003050:	2000      	movs	r0, #0
}
 8003052:	bc30      	pop	{r4, r5}
 8003054:	4770      	bx	lr
			be = 1;
 8003056:	2401      	movs	r4, #1
 8003058:	e7c9      	b.n	8002fee <chk_lock+0x12>
 800305a:	bf00      	nop
 800305c:	2000024c 	.word	0x2000024c

08003060 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <inc_lock+0xa4>)
{
 8003062:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->fs &&
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	6804      	ldr	r4, [r0, #0]
 8003068:	4294      	cmp	r4, r2
 800306a:	d01c      	beq.n	80030a6 <inc_lock+0x46>
 800306c:	68dd      	ldr	r5, [r3, #12]
 800306e:	42a5      	cmp	r5, r4
 8003070:	d006      	beq.n	8003080 <inc_lock+0x20>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003072:	b312      	cbz	r2, 80030ba <inc_lock+0x5a>
 8003074:	2d00      	cmp	r5, #0
 8003076:	d03b      	beq.n	80030f0 <inc_lock+0x90>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003078:	2600      	movs	r6, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800307a:	4630      	mov	r0, r6
 800307c:	bcf0      	pop	{r4, r5, r6, r7}
 800307e:	4770      	bx	lr
		if (Files[i].fs == dp->fs &&
 8003080:	691f      	ldr	r7, [r3, #16]
 8003082:	6886      	ldr	r6, [r0, #8]
 8003084:	42b7      	cmp	r7, r6
 8003086:	d1f4      	bne.n	8003072 <inc_lock+0x12>
			Files[i].clu == dp->sclust &&
 8003088:	8a9f      	ldrh	r7, [r3, #20]
 800308a:	88c6      	ldrh	r6, [r0, #6]
 800308c:	42b7      	cmp	r7, r6
 800308e:	d1f0      	bne.n	8003072 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003090:	2501      	movs	r5, #1
 8003092:	006a      	lsls	r2, r5, #1
 8003094:	1950      	adds	r0, r2, r5
 8003096:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800309a:	8940      	ldrh	r0, [r0, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800309c:	bb59      	cbnz	r1, 80030f6 <inc_lock+0x96>
 800309e:	1c41      	adds	r1, r0, #1
 80030a0:	b289      	uxth	r1, r1
 80030a2:	1c6e      	adds	r6, r5, #1
 80030a4:	e01d      	b.n	80030e2 <inc_lock+0x82>
		if (Files[i].fs == dp->fs &&
 80030a6:	6886      	ldr	r6, [r0, #8]
 80030a8:	685d      	ldr	r5, [r3, #4]
 80030aa:	42ae      	cmp	r6, r5
 80030ac:	d1de      	bne.n	800306c <inc_lock+0xc>
			Files[i].clu == dp->sclust &&
 80030ae:	88c6      	ldrh	r6, [r0, #6]
 80030b0:	891d      	ldrh	r5, [r3, #8]
 80030b2:	42ae      	cmp	r6, r5
 80030b4:	d1da      	bne.n	800306c <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80030b6:	2500      	movs	r5, #0
 80030b8:	e7eb      	b.n	8003092 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80030ba:	4615      	mov	r5, r2
 80030bc:	2601      	movs	r6, #1
		Files[i].ctr = 0;
 80030be:	2700      	movs	r7, #0
		Files[i].fs = dp->fs;
 80030c0:	006a      	lsls	r2, r5, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80030c2:	42b9      	cmp	r1, r7
		Files[i].fs = dp->fs;
 80030c4:	eb02 0105 	add.w	r1, r2, r5
 80030c8:	ea4f 0181 	mov.w	r1, r1, lsl #2
 80030cc:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->sclust;
 80030ce:	6884      	ldr	r4, [r0, #8]
		Files[i].idx = dp->index;
 80030d0:	88c0      	ldrh	r0, [r0, #6]
		Files[i].fs = dp->fs;
 80030d2:	4419      	add	r1, r3
		Files[i].clu = dp->sclust;
 80030d4:	604c      	str	r4, [r1, #4]
		Files[i].idx = dp->index;
 80030d6:	8108      	strh	r0, [r1, #8]
		Files[i].ctr = 0;
 80030d8:	814f      	strh	r7, [r1, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80030da:	bf14      	ite	ne
 80030dc:	f44f 7180 	movne.w	r1, #256	; 0x100
 80030e0:	2101      	moveq	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80030e2:	442a      	add	r2, r5
 80030e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 80030e8:	4630      	mov	r0, r6
 80030ea:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80030ec:	8159      	strh	r1, [r3, #10]
}
 80030ee:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80030f0:	2602      	movs	r6, #2
 80030f2:	2501      	movs	r5, #1
 80030f4:	e7e3      	b.n	80030be <inc_lock+0x5e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d1be      	bne.n	8003078 <inc_lock+0x18>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80030fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030fe:	1c6e      	adds	r6, r5, #1
 8003100:	e7ef      	b.n	80030e2 <inc_lock+0x82>
 8003102:	bf00      	nop
 8003104:	2000024c 	.word	0x2000024c

08003108 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8003108:	b430      	push	{r4, r5}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800310a:	6804      	ldr	r4, [r0, #0]
 800310c:	b1ec      	cbz	r4, 800314a <get_ldnumber+0x42>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800310e:	7825      	ldrb	r5, [r4, #0]
 8003110:	2d1f      	cmp	r5, #31
 8003112:	d90a      	bls.n	800312a <get_ldnumber+0x22>
 8003114:	2d3a      	cmp	r5, #58	; 0x3a
 8003116:	d018      	beq.n	800314a <get_ldnumber+0x42>
 8003118:	4623      	mov	r3, r4
 800311a:	e002      	b.n	8003122 <get_ldnumber+0x1a>
 800311c:	2a3a      	cmp	r2, #58	; 0x3a
 800311e:	d008      	beq.n	8003132 <get_ldnumber+0x2a>
 8003120:	460b      	mov	r3, r1
 8003122:	785a      	ldrb	r2, [r3, #1]
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	2a1f      	cmp	r2, #31
 8003128:	d8f8      	bhi.n	800311c <get_ldnumber+0x14>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800312a:	2200      	movs	r2, #0
#endif
	}
	return vol;
}
 800312c:	bc30      	pop	{r4, r5}
 800312e:	4610      	mov	r0, r2
 8003130:	4770      	bx	lr
			i = *tp++ - '0'; 
 8003132:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8003134:	42a1      	cmp	r1, r4
			i = *tp++ - '0'; 
 8003136:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800313a:	d106      	bne.n	800314a <get_ldnumber+0x42>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800313c:	2d30      	cmp	r5, #48	; 0x30
 800313e:	d104      	bne.n	800314a <get_ldnumber+0x42>
}
 8003140:	bc30      	pop	{r4, r5}
					*path = ++tt;
 8003142:	3302      	adds	r3, #2
 8003144:	6003      	str	r3, [r0, #0]
}
 8003146:	4610      	mov	r0, r2
 8003148:	4770      	bx	lr
	int vol = -1;
 800314a:	f04f 32ff 	mov.w	r2, #4294967295
}
 800314e:	bc30      	pop	{r4, r5}
 8003150:	4610      	mov	r0, r2
 8003152:	4770      	bx	lr

08003154 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8003154:	b1b8      	cbz	r0, 8003186 <validate+0x32>
{
 8003156:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8003158:	6803      	ldr	r3, [r0, #0]
 800315a:	b14b      	cbz	r3, 8003170 <validate+0x1c>
 800315c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003160:	7812      	ldrb	r2, [r2, #0]
 8003162:	b12a      	cbz	r2, 8003170 <validate+0x1c>
 8003164:	f241 0106 	movw	r1, #4102	; 0x1006
 8003168:	8882      	ldrh	r2, [r0, #4]
 800316a:	5a59      	ldrh	r1, [r3, r1]
 800316c:	4291      	cmp	r1, r2
 800316e:	d001      	beq.n	8003174 <validate+0x20>
		return FR_INVALID_OBJECT;
 8003170:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8003172:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8003174:	f241 0201 	movw	r2, #4097	; 0x1001
 8003178:	5c98      	ldrb	r0, [r3, r2]
 800317a:	f7ff feeb 	bl	8002f54 <disk_status>
 800317e:	f010 0001 	ands.w	r0, r0, #1
 8003182:	d1f5      	bne.n	8003170 <validate+0x1c>
}
 8003184:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 8003186:	2009      	movs	r0, #9
}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <sync_window.part.2>:
		wsect = fs->winsect;	/* Current sector number */
 800318c:	f241 022c 	movw	r2, #4140	; 0x102c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003190:	f241 0301 	movw	r3, #4097	; 0x1001
FRESULT sync_window (
 8003194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8003198:	5885      	ldr	r5, [r0, r2]
FRESULT sync_window (
 800319a:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800319c:	4601      	mov	r1, r0
 800319e:	462a      	mov	r2, r5
 80031a0:	5cc0      	ldrb	r0, [r0, r3]
 80031a2:	2301      	movs	r3, #1
 80031a4:	f7ff fefe 	bl	8002fa4 <disk_write>
 80031a8:	bb28      	cbnz	r0, 80031f6 <sync_window.part.2+0x6a>
			fs->wflag = 0;
 80031aa:	f241 0304 	movw	r3, #4100	; 0x1004
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80031ae:	f241 0718 	movw	r7, #4120	; 0x1018
			fs->wflag = 0;
 80031b2:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80031b4:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	59e3      	ldr	r3, [r4, r7]
 80031bc:	1aaa      	subs	r2, r5, r2
 80031be:	429a      	cmp	r2, r3
 80031c0:	d216      	bcs.n	80031f0 <sync_window.part.2+0x64>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80031c6:	5ca6      	ldrb	r6, [r4, r2]
 80031c8:	2e01      	cmp	r6, #1
 80031ca:	d911      	bls.n	80031f0 <sync_window.part.2+0x64>
 80031cc:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
 80031d0:	4427      	add	r7, r4
 80031d2:	f108 0801 	add.w	r8, r8, #1
 80031d6:	e000      	b.n	80031da <sync_window.part.2+0x4e>
 80031d8:	683b      	ldr	r3, [r7, #0]
					wsect += fs->fsize;
 80031da:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031dc:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80031de:	462a      	mov	r2, r5
 80031e0:	2301      	movs	r3, #1
 80031e2:	4621      	mov	r1, r4
 80031e4:	f898 0000 	ldrb.w	r0, [r8]
 80031e8:	f7ff fedc 	bl	8002fa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80031ec:	2e01      	cmp	r6, #1
 80031ee:	d1f3      	bne.n	80031d8 <sync_window.part.2+0x4c>
	FRESULT res = FR_OK;
 80031f0:	2000      	movs	r0, #0
}
 80031f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_DISK_ERR;
 80031f6:	2001      	movs	r0, #1
}
 80031f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031fc <sync_fs>:
{
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80031fe:	f241 0304 	movw	r3, #4100	; 0x1004
 8003202:	5cc3      	ldrb	r3, [r0, r3]
{
 8003204:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003206:	b97b      	cbnz	r3, 8003228 <sync_fs+0x2c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003208:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d013      	beq.n	800323a <sync_fs+0x3e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003212:	f241 0301 	movw	r3, #4097	; 0x1001
 8003216:	2200      	movs	r2, #0
 8003218:	5ce0      	ldrb	r0, [r4, r3]
 800321a:	4611      	mov	r1, r2
 800321c:	f7ff fed0 	bl	8002fc0 <disk_ioctl>
 8003220:	3000      	adds	r0, #0
 8003222:	bf18      	it	ne
 8003224:	2001      	movne	r0, #1
}
 8003226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003228:	f7ff ffb0 	bl	800318c <sync_window.part.2>
	if (res == FR_OK) {
 800322c:	2800      	cmp	r0, #0
 800322e:	d1fa      	bne.n	8003226 <sync_fs+0x2a>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003230:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d1eb      	bne.n	8003212 <sync_fs+0x16>
 800323a:	f241 0305 	movw	r3, #4101	; 0x1005
 800323e:	5ce3      	ldrb	r3, [r4, r3]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d1e6      	bne.n	8003212 <sync_fs+0x16>
			mem_set(fs->win.d8, 0, SS(fs));
 8003244:	f241 030a 	movw	r3, #4106	; 0x100a
 8003248:	5ae2      	ldrh	r2, [r4, r3]
	while (cnt--)
 800324a:	b132      	cbz	r2, 800325a <sync_fs+0x5e>
	BYTE *d = (BYTE*)dst;
 800324c:	4623      	mov	r3, r4
		*d++ = (BYTE)val;
 800324e:	2100      	movs	r1, #0
 8003250:	4422      	add	r2, r4
 8003252:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 8003256:	429a      	cmp	r2, r3
 8003258:	d1fb      	bne.n	8003252 <sync_fs+0x56>
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800325a:	f241 0110 	movw	r1, #4112	; 0x1010
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800325e:	f241 030c 	movw	r3, #4108	; 0x100c
			fs->winsect = fs->volbase + 1;
 8003262:	f241 021c 	movw	r2, #4124	; 0x101c
 8003266:	f241 062c 	movw	r6, #4140	; 0x102c
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800326a:	f64a 2555 	movw	r5, #43605	; 0xaa55
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800326e:	f241 0001 	movw	r0, #4097	; 0x1001
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003272:	5861      	ldr	r1, [r4, r1]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003274:	58e3      	ldr	r3, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003276:	f3c1 2707 	ubfx	r7, r1, #8, #8
			fs->winsect = fs->volbase + 1;
 800327a:	58a2      	ldr	r2, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800327c:	f884 11e8 	strb.w	r1, [r4, #488]	; 0x1e8
 8003280:	f884 71e9 	strb.w	r7, [r4, #489]	; 0x1e9
 8003284:	0c0f      	lsrs	r7, r1, #16
 8003286:	0e09      	lsrs	r1, r1, #24
 8003288:	f884 11eb 	strb.w	r1, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800328c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8003290:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
 8003294:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8003298:	0c19      	lsrs	r1, r3, #16
 800329a:	0e1b      	lsrs	r3, r3, #24
 800329c:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
 80032a0:	f884 31ef 	strb.w	r3, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 80032a4:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <sync_fs+0xd4>)
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <sync_fs+0xd8>)
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80032aa:	f884 71ea 	strb.w	r7, [r4, #490]	; 0x1ea
			fs->winsect = fs->volbase + 1;
 80032ae:	51a2      	str	r2, [r4, r6]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80032b0:	f8a4 51fe 	strh.w	r5, [r4, #510]	; 0x1fe
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80032b4:	5c20      	ldrb	r0, [r4, r0]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80032b6:	6021      	str	r1, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80032b8:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 80032bc:	4621      	mov	r1, r4
 80032be:	2301      	movs	r3, #1
 80032c0:	f7ff fe70 	bl	8002fa4 <disk_write>
			fs->fsi_flag = 0;
 80032c4:	f241 0305 	movw	r3, #4101	; 0x1005
 80032c8:	2200      	movs	r2, #0
 80032ca:	54e2      	strb	r2, [r4, r3]
 80032cc:	e7a1      	b.n	8003212 <sync_fs+0x16>
 80032ce:	bf00      	nop
 80032d0:	41615252 	.word	0x41615252
 80032d4:	61417272 	.word	0x61417272

080032d8 <move_window.part.3>:
FRESULT move_window (
 80032d8:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80032da:	f241 0304 	movw	r3, #4100	; 0x1004
 80032de:	5cc3      	ldrb	r3, [r0, r3]
FRESULT move_window (
 80032e0:	4604      	mov	r4, r0
 80032e2:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80032e4:	b113      	cbz	r3, 80032ec <move_window.part.3+0x14>
 80032e6:	f7ff ff51 	bl	800318c <sync_window.part.2>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80032ea:	b988      	cbnz	r0, 8003310 <move_window.part.3+0x38>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80032ec:	f241 0201 	movw	r2, #4097	; 0x1001
 80032f0:	2301      	movs	r3, #1
 80032f2:	5ca0      	ldrb	r0, [r4, r2]
 80032f4:	4621      	mov	r1, r4
 80032f6:	462a      	mov	r2, r5
 80032f8:	f7ff fe46 	bl	8002f88 <disk_read>
				res = FR_DISK_ERR;
 80032fc:	2800      	cmp	r0, #0
 80032fe:	bf18      	it	ne
 8003300:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 8003304:	f241 032c 	movw	r3, #4140	; 0x102c
				res = FR_DISK_ERR;
 8003308:	bf0c      	ite	eq
 800330a:	2000      	moveq	r0, #0
 800330c:	2001      	movne	r0, #1
			fs->winsect = sector;
 800330e:	50e5      	str	r5, [r4, r3]
}
 8003310:	bd38      	pop	{r3, r4, r5, pc}
 8003312:	bf00      	nop

08003314 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003314:	f04f 32ff 	mov.w	r2, #4294967295
{
 8003318:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800331a:	f241 032c 	movw	r3, #4140	; 0x102c
 800331e:	f241 0504 	movw	r5, #4100	; 0x1004
 8003322:	2600      	movs	r6, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003324:	4291      	cmp	r1, r2
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003326:	5546      	strb	r6, [r0, r5]
{
 8003328:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800332a:	50c2      	str	r2, [r0, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800332c:	d11a      	bne.n	8003364 <check_fs+0x50>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800332e:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003332:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
 8003336:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 800333a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800333e:	4293      	cmp	r3, r2
 8003340:	d10e      	bne.n	8003360 <check_fs+0x4c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003342:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8003346:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <check_fs+0x60>)
 8003348:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800334c:	4293      	cmp	r3, r2
 800334e:	d00f      	beq.n	8003370 <check_fs+0x5c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8003350:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8003354:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8003358:	1a80      	subs	r0, r0, r2
 800335a:	bf18      	it	ne
 800335c:	2001      	movne	r0, #1
}
 800335e:	bd70      	pop	{r4, r5, r6, pc}
		return 2;
 8003360:	2002      	movs	r0, #2
}
 8003362:	bd70      	pop	{r4, r5, r6, pc}
 8003364:	f7ff ffb8 	bl	80032d8 <move_window.part.3>
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003368:	2800      	cmp	r0, #0
 800336a:	d0e0      	beq.n	800332e <check_fs+0x1a>
		return 3;
 800336c:	2003      	movs	r0, #3
}
 800336e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 8003370:	2000      	movs	r0, #0
}
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	00544146 	.word	0x00544146

08003378 <find_volume>:
{
 8003378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 800337c:	2300      	movs	r3, #0
{
 800337e:	4607      	mov	r7, r0
 8003380:	b085      	sub	sp, #20
	vol = get_ldnumber(path);
 8003382:	4608      	mov	r0, r1
	*rfs = 0;
 8003384:	603b      	str	r3, [r7, #0]
{
 8003386:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 8003388:	f7ff febe 	bl	8003108 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800338c:	1e05      	subs	r5, r0, #0
 800338e:	f2c0 8101 	blt.w	8003594 <find_volume+0x21c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003392:	4bbc      	ldr	r3, [pc, #752]	; (8003684 <find_volume+0x30c>)
 8003394:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003398:	2c00      	cmp	r4, #0
 800339a:	f000 8103 	beq.w	80035a4 <find_volume+0x22c>
	*rfs = fs;							/* Return pointer to the file system object */
 800339e:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80033a0:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 80033a4:	783b      	ldrb	r3, [r7, #0]
 80033a6:	b18b      	cbz	r3, 80033cc <find_volume+0x54>
		stat = disk_status(fs->drv);
 80033a8:	f241 0301 	movw	r3, #4097	; 0x1001
 80033ac:	5ce0      	ldrb	r0, [r4, r3]
 80033ae:	f7ff fdd1 	bl	8002f54 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80033b2:	07c1      	lsls	r1, r0, #31
 80033b4:	d40a      	bmi.n	80033cc <find_volume+0x54>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80033b6:	2e00      	cmp	r6, #0
 80033b8:	f000 80f8 	beq.w	80035ac <find_volume+0x234>
 80033bc:	f010 0004 	ands.w	r0, r0, #4
 80033c0:	f000 80e5 	beq.w	800358e <find_volume+0x216>
				return FR_WRITE_PROTECTED;
 80033c4:	200a      	movs	r0, #10
}
 80033c6:	b005      	add	sp, #20
 80033c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80033cc:	2200      	movs	r2, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80033ce:	f241 0301 	movw	r3, #4097	; 0x1001
 80033d2:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 80033d4:	703a      	strb	r2, [r7, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80033d6:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80033d8:	f7ff fdc6 	bl	8002f68 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80033dc:	07c2      	lsls	r2, r0, #31
 80033de:	f100 80dd 	bmi.w	800359c <find_volume+0x224>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80033e2:	b10e      	cbz	r6, 80033e8 <find_volume+0x70>
 80033e4:	0743      	lsls	r3, r0, #29
 80033e6:	d4ed      	bmi.n	80033c4 <find_volume+0x4c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80033e8:	f241 050a 	movw	r5, #4106	; 0x100a
 80033ec:	f241 0301 	movw	r3, #4097	; 0x1001
 80033f0:	1962      	adds	r2, r4, r5
 80033f2:	5ce0      	ldrb	r0, [r4, r3]
 80033f4:	2102      	movs	r1, #2
 80033f6:	f7ff fde3 	bl	8002fc0 <disk_ioctl>
 80033fa:	2800      	cmp	r0, #0
 80033fc:	f040 80c6 	bne.w	800358c <find_volume+0x214>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8003400:	5b63      	ldrh	r3, [r4, r5]
 8003402:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003406:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800340a:	f200 80bf 	bhi.w	800358c <find_volume+0x214>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800340e:	4601      	mov	r1, r0
 8003410:	4620      	mov	r0, r4
 8003412:	f7ff ff7f 	bl	8003314 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8003416:	2801      	cmp	r0, #1
 8003418:	f000 80ca 	beq.w	80035b0 <find_volume+0x238>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800341c:	2803      	cmp	r0, #3
 800341e:	f000 80b5 	beq.w	800358c <find_volume+0x214>
	bsect = 0;
 8003422:	4605      	mov	r5, r0
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003424:	2800      	cmp	r0, #0
 8003426:	f040 80dc 	bne.w	80035e2 <find_volume+0x26a>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800342a:	f241 020a 	movw	r2, #4106	; 0x100a
 800342e:	7b21      	ldrb	r1, [r4, #12]
 8003430:	7ae3      	ldrb	r3, [r4, #11]
 8003432:	5aa2      	ldrh	r2, [r4, r2]
 8003434:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003438:	429a      	cmp	r2, r3
 800343a:	f040 80d2 	bne.w	80035e2 <find_volume+0x26a>
	fs->fsize = fasize;
 800343e:	f241 0018 	movw	r0, #4120	; 0x1018
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003442:	f241 0603 	movw	r6, #4099	; 0x1003
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8003446:	7de1      	ldrb	r1, [r4, #23]
 8003448:	7da2      	ldrb	r2, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800344a:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 800344e:	bf08      	it	eq
 8003450:	6a62      	ldreq	r2, [r4, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003452:	7c21      	ldrb	r1, [r4, #16]
	fs->fsize = fasize;
 8003454:	5022      	str	r2, [r4, r0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8003456:	1e48      	subs	r0, r1, #1
 8003458:	2801      	cmp	r0, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800345a:	55a1      	strb	r1, [r4, r6]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800345c:	f200 80c1 	bhi.w	80035e2 <find_volume+0x26a>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8003460:	f241 0002 	movw	r0, #4098	; 0x1002
 8003464:	7b66      	ldrb	r6, [r4, #13]
 8003466:	5426      	strb	r6, [r4, r0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003468:	2e00      	cmp	r6, #0
 800346a:	f000 80ba 	beq.w	80035e2 <find_volume+0x26a>
 800346e:	1e70      	subs	r0, r6, #1
 8003470:	4230      	tst	r0, r6
 8003472:	f040 80b6 	bne.w	80035e2 <find_volume+0x26a>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003476:	f894 e012 	ldrb.w	lr, [r4, #18]
 800347a:	f894 c011 	ldrb.w	ip, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800347e:	0958      	lsrs	r0, r3, #5
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003480:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003484:	fbbc fef0 	udiv	lr, ip, r0
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003488:	f241 0808 	movw	r8, #4104	; 0x1008
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800348c:	fb00 c01e 	mls	r0, r0, lr, ip
 8003490:	b280      	uxth	r0, r0
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003492:	f824 c008 	strh.w	ip, [r4, r8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003496:	2800      	cmp	r0, #0
 8003498:	f040 80a3 	bne.w	80035e2 <find_volume+0x26a>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800349c:	f894 8014 	ldrb.w	r8, [r4, #20]
 80034a0:	7ce0      	ldrb	r0, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80034a2:	f894 900f 	ldrb.w	r9, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80034a6:	ea50 2008 	orrs.w	r0, r0, r8, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80034aa:	f894 800e 	ldrb.w	r8, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80034ae:	bf08      	it	eq
 80034b0:	6a20      	ldreq	r0, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80034b2:	ea58 2809 	orrs.w	r8, r8, r9, lsl #8
 80034b6:	f000 8094 	beq.w	80035e2 <find_volume+0x26a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80034ba:	fb02 f101 	mul.w	r1, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80034be:	44c6      	add	lr, r8
 80034c0:	448e      	add	lr, r1
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80034c2:	4570      	cmp	r0, lr
 80034c4:	f0c0 808d 	bcc.w	80035e2 <find_volume+0x26a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80034c8:	eba0 000e 	sub.w	r0, r0, lr
 80034cc:	fbb0 f6f6 	udiv	r6, r0, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80034d0:	2e00      	cmp	r6, #0
 80034d2:	f000 8086 	beq.w	80035e2 <find_volume+0x26a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80034d6:	f640 7bf5 	movw	fp, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80034da:	f64f 79f5 	movw	r9, #65525	; 0xfff5
 80034de:	eb0e 0a05 	add.w	sl, lr, r5
	fmt = FS_FAT12;
 80034e2:	455e      	cmp	r6, fp
 80034e4:	bf8c      	ite	hi
 80034e6:	f04f 0e02 	movhi.w	lr, #2
 80034ea:	f04f 0e01 	movls.w	lr, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80034ee:	454e      	cmp	r6, r9
 80034f0:	eb08 0005 	add.w	r0, r8, r5
 80034f4:	f106 0802 	add.w	r8, r6, #2
 80034f8:	d97c      	bls.n	80035f4 <find_volume+0x27c>
	fs->volbase = bsect;								/* Volume start sector */
 80034fa:	f241 061c 	movw	r6, #4124	; 0x101c
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80034fe:	f241 0e14 	movw	lr, #4116	; 0x1014
	fs->database = bsect + sysect;						/* Data start sector */
 8003502:	f241 0128 	movw	r1, #4136	; 0x1028
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003506:	f844 800e 	str.w	r8, [r4, lr]
	fs->volbase = bsect;								/* Volume start sector */
 800350a:	51a5      	str	r5, [r4, r6]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800350c:	f504 5681 	add.w	r6, r4, #4128	; 0x1020
 8003510:	6030      	str	r0, [r6, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8003512:	f844 a001 	str.w	sl, [r4, r1]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003516:	f1bc 0f00 	cmp.w	ip, #0
 800351a:	d162      	bne.n	80035e2 <find_volume+0x26a>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800351c:	1e59      	subs	r1, r3, #1
 800351e:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8003522:	fbb1 f3f3 	udiv	r3, r1, r3
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8003526:	f241 0124 	movw	r1, #4132	; 0x1024
 800352a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800352c:	429a      	cmp	r2, r3
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800352e:	5060      	str	r0, [r4, r1]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003530:	d357      	bcc.n	80035e2 <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003532:	f04f 33ff 	mov.w	r3, #4294967295
 8003536:	f241 020c 	movw	r2, #4108	; 0x100c
 800353a:	f241 0610 	movw	r6, #4112	; 0x1010
	fs->fsi_flag = 0x80;
 800353e:	f241 0105 	movw	r1, #4101	; 0x1005
 8003542:	2080      	movs	r0, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003544:	51a3      	str	r3, [r4, r6]
 8003546:	50a3      	str	r3, [r4, r2]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8003548:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 800354c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	fs->fsi_flag = 0x80;
 8003550:	5460      	strb	r0, [r4, r1]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8003552:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003556:	2b01      	cmp	r3, #1
 8003558:	f000 809a 	beq.w	8003690 <find_volume+0x318>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800355c:	f04f 0e03 	mov.w	lr, #3
	fs->id = ++Fsid;	/* File system mount ID */
 8003560:	f241 0506 	movw	r5, #4102	; 0x1006
 8003564:	4948      	ldr	r1, [pc, #288]	; (8003688 <find_volume+0x310>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003566:	4a49      	ldr	r2, [pc, #292]	; (800368c <find_volume+0x314>)
	fs->id = ++Fsid;	/* File system mount ID */
 8003568:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800356a:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800356c:	3301      	adds	r3, #1
 800356e:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003570:	4284      	cmp	r4, r0
	fs->id = ++Fsid;	/* File system mount ID */
 8003572:	800b      	strh	r3, [r1, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
 8003574:	f887 e000 	strb.w	lr, [r7]
	fs->id = ++Fsid;	/* File system mount ID */
 8003578:	5363      	strh	r3, [r4, r5]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800357a:	bf04      	itt	eq
 800357c:	2300      	moveq	r3, #0
 800357e:	6013      	streq	r3, [r2, #0]
 8003580:	68d3      	ldr	r3, [r2, #12]
 8003582:	2000      	movs	r0, #0
 8003584:	429c      	cmp	r4, r3
 8003586:	d102      	bne.n	800358e <find_volume+0x216>
 8003588:	60d0      	str	r0, [r2, #12]
 800358a:	e000      	b.n	800358e <find_volume+0x216>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800358c:	2001      	movs	r0, #1
}
 800358e:	b005      	add	sp, #20
 8003590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003594:	200b      	movs	r0, #11
}
 8003596:	b005      	add	sp, #20
 8003598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800359c:	2003      	movs	r0, #3
}
 800359e:	b005      	add	sp, #20
 80035a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80035a4:	200c      	movs	r0, #12
}
 80035a6:	b005      	add	sp, #20
 80035a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return FR_OK;				/* The file system object is valid */
 80035ac:	4630      	mov	r0, r6
 80035ae:	e7ee      	b.n	800358e <find_volume+0x216>
 80035b0:	466e      	mov	r6, sp
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80035b2:	4631      	mov	r1, r6
 80035b4:	f504 73e3 	add.w	r3, r4, #454	; 0x1c6
 80035b8:	f204 2006 	addw	r0, r4, #518	; 0x206
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80035bc:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80035c0:	b102      	cbz	r2, 80035c4 <find_volume+0x24c>
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80035c6:	4283      	cmp	r3, r0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80035c8:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80035cc:	d1f6      	bne.n	80035bc <find_volume+0x244>
 80035ce:	f106 0810 	add.w	r8, r6, #16
			bsect = br[i];
 80035d2:	f856 5b04 	ldr.w	r5, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80035d6:	b935      	cbnz	r5, 80035e6 <find_volume+0x26e>
 80035d8:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80035da:	4546      	cmp	r6, r8
 80035dc:	d1f9      	bne.n	80035d2 <find_volume+0x25a>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80035de:	2803      	cmp	r0, #3
 80035e0:	d0d4      	beq.n	800358c <find_volume+0x214>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80035e2:	200d      	movs	r0, #13
 80035e4:	e7d3      	b.n	800358e <find_volume+0x216>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80035e6:	4629      	mov	r1, r5
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7ff fe93 	bl	8003314 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d1f3      	bne.n	80035da <find_volume+0x262>
 80035f2:	e71a      	b.n	800342a <find_volume+0xb2>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80035f4:	f241 0b14 	movw	fp, #4116	; 0x1014
	fs->volbase = bsect;								/* Volume start sector */
 80035f8:	f241 091c 	movw	r9, #4124	; 0x101c
	fs->database = bsect + sysect;						/* Data start sector */
 80035fc:	f241 0628 	movw	r6, #4136	; 0x1028
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003600:	f844 800b 	str.w	r8, [r4, fp]
	fs->volbase = bsect;								/* Volume start sector */
 8003604:	f844 5009 	str.w	r5, [r4, r9]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003608:	f504 5581 	add.w	r5, r4, #4128	; 0x1020
 800360c:	6028      	str	r0, [r5, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 800360e:	f844 a006 	str.w	sl, [r4, r6]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003612:	f1bc 0f00 	cmp.w	ip, #0
 8003616:	d0e4      	beq.n	80035e2 <find_volume+0x26a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003618:	f241 0524 	movw	r5, #4132	; 0x1024
 800361c:	4401      	add	r1, r0
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800361e:	f1be 0f02 	cmp.w	lr, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003622:	5161      	str	r1, [r4, r5]
 8003624:	f103 30ff 	add.w	r0, r3, #4294967295
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003628:	d019      	beq.n	800365e <find_volume+0x2e6>
 800362a:	f008 0101 	and.w	r1, r8, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800362e:	4401      	add	r1, r0
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003630:	eb08 0848 	add.w	r8, r8, r8, lsl #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003634:	eb01 0158 	add.w	r1, r1, r8, lsr #1
 8003638:	fbb1 f3f3 	udiv	r3, r1, r3
 800363c:	429a      	cmp	r2, r3
 800363e:	d3d0      	bcc.n	80035e2 <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003640:	f04f 33ff 	mov.w	r3, #4294967295
 8003644:	f241 0510 	movw	r5, #4112	; 0x1010
 8003648:	f241 000c 	movw	r0, #4108	; 0x100c
	fs->fsi_flag = 0x80;
 800364c:	f241 0205 	movw	r2, #4101	; 0x1005
 8003650:	2180      	movs	r1, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003652:	5163      	str	r3, [r4, r5]
	fs->fsi_flag = 0x80;
 8003654:	f04f 0e01 	mov.w	lr, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003658:	5023      	str	r3, [r4, r0]
	fs->fsi_flag = 0x80;
 800365a:	54a1      	strb	r1, [r4, r2]
 800365c:	e780      	b.n	8003560 <find_volume+0x1e8>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800365e:	eb00 0148 	add.w	r1, r0, r8, lsl #1
 8003662:	fbb1 f3f3 	udiv	r3, r1, r3
 8003666:	4293      	cmp	r3, r2
 8003668:	d8bb      	bhi.n	80035e2 <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800366a:	f04f 33ff 	mov.w	r3, #4294967295
 800366e:	f241 0510 	movw	r5, #4112	; 0x1010
 8003672:	f241 000c 	movw	r0, #4108	; 0x100c
	fs->fsi_flag = 0x80;
 8003676:	f241 0205 	movw	r2, #4101	; 0x1005
 800367a:	2180      	movs	r1, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800367c:	5163      	str	r3, [r4, r5]
 800367e:	5023      	str	r3, [r4, r0]
	fs->fsi_flag = 0x80;
 8003680:	54a1      	strb	r1, [r4, r2]
 8003682:	e76d      	b.n	8003560 <find_volume+0x1e8>
 8003684:	20000248 	.word	0x20000248
 8003688:	20000264 	.word	0x20000264
 800368c:	2000024c 	.word	0x2000024c
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003690:	f241 032c 	movw	r3, #4140	; 0x102c
 8003694:	58e3      	ldr	r3, [r4, r3]
		&& move_window(fs, bsect + 1) == FR_OK)
 8003696:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003698:	4299      	cmp	r1, r3
 800369a:	d12a      	bne.n	80036f2 <find_volume+0x37a>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800369c:	f64a 2255 	movw	r2, #43605	; 0xaa55
		fs->fsi_flag = 0;
 80036a0:	f241 0005 	movw	r0, #4101	; 0x1005
 80036a4:	2500      	movs	r5, #0
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80036a6:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
 80036aa:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 80036ae:	5425      	strb	r5, [r4, r0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80036b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80036b4:	4293      	cmp	r3, r2
 80036b6:	f47f af51 	bne.w	800355c <find_volume+0x1e4>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <find_volume+0x388>)
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	f47f af4c 	bne.w	800355c <find_volume+0x1e4>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80036c4:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 80036c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80036cc:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 80036d0:	3320      	adds	r3, #32
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f47f af42 	bne.w	800355c <find_volume+0x1e4>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80036d8:	f241 0110 	movw	r1, #4112	; 0x1010
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80036dc:	f241 030c 	movw	r3, #4108	; 0x100c
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80036e0:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80036e4:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
 80036e8:	f04f 0e03 	mov.w	lr, #3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80036ec:	5060      	str	r0, [r4, r1]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80036ee:	50e2      	str	r2, [r4, r3]
 80036f0:	e736      	b.n	8003560 <find_volume+0x1e8>
 80036f2:	4620      	mov	r0, r4
 80036f4:	f7ff fdf0 	bl	80032d8 <move_window.part.3>
		&& move_window(fs, bsect + 1) == FR_OK)
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d0cf      	beq.n	800369c <find_volume+0x324>
 80036fc:	e72e      	b.n	800355c <find_volume+0x1e4>
 80036fe:	bf00      	nop
 8003700:	41615252 	.word	0x41615252

08003704 <get_fat.part.6>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8003704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 8003708:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800370c:	781b      	ldrb	r3, [r3, #0]
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 800370e:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8003710:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 8003712:	460e      	mov	r6, r1
		switch (fs->fs_type) {
 8003714:	d052      	beq.n	80037bc <get_fat.part.6+0xb8>
 8003716:	2b03      	cmp	r3, #3
 8003718:	d02d      	beq.n	8003776 <get_fat.part.6+0x72>
 800371a:	2b01      	cmp	r3, #1
 800371c:	d002      	beq.n	8003724 <get_fat.part.6+0x20>
			val = 1;	/* Internal error */
 800371e:	2001      	movs	r0, #1
}
 8003720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003724:	f241 0a0a 	movw	sl, #4106	; 0x100a
 8003728:	f830 300a 	ldrh.w	r3, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 800372c:	eb01 0851 	add.w	r8, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003730:	f241 072c 	movw	r7, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003734:	fbb8 f5f3 	udiv	r5, r8, r3
 8003738:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 800373c:	f8d9 2000 	ldr.w	r2, [r9]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003740:	f850 c007 	ldr.w	ip, [r0, r7]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003744:	18a9      	adds	r1, r5, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003746:	4561      	cmp	r1, ip
 8003748:	d15c      	bne.n	8003804 <get_fat.part.6+0x100>
			wc = fs->win.d8[bc++ % SS(fs)];
 800374a:	f108 0701 	add.w	r7, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800374e:	fbb7 f0f3 	udiv	r0, r7, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 8003752:	fb03 8515 	mls	r5, r3, r5, r8
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003756:	1881      	adds	r1, r0, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003758:	4561      	cmp	r1, ip
			wc = fs->win.d8[bc++ % SS(fs)];
 800375a:	5d65      	ldrb	r5, [r4, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800375c:	d15e      	bne.n	800381c <get_fat.part.6+0x118>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800375e:	fb03 7310 	mls	r3, r3, r0, r7
 8003762:	5ce0      	ldrb	r0, [r4, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003764:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003766:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800376a:	bf4c      	ite	mi
 800376c:	0900      	lsrmi	r0, r0, #4
 800376e:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 8003772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003776:	f241 050a 	movw	r5, #4106	; 0x100a
 800377a:	5b42      	ldrh	r2, [r0, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800377c:	f241 032c 	movw	r3, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003780:	0891      	lsrs	r1, r2, #2
 8003782:	fbb6 f1f1 	udiv	r1, r6, r1
 8003786:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
 800378a:	683f      	ldr	r7, [r7, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800378c:	58c3      	ldr	r3, [r0, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800378e:	4439      	add	r1, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003790:	4299      	cmp	r1, r3
 8003792:	d132      	bne.n	80037fa <get_fat.part.6+0xf6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003794:	00b6      	lsls	r6, r6, #2
 8003796:	fbb6 f3f2 	udiv	r3, r6, r2
 800379a:	fb02 6613 	mls	r6, r2, r3, r6
 800379e:	19a3      	adds	r3, r4, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80037a0:	7898      	ldrb	r0, [r3, #2]
 80037a2:	78d9      	ldrb	r1, [r3, #3]
 80037a4:	5da2      	ldrb	r2, [r4, r6]
 80037a6:	0400      	lsls	r0, r0, #16
 80037a8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	4310      	orrs	r0, r2
 80037b0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80037b4:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 80037b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037bc:	f241 050a 	movw	r5, #4106	; 0x100a
 80037c0:	5b42      	ldrh	r2, [r0, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80037c2:	f241 032c 	movw	r3, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037c6:	0851      	lsrs	r1, r2, #1
 80037c8:	fbb6 f1f1 	udiv	r1, r6, r1
 80037cc:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
 80037d0:	683f      	ldr	r7, [r7, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80037d2:	58c3      	ldr	r3, [r0, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037d4:	4439      	add	r1, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80037d6:	4299      	cmp	r1, r3
 80037d8:	d003      	beq.n	80037e2 <get_fat.part.6+0xde>
 80037da:	f7ff fd7d 	bl	80032d8 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037de:	bb38      	cbnz	r0, 8003830 <get_fat.part.6+0x12c>
 80037e0:	5b62      	ldrh	r2, [r4, r5]
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80037e2:	0076      	lsls	r6, r6, #1
 80037e4:	fbb6 f3f2 	udiv	r3, r6, r2
 80037e8:	fb02 6613 	mls	r6, r2, r3, r6
			val = LD_WORD(p);
 80037ec:	19a3      	adds	r3, r4, r6
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	5da0      	ldrb	r0, [r4, r6]
 80037f2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80037f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037fa:	f7ff fd6d 	bl	80032d8 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80037fe:	b9b8      	cbnz	r0, 8003830 <get_fat.part.6+0x12c>
 8003800:	5b62      	ldrh	r2, [r4, r5]
 8003802:	e7c7      	b.n	8003794 <get_fat.part.6+0x90>
 8003804:	f7ff fd68 	bl	80032d8 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003808:	b990      	cbnz	r0, 8003830 <get_fat.part.6+0x12c>
 800380a:	f834 300a 	ldrh.w	r3, [r4, sl]
 800380e:	f8d9 2000 	ldr.w	r2, [r9]
 8003812:	fbb8 f5f3 	udiv	r5, r8, r3
 8003816:	f854 c007 	ldr.w	ip, [r4, r7]
 800381a:	e796      	b.n	800374a <get_fat.part.6+0x46>
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff fd5b 	bl	80032d8 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003822:	b928      	cbnz	r0, 8003830 <get_fat.part.6+0x12c>
 8003824:	f241 030a 	movw	r3, #4106	; 0x100a
 8003828:	5ae3      	ldrh	r3, [r4, r3]
 800382a:	fbb7 f0f3 	udiv	r0, r7, r3
 800382e:	e796      	b.n	800375e <get_fat.part.6+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003838 <dir_sdi>:
{
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	460d      	mov	r5, r1
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800383c:	6881      	ldr	r1, [r0, #8]
	dp->index = (WORD)idx;	/* Current index */
 800383e:	80c5      	strh	r5, [r0, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003840:	2901      	cmp	r1, #1
 8003842:	d029      	beq.n	8003898 <dir_sdi+0x60>
 8003844:	f241 0214 	movw	r2, #4116	; 0x1014
 8003848:	6803      	ldr	r3, [r0, #0]
 800384a:	4604      	mov	r4, r0
 800384c:	589a      	ldr	r2, [r3, r2]
 800384e:	428a      	cmp	r2, r1
 8003850:	d922      	bls.n	8003898 <dir_sdi+0x60>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003852:	b319      	cbz	r1, 800389c <dir_sdi+0x64>
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003854:	f241 000a 	movw	r0, #4106	; 0x100a
 8003858:	f241 0602 	movw	r6, #4098	; 0x1002
 800385c:	5a18      	ldrh	r0, [r3, r0]
 800385e:	5d9e      	ldrb	r6, [r3, r6]
 8003860:	0940      	lsrs	r0, r0, #5
 8003862:	fb06 f600 	mul.w	r6, r6, r0
		while (idx >= ic) {	/* Follow cluster chain */
 8003866:	42b5      	cmp	r5, r6
 8003868:	d33e      	bcc.n	80038e8 <dir_sdi+0xb0>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800386a:	2901      	cmp	r1, #1
 800386c:	d914      	bls.n	8003898 <dir_sdi+0x60>
 800386e:	428a      	cmp	r2, r1
 8003870:	d912      	bls.n	8003898 <dir_sdi+0x60>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003872:	f241 0714 	movw	r7, #4116	; 0x1014
 8003876:	e001      	b.n	800387c <dir_sdi+0x44>
		while (idx >= ic) {	/* Follow cluster chain */
 8003878:	42ae      	cmp	r6, r5
 800387a:	d835      	bhi.n	80038e8 <dir_sdi+0xb0>
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff41 	bl	8003704 <get_fat.part.6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	4601      	mov	r1, r0
			idx -= ic;
 8003886:	eba5 0506 	sub.w	r5, r5, r6
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800388a:	d03c      	beq.n	8003906 <dir_sdi+0xce>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800388c:	2801      	cmp	r0, #1
 800388e:	d903      	bls.n	8003898 <dir_sdi+0x60>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	59da      	ldr	r2, [r3, r7]
 8003894:	4282      	cmp	r2, r0
 8003896:	d8ef      	bhi.n	8003878 <dir_sdi+0x40>
	if (!sect) return FR_INT_ERR;
 8003898:	2002      	movs	r0, #2
}
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800389c:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 80038a0:	7800      	ldrb	r0, [r0, #0]
 80038a2:	2803      	cmp	r0, #3
 80038a4:	d019      	beq.n	80038da <dir_sdi+0xa2>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80038a6:	f241 0208 	movw	r2, #4104	; 0x1008
 80038aa:	5a9a      	ldrh	r2, [r3, r2]
 80038ac:	42aa      	cmp	r2, r5
 80038ae:	d9f3      	bls.n	8003898 <dir_sdi+0x60>
		sect = dp->fs->dirbase;
 80038b0:	f241 0224 	movw	r2, #4132	; 0x1024
 80038b4:	589e      	ldr	r6, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 80038b6:	60e1      	str	r1, [r4, #12]
	if (!sect) return FR_INT_ERR;
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	d0ed      	beq.n	8003898 <dir_sdi+0x60>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80038bc:	f241 020a 	movw	r2, #4106	; 0x100a
 80038c0:	5a9a      	ldrh	r2, [r3, r2]
	return FR_OK;
 80038c2:	2000      	movs	r0, #0
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80038c4:	0952      	lsrs	r2, r2, #5
 80038c6:	fbb5 f1f2 	udiv	r1, r5, r2
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80038ca:	fb02 5511 	mls	r5, r2, r1, r5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80038ce:	4431      	add	r1, r6
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80038d0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80038d4:	e9c4 1304 	strd	r1, r3, [r4, #16]
}
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dp->fs->dirbase;
 80038da:	f241 0024 	movw	r0, #4132	; 0x1024
 80038de:	5818      	ldr	r0, [r3, r0]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d0e0      	beq.n	80038a6 <dir_sdi+0x6e>
 80038e4:	4601      	mov	r1, r0
 80038e6:	e7b5      	b.n	8003854 <dir_sdi+0x1c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038e8:	3a02      	subs	r2, #2
	clst -= 2;
 80038ea:	1e88      	subs	r0, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80038ec:	4290      	cmp	r0, r2
 80038ee:	d301      	bcc.n	80038f4 <dir_sdi+0xbc>
	dp->clust = clst;	/* Current cluster# */
 80038f0:	60e1      	str	r1, [r4, #12]
 80038f2:	e7d1      	b.n	8003898 <dir_sdi+0x60>
	return clst * fs->csize + fs->database;
 80038f4:	f241 0602 	movw	r6, #4098	; 0x1002
 80038f8:	f241 0228 	movw	r2, #4136	; 0x1028
 80038fc:	5d9e      	ldrb	r6, [r3, r6]
 80038fe:	589a      	ldr	r2, [r3, r2]
 8003900:	fb00 2606 	mla	r6, r0, r6, r2
 8003904:	e7d7      	b.n	80038b6 <dir_sdi+0x7e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003906:	2001      	movs	r0, #1
}
 8003908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800390a:	bf00      	nop

0800390c <put_fat.part.7>:
FRESULT put_fat (
 800390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 8003910:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003914:	781b      	ldrb	r3, [r3, #0]
FRESULT put_fat (
 8003916:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 8003918:	2b02      	cmp	r3, #2
FRESULT put_fat (
 800391a:	460d      	mov	r5, r1
 800391c:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 800391e:	d075      	beq.n	8003a0c <put_fat.part.7+0x100>
 8003920:	2b03      	cmp	r3, #3
 8003922:	d046      	beq.n	80039b2 <put_fat.part.7+0xa6>
 8003924:	2b01      	cmp	r3, #1
 8003926:	d002      	beq.n	800392e <put_fat.part.7+0x22>
			res = FR_INT_ERR;
 8003928:	2002      	movs	r0, #2
}
 800392a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800392e:	f241 0a0a 	movw	sl, #4106	; 0x100a
 8003932:	f830 c00a 	ldrh.w	ip, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 8003936:	eb01 0751 	add.w	r7, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800393a:	f241 082c 	movw	r8, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800393e:	fbb7 f3fc 	udiv	r3, r7, ip
 8003942:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 8003946:	f8d9 2000 	ldr.w	r2, [r9]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800394a:	f850 e008 	ldr.w	lr, [r0, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800394e:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003950:	4571      	cmp	r1, lr
 8003952:	f040 8082 	bne.w	8003a5a <put_fat.part.7+0x14e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003956:	f107 0801 	add.w	r8, r7, #1
 800395a:	fbb8 f0fc 	udiv	r0, r8, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800395e:	07ed      	lsls	r5, r5, #31
 8003960:	eb00 0102 	add.w	r1, r0, r2
			p = &fs->win.d8[bc++ % SS(fs)];
 8003964:	fb0c 7313 	mls	r3, ip, r3, r7
			fs->wflag = 1;
 8003968:	f241 0204 	movw	r2, #4100	; 0x1004
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800396c:	f140 808a 	bpl.w	8003a84 <put_fat.part.7+0x178>
			fs->wflag = 1;
 8003970:	2701      	movs	r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003972:	5ce5      	ldrb	r5, [r4, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003974:	458e      	cmp	lr, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003976:	f005 050f 	and.w	r5, r5, #15
 800397a:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 800397e:	54e5      	strb	r5, [r4, r3]
			fs->wflag = 1;
 8003980:	54a7      	strb	r7, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003982:	d009      	beq.n	8003998 <put_fat.part.7+0x8c>
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff fca7 	bl	80032d8 <move_window.part.3>
			if (res != FR_OK) break;
 800398a:	2800      	cmp	r0, #0
 800398c:	d1cd      	bne.n	800392a <put_fat.part.7+0x1e>
			p = &fs->win.d8[bc % SS(fs)];
 800398e:	f241 030a 	movw	r3, #4106	; 0x100a
 8003992:	5ae0      	ldrh	r0, [r4, r3]
 8003994:	fbb8 fcf0 	udiv	ip, r8, r0
 8003998:	fb00 8c1c 	mls	ip, r0, ip, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800399c:	f3c6 1207 	ubfx	r2, r6, #4, #8
			fs->wflag = 1;
 80039a0:	f241 0304 	movw	r3, #4100	; 0x1004
 80039a4:	2101      	movs	r1, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80039a6:	f804 200c 	strb.w	r2, [r4, ip]
			fs->wflag = 1;
 80039aa:	54e1      	strb	r1, [r4, r3]
 80039ac:	2000      	movs	r0, #0
}
 80039ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80039b2:	f241 070a 	movw	r7, #4106	; 0x100a
 80039b6:	5bc2      	ldrh	r2, [r0, r7]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80039b8:	f241 032c 	movw	r3, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80039bc:	0891      	lsrs	r1, r2, #2
 80039be:	fbb5 f1f1 	udiv	r1, r5, r1
 80039c2:	f500 5c81 	add.w	ip, r0, #4128	; 0x1020
 80039c6:	f8dc c000 	ldr.w	ip, [ip]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80039ca:	58c3      	ldr	r3, [r0, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80039cc:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 80039ce:	4299      	cmp	r1, r3
 80039d0:	d151      	bne.n	8003a76 <put_fat.part.7+0x16a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80039d2:	00ad      	lsls	r5, r5, #2
 80039d4:	fbb5 f3f2 	udiv	r3, r5, r2
			fs->wflag = 1;
 80039d8:	f241 0704 	movw	r7, #4100	; 0x1004
 80039dc:	f04f 0c01 	mov.w	ip, #1
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80039e0:	fb02 5513 	mls	r5, r2, r3, r5
 80039e4:	1961      	adds	r1, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 80039e6:	78cb      	ldrb	r3, [r1, #3]
			fs->wflag = 1;
 80039e8:	2000      	movs	r0, #0
			val |= LD_DWORD(p) & 0xF0000000;
 80039ea:	061b      	lsls	r3, r3, #24
 80039ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039f0:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 80039f4:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80039f8:	5562      	strb	r2, [r4, r5]
 80039fa:	704b      	strb	r3, [r1, #1]
 80039fc:	0c13      	lsrs	r3, r2, #16
 80039fe:	0e12      	lsrs	r2, r2, #24
 8003a00:	708b      	strb	r3, [r1, #2]
 8003a02:	70ca      	strb	r2, [r1, #3]
			fs->wflag = 1;
 8003a04:	f804 c007 	strb.w	ip, [r4, r7]
}
 8003a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003a0c:	f241 070a 	movw	r7, #4106	; 0x100a
 8003a10:	5bc2      	ldrh	r2, [r0, r7]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a12:	f241 032c 	movw	r3, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003a16:	0851      	lsrs	r1, r2, #1
 8003a18:	fbb5 f1f1 	udiv	r1, r5, r1
 8003a1c:	f500 5c81 	add.w	ip, r0, #4128	; 0x1020
 8003a20:	f8dc c000 	ldr.w	ip, [ip]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a24:	58c3      	ldr	r3, [r0, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003a26:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a28:	4299      	cmp	r1, r3
 8003a2a:	d005      	beq.n	8003a38 <put_fat.part.7+0x12c>
 8003a2c:	f7ff fc54 	bl	80032d8 <move_window.part.3>
			if (res != FR_OK) break;
 8003a30:	2800      	cmp	r0, #0
 8003a32:	f47f af7a 	bne.w	800392a <put_fat.part.7+0x1e>
 8003a36:	5be2      	ldrh	r2, [r4, r7]
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003a38:	006d      	lsls	r5, r5, #1
 8003a3a:	fbb5 f3f2 	udiv	r3, r5, r2
			fs->wflag = 1;
 8003a3e:	f241 0104 	movw	r1, #4100	; 0x1004
 8003a42:	2701      	movs	r7, #1
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003a44:	fb02 5513 	mls	r5, r2, r3, r5
			ST_WORD(p, (WORD)val);
 8003a48:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003a4c:	5566      	strb	r6, [r4, r5]
 8003a4e:	4425      	add	r5, r4
 8003a50:	706b      	strb	r3, [r5, #1]
			fs->wflag = 1;
 8003a52:	5467      	strb	r7, [r4, r1]
 8003a54:	2000      	movs	r0, #0
}
 8003a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5a:	f7ff fc3d 	bl	80032d8 <move_window.part.3>
			if (res != FR_OK) break;
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	f47f af63 	bne.w	800392a <put_fat.part.7+0x1e>
 8003a64:	f834 c00a 	ldrh.w	ip, [r4, sl]
 8003a68:	f8d9 2000 	ldr.w	r2, [r9]
 8003a6c:	fbb7 f3fc 	udiv	r3, r7, ip
 8003a70:	f854 e008 	ldr.w	lr, [r4, r8]
 8003a74:	e76f      	b.n	8003956 <put_fat.part.7+0x4a>
 8003a76:	f7ff fc2f 	bl	80032d8 <move_window.part.3>
			if (res != FR_OK) break;
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	f47f af55 	bne.w	800392a <put_fat.part.7+0x1e>
 8003a80:	5be2      	ldrh	r2, [r4, r7]
 8003a82:	e7a6      	b.n	80039d2 <put_fat.part.7+0xc6>
			fs->wflag = 1;
 8003a84:	2501      	movs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a86:	458e      	cmp	lr, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003a88:	54e6      	strb	r6, [r4, r3]
			fs->wflag = 1;
 8003a8a:	54a5      	strb	r5, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a8c:	d109      	bne.n	8003aa2 <put_fat.part.7+0x196>
			p = &fs->win.d8[bc % SS(fs)];
 8003a8e:	fb00 8c1c 	mls	ip, r0, ip, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003a92:	f814 200c 	ldrb.w	r2, [r4, ip]
 8003a96:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8003a9a:	f022 020f 	bic.w	r2, r2, #15
 8003a9e:	4332      	orrs	r2, r6
 8003aa0:	e77e      	b.n	80039a0 <put_fat.part.7+0x94>
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7ff fc18 	bl	80032d8 <move_window.part.3>
			if (res != FR_OK) break;
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	f47f af3e 	bne.w	800392a <put_fat.part.7+0x1e>
			p = &fs->win.d8[bc % SS(fs)];
 8003aae:	f241 030a 	movw	r3, #4106	; 0x100a
 8003ab2:	5ae0      	ldrh	r0, [r4, r3]
 8003ab4:	fbb8 fcf0 	udiv	ip, r8, r0
 8003ab8:	e7e9      	b.n	8003a8e <put_fat.part.7+0x182>
 8003aba:	bf00      	nop

08003abc <create_chain>:
{
 8003abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac0:	4606      	mov	r6, r0
	if (clst == 0) {		/* Create a new chain */
 8003ac2:	4688      	mov	r8, r1
 8003ac4:	bb31      	cbnz	r1, 8003b14 <create_chain+0x58>
		scl = fs->last_clust;			/* Get suggested start point */
 8003ac6:	f241 020c 	movw	r2, #4108	; 0x100c
 8003aca:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ace:	5885      	ldr	r5, [r0, r2]
 8003ad0:	58c3      	ldr	r3, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003ad2:	bb95      	cbnz	r5, 8003b3a <create_chain+0x7e>
 8003ad4:	2501      	movs	r5, #1
 8003ad6:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 8003ada:	462c      	mov	r4, r5
 8003adc:	3714      	adds	r7, #20
 8003ade:	e010      	b.n	8003b02 <create_chain+0x46>
			if (ncl > scl) return 0;	/* No free cluster */
 8003ae0:	2d01      	cmp	r5, #1
 8003ae2:	d92e      	bls.n	8003b42 <create_chain+0x86>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d911      	bls.n	8003b0c <create_chain+0x50>
			ncl = 2;
 8003ae8:	2402      	movs	r4, #2
 8003aea:	4621      	mov	r1, r4
 8003aec:	4630      	mov	r0, r6
 8003aee:	f7ff fe09 	bl	8003704 <get_fat.part.6>
		if (cs == 0) break;				/* Found a free cluster */
 8003af2:	b350      	cbz	r0, 8003b4a <create_chain+0x8e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003af4:	1c41      	adds	r1, r0, #1
 8003af6:	d036      	beq.n	8003b66 <create_chain+0xaa>
 8003af8:	2801      	cmp	r0, #1
 8003afa:	d007      	beq.n	8003b0c <create_chain+0x50>
		if (ncl == scl) return 0;		/* No free cluster */
 8003afc:	42a5      	cmp	r5, r4
 8003afe:	d020      	beq.n	8003b42 <create_chain+0x86>
 8003b00:	683b      	ldr	r3, [r7, #0]
		ncl++;							/* Next cluster */
 8003b02:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003b04:	429c      	cmp	r4, r3
 8003b06:	d2eb      	bcs.n	8003ae0 <create_chain+0x24>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b08:	2c01      	cmp	r4, #1
 8003b0a:	d8ee      	bhi.n	8003aea <create_chain+0x2e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003b0c:	2401      	movs	r4, #1
}
 8003b0e:	4620      	mov	r0, r4
 8003b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b14:	2901      	cmp	r1, #1
 8003b16:	d9f9      	bls.n	8003b0c <create_chain+0x50>
 8003b18:	f241 0514 	movw	r5, #4116	; 0x1014
 8003b1c:	5943      	ldr	r3, [r0, r5]
 8003b1e:	4299      	cmp	r1, r3
 8003b20:	d2f4      	bcs.n	8003b0c <create_chain+0x50>
 8003b22:	f7ff fdef 	bl	8003704 <get_fat.part.6>
		if (cs < 2) return 1;			/* Invalid value */
 8003b26:	2801      	cmp	r0, #1
 8003b28:	4604      	mov	r4, r0
 8003b2a:	d9ef      	bls.n	8003b0c <create_chain+0x50>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d01a      	beq.n	8003b66 <create_chain+0xaa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003b30:	5973      	ldr	r3, [r6, r5]
 8003b32:	42a3      	cmp	r3, r4
 8003b34:	d8eb      	bhi.n	8003b0e <create_chain+0x52>
 8003b36:	4645      	mov	r5, r8
 8003b38:	e7cd      	b.n	8003ad6 <create_chain+0x1a>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003b3a:	429d      	cmp	r5, r3
 8003b3c:	bf28      	it	cs
 8003b3e:	2501      	movcs	r5, #1
 8003b40:	e7c9      	b.n	8003ad6 <create_chain+0x1a>
			if (ncl > scl) return 0;	/* No free cluster */
 8003b42:	2400      	movs	r4, #0
}
 8003b44:	4620      	mov	r0, r4
 8003b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b4a:	f241 0514 	movw	r5, #4116	; 0x1014
 8003b4e:	5973      	ldr	r3, [r6, r5]
 8003b50:	42a3      	cmp	r3, r4
 8003b52:	d9db      	bls.n	8003b0c <create_chain+0x50>
 8003b54:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	f7ff fed6 	bl	800390c <put_fat.part.7>
	if (res == FR_OK && clst != 0) {
 8003b60:	b130      	cbz	r0, 8003b70 <create_chain+0xb4>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003b62:	2801      	cmp	r0, #1
 8003b64:	d1d2      	bne.n	8003b0c <create_chain+0x50>
 8003b66:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (res == FR_OK && clst != 0) {
 8003b70:	f1b8 0f00 	cmp.w	r8, #0
 8003b74:	d00c      	beq.n	8003b90 <create_chain+0xd4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003b76:	f1b8 0f01 	cmp.w	r8, #1
 8003b7a:	d9c7      	bls.n	8003b0c <create_chain+0x50>
 8003b7c:	5973      	ldr	r3, [r6, r5]
 8003b7e:	4598      	cmp	r8, r3
 8003b80:	d2c4      	bcs.n	8003b0c <create_chain+0x50>
 8003b82:	4641      	mov	r1, r8
 8003b84:	4622      	mov	r2, r4
 8003b86:	4630      	mov	r0, r6
 8003b88:	f7ff fec0 	bl	800390c <put_fat.part.7>
	if (res == FR_OK) {
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d1e8      	bne.n	8003b62 <create_chain+0xa6>
		if (fs->free_clust != 0xFFFFFFFF) {
 8003b90:	f241 0110 	movw	r1, #4112	; 0x1010
		fs->last_clust = ncl;			/* Update FSINFO */
 8003b94:	f241 020c 	movw	r2, #4108	; 0x100c
		if (fs->free_clust != 0xFFFFFFFF) {
 8003b98:	5873      	ldr	r3, [r6, r1]
		fs->last_clust = ncl;			/* Update FSINFO */
 8003b9a:	50b4      	str	r4, [r6, r2]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	d0b6      	beq.n	8003b0e <create_chain+0x52>
			fs->fsi_flag |= 1;
 8003ba0:	f241 0005 	movw	r0, #4101	; 0x1005
 8003ba4:	5c32      	ldrb	r2, [r6, r0]
			fs->free_clust--;
 8003ba6:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 8003bac:	5073      	str	r3, [r6, r1]
			fs->fsi_flag |= 1;
 8003bae:	5432      	strb	r2, [r6, r0]
 8003bb0:	e7ad      	b.n	8003b0e <create_chain+0x52>
 8003bb2:	bf00      	nop

08003bb4 <dir_next>:
{
 8003bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8003bb8:	88c4      	ldrh	r4, [r0, #6]
 8003bba:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003bbc:	b2a3      	uxth	r3, r4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d053      	beq.n	8003c6a <dir_next+0xb6>
 8003bc2:	6902      	ldr	r2, [r0, #16]
 8003bc4:	2a00      	cmp	r2, #0
 8003bc6:	d050      	beq.n	8003c6a <dir_next+0xb6>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003bc8:	f241 030a 	movw	r3, #4106	; 0x100a
 8003bcc:	4605      	mov	r5, r0
 8003bce:	6800      	ldr	r0, [r0, #0]
 8003bd0:	460e      	mov	r6, r1
 8003bd2:	5ac3      	ldrh	r3, [r0, r3]
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	fbb4 f7f3 	udiv	r7, r4, r3
 8003bda:	fb03 4317 	mls	r3, r3, r7, r4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d137      	bne.n	8003c52 <dir_next+0x9e>
		if (!dp->clust) {		/* Static table */
 8003be2:	68e9      	ldr	r1, [r5, #12]
		dp->sect++;					/* Next sector */
 8003be4:	3201      	adds	r2, #1
 8003be6:	612a      	str	r2, [r5, #16]
		if (!dp->clust) {		/* Static table */
 8003be8:	2900      	cmp	r1, #0
 8003bea:	d039      	beq.n	8003c60 <dir_next+0xac>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003bec:	f241 0202 	movw	r2, #4098	; 0x1002
 8003bf0:	5c82      	ldrb	r2, [r0, r2]
 8003bf2:	3a01      	subs	r2, #1
 8003bf4:	4017      	ands	r7, r2
 8003bf6:	d12c      	bne.n	8003c52 <dir_next+0x9e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003bf8:	2901      	cmp	r1, #1
 8003bfa:	d939      	bls.n	8003c70 <dir_next+0xbc>
 8003bfc:	f241 0814 	movw	r8, #4116	; 0x1014
 8003c00:	f850 3008 	ldr.w	r3, [r0, r8]
 8003c04:	4299      	cmp	r1, r3
 8003c06:	d233      	bcs.n	8003c70 <dir_next+0xbc>
 8003c08:	f7ff fd7c 	bl	8003704 <get_fat.part.6>
				if (clst <= 1) return FR_INT_ERR;
 8003c0c:	2801      	cmp	r0, #1
 8003c0e:	4681      	mov	r9, r0
 8003c10:	d92e      	bls.n	8003c70 <dir_next+0xbc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003c12:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c16:	d07b      	beq.n	8003d10 <dir_next+0x15c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003c18:	6828      	ldr	r0, [r5, #0]
 8003c1a:	f850 1008 	ldr.w	r1, [r0, r8]
 8003c1e:	4549      	cmp	r1, r9
 8003c20:	d928      	bls.n	8003c74 <dir_next+0xc0>
 8003c22:	f1a9 0a02 	sub.w	sl, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c26:	3902      	subs	r1, #2
 8003c28:	458a      	cmp	sl, r1
				dp->clust = clst;				/* Initialize data for new cluster */
 8003c2a:	f8c5 900c 	str.w	r9, [r5, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003c2e:	d271      	bcs.n	8003d14 <dir_next+0x160>
	return clst * fs->csize + fs->database;
 8003c30:	f241 0202 	movw	r2, #4098	; 0x1002
 8003c34:	f241 0328 	movw	r3, #4136	; 0x1028
 8003c38:	5c82      	ldrb	r2, [r0, r2]
 8003c3a:	58c3      	ldr	r3, [r0, r3]
 8003c3c:	fb0a 3202 	mla	r2, sl, r2, r3
 8003c40:	f241 030a 	movw	r3, #4106	; 0x100a
 8003c44:	5ac3      	ldrh	r3, [r0, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8003c46:	612a      	str	r2, [r5, #16]
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	fbb4 f2f3 	udiv	r2, r4, r3
 8003c4e:	fb03 4312 	mls	r3, r3, r2, r4
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003c52:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003c56:	6168      	str	r0, [r5, #20]
	dp->index = (WORD)i;	/* Current index */
 8003c58:	80ec      	strh	r4, [r5, #6]
	return FR_OK;
 8003c5a:	2000      	movs	r0, #0
}
 8003c5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003c60:	f241 0208 	movw	r2, #4104	; 0x1008
 8003c64:	5a82      	ldrh	r2, [r0, r2]
 8003c66:	42a2      	cmp	r2, r4
 8003c68:	d8f3      	bhi.n	8003c52 <dir_next+0x9e>
		return FR_NO_FILE;
 8003c6a:	2004      	movs	r0, #4
}
 8003c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst <= 1) return FR_INT_ERR;
 8003c70:	2002      	movs	r0, #2
 8003c72:	e7fb      	b.n	8003c6c <dir_next+0xb8>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003c74:	2e00      	cmp	r6, #0
 8003c76:	d0f8      	beq.n	8003c6a <dir_next+0xb6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003c78:	68e9      	ldr	r1, [r5, #12]
 8003c7a:	f7ff ff1f 	bl	8003abc <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003c7e:	4681      	mov	r9, r0
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d049      	beq.n	8003d18 <dir_next+0x164>
					if (clst == 1) return FR_INT_ERR;
 8003c84:	2801      	cmp	r0, #1
 8003c86:	d0f3      	beq.n	8003c70 <dir_next+0xbc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003c88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003c8c:	d040      	beq.n	8003d10 <dir_next+0x15c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003c8e:	f241 0204 	movw	r2, #4100	; 0x1004
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003c92:	682b      	ldr	r3, [r5, #0]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003c94:	5c9a      	ldrb	r2, [r3, r2]
 8003c96:	2a00      	cmp	r2, #0
 8003c98:	d14a      	bne.n	8003d30 <dir_next+0x17c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003c9a:	f241 010a 	movw	r1, #4106	; 0x100a
 8003c9e:	5a59      	ldrh	r1, [r3, r1]
 8003ca0:	461a      	mov	r2, r3
	while (cnt--)
 8003ca2:	b131      	cbz	r1, 8003cb2 <dir_next+0xfe>
		*d++ = (BYTE)val;
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f802 0b01 	strb.w	r0, [r2], #1
	while (cnt--)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1fb      	bne.n	8003ca8 <dir_next+0xf4>
 8003cb0:	682b      	ldr	r3, [r5, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003cb2:	f241 0214 	movw	r2, #4116	; 0x1014
 8003cb6:	589a      	ldr	r2, [r3, r2]
	clst -= 2;
 8003cb8:	f1a9 0a02 	sub.w	sl, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003cbc:	3a02      	subs	r2, #2
 8003cbe:	4592      	cmp	sl, r2
	return clst * fs->csize + fs->database;
 8003cc0:	bf38      	it	cc
 8003cc2:	f241 0228 	movwcc	r2, #4136	; 0x1028
 8003cc6:	f241 0102 	movw	r1, #4098	; 0x1002
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003cca:	bf28      	it	cs
 8003ccc:	2200      	movcs	r2, #0
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003cce:	f241 0b2c 	movw	fp, #4140	; 0x102c
 8003cd2:	5c59      	ldrb	r1, [r3, r1]
	return clst * fs->csize + fs->database;
 8003cd4:	bf3c      	itt	cc
 8003cd6:	589a      	ldrcc	r2, [r3, r2]
 8003cd8:	fb0a 2201 	mlacc	r2, sl, r1, r2
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003cdc:	f843 200b 	str.w	r2, [r3, fp]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003ce0:	b1e1      	cbz	r1, 8003d1c <dir_next+0x168>
						dp->fs->wflag = 1;
 8003ce2:	f241 0804 	movw	r8, #4100	; 0x1004
 8003ce6:	2601      	movs	r6, #1
 8003ce8:	e00a      	b.n	8003d00 <dir_next+0x14c>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003cea:	f241 0102 	movw	r1, #4098	; 0x1002
						dp->fs->winsect++;
 8003cee:	682b      	ldr	r3, [r5, #0]
 8003cf0:	f853 200b 	ldr.w	r2, [r3, fp]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003cf4:	5c59      	ldrb	r1, [r3, r1]
						dp->fs->winsect++;
 8003cf6:	3201      	adds	r2, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003cf8:	42b9      	cmp	r1, r7
						dp->fs->winsect++;
 8003cfa:	f843 200b 	str.w	r2, [r3, fp]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003cfe:	d90d      	bls.n	8003d1c <dir_next+0x168>
						dp->fs->wflag = 1;
 8003d00:	f803 6008 	strb.w	r6, [r3, r8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fa41 	bl	800318c <sync_window.part.2>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003d0a:	3701      	adds	r7, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d0ec      	beq.n	8003cea <dir_next+0x136>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003d10:	2001      	movs	r0, #1
 8003d12:	e7ab      	b.n	8003c6c <dir_next+0xb8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003d14:	2200      	movs	r2, #0
 8003d16:	e793      	b.n	8003c40 <dir_next+0x8c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003d18:	2007      	movs	r0, #7
 8003d1a:	e7a7      	b.n	8003c6c <dir_next+0xb8>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003d1c:	f241 062c 	movw	r6, #4140	; 0x102c
 8003d20:	f241 0114 	movw	r1, #4116	; 0x1014
 8003d24:	599a      	ldr	r2, [r3, r6]
 8003d26:	5859      	ldr	r1, [r3, r1]
 8003d28:	1bd2      	subs	r2, r2, r7
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	519a      	str	r2, [r3, r6]
 8003d2e:	e77a      	b.n	8003c26 <dir_next+0x72>
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fa2b 	bl	800318c <sync_window.part.2>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d1ea      	bne.n	8003d10 <dir_next+0x15c>
 8003d3a:	682b      	ldr	r3, [r5, #0]
 8003d3c:	e7ad      	b.n	8003c9a <dir_next+0xe6>
 8003d3e:	bf00      	nop

08003d40 <dir_find.part.8>:
FRESULT dir_find (
 8003d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d48:	f04f 08ff 	mov.w	r8, #255	; 0xff
FRESULT dir_find (
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	4604      	mov	r4, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003d50:	4645      	mov	r5, r8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d52:	f241 072c 	movw	r7, #4140	; 0x102c
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003d56:	8483      	strh	r3, [r0, #36]	; 0x24
 8003d58:	e00a      	b.n	8003d70 <dir_find.part.8+0x30>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003d5a:	290f      	cmp	r1, #15
 8003d5c:	d031      	beq.n	8003dc2 <dir_find.part.8+0x82>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d62:	25ff      	movs	r5, #255	; 0xff
 8003d64:	84a3      	strh	r3, [r4, #36]	; 0x24
		res = dir_next(dp, 0);		/* Next entry */
 8003d66:	2100      	movs	r1, #0
 8003d68:	4620      	mov	r0, r4
 8003d6a:	f7ff ff23 	bl	8003bb4 <dir_next>
	} while (res == FR_OK);
 8003d6e:	bb28      	cbnz	r0, 8003dbc <dir_find.part.8+0x7c>
		res = move_window(dp->fs, dp->sect);
 8003d70:	6820      	ldr	r0, [r4, #0]
 8003d72:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d74:	59c3      	ldr	r3, [r0, r7]
 8003d76:	4299      	cmp	r1, r3
 8003d78:	d002      	beq.n	8003d80 <dir_find.part.8+0x40>
 8003d7a:	f7ff faad 	bl	80032d8 <move_window.part.3>
		if (res != FR_OK) break;
 8003d7e:	b9e8      	cbnz	r0, 8003dbc <dir_find.part.8+0x7c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003d80:	6966      	ldr	r6, [r4, #20]
		c = dir[DIR_Name];
 8003d82:	7832      	ldrb	r2, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	d044      	beq.n	8003e12 <dir_find.part.8+0xd2>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003d88:	2ae5      	cmp	r2, #229	; 0xe5
 8003d8a:	d0e8      	beq.n	8003d5e <dir_find.part.8+0x1e>
		a = dir[DIR_Attr] & AM_MASK;
 8003d8c:	7af3      	ldrb	r3, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003d8e:	0718      	lsls	r0, r3, #28
		a = dir[DIR_Attr] & AM_MASK;
 8003d90:	f003 013f 	and.w	r1, r3, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003d94:	d4e1      	bmi.n	8003d5a <dir_find.part.8+0x1a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003d96:	290f      	cmp	r1, #15
 8003d98:	d013      	beq.n	8003dc2 <dir_find.part.8+0x82>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003d9a:	b325      	cbz	r5, 8003de6 <dir_find.part.8+0xa6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003d9c:	69a3      	ldr	r3, [r4, #24]
 8003d9e:	7ad9      	ldrb	r1, [r3, #11]
 8003da0:	07c9      	lsls	r1, r1, #31
 8003da2:	d4dc      	bmi.n	8003d5e <dir_find.part.8+0x1e>
 8003da4:	f103 000b 	add.w	r0, r3, #11
 8003da8:	e001      	b.n	8003dae <dir_find.part.8+0x6e>
 8003daa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003dae:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003db2:	4291      	cmp	r1, r2
 8003db4:	d1d3      	bne.n	8003d5e <dir_find.part.8+0x1e>
 8003db6:	4283      	cmp	r3, r0
 8003db8:	d1f7      	bne.n	8003daa <dir_find.part.8+0x6a>
 8003dba:	2000      	movs	r0, #0
}
 8003dbc:	b003      	add	sp, #12
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dp->lfn) {
 8003dc2:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8003dc6:	f1b9 0f00 	cmp.w	r9, #0
 8003dca:	d0cc      	beq.n	8003d66 <dir_find.part.8+0x26>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003dcc:	0653      	lsls	r3, r2, #25
 8003dce:	d51c      	bpl.n	8003e0a <dir_find.part.8+0xca>
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003dd0:	88e3      	ldrh	r3, [r4, #6]
						sum = dir[LDIR_Chksum];
 8003dd2:	f896 800d 	ldrb.w	r8, [r6, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003dd6:	f002 05bf 	and.w	r5, r2, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003dda:	84a3      	strh	r3, [r4, #36]	; 0x24
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003ddc:	7b73      	ldrb	r3, [r6, #13]
 8003dde:	4543      	cmp	r3, r8
 8003de0:	d01b      	beq.n	8003e1a <dir_find.part.8+0xda>
 8003de2:	25ff      	movs	r5, #255	; 0xff
 8003de4:	e7bf      	b.n	8003d66 <dir_find.part.8+0x26>
 8003de6:	4631      	mov	r1, r6
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003de8:	4610      	mov	r0, r2
 8003dea:	f106 0c0a 	add.w	ip, r6, #10
 8003dee:	e001      	b.n	8003df4 <dir_find.part.8+0xb4>
 8003df0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003df4:	01eb      	lsls	r3, r5, #7
 8003df6:	ea43 0555 	orr.w	r5, r3, r5, lsr #1
 8003dfa:	4405      	add	r5, r0
 8003dfc:	458c      	cmp	ip, r1
 8003dfe:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8003e02:	d1f5      	bne.n	8003df0 <dir_find.part.8+0xb0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003e04:	4545      	cmp	r5, r8
 8003e06:	d1c9      	bne.n	8003d9c <dir_find.part.8+0x5c>
 8003e08:	e7d7      	b.n	8003dba <dir_find.part.8+0x7a>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003e0a:	42aa      	cmp	r2, r5
 8003e0c:	d0e6      	beq.n	8003ddc <dir_find.part.8+0x9c>
 8003e0e:	25ff      	movs	r5, #255	; 0xff
 8003e10:	e7a9      	b.n	8003d66 <dir_find.part.8+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003e12:	2004      	movs	r0, #4
}
 8003e14:	b003      	add	sp, #12
 8003e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003e1a:	f04f 0c01 	mov.w	ip, #1
 8003e1e:	7832      	ldrb	r2, [r6, #0]
 8003e20:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003e9c <dir_find.part.8+0x15c>
 8003e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	s = 0; wc = 1;
 8003e2e:	4660      	mov	r0, ip
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003e30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003e34:	f10b 0a0c 	add.w	sl, fp, #12
 8003e38:	e007      	b.n	8003e4a <dir_find.part.8+0x10a>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e3e:	4299      	cmp	r1, r3
 8003e40:	d1cf      	bne.n	8003de2 <dir_find.part.8+0xa2>
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8003e42:	45da      	cmp	sl, fp
 8003e44:	d01e      	beq.n	8003e84 <dir_find.part.8+0x144>
 8003e46:	f81b cf01 	ldrb.w	ip, [fp, #1]!
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003e4a:	eb06 010c 	add.w	r1, r6, ip
 8003e4e:	f891 e001 	ldrb.w	lr, [r1, #1]
 8003e52:	f816 100c 	ldrb.w	r1, [r6, ip]
 8003e56:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		if (wc) {	/* Last character has not been processed */
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d0ed      	beq.n	8003e3a <dir_find.part.8+0xfa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003e5e:	4608      	mov	r0, r1
 8003e60:	9201      	str	r2, [sp, #4]
 8003e62:	f000 fe31 	bl	8004ac8 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003e66:	9a01      	ldr	r2, [sp, #4]
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003e68:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003e6a:	1c53      	adds	r3, r2, #1
 8003e6c:	2afe      	cmp	r2, #254	; 0xfe
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	d8b7      	bhi.n	8003de2 <dir_find.part.8+0xa2>
 8003e72:	f839 0012 	ldrh.w	r0, [r9, r2, lsl #1]
 8003e76:	f000 fe27 	bl	8004ac8 <ff_wtoupper>
 8003e7a:	9900      	ldr	r1, [sp, #0]
 8003e7c:	4281      	cmp	r1, r0
 8003e7e:	d1b0      	bne.n	8003de2 <dir_find.part.8+0xa2>
 8003e80:	9a01      	ldr	r2, [sp, #4]
 8003e82:	e7de      	b.n	8003e42 <dir_find.part.8+0x102>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003e84:	7833      	ldrb	r3, [r6, #0]
 8003e86:	065e      	lsls	r6, r3, #25
 8003e88:	d504      	bpl.n	8003e94 <dir_find.part.8+0x154>
 8003e8a:	b118      	cbz	r0, 8003e94 <dir_find.part.8+0x154>
 8003e8c:	f839 3012 	ldrh.w	r3, [r9, r2, lsl #1]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1a6      	bne.n	8003de2 <dir_find.part.8+0xa2>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003e94:	3d01      	subs	r5, #1
 8003e96:	b2ed      	uxtb	r5, r5
 8003e98:	e765      	b.n	8003d66 <dir_find.part.8+0x26>
 8003e9a:	bf00      	nop
 8003e9c:	0800cc88 	.word	0x0800cc88

08003ea0 <dir_register>:
{
 8003ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 8003ea4:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
 8003ea8:	4604      	mov	r4, r0
	fn = dp->fn; lfn = dp->lfn;
 8003eaa:	4653      	mov	r3, sl
{
 8003eac:	b089      	sub	sp, #36	; 0x24
	fn = dp->fn; lfn = dp->lfn;
 8003eae:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8003eb2:	a905      	add	r1, sp, #20
 8003eb4:	f10a 050c 	add.w	r5, sl, #12
		*d++ = *s++;
 8003eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
	while (cnt--)
 8003ebc:	42ab      	cmp	r3, r5
		*d++ = *s++;
 8003ebe:	f801 2b01 	strb.w	r2, [r1], #1
	while (cnt--)
 8003ec2:	d1f9      	bne.n	8003eb8 <dir_register+0x18>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003ec4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003ec8:	07dd      	lsls	r5, r3, #31
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	d57b      	bpl.n	8003fc6 <dir_register+0x126>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003ece:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8003ed0:	f04f 0b01 	mov.w	fp, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003ed4:	4eb5      	ldr	r6, [pc, #724]	; (80041ac <dir_register+0x30c>)
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003ed6:	f88a 300b 	strb.w	r3, [sl, #11]
 8003eda:	f10a 39ff 	add.w	r9, sl, #4294967295
 8003ede:	6223      	str	r3, [r4, #32]
 8003ee0:	f10a 070a 	add.w	r7, sl, #10
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	4655      	mov	r5, sl
	const BYTE *s = (const BYTE*)src;
 8003ee8:	aa05      	add	r2, sp, #20
		*d++ = *s++;
 8003eea:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003eee:	f803 1f01 	strb.w	r1, [r3, #1]!
	while (cnt--)
 8003ef2:	429f      	cmp	r7, r3
 8003ef4:	d1f9      	bne.n	8003eea <dir_register+0x4a>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003ef6:	f1bb 0f05 	cmp.w	fp, #5
 8003efa:	d95a      	bls.n	8003fb2 <dir_register+0x112>
 8003efc:	f1a8 0c02 	sub.w	ip, r8, #2
		while (*lfn) {	/* Create a CRC */
 8003f00:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003f04:	465b      	mov	r3, fp
		while (*lfn) {	/* Create a CRC */
 8003f06:	b17a      	cbz	r2, 8003f28 <dir_register+0x88>
 8003f08:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8003f0a:	f002 0001 	and.w	r0, r2, #1
 8003f0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003f12:	03d8      	lsls	r0, r3, #15
 8003f14:	bf48      	it	mi
 8003f16:	4073      	eormi	r3, r6
			for (i = 0; i < 16; i++) {
 8003f18:	3901      	subs	r1, #1
				wc >>= 1;
 8003f1a:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8003f1e:	d1f4      	bne.n	8003f0a <dir_register+0x6a>
		while (*lfn) {	/* Create a CRC */
 8003f20:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 8003f24:	2a00      	cmp	r2, #0
 8003f26:	d1ef      	bne.n	8003f08 <dir_register+0x68>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003f28:	2207      	movs	r2, #7
 8003f2a:	f10d 0c13 	add.w	ip, sp, #19
		c = (seq % 16) + '0';
 8003f2e:	f003 000f 	and.w	r0, r3, #15
 8003f32:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8003f36:	2939      	cmp	r1, #57	; 0x39
 8003f38:	bf88      	it	hi
 8003f3a:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
	} while (seq);
 8003f3e:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8003f40:	f102 32ff 	add.w	r2, r2, #4294967295
 8003f44:	f80c 1901 	strb.w	r1, [ip], #-1
	} while (seq);
 8003f48:	d1f1      	bne.n	8003f2e <dir_register+0x8e>
	ns[i] = '~';
 8003f4a:	207e      	movs	r0, #126	; 0x7e
 8003f4c:	a908      	add	r1, sp, #32
 8003f4e:	4411      	add	r1, r2
 8003f50:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003f54:	2a00      	cmp	r2, #0
 8003f56:	f000 80aa 	beq.w	80040ae <dir_register+0x20e>
 8003f5a:	f89a 1000 	ldrb.w	r1, [sl]
 8003f5e:	2920      	cmp	r1, #32
 8003f60:	d104      	bne.n	8003f6c <dir_register+0xcc>
 8003f62:	e006      	b.n	8003f72 <dir_register+0xd2>
 8003f64:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003f68:	2920      	cmp	r1, #32
 8003f6a:	d002      	beq.n	8003f72 <dir_register+0xd2>
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d1f8      	bne.n	8003f64 <dir_register+0xc4>
 8003f72:	1e59      	subs	r1, r3, #1
 8003f74:	4451      	add	r1, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003f76:	2a07      	cmp	r2, #7
 8003f78:	a808      	add	r0, sp, #32
 8003f7a:	4410      	add	r0, r2
 8003f7c:	bf8c      	ite	hi
 8003f7e:	2020      	movhi	r0, #32
 8003f80:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
 8003f84:	f103 0301 	add.w	r3, r3, #1
 8003f88:	bf98      	it	ls
 8003f8a:	3201      	addls	r2, #1
	} while (j < 8);
 8003f8c:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003f8e:	f801 0f01 	strb.w	r0, [r1, #1]!
	} while (j < 8);
 8003f92:	d9f0      	bls.n	8003f76 <dir_register+0xd6>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003f94:	2100      	movs	r1, #0
 8003f96:	4620      	mov	r0, r4
 8003f98:	f7ff fc4e 	bl	8003838 <dir_sdi>
	if (res != FR_OK) return res;
 8003f9c:	b958      	cbnz	r0, 8003fb6 <dir_register+0x116>
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f7ff fece 	bl	8003d40 <dir_find.part.8>
			if (res != FR_OK) break;
 8003fa4:	b938      	cbnz	r0, 8003fb6 <dir_register+0x116>
		for (n = 1; n < 100; n++) {
 8003fa6:	f10b 0b01 	add.w	fp, fp, #1
 8003faa:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 8003fae:	d199      	bne.n	8003ee4 <dir_register+0x44>
 8003fb0:	e078      	b.n	80040a4 <dir_register+0x204>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003fb2:	465b      	mov	r3, fp
 8003fb4:	e7b8      	b.n	8003f28 <dir_register+0x88>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003fb6:	2804      	cmp	r0, #4
 8003fb8:	4605      	mov	r5, r0
 8003fba:	d154      	bne.n	8004066 <dir_register+0x1c6>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8003fbc:	9b01      	ldr	r3, [sp, #4]
 8003fbe:	f88a 300b 	strb.w	r3, [sl, #11]
 8003fc2:	f8c4 8020 	str.w	r8, [r4, #32]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003fc6:	9b01      	ldr	r3, [sp, #4]
 8003fc8:	079b      	lsls	r3, r3, #30
 8003fca:	d450      	bmi.n	800406e <dir_register+0x1ce>
	res = dir_sdi(dp, 0);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4620      	mov	r0, r4
 8003fd0:	f7ff fc32 	bl	8003838 <dir_sdi>
		nent = 1;
 8003fd4:	2601      	movs	r6, #1
	if (res == FR_OK) {
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d161      	bne.n	80040a0 <dir_register+0x200>
		n = 0;
 8003fdc:	4607      	mov	r7, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003fde:	f241 082c 	movw	r8, #4140	; 0x102c
 8003fe2:	e007      	b.n	8003ff4 <dir_register+0x154>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003fe4:	b1a3      	cbz	r3, 8004010 <dir_register+0x170>
				n = 0;					/* Not a blank entry. Restart to search */
 8003fe6:	2700      	movs	r7, #0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fde2 	bl	8003bb4 <dir_next>
		} while (res == FR_OK);
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d15e      	bne.n	80040b2 <dir_register+0x212>
			res = move_window(dp->fs, dp->sect);
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ff8:	f850 3008 	ldr.w	r3, [r0, r8]
 8003ffc:	4299      	cmp	r1, r3
 8003ffe:	d003      	beq.n	8004008 <dir_register+0x168>
 8004000:	f7ff f96a 	bl	80032d8 <move_window.part.3>
			if (res != FR_OK) break;
 8004004:	2800      	cmp	r0, #0
 8004006:	d154      	bne.n	80040b2 <dir_register+0x212>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8004008:	6963      	ldr	r3, [r4, #20]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2be5      	cmp	r3, #229	; 0xe5
 800400e:	d1e9      	bne.n	8003fe4 <dir_register+0x144>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004010:	3701      	adds	r7, #1
 8004012:	42be      	cmp	r6, r7
 8004014:	d1e8      	bne.n	8003fe8 <dir_register+0x148>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004016:	1e73      	subs	r3, r6, #1
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	d155      	bne.n	80040c8 <dir_register+0x228>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800401c:	f241 032c 	movw	r3, #4140	; 0x102c
		res = move_window(dp->fs, dp->sect);
 8004020:	6820      	ldr	r0, [r4, #0]
 8004022:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004024:	58c3      	ldr	r3, [r0, r3]
 8004026:	4299      	cmp	r1, r3
 8004028:	d145      	bne.n	80040b6 <dir_register+0x216>
		*d++ = (BYTE)val;
 800402a:	2100      	movs	r1, #0
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800402c:	6963      	ldr	r3, [r4, #20]
 800402e:	f103 0220 	add.w	r2, r3, #32
		*d++ = (BYTE)val;
 8004032:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 8004036:	4293      	cmp	r3, r2
 8004038:	d1fb      	bne.n	8004032 <dir_register+0x192>
 800403a:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800403e:	f103 000b 	add.w	r0, r3, #11
 8004042:	3a01      	subs	r2, #1
		*d++ = *s++;
 8004044:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 8004048:	4283      	cmp	r3, r0
		*d++ = *s++;
 800404a:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 800404e:	d1f9      	bne.n	8004044 <dir_register+0x1a4>
			dp->fs->wflag = 1;
 8004050:	f241 0204 	movw	r2, #4100	; 0x1004
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004054:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
			dp->fs->wflag = 1;
 8004058:	2101      	movs	r1, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800405a:	7adb      	ldrb	r3, [r3, #11]
 800405c:	f003 0318 	and.w	r3, r3, #24
 8004060:	7303      	strb	r3, [r0, #12]
			dp->fs->wflag = 1;
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	5499      	strb	r1, [r3, r2]
}
 8004066:	4628      	mov	r0, r5
 8004068:	b009      	add	sp, #36	; 0x24
 800406a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (n = 0; lfn[n]; n++) ;
 800406e:	f8b8 3000 	ldrh.w	r3, [r8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0aa      	beq.n	8003fcc <dir_register+0x12c>
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <dir_register+0x1dc>
 800407a:	460b      	mov	r3, r1
 800407c:	f838 2f02 	ldrh.w	r2, [r8, #2]!
 8004080:	1c59      	adds	r1, r3, #1
 8004082:	2a00      	cmp	r2, #0
 8004084:	d1f9      	bne.n	800407a <dir_register+0x1da>
 8004086:	4a4a      	ldr	r2, [pc, #296]	; (80041b0 <dir_register+0x310>)
 8004088:	f103 061a 	add.w	r6, r3, #26
	res = dir_sdi(dp, 0);
 800408c:	2100      	movs	r1, #0
 800408e:	4620      	mov	r0, r4
 8004090:	fba2 3606 	umull	r3, r6, r2, r6
 8004094:	f7ff fbd0 	bl	8003838 <dir_sdi>
 8004098:	08b6      	lsrs	r6, r6, #2
	if (res == FR_OK) {
 800409a:	4605      	mov	r5, r0
 800409c:	2800      	cmp	r0, #0
 800409e:	d09d      	beq.n	8003fdc <dir_register+0x13c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80040a0:	2d04      	cmp	r5, #4
 80040a2:	d1e0      	bne.n	8004066 <dir_register+0x1c6>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80040a4:	2507      	movs	r5, #7
}
 80040a6:	4628      	mov	r0, r5
 80040a8:	b009      	add	sp, #36	; 0x24
 80040aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80040ae:	4613      	mov	r3, r2
 80040b0:	e75f      	b.n	8003f72 <dir_register+0xd2>
			if (res != FR_OK) break;
 80040b2:	4605      	mov	r5, r0
 80040b4:	e7f4      	b.n	80040a0 <dir_register+0x200>
 80040b6:	f7ff f90f 	bl	80032d8 <move_window.part.3>
		if (res == FR_OK) {
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d0b5      	beq.n	800402a <dir_register+0x18a>
 80040be:	4605      	mov	r5, r0
}
 80040c0:	4628      	mov	r0, r5
 80040c2:	b009      	add	sp, #36	; 0x24
 80040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->index - nent);
 80040c8:	88e1      	ldrh	r1, [r4, #6]
 80040ca:	9b01      	ldr	r3, [sp, #4]
 80040cc:	4620      	mov	r0, r4
 80040ce:	1ac9      	subs	r1, r1, r3
 80040d0:	f7ff fbb2 	bl	8003838 <dir_sdi>
		if (res == FR_OK) {
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d1f2      	bne.n	80040be <dir_register+0x21e>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80040d8:	69a1      	ldr	r1, [r4, #24]
	BYTE sum = 0;
 80040da:	4680      	mov	r8, r0
 80040dc:	f101 000b 	add.w	r0, r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80040e0:	ea4f 13c8 	mov.w	r3, r8, lsl #7
 80040e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040e8:	ea43 0358 	orr.w	r3, r3, r8, lsr #1
 80040ec:	4413      	add	r3, r2
 80040ee:	4281      	cmp	r1, r0
 80040f0:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 80040f4:	d1f4      	bne.n	80040e0 <dir_register+0x240>
 80040f6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80041b4 <dir_register+0x314>
	if (sector != fs->winsect) {	/* Window offset changed? */
 80040fa:	f241 032c 	movw	r3, #4140	; 0x102c
				res = move_window(dp->fs, dp->sect);
 80040fe:	6820      	ldr	r0, [r4, #0]
 8004100:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004102:	58c3      	ldr	r3, [r0, r3]
 8004104:	4299      	cmp	r1, r3
 8004106:	d003      	beq.n	8004110 <dir_register+0x270>
 8004108:	f7ff f8e6 	bl	80032d8 <move_window.part.3>
				if (res != FR_OK) break;
 800410c:	2800      	cmp	r0, #0
 800410e:	d1d6      	bne.n	80040be <dir_register+0x21e>
	dir[LDIR_Type] = 0;
 8004110:	2000      	movs	r0, #0
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004112:	f89d b004 	ldrb.w	fp, [sp, #4]
 8004116:	6966      	ldr	r6, [r4, #20]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004118:	f10b 32ff 	add.w	r2, fp, #4294967295
 800411c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8004120:	270f      	movs	r7, #15
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8004122:	f8d4 e020 	ldr.w	lr, [r4, #32]
	s = wc = 0;
 8004126:	4603      	mov	r3, r0
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004128:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	dir[LDIR_Type] = 0;
 800412c:	7330      	strb	r0, [r6, #12]
	s = wc = 0;
 800412e:	4601      	mov	r1, r0
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8004130:	76b0      	strb	r0, [r6, #26]
 8004132:	76f0      	strb	r0, [r6, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004134:	f64f 7aff 	movw	sl, #65535	; 0xffff
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8004138:	2001      	movs	r0, #1
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800413a:	f886 800d 	strb.w	r8, [r6, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800413e:	72f7      	strb	r7, [r6, #11]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004140:	4553      	cmp	r3, sl
 8004142:	bf0e      	itee	eq
 8004144:	4694      	moveq	ip, r2
 8004146:	f83e 3012 	ldrhne.w	r3, [lr, r2, lsl #1]
 800414a:	f102 0c01 	addne.w	ip, r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800414e:	1837      	adds	r7, r6, r0
 8004150:	0a1a      	lsrs	r2, r3, #8
 8004152:	5433      	strb	r3, [r6, r0]
 8004154:	3101      	adds	r1, #1
 8004156:	707a      	strb	r2, [r7, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004158:	b933      	cbnz	r3, 8004168 <dir_register+0x2c8>
	} while (++s < 13);
 800415a:	290c      	cmp	r1, #12
 800415c:	d811      	bhi.n	8004182 <dir_register+0x2e2>
 800415e:	f811 0009 	ldrb.w	r0, [r1, r9]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8004162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004166:	e7f2      	b.n	800414e <dir_register+0x2ae>
	} while (++s < 13);
 8004168:	290c      	cmp	r1, #12
 800416a:	d803      	bhi.n	8004174 <dir_register+0x2d4>
 800416c:	4662      	mov	r2, ip
 800416e:	f819 0001 	ldrb.w	r0, [r9, r1]
 8004172:	e7e5      	b.n	8004140 <dir_register+0x2a0>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8004174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004178:	4293      	cmp	r3, r2
 800417a:	d002      	beq.n	8004182 <dir_register+0x2e2>
 800417c:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
 8004180:	b90b      	cbnz	r3, 8004186 <dir_register+0x2e6>
 8004182:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
				dp->fs->wflag = 1;
 8004186:	2001      	movs	r0, #1
 8004188:	f241 0304 	movw	r3, #4100	; 0x1004
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800418c:	f886 b000 	strb.w	fp, [r6]
				dp->fs->wflag = 1;
 8004190:	6822      	ldr	r2, [r4, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8004192:	2100      	movs	r1, #0
				dp->fs->wflag = 1;
 8004194:	54d0      	strb	r0, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8004196:	4620      	mov	r0, r4
 8004198:	f7ff fd0c 	bl	8003bb4 <dir_next>
			} while (res == FR_OK && --nent);
 800419c:	2800      	cmp	r0, #0
 800419e:	d18e      	bne.n	80040be <dir_register+0x21e>
 80041a0:	9b01      	ldr	r3, [sp, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	d1a8      	bne.n	80040fa <dir_register+0x25a>
 80041a8:	e738      	b.n	800401c <dir_register+0x17c>
 80041aa:	bf00      	nop
 80041ac:	00011021 	.word	0x00011021
 80041b0:	4ec4ec4f 	.word	0x4ec4ec4f
 80041b4:	0800cc88 	.word	0x0800cc88

080041b8 <remove_chain.part.9>:
FRESULT remove_chain (
 80041b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041bc:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80041c0:	46b8      	mov	r8, r7
FRESULT remove_chain (
 80041c2:	4606      	mov	r6, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	3714      	adds	r7, #20
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80041c8:	f108 0810 	add.w	r8, r8, #16
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	429c      	cmp	r4, r3
 80041d0:	d225      	bcs.n	800421e <remove_chain.part.9+0x66>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80041d2:	2c01      	cmp	r4, #1
 80041d4:	d926      	bls.n	8004224 <remove_chain.part.9+0x6c>
 80041d6:	4621      	mov	r1, r4
 80041d8:	4630      	mov	r0, r6
 80041da:	f7ff fa93 	bl	8003704 <get_fat.part.6>
			if (nxt == 0) break;				/* Empty cluster? */
 80041de:	4605      	mov	r5, r0
 80041e0:	b1e8      	cbz	r0, 800421e <remove_chain.part.9+0x66>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80041e2:	2801      	cmp	r0, #1
 80041e4:	d01e      	beq.n	8004224 <remove_chain.part.9+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80041e6:	1c41      	adds	r1, r0, #1
 80041e8:	d01f      	beq.n	800422a <remove_chain.part.9+0x72>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	429c      	cmp	r4, r3
 80041ee:	d219      	bcs.n	8004224 <remove_chain.part.9+0x6c>
 80041f0:	4621      	mov	r1, r4
 80041f2:	2200      	movs	r2, #0
 80041f4:	4630      	mov	r0, r6
 80041f6:	f7ff fb89 	bl	800390c <put_fat.part.7>
			if (res != FR_OK) break;
 80041fa:	b9a0      	cbnz	r0, 8004226 <remove_chain.part.9+0x6e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80041fc:	f8d8 3000 	ldr.w	r3, [r8]
FRESULT remove_chain (
 8004200:	462c      	mov	r4, r5
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	d0e2      	beq.n	80041cc <remove_chain.part.9+0x14>
				fs->fsi_flag |= 1;
 8004206:	f241 0205 	movw	r2, #4101	; 0x1005
				fs->free_clust++;
 800420a:	3301      	adds	r3, #1
 800420c:	f8c8 3000 	str.w	r3, [r8]
				fs->fsi_flag |= 1;
 8004210:	5cb3      	ldrb	r3, [r6, r2]
 8004212:	f043 0301 	orr.w	r3, r3, #1
 8004216:	54b3      	strb	r3, [r6, r2]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	429c      	cmp	r4, r3
 800421c:	d3d9      	bcc.n	80041d2 <remove_chain.part.9+0x1a>
FRESULT remove_chain (
 800421e:	2000      	movs	r0, #0
}
 8004220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004224:	2002      	movs	r0, #2
}
 8004226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800422a:	2001      	movs	r0, #1
}
 800422c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004230 <follow_path>:
{
 8004230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004234:	780b      	ldrb	r3, [r1, #0]
{
 8004236:	b083      	sub	sp, #12
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004238:	2b2f      	cmp	r3, #47	; 0x2f
{
 800423a:	460d      	mov	r5, r1
 800423c:	4607      	mov	r7, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800423e:	d041      	beq.n	80042c4 <follow_path+0x94>
 8004240:	2b5c      	cmp	r3, #92	; 0x5c
 8004242:	d03f      	beq.n	80042c4 <follow_path+0x94>
	dp->sclust = 0;							/* Always start from the root directory */
 8004244:	2400      	movs	r4, #0
 8004246:	60bc      	str	r4, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004248:	7828      	ldrb	r0, [r5, #0]
 800424a:	281f      	cmp	r0, #31
 800424c:	d802      	bhi.n	8004254 <follow_path+0x24>
 800424e:	e03f      	b.n	80042d0 <follow_path+0xa0>
 8004250:	f815 0f01 	ldrb.w	r0, [r5, #1]!
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004254:	282f      	cmp	r0, #47	; 0x2f
 8004256:	d0fb      	beq.n	8004250 <follow_path+0x20>
 8004258:	285c      	cmp	r0, #92	; 0x5c
 800425a:	d0f9      	beq.n	8004250 <follow_path+0x20>
		w = p[si++];					/* Get a character */
 800425c:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800425e:	281f      	cmp	r0, #31
	lfn = dp->lfn;
 8004260:	f8d7 9020 	ldr.w	r9, [r7, #32]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004264:	d92a      	bls.n	80042bc <follow_path+0x8c>
 8004266:	282f      	cmp	r0, #47	; 0x2f
 8004268:	d028      	beq.n	80042bc <follow_path+0x8c>
 800426a:	285c      	cmp	r0, #92	; 0x5c
 800426c:	d026      	beq.n	80042bc <follow_path+0x8c>
 800426e:	f1a9 0602 	sub.w	r6, r9, #2
 8004272:	46b3      	mov	fp, r6
 8004274:	46aa      	mov	sl, r5
		w = p[si++];					/* Get a character */
 8004276:	2401      	movs	r4, #1
 8004278:	e00f      	b.n	800429a <follow_path+0x6a>
		lfn[di++] = w;					/* Store the Unicode character */
 800427a:	f82b 0f02 	strh.w	r0, [fp, #2]!
		w = p[si++];					/* Get a character */
 800427e:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 8004282:	1c63      	adds	r3, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004284:	281f      	cmp	r0, #31
 8004286:	f240 8107 	bls.w	8004498 <follow_path+0x268>
 800428a:	282f      	cmp	r0, #47	; 0x2f
 800428c:	d028      	beq.n	80042e0 <follow_path+0xb0>
 800428e:	285c      	cmp	r0, #92	; 0x5c
 8004290:	d026      	beq.n	80042e0 <follow_path+0xb0>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004296:	d011      	beq.n	80042bc <follow_path+0x8c>
 8004298:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800429a:	2101      	movs	r1, #1
 800429c:	f000 fbf0 	bl	8004a80 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80042a0:	b160      	cbz	r0, 80042bc <follow_path+0x8c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80042a2:	287f      	cmp	r0, #127	; 0x7f
 80042a4:	d8e9      	bhi.n	800427a <follow_path+0x4a>
	while (*str && *str != chr) str++;
 80042a6:	2822      	cmp	r0, #34	; 0x22
 80042a8:	d008      	beq.n	80042bc <follow_path+0x8c>
 80042aa:	232a      	movs	r3, #42	; 0x2a
 80042ac:	4a89      	ldr	r2, [pc, #548]	; (80044d4 <follow_path+0x2a4>)
 80042ae:	e003      	b.n	80042b8 <follow_path+0x88>
 80042b0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0e0      	beq.n	800427a <follow_path+0x4a>
 80042b8:	4298      	cmp	r0, r3
 80042ba:	d1f9      	bne.n	80042b0 <follow_path+0x80>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 80042bc:	2006      	movs	r0, #6
}
 80042be:	b003      	add	sp, #12
 80042c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dp->sclust = 0;							/* Always start from the root directory */
 80042c4:	2400      	movs	r4, #0
		path++;
 80042c6:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 80042c8:	60bc      	str	r4, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80042ca:	7828      	ldrb	r0, [r5, #0]
 80042cc:	281f      	cmp	r0, #31
 80042ce:	d8c1      	bhi.n	8004254 <follow_path+0x24>
		res = dir_sdi(dp, 0);
 80042d0:	4621      	mov	r1, r4
 80042d2:	4638      	mov	r0, r7
 80042d4:	f7ff fab0 	bl	8003838 <dir_sdi>
		dp->dir = 0;
 80042d8:	617c      	str	r4, [r7, #20]
}
 80042da:	b003      	add	sp, #12
 80042dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80042e0:	f04f 0b00 	mov.w	fp, #0
	*path = &p[si];						/* Return pointer to the next segment */
 80042e4:	441d      	add	r5, r3
 80042e6:	eb09 0244 	add.w	r2, r9, r4, lsl #1
		w = lfn[di - 1];
 80042ea:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d001      	beq.n	80042f6 <follow_path+0xc6>
 80042f2:	2b2e      	cmp	r3, #46	; 0x2e
 80042f4:	d102      	bne.n	80042fc <follow_path+0xcc>
	while (di) {						/* Strip trailing spaces and dots */
 80042f6:	3c01      	subs	r4, #1
 80042f8:	d1f7      	bne.n	80042ea <follow_path+0xba>
 80042fa:	e7df      	b.n	80042bc <follow_path+0x8c>
	lfn[di] = 0;						/* LFN is created */
 80042fc:	2200      	movs	r2, #0
		*d++ = (BYTE)val;
 80042fe:	2120      	movs	r1, #32
	mem_set(dp->fn, ' ', 11);
 8004300:	69bb      	ldr	r3, [r7, #24]
	lfn[di] = 0;						/* LFN is created */
 8004302:	f829 2014 	strh.w	r2, [r9, r4, lsl #1]
 8004306:	f103 000b 	add.w	r0, r3, #11
 800430a:	eb09 0244 	add.w	r2, r9, r4, lsl #1
		*d++ = (BYTE)val;
 800430e:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 8004312:	4298      	cmp	r0, r3
 8004314:	d1fb      	bne.n	800430e <follow_path+0xde>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004316:	f04f 0a00 	mov.w	sl, #0
 800431a:	e001      	b.n	8004320 <follow_path+0xf0>
 800431c:	f10a 0a01 	add.w	sl, sl, #1
 8004320:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 8004324:	2820      	cmp	r0, #32
 8004326:	d0f9      	beq.n	800431c <follow_path+0xec>
 8004328:	282e      	cmp	r0, #46	; 0x2e
 800432a:	d0f7      	beq.n	800431c <follow_path+0xec>
	if (si) cf |= NS_LOSS | NS_LFN;
 800432c:	f1ba 0f00 	cmp.w	sl, #0
 8004330:	d001      	beq.n	8004336 <follow_path+0x106>
 8004332:	f04b 0b03 	orr.w	fp, fp, #3
 8004336:	4613      	mov	r3, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004338:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800433c:	2a2e      	cmp	r2, #46	; 0x2e
 800433e:	d001      	beq.n	8004344 <follow_path+0x114>
 8004340:	3c01      	subs	r4, #1
 8004342:	d1f9      	bne.n	8004338 <follow_path+0x108>
		dp->fn[i++] = (BYTE)w;
 8004344:	2300      	movs	r3, #0
 8004346:	f04f 0808 	mov.w	r8, #8
 800434a:	461e      	mov	r6, r3
		w = lfn[si++];					/* Get an LFN character */
 800434c:	f10a 0a01 	add.w	sl, sl, #1
		if (!w) break;					/* Break on end of the LFN */
 8004350:	b340      	cbz	r0, 80043a4 <follow_path+0x174>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004352:	2820      	cmp	r0, #32
 8004354:	d076      	beq.n	8004444 <follow_path+0x214>
 8004356:	282e      	cmp	r0, #46	; 0x2e
 8004358:	d079      	beq.n	800444e <follow_path+0x21e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800435a:	4543      	cmp	r3, r8
 800435c:	d219      	bcs.n	8004392 <follow_path+0x162>
 800435e:	4554      	cmp	r4, sl
 8004360:	d077      	beq.n	8004452 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 8004362:	287f      	cmp	r0, #127	; 0x7f
 8004364:	f200 8082 	bhi.w	800446c <follow_path+0x23c>
	while (*str && *str != chr) str++;
 8004368:	282b      	cmp	r0, #43	; 0x2b
 800436a:	f000 808e 	beq.w	800448a <follow_path+0x25a>
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	4a59      	ldr	r2, [pc, #356]	; (80044d8 <follow_path+0x2a8>)
 8004372:	4281      	cmp	r1, r0
 8004374:	f000 8089 	beq.w	800448a <follow_path+0x25a>
 8004378:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800437c:	2900      	cmp	r1, #0
 800437e:	d1f8      	bne.n	8004372 <follow_path+0x142>
				if (IsUpper(w)) {		/* ASCII large capital */
 8004380:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8004384:	2919      	cmp	r1, #25
 8004386:	f200 808b 	bhi.w	80044a0 <follow_path+0x270>
					b |= 2;
 800438a:	f046 0602 	orr.w	r6, r6, #2
 800438e:	b2c0      	uxtb	r0, r0
 8004390:	e07e      	b.n	8004490 <follow_path+0x260>
			if (ni == 11) {				/* Long extension */
 8004392:	f1b8 0f0b 	cmp.w	r8, #11
 8004396:	f000 8091 	beq.w	80044bc <follow_path+0x28c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800439a:	4554      	cmp	r4, sl
 800439c:	d05c      	beq.n	8004458 <follow_path+0x228>
 800439e:	f04b 0b03 	orr.w	fp, fp, #3
			if (si > di) break;			/* No extension */
 80043a2:	d259      	bcs.n	8004458 <follow_path+0x228>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	7819      	ldrb	r1, [r3, #0]
 80043a8:	29e5      	cmp	r1, #229	; 0xe5
 80043aa:	d102      	bne.n	80043b2 <follow_path+0x182>
 80043ac:	2105      	movs	r1, #5
 80043ae:	7019      	strb	r1, [r3, #0]
 80043b0:	69bb      	ldr	r3, [r7, #24]
	if (ni == 8) b <<= 2;
 80043b2:	f1b8 0f08 	cmp.w	r8, #8
 80043b6:	bf04      	itt	eq
 80043b8:	00b6      	lsleq	r6, r6, #2
 80043ba:	b2f6      	uxtbeq	r6, r6
 80043bc:	f006 020c 	and.w	r2, r6, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 80043c0:	2a0c      	cmp	r2, #12
 80043c2:	d050      	beq.n	8004466 <follow_path+0x236>
 80043c4:	f006 0603 	and.w	r6, r6, #3
 80043c8:	2e03      	cmp	r6, #3
 80043ca:	d04c      	beq.n	8004466 <follow_path+0x236>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80043cc:	f01b 0f02 	tst.w	fp, #2
 80043d0:	d107      	bne.n	80043e2 <follow_path+0x1b2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80043d2:	2e01      	cmp	r6, #1
 80043d4:	bf08      	it	eq
 80043d6:	f04b 0b10 	orreq.w	fp, fp, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80043da:	2a04      	cmp	r2, #4
 80043dc:	bf08      	it	eq
 80043de:	f04b 0b08 	orreq.w	fp, fp, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80043e2:	f883 b00b 	strb.w	fp, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80043e6:	2100      	movs	r1, #0
 80043e8:	4638      	mov	r0, r7
 80043ea:	f7ff fa25 	bl	8003838 <dir_sdi>
	if (res != FR_OK) return res;
 80043ee:	b9f8      	cbnz	r0, 8004430 <follow_path+0x200>
 80043f0:	4638      	mov	r0, r7
 80043f2:	f7ff fca5 	bl	8003d40 <dir_find.part.8>
			ns = dp->fn[NSFLAG];
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80043fa:	b9d8      	cbnz	r0, 8004434 <follow_path+0x204>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80043fc:	0759      	lsls	r1, r3, #29
 80043fe:	f53f af5e 	bmi.w	80042be <follow_path+0x8e>
			dir = dp->dir;						/* Follow the sub-directory */
 8004402:	697b      	ldr	r3, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004404:	7ada      	ldrb	r2, [r3, #11]
 8004406:	06d2      	lsls	r2, r2, #27
 8004408:	d554      	bpl.n	80044b4 <follow_path+0x284>
			dp->sclust = ld_clust(dp->fs, dir);
 800440a:	6839      	ldr	r1, [r7, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 800440c:	7ed8      	ldrb	r0, [r3, #27]
			dp->sclust = ld_clust(dp->fs, dir);
 800440e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 8004412:	7809      	ldrb	r1, [r1, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004414:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 8004416:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004418:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 800441c:	d105      	bne.n	800442a <follow_path+0x1fa>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800441e:	7d59      	ldrb	r1, [r3, #21]
 8004420:	7d1b      	ldrb	r3, [r3, #20]
 8004422:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004426:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
			dp->sclust = ld_clust(dp->fs, dir);
 800442a:	60ba      	str	r2, [r7, #8]
 800442c:	7828      	ldrb	r0, [r5, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800442e:	e711      	b.n	8004254 <follow_path+0x24>
			ns = dp->fn[NSFLAG];
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004434:	2804      	cmp	r0, #4
 8004436:	f47f af42 	bne.w	80042be <follow_path+0x8e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800443a:	f013 0f04 	tst.w	r3, #4
 800443e:	bf08      	it	eq
 8004440:	2005      	moveq	r0, #5
 8004442:	e73c      	b.n	80042be <follow_path+0x8e>
			cf |= NS_LOSS | NS_LFN; continue;
 8004444:	f04b 0b03 	orr.w	fp, fp, #3
 8004448:	f839 001a 	ldrh.w	r0, [r9, sl, lsl #1]
 800444c:	e77e      	b.n	800434c <follow_path+0x11c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800444e:	4554      	cmp	r4, sl
 8004450:	d1f8      	bne.n	8004444 <follow_path+0x214>
			if (ni == 11) {				/* Long extension */
 8004452:	f1b8 0f0b 	cmp.w	r8, #11
 8004456:	d031      	beq.n	80044bc <follow_path+0x28c>
			b <<= 2; continue;
 8004458:	00b6      	lsls	r6, r6, #2
 800445a:	b2f6      	uxtb	r6, r6
 800445c:	46a2      	mov	sl, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800445e:	f04f 080b 	mov.w	r8, #11
 8004462:	2308      	movs	r3, #8
 8004464:	e7f0      	b.n	8004448 <follow_path+0x218>
		cf |= NS_LFN;
 8004466:	f04b 0b02 	orr.w	fp, fp, #2
 800446a:	e7ba      	b.n	80043e2 <follow_path+0x1b2>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800446c:	2100      	movs	r1, #0
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	f000 fb06 	bl	8004a80 <ff_convert>
 8004474:	f04b 0b02 	orr.w	fp, fp, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004478:	9b01      	ldr	r3, [sp, #4]
 800447a:	b130      	cbz	r0, 800448a <follow_path+0x25a>
 800447c:	4a17      	ldr	r2, [pc, #92]	; (80044dc <follow_path+0x2ac>)
 800447e:	4410      	add	r0, r2
 8004480:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004484:	2800      	cmp	r0, #0
 8004486:	f47f af6f 	bne.w	8004368 <follow_path+0x138>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800448a:	205f      	movs	r0, #95	; 0x5f
 800448c:	f04b 0b03 	orr.w	fp, fp, #3
		dp->fn[i++] = (BYTE)w;
 8004490:	69b9      	ldr	r1, [r7, #24]
 8004492:	54c8      	strb	r0, [r1, r3]
 8004494:	3301      	adds	r3, #1
 8004496:	e7d7      	b.n	8004448 <follow_path+0x218>
	*path = &p[si];						/* Return pointer to the next segment */
 8004498:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800449a:	f04f 0b04 	mov.w	fp, #4
 800449e:	e722      	b.n	80042e6 <follow_path+0xb6>
					if (IsLower(w)) {	/* ASCII small capital */
 80044a0:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 80044a4:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 80044a6:	bf97      	itett	ls
 80044a8:	3820      	subls	r0, #32
 80044aa:	b2c0      	uxtbhi	r0, r0
 80044ac:	b2c0      	uxtbls	r0, r0
 80044ae:	f046 0601 	orrls.w	r6, r6, #1
 80044b2:	e7ed      	b.n	8004490 <follow_path+0x260>
				res = FR_NO_PATH; break;
 80044b4:	2005      	movs	r0, #5
}
 80044b6:	b003      	add	sp, #12
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80044bc:	69bb      	ldr	r3, [r7, #24]
				cf |= NS_LOSS | NS_LFN; break;
 80044be:	f04b 0b03 	orr.w	fp, fp, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	2ae5      	cmp	r2, #229	; 0xe5
 80044c6:	f47f af79 	bne.w	80043bc <follow_path+0x18c>
 80044ca:	2205      	movs	r2, #5
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	e774      	b.n	80043bc <follow_path+0x18c>
 80044d2:	bf00      	nop
 80044d4:	0800cc99 	.word	0x0800cc99
 80044d8:	0800cca5 	.word	0x0800cca5
 80044dc:	0800cc08 	.word	0x0800cc08

080044e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80044e0:	b530      	push	{r4, r5, lr}
 80044e2:	b085      	sub	sp, #20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80044e4:	ab04      	add	r3, sp, #16
 80044e6:	f843 1d04 	str.w	r1, [r3, #-4]!
{
 80044ea:	9001      	str	r0, [sp, #4]


	vol = get_ldnumber(&rp);
 80044ec:	4618      	mov	r0, r3
{
 80044ee:	4614      	mov	r4, r2
 80044f0:	9100      	str	r1, [sp, #0]
	vol = get_ldnumber(&rp);
 80044f2:	f7fe fe09 	bl	8003108 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80044f6:	1e02      	subs	r2, r0, #0
 80044f8:	db23      	blt.n	8004542 <f_mount+0x62>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80044fa:	4917      	ldr	r1, [pc, #92]	; (8004558 <f_mount+0x78>)
 80044fc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]

	if (cfs) {
 8004500:	b173      	cbz	r3, 8004520 <f_mount+0x40>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004502:	4816      	ldr	r0, [pc, #88]	; (800455c <f_mount+0x7c>)
 8004504:	6805      	ldr	r5, [r0, #0]
 8004506:	42ab      	cmp	r3, r5
 8004508:	bf04      	itt	eq
 800450a:	2500      	moveq	r5, #0
 800450c:	6005      	streq	r5, [r0, #0]
 800450e:	68c5      	ldr	r5, [r0, #12]
 8004510:	42ab      	cmp	r3, r5
 8004512:	bf04      	itt	eq
 8004514:	2500      	moveq	r5, #0
 8004516:	60c5      	streq	r5, [r0, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004518:	2000      	movs	r0, #0
 800451a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800451e:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 8004520:	9b01      	ldr	r3, [sp, #4]
 8004522:	b14b      	cbz	r3, 8004538 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 8004524:	2000      	movs	r0, #0
 8004526:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800452a:	2c01      	cmp	r4, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800452c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 8004530:	7028      	strb	r0, [r5, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004532:	d009      	beq.n	8004548 <f_mount+0x68>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8004534:	b005      	add	sp, #20
 8004536:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004538:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800453a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 800453e:	b005      	add	sp, #20
 8004540:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8004542:	200b      	movs	r0, #11
}
 8004544:	b005      	add	sp, #20
 8004546:	bd30      	pop	{r4, r5, pc}
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004548:	4602      	mov	r2, r0
 800454a:	4669      	mov	r1, sp
 800454c:	a801      	add	r0, sp, #4
 800454e:	f7fe ff13 	bl	8003378 <find_volume>
}
 8004552:	b005      	add	sp, #20
 8004554:	bd30      	pop	{r4, r5, pc}
 8004556:	bf00      	nop
 8004558:	20000248 	.word	0x20000248
 800455c:	2000024c 	.word	0x2000024c

08004560 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	b090      	sub	sp, #64	; 0x40
 8004566:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004568:	2800      	cmp	r0, #0
 800456a:	d038      	beq.n	80045de <f_open+0x7e>
	fp->fs = 0;			/* Clear file object */
 800456c:	2300      	movs	r3, #0
 800456e:	4604      	mov	r4, r0
 8004570:	6003      	str	r3, [r0, #0]
 8004572:	4615      	mov	r5, r2

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004574:	a806      	add	r0, sp, #24
 8004576:	f002 021e 	and.w	r2, r2, #30
 800457a:	a901      	add	r1, sp, #4
 800457c:	f7fe fefc 	bl	8003378 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004580:	4606      	mov	r6, r0
 8004582:	b118      	cbz	r0, 800458c <f_open+0x2c>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8004584:	4630      	mov	r0, r6
 8004586:	b010      	add	sp, #64	; 0x40
 8004588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		INIT_BUF(dj);
 800458c:	4a72      	ldr	r2, [pc, #456]	; (8004758 <f_open+0x1f8>)
 800458e:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 8004590:	9901      	ldr	r1, [sp, #4]
 8004592:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 8004594:	930c      	str	r3, [sp, #48]	; 0x30
 8004596:	920e      	str	r2, [sp, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8004598:	f7ff fe4a 	bl	8004230 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800459c:	f005 081f 	and.w	r8, r5, #31
		res = follow_path(&dj, path);	/* Follow the file path */
 80045a0:	4603      	mov	r3, r0
 80045a2:	f005 091c 	and.w	r9, r5, #28
		if (res == FR_OK) {
 80045a6:	b9f8      	cbnz	r0, 80045e8 <f_open+0x88>
		dir = dj.dir;
 80045a8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (!dir)	/* Default directory itself */
 80045aa:	b387      	cbz	r7, 800460e <f_open+0xae>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80045ac:	f018 0f1e 	tst.w	r8, #30
 80045b0:	bf14      	ite	ne
 80045b2:	f04f 0a01 	movne.w	sl, #1
 80045b6:	f04f 0a00 	moveq.w	sl, #0
 80045ba:	a806      	add	r0, sp, #24
 80045bc:	4651      	mov	r1, sl
 80045be:	f7fe fd0d 	bl	8002fdc <chk_lock>
 80045c2:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80045c4:	f1b9 0f00 	cmp.w	r9, #0
 80045c8:	f000 80b1 	beq.w	800472e <f_open+0x1ce>
			if (res != FR_OK) {					/* No file, create new */
 80045cc:	b988      	cbnz	r0, 80045f2 <f_open+0x92>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80045ce:	7afb      	ldrb	r3, [r7, #11]
 80045d0:	f013 0f11 	tst.w	r3, #17
 80045d4:	d119      	bne.n	800460a <f_open+0xaa>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80045d6:	0768      	lsls	r0, r5, #29
 80045d8:	d51b      	bpl.n	8004612 <f_open+0xb2>
						res = FR_EXIST;
 80045da:	2608      	movs	r6, #8
 80045dc:	e7d2      	b.n	8004584 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 80045de:	2609      	movs	r6, #9
}
 80045e0:	4630      	mov	r0, r6
 80045e2:	b010      	add	sp, #64	; 0x40
 80045e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80045e8:	f1b9 0f00 	cmp.w	r9, #0
 80045ec:	d101      	bne.n	80045f2 <f_open+0x92>
 80045ee:	4606      	mov	r6, r0
 80045f0:	e7c8      	b.n	8004584 <f_open+0x24>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	f040 80ad 	bne.w	8004752 <f_open+0x1f2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80045f8:	4b58      	ldr	r3, [pc, #352]	; (800475c <f_open+0x1fc>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	d03c      	beq.n	800467a <f_open+0x11a>
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d039      	beq.n	800467a <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004606:	2612      	movs	r6, #18
 8004608:	e7bc      	b.n	8004584 <f_open+0x24>
					res = FR_DENIED;
 800460a:	2607      	movs	r6, #7
 800460c:	e7ba      	b.n	8004584 <f_open+0x24>
				res = FR_INVALID_NAME;
 800460e:	2606      	movs	r6, #6
 8004610:	e7b8      	b.n	8004584 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004612:	0729      	lsls	r1, r5, #28
 8004614:	d439      	bmi.n	800468a <f_open+0x12a>
 8004616:	9b06      	ldr	r3, [sp, #24]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004618:	f241 022c 	movw	r2, #4140	; 0x102c
 800461c:	589b      	ldr	r3, [r3, r2]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800461e:	4651      	mov	r1, sl
 8004620:	a806      	add	r0, sp, #24
			fp->dir_ptr = dir;
 8004622:	e9c4 3707 	strd	r3, r7, [r4, #28]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004626:	f7fe fd1b 	bl	8003060 <inc_lock>
 800462a:	62a0      	str	r0, [r4, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800462c:	b318      	cbz	r0, 8004676 <f_open+0x116>
			fp->err = 0;						/* Clear error flag */
 800462e:	2300      	movs	r3, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004630:	9a06      	ldr	r2, [sp, #24]
			fp->flag = mode;					/* File access mode */
 8004632:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
 8004636:	71e3      	strb	r3, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004638:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 800463c:	7809      	ldrb	r1, [r1, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 800463e:	7ef8      	ldrb	r0, [r7, #27]
 8004640:	7ebb      	ldrb	r3, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 8004642:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004644:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8004648:	d105      	bne.n	8004656 <f_open+0xf6>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800464a:	7d78      	ldrb	r0, [r7, #21]
 800464c:	7d39      	ldrb	r1, [r7, #20]
 800464e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004652:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			fp->id = fp->fs->id;
 8004656:	f241 0506 	movw	r5, #4102	; 0x1006
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800465a:	6123      	str	r3, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800465c:	69f8      	ldr	r0, [r7, #28]
			fp->id = fp->fs->id;
 800465e:	5b53      	ldrh	r3, [r2, r5]
			fp->fptr = 0;						/* File pointer */
 8004660:	2100      	movs	r1, #0
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8004662:	60e0      	str	r0, [r4, #12]
}
 8004664:	4630      	mov	r0, r6
			fp->fs = dj.fs;	 					/* Validate file object */
 8004666:	6022      	str	r2, [r4, #0]
			fp->id = fp->fs->id;
 8004668:	80a3      	strh	r3, [r4, #4]
			fp->fptr = 0;						/* File pointer */
 800466a:	60a1      	str	r1, [r4, #8]
			fp->dsect = 0;
 800466c:	61a1      	str	r1, [r4, #24]
			fp->cltbl = 0;						/* Normal seek mode */
 800466e:	6261      	str	r1, [r4, #36]	; 0x24
}
 8004670:	b010      	add	sp, #64	; 0x40
 8004672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		res = FR_INT_ERR;
 8004676:	2602      	movs	r6, #2
 8004678:	e784      	b.n	8004584 <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800467a:	a806      	add	r0, sp, #24
 800467c:	f7ff fc10 	bl	8003ea0 <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004680:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 8004684:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004686:	2800      	cmp	r0, #0
 8004688:	d1b1      	bne.n	80045ee <f_open+0x8e>
				dw = GET_FATTIME();				/* Created time */
 800468a:	f7fe f89d 	bl	80027c8 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800468e:	2200      	movs	r2, #0
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8004690:	9b06      	ldr	r3, [sp, #24]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004692:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8004696:	0c01      	lsrs	r1, r0, #16
 8004698:	73b8      	strb	r0, [r7, #14]
 800469a:	0e00      	lsrs	r0, r0, #24
 800469c:	73fd      	strb	r5, [r7, #15]
 800469e:	7439      	strb	r1, [r7, #16]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80046a0:	72fa      	strb	r2, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80046a2:	773a      	strb	r2, [r7, #28]
 80046a4:	777a      	strb	r2, [r7, #29]
 80046a6:	77ba      	strb	r2, [r7, #30]
 80046a8:	77fa      	strb	r2, [r7, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80046aa:	7478      	strb	r0, [r7, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80046ac:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 80046b0:	7812      	ldrb	r2, [r2, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 80046b2:	7ef9      	ldrb	r1, [r7, #27]
 80046b4:	7ebd      	ldrb	r5, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 80046b6:	2a03      	cmp	r2, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80046b8:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 80046bc:	d105      	bne.n	80046ca <f_open+0x16a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80046be:	7d79      	ldrb	r1, [r7, #21]
 80046c0:	7d3a      	ldrb	r2, [r7, #20]
 80046c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046c6:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 80046ca:	2200      	movs	r2, #0
				dj.fs->wflag = 1;
 80046cc:	f241 0104 	movw	r1, #4100	; 0x1004
 80046d0:	2001      	movs	r0, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 80046d2:	76ba      	strb	r2, [r7, #26]
 80046d4:	76fa      	strb	r2, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80046d6:	753a      	strb	r2, [r7, #20]
 80046d8:	757a      	strb	r2, [r7, #21]
				dj.fs->wflag = 1;
 80046da:	5458      	strb	r0, [r3, r1]
				if (cl) {						/* Remove the cluster chain if exist */
 80046dc:	b315      	cbz	r5, 8004724 <f_open+0x1c4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80046de:	4285      	cmp	r5, r0
 80046e0:	d0c9      	beq.n	8004676 <f_open+0x116>
 80046e2:	f241 0214 	movw	r2, #4116	; 0x1014
 80046e6:	589a      	ldr	r2, [r3, r2]
 80046e8:	4295      	cmp	r5, r2
 80046ea:	d2c4      	bcs.n	8004676 <f_open+0x116>
					dw = dj.fs->winsect;
 80046ec:	f241 092c 	movw	r9, #4140	; 0x102c
 80046f0:	4618      	mov	r0, r3
 80046f2:	4629      	mov	r1, r5
 80046f4:	f853 a009 	ldr.w	sl, [r3, r9]
 80046f8:	f7ff fd5e 	bl	80041b8 <remove_chain.part.9>
					if (res == FR_OK) {
 80046fc:	2800      	cmp	r0, #0
 80046fe:	f47f af76 	bne.w	80045ee <f_open+0x8e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004702:	f241 010c 	movw	r1, #4108	; 0x100c
 8004706:	9b06      	ldr	r3, [sp, #24]
 8004708:	3d01      	subs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 800470a:	f853 2009 	ldr.w	r2, [r3, r9]
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800470e:	505d      	str	r5, [r3, r1]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004710:	4592      	cmp	sl, r2
 8004712:	d007      	beq.n	8004724 <f_open+0x1c4>
 8004714:	4651      	mov	r1, sl
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fdde 	bl	80032d8 <move_window.part.3>
		if (res == FR_OK) {
 800471c:	2800      	cmp	r0, #0
 800471e:	f47f af66 	bne.w	80045ee <f_open+0x8e>
 8004722:	9b06      	ldr	r3, [sp, #24]
				mode |= FA__WRITTEN;
 8004724:	f04f 0a01 	mov.w	sl, #1
 8004728:	f048 0820 	orr.w	r8, r8, #32
 800472c:	e774      	b.n	8004618 <f_open+0xb8>
			if (res == FR_OK) {					/* Follow succeeded */
 800472e:	2800      	cmp	r0, #0
 8004730:	f47f af5d 	bne.w	80045ee <f_open+0x8e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004734:	7afb      	ldrb	r3, [r7, #11]
 8004736:	06da      	lsls	r2, r3, #27
 8004738:	d409      	bmi.n	800474e <f_open+0x1ee>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800473a:	07a8      	lsls	r0, r5, #30
 800473c:	d502      	bpl.n	8004744 <f_open+0x1e4>
 800473e:	07d9      	lsls	r1, r3, #31
 8004740:	f53f af63 	bmi.w	800460a <f_open+0xaa>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004744:	072a      	lsls	r2, r5, #28
 8004746:	9b06      	ldr	r3, [sp, #24]
 8004748:	f57f af66 	bpl.w	8004618 <f_open+0xb8>
 800474c:	e7ea      	b.n	8004724 <f_open+0x1c4>
					res = FR_NO_FILE;
 800474e:	2604      	movs	r6, #4
 8004750:	e718      	b.n	8004584 <f_open+0x24>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8004752:	461e      	mov	r6, r3
 8004754:	e716      	b.n	8004584 <f_open+0x24>
 8004756:	bf00      	nop
 8004758:	20000268 	.word	0x20000268
 800475c:	2000024c 	.word	0x2000024c

08004760 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8004766:	2300      	movs	r3, #0
{
 8004768:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 800476a:	f8c9 3000 	str.w	r3, [r9]
{
 800476e:	468a      	mov	sl, r1
 8004770:	4614      	mov	r4, r2
 8004772:	4606      	mov	r6, r0

	res = validate(fp);							/* Check validity */
 8004774:	f7fe fcee 	bl	8003154 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004778:	4680      	mov	r8, r0
 800477a:	2800      	cmp	r0, #0
 800477c:	d149      	bne.n	8004812 <f_read+0xb2>
	if (fp->err)								/* Check error */
 800477e:	79f3      	ldrb	r3, [r6, #7]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d14a      	bne.n	800481a <f_read+0xba>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004784:	79b3      	ldrb	r3, [r6, #6]
 8004786:	07d9      	lsls	r1, r3, #31
 8004788:	f140 80ab 	bpl.w	80048e2 <f_read+0x182>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800478c:	e9d6 2702 	ldrd	r2, r7, [r6, #8]
 8004790:	1abf      	subs	r7, r7, r2
 8004792:	42a7      	cmp	r7, r4
 8004794:	bf28      	it	cs
 8004796:	4627      	movcs	r7, r4
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8004798:	2f00      	cmp	r7, #0
 800479a:	d03a      	beq.n	8004812 <f_read+0xb2>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800479c:	f241 0b0a 	movw	fp, #4106	; 0x100a
 80047a0:	6830      	ldr	r0, [r6, #0]
 80047a2:	f830 c00b 	ldrh.w	ip, [r0, fp]
 80047a6:	fbb2 f1fc 	udiv	r1, r2, ip
 80047aa:	fb0c 2311 	mls	r3, ip, r1, r2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d038      	beq.n	8004824 <f_read+0xc4>
 80047b2:	69b4      	ldr	r4, [r6, #24]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80047b4:	f241 012c 	movw	r1, #4140	; 0x102c
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80047b8:	ebac 0503 	sub.w	r5, ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 80047bc:	5841      	ldr	r1, [r0, r1]
 80047be:	42bd      	cmp	r5, r7
 80047c0:	bf28      	it	cs
 80047c2:	463d      	movcs	r5, r7
 80047c4:	42a1      	cmp	r1, r4
 80047c6:	d00c      	beq.n	80047e2 <f_read+0x82>
 80047c8:	4621      	mov	r1, r4
 80047ca:	f7fe fd85 	bl	80032d8 <move_window.part.3>
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 80047ce:	2800      	cmp	r0, #0
 80047d0:	d156      	bne.n	8004880 <f_read+0x120>
 80047d2:	6830      	ldr	r0, [r6, #0]
 80047d4:	68b2      	ldr	r2, [r6, #8]
 80047d6:	f830 300b 	ldrh.w	r3, [r0, fp]
 80047da:	fbb2 f1f3 	udiv	r1, r2, r3
 80047de:	fb03 2311 	mls	r3, r3, r1, r2
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80047e2:	4403      	add	r3, r0
	while (cnt--)
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	d07a      	beq.n	80048de <f_read+0x17e>
 80047e8:	f10a 32ff 	add.w	r2, sl, #4294967295
 80047ec:	1958      	adds	r0, r3, r5
		*d++ = *s++;
 80047ee:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 80047f2:	4283      	cmp	r3, r0
		*d++ = *s++;
 80047f4:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 80047f8:	d1f9      	bne.n	80047ee <f_read+0x8e>
 80047fa:	68b2      	ldr	r2, [r6, #8]
 80047fc:	44aa      	add	sl, r5
 80047fe:	1b7f      	subs	r7, r7, r5
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8004800:	f8d9 3000 	ldr.w	r3, [r9]
 8004804:	442a      	add	r2, r5
 8004806:	441d      	add	r5, r3
 8004808:	60b2      	str	r2, [r6, #8]
 800480a:	f8c9 5000 	str.w	r5, [r9]
	for ( ;  btr;								/* Repeat until all data read */
 800480e:	2f00      	cmp	r7, #0
 8004810:	d1c6      	bne.n	80047a0 <f_read+0x40>
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 8004812:	4640      	mov	r0, r8
 8004814:	b003      	add	sp, #12
 8004816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481a:	4698      	mov	r8, r3
 800481c:	4640      	mov	r0, r8
 800481e:	b003      	add	sp, #12
 8004820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004824:	f241 0302 	movw	r3, #4098	; 0x1002
 8004828:	5cc4      	ldrb	r4, [r0, r3]
 800482a:	1e63      	subs	r3, r4, #1
 800482c:	400b      	ands	r3, r1
			if (!csect) {						/* On the cluster boundary? */
 800482e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8004832:	d02d      	beq.n	8004890 <f_read+0x130>
 8004834:	6974      	ldr	r4, [r6, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004836:	f241 0214 	movw	r2, #4116	; 0x1014
 800483a:	5882      	ldr	r2, [r0, r2]
	clst -= 2;
 800483c:	3c02      	subs	r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800483e:	3a02      	subs	r2, #2
 8004840:	4294      	cmp	r4, r2
 8004842:	d247      	bcs.n	80048d4 <f_read+0x174>
	return clst * fs->csize + fs->database;
 8004844:	f241 0128 	movw	r1, #4136	; 0x1028
 8004848:	f241 0202 	movw	r2, #4098	; 0x1002
 800484c:	5841      	ldr	r1, [r0, r1]
 800484e:	5c82      	ldrb	r2, [r0, r2]
 8004850:	fb02 1404 	mla	r4, r2, r4, r1
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004854:	2c00      	cmp	r4, #0
 8004856:	d03d      	beq.n	80048d4 <f_read+0x174>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004858:	f830 c00b 	ldrh.w	ip, [r0, fp]
			sect += csect;
 800485c:	441c      	add	r4, r3
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800485e:	fbb7 f5fc 	udiv	r5, r7, ip
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004862:	b1f5      	cbz	r5, 80048a2 <f_read+0x142>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004864:	1959      	adds	r1, r3, r5
 8004866:	428a      	cmp	r2, r1
					cc = fp->fs->csize - csect;
 8004868:	bf38      	it	cc
 800486a:	1ad5      	subcc	r5, r2, r3
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800486c:	f241 0201 	movw	r2, #4097	; 0x1001
 8004870:	462b      	mov	r3, r5
 8004872:	5c80      	ldrb	r0, [r0, r2]
 8004874:	4651      	mov	r1, sl
 8004876:	4622      	mov	r2, r4
 8004878:	f7fe fb86 	bl	8002f88 <disk_read>
 800487c:	2800      	cmp	r0, #0
 800487e:	d033      	beq.n	80048e8 <f_read+0x188>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004880:	f04f 0801 	mov.w	r8, #1
}
 8004884:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004886:	f886 8007 	strb.w	r8, [r6, #7]
}
 800488a:	b003      	add	sp, #12
 800488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004890:	b972      	cbnz	r2, 80048b0 <f_read+0x150>
					clst = fp->sclust;			/* Follow from the origin */
 8004892:	6934      	ldr	r4, [r6, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004894:	2c01      	cmp	r4, #1
 8004896:	d91d      	bls.n	80048d4 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004898:	1c62      	adds	r2, r4, #1
 800489a:	d0f1      	beq.n	8004880 <f_read+0x120>
 800489c:	6830      	ldr	r0, [r6, #0]
				fp->clust = clst;				/* Update current cluster */
 800489e:	6174      	str	r4, [r6, #20]
 80048a0:	e7c9      	b.n	8004836 <f_read+0xd6>
 80048a2:	68b2      	ldr	r2, [r6, #8]
			fp->dsect = sect;
 80048a4:	61b4      	str	r4, [r6, #24]
 80048a6:	fbb2 f3fc 	udiv	r3, r2, ip
 80048aa:	fb0c 2313 	mls	r3, ip, r3, r2
 80048ae:	e781      	b.n	80047b4 <f_read+0x54>
					if (fp->cltbl)
 80048b0:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	d03b      	beq.n	800492e <f_read+0x1ce>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048b6:	686a      	ldr	r2, [r5, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80048b8:	fbb1 f1f4 	udiv	r1, r1, r4
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80048bc:	1d28      	adds	r0, r5, #4
		if (!ncl) return 0;		/* End of table? (error) */
 80048be:	b14a      	cbz	r2, 80048d4 <f_read+0x174>
		if (cl < ncl) break;	/* In this fragment? */
 80048c0:	4291      	cmp	r1, r2
 80048c2:	d202      	bcs.n	80048ca <f_read+0x16a>
 80048c4:	e041      	b.n	800494a <f_read+0x1ea>
 80048c6:	428a      	cmp	r2, r1
 80048c8:	d83f      	bhi.n	800494a <f_read+0x1ea>
		cl -= ncl; tbl++;		/* Next fragment */
 80048ca:	1a89      	subs	r1, r1, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048cc:	f850 2f08 	ldr.w	r2, [r0, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 80048d0:	2a00      	cmp	r2, #0
 80048d2:	d1f8      	bne.n	80048c6 <f_read+0x166>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80048d4:	f04f 0802 	mov.w	r8, #2
 80048d8:	f886 8007 	strb.w	r8, [r6, #7]
 80048dc:	e799      	b.n	8004812 <f_read+0xb2>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80048de:	60b2      	str	r2, [r6, #8]
 80048e0:	e75f      	b.n	80047a2 <f_read+0x42>
		LEAVE_FF(fp->fs, FR_DENIED);
 80048e2:	f04f 0807 	mov.w	r8, #7
 80048e6:	e794      	b.n	8004812 <f_read+0xb2>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 80048e8:	f241 0304 	movw	r3, #4100	; 0x1004
 80048ec:	6830      	ldr	r0, [r6, #0]
 80048ee:	5cc3      	ldrb	r3, [r0, r3]
 80048f0:	f830 200b 	ldrh.w	r2, [r0, fp]
 80048f4:	b1ab      	cbz	r3, 8004922 <f_read+0x1c2>
 80048f6:	f241 032c 	movw	r3, #4140	; 0x102c
 80048fa:	58c3      	ldr	r3, [r0, r3]
 80048fc:	1b1c      	subs	r4, r3, r4
 80048fe:	42a5      	cmp	r5, r4
 8004900:	d90f      	bls.n	8004922 <f_read+0x1c2>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 8004902:	fb02 f404 	mul.w	r4, r2, r4
	while (cnt--)
 8004906:	b162      	cbz	r2, 8004922 <f_read+0x1c2>
 8004908:	3c01      	subs	r4, #1
 800490a:	eb0a 0304 	add.w	r3, sl, r4
 800490e:	4402      	add	r2, r0
		*d++ = *s++;
 8004910:	f810 1b01 	ldrb.w	r1, [r0], #1
	while (cnt--)
 8004914:	4290      	cmp	r0, r2
		*d++ = *s++;
 8004916:	f803 1f01 	strb.w	r1, [r3, #1]!
	while (cnt--)
 800491a:	d1f9      	bne.n	8004910 <f_read+0x1b0>
 800491c:	6830      	ldr	r0, [r6, #0]
 800491e:	f830 200b 	ldrh.w	r2, [r0, fp]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004922:	fb02 f505 	mul.w	r5, r2, r5
 8004926:	68b2      	ldr	r2, [r6, #8]
 8004928:	44aa      	add	sl, r5
 800492a:	1b7f      	subs	r7, r7, r5
 800492c:	e768      	b.n	8004800 <f_read+0xa0>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 800492e:	6971      	ldr	r1, [r6, #20]
 8004930:	9301      	str	r3, [sp, #4]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004932:	2901      	cmp	r1, #1
 8004934:	d9ce      	bls.n	80048d4 <f_read+0x174>
 8004936:	f241 0214 	movw	r2, #4116	; 0x1014
 800493a:	5882      	ldr	r2, [r0, r2]
 800493c:	4291      	cmp	r1, r2
 800493e:	d2c9      	bcs.n	80048d4 <f_read+0x174>
 8004940:	f7fe fee0 	bl	8003704 <get_fat.part.6>
 8004944:	9b01      	ldr	r3, [sp, #4]
 8004946:	4604      	mov	r4, r0
 8004948:	e7a4      	b.n	8004894 <f_read+0x134>
	return cl + *tbl;	/* Return the cluster number */
 800494a:	6844      	ldr	r4, [r0, #4]
 800494c:	440c      	add	r4, r1
 800494e:	e7a1      	b.n	8004894 <f_read+0x134>

08004950 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8004954:	f7fe fbfe 	bl	8003154 <validate>
	if (res == FR_OK) {
 8004958:	2800      	cmp	r0, #0
 800495a:	d13e      	bne.n	80049da <f_sync+0x8a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800495c:	79a3      	ldrb	r3, [r4, #6]
 800495e:	069b      	lsls	r3, r3, #26
 8004960:	d53b      	bpl.n	80049da <f_sync+0x8a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004962:	f241 032c 	movw	r3, #4140	; 0x102c
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8004966:	6820      	ldr	r0, [r4, #0]
 8004968:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800496a:	58c3      	ldr	r3, [r0, r3]
 800496c:	4299      	cmp	r1, r3
 800496e:	d002      	beq.n	8004976 <f_sync+0x26>
 8004970:	f7fe fcb2 	bl	80032d8 <move_window.part.3>
			if (res == FR_OK) {
 8004974:	bb88      	cbnz	r0, 80049da <f_sync+0x8a>
				dir = fp->dir_ptr;
 8004976:	6a25      	ldr	r5, [r4, #32]
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir + DIR_WrtTime, tm);
				ST_WORD(dir + DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
 8004978:	2601      	movs	r6, #1
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800497a:	7aeb      	ldrb	r3, [r5, #11]
 800497c:	f043 0320 	orr.w	r3, r3, #32
 8004980:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8004982:	68e3      	ldr	r3, [r4, #12]
 8004984:	772b      	strb	r3, [r5, #28]
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	0a1b      	lsrs	r3, r3, #8
 800498a:	776b      	strb	r3, [r5, #29]
 800498c:	89e3      	ldrh	r3, [r4, #14]
 800498e:	77ab      	strb	r3, [r5, #30]
 8004990:	7be3      	ldrb	r3, [r4, #15]
 8004992:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8004994:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004996:	0c1a      	lsrs	r2, r3, #16
 8004998:	0a11      	lsrs	r1, r2, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 800499a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800499e:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80049a0:	752a      	strb	r2, [r5, #20]
 80049a2:	7569      	strb	r1, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80049a4:	76e8      	strb	r0, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 80049a6:	f7fd ff0f 	bl	80027c8 <get_fattime>
				ST_WORD(dir + DIR_LstAccDate, 0);
 80049aa:	2300      	movs	r3, #0
				fp->fs->wflag = 1;
 80049ac:	f241 0104 	movw	r1, #4100	; 0x1004
				ST_DWORD(dir + DIR_WrtTime, tm);
 80049b0:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80049b4:	75a8      	strb	r0, [r5, #22]
 80049b6:	75ea      	strb	r2, [r5, #23]
 80049b8:	0c02      	lsrs	r2, r0, #16
 80049ba:	0e00      	lsrs	r0, r0, #24
 80049bc:	7668      	strb	r0, [r5, #25]
 80049be:	762a      	strb	r2, [r5, #24]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80049c0:	74ab      	strb	r3, [r5, #18]
 80049c2:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 80049c4:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
 80049c6:	6822      	ldr	r2, [r4, #0]
				fp->flag &= ~FA__WRITTEN;
 80049c8:	f023 0320 	bic.w	r3, r3, #32
 80049cc:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
 80049ce:	5456      	strb	r6, [r2, r1]
				res = sync_fs(fp->fs);
 80049d0:	4610      	mov	r0, r2
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80049d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80049d6:	f7fe bc11 	b.w	80031fc <sync_fs>
}
 80049da:	bd70      	pop	{r4, r5, r6, pc}

080049dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80049e0:	f7ff ffb6 	bl	8004950 <f_sync>
	if (res == FR_OK)
 80049e4:	b100      	cbz	r0, 80049e8 <f_close+0xc>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
		res = validate(fp);				/* Lock volume */
 80049e8:	4620      	mov	r0, r4
 80049ea:	f7fe fbb3 	bl	8003154 <validate>
		if (res == FR_OK) {
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d1f9      	bne.n	80049e6 <f_close+0xa>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80049f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80049f4:	3b01      	subs	r3, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d810      	bhi.n	8004a1c <f_close+0x40>
		n = Files[i].ctr;
 80049fa:	005a      	lsls	r2, r3, #1
 80049fc:	4e0c      	ldr	r6, [pc, #48]	; (8004a30 <f_close+0x54>)
 80049fe:	18d1      	adds	r1, r2, r3
 8004a00:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8004a04:	894d      	ldrh	r5, [r1, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004a06:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004a0a:	d00f      	beq.n	8004a2c <f_close+0x50>
		if (n) n--;					/* Decrement read mode open count */
 8004a0c:	b945      	cbnz	r5, 8004a20 <f_close+0x44>
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	50f1      	str	r1, [r6, r3]
				fp->fs = 0;				/* Invalidate file object */
 8004a16:	2300      	movs	r3, #0
 8004a18:	6023      	str	r3, [r4, #0]
}
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004a1c:	2002      	movs	r0, #2
}
 8004a1e:	bd70      	pop	{r4, r5, r6, pc}
		if (n) n--;					/* Decrement read mode open count */
 8004a20:	3d01      	subs	r5, #1
 8004a22:	b2ad      	uxth	r5, r5
		Files[i].ctr = n;
 8004a24:	814d      	strh	r5, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	d1f5      	bne.n	8004a16 <f_close+0x3a>
 8004a2a:	e7f0      	b.n	8004a0e <f_close+0x32>
		Files[i].ctr = n;
 8004a2c:	8148      	strh	r0, [r1, #10]
 8004a2e:	e7ee      	b.n	8004a0e <f_close+0x32>
 8004a30:	2000024c 	.word	0x2000024c

08004a34 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8004a34:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <FATFS_LinkDriver+0x48>)
 8004a36:	7a5a      	ldrb	r2, [r3, #9]
 8004a38:	2a01      	cmp	r2, #1
 8004a3a:	d901      	bls.n	8004a40 <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 8004a3c:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8004a3e:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 8004a40:	2200      	movs	r2, #0
{
 8004a42:	b4f0      	push	{r4, r5, r6, r7}
    path[1] = ':';
 8004a44:	263a      	movs	r6, #58	; 0x3a
    path[2] = '/';
 8004a46:	252f      	movs	r5, #47	; 0x2f
    disk.is_initialized[disk.nbr] = 0;
 8004a48:	f893 c009 	ldrb.w	ip, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8004a4c:	7a5f      	ldrb	r7, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8004a4e:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8004a50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004a54:	6078      	str	r0, [r7, #4]
    DiskNum = disk.nbr++;
 8004a56:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8004a58:	441c      	add	r4, r3
    DiskNum = disk.nbr++;
 8004a5a:	b2c0      	uxtb	r0, r0
    disk.lun[disk.nbr] = lun;  
 8004a5c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8004a5e:	1c44      	adds	r4, r0, #1
 8004a60:	b2e4      	uxtb	r4, r4
    disk.is_initialized[disk.nbr] = 0;
 8004a62:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 8004a66:	725c      	strb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 8004a68:	f803 200c 	strb.w	r2, [r3, ip]
    path[0] = DiskNum + '0';
 8004a6c:	3030      	adds	r0, #48	; 0x30
 8004a6e:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 8004a70:	704e      	strb	r6, [r1, #1]
    path[3] = 0;
 8004a72:	4610      	mov	r0, r2
    path[2] = '/';
 8004a74:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 8004a76:	70ca      	strb	r2, [r1, #3]
}
 8004a78:	bcf0      	pop	{r4, r5, r6, r7}
 8004a7a:	4770      	bx	lr
 8004a7c:	20000468 	.word	0x20000468

08004a80 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8004a80:	287f      	cmp	r0, #127	; 0x7f
 8004a82:	d919      	bls.n	8004ab8 <ff_convert+0x38>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8004a84:	b989      	cbnz	r1, 8004aaa <ff_convert+0x2a>
{
 8004a86:	b410      	push	{r4}
 8004a88:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <ff_convert+0x44>)
		if (dir) {		/* OEMCP to Unicode */
 8004a8a:	23c7      	movs	r3, #199	; 0xc7
 8004a8c:	e003      	b.n	8004a96 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8004a8e:	2980      	cmp	r1, #128	; 0x80
 8004a90:	d015      	beq.n	8004abe <ff_convert+0x3e>
 8004a92:	f832 3f02 	ldrh.w	r3, [r2, #2]!
				if (chr == Tbl[c]) break;
 8004a96:	4298      	cmp	r0, r3
 8004a98:	b28c      	uxth	r4, r1
 8004a9a:	f101 0101 	add.w	r1, r1, #1
 8004a9e:	d1f6      	bne.n	8004a8e <ff_convert+0xe>
 8004aa0:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8004aa4:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8004aa6:	bc10      	pop	{r4}
 8004aa8:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004aaa:	28ff      	cmp	r0, #255	; 0xff
 8004aac:	d805      	bhi.n	8004aba <ff_convert+0x3a>
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <ff_convert+0x44>)
 8004ab0:	3880      	subs	r0, #128	; 0x80
 8004ab2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8004ab6:	4770      	bx	lr
}
 8004ab8:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004aba:	2000      	movs	r0, #0
 8004abc:	4770      	bx	lr
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e7f1      	b.n	8004aa6 <ff_convert+0x26>
 8004ac2:	bf00      	nop
 8004ac4:	0800ccac 	.word	0x0800ccac

08004ac8 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004ac8:	2861      	cmp	r0, #97	; 0x61
 8004aca:	d00e      	beq.n	8004aea <ff_wtoupper+0x22>
 8004acc:	2201      	movs	r2, #1
 8004ace:	2362      	movs	r3, #98	; 0x62
 8004ad0:	4907      	ldr	r1, [pc, #28]	; (8004af0 <ff_wtoupper+0x28>)
 8004ad2:	4283      	cmp	r3, r0
 8004ad4:	d005      	beq.n	8004ae2 <ff_wtoupper+0x1a>
 8004ad6:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8004ada:	3201      	adds	r2, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f8      	bne.n	8004ad2 <ff_wtoupper+0xa>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
 8004ae0:	4770      	bx	lr
 8004ae2:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <ff_wtoupper+0x2c>)
 8004ae4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8004ae8:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004aea:	2041      	movs	r0, #65	; 0x41
	return tbl_lower[i] ? tbl_upper[i] : chr;
 8004aec:	e7f8      	b.n	8004ae0 <ff_wtoupper+0x18>
 8004aee:	bf00      	nop
 8004af0:	0800cdae 	.word	0x0800cdae
 8004af4:	0800cf8c 	.word	0x0800cf8c

08004af8 <__libc_init_array>:
 8004af8:	b570      	push	{r4, r5, r6, lr}
 8004afa:	2500      	movs	r5, #0
 8004afc:	4e0c      	ldr	r6, [pc, #48]	; (8004b30 <__libc_init_array+0x38>)
 8004afe:	4c0d      	ldr	r4, [pc, #52]	; (8004b34 <__libc_init_array+0x3c>)
 8004b00:	1ba4      	subs	r4, r4, r6
 8004b02:	10a4      	asrs	r4, r4, #2
 8004b04:	42a5      	cmp	r5, r4
 8004b06:	d109      	bne.n	8004b1c <__libc_init_array+0x24>
 8004b08:	f000 f81a 	bl	8004b40 <_init>
 8004b0c:	2500      	movs	r5, #0
 8004b0e:	4e0a      	ldr	r6, [pc, #40]	; (8004b38 <__libc_init_array+0x40>)
 8004b10:	4c0a      	ldr	r4, [pc, #40]	; (8004b3c <__libc_init_array+0x44>)
 8004b12:	1ba4      	subs	r4, r4, r6
 8004b14:	10a4      	asrs	r4, r4, #2
 8004b16:	42a5      	cmp	r5, r4
 8004b18:	d105      	bne.n	8004b26 <__libc_init_array+0x2e>
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}
 8004b1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b20:	4798      	blx	r3
 8004b22:	3501      	adds	r5, #1
 8004b24:	e7ee      	b.n	8004b04 <__libc_init_array+0xc>
 8004b26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b2a:	4798      	blx	r3
 8004b2c:	3501      	adds	r5, #1
 8004b2e:	e7f2      	b.n	8004b16 <__libc_init_array+0x1e>
 8004b30:	0800d16c 	.word	0x0800d16c
 8004b34:	0800d16c 	.word	0x0800d16c
 8004b38:	0800d16c 	.word	0x0800d16c
 8004b3c:	0800d170 	.word	0x0800d170

08004b40 <_init>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr

08004b4c <_fini>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr
