
C21_Music_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008428  08008428  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08008428  08008428  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008428  08008428  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08008430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002838  20000020  08008450  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002858  08008450  00022858  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001350b  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ce1  00000000  00000000  00033554  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b0  00000000  00000000  00036238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  000375e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c32  00000000  00000000  00038820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa5c  00000000  00000000  0004e452  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077331  00000000  00000000  0005deae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d51df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005394  00000000  00000000  000d525c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	08007e38 	.word	0x08007e38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	08007e38 	.word	0x08007e38

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2uiz>:
 80008e8:	004a      	lsls	r2, r1, #1
 80008ea:	d211      	bcs.n	8000910 <__aeabi_d2uiz+0x28>
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d211      	bcs.n	8000916 <__aeabi_d2uiz+0x2e>
 80008f2:	d50d      	bpl.n	8000910 <__aeabi_d2uiz+0x28>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d40e      	bmi.n	800091c <__aeabi_d2uiz+0x34>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091a:	d102      	bne.n	8000922 <__aeabi_d2uiz+0x3a>
 800091c:	f04f 30ff 	mov.w	r0, #4294967295
 8000920:	4770      	bx	lr
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	4770      	bx	lr

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b09f      	sub	sp, #124	; 0x7c
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f000 fe73 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f8ed 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 faf1 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 800093a:	f000 fac1 	bl	8000ec0 <MX_DMA_Init>
  MX_SPI1_Init();
 800093e:	f000 f941 	bl	8000bc4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000942:	f003 fc53 	bl	80041ec <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000946:	f000 fa6f 	bl	8000e28 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800094a:	f000 f971 	bl	8000c30 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 800094e:	f000 fa95 	bl	8000e7c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000952:	f000 f9f3 	bl	8000d3c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000956:	f000 f9a1 	bl	8000c9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800095a:	4865      	ldr	r0, [pc, #404]	; (8000af0 <main+0x1c8>)
 800095c:	f002 fc6b 	bl	8003236 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000960:	2100      	movs	r1, #0
 8000962:	4864      	ldr	r0, [pc, #400]	; (8000af4 <main+0x1cc>)
 8000964:	f002 fcbe 	bl	80032e4 <HAL_TIM_PWM_Start>
  fres = f_mount ( &fs ,  "" ,   1);
 8000968:	2201      	movs	r2, #1
 800096a:	4963      	ldr	r1, [pc, #396]	; (8000af8 <main+0x1d0>)
 800096c:	4863      	ldr	r0, [pc, #396]	; (8000afc <main+0x1d4>)
 800096e:	f006 fd77 	bl	8007460 <f_mount>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <main+0x1d8>)
 8000978:	701a      	strb	r2, [r3, #0]
   while ( fres !=  FR_OK ){
 800097a:	e00b      	b.n	8000994 <main+0x6c>
 	  fres = f_mount ( &fs ,  "" ,   1);
 800097c:	2201      	movs	r2, #1
 800097e:	495e      	ldr	r1, [pc, #376]	; (8000af8 <main+0x1d0>)
 8000980:	485e      	ldr	r0, [pc, #376]	; (8000afc <main+0x1d4>)
 8000982:	f006 fd6d 	bl	8007460 <f_mount>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <main+0x1d8>)
 800098c:	701a      	strb	r2, [r3, #0]
 	  HAL_Delay(100);
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f000 fea4 	bl	80016dc <HAL_Delay>
   while ( fres !=  FR_OK ){
 8000994:	4b5a      	ldr	r3, [pc, #360]	; (8000b00 <main+0x1d8>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1ef      	bne.n	800097c <main+0x54>
 //  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 //  free_sectors = free_clusters * getFreeFs->csize;
//   ST7735_Init();
//   ST7735_FillScreen(0xFFE0);
   FIL file;
   FRESULT res = f_open(&file, "trungthu.wav", FA_READ);
 800099c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009a0:	2201      	movs	r2, #1
 80009a2:	4958      	ldr	r1, [pc, #352]	; (8000b04 <main+0x1dc>)
 80009a4:	4618      	mov	r0, r3
 80009a6:	f006 fda5 	bl	80074f4 <f_open>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
   uint32_t bytesRead;
   if(res != FR_OK) {
 80009b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <main+0x96>
 //      UART_Printf("f_open() failed, res = %d\r\n", res);
       return -1;
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	e094      	b.n	8000ae8 <main+0x1c0>
   }

   uint8_t header[44];
      res = f_read(&file, header, sizeof(header), &bytesRead);
 80009be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c2:	f107 0108 	add.w	r1, r7, #8
 80009c6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80009ca:	222c      	movs	r2, #44	; 0x2c
 80009cc:	f006 ff1e 	bl	800780c <f_read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
      if(res != FR_OK) {
 80009d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d007      	beq.n	80009ee <main+0xc6>
//          UART_Printf("f_read() failed, res = %d\r\n", res);
          f_close(&file);
 80009de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009e2:	4618      	mov	r0, r3
 80009e4:	f007 f913 	bl	8007c0e <f_close>
          return -2;
 80009e8:	f06f 0301 	mvn.w	r3, #1
 80009ec:	e07c      	b.n	8000ae8 <main+0x1c0>
      }
   uint32_t data_size = (uint32_t) (header[8]<<24) |( header[7]<<16) |( header[6]<<8)|(header[5]);
 80009ee:	7c3b      	ldrb	r3, [r7, #16]
 80009f0:	061b      	lsls	r3, r3, #24
 80009f2:	461a      	mov	r2, r3
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	041b      	lsls	r3, r3, #16
 80009f8:	4313      	orrs	r3, r2
 80009fa:	7bba      	ldrb	r2, [r7, #14]
 80009fc:	0212      	lsls	r2, r2, #8
 80009fe:	4313      	orrs	r3, r2
 8000a00:	7b7a      	ldrb	r2, [r7, #13]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	673b      	str	r3, [r7, #112]	; 0x70
   uint32_t sample_rate = (uint32_t) (header[27]<<24) |( header[26]<<16) |( header[25]<<8)|(header[24]);
 8000a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a0a:	061b      	lsls	r3, r3, #24
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000a12:	041b      	lsls	r3, r3, #16
 8000a14:	4313      	orrs	r3, r2
 8000a16:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000a1a:	0212      	lsls	r2, r2, #8
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	66fb      	str	r3, [r7, #108]	; 0x6c
   uint32_t bit_rate = (uint32_t) (header[32]<<24) |( header[31]<<16) |( header[30]<<8)|(header[29]);
 8000a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a2a:	061b      	lsls	r3, r3, #24
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a32:	041b      	lsls	r3, r3, #16
 8000a34:	4313      	orrs	r3, r2
 8000a36:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000a3a:	0212      	lsls	r2, r2, #8
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000a42:	4313      	orrs	r3, r2
 8000a44:	66bb      	str	r3, [r7, #104]	; 0x68
//
////      ST7735_DrawImage(0, 0, 128, 32, &image);
// //
// //     ST7735_DrawPixel(x,  y - 1 , color565);
// }
   while(f_eof (&file) == 0){
 8000a46:	e042      	b.n	8000ace <main+0x1a6>
   int8_t data[2];
   res = f_read(&file, data, sizeof(data), &bytesRead);
 8000a48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a4c:	1d39      	adds	r1, r7, #4
 8000a4e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000a52:	2202      	movs	r2, #2
 8000a54:	f006 feda 	bl	800780c <f_read>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
         if(res != FR_OK) {
 8000a5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d007      	beq.n	8000a76 <main+0x14e>
   //          UART_Printf("f_read() failed, res = %d\r\n", res);
             f_close(&file);
 8000a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f007 f8cf 	bl	8007c0e <f_close>
             return -2;
 8000a70:	f06f 0301 	mvn.w	r3, #1
 8000a74:	e038      	b.n	8000ae8 <main+0x1c0>
         }
         uint16_t sound = data[0] << 8 | data[1];
 8000a76:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
         uint16_t pwm = (uint16_t) sound/65536.0*1632;
 8000a8c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fcad 	bl	80003f0 <__aeabi_i2d>
 8000a96:	f04f 0200 	mov.w	r2, #0
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <main+0x1e0>)
 8000a9c:	f7ff fe3c 	bl	8000718 <__aeabi_ddiv>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <main+0x1e4>)
 8000aae:	f7ff fd09 	bl	80004c4 <__aeabi_dmul>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	4621      	mov	r1, r4
 8000aba:	f7ff ff15 	bl	80008e8 <__aeabi_d2uiz>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
         __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <main+0x1cc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000acc:	635a      	str	r2, [r3, #52]	; 0x34
   while(f_eof (&file) == 0){
 8000ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d1b8      	bne.n	8000a48 <main+0x120>
   }
      res = f_close(&file);
 8000ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 f897 	bl	8007c0e <f_close>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <main+0x1be>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	377c      	adds	r7, #124	; 0x7c
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	20001360 	.word	0x20001360
 8000af4:	200013fc 	.word	0x200013fc
 8000af8:	08007e50 	.word	0x08007e50
 8000afc:	200002cc 	.word	0x200002cc
 8000b00:	20001508 	.word	0x20001508
 8000b04:	08007e54 	.word	0x08007e54
 8000b08:	40f00000 	.word	0x40f00000
 8000b0c:	40998000 	.word	0x40998000

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b094      	sub	sp, #80	; 0x50
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b1a:	2228      	movs	r2, #40	; 0x28
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 f982 	bl	8007e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b52:	2302      	movs	r3, #2
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fa9c 	bl	80020a4 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b72:	f000 fa35 	bl	8000fe0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fd06 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b9e:	f000 fa1f 	bl	8000fe0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fe95 	bl	80028dc <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bb8:	f000 fa12 	bl	8000fe0 <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3750      	adds	r7, #80	; 0x50
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_SPI1_Init+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000c10:	220a      	movs	r2, #10
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <MX_SPI1_Init+0x64>)
 8000c16:	f001 ff17 	bl	8002a48 <HAL_SPI_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c20:	f000 f9de 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200013a4 	.word	0x200013a4
 8000c2c:	40013000 	.word	0x40013000

08000c30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c36:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <MX_SPI2_Init+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c7c:	220a      	movs	r2, #10
 8000c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_SPI2_Init+0x64>)
 8000c82:	f001 fee1 	bl	8002a48 <HAL_SPI_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c8c:	f000 f9a8 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000274 	.word	0x20000274
 8000c98:	40003800 	.word	0x40003800

08000c9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <MX_TIM1_Init+0x9c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000cc0:	2247      	movs	r2, #71	; 0x47
 8000cc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000ce6:	f002 fa7b 	bl	80031e0 <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f976 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000d02:	f002 fcef 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d0c:	f000 f968 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <MX_TIM1_Init+0x98>)
 8000d1e:	f003 f869 	bl	8003df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d28:	f000 f95a 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20001360 	.word	0x20001360
 8000d38:	40012c00 	.word	0x40012c00

08000d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
 8000d68:	615a      	str	r2, [r3, #20]
 8000d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1632;
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d82:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 8000d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b25      	ldr	r3, [pc, #148]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d94:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000d96:	f002 fa23 	bl	80031e0 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000da0:	f000 f91e 	bl	8000fe0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dae:	4619      	mov	r1, r3
 8000db0:	481c      	ldr	r0, [pc, #112]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000db2:	f002 fc97 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000dbc:	f000 f910 	bl	8000fe0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000dc2:	f002 fa5b 	bl	800327c <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000dcc:	f000 f908 	bl	8000fe0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 0320 	add.w	r3, r7, #32
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000de0:	f003 f808 	bl	8003df4 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000dea:	f000 f8f9 	bl	8000fe0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000e06:	f002 fba7 	bl	8003558 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000e10:	f000 f8e6 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM2_Init+0xe8>)
 8000e16:	f000 fa69 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3738      	adds	r7, #56	; 0x38
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200013fc 	.word	0x200013fc

08000e28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_USART2_UART_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f003 f81e 	bl	8003ea0 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 f8b9 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000143c 	.word	0x2000143c
 8000e78:	40004400 	.word	0x40004400

08000e7c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MX_USB_PCD_Init+0x3c>)
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <MX_USB_PCD_Init+0x40>)
 8000e84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USB_PCD_Init+0x3c>)
 8000e88:	2208      	movs	r2, #8
 8000e8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_USB_PCD_Init+0x3c>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USB_PCD_Init+0x3c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_USB_PCD_Init+0x3c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USB_PCD_Init+0x3c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_USB_PCD_Init+0x3c>)
 8000ea6:	f001 f81b 	bl	8001ee0 <HAL_PCD_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000eb0:	f000 f896 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000150c 	.word	0x2000150c
 8000ebc:	40005c00 	.word	0x40005c00

08000ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_DMA_Init+0x58>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <MX_DMA_Init+0x58>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_DMA_Init+0x58>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	200c      	movs	r0, #12
 8000ee4:	f000 fcf3 	bl	80018ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ee8:	200c      	movs	r0, #12
 8000eea:	f000 fd0c 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	200d      	movs	r0, #13
 8000ef4:	f000 fceb 	bl	80018ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ef8:	200d      	movs	r0, #13
 8000efa:	f000 fd04 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 fce3 	bl	80018ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f08:	200f      	movs	r0, #15
 8000f0a:	f000 fcfc 	bl	8001906 <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f36:	f043 0320 	orr.w	r3, r3, #32
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f003 0320 	and.w	r3, r3, #32
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_GPIO_Init+0xb8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f240 4182 	movw	r1, #1154	; 0x482
 8000f7e:	4816      	ldr	r0, [pc, #88]	; (8000fd8 <MX_GPIO_Init+0xbc>)
 8000f80:	f000 ff96 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000f8a:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_GPIO_Init+0xc0>)
 8000f8c:	f000 ff90 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB10 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin;
 8000f90:	f240 4382 	movw	r3, #1154	; 0x482
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <MX_GPIO_Init+0xbc>)
 8000faa:	f000 fe27 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_GPIO_Init+0xc0>)
 8000fc8:	f000 fe18 	bl	8001bfc <HAL_GPIO_Init>

}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr

08000fec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_MspInit+0x5c>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a14      	ldr	r2, [pc, #80]	; (8001048 <HAL_MspInit+0x5c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_MspInit+0x5c>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_MspInit+0x5c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a0e      	ldr	r2, [pc, #56]	; (8001048 <HAL_MspInit+0x5c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_MspInit+0x5c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_MspInit+0x60>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_MspInit+0x60>)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000

08001050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a79      	ldr	r2, [pc, #484]	; (8001250 <HAL_SPI_MspInit+0x200>)
 800106c:	4293      	cmp	r3, r2
 800106e:	f040 808d 	bne.w	800118c <HAL_SPI_MspInit+0x13c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001072:	4b78      	ldr	r3, [pc, #480]	; (8001254 <HAL_SPI_MspInit+0x204>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a77      	ldr	r2, [pc, #476]	; (8001254 <HAL_SPI_MspInit+0x204>)
 8001078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b75      	ldr	r3, [pc, #468]	; (8001254 <HAL_SPI_MspInit+0x204>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b72      	ldr	r3, [pc, #456]	; (8001254 <HAL_SPI_MspInit+0x204>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a71      	ldr	r2, [pc, #452]	; (8001254 <HAL_SPI_MspInit+0x204>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b6f      	ldr	r3, [pc, #444]	; (8001254 <HAL_SPI_MspInit+0x204>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80010a2:	2328      	movs	r3, #40	; 0x28
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4868      	ldr	r0, [pc, #416]	; (8001258 <HAL_SPI_MspInit+0x208>)
 80010b6:	f000 fda1 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ba:	2310      	movs	r3, #16
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	4619      	mov	r1, r3
 80010cc:	4862      	ldr	r0, [pc, #392]	; (8001258 <HAL_SPI_MspInit+0x208>)
 80010ce:	f000 fd95 	bl	8001bfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80010d2:	4b62      	ldr	r3, [pc, #392]	; (800125c <HAL_SPI_MspInit+0x20c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010e8:	4a5c      	ldr	r2, [pc, #368]	; (800125c <HAL_SPI_MspInit+0x20c>)
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80010ee:	4b5c      	ldr	r3, [pc, #368]	; (8001260 <HAL_SPI_MspInit+0x210>)
 80010f0:	4a5c      	ldr	r2, [pc, #368]	; (8001264 <HAL_SPI_MspInit+0x214>)
 80010f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010f4:	4b5a      	ldr	r3, [pc, #360]	; (8001260 <HAL_SPI_MspInit+0x210>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010fa:	4b59      	ldr	r3, [pc, #356]	; (8001260 <HAL_SPI_MspInit+0x210>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001100:	4b57      	ldr	r3, [pc, #348]	; (8001260 <HAL_SPI_MspInit+0x210>)
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001106:	4b56      	ldr	r3, [pc, #344]	; (8001260 <HAL_SPI_MspInit+0x210>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800110c:	4b54      	ldr	r3, [pc, #336]	; (8001260 <HAL_SPI_MspInit+0x210>)
 800110e:	2200      	movs	r2, #0
 8001110:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001112:	4b53      	ldr	r3, [pc, #332]	; (8001260 <HAL_SPI_MspInit+0x210>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001118:	4b51      	ldr	r3, [pc, #324]	; (8001260 <HAL_SPI_MspInit+0x210>)
 800111a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001120:	484f      	ldr	r0, [pc, #316]	; (8001260 <HAL_SPI_MspInit+0x210>)
 8001122:	f000 fc0b 	bl	800193c <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 800112c:	f7ff ff58 	bl	8000fe0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_SPI_MspInit+0x210>)
 8001134:	64da      	str	r2, [r3, #76]	; 0x4c
 8001136:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_SPI_MspInit+0x210>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <HAL_SPI_MspInit+0x218>)
 800113e:	4a4b      	ldr	r2, [pc, #300]	; (800126c <HAL_SPI_MspInit+0x21c>)
 8001140:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001142:	4b49      	ldr	r3, [pc, #292]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001144:	2210      	movs	r2, #16
 8001146:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_SPI_MspInit+0x218>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001150:	2280      	movs	r2, #128	; 0x80
 8001152:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001154:	4b44      	ldr	r3, [pc, #272]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115a:	4b43      	ldr	r3, [pc, #268]	; (8001268 <HAL_SPI_MspInit+0x218>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001162:	2220      	movs	r2, #32
 8001164:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001166:	4b40      	ldr	r3, [pc, #256]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001168:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800116e:	483e      	ldr	r0, [pc, #248]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001170:	f000 fbe4 	bl	800193c <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_SPI_MspInit+0x12e>
    {
      Error_Handler();
 800117a:	f7ff ff31 	bl	8000fe0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a39      	ldr	r2, [pc, #228]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001182:	649a      	str	r2, [r3, #72]	; 0x48
 8001184:	4a38      	ldr	r2, [pc, #224]	; (8001268 <HAL_SPI_MspInit+0x218>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800118a:	e05d      	b.n	8001248 <HAL_SPI_MspInit+0x1f8>
  else if(hspi->Instance==SPI2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a37      	ldr	r2, [pc, #220]	; (8001270 <HAL_SPI_MspInit+0x220>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d158      	bne.n	8001248 <HAL_SPI_MspInit+0x1f8>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_SPI_MspInit+0x204>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_SPI_MspInit+0x204>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <HAL_SPI_MspInit+0x204>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <HAL_SPI_MspInit+0x204>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a28      	ldr	r2, [pc, #160]	; (8001254 <HAL_SPI_MspInit+0x204>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_SPI_MspInit+0x204>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011c6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	481f      	ldr	r0, [pc, #124]	; (8001258 <HAL_SPI_MspInit+0x208>)
 80011dc:	f000 fd0e 	bl	8001bfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	4818      	ldr	r0, [pc, #96]	; (8001258 <HAL_SPI_MspInit+0x208>)
 80011f6:	f000 fd01 	bl	8001bfc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_SPI_MspInit+0x224>)
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_SPI_MspInit+0x228>)
 80011fe:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_SPI_MspInit+0x224>)
 8001202:	2210      	movs	r2, #16
 8001204:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_SPI_MspInit+0x224>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_SPI_MspInit+0x224>)
 800120e:	2280      	movs	r2, #128	; 0x80
 8001210:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_SPI_MspInit+0x224>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HAL_SPI_MspInit+0x224>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_SPI_MspInit+0x224>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HAL_SPI_MspInit+0x224>)
 8001226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800122a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <HAL_SPI_MspInit+0x224>)
 800122e:	f000 fb85 	bl	800193c <HAL_DMA_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_SPI_MspInit+0x1ec>
      Error_Handler();
 8001238:	f7ff fed2 	bl	8000fe0 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <HAL_SPI_MspInit+0x224>)
 8001240:	649a      	str	r2, [r3, #72]	; 0x48
 8001242:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_SPI_MspInit+0x224>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001248:	bf00      	nop
 800124a:	3730      	adds	r7, #48	; 0x30
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013000 	.word	0x40013000
 8001254:	40021000 	.word	0x40021000
 8001258:	40010c00 	.word	0x40010c00
 800125c:	40010000 	.word	0x40010000
 8001260:	2000147c 	.word	0x2000147c
 8001264:	4002001c 	.word	0x4002001c
 8001268:	200017a4 	.word	0x200017a4
 800126c:	40020030 	.word	0x40020030
 8001270:	40003800 	.word	0x40003800
 8001274:	200014c4 	.word	0x200014c4
 8001278:	40020058 	.word	0x40020058

0800127c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a16      	ldr	r2, [pc, #88]	; (80012e4 <HAL_TIM_Base_MspInit+0x68>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d114      	bne.n	80012b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <HAL_TIM_Base_MspInit+0x6c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_TIM_Base_MspInit+0x6c>)
 8001294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <HAL_TIM_Base_MspInit+0x6c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2019      	movs	r0, #25
 80012ac:	f000 fb0f 	bl	80018ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012b0:	2019      	movs	r0, #25
 80012b2:	f000 fb28 	bl	8001906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b6:	e010      	b.n	80012da <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c0:	d10b      	bne.n	80012da <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_TIM_Base_MspInit+0x6c>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_TIM_Base_MspInit+0x6c>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	61d3      	str	r3, [r2, #28]
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_TIM_Base_MspInit+0x6c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40012c00 	.word	0x40012c00
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130a:	d12a      	bne.n	8001362 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_TIM_MspPostInit+0x80>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a16      	ldr	r2, [pc, #88]	; (800136c <HAL_TIM_MspPostInit+0x80>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <HAL_TIM_MspPostInit+0x80>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001328:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <HAL_TIM_MspPostInit+0x84>)
 800133a:	f000 fc5f 	bl	8001bfc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_TIM_MspPostInit+0x88>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_TIM_MspPostInit+0x88>)
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_UART_MspInit+0x88>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12f      	bne.n	80013f8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_UART_MspInit+0x8c>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a19      	ldr	r2, [pc, #100]	; (8001404 <HAL_UART_MspInit+0x8c>)
 800139e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <HAL_UART_MspInit+0x8c>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <HAL_UART_MspInit+0x8c>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <HAL_UART_MspInit+0x8c>)
 80013b6:	f043 0304 	orr.w	r3, r3, #4
 80013ba:	6193      	str	r3, [r2, #24]
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_UART_MspInit+0x8c>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013dc:	f000 fc0e 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e0:	2308      	movs	r3, #8
 80013e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_UART_MspInit+0x90>)
 80013f4:	f000 fc02 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40004400 	.word	0x40004400
 8001404:	40021000 	.word	0x40021000
 8001408:	40010800 	.word	0x40010800

0800140c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a09      	ldr	r2, [pc, #36]	; (8001440 <HAL_PCD_MspInit+0x34>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10b      	bne.n	8001436 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <HAL_PCD_MspInit+0x38>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a08      	ldr	r2, [pc, #32]	; (8001444 <HAL_PCD_MspInit+0x38>)
 8001424:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001428:	61d3      	str	r3, [r2, #28]
 800142a:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_PCD_MspInit+0x38>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	40005c00 	.word	0x40005c00
 8001444:	40021000 	.word	0x40021000

08001448 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <SDTimer_Handler+0x3c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d006      	beq.n	8001464 <SDTimer_Handler+0x1c>
    Timer1--;
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <SDTimer_Handler+0x3c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b08      	ldr	r3, [pc, #32]	; (8001484 <SDTimer_Handler+0x3c>)
 8001462:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <SDTimer_Handler+0x40>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <SDTimer_Handler+0x34>
    Timer2--;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <SDTimer_Handler+0x40>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <SDTimer_Handler+0x40>)
 800147a:	701a      	strb	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	200017ed 	.word	0x200017ed
 8001488:	200017ec 	.word	0x200017ec

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <HardFault_Handler+0x4>

0800149e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <MemManage_Handler+0x4>

080014a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <BusFault_Handler+0x4>

080014aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <UsageFault_Handler+0x4>

080014b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <SysTick_Handler+0x30>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	3301      	adds	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <SysTick_Handler+0x30>)
 80014e4:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <SysTick_Handler+0x30>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	d904      	bls.n	80014fa <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <SysTick_Handler+0x30>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 80014f6:	f7ff ffa7 	bl	8001448 <SDTimer_Handler>
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 f8d3 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000040 	.word	0x20000040

08001508 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA1_Channel2_IRQHandler+0x10>)
 800150e:	f000 fa6f 	bl	80019f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000147c 	.word	0x2000147c

0800151c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <DMA1_Channel3_IRQHandler+0x10>)
 8001522:	f000 fa65 	bl	80019f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200017a4 	.word	0x200017a4

08001530 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <DMA1_Channel5_IRQHandler+0x10>)
 8001536:	f000 fa5b 	bl	80019f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200014c4 	.word	0x200014c4

08001544 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <TIM1_UP_IRQHandler+0x18>)
 800154a:	f001 fefd 	bl	8003348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  counter++;
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <TIM1_UP_IRQHandler+0x1c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	3301      	adds	r3, #1
 8001554:	4a02      	ldr	r2, [pc, #8]	; (8001560 <TIM1_UP_IRQHandler+0x1c>)
 8001556:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20001360 	.word	0x20001360
 8001560:	2000003c 	.word	0x2000003c

08001564 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <SystemInit+0x5c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <SystemInit+0x5c>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <SystemInit+0x5c>)
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4911      	ldr	r1, [pc, #68]	; (80015c0 <SystemInit+0x5c>)
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <SystemInit+0x60>)
 800157c:	4013      	ands	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <SystemInit+0x5c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <SystemInit+0x5c>)
 8001586:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <SystemInit+0x5c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SystemInit+0x5c>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <SystemInit+0x5c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <SystemInit+0x5c>)
 80015a2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80015a6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SystemInit+0x5c>)
 80015aa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80015ae:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SystemInit+0x64>)
 80015b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000
 80015c4:	f8ff0000 	.word	0xf8ff0000
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015ce:	e003      	b.n	80015d8 <LoopCopyDataInit>

080015d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015d6:	3104      	adds	r1, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015e0:	d3f6      	bcc.n	80015d0 <CopyDataInit>
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015e4:	e002      	b.n	80015ec <LoopFillZerobss>

080015e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015e8:	f842 3b04 	str.w	r3, [r2], #4

080015ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015f0:	d3f9      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015f2:	f7ff ffb7 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f006 fbf3 	bl	8007de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015fa:	f7ff f995 	bl	8000928 <main>
  bx lr
 80015fe:	4770      	bx	lr
  ldr r3, =_sidata
 8001600:	08008430 	.word	0x08008430
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001608:	20000020 	.word	0x20000020
  ldr r2, =_sbss
 800160c:	20000020 	.word	0x20000020
  ldr r3, = _ebss
 8001610:	20002858 	.word	0x20002858

08001614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC1_2_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_Init+0x28>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_Init+0x28>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001628:	2003      	movs	r0, #3
 800162a:	f000 f945 	bl	80018b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f808 	bl	8001644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001634:	f7ff fcda 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40022000 	.word	0x40022000

08001644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x54>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x58>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	4619      	mov	r1, r3
 8001656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165a:	fbb3 f3f1 	udiv	r3, r3, r1
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f95d 	bl	8001922 <HAL_SYSTICK_Config>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e00e      	b.n	8001690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b0f      	cmp	r3, #15
 8001676:	d80a      	bhi.n	800168e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001678:	2200      	movs	r2, #0
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f000 f925 	bl	80018ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_InitTick+0x5c>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000000 	.word	0x20000000
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_IncTick+0x1c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_IncTick+0x20>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_IncTick+0x20>)
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000008 	.word	0x20000008
 80016c4:	200017f0 	.word	0x200017f0

080016c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <HAL_GetTick+0x10>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	200017f0 	.word	0x200017f0

080016dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e4:	f7ff fff0 	bl	80016c8 <HAL_GetTick>
 80016e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d005      	beq.n	8001702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_Delay+0x40>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001702:	bf00      	nop
 8001704:	f7ff ffe0 	bl	80016c8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	429a      	cmp	r2, r3
 8001712:	d8f7      	bhi.n	8001704 <HAL_Delay+0x28>
  {
  }
}
 8001714:	bf00      	nop
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000008 	.word	0x20000008

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	; (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <__NVIC_EnableIRQ+0x34>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	; (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	; 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001884:	d301      	bcc.n	800188a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001886:	2301      	movs	r3, #1
 8001888:	e00f      	b.n	80018aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <SysTick_Config+0x40>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001892:	210f      	movs	r1, #15
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f7ff ff90 	bl	80017bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <SysTick_Config+0x40>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <SysTick_Config+0x40>)
 80018a4:	2207      	movs	r2, #7
 80018a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff2d 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e0:	f7ff ff42 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff90 	bl	8001810 <NVIC_EncodePriority>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff5f 	bl	80017bc <__NVIC_SetPriority>
}
 80018fe:	bf00      	nop
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff35 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ffa2 	bl	8001874 <SysTick_Config>
 8001930:	4603      	mov	r3, r0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e043      	b.n	80019da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_DMA_Init+0xa8>)
 800195a:	4413      	add	r3, r2
 800195c:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <HAL_DMA_Init+0xac>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a1f      	ldr	r2, [pc, #124]	; (80019ec <HAL_DMA_Init+0xb0>)
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001986:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800198a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	bffdfff8 	.word	0xbffdfff8
 80019e8:	cccccccd 	.word	0xcccccccd
 80019ec:	40020000 	.word	0x40020000

080019f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d04f      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0xc8>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04a      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0204 	bic.w	r2, r2, #4
 8001a3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a66      	ldr	r2, [pc, #408]	; (8001be0 <HAL_DMA_IRQHandler+0x1f0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d029      	beq.n	8001a9e <HAL_DMA_IRQHandler+0xae>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_DMA_IRQHandler+0x1f4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d022      	beq.n	8001a9a <HAL_DMA_IRQHandler+0xaa>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a63      	ldr	r2, [pc, #396]	; (8001be8 <HAL_DMA_IRQHandler+0x1f8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01a      	beq.n	8001a94 <HAL_DMA_IRQHandler+0xa4>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a62      	ldr	r2, [pc, #392]	; (8001bec <HAL_DMA_IRQHandler+0x1fc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d012      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x9e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a60      	ldr	r2, [pc, #384]	; (8001bf0 <HAL_DMA_IRQHandler+0x200>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00a      	beq.n	8001a88 <HAL_DMA_IRQHandler+0x98>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a5f      	ldr	r2, [pc, #380]	; (8001bf4 <HAL_DMA_IRQHandler+0x204>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d102      	bne.n	8001a82 <HAL_DMA_IRQHandler+0x92>
 8001a7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a80:	e00e      	b.n	8001aa0 <HAL_DMA_IRQHandler+0xb0>
 8001a82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a86:	e00b      	b.n	8001aa0 <HAL_DMA_IRQHandler+0xb0>
 8001a88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a8c:	e008      	b.n	8001aa0 <HAL_DMA_IRQHandler+0xb0>
 8001a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a92:	e005      	b.n	8001aa0 <HAL_DMA_IRQHandler+0xb0>
 8001a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a98:	e002      	b.n	8001aa0 <HAL_DMA_IRQHandler+0xb0>
 8001a9a:	2340      	movs	r3, #64	; 0x40
 8001a9c:	e000      	b.n	8001aa0 <HAL_DMA_IRQHandler+0xb0>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	4a55      	ldr	r2, [pc, #340]	; (8001bf8 <HAL_DMA_IRQHandler+0x208>)
 8001aa2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 8094 	beq.w	8001bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001ab6:	e08e      	b.n	8001bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	2202      	movs	r2, #2
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d056      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x186>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d051      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10b      	bne.n	8001af8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 020a 	bic.w	r2, r2, #10
 8001aee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <HAL_DMA_IRQHandler+0x1f0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d029      	beq.n	8001b56 <HAL_DMA_IRQHandler+0x166>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a37      	ldr	r2, [pc, #220]	; (8001be4 <HAL_DMA_IRQHandler+0x1f4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d022      	beq.n	8001b52 <HAL_DMA_IRQHandler+0x162>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a35      	ldr	r2, [pc, #212]	; (8001be8 <HAL_DMA_IRQHandler+0x1f8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01a      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x15c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_DMA_IRQHandler+0x1fc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d012      	beq.n	8001b46 <HAL_DMA_IRQHandler+0x156>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_DMA_IRQHandler+0x200>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00a      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x150>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <HAL_DMA_IRQHandler+0x204>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d102      	bne.n	8001b3a <HAL_DMA_IRQHandler+0x14a>
 8001b34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b38:	e00e      	b.n	8001b58 <HAL_DMA_IRQHandler+0x168>
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b3e:	e00b      	b.n	8001b58 <HAL_DMA_IRQHandler+0x168>
 8001b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b44:	e008      	b.n	8001b58 <HAL_DMA_IRQHandler+0x168>
 8001b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b4a:	e005      	b.n	8001b58 <HAL_DMA_IRQHandler+0x168>
 8001b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b50:	e002      	b.n	8001b58 <HAL_DMA_IRQHandler+0x168>
 8001b52:	2320      	movs	r3, #32
 8001b54:	e000      	b.n	8001b58 <HAL_DMA_IRQHandler+0x168>
 8001b56:	2302      	movs	r3, #2
 8001b58:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <HAL_DMA_IRQHandler+0x208>)
 8001b5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d034      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b74:	e02f      	b.n	8001bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d028      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x1e8>
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d023      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 020e 	bic.w	r2, r2, #14
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
    }
  }
  return;
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
}
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40020008 	.word	0x40020008
 8001be4:	4002001c 	.word	0x4002001c
 8001be8:	40020030 	.word	0x40020030
 8001bec:	40020044 	.word	0x40020044
 8001bf0:	40020058 	.word	0x40020058
 8001bf4:	4002006c 	.word	0x4002006c
 8001bf8:	40020000 	.word	0x40020000

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e127      	b.n	8001e60 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c10:	2201      	movs	r2, #1
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	f040 8116 	bne.w	8001e5a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b12      	cmp	r3, #18
 8001c34:	d034      	beq.n	8001ca0 <HAL_GPIO_Init+0xa4>
 8001c36:	2b12      	cmp	r3, #18
 8001c38:	d80d      	bhi.n	8001c56 <HAL_GPIO_Init+0x5a>
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x9a>
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d804      	bhi.n	8001c4c <HAL_GPIO_Init+0x50>
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d031      	beq.n	8001caa <HAL_GPIO_Init+0xae>
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d01c      	beq.n	8001c84 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4a:	e048      	b.n	8001cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d043      	beq.n	8001cd8 <HAL_GPIO_Init+0xdc>
 8001c50:	2b11      	cmp	r3, #17
 8001c52:	d01b      	beq.n	8001c8c <HAL_GPIO_Init+0x90>
          break;
 8001c54:	e043      	b.n	8001cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c56:	4a89      	ldr	r2, [pc, #548]	; (8001e7c <HAL_GPIO_Init+0x280>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d026      	beq.n	8001caa <HAL_GPIO_Init+0xae>
 8001c5c:	4a87      	ldr	r2, [pc, #540]	; (8001e7c <HAL_GPIO_Init+0x280>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d806      	bhi.n	8001c70 <HAL_GPIO_Init+0x74>
 8001c62:	4a87      	ldr	r2, [pc, #540]	; (8001e80 <HAL_GPIO_Init+0x284>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d020      	beq.n	8001caa <HAL_GPIO_Init+0xae>
 8001c68:	4a86      	ldr	r2, [pc, #536]	; (8001e84 <HAL_GPIO_Init+0x288>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01d      	beq.n	8001caa <HAL_GPIO_Init+0xae>
          break;
 8001c6e:	e036      	b.n	8001cde <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c70:	4a85      	ldr	r2, [pc, #532]	; (8001e88 <HAL_GPIO_Init+0x28c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_GPIO_Init+0xae>
 8001c76:	4a85      	ldr	r2, [pc, #532]	; (8001e8c <HAL_GPIO_Init+0x290>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d016      	beq.n	8001caa <HAL_GPIO_Init+0xae>
 8001c7c:	4a84      	ldr	r2, [pc, #528]	; (8001e90 <HAL_GPIO_Init+0x294>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d013      	beq.n	8001caa <HAL_GPIO_Init+0xae>
          break;
 8001c82:	e02c      	b.n	8001cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e028      	b.n	8001cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	3304      	adds	r3, #4
 8001c92:	623b      	str	r3, [r7, #32]
          break;
 8001c94:	e023      	b.n	8001cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	3308      	adds	r3, #8
 8001c9c:	623b      	str	r3, [r7, #32]
          break;
 8001c9e:	e01e      	b.n	8001cde <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	330c      	adds	r3, #12
 8001ca6:	623b      	str	r3, [r7, #32]
          break;
 8001ca8:	e019      	b.n	8001cde <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d102      	bne.n	8001cb8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	623b      	str	r3, [r7, #32]
          break;
 8001cb6:	e012      	b.n	8001cde <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc0:	2308      	movs	r3, #8
 8001cc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	611a      	str	r2, [r3, #16]
          break;
 8001cca:	e008      	b.n	8001cde <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ccc:	2308      	movs	r3, #8
 8001cce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	615a      	str	r2, [r3, #20]
          break;
 8001cd6:	e002      	b.n	8001cde <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	2bff      	cmp	r3, #255	; 0xff
 8001ce2:	d801      	bhi.n	8001ce8 <HAL_GPIO_Init+0xec>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	e001      	b.n	8001cec <HAL_GPIO_Init+0xf0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2bff      	cmp	r3, #255	; 0xff
 8001cf2:	d802      	bhi.n	8001cfa <HAL_GPIO_Init+0xfe>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x104>
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	3b08      	subs	r3, #8
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	210f      	movs	r1, #15
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	401a      	ands	r2, r3
 8001d12:	6a39      	ldr	r1, [r7, #32]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8096 	beq.w	8001e5a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2e:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <HAL_GPIO_Init+0x298>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4a58      	ldr	r2, [pc, #352]	; (8001e94 <HAL_GPIO_Init+0x298>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6193      	str	r3, [r2, #24]
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <HAL_GPIO_Init+0x298>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d46:	4a54      	ldr	r2, [pc, #336]	; (8001e98 <HAL_GPIO_Init+0x29c>)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	4013      	ands	r3, r2
 8001d68:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_GPIO_Init+0x2a0>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x19e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x2a4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x19a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a49      	ldr	r2, [pc, #292]	; (8001ea4 <HAL_GPIO_Init+0x2a8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x196>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_GPIO_Init+0x2ac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x192>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x1a0>
 8001d8e:	2304      	movs	r3, #4
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x1a0>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x1a0>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x1a0>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dac:	493a      	ldr	r1, [pc, #232]	; (8001e98 <HAL_GPIO_Init+0x29c>)
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4938      	ldr	r1, [pc, #224]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
 8001dd2:	e006      	b.n	8001de2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd4:	4b35      	ldr	r3, [pc, #212]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4933      	ldr	r1, [pc, #204]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	492e      	ldr	r1, [pc, #184]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	604b      	str	r3, [r1, #4]
 8001dfa:	e006      	b.n	8001e0a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	4929      	ldr	r1, [pc, #164]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	4924      	ldr	r1, [pc, #144]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	491f      	ldr	r1, [pc, #124]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	491a      	ldr	r1, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60cb      	str	r3, [r1, #12]
 8001e4a:	e006      	b.n	8001e5a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4915      	ldr	r1, [pc, #84]	; (8001eac <HAL_GPIO_Init+0x2b0>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f aed0 	bne.w	8001c10 <HAL_GPIO_Init+0x14>
  }
}
 8001e70:	bf00      	nop
 8001e72:	372c      	adds	r7, #44	; 0x2c
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	10210000 	.word	0x10210000
 8001e80:	10110000 	.word	0x10110000
 8001e84:	10120000 	.word	0x10120000
 8001e88:	10310000 	.word	0x10310000
 8001e8c:	10320000 	.word	0x10320000
 8001e90:	10220000 	.word	0x10220000
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40010c00 	.word	0x40010c00
 8001ea4:	40011000 	.word	0x40011000
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee2:	b08b      	sub	sp, #44	; 0x2c
 8001ee4:	af06      	add	r7, sp, #24
 8001ee6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0d3      	b.n	800209a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fa80 	bl	800140c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 f910 	bl	800413e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	687e      	ldr	r6, [r7, #4]
 8001f26:	466d      	mov	r5, sp
 8001f28:	f106 0410 	add.w	r4, r6, #16
 8001f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	602b      	str	r3, [r5, #0]
 8001f34:	1d33      	adds	r3, r6, #4
 8001f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f38:	6838      	ldr	r0, [r7, #0]
 8001f3a:	f002 f8d9 	bl	80040f0 <USB_CoreInit>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2202      	movs	r2, #2
 8001f48:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0a4      	b.n	800209a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f002 f90d 	bl	8004176 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
 8001f60:	e035      	b.n	8001fce <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	4413      	add	r3, r2
 8001f6a:	3329      	adds	r3, #41	; 0x29
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	4413      	add	r3, r2
 8001f78:	3328      	adds	r3, #40	; 0x28
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	b291      	uxth	r1, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	015b      	lsls	r3, r3, #5
 8001f88:	4413      	add	r3, r2
 8001f8a:	3336      	adds	r3, #54	; 0x36
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	015b      	lsls	r3, r3, #5
 8001f96:	4413      	add	r3, r2
 8001f98:	332b      	adds	r3, #43	; 0x2b
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	015b      	lsls	r3, r3, #5
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3338      	adds	r3, #56	; 0x38
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	333c      	adds	r3, #60	; 0x3c
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	3302      	adds	r3, #2
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	4413      	add	r3, r2
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	73fb      	strb	r3, [r7, #15]
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3c4      	bcc.n	8001f62 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
 8001fdc:	e031      	b.n	8002042 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	015b      	lsls	r3, r3, #5
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	4413      	add	r3, r2
 8002006:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	015b      	lsls	r3, r3, #5
 8002014:	4413      	add	r3, r2
 8002016:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	015b      	lsls	r3, r3, #5
 8002024:	4413      	add	r3, r2
 8002026:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	330a      	adds	r3, #10
 8002034:	015b      	lsls	r3, r3, #5
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	3301      	adds	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d3c8      	bcc.n	8001fde <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	687e      	ldr	r6, [r7, #4]
 8002054:	466d      	mov	r5, sp
 8002056:	f106 0410 	add.w	r4, r6, #16
 800205a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	602b      	str	r3, [r5, #0]
 8002062:	1d33      	adds	r3, r6, #4
 8002064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002066:	6838      	ldr	r0, [r7, #0]
 8002068:	f002 f891 	bl	800418e <USB_DevInit>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00d      	b.n	800209a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f002 f89f 	bl	80041d6 <USB_DevDisconnect>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e26c      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8087 	beq.w	80021d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c4:	4b92      	ldr	r3, [pc, #584]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d00c      	beq.n	80020ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d0:	4b8f      	ldr	r3, [pc, #572]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d112      	bne.n	8002102 <HAL_RCC_OscConfig+0x5e>
 80020dc:	4b8c      	ldr	r3, [pc, #560]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e8:	d10b      	bne.n	8002102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d06c      	beq.n	80021d0 <HAL_RCC_OscConfig+0x12c>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d168      	bne.n	80021d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e246      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210a:	d106      	bne.n	800211a <HAL_RCC_OscConfig+0x76>
 800210c:	4b80      	ldr	r3, [pc, #512]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7f      	ldr	r2, [pc, #508]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	e02e      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10c      	bne.n	800213c <HAL_RCC_OscConfig+0x98>
 8002122:	4b7b      	ldr	r3, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7a      	ldr	r2, [pc, #488]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b78      	ldr	r3, [pc, #480]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a77      	ldr	r2, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e01d      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0xbc>
 8002146:	4b72      	ldr	r3, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a71      	ldr	r2, [pc, #452]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0xd4>
 8002160:	4b6b      	ldr	r3, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6a      	ldr	r2, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a67      	ldr	r2, [pc, #412]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff faa2 	bl	80016c8 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff fa9e 	bl	80016c8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1fa      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b5d      	ldr	r3, [pc, #372]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0xe4>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fa8e 	bl	80016c8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff fa8a 	bl	80016c8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1e6      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x10c>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d063      	beq.n	80022a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021de:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11c      	bne.n	8002230 <HAL_RCC_OscConfig+0x18c>
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_RCC_OscConfig+0x176>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1ba      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4939      	ldr	r1, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	e03a      	b.n	80022a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b36      	ldr	r3, [pc, #216]	; (8002314 <HAL_RCC_OscConfig+0x270>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff fa43 	bl	80016c8 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff fa3f 	bl	80016c8 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e19b      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4927      	ldr	r1, [pc, #156]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_OscConfig+0x270>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fa22 	bl	80016c8 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002288:	f7ff fa1e 	bl	80016c8 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e17a      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d03a      	beq.n	8002328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d019      	beq.n	80022ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_RCC_OscConfig+0x274>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c0:	f7ff fa02 	bl	80016c8 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c8:	f7ff f9fe 	bl	80016c8 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e15a      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f000 fada 	bl	80028a0 <RCC_Delay>
 80022ec:	e01c      	b.n	8002328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <HAL_RCC_OscConfig+0x274>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7ff f9e8 	bl	80016c8 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fa:	e00f      	b.n	800231c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff f9e4 	bl	80016c8 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d908      	bls.n	800231c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e140      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	42420000 	.word	0x42420000
 8002318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e9      	bne.n	80022fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a6 	beq.w	8002482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233a:	4b97      	ldr	r3, [pc, #604]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b94      	ldr	r3, [pc, #592]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a93      	ldr	r2, [pc, #588]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b91      	ldr	r3, [pc, #580]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b8e      	ldr	r3, [pc, #568]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b8b      	ldr	r3, [pc, #556]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a8a      	ldr	r2, [pc, #552]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7ff f9a5 	bl	80016c8 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7ff f9a1 	bl	80016c8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0fd      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b81      	ldr	r3, [pc, #516]	; (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x312>
 80023a8:	4b7b      	ldr	r3, [pc, #492]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a7a      	ldr	r2, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	e02d      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x334>
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a75      	ldr	r2, [pc, #468]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4b73      	ldr	r3, [pc, #460]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a72      	ldr	r2, [pc, #456]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	f023 0304 	bic.w	r3, r3, #4
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	e01c      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d10c      	bne.n	80023fa <HAL_RCC_OscConfig+0x356>
 80023e0:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a6c      	ldr	r2, [pc, #432]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a69      	ldr	r2, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	e00b      	b.n	8002412 <HAL_RCC_OscConfig+0x36e>
 80023fa:	4b67      	ldr	r3, [pc, #412]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a66      	ldr	r2, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b64      	ldr	r3, [pc, #400]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a63      	ldr	r2, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d015      	beq.n	8002446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241a:	f7ff f955 	bl	80016c8 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002420:	e00a      	b.n	8002438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7ff f951 	bl	80016c8 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0ab      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0ee      	beq.n	8002422 <HAL_RCC_OscConfig+0x37e>
 8002444:	e014      	b.n	8002470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff f93f 	bl	80016c8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff f93b 	bl	80016c8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e095      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ee      	bne.n	800244e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002470:	7dfb      	ldrb	r3, [r7, #23]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d105      	bne.n	8002482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	4a47      	ldr	r2, [pc, #284]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800247c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8081 	beq.w	800258e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248c:	4b42      	ldr	r3, [pc, #264]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b08      	cmp	r3, #8
 8002496:	d061      	beq.n	800255c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d146      	bne.n	800252e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a0:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_OscConfig+0x4fc>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7ff f90f 	bl	80016c8 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7ff f90b 	bl	80016c8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e067      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c0:	4b35      	ldr	r3, [pc, #212]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d4:	d108      	bne.n	80024e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	492d      	ldr	r1, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a19      	ldr	r1, [r3, #32]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	430b      	orrs	r3, r1
 80024fa:	4927      	ldr	r1, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x4fc>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7ff f8df 	bl	80016c8 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7ff f8db 	bl	80016c8 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e037      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x46a>
 800252c:	e02f      	b.n	800258e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_RCC_OscConfig+0x4fc>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002534:	f7ff f8c8 	bl	80016c8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253c:	f7ff f8c4 	bl	80016c8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e020      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1f0      	bne.n	800253c <HAL_RCC_OscConfig+0x498>
 800255a:	e018      	b.n	800258e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e013      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x4f4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	429a      	cmp	r2, r3
 800257a:	d106      	bne.n	800258a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
 80025a0:	42420060 	.word	0x42420060

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d0      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	4965      	ldr	r1, [pc, #404]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800260a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d040      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e073      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7ff f818 	bl	80016c8 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7ff f814 	bl	80016c8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e053      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 0207 	bic.w	r2, r3, #7
 80026da:	4922      	ldr	r1, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4601      	mov	r1, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1c8>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	fa21 f303 	lsr.w	r3, r1, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1cc>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe ff76 	bl	8001644 <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	08007ec0 	.word	0x08007ec0
 8002770:	20000000 	.word	0x20000000
 8002774:	20000004 	.word	0x20000004

08002778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	b490      	push	{r4, r7}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002780:	1d3c      	adds	r4, r7, #4
 8002782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002788:	4b28      	ldr	r3, [pc, #160]	; (800282c <HAL_RCC_GetSysClockFreq+0xb4>)
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	2300      	movs	r3, #0
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x40>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x46>
 80027b6:	e02d      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ba:	623b      	str	r3, [r7, #32]
      break;
 80027bc:	e02d      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ca:	4413      	add	r3, r2
 80027cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d013      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0c5b      	lsrs	r3, r3, #17
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027ea:	4413      	add	r3, r2
 80027ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f6:	fb02 f203 	mul.w	r2, r2, r3
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	e004      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	623b      	str	r3, [r7, #32]
      break;
 8002812:	e002      	b.n	800281a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002816:	623b      	str	r3, [r7, #32]
      break;
 8002818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281a:	6a3b      	ldr	r3, [r7, #32]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3728      	adds	r7, #40	; 0x28
 8002820:	46bd      	mov	sp, r7
 8002822:	bc90      	pop	{r4, r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	08007e64 	.word	0x08007e64
 800282c:	08007e74 	.word	0x08007e74
 8002830:	40021000 	.word	0x40021000
 8002834:	007a1200 	.word	0x007a1200
 8002838:	003d0900 	.word	0x003d0900

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b02      	ldr	r3, [pc, #8]	; (800284c <HAL_RCC_GetHCLKFreq+0x10>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	20000000 	.word	0x20000000

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002854:	f7ff fff2 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002858:	4601      	mov	r1, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	0a1b      	lsrs	r3, r3, #8
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	08007ed0 	.word	0x08007ed0

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800287c:	f7ff ffde 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002880:	4601      	mov	r1, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0adb      	lsrs	r3, r3, #11
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4a03      	ldr	r2, [pc, #12]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	08007ed0 	.word	0x08007ed0

080028a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <RCC_Delay+0x34>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <RCC_Delay+0x38>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	0a5b      	lsrs	r3, r3, #9
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028bc:	bf00      	nop
  }
  while (Delay --);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1e5a      	subs	r2, r3, #1
 80028c2:	60fa      	str	r2, [r7, #12]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f9      	bne.n	80028bc <RCC_Delay+0x1c>
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000000 	.word	0x20000000
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d07d      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80028f8:	2300      	movs	r3, #0
 80028fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002908:	4b4c      	ldr	r3, [pc, #304]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4a4b      	ldr	r2, [pc, #300]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002912:	61d3      	str	r3, [r2, #28]
 8002914:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002920:	2301      	movs	r3, #1
 8002922:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d118      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002930:	4b43      	ldr	r3, [pc, #268]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a42      	ldr	r2, [pc, #264]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293c:	f7fe fec4 	bl	80016c8 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002942:	e008      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002944:	f7fe fec0 	bl	80016c8 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e06d      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002956:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002962:	4b36      	ldr	r3, [pc, #216]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d02e      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d027      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002980:	4b2e      	ldr	r3, [pc, #184]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298a:	4b2e      	ldr	r3, [pc, #184]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002990:	4b2c      	ldr	r3, [pc, #176]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002996:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d014      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fe8f 	bl	80016c8 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	e00a      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fe8b 	bl	80016c8 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029bc:	4293      	cmp	r3, r2
 80029be:	d901      	bls.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e036      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0ee      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	4917      	ldr	r1, [pc, #92]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	490b      	ldr	r1, [pc, #44]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0310 	and.w	r3, r3, #16
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4904      	ldr	r1, [pc, #16]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40007000 	.word	0x40007000
 8002a44:	42420440 	.word	0x42420440

08002a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e053      	b.n	8002b02 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fe faeb 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	ea42 0103 	orr.w	r1, r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	0c1a      	lsrs	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f002 0204 	and.w	r2, r2, #4
 8002ae0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b088      	sub	sp, #32
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_SPI_Transmit+0x22>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e11e      	b.n	8002d6a <HAL_SPI_Transmit+0x260>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b34:	f7fe fdc8 	bl	80016c8 <HAL_GetTick>
 8002b38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d002      	beq.n	8002b50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b4e:	e103      	b.n	8002d58 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <HAL_SPI_Transmit+0x52>
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d102      	bne.n	8002b62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b60:	e0fa      	b.n	8002d58 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	88fa      	ldrh	r2, [r7, #6]
 8002b7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	88fa      	ldrh	r2, [r7, #6]
 8002b80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba8:	d107      	bne.n	8002bba <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	d007      	beq.n	8002bd8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be0:	d14b      	bne.n	8002c7a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_SPI_Transmit+0xe6>
 8002bea:	8afb      	ldrh	r3, [r7, #22]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d13e      	bne.n	8002c6e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	881a      	ldrh	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	1c9a      	adds	r2, r3, #2
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c14:	e02b      	b.n	8002c6e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d112      	bne.n	8002c4a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	1c9a      	adds	r2, r3, #2
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	86da      	strh	r2, [r3, #54]	; 0x36
 8002c48:	e011      	b.n	8002c6e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c4a:	f7fe fd3d 	bl	80016c8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d803      	bhi.n	8002c62 <HAL_SPI_Transmit+0x158>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d102      	bne.n	8002c68 <HAL_SPI_Transmit+0x15e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002c6c:	e074      	b.n	8002d58 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ce      	bne.n	8002c16 <HAL_SPI_Transmit+0x10c>
 8002c78:	e04c      	b.n	8002d14 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_SPI_Transmit+0x17e>
 8002c82:	8afb      	ldrh	r3, [r7, #22]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d140      	bne.n	8002d0a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	7812      	ldrb	r2, [r2, #0]
 8002c94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002cae:	e02c      	b.n	8002d0a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d113      	bne.n	8002ce6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	330c      	adds	r3, #12
 8002cc8:	7812      	ldrb	r2, [r2, #0]
 8002cca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	1c5a      	adds	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ce4:	e011      	b.n	8002d0a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ce6:	f7fe fcef 	bl	80016c8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d803      	bhi.n	8002cfe <HAL_SPI_Transmit+0x1f4>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d102      	bne.n	8002d04 <HAL_SPI_Transmit+0x1fa>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d08:	e026      	b.n	8002d58 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1cd      	bne.n	8002cb0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	6839      	ldr	r1, [r7, #0]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 fa43 	bl	80031a4 <SPI_EndRxTxTransaction>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e000      	b.n	8002d58 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002d56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b08c      	sub	sp, #48	; 0x30
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d80:	2301      	movs	r3, #1
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_SPI_TransmitReceive+0x26>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e18a      	b.n	80030ae <HAL_SPI_TransmitReceive+0x33c>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da0:	f7fe fc92 	bl	80016c8 <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d00f      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0x70>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc8:	d107      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <HAL_SPI_TransmitReceive+0x68>
 8002dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d003      	beq.n	8002de2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002de0:	e15b      	b.n	800309a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x82>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d002      	beq.n	8002df4 <HAL_SPI_TransmitReceive+0x82>
 8002dee:	887b      	ldrh	r3, [r7, #2]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d103      	bne.n	8002dfc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002dfa:	e14e      	b.n	800309a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d003      	beq.n	8002e10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2205      	movs	r2, #5
 8002e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	887a      	ldrh	r2, [r7, #2]
 8002e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	887a      	ldrh	r2, [r7, #2]
 8002e32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d007      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6c:	d178      	bne.n	8002f60 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x10a>
 8002e76:	8b7b      	ldrh	r3, [r7, #26]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d166      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ea0:	e053      	b.n	8002f4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d11b      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x176>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d016      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x176>
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d113      	bne.n	8002ee8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d119      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x1b8>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d014      	beq.n	8002f2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f26:	2301      	movs	r3, #1
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f2a:	f7fe fbcd 	bl	80016c8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d807      	bhi.n	8002f4a <HAL_SPI_TransmitReceive+0x1d8>
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d003      	beq.n	8002f4a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f48:	e0a7      	b.n	800309a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1a6      	bne.n	8002ea2 <HAL_SPI_TransmitReceive+0x130>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1a1      	bne.n	8002ea2 <HAL_SPI_TransmitReceive+0x130>
 8002f5e:	e07c      	b.n	800305a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0x1fc>
 8002f68:	8b7b      	ldrh	r3, [r7, #26]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d16b      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	7812      	ldrb	r2, [r2, #0]
 8002f7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f94:	e057      	b.n	8003046 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d11c      	bne.n	8002fde <HAL_SPI_TransmitReceive+0x26c>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d017      	beq.n	8002fde <HAL_SPI_TransmitReceive+0x26c>
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d114      	bne.n	8002fde <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	7812      	ldrb	r2, [r2, #0]
 8002fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d119      	bne.n	8003020 <HAL_SPI_TransmitReceive+0x2ae>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d014      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800301c:	2301      	movs	r3, #1
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003020:	f7fe fb52 	bl	80016c8 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800302c:	429a      	cmp	r2, r3
 800302e:	d803      	bhi.n	8003038 <HAL_SPI_TransmitReceive+0x2c6>
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d102      	bne.n	800303e <HAL_SPI_TransmitReceive+0x2cc>
 8003038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003044:	e029      	b.n	800309a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1a2      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x224>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d19d      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f8a0 	bl	80031a4 <SPI_EndRxTxTransaction>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d006      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003076:	e010      	b.n	800309a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	e000      	b.n	800309a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003098:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3730      	adds	r7, #48	; 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c4:	b2db      	uxtb	r3, r3
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e0:	e04c      	b.n	800317c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d048      	beq.n	800317c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80030ea:	f7fe faed 	bl	80016c8 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d902      	bls.n	8003100 <SPI_WaitFlagStateUntilTimeout+0x30>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d13d      	bne.n	800317c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800310e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003118:	d111      	bne.n	800313e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d004      	beq.n	800312e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	d107      	bne.n	800313e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d10f      	bne.n	8003168 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003166:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e00f      	b.n	800319c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d1a3      	bne.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2200      	movs	r2, #0
 80031b8:	2180      	movs	r1, #128	; 0x80
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f7ff ff88 	bl	80030d0 <SPI_WaitFlagStateUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e000      	b.n	80031d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e01d      	b.n	800322e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7fe f838 	bl	800127c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f000 fb44 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b06      	cmp	r3, #6
 800325e:	d007      	beq.n	8003270 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e01d      	b.n	80032ca <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f815 	bl	80032d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f000 faf6 	bl	80038ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fd58 	bl	8003dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a10      	ldr	r2, [pc, #64]	; (8003344 <HAL_TIM_PWM_Start+0x60>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d107      	bne.n	8003316 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d007      	beq.n	8003338 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40012c00 	.word	0x40012c00

08003348 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b02      	cmp	r3, #2
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b02      	cmp	r3, #2
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa73 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa66 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa75 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0204 	mvn.w	r2, #4
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa49 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa3c 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa4b 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b08      	cmp	r3, #8
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0208 	mvn.w	r2, #8
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2204      	movs	r2, #4
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fa1f 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa12 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fa21 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b10      	cmp	r3, #16
 8003458:	d122      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b10      	cmp	r3, #16
 8003466:	d11b      	bne.n	80034a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9f5 	bl	8003876 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9e8 	bl	8003864 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f9f7 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f9c3 	bl	8003852 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b80      	cmp	r3, #128	; 0x80
 80034d8:	d10e      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b80      	cmp	r3, #128	; 0x80
 80034e6:	d107      	bne.n	80034f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fccb 	bl	8003e8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d10e      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d107      	bne.n	8003524 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800351c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9bb 	bl	800389a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d10e      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b20      	cmp	r3, #32
 800353e:	d107      	bne.n	8003550 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f06f 0220 	mvn.w	r2, #32
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fc96 	bl	8003e7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800356e:	2302      	movs	r3, #2
 8003570:	e0b4      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b0c      	cmp	r3, #12
 8003586:	f200 809f 	bhi.w	80036c8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080036c9 	.word	0x080036c9
 8003598:	080036c9 	.word	0x080036c9
 800359c:	080036c9 	.word	0x080036c9
 80035a0:	08003605 	.word	0x08003605
 80035a4:	080036c9 	.word	0x080036c9
 80035a8:	080036c9 	.word	0x080036c9
 80035ac:	080036c9 	.word	0x080036c9
 80035b0:	08003647 	.word	0x08003647
 80035b4:	080036c9 	.word	0x080036c9
 80035b8:	080036c9 	.word	0x080036c9
 80035bc:	080036c9 	.word	0x080036c9
 80035c0:	08003687 	.word	0x08003687
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f9d0 	bl	8003970 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0208 	orr.w	r2, r2, #8
 80035de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0204 	bic.w	r2, r2, #4
 80035ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	619a      	str	r2, [r3, #24]
      break;
 8003602:	e062      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fa16 	bl	8003a3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6999      	ldr	r1, [r3, #24]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	619a      	str	r2, [r3, #24]
      break;
 8003644:	e041      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fa5f 	bl	8003b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0208 	orr.w	r2, r2, #8
 8003660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0204 	bic.w	r2, r2, #4
 8003670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	61da      	str	r2, [r3, #28]
      break;
 8003684:	e021      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 faa9 	bl	8003be4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69d9      	ldr	r1, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	021a      	lsls	r2, r3, #8
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	61da      	str	r2, [r3, #28]
      break;
 80036c6:	e000      	b.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80036c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_ConfigClockSource+0x18>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0a6      	b.n	800384a <HAL_TIM_ConfigClockSource+0x166>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003722:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d067      	beq.n	8003804 <HAL_TIM_ConfigClockSource+0x120>
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	d80b      	bhi.n	8003750 <HAL_TIM_ConfigClockSource+0x6c>
 8003738:	2b10      	cmp	r3, #16
 800373a:	d073      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x140>
 800373c:	2b10      	cmp	r3, #16
 800373e:	d802      	bhi.n	8003746 <HAL_TIM_ConfigClockSource+0x62>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d06f      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003744:	e078      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003746:	2b20      	cmp	r3, #32
 8003748:	d06c      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x140>
 800374a:	2b30      	cmp	r3, #48	; 0x30
 800374c:	d06a      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800374e:	e073      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d00d      	beq.n	8003770 <HAL_TIM_ConfigClockSource+0x8c>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d804      	bhi.n	8003762 <HAL_TIM_ConfigClockSource+0x7e>
 8003758:	2b50      	cmp	r3, #80	; 0x50
 800375a:	d033      	beq.n	80037c4 <HAL_TIM_ConfigClockSource+0xe0>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d041      	beq.n	80037e4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003760:	e06a      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003766:	d066      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x152>
 8003768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800376c:	d017      	beq.n	800379e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800376e:	e063      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6818      	ldr	r0, [r3, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	6899      	ldr	r1, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f000 faf5 	bl	8003d6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003792:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]
      break;
 800379c:	e04c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f000 fade 	bl	8003d6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037c0:	609a      	str	r2, [r3, #8]
      break;
 80037c2:	e039      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	461a      	mov	r2, r3
 80037d2:	f000 fa55 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2150      	movs	r1, #80	; 0x50
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 faac 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 80037e2:	e029      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	461a      	mov	r2, r3
 80037f2:	f000 fa73 	bl	8003cdc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2160      	movs	r1, #96	; 0x60
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fa9c 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003802:	e019      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	461a      	mov	r2, r3
 8003812:	f000 fa35 	bl	8003c80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2140      	movs	r1, #64	; 0x40
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fa8c 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003822:	e009      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	4610      	mov	r0, r2
 8003830:	f000 fa83 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003834:	e000      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a29      	ldr	r2, [pc, #164]	; (8003964 <TIM_Base_SetConfig+0xb8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a26      	ldr	r2, [pc, #152]	; (8003968 <TIM_Base_SetConfig+0xbc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x30>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a25      	ldr	r2, [pc, #148]	; (800396c <TIM_Base_SetConfig+0xc0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <TIM_Base_SetConfig+0xb8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00b      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d007      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <TIM_Base_SetConfig+0xbc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_Base_SetConfig+0x62>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <TIM_Base_SetConfig+0xc0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <TIM_Base_SetConfig+0xb8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d103      	bne.n	8003954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	615a      	str	r2, [r3, #20]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr
 8003964:	40012c00 	.word	0x40012c00
 8003968:	40000400 	.word	0x40000400
 800396c:	40000800 	.word	0x40000800

08003970 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	f023 0201 	bic.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 0302 	bic.w	r3, r3, #2
 80039b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <TIM_OC1_SetConfig+0xc8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10c      	bne.n	80039e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f023 0308 	bic.w	r3, r3, #8
 80039d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <TIM_OC1_SetConfig+0xc8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d111      	bne.n	8003a12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40012c00 	.word	0x40012c00

08003a3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	f023 0210 	bic.w	r2, r3, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f023 0320 	bic.w	r3, r3, #32
 8003a86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <TIM_OC2_SetConfig+0xd0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10d      	bne.n	8003ab8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <TIM_OC2_SetConfig+0xd0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d113      	bne.n	8003ae8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00

08003b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	; (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10d      	bne.n	8003b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d113      	bne.n	8003bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00

08003be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <TIM_OC4_SetConfig+0x98>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d109      	bne.n	8003c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr
 8003c7c:	40012c00 	.word	0x40012c00

08003c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f023 030a 	bic.w	r3, r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f023 0210 	bic.w	r2, r3, #16
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	031b      	lsls	r3, r3, #12
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	621a      	str	r2, [r3, #32]
}
 8003d30:	bf00      	nop
 8003d32:	371c      	adds	r7, #28
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr

08003d6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b087      	sub	sp, #28
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	021a      	lsls	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	609a      	str	r2, [r3, #8]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1a      	ldr	r2, [r3, #32]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 031f 	and.w	r3, r3, #31
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e032      	b.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e44:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e03f      	b.n	8003f32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7fd fa56 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2224      	movs	r2, #36	; 0x24
 8003ed0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f829 	bl	8003f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f76:	f023 030c 	bic.w	r3, r3, #12
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a52      	ldr	r2, [pc, #328]	; (80040e8 <UART_SetConfig+0x1ac>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d14e      	bne.n	8004042 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7fe fc68 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009a      	lsls	r2, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc0:	4a4a      	ldr	r2, [pc, #296]	; (80040ec <UART_SetConfig+0x1b0>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	0119      	lsls	r1, r3, #4
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe0:	4b42      	ldr	r3, [pc, #264]	; (80040ec <UART_SetConfig+0x1b0>)
 8003fe2:	fba3 0302 	umull	r0, r3, r3, r2
 8003fe6:	095b      	lsrs	r3, r3, #5
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	fb00 f303 	mul.w	r3, r0, r3
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	3332      	adds	r3, #50	; 0x32
 8003ff4:	4a3d      	ldr	r2, [pc, #244]	; (80040ec <UART_SetConfig+0x1b0>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004000:	4419      	add	r1, r3
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009a      	lsls	r2, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	fbb2 f2f3 	udiv	r2, r2, r3
 8004018:	4b34      	ldr	r3, [pc, #208]	; (80040ec <UART_SetConfig+0x1b0>)
 800401a:	fba3 0302 	umull	r0, r3, r3, r2
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2064      	movs	r0, #100	; 0x64
 8004022:	fb00 f303 	mul.w	r3, r0, r3
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	3332      	adds	r3, #50	; 0x32
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <UART_SetConfig+0x1b0>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	440a      	add	r2, r1
 800403e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004040:	e04d      	b.n	80040de <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004042:	f7fe fc05 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 8004046:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009a      	lsls	r2, r3, #2
 8004052:	441a      	add	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	4a23      	ldr	r2, [pc, #140]	; (80040ec <UART_SetConfig+0x1b0>)
 8004060:	fba2 2303 	umull	r2, r3, r2, r3
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	0119      	lsls	r1, r3, #4
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4413      	add	r3, r2
 8004070:	009a      	lsls	r2, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	fbb2 f2f3 	udiv	r2, r2, r3
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <UART_SetConfig+0x1b0>)
 8004080:	fba3 0302 	umull	r0, r3, r3, r2
 8004084:	095b      	lsrs	r3, r3, #5
 8004086:	2064      	movs	r0, #100	; 0x64
 8004088:	fb00 f303 	mul.w	r3, r0, r3
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	3332      	adds	r3, #50	; 0x32
 8004092:	4a16      	ldr	r2, [pc, #88]	; (80040ec <UART_SetConfig+0x1b0>)
 8004094:	fba2 2303 	umull	r2, r3, r2, r3
 8004098:	095b      	lsrs	r3, r3, #5
 800409a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800409e:	4419      	add	r1, r3
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	009a      	lsls	r2, r3, #2
 80040aa:	441a      	add	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b6:	4b0d      	ldr	r3, [pc, #52]	; (80040ec <UART_SetConfig+0x1b0>)
 80040b8:	fba3 0302 	umull	r0, r3, r3, r2
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	2064      	movs	r0, #100	; 0x64
 80040c0:	fb00 f303 	mul.w	r3, r0, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	3332      	adds	r3, #50	; 0x32
 80040ca:	4a08      	ldr	r2, [pc, #32]	; (80040ec <UART_SetConfig+0x1b0>)
 80040cc:	fba2 2303 	umull	r2, r3, r2, r3
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	f003 020f 	and.w	r2, r3, #15
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	440a      	add	r2, r1
 80040dc:	609a      	str	r2, [r3, #8]
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40013800 	.word	0x40013800
 80040ec:	51eb851f 	.word	0x51eb851f

080040f0 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040f0:	b084      	sub	sp, #16
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	f107 0014 	add.w	r0, r7, #20
 80040fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	b004      	add	sp, #16
 800410e:	4770      	bx	lr

08004110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004118:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800411c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004124:	b29a      	uxth	r2, r3
 8004126:	89fb      	ldrh	r3, [r7, #14]
 8004128:	4313      	orrs	r3, r2
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800413e:	b480      	push	{r7}
 8004140:	b085      	sub	sp, #20
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004146:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800414a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004152:	b29b      	uxth	r3, r3
 8004154:	b21a      	sxth	r2, r3
 8004156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800415a:	43db      	mvns	r3, r3
 800415c:	b21b      	sxth	r3, r3
 800415e:	4013      	ands	r3, r2
 8004160:	b21b      	sxth	r3, r3
 8004162:	b29a      	uxth	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800418e:	b084      	sub	sp, #16
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	f107 0014 	add.w	r0, r7, #20
 800419c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7ff ffa5 	bl	8004110 <USB_EnableGlobalInt>

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041d2:	b004      	add	sp, #16
 80041d4:	4770      	bx	lr

080041d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
	...

080041ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80041f0:	4904      	ldr	r1, [pc, #16]	; (8004204 <MX_FATFS_Init+0x18>)
 80041f2:	4805      	ldr	r0, [pc, #20]	; (8004208 <MX_FATFS_Init+0x1c>)
 80041f4:	f003 fd7c 	bl	8007cf0 <FATFS_LinkDriver>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <MX_FATFS_Init+0x20>)
 80041fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200017f4 	.word	0x200017f4
 8004208:	2000000c 	.word	0x2000000c
 800420c:	200017f8 	.word	0x200017f8

08004210 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004214:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr
	...

08004220 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8004224:	2200      	movs	r2, #0
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <SELECT+0x14>)
 800422a:	f7fd fe41 	bl	8001eb0 <HAL_GPIO_WritePin>
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40010c00 	.word	0x40010c00

08004238 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800423c:	2201      	movs	r2, #1
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	4802      	ldr	r0, [pc, #8]	; (800424c <DESELECT+0x14>)
 8004242:	f7fd fe35 	bl	8001eb0 <HAL_GPIO_WritePin>
}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40010c00 	.word	0x40010c00

08004250 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800425a:	bf00      	nop
 800425c:	4808      	ldr	r0, [pc, #32]	; (8004280 <SPI_TxByte+0x30>)
 800425e:	f7fe ff2a 	bl	80030b6 <HAL_SPI_GetState>
 8004262:	4603      	mov	r3, r0
 8004264:	2b01      	cmp	r3, #1
 8004266:	d1f9      	bne.n	800425c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8004268:	1df9      	adds	r1, r7, #7
 800426a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426e:	2201      	movs	r2, #1
 8004270:	4803      	ldr	r0, [pc, #12]	; (8004280 <SPI_TxByte+0x30>)
 8004272:	f7fe fc4a 	bl	8002b0a <HAL_SPI_Transmit>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200013a4 	.word	0x200013a4

08004284 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800428a:	23ff      	movs	r3, #255	; 0xff
 800428c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8004292:	bf00      	nop
 8004294:	4809      	ldr	r0, [pc, #36]	; (80042bc <SPI_RxByte+0x38>)
 8004296:	f7fe ff0e 	bl	80030b6 <HAL_SPI_GetState>
 800429a:	4603      	mov	r3, r0
 800429c:	2b01      	cmp	r3, #1
 800429e:	d1f9      	bne.n	8004294 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80042a0:	1dba      	adds	r2, r7, #6
 80042a2:	1df9      	adds	r1, r7, #7
 80042a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2301      	movs	r3, #1
 80042ac:	4803      	ldr	r0, [pc, #12]	; (80042bc <SPI_RxByte+0x38>)
 80042ae:	f7fe fd60 	bl	8002d72 <HAL_SPI_TransmitReceive>
  
  return data;
 80042b2:	79bb      	ldrb	r3, [r7, #6]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	200013a4 	.word	0x200013a4

080042c0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80042c8:	f7ff ffdc 	bl	8004284 <SPI_RxByte>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	701a      	strb	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	3708      	adds	r7, #8
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <SD_ReadyWait+0x34>)
 80042e4:	2232      	movs	r2, #50	; 0x32
 80042e6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80042e8:	f7ff ffcc 	bl	8004284 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80042ec:	f7ff ffca 	bl	8004284 <SPI_RxByte>
 80042f0:	4603      	mov	r3, r0
 80042f2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	2bff      	cmp	r3, #255	; 0xff
 80042f8:	d004      	beq.n	8004304 <SD_ReadyWait+0x28>
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <SD_ReadyWait+0x34>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f3      	bne.n	80042ec <SD_ReadyWait+0x10>
  
  return res;
 8004304:	79fb      	ldrb	r3, [r7, #7]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	200017ec 	.word	0x200017ec

08004314 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800431a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800431e:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8004320:	f7ff ff8a 	bl	8004238 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	e005      	b.n	8004336 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800432a:	20ff      	movs	r0, #255	; 0xff
 800432c:	f7ff ff90 	bl	8004250 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3301      	adds	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b09      	cmp	r3, #9
 800433a:	ddf6      	ble.n	800432a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800433c:	f7ff ff70 	bl	8004220 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8004354:	2395      	movs	r3, #149	; 0x95
 8004356:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e009      	b.n	8004372 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800435e:	1d3a      	adds	r2, r7, #4
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff72 	bl	8004250 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b05      	cmp	r3, #5
 8004376:	ddf2      	ble.n	800435e <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8004378:	e002      	b.n	8004380 <SD_PowerOn+0x6c>
  {
    Count--;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	3b01      	subs	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8004380:	f7ff ff80 	bl	8004284 <SPI_RxByte>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d002      	beq.n	8004390 <SD_PowerOn+0x7c>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f4      	bne.n	800437a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8004390:	f7ff ff52 	bl	8004238 <DESELECT>
  SPI_TxByte(0XFF);
 8004394:	20ff      	movs	r0, #255	; 0xff
 8004396:	f7ff ff5b 	bl	8004250 <SPI_TxByte>
  
  PowerFlag = 1;
 800439a:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <SD_PowerOn+0x94>)
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000042 	.word	0x20000042

080043ac <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <SD_PowerOff+0x14>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	701a      	strb	r2, [r3, #0]
}
 80043b6:	bf00      	nop
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000042 	.word	0x20000042

080043c4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <SD_CheckPower+0x10>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000042 	.word	0x20000042

080043d8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <SD_RxDataBlock+0x68>)
 80043e4:	220a      	movs	r2, #10
 80043e6:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80043e8:	f7ff ff4c 	bl	8004284 <SPI_RxByte>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2bff      	cmp	r3, #255	; 0xff
 80043f4:	d104      	bne.n	8004400 <SD_RxDataBlock+0x28>
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <SD_RxDataBlock+0x68>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f3      	bne.n	80043e8 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2bfe      	cmp	r3, #254	; 0xfe
 8004404:	d001      	beq.n	800440a <SD_RxDataBlock+0x32>
    return FALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	e016      	b.n	8004438 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff55 	bl	80042c0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff4f 	bl	80042c0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	3b02      	subs	r3, #2
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ed      	bne.n	800440a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800442e:	f7ff ff29 	bl	8004284 <SPI_RxByte>
  SPI_RxByte();
 8004432:	f7ff ff27 	bl	8004284 <SPI_RxByte>
  
  return TRUE;
 8004436:	2301      	movs	r3, #1
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200017ed 	.word	0x200017ed

08004444 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8004454:	f7ff ff42 	bl	80042dc <SD_ReadyWait>
 8004458:	4603      	mov	r3, r0
 800445a:	2bff      	cmp	r3, #255	; 0xff
 800445c:	d001      	beq.n	8004462 <SD_TxDataBlock+0x1e>
    return FALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	e040      	b.n	80044e4 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fef3 	bl	8004250 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	2bfd      	cmp	r3, #253	; 0xfd
 800446e:	d031      	beq.n	80044d4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fee7 	bl	8004250 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fee0 	bl	8004250 <SPI_TxByte>
    } while (--wc);
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	3b01      	subs	r3, #1
 8004494:	73bb      	strb	r3, [r7, #14]
 8004496:	7bbb      	ldrb	r3, [r7, #14]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1eb      	bne.n	8004474 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800449c:	f7ff fef2 	bl	8004284 <SPI_RxByte>
    SPI_RxByte();
 80044a0:	f7ff fef0 	bl	8004284 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80044a4:	e00b      	b.n	80044be <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80044a6:	f7ff feed 	bl	8004284 <SPI_RxByte>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d006      	beq.n	80044c6 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80044b8:	7b7b      	ldrb	r3, [r7, #13]
 80044ba:	3301      	adds	r3, #1
 80044bc:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80044be:	7b7b      	ldrb	r3, [r7, #13]
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d9f0      	bls.n	80044a6 <SD_TxDataBlock+0x62>
 80044c4:	e000      	b.n	80044c8 <SD_TxDataBlock+0x84>
        break;
 80044c6:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80044c8:	bf00      	nop
 80044ca:	f7ff fedb 	bl	8004284 <SPI_RxByte>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0fa      	beq.n	80044ca <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	f003 031f 	and.w	r3, r3, #31
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d101      	bne.n	80044e2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80044f8:	f7ff fef0 	bl	80042dc <SD_ReadyWait>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2bff      	cmp	r3, #255	; 0xff
 8004500:	d001      	beq.n	8004506 <SD_SendCmd+0x1a>
    return 0xFF;
 8004502:	23ff      	movs	r3, #255	; 0xff
 8004504:	e040      	b.n	8004588 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fea1 	bl	8004250 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	0e1b      	lsrs	r3, r3, #24
 8004512:	b2db      	uxtb	r3, r3
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff fe9b 	bl	8004250 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	b2db      	uxtb	r3, r3
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fe95 	bl	8004250 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff fe8f 	bl	8004250 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fe8a 	bl	8004250 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8004540:	79fb      	ldrb	r3, [r7, #7]
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d101      	bne.n	800454a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8004546:	2395      	movs	r3, #149	; 0x95
 8004548:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	2b48      	cmp	r3, #72	; 0x48
 800454e:	d101      	bne.n	8004554 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8004550:	2387      	movs	r3, #135	; 0x87
 8004552:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fe7a 	bl	8004250 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	2b4c      	cmp	r3, #76	; 0x4c
 8004560:	d101      	bne.n	8004566 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8004562:	f7ff fe8f 	bl	8004284 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8004566:	230a      	movs	r3, #10
 8004568:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800456a:	f7ff fe8b 	bl	8004284 <SPI_RxByte>
 800456e:	4603      	mov	r3, r0
 8004570:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8004572:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004576:	2b00      	cmp	r3, #0
 8004578:	da05      	bge.n	8004586 <SD_SendCmd+0x9a>
 800457a:	7bbb      	ldrb	r3, [r7, #14]
 800457c:	3b01      	subs	r3, #1
 800457e:	73bb      	strb	r3, [r7, #14]
 8004580:	7bbb      	ldrb	r3, [r7, #14]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f1      	bne.n	800456a <SD_SendCmd+0x7e>
  
  return res;
 8004586:	7b7b      	ldrb	r3, [r7, #13]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0d5      	b.n	8004750 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80045a4:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <SD_disk_initialize+0x1c8>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <SD_disk_initialize+0x2a>
    return Stat;        
 80045b2:	4b69      	ldr	r3, [pc, #420]	; (8004758 <SD_disk_initialize+0x1c8>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	e0ca      	b.n	8004750 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80045ba:	f7ff feab 	bl	8004314 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80045be:	f7ff fe2f 	bl	8004220 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80045c2:	2300      	movs	r3, #0
 80045c4:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80045c6:	2100      	movs	r1, #0
 80045c8:	2040      	movs	r0, #64	; 0x40
 80045ca:	f7ff ff8f 	bl	80044ec <SD_SendCmd>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	f040 80a5 	bne.w	8004720 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80045d6:	4b61      	ldr	r3, [pc, #388]	; (800475c <SD_disk_initialize+0x1cc>)
 80045d8:	2264      	movs	r2, #100	; 0x64
 80045da:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80045dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045e0:	2048      	movs	r0, #72	; 0x48
 80045e2:	f7ff ff83 	bl	80044ec <SD_SendCmd>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d158      	bne.n	800469e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]
 80045f0:	e00c      	b.n	800460c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80045f2:	7bfc      	ldrb	r4, [r7, #15]
 80045f4:	f7ff fe46 	bl	8004284 <SPI_RxByte>
 80045f8:	4603      	mov	r3, r0
 80045fa:	461a      	mov	r2, r3
 80045fc:	f107 0310 	add.w	r3, r7, #16
 8004600:	4423      	add	r3, r4
 8004602:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	3301      	adds	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d9ef      	bls.n	80045f2 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8004612:	7abb      	ldrb	r3, [r7, #10]
 8004614:	2b01      	cmp	r3, #1
 8004616:	f040 8083 	bne.w	8004720 <SD_disk_initialize+0x190>
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	2baa      	cmp	r3, #170	; 0xaa
 800461e:	d17f      	bne.n	8004720 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8004620:	2100      	movs	r1, #0
 8004622:	2077      	movs	r0, #119	; 0x77
 8004624:	f7ff ff62 	bl	80044ec <SD_SendCmd>
 8004628:	4603      	mov	r3, r0
 800462a:	2b01      	cmp	r3, #1
 800462c:	d807      	bhi.n	800463e <SD_disk_initialize+0xae>
 800462e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004632:	2069      	movs	r0, #105	; 0x69
 8004634:	f7ff ff5a 	bl	80044ec <SD_SendCmd>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800463e:	4b47      	ldr	r3, [pc, #284]	; (800475c <SD_disk_initialize+0x1cc>)
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1eb      	bne.n	8004620 <SD_disk_initialize+0x90>
 8004648:	e000      	b.n	800464c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800464a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 800464c:	4b43      	ldr	r3, [pc, #268]	; (800475c <SD_disk_initialize+0x1cc>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d064      	beq.n	8004720 <SD_disk_initialize+0x190>
 8004656:	2100      	movs	r1, #0
 8004658:	207a      	movs	r0, #122	; 0x7a
 800465a:	f7ff ff47 	bl	80044ec <SD_SendCmd>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d15d      	bne.n	8004720 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8004664:	2300      	movs	r3, #0
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	e00c      	b.n	8004684 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800466a:	7bfc      	ldrb	r4, [r7, #15]
 800466c:	f7ff fe0a 	bl	8004284 <SPI_RxByte>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	4423      	add	r3, r4
 800467a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	3301      	adds	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d9ef      	bls.n	800466a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800468a:	7a3b      	ldrb	r3, [r7, #8]
 800468c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <SD_disk_initialize+0x108>
 8004694:	2306      	movs	r3, #6
 8004696:	e000      	b.n	800469a <SD_disk_initialize+0x10a>
 8004698:	2302      	movs	r3, #2
 800469a:	73bb      	strb	r3, [r7, #14]
 800469c:	e040      	b.n	8004720 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800469e:	2100      	movs	r1, #0
 80046a0:	2077      	movs	r0, #119	; 0x77
 80046a2:	f7ff ff23 	bl	80044ec <SD_SendCmd>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d808      	bhi.n	80046be <SD_disk_initialize+0x12e>
 80046ac:	2100      	movs	r1, #0
 80046ae:	2069      	movs	r0, #105	; 0x69
 80046b0:	f7ff ff1c 	bl	80044ec <SD_SendCmd>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d801      	bhi.n	80046be <SD_disk_initialize+0x12e>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e000      	b.n	80046c0 <SD_disk_initialize+0x130>
 80046be:	2301      	movs	r3, #1
 80046c0:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80046c2:	7bbb      	ldrb	r3, [r7, #14]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d10e      	bne.n	80046e6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80046c8:	2100      	movs	r1, #0
 80046ca:	2077      	movs	r0, #119	; 0x77
 80046cc:	f7ff ff0e 	bl	80044ec <SD_SendCmd>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d80e      	bhi.n	80046f4 <SD_disk_initialize+0x164>
 80046d6:	2100      	movs	r1, #0
 80046d8:	2069      	movs	r0, #105	; 0x69
 80046da:	f7ff ff07 	bl	80044ec <SD_SendCmd>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80046e4:	e00d      	b.n	8004702 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80046e6:	2100      	movs	r1, #0
 80046e8:	2041      	movs	r0, #65	; 0x41
 80046ea:	f7ff feff 	bl	80044ec <SD_SendCmd>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <SD_disk_initialize+0x1cc>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e1      	bne.n	80046c2 <SD_disk_initialize+0x132>
 80046fe:	e000      	b.n	8004702 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8004700:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8004702:	4b16      	ldr	r3, [pc, #88]	; (800475c <SD_disk_initialize+0x1cc>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <SD_disk_initialize+0x18c>
 800470c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004710:	2050      	movs	r0, #80	; 0x50
 8004712:	f7ff feeb 	bl	80044ec <SD_SendCmd>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8004720:	4a0f      	ldr	r2, [pc, #60]	; (8004760 <SD_disk_initialize+0x1d0>)
 8004722:	7bbb      	ldrb	r3, [r7, #14]
 8004724:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8004726:	f7ff fd87 	bl	8004238 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800472a:	f7ff fdab 	bl	8004284 <SPI_RxByte>
  
  if (type) 
 800472e:	7bbb      	ldrb	r3, [r7, #14]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <SD_disk_initialize+0x1c8>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	b2da      	uxtb	r2, r3
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <SD_disk_initialize+0x1c8>)
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e001      	b.n	800474a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8004746:	f7ff fe31 	bl	80043ac <SD_PowerOff>
  }
  
  return Stat;
 800474a:	4b03      	ldr	r3, [pc, #12]	; (8004758 <SD_disk_initialize+0x1c8>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b2db      	uxtb	r3, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	bd90      	pop	{r4, r7, pc}
 8004758:	20000009 	.word	0x20000009
 800475c:	200017ed 	.word	0x200017ed
 8004760:	20000041 	.word	0x20000041

08004764 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8004774:	2301      	movs	r3, #1
 8004776:	e002      	b.n	800477e <SD_disk_status+0x1a>
  
  return Stat;
 8004778:	4b03      	ldr	r3, [pc, #12]	; (8004788 <SD_disk_status+0x24>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	b2db      	uxtb	r3, r3
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	20000009 	.word	0x20000009

0800478c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4603      	mov	r3, r0
 800479a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d102      	bne.n	80047a8 <SD_disk_read+0x1c>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <SD_disk_read+0x20>
    return RES_PARERR;
 80047a8:	2304      	movs	r3, #4
 80047aa:	e051      	b.n	8004850 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80047ac:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <SD_disk_read+0xcc>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <SD_disk_read+0x32>
    return RES_NOTRDY;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e048      	b.n	8004850 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80047be:	4b27      	ldr	r3, [pc, #156]	; (800485c <SD_disk_read+0xd0>)
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80047d0:	f7ff fd26 	bl	8004220 <SELECT>
  
  if (count == 1) 
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d111      	bne.n	80047fe <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	2051      	movs	r0, #81	; 0x51
 80047de:	f7ff fe85 	bl	80044ec <SD_SendCmd>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d129      	bne.n	800483c <SD_disk_read+0xb0>
 80047e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047ec:	68b8      	ldr	r0, [r7, #8]
 80047ee:	f7ff fdf3 	bl	80043d8 <SD_RxDataBlock>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d021      	beq.n	800483c <SD_disk_read+0xb0>
      count = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	e01e      	b.n	800483c <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	2052      	movs	r0, #82	; 0x52
 8004802:	f7ff fe73 	bl	80044ec <SD_SendCmd>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d117      	bne.n	800483c <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 800480c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004810:	68b8      	ldr	r0, [r7, #8]
 8004812:	f7ff fde1 	bl	80043d8 <SD_RxDataBlock>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004822:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	3b01      	subs	r3, #1
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ed      	bne.n	800480c <SD_disk_read+0x80>
 8004830:	e000      	b.n	8004834 <SD_disk_read+0xa8>
          break;
 8004832:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8004834:	2100      	movs	r1, #0
 8004836:	204c      	movs	r0, #76	; 0x4c
 8004838:	f7ff fe58 	bl	80044ec <SD_SendCmd>
    }
  }
  
  DESELECT();
 800483c:	f7ff fcfc 	bl	8004238 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8004840:	f7ff fd20 	bl	8004284 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000009 	.word	0x20000009
 800485c:	20000041 	.word	0x20000041

08004860 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8004870:	7bfb      	ldrb	r3, [r7, #15]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <SD_disk_write+0x1c>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d101      	bne.n	8004880 <SD_disk_write+0x20>
    return RES_PARERR;
 800487c:	2304      	movs	r3, #4
 800487e:	e06b      	b.n	8004958 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8004880:	4b37      	ldr	r3, [pc, #220]	; (8004960 <SD_disk_write+0x100>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800488e:	2303      	movs	r3, #3
 8004890:	e062      	b.n	8004958 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8004892:	4b33      	ldr	r3, [pc, #204]	; (8004960 <SD_disk_write+0x100>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d001      	beq.n	80048a4 <SD_disk_write+0x44>
    return RES_WRPRT;
 80048a0:	2302      	movs	r3, #2
 80048a2:	e059      	b.n	8004958 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80048a4:	4b2f      	ldr	r3, [pc, #188]	; (8004964 <SD_disk_write+0x104>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	025b      	lsls	r3, r3, #9
 80048b4:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80048b6:	f7ff fcb3 	bl	8004220 <SELECT>
  
  if (count == 1) 
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d110      	bne.n	80048e2 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	2058      	movs	r0, #88	; 0x58
 80048c4:	f7ff fe12 	bl	80044ec <SD_SendCmd>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d13a      	bne.n	8004944 <SD_disk_write+0xe4>
 80048ce:	21fe      	movs	r1, #254	; 0xfe
 80048d0:	68b8      	ldr	r0, [r7, #8]
 80048d2:	f7ff fdb7 	bl	8004444 <SD_TxDataBlock>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d033      	beq.n	8004944 <SD_disk_write+0xe4>
      count = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	e030      	b.n	8004944 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <SD_disk_write+0x104>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80048ee:	2100      	movs	r1, #0
 80048f0:	2077      	movs	r0, #119	; 0x77
 80048f2:	f7ff fdfb 	bl	80044ec <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	2057      	movs	r0, #87	; 0x57
 80048fa:	f7ff fdf7 	bl	80044ec <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	2059      	movs	r0, #89	; 0x59
 8004902:	f7ff fdf3 	bl	80044ec <SD_SendCmd>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d11b      	bne.n	8004944 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800490c:	21fc      	movs	r1, #252	; 0xfc
 800490e:	68b8      	ldr	r0, [r7, #8]
 8004910:	f7ff fd98 	bl	8004444 <SD_TxDataBlock>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004920:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	3b01      	subs	r3, #1
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1ee      	bne.n	800490c <SD_disk_write+0xac>
 800492e:	e000      	b.n	8004932 <SD_disk_write+0xd2>
          break;
 8004930:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8004932:	21fd      	movs	r1, #253	; 0xfd
 8004934:	2000      	movs	r0, #0
 8004936:	f7ff fd85 	bl	8004444 <SD_TxDataBlock>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <SD_disk_write+0xe4>
      {        
        count = 1;
 8004940:	2301      	movs	r3, #1
 8004942:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8004944:	f7ff fc78 	bl	8004238 <DESELECT>
  SPI_RxByte();
 8004948:	f7ff fc9c 	bl	8004284 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf14      	ite	ne
 8004952:	2301      	movne	r3, #1
 8004954:	2300      	moveq	r3, #0
 8004956:	b2db      	uxtb	r3, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	20000009 	.word	0x20000009
 8004964:	20000041 	.word	0x20000041

08004968 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004968:	b590      	push	{r4, r7, lr}
 800496a:	b08b      	sub	sp, #44	; 0x2c
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	603a      	str	r2, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
 8004974:	460b      	mov	r3, r1
 8004976:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8004982:	2304      	movs	r3, #4
 8004984:	e117      	b.n	8004bb6 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 800498c:	79bb      	ldrb	r3, [r7, #6]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d126      	bne.n	80049e0 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d00e      	beq.n	80049b8 <SD_disk_ioctl+0x50>
 800499a:	2b02      	cmp	r3, #2
 800499c:	d012      	beq.n	80049c4 <SD_disk_ioctl+0x5c>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d11a      	bne.n	80049d8 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 80049a2:	f7ff fd0f 	bl	80043c4 <SD_CheckPower>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80049ac:	f7ff fcfe 	bl	80043ac <SD_PowerOff>
      res = RES_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80049b6:	e0fc      	b.n	8004bb2 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80049b8:	f7ff fcac 	bl	8004314 <SD_PowerOn>
      res = RES_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80049c2:	e0f6      	b.n	8004bb2 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	1c5c      	adds	r4, r3, #1
 80049c8:	f7ff fcfc 	bl	80043c4 <SD_CheckPower>
 80049cc:	4603      	mov	r3, r0
 80049ce:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80049d6:	e0ec      	b.n	8004bb2 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80049de:	e0e8      	b.n	8004bb2 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80049e0:	4b77      	ldr	r3, [pc, #476]	; (8004bc0 <SD_disk_ioctl+0x258>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e0e1      	b.n	8004bb6 <SD_disk_ioctl+0x24e>
    
    SELECT();
 80049f2:	f7ff fc15 	bl	8004220 <SELECT>
    
    switch (ctrl) 
 80049f6:	79bb      	ldrb	r3, [r7, #6]
 80049f8:	2b0d      	cmp	r3, #13
 80049fa:	f200 80cb 	bhi.w	8004b94 <SD_disk_ioctl+0x22c>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <SD_disk_ioctl+0x9c>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004aff 	.word	0x08004aff
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004aef 	.word	0x08004aef
 8004a10:	08004b95 	.word	0x08004b95
 8004a14:	08004b95 	.word	0x08004b95
 8004a18:	08004b95 	.word	0x08004b95
 8004a1c:	08004b95 	.word	0x08004b95
 8004a20:	08004b95 	.word	0x08004b95
 8004a24:	08004b95 	.word	0x08004b95
 8004a28:	08004b95 	.word	0x08004b95
 8004a2c:	08004b95 	.word	0x08004b95
 8004a30:	08004b11 	.word	0x08004b11
 8004a34:	08004b35 	.word	0x08004b35
 8004a38:	08004b59 	.word	0x08004b59
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	2049      	movs	r0, #73	; 0x49
 8004a40:	f7ff fd54 	bl	80044ec <SD_SendCmd>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f040 80a8 	bne.w	8004b9c <SD_disk_ioctl+0x234>
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	2110      	movs	r1, #16
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fcc0 	bl	80043d8 <SD_RxDataBlock>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 809e 	beq.w	8004b9c <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8004a60:	7b3b      	ldrb	r3, [r7, #12]
 8004a62:	099b      	lsrs	r3, r3, #6
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d10e      	bne.n	8004a88 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004a6a:	7d7b      	ldrb	r3, [r7, #21]
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	7d3b      	ldrb	r3, [r7, #20]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8004a7e:	8bfb      	ldrh	r3, [r7, #30]
 8004a80:	029a      	lsls	r2, r3, #10
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e02e      	b.n	8004ae6 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004a88:	7c7b      	ldrb	r3, [r7, #17]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	7dbb      	ldrb	r3, [r7, #22]
 8004a92:	09db      	lsrs	r3, r3, #7
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	4413      	add	r3, r2
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	7d7b      	ldrb	r3, [r7, #21]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	f003 0306 	and.w	r3, r3, #6
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	3302      	adds	r3, #2
 8004aac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004ab0:	7d3b      	ldrb	r3, [r7, #20]
 8004ab2:	099b      	lsrs	r3, r3, #6
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	7cbb      	ldrb	r3, [r7, #18]
 8004ac6:	029b      	lsls	r3, r3, #10
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8004ad8:	8bfa      	ldrh	r2, [r7, #30]
 8004ada:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ade:	3b09      	subs	r3, #9
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8004aec:	e056      	b.n	8004b9c <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004afc:	e055      	b.n	8004baa <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8004afe:	f7ff fbed 	bl	80042dc <SD_ReadyWait>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2bff      	cmp	r3, #255	; 0xff
 8004b06:	d14b      	bne.n	8004ba0 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004b0e:	e047      	b.n	8004ba0 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004b10:	2100      	movs	r1, #0
 8004b12:	2049      	movs	r0, #73	; 0x49
 8004b14:	f7ff fcea 	bl	80044ec <SD_SendCmd>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d142      	bne.n	8004ba4 <SD_disk_ioctl+0x23c>
 8004b1e:	2110      	movs	r1, #16
 8004b20:	6a38      	ldr	r0, [r7, #32]
 8004b22:	f7ff fc59 	bl	80043d8 <SD_RxDataBlock>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d03b      	beq.n	8004ba4 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004b32:	e037      	b.n	8004ba4 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8004b34:	2100      	movs	r1, #0
 8004b36:	204a      	movs	r0, #74	; 0x4a
 8004b38:	f7ff fcd8 	bl	80044ec <SD_SendCmd>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d132      	bne.n	8004ba8 <SD_disk_ioctl+0x240>
 8004b42:	2110      	movs	r1, #16
 8004b44:	6a38      	ldr	r0, [r7, #32]
 8004b46:	f7ff fc47 	bl	80043d8 <SD_RxDataBlock>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02b      	beq.n	8004ba8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8004b56:	e027      	b.n	8004ba8 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8004b58:	2100      	movs	r1, #0
 8004b5a:	207a      	movs	r0, #122	; 0x7a
 8004b5c:	f7ff fcc6 	bl	80044ec <SD_SendCmd>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d116      	bne.n	8004b94 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b6c:	e00b      	b.n	8004b86 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8004b6e:	6a3c      	ldr	r4, [r7, #32]
 8004b70:	1c63      	adds	r3, r4, #1
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	f7ff fb86 	bl	8004284 <SPI_RxByte>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8004b7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b80:	3301      	adds	r3, #1
 8004b82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004b86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d9ef      	bls.n	8004b6e <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8004b94:	2304      	movs	r3, #4
 8004b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004b9a:	e006      	b.n	8004baa <SD_disk_ioctl+0x242>
      break;
 8004b9c:	bf00      	nop
 8004b9e:	e004      	b.n	8004baa <SD_disk_ioctl+0x242>
      break;
 8004ba0:	bf00      	nop
 8004ba2:	e002      	b.n	8004baa <SD_disk_ioctl+0x242>
      break;
 8004ba4:	bf00      	nop
 8004ba6:	e000      	b.n	8004baa <SD_disk_ioctl+0x242>
      break;
 8004ba8:	bf00      	nop
    }
    
    DESELECT();
 8004baa:	f7ff fb45 	bl	8004238 <DESELECT>
    SPI_RxByte();
 8004bae:	f7ff fb69 	bl	8004284 <SPI_RxByte>
  }
  
  return res;
 8004bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	372c      	adds	r7, #44	; 0x2c
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd90      	pop	{r4, r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000009 	.word	0x20000009

08004bc4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fcdd 	bl	8004590 <SD_disk_initialize>
 8004bd6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fdb9 	bl	8004764 <SD_disk_status>
 8004bf2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004c0c:	7bf8      	ldrb	r0, [r7, #15]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68b9      	ldr	r1, [r7, #8]
 8004c14:	f7ff fdba 	bl	800478c <SD_disk_read>
 8004c18:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004c32:	7bf8      	ldrb	r0, [r7, #15]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	f7ff fe11 	bl	8004860 <SD_disk_write>
 8004c3e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	603a      	str	r2, [r7, #0]
 8004c52:	71fb      	strb	r3, [r7, #7]
 8004c54:	460b      	mov	r3, r1
 8004c56:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8004c58:	79b9      	ldrb	r1, [r7, #6]
 8004c5a:	79fb      	ldrb	r3, [r7, #7]
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fe82 	bl	8004968 <SD_disk_ioctl>
 8004c64:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <disk_status+0x30>)
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	79fa      	ldrb	r2, [r7, #7]
 8004c88:	4905      	ldr	r1, [pc, #20]	; (8004ca0 <disk_status+0x30>)
 8004c8a:	440a      	add	r2, r1
 8004c8c:	7a12      	ldrb	r2, [r2, #8]
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4798      	blx	r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000264 	.word	0x20000264

08004ca4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	4a0d      	ldr	r2, [pc, #52]	; (8004cec <disk_initialize+0x48>)
 8004cb6:	5cd3      	ldrb	r3, [r2, r3]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d111      	bne.n	8004ce0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	4a0b      	ldr	r2, [pc, #44]	; (8004cec <disk_initialize+0x48>)
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	4a09      	ldr	r2, [pc, #36]	; (8004cec <disk_initialize+0x48>)
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	79fa      	ldrb	r2, [r7, #7]
 8004cd2:	4906      	ldr	r1, [pc, #24]	; (8004cec <disk_initialize+0x48>)
 8004cd4:	440a      	add	r2, r1
 8004cd6:	7a12      	ldrb	r2, [r2, #8]
 8004cd8:	4610      	mov	r0, r2
 8004cda:	4798      	blx	r3
 8004cdc:	4603      	mov	r3, r0
 8004cde:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000264 	.word	0x20000264

08004cf0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <disk_read+0x3c>)
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	689c      	ldr	r4, [r3, #8]
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <disk_read+0x3c>)
 8004d10:	4413      	add	r3, r2
 8004d12:	7a18      	ldrb	r0, [r3, #8]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	47a0      	blx	r4
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd90      	pop	{r4, r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000264 	.word	0x20000264

08004d30 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <disk_write+0x3c>)
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68dc      	ldr	r4, [r3, #12]
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	4a07      	ldr	r2, [pc, #28]	; (8004d6c <disk_write+0x3c>)
 8004d50:	4413      	add	r3, r2
 8004d52:	7a18      	ldrb	r0, [r3, #8]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	47a0      	blx	r4
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd90      	pop	{r4, r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000264 	.word	0x20000264

08004d70 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	603a      	str	r2, [r7, #0]
 8004d7a:	71fb      	strb	r3, [r7, #7]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <disk_ioctl+0x38>)
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	79fa      	ldrb	r2, [r7, #7]
 8004d8e:	4906      	ldr	r1, [pc, #24]	; (8004da8 <disk_ioctl+0x38>)
 8004d90:	440a      	add	r2, r1
 8004d92:	7a10      	ldrb	r0, [r2, #8]
 8004d94:	79b9      	ldrb	r1, [r7, #6]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	4798      	blx	r3
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	20000264 	.word	0x20000264

08004dac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8004dc0:	e007      	b.n	8004dd2 <mem_cpy+0x26>
		*d++ = *s++;
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	1c53      	adds	r3, r2, #1
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	1c59      	adds	r1, r3, #1
 8004dcc:	6179      	str	r1, [r7, #20]
 8004dce:	7812      	ldrb	r2, [r2, #0]
 8004dd0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	1e5a      	subs	r2, r3, #1
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f2      	bne.n	8004dc2 <mem_cpy+0x16>
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004de6:	b480      	push	{r7}
 8004de8:	b087      	sub	sp, #28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8004df6:	e005      	b.n	8004e04 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	617a      	str	r2, [r7, #20]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	1e5a      	subs	r2, r3, #1
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f4      	bne.n	8004df8 <mem_set+0x12>
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	; 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8004e30:	bf00      	nop
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	1e5a      	subs	r2, r3, #1
 8004e36:	607a      	str	r2, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <mem_cmp+0x40>
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	61fa      	str	r2, [r7, #28]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	61ba      	str	r2, [r7, #24]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	1acb      	subs	r3, r1, r3
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0ec      	beq.n	8004e32 <mem_cmp+0x1a>
	return r;
 8004e58:	697b      	ldr	r3, [r7, #20]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3724      	adds	r7, #36	; 0x24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004e6e:	e002      	b.n	8004e76 <chk_chr+0x12>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3301      	adds	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d005      	beq.n	8004e8a <chk_chr+0x26>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d1f2      	bne.n	8004e70 <chk_chr+0xc>
	return *str;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr

08004e98 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e035      	b.n	8004f18 <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 8004eac:	492e      	ldr	r1, [pc, #184]	; (8004f68 <chk_lock+0xd0>)
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4413      	add	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d026      	beq.n	8004f0e <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004ec0:	4929      	ldr	r1, [pc, #164]	; (8004f68 <chk_lock+0xd0>)
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d11c      	bne.n	8004f12 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 8004ed8:	4923      	ldr	r1, [pc, #140]	; (8004f68 <chk_lock+0xd0>)
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d10f      	bne.n	8004f12 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 8004ef2:	491d      	ldr	r1, [pc, #116]	; (8004f68 <chk_lock+0xd0>)
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3308      	adds	r3, #8
 8004f02:	881a      	ldrh	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d102      	bne.n	8004f12 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 8004f0c:	e007      	b.n	8004f1e <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3301      	adds	r3, #1
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d9c6      	bls.n	8004eac <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d109      	bne.n	8004f38 <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <chk_lock+0x98>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d101      	bne.n	8004f34 <chk_lock+0x9c>
 8004f30:	2300      	movs	r3, #0
 8004f32:	e013      	b.n	8004f5c <chk_lock+0xc4>
 8004f34:	2312      	movs	r3, #18
 8004f36:	e011      	b.n	8004f5c <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10b      	bne.n	8004f56 <chk_lock+0xbe>
 8004f3e:	490a      	ldr	r1, [pc, #40]	; (8004f68 <chk_lock+0xd0>)
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4613      	mov	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	330a      	adds	r3, #10
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f54:	d101      	bne.n	8004f5a <chk_lock+0xc2>
 8004f56:	2310      	movs	r3, #16
 8004f58:	e000      	b.n	8004f5c <chk_lock+0xc4>
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	2000004c 	.word	0x2000004c

08004f6c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	e002      	b.n	8004f7e <enq_lock+0x12>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	607b      	str	r3, [r7, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d809      	bhi.n	8004f98 <enq_lock+0x2c>
 8004f84:	490a      	ldr	r1, [pc, #40]	; (8004fb0 <enq_lock+0x44>)
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ef      	bne.n	8004f78 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	bf14      	ite	ne
 8004f9e:	2301      	movne	r3, #1
 8004fa0:	2300      	moveq	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	2000004c 	.word	0x2000004c

08004fb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e028      	b.n	8005016 <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 8004fc4:	4952      	ldr	r1, [pc, #328]	; (8005110 <inc_lock+0x15c>)
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d119      	bne.n	8005010 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 8004fdc:	494c      	ldr	r1, [pc, #304]	; (8005110 <inc_lock+0x15c>)
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3304      	adds	r3, #4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d10c      	bne.n	8005010 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 8004ff6:	4946      	ldr	r1, [pc, #280]	; (8005110 <inc_lock+0x15c>)
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3308      	adds	r3, #8
 8005006:	881a      	ldrh	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 800500c:	429a      	cmp	r2, r3
 800500e:	d006      	beq.n	800501e <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3301      	adds	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d9d3      	bls.n	8004fc4 <inc_lock+0x10>
 800501c:	e000      	b.n	8005020 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 800501e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d142      	bne.n	80050ac <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	e002      	b.n	8005032 <inc_lock+0x7e>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d809      	bhi.n	800504c <inc_lock+0x98>
 8005038:	4935      	ldr	r1, [pc, #212]	; (8005110 <inc_lock+0x15c>)
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1ef      	bne.n	800502c <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d101      	bne.n	8005056 <inc_lock+0xa2>
 8005052:	2300      	movs	r3, #0
 8005054:	e057      	b.n	8005106 <inc_lock+0x152>
		Files[i].fs = dp->fs;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	482d      	ldr	r0, [pc, #180]	; (8005110 <inc_lock+0x15c>)
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4403      	add	r3, r0
 8005068:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6899      	ldr	r1, [r3, #8]
 800506e:	4828      	ldr	r0, [pc, #160]	; (8005110 <inc_lock+0x15c>)
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4613      	mov	r3, r2
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4403      	add	r3, r0
 800507c:	3304      	adds	r3, #4
 800507e:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	88d8      	ldrh	r0, [r3, #6]
 8005084:	4922      	ldr	r1, [pc, #136]	; (8005110 <inc_lock+0x15c>)
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4613      	mov	r3, r2
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3308      	adds	r3, #8
 8005094:	4602      	mov	r2, r0
 8005096:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8005098:	491d      	ldr	r1, [pc, #116]	; (8005110 <inc_lock+0x15c>)
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	330a      	adds	r3, #10
 80050a8:	2200      	movs	r2, #0
 80050aa:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <inc_lock+0x118>
 80050b2:	4917      	ldr	r1, [pc, #92]	; (8005110 <inc_lock+0x15c>)
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	330a      	adds	r3, #10
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <inc_lock+0x118>
 80050c8:	2300      	movs	r3, #0
 80050ca:	e01c      	b.n	8005106 <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10b      	bne.n	80050ea <inc_lock+0x136>
 80050d2:	490f      	ldr	r1, [pc, #60]	; (8005110 <inc_lock+0x15c>)
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4613      	mov	r3, r2
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	330a      	adds	r3, #10
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	b299      	uxth	r1, r3
 80050e8:	e001      	b.n	80050ee <inc_lock+0x13a>
 80050ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050ee:	4808      	ldr	r0, [pc, #32]	; (8005110 <inc_lock+0x15c>)
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4613      	mov	r3, r2
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4403      	add	r3, r0
 80050fc:	330a      	adds	r3, #10
 80050fe:	460a      	mov	r2, r1
 8005100:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3301      	adds	r3, #1
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr
 8005110:	2000004c 	.word	0x2000004c

08005114 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3b01      	subs	r3, #1
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d82e      	bhi.n	8005186 <dec_lock+0x72>
		n = Files[i].ctr;
 8005128:	491b      	ldr	r1, [pc, #108]	; (8005198 <dec_lock+0x84>)
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	330a      	adds	r3, #10
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800513c:	89fb      	ldrh	r3, [r7, #14]
 800513e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005142:	d101      	bne.n	8005148 <dec_lock+0x34>
 8005144:	2300      	movs	r3, #0
 8005146:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005148:	89fb      	ldrh	r3, [r7, #14]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <dec_lock+0x40>
 800514e:	89fb      	ldrh	r3, [r7, #14]
 8005150:	3b01      	subs	r3, #1
 8005152:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005154:	4910      	ldr	r1, [pc, #64]	; (8005198 <dec_lock+0x84>)
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	330a      	adds	r3, #10
 8005164:	89fa      	ldrh	r2, [r7, #14]
 8005166:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005168:	89fb      	ldrh	r3, [r7, #14]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d108      	bne.n	8005180 <dec_lock+0x6c>
 800516e:	490a      	ldr	r1, [pc, #40]	; (8005198 <dec_lock+0x84>)
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	2200      	movs	r2, #0
 800517e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	737b      	strb	r3, [r7, #13]
 8005184:	e001      	b.n	800518a <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005186:	2302      	movs	r3, #2
 8005188:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800518a:	7b7b      	ldrb	r3, [r7, #13]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	2000004c 	.word	0x2000004c

0800519c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	e016      	b.n	80051d8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80051aa:	490f      	ldr	r1, [pc, #60]	; (80051e8 <clear_lock+0x4c>)
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4613      	mov	r3, r2
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d108      	bne.n	80051d2 <clear_lock+0x36>
 80051c0:	4909      	ldr	r1, [pc, #36]	; (80051e8 <clear_lock+0x4c>)
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4613      	mov	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3301      	adds	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d9e5      	bls.n	80051aa <clear_lock+0xe>
	}
}
 80051de:	bf00      	nop
 80051e0:	3714      	adds	r7, #20
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr
 80051e8:	2000004c 	.word	0x2000004c

080051ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fe:	3304      	adds	r3, #4
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d047      	beq.n	8005296 <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800520c:	330c      	adds	r3, #12
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005218:	3301      	adds	r3, #1
 800521a:	7818      	ldrb	r0, [r3, #0]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	2301      	movs	r3, #1
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	f7ff fd85 	bl	8004d30 <disk_write>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d002      	beq.n	8005232 <sync_window+0x46>
			res = FR_DISK_ERR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
 8005230:	e031      	b.n	8005296 <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005238:	3304      	adds	r3, #4
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	1ad2      	subs	r2, r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005250:	3318      	adds	r3, #24
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d21e      	bcs.n	8005296 <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525e:	3303      	adds	r3, #3
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	e014      	b.n	8005290 <sync_window+0xa4>
					wsect += fs->fsize;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526c:	3318      	adds	r3, #24
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800527c:	3301      	adds	r3, #1
 800527e:	7818      	ldrb	r0, [r3, #0]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	2301      	movs	r3, #1
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	f7ff fd53 	bl	8004d30 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3b01      	subs	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d8e7      	bhi.n	8005266 <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052b4:	330c      	adds	r3, #12
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d01f      	beq.n	80052fe <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff94 	bl	80051ec <sync_window>
 80052c4:	4603      	mov	r3, r0
 80052c6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d117      	bne.n	80052fe <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d4:	3301      	adds	r3, #1
 80052d6:	7818      	ldrb	r0, [r3, #0]
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	2301      	movs	r3, #1
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	f7ff fd07 	bl	8004cf0 <disk_read>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80052e8:	f04f 33ff 	mov.w	r3, #4294967295
 80052ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80052f8:	330c      	adds	r3, #12
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ff6b 	bl	80051ec <sync_window>
 8005316:	4603      	mov	r3, r0
 8005318:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 80bd 	bne.w	800549c <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b03      	cmp	r3, #3
 800532c:	f040 80a7 	bne.w	800547e <sync_fs+0x176>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005336:	3305      	adds	r3, #5
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b01      	cmp	r3, #1
 800533c:	f040 809f 	bne.w	800547e <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005348:	330a      	adds	r3, #10
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	2100      	movs	r1, #0
 8005350:	f7ff fd49 	bl	8004de6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2255      	movs	r2, #85	; 0x55
 8005358:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	22aa      	movs	r2, #170	; 0xaa
 8005360:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2252      	movs	r2, #82	; 0x52
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2252      	movs	r2, #82	; 0x52
 800536e:	705a      	strb	r2, [r3, #1]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2261      	movs	r2, #97	; 0x61
 8005374:	709a      	strb	r2, [r3, #2]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2241      	movs	r2, #65	; 0x41
 800537a:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2272      	movs	r2, #114	; 0x72
 8005380:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2272      	movs	r2, #114	; 0x72
 8005388:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2241      	movs	r2, #65	; 0x41
 8005390:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2261      	movs	r2, #97	; 0x61
 8005398:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a2:	3310      	adds	r3, #16
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b4:	3310      	adds	r3, #16
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	0a1b      	lsrs	r3, r3, #8
 80053bc:	b29b      	uxth	r3, r3
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053cc:	3310      	adds	r3, #16
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	0c1b      	lsrs	r3, r3, #16
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e0:	3310      	adds	r3, #16
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	0e1b      	lsrs	r3, r3, #24
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053f4:	330c      	adds	r3, #12
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005406:	330c      	adds	r3, #12
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	b29b      	uxth	r3, r3
 8005410:	b2da      	uxtb	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800541e:	330c      	adds	r3, #12
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	b2da      	uxtb	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005432:	330c      	adds	r3, #12
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	0e1b      	lsrs	r3, r3, #24
 8005438:	b2da      	uxtb	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	331c      	adds	r3, #28
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005452:	330c      	adds	r3, #12
 8005454:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800545c:	3301      	adds	r3, #1
 800545e:	7818      	ldrb	r0, [r3, #0]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005468:	330c      	adds	r3, #12
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	2301      	movs	r3, #1
 800546e:	f7ff fc5f 	bl	8004d30 <disk_write>
			fs->fsi_flag = 0;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005478:	3305      	adds	r3, #5
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005484:	3301      	adds	r3, #1
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2200      	movs	r2, #0
 800548a:	2100      	movs	r1, #0
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff fc6f 	bl	8004d70 <disk_ioctl>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <sync_fs+0x194>
			res = FR_DISK_ERR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	3b02      	subs	r3, #2
 80054b4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054bc:	3314      	adds	r3, #20
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3b02      	subs	r3, #2
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d301      	bcc.n	80054cc <clust2sect+0x26>
 80054c8:	2300      	movs	r3, #0
 80054ca:	e00e      	b.n	80054ea <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054d2:	3302      	adds	r3, #2
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	fb03 f202 	mul.w	r2, r3, r2
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054e4:	3308      	adds	r3, #8
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4413      	add	r3, r2
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d907      	bls.n	8005514 <get_fat+0x20>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800550a:	3314      	adds	r3, #20
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d302      	bcc.n	800551a <get_fat+0x26>
		val = 1;	/* Internal error */
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e0e9      	b.n	80056ee <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d068      	beq.n	80055fe <get_fat+0x10a>
 800552c:	2b03      	cmp	r3, #3
 800552e:	f000 8099 	beq.w	8005664 <get_fat+0x170>
 8005532:	2b01      	cmp	r3, #1
 8005534:	f040 80d1 	bne.w	80056da <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	085b      	lsrs	r3, r3, #1
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005554:	330a      	adds	r3, #10
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	4619      	mov	r1, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005560:	4413      	add	r3, r2
 8005562:	4619      	mov	r1, r3
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff fe9b 	bl	80052a0 <move_window>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	f040 80b7 	bne.w	80056e0 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	60fa      	str	r2, [r7, #12]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800557e:	320a      	adds	r2, #10
 8005580:	8812      	ldrh	r2, [r2, #0]
 8005582:	fbb3 f1f2 	udiv	r1, r3, r2
 8005586:	fb02 f201 	mul.w	r2, r2, r1
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	5cd3      	ldrb	r3, [r2, r3]
 8005590:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a0:	330a      	adds	r3, #10
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80055ac:	4413      	add	r3, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff fe75 	bl	80052a0 <move_window>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f040 8093 	bne.w	80056e4 <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055c4:	330a      	adds	r3, #10
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80055d0:	fb02 f201 	mul.w	r2, r2, r1
 80055d4:	1a9b      	subs	r3, r3, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	5cd3      	ldrb	r3, [r2, r3]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	461a      	mov	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <get_fat+0x100>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	e002      	b.n	80055fa <get_fat+0x106>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fa:	617b      	str	r3, [r7, #20]
			break;
 80055fc:	e077      	b.n	80056ee <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800560c:	330a      	adds	r3, #10
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	085b      	lsrs	r3, r3, #1
 8005612:	b29b      	uxth	r3, r3
 8005614:	4619      	mov	r1, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	fbb3 f3f1 	udiv	r3, r3, r1
 800561c:	4413      	add	r3, r2
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fe3d 	bl	80052a0 <move_window>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d15d      	bne.n	80056e8 <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	005a      	lsls	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005636:	330a      	adds	r3, #10
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	fbb2 f1f3 	udiv	r1, r2, r3
 800563e:	fb03 f301 	mul.w	r3, r3, r1
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4413      	add	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3301      	adds	r3, #1
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	b21a      	sxth	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	b21b      	sxth	r3, r3
 800565a:	4313      	orrs	r3, r2
 800565c:	b21b      	sxth	r3, r3
 800565e:	b29b      	uxth	r3, r3
 8005660:	617b      	str	r3, [r7, #20]
			break;
 8005662:	e044      	b.n	80056ee <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005672:	330a      	adds	r3, #10
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	089b      	lsrs	r3, r3, #2
 8005678:	b29b      	uxth	r3, r3
 800567a:	4619      	mov	r1, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005682:	4413      	add	r3, r2
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fe0a 	bl	80052a0 <move_window>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d12c      	bne.n	80056ec <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	009a      	lsls	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569c:	330a      	adds	r3, #10
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80056a4:	fb03 f301 	mul.w	r3, r3, r1
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	3303      	adds	r3, #3
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	061a      	lsls	r2, r3, #24
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	3302      	adds	r3, #2
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	041b      	lsls	r3, r3, #16
 80056c0:	4313      	orrs	r3, r2
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	3201      	adds	r2, #1
 80056c6:	7812      	ldrb	r2, [r2, #0]
 80056c8:	0212      	lsls	r2, r2, #8
 80056ca:	4313      	orrs	r3, r2
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	7812      	ldrb	r2, [r2, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80056d6:	617b      	str	r3, [r7, #20]
			break;
 80056d8:	e009      	b.n	80056ee <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 80056da:	2301      	movs	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e006      	b.n	80056ee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056e0:	bf00      	nop
 80056e2:	e004      	b.n	80056ee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056e4:	bf00      	nop
 80056e6:	e002      	b.n	80056ee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80056e8:	bf00      	nop
 80056ea:	e000      	b.n	80056ee <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056ec:	bf00      	nop
		}
	}

	return val;
 80056ee:	697b      	ldr	r3, [r7, #20]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d907      	bls.n	800571a <put_fat+0x22>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005710:	3314      	adds	r3, #20
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d302      	bcc.n	8005720 <put_fat+0x28>
		res = FR_INT_ERR;
 800571a:	2302      	movs	r3, #2
 800571c:	77fb      	strb	r3, [r7, #31]
 800571e:	e143      	b.n	80059a8 <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	f000 809a 	beq.w	8005862 <put_fat+0x16a>
 800572e:	2b03      	cmp	r3, #3
 8005730:	f000 80d3 	beq.w	80058da <put_fat+0x1e2>
 8005734:	2b01      	cmp	r3, #1
 8005736:	f040 812d 	bne.w	8005994 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	085b      	lsrs	r3, r3, #1
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4413      	add	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005756:	330a      	adds	r3, #10
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	4619      	mov	r1, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005762:	4413      	add	r3, r2
 8005764:	4619      	mov	r1, r3
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff fd9a 	bl	80052a0 <move_window>
 800576c:	4603      	mov	r3, r0
 800576e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005770:	7ffb      	ldrb	r3, [r7, #31]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 8111 	bne.w	800599a <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	617a      	str	r2, [r7, #20]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005784:	320a      	adds	r2, #10
 8005786:	8812      	ldrh	r2, [r2, #0]
 8005788:	fbb3 f1f2 	udiv	r1, r3, r2
 800578c:	fb02 f201 	mul.w	r2, r2, r1
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <put_fat+0xc6>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	b25b      	sxtb	r3, r3
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	b25a      	sxtb	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	b25b      	sxtb	r3, r3
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	e001      	b.n	80057c2 <put_fat+0xca>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057cc:	3304      	adds	r3, #4
 80057ce:	2201      	movs	r2, #1
 80057d0:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057e0:	330a      	adds	r3, #10
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	4619      	mov	r1, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ec:	4413      	add	r3, r2
 80057ee:	4619      	mov	r1, r3
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7ff fd55 	bl	80052a0 <move_window>
 80057f6:	4603      	mov	r3, r0
 80057f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057fa:	7ffb      	ldrb	r3, [r7, #31]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 80ce 	bne.w	800599e <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	330a      	adds	r3, #10
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	fbb3 f1f2 	udiv	r1, r3, r2
 8005814:	fb02 f201 	mul.w	r2, r2, r1
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <put_fat+0x13a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	b2db      	uxtb	r3, r3
 8005830:	e00e      	b.n	8005850 <put_fat+0x158>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	b25b      	sxtb	r3, r3
 8005838:	f023 030f 	bic.w	r3, r3, #15
 800583c:	b25a      	sxtb	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	0a1b      	lsrs	r3, r3, #8
 8005842:	b25b      	sxtb	r3, r3
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	b25b      	sxtb	r3, r3
 800584a:	4313      	orrs	r3, r2
 800584c:	b25b      	sxtb	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585a:	3304      	adds	r3, #4
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
			break;
 8005860:	e0a2      	b.n	80059a8 <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005870:	330a      	adds	r3, #10
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	b29b      	uxth	r3, r3
 8005878:	4619      	mov	r1, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005880:	4413      	add	r3, r2
 8005882:	4619      	mov	r1, r3
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff fd0b 	bl	80052a0 <move_window>
 800588a:	4603      	mov	r3, r0
 800588c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8086 	bne.w	80059a2 <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	005a      	lsls	r2, r3, #1
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a0:	330a      	adds	r3, #10
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80058a8:	fb03 f301 	mul.w	r3, r3, r1
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	0a1b      	lsrs	r3, r3, #8
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	3301      	adds	r3, #1
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d2:	3304      	adds	r3, #4
 80058d4:	2201      	movs	r2, #1
 80058d6:	701a      	strb	r2, [r3, #0]
			break;
 80058d8:	e066      	b.n	80059a8 <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e8:	330a      	adds	r3, #10
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80058f8:	4413      	add	r3, r2
 80058fa:	4619      	mov	r1, r3
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f7ff fccf 	bl	80052a0 <move_window>
 8005902:	4603      	mov	r3, r0
 8005904:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005906:	7ffb      	ldrb	r3, [r7, #31]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d14c      	bne.n	80059a6 <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	009a      	lsls	r2, r3, #2
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005916:	330a      	adds	r3, #10
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	fbb2 f1f3 	udiv	r1, r2, r3
 800591e:	fb03 f301 	mul.w	r3, r3, r1
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	3303      	adds	r3, #3
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	061a      	lsls	r2, r3, #24
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	3302      	adds	r3, #2
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	4313      	orrs	r3, r2
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	3201      	adds	r2, #1
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	0212      	lsls	r2, r2, #8
 8005944:	4313      	orrs	r3, r2
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	4313      	orrs	r3, r2
 800594c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4313      	orrs	r3, r2
 8005954:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	b2da      	uxtb	r2, r3
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	b29b      	uxth	r3, r3
 8005962:	0a1b      	lsrs	r3, r3, #8
 8005964:	b29a      	uxth	r2, r3
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	3301      	adds	r3, #1
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	0c1a      	lsrs	r2, r3, #16
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	3302      	adds	r3, #2
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0e1a      	lsrs	r2, r3, #24
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	3303      	adds	r3, #3
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800598c:	3304      	adds	r3, #4
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
			break;
 8005992:	e009      	b.n	80059a8 <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 8005994:	2302      	movs	r3, #2
 8005996:	77fb      	strb	r3, [r7, #31]
 8005998:	e006      	b.n	80059a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800599a:	bf00      	nop
 800599c:	e004      	b.n	80059a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 800599e:	bf00      	nop
 80059a0:	e002      	b.n	80059a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80059a2:	bf00      	nop
 80059a4:	e000      	b.n	80059a8 <put_fat+0x2b0>
			if (res != FR_OK) break;
 80059a6:	bf00      	nop
		}
	}

	return res;
 80059a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3720      	adds	r7, #32
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d907      	bls.n	80059d2 <remove_chain+0x20>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059c8:	3314      	adds	r3, #20
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d302      	bcc.n	80059d8 <remove_chain+0x26>
		res = FR_INT_ERR;
 80059d2:	2302      	movs	r3, #2
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	e04f      	b.n	8005a78 <remove_chain+0xc6>

	} else {
		res = FR_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80059dc:	e040      	b.n	8005a60 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80059de:	6839      	ldr	r1, [r7, #0]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fd87 	bl	80054f4 <get_fat>
 80059e6:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d041      	beq.n	8005a72 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d102      	bne.n	80059fa <remove_chain+0x48>
 80059f4:	2302      	movs	r3, #2
 80059f6:	73fb      	strb	r3, [r7, #15]
 80059f8:	e03e      	b.n	8005a78 <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d102      	bne.n	8005a08 <remove_chain+0x56>
 8005a02:	2301      	movs	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
 8005a06:	e037      	b.n	8005a78 <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8005a08:	2200      	movs	r2, #0
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fe73 	bl	80056f8 <put_fat>
 8005a12:	4603      	mov	r3, r0
 8005a14:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d12c      	bne.n	8005a76 <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a22:	3310      	adds	r3, #16
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d017      	beq.n	8005a5c <remove_chain+0xaa>
				fs->free_clust++;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	3310      	adds	r3, #16
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a3e:	3310      	adds	r3, #16
 8005a40:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a48:	3305      	adds	r3, #5
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	f043 0301 	orr.w	r3, r3, #1
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a58:	3305      	adds	r3, #5
 8005a5a:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a66:	3314      	adds	r3, #20
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d3b6      	bcc.n	80059de <remove_chain+0x2c>
 8005a70:	e002      	b.n	8005a78 <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8005a72:	bf00      	nop
 8005a74:	e000      	b.n	8005a78 <remove_chain+0xc6>
			if (res != FR_OK) break;
 8005a76:	bf00      	nop
		}
	}

	return res;
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d113      	bne.n	8005aba <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a98:	330c      	adds	r3, #12
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <create_chain+0x32>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aaa:	3314      	adds	r3, #20
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d31e      	bcc.n	8005af2 <create_chain+0x70>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	613b      	str	r3, [r7, #16]
 8005ab8:	e01b      	b.n	8005af2 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7ff fd19 	bl	80054f4 <get_fat>
 8005ac2:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d801      	bhi.n	8005ace <create_chain+0x4c>
 8005aca:	2301      	movs	r3, #1
 8005acc:	e086      	b.n	8005bdc <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d101      	bne.n	8005ada <create_chain+0x58>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	e080      	b.n	8005bdc <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ae0:	3314      	adds	r3, #20
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d201      	bcs.n	8005aee <create_chain+0x6c>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	e076      	b.n	8005bdc <create_chain+0x15a>
		scl = clst;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	3301      	adds	r3, #1
 8005afa:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b02:	3314      	adds	r3, #20
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d307      	bcc.n	8005b1c <create_chain+0x9a>
			ncl = 2;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d901      	bls.n	8005b1c <create_chain+0x9a>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e05f      	b.n	8005bdc <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005b1c:	6979      	ldr	r1, [r7, #20]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fce8 	bl	80054f4 <get_fat>
 8005b24:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00e      	beq.n	8005b4a <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d002      	beq.n	8005b3a <create_chain+0xb8>
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <create_chain+0xbc>
			return cs;
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	e04e      	b.n	8005bdc <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d1d7      	bne.n	8005af6 <create_chain+0x74>
 8005b46:	2300      	movs	r3, #0
 8005b48:	e048      	b.n	8005bdc <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8005b4a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005b4c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff fdd0 	bl	80056f8 <put_fat>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <create_chain+0xf4>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d006      	beq.n	8005b76 <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fdc3 	bl	80056f8 <put_fat>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d126      	bne.n	8005bca <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b82:	330c      	adds	r3, #12
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8e:	3310      	adds	r3, #16
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d020      	beq.n	8005bda <create_chain+0x158>
			fs->free_clust--;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9e:	3310      	adds	r3, #16
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	1e5a      	subs	r2, r3, #1
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005baa:	3310      	adds	r3, #16
 8005bac:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb4:	3305      	adds	r3, #5
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc4:	3305      	adds	r3, #5
 8005bc6:	701a      	strb	r2, [r3, #0]
 8005bc8:	e007      	b.n	8005bda <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d102      	bne.n	8005bd6 <create_chain+0x154>
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	e000      	b.n	8005bd8 <create_chain+0x156>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8005bda:	697b      	ldr	r3, [r7, #20]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3718      	adds	r7, #24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfe:	330a      	adds	r3, #10
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c12:	3302      	adds	r3, #2
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1d1a      	adds	r2, r3, #4
 8005c20:	613a      	str	r2, [r7, #16]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <clmt_clust+0x4c>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e010      	b.n	8005c52 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d307      	bcc.n	8005c48 <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3304      	adds	r3, #4
 8005c44:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c46:	e7e9      	b.n	8005c1c <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8005c48:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	4413      	add	r3, r2
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d008      	beq.n	8005c8c <dir_sdi+0x30>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c82:	3314      	adds	r3, #20
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d301      	bcc.n	8005c90 <dir_sdi+0x34>
		return FR_INT_ERR;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e093      	b.n	8005db8 <dir_sdi+0x15c>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10d      	bne.n	8005cb2 <dir_sdi+0x56>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d106      	bne.n	8005cb2 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005cac:	3304      	adds	r3, #4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <dir_sdi+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc0:	3308      	adds	r3, #8
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d301      	bcc.n	8005cd0 <dir_sdi+0x74>
			return FR_INT_ERR;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e073      	b.n	8005db8 <dir_sdi+0x15c>
		sect = dp->fs->dirbase;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005cd8:	3304      	adds	r3, #4
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e03c      	b.n	8005d5a <dir_sdi+0xfe>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce8:	330a      	adds	r3, #10
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cfa:	3302      	adds	r3, #2
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	fb03 f302 	mul.w	r3, r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8005d04:	e01e      	b.n	8005d44 <dir_sdi+0xe8>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6979      	ldr	r1, [r7, #20]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fbf1 	bl	80054f4 <get_fat>
 8005d12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d101      	bne.n	8005d20 <dir_sdi+0xc4>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e04b      	b.n	8005db8 <dir_sdi+0x15c>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d908      	bls.n	8005d38 <dir_sdi+0xdc>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2e:	3314      	adds	r3, #20
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d301      	bcc.n	8005d3c <dir_sdi+0xe0>
				return FR_INT_ERR;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e03d      	b.n	8005db8 <dir_sdi+0x15c>
			idx -= ic;
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d2dc      	bcs.n	8005d06 <dir_sdi+0xaa>
		}
		sect = clust2sect(dp->fs, clst);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff fba7 	bl	80054a6 <clust2sect>
 8005d58:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <dir_sdi+0x10e>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e026      	b.n	8005db8 <dir_sdi+0x15c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d72:	330a      	adds	r3, #10
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d98:	330a      	adds	r3, #10
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005da8:	fb02 f201 	mul.w	r2, r2, r1
 8005dac:	1a9b      	subs	r3, r3, r2
 8005dae:	015b      	lsls	r3, r3, #5
 8005db0:	18c2      	adds	r2, r0, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	88db      	ldrh	r3, [r3, #6]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <dir_next+0x22>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <dir_next+0x26>
		return FR_NO_FILE;
 8005de2:	2304      	movs	r3, #4
 8005de4:	e0fe      	b.n	8005fe4 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dee:	330a      	adds	r3, #10
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dfe:	fb02 f201 	mul.w	r2, r2, r1
 8005e02:	1a9b      	subs	r3, r3, r2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f040 80d2 	bne.w	8005fae <dir_next+0x1ee>
		dp->sect++;					/* Next sector */
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10c      	bne.n	8005e36 <dir_next+0x76>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e24:	3308      	adds	r3, #8
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	461a      	mov	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	f0c0 80be 	bcc.w	8005fae <dir_next+0x1ee>
				return FR_NO_FILE;
 8005e32:	2304      	movs	r3, #4
 8005e34:	e0d6      	b.n	8005fe4 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e3e:	330a      	adds	r3, #10
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e56:	3302      	adds	r3, #2
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 80a5 	bne.w	8005fae <dir_next+0x1ee>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	f7ff fb40 	bl	80054f4 <get_fat>
 8005e74:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d801      	bhi.n	8005e80 <dir_next+0xc0>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e0b1      	b.n	8005fe4 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d101      	bne.n	8005e8c <dir_next+0xcc>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0ab      	b.n	8005fe4 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e94:	3314      	adds	r3, #20
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d37b      	bcc.n	8005f96 <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d101      	bne.n	8005ea8 <dir_next+0xe8>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	e09d      	b.n	8005fe4 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f7ff fde5 	bl	8005a82 <create_chain>
 8005eb8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <dir_next+0x104>
 8005ec0:	2307      	movs	r3, #7
 8005ec2:	e08f      	b.n	8005fe4 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <dir_next+0x10e>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e08a      	b.n	8005fe4 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d101      	bne.n	8005eda <dir_next+0x11a>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e084      	b.n	8005fe4 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f984 	bl	80051ec <sync_window>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <dir_next+0x12e>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e07a      	b.n	8005fe4 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005efc:	330a      	adds	r3, #10
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	2100      	movs	r1, #0
 8005f04:	f7fe ff6f 	bl	8004de6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681c      	ldr	r4, [r3, #0]
 8005f10:	6979      	ldr	r1, [r7, #20]
 8005f12:	4610      	mov	r0, r2
 8005f14:	f7ff fac7 	bl	80054a6 <clust2sect>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8005f1e:	330c      	adds	r3, #12
 8005f20:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	e01e      	b.n	8005f66 <dir_next+0x1a6>
						dp->fs->wflag = 1;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f30:	3304      	adds	r3, #4
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff f956 	bl	80051ec <sync_window>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <dir_next+0x18a>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e04c      	b.n	8005fe4 <dir_next+0x224>
						dp->fs->winsect++;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005f52:	330c      	adds	r3, #12
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	1c59      	adds	r1, r3, #1
 8005f58:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3301      	adds	r3, #1
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f6e:	3302      	adds	r3, #2
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d3d6      	bcc.n	8005f28 <dir_next+0x168>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005f82:	330c      	adds	r3, #12
 8005f84:	6819      	ldr	r1, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	1a8a      	subs	r2, r1, r2
 8005f8e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005f92:	330c      	adds	r3, #12
 8005f94:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6979      	ldr	r1, [r7, #20]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fa7f 	bl	80054a6 <clust2sect>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fc4:	330a      	adds	r3, #10
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fd4:	fb02 f201 	mul.w	r2, r2, r1
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	015b      	lsls	r3, r3, #5
 8005fdc:	18c2      	adds	r2, r0, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd90      	pop	{r4, r7, pc}

08005fec <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff fe2f 	bl	8005c5c <dir_sdi>
 8005ffe:	4603      	mov	r3, r0
 8006000:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d12d      	bne.n	8006064 <dir_alloc+0x78>
		n = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7ff f942 	bl	80052a0 <move_window>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d11d      	bne.n	8006062 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2be5      	cmp	r3, #229	; 0xe5
 800602e:	d004      	beq.n	800603a <dir_alloc+0x4e>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d107      	bne.n	800604a <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	3301      	adds	r3, #1
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d102      	bne.n	800604e <dir_alloc+0x62>
 8006048:	e00c      	b.n	8006064 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800604a:	2300      	movs	r3, #0
 800604c:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800604e:	2101      	movs	r1, #1
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff feb5 	bl	8005dc0 <dir_next>
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0d5      	beq.n	800600c <dir_alloc+0x20>
 8006060:	e000      	b.n	8006064 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8006062:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b04      	cmp	r3, #4
 8006068:	d101      	bne.n	800606e <dir_alloc+0x82>
 800606a:	2307      	movs	r3, #7
 800606c:	73fb      	strb	r3, [r7, #15]
	return res;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	331b      	adds	r3, #27
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	b21a      	sxth	r2, r3
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	331a      	adds	r3, #26
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b21b      	sxth	r3, r3
 8006094:	4313      	orrs	r3, r2
 8006096:	b21b      	sxth	r3, r3
 8006098:	b29b      	uxth	r3, r3
 800609a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d10f      	bne.n	80060c8 <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	3315      	adds	r3, #21
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	021b      	lsls	r3, r3, #8
 80060b0:	b21a      	sxth	r2, r3
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	3314      	adds	r3, #20
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	b21b      	sxth	r3, r3
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b21b      	sxth	r3, r3
 80060be:	b29b      	uxth	r3, r3
 80060c0:	041b      	lsls	r3, r3, #16
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

	return cl;
 80060c8:	68fb      	ldr	r3, [r7, #12]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bc80      	pop	{r7}
 80060d2:	4770      	bx	lr

080060d4 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	331a      	adds	r3, #26
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	0a1b      	lsrs	r3, r3, #8
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	331b      	adds	r3, #27
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	0c1a      	lsrs	r2, r3, #16
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3314      	adds	r3, #20
 8006100:	b2d2      	uxtb	r2, r2
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	b29b      	uxth	r3, r3
 800610a:	0a1b      	lsrs	r3, r3, #8
 800610c:	b29a      	uxth	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3315      	adds	r3, #21
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
}
 8006116:	bf00      	nop
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	bc80      	pop	{r7}
 800611e:	4770      	bx	lr

08006120 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006132:	1e5a      	subs	r2, r3, #1
 8006134:	4613      	mov	r3, r2
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8006140:	2300      	movs	r3, #0
 8006142:	613b      	str	r3, [r7, #16]
 8006144:	2301      	movs	r3, #1
 8006146:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8006148:	4a2b      	ldr	r2, [pc, #172]	; (80061f8 <cmp_lfn+0xd8>)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4413      	add	r3, r2
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4413      	add	r3, r2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	b21a      	sxth	r2, r3
 800615c:	4926      	ldr	r1, [pc, #152]	; (80061f8 <cmp_lfn+0xd8>)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	440b      	add	r3, r1
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	4619      	mov	r1, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	440b      	add	r3, r1
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	b21b      	sxth	r3, r3
 800616e:	4313      	orrs	r3, r2
 8006170:	b21b      	sxth	r3, r3
 8006172:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d019      	beq.n	80061ae <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800617a:	89bb      	ldrh	r3, [r7, #12]
 800617c:	4618      	mov	r0, r3
 800617e:	f001 fe01 	bl	8007d84 <ff_wtoupper>
 8006182:	4603      	mov	r3, r0
 8006184:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2bfe      	cmp	r3, #254	; 0xfe
 800618a:	d80e      	bhi.n	80061aa <cmp_lfn+0x8a>
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	617a      	str	r2, [r7, #20]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	4413      	add	r3, r2
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f001 fdf2 	bl	8007d84 <ff_wtoupper>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	89fb      	ldrh	r3, [r7, #14]
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d008      	beq.n	80061bc <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80061aa:	2300      	movs	r3, #0
 80061ac:	e01f      	b.n	80061ee <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80061ae:	89bb      	ldrh	r3, [r7, #12]
 80061b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d001      	beq.n	80061bc <cmp_lfn+0x9c>
 80061b8:	2300      	movs	r3, #0
 80061ba:	e018      	b.n	80061ee <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	3301      	adds	r3, #1
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d9bf      	bls.n	8006148 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00b      	beq.n	80061ec <cmp_lfn+0xcc>
 80061d4:	89fb      	ldrh	r3, [r7, #14]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d008      	beq.n	80061ec <cmp_lfn+0xcc>
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4413      	add	r3, r2
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <cmp_lfn+0xcc>
		return 0;
 80061e8:	2300      	movs	r3, #0
 80061ea:	e000      	b.n	80061ee <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80061ec:	2301      	movs	r3, #1
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	08007f58 	.word	0x08007f58

080061fc <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b089      	sub	sp, #36	; 0x24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	4611      	mov	r1, r2
 8006208:	461a      	mov	r2, r3
 800620a:	460b      	mov	r3, r1
 800620c:	71fb      	strb	r3, [r7, #7]
 800620e:	4613      	mov	r3, r2
 8006210:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	330d      	adds	r3, #13
 8006216:	79ba      	ldrb	r2, [r7, #6]
 8006218:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	330b      	adds	r3, #11
 800621e:	220f      	movs	r2, #15
 8006220:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	330c      	adds	r3, #12
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	331a      	adds	r3, #26
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	331b      	adds	r3, #27
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800623a:	79fb      	ldrb	r3, [r7, #7]
 800623c:	1e5a      	subs	r2, r3, #1
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	82fb      	strh	r3, [r7, #22]
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8006252:	8afb      	ldrh	r3, [r7, #22]
 8006254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006258:	4293      	cmp	r3, r2
 800625a:	d007      	beq.n	800626c <fit_lfn+0x70>
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	61fa      	str	r2, [r7, #28]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800626c:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <fit_lfn+0xe4>)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	4413      	add	r3, r2
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	461a      	mov	r2, r3
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4413      	add	r3, r2
 800627a:	8afa      	ldrh	r2, [r7, #22]
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	8afb      	ldrh	r3, [r7, #22]
 8006282:	0a1b      	lsrs	r3, r3, #8
 8006284:	b299      	uxth	r1, r3
 8006286:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <fit_lfn+0xe4>)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	4413      	add	r3, r2
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	3301      	adds	r3, #1
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	4413      	add	r3, r2
 8006294:	b2ca      	uxtb	r2, r1
 8006296:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8006298:	8afb      	ldrh	r3, [r7, #22]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <fit_lfn+0xa8>
 800629e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062a2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	3301      	adds	r3, #1
 80062a8:	61bb      	str	r3, [r7, #24]
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b0c      	cmp	r3, #12
 80062ae:	d9d0      	bls.n	8006252 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80062b0:	8afb      	ldrh	r3, [r7, #22]
 80062b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d006      	beq.n	80062c8 <fit_lfn+0xcc>
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <fit_lfn+0xd4>
 80062c8:	79fb      	ldrb	r3, [r7, #7]
 80062ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ce:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	79fa      	ldrb	r2, [r7, #7]
 80062d4:	701a      	strb	r2, [r3, #0]
}
 80062d6:	bf00      	nop
 80062d8:	3724      	adds	r7, #36	; 0x24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr
 80062e0:	08007f58 	.word	0x08007f58

080062e4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08c      	sub	sp, #48	; 0x30
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80062f2:	220b      	movs	r2, #11
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7fe fd58 	bl	8004dac <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d92b      	bls.n	800635a <gen_numname+0x76>
		sr = seq;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006306:	e022      	b.n	800634e <gen_numname+0x6a>
			wc = *lfn++;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	1c9a      	adds	r2, r3, #2
 800630c:	607a      	str	r2, [r7, #4]
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006312:	2300      	movs	r3, #0
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
 8006316:	e017      	b.n	8006348 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	005a      	lsls	r2, r3, #1
 800631c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	4413      	add	r3, r2
 8006324:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006326:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <gen_numname+0x5e>
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800633c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006340:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	3301      	adds	r3, #1
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	2b0f      	cmp	r3, #15
 800634c:	d9e4      	bls.n	8006318 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1d8      	bne.n	8006308 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800635a:	2307      	movs	r3, #7
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	b2db      	uxtb	r3, r3
 8006368:	3330      	adds	r3, #48	; 0x30
 800636a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800636e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006372:	2b39      	cmp	r3, #57	; 0x39
 8006374:	d904      	bls.n	8006380 <gen_numname+0x9c>
 8006376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800637a:	3307      	adds	r3, #7
 800637c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	1e5a      	subs	r2, r3, #1
 8006384:	62ba      	str	r2, [r7, #40]	; 0x28
 8006386:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800638a:	4413      	add	r3, r2
 800638c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006390:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	091b      	lsrs	r3, r3, #4
 8006398:	603b      	str	r3, [r7, #0]
	} while (seq);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1de      	bne.n	800635e <gen_numname+0x7a>
	ns[i] = '~';
 80063a0:	f107 0214 	add.w	r2, r7, #20
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	4413      	add	r3, r2
 80063a8:	227e      	movs	r2, #126	; 0x7e
 80063aa:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
 80063b0:	e002      	b.n	80063b8 <gen_numname+0xd4>
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	3301      	adds	r3, #1
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	429a      	cmp	r2, r3
 80063be:	d205      	bcs.n	80063cc <gen_numname+0xe8>
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	4413      	add	r3, r2
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d1f2      	bne.n	80063b2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	2b07      	cmp	r3, #7
 80063d0:	d808      	bhi.n	80063e4 <gen_numname+0x100>
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80063d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80063dc:	4413      	add	r3, r2
 80063de:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80063e2:	e000      	b.n	80063e6 <gen_numname+0x102>
 80063e4:	2120      	movs	r1, #32
 80063e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	627a      	str	r2, [r7, #36]	; 0x24
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	460a      	mov	r2, r1
 80063f2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	2b07      	cmp	r3, #7
 80063f8:	d9e8      	bls.n	80063cc <gen_numname+0xe8>
}
 80063fa:	bf00      	nop
 80063fc:	3730      	adds	r7, #48	; 0x30
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800640e:	230b      	movs	r3, #11
 8006410:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8006412:	7bfb      	ldrb	r3, [r7, #15]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	0852      	lsrs	r2, r2, #1
 8006418:	01db      	lsls	r3, r3, #7
 800641a:	4313      	orrs	r3, r2
 800641c:	b2da      	uxtb	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	1c59      	adds	r1, r3, #1
 8006422:	6079      	str	r1, [r7, #4]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	4413      	add	r3, r2
 8006428:	73fb      	strb	r3, [r7, #15]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	3b01      	subs	r3, #1
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1ed      	bne.n	8006412 <sum_sfn+0x10>
	return sum;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	bc80      	pop	{r7}
 8006440:	4770      	bx	lr

08006442 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800644a:	2100      	movs	r1, #0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff fc05 	bl	8005c5c <dir_sdi>
 8006452:	4603      	mov	r3, r0
 8006454:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <dir_find+0x1e>
 800645c:	7dfb      	ldrb	r3, [r7, #23]
 800645e:	e0a0      	b.n	80065a2 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006460:	23ff      	movs	r3, #255	; 0xff
 8006462:	753b      	strb	r3, [r7, #20]
 8006464:	7d3b      	ldrb	r3, [r7, #20]
 8006466:	757b      	strb	r3, [r7, #21]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800646e:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f7fe ff10 	bl	80052a0 <move_window>
 8006480:	4603      	mov	r3, r0
 8006482:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b00      	cmp	r3, #0
 8006488:	f040 8085 	bne.w	8006596 <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006498:	7dbb      	ldrb	r3, [r7, #22]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <dir_find+0x62>
 800649e:	2304      	movs	r3, #4
 80064a0:	75fb      	strb	r3, [r7, #23]
 80064a2:	e07d      	b.n	80065a0 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	330b      	adds	r3, #11
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064ae:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80064b0:	7dbb      	ldrb	r3, [r7, #22]
 80064b2:	2be5      	cmp	r3, #229	; 0xe5
 80064b4:	d007      	beq.n	80064c6 <dir_find+0x84>
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <dir_find+0x92>
 80064c0:	7bfb      	ldrb	r3, [r7, #15]
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d006      	beq.n	80064d4 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80064c6:	23ff      	movs	r3, #255	; 0xff
 80064c8:	757b      	strb	r3, [r7, #21]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064d0:	849a      	strh	r2, [r3, #36]	; 0x24
 80064d2:	e055      	b.n	8006580 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d12f      	bne.n	800653a <dir_find+0xf8>
				if (dp->lfn) {
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04e      	beq.n	8006580 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80064e2:	7dbb      	ldrb	r3, [r7, #22]
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00c      	beq.n	8006506 <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	7b5b      	ldrb	r3, [r3, #13]
 80064f0:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80064f2:	7dbb      	ldrb	r3, [r7, #22]
 80064f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f8:	75bb      	strb	r3, [r7, #22]
 80064fa:	7dbb      	ldrb	r3, [r7, #22]
 80064fc:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	88da      	ldrh	r2, [r3, #6]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8006506:	7dba      	ldrb	r2, [r7, #22]
 8006508:	7d7b      	ldrb	r3, [r7, #21]
 800650a:	429a      	cmp	r2, r3
 800650c:	d112      	bne.n	8006534 <dir_find+0xf2>
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	330d      	adds	r3, #13
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	7d3a      	ldrb	r2, [r7, #20]
 8006516:	429a      	cmp	r2, r3
 8006518:	d10c      	bne.n	8006534 <dir_find+0xf2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	6939      	ldr	r1, [r7, #16]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fdfd 	bl	8006120 <cmp_lfn>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <dir_find+0xf2>
 800652c:	7d7b      	ldrb	r3, [r7, #21]
 800652e:	3b01      	subs	r3, #1
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e000      	b.n	8006536 <dir_find+0xf4>
 8006534:	23ff      	movs	r3, #255	; 0xff
 8006536:	757b      	strb	r3, [r7, #21]
 8006538:	e022      	b.n	8006580 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800653a:	7d7b      	ldrb	r3, [r7, #21]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <dir_find+0x10e>
 8006540:	6938      	ldr	r0, [r7, #16]
 8006542:	f7ff ff5e 	bl	8006402 <sum_sfn>
 8006546:	4603      	mov	r3, r0
 8006548:	461a      	mov	r2, r3
 800654a:	7d3b      	ldrb	r3, [r7, #20]
 800654c:	4293      	cmp	r3, r2
 800654e:	d024      	beq.n	800659a <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	330b      	adds	r3, #11
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <dir_find+0x132>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	220b      	movs	r2, #11
 8006566:	4619      	mov	r1, r3
 8006568:	6938      	ldr	r0, [r7, #16]
 800656a:	f7fe fc55 	bl	8004e18 <mem_cmp>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d014      	beq.n	800659e <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8006574:	23ff      	movs	r3, #255	; 0xff
 8006576:	757b      	strb	r3, [r7, #21]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800657e:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006580:	2100      	movs	r1, #0
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7ff fc1c 	bl	8005dc0 <dir_next>
 8006588:	4603      	mov	r3, r0
 800658a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f43f af6e 	beq.w	8006470 <dir_find+0x2e>
 8006594:	e004      	b.n	80065a0 <dir_find+0x15e>
		if (res != FR_OK) break;
 8006596:	bf00      	nop
 8006598:	e002      	b.n	80065a0 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800659a:	bf00      	nop
 800659c:	e000      	b.n	80065a0 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800659e:	bf00      	nop

	return res;
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3718      	adds	r7, #24
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08c      	sub	sp, #48	; 0x30
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80065c0:	f107 030c 	add.w	r3, r7, #12
 80065c4:	220c      	movs	r2, #12
 80065c6:	6a39      	ldr	r1, [r7, #32]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fbef 	bl	8004dac <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d035      	beq.n	8006644 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	330b      	adds	r3, #11
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 80065e6:	2301      	movs	r3, #1
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ea:	e013      	b.n	8006614 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80065ec:	f107 010c 	add.w	r1, r7, #12
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	6a38      	ldr	r0, [r7, #32]
 80065f6:	f7ff fe75 	bl	80062e4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff ff21 	bl	8006442 <dir_find>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	3301      	adds	r3, #1
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	2b63      	cmp	r3, #99	; 0x63
 8006618:	d9e8      	bls.n	80065ec <dir_register+0x40>
 800661a:	e000      	b.n	800661e <dir_register+0x72>
			if (res != FR_OK) break;
 800661c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	2b64      	cmp	r3, #100	; 0x64
 8006622:	d101      	bne.n	8006628 <dir_register+0x7c>
 8006624:	2307      	movs	r3, #7
 8006626:	e0b9      	b.n	800679c <dir_register+0x1f0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800662c:	2b04      	cmp	r3, #4
 800662e:	d002      	beq.n	8006636 <dir_register+0x8a>
 8006630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006634:	e0b2      	b.n	800679c <dir_register+0x1f0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	330b      	adds	r3, #11
 800663a:	7dfa      	ldrb	r2, [r7, #23]
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d014      	beq.n	8006678 <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 800664e:	2300      	movs	r3, #0
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
 8006652:	e002      	b.n	800665a <dir_register+0xae>
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	3301      	adds	r3, #1
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	4413      	add	r3, r2
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f5      	bne.n	8006654 <dir_register+0xa8>
		nent = (n + 25) / 13;
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	3319      	adds	r3, #25
 800666c:	4a4d      	ldr	r2, [pc, #308]	; (80067a4 <dir_register+0x1f8>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	627b      	str	r3, [r7, #36]	; 0x24
 8006676:	e001      	b.n	800667c <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8006678:	2301      	movs	r3, #1
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800667c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7ff fcb4 	bl	8005fec <dir_alloc>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800668a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d14e      	bne.n	8006730 <dir_register+0x184>
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	3b01      	subs	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d048      	beq.n	8006730 <dir_register+0x184>
		res = dir_sdi(dp, dp->index - nent);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	88db      	ldrh	r3, [r3, #6]
 80066a2:	461a      	mov	r2, r3
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fad6 	bl	8005c5c <dir_sdi>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80066b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d138      	bne.n	8006730 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff fe9d 	bl	8006402 <sum_sfn>
 80066c8:	4603      	mov	r3, r0
 80066ca:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fe fde2 	bl	80052a0 <move_window>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80066e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d121      	bne.n	800672e <dir_register+0x182>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a18      	ldr	r0, [r3, #32]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6959      	ldr	r1, [r3, #20]
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	7efb      	ldrb	r3, [r7, #27]
 80066f8:	f7ff fd80 	bl	80061fc <fit_lfn>
				dp->fs->wflag = 1;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006704:	3304      	adds	r3, #4
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 800670a:	2100      	movs	r1, #0
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fb57 	bl	8005dc0 <dir_next>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006718:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <dir_register+0x184>
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	3b01      	subs	r3, #1
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1cf      	bne.n	80066cc <dir_register+0x120>
 800672c:	e000      	b.n	8006730 <dir_register+0x184>
				if (res != FR_OK) break;
 800672e:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8006730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006734:	2b00      	cmp	r3, #0
 8006736:	d12f      	bne.n	8006798 <dir_register+0x1ec>
		res = move_window(dp->fs, dp->sect);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f7fe fdac 	bl	80052a0 <move_window>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800674e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006752:	2b00      	cmp	r3, #0
 8006754:	d120      	bne.n	8006798 <dir_register+0x1ec>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	2220      	movs	r2, #32
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f7fe fb41 	bl	8004de6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6958      	ldr	r0, [r3, #20]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	220b      	movs	r2, #11
 800676e:	4619      	mov	r1, r3
 8006770:	f7fe fb1c 	bl	8004dac <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	330b      	adds	r3, #11
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	330c      	adds	r3, #12
 8006782:	f002 0218 	and.w	r2, r2, #24
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006792:	3304      	adds	r3, #4
 8006794:	2201      	movs	r2, #1
 8006796:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8006798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800679c:	4618      	mov	r0, r3
 800679e:	3730      	adds	r7, #48	; 0x30
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	4ec4ec4f 	.word	0x4ec4ec4f

080067a8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	e002      	b.n	80067c0 <create_name+0x18>
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	3301      	adds	r3, #1
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b2f      	cmp	r3, #47	; 0x2f
 80067c6:	d0f8      	beq.n	80067ba <create_name+0x12>
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b5c      	cmp	r3, #92	; 0x5c
 80067ce:	d0f4      	beq.n	80067ba <create_name+0x12>
	lfn = dp->lfn;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	61ba      	str	r2, [r7, #24]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	4413      	add	r3, r2
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80067ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ee:	2b1f      	cmp	r3, #31
 80067f0:	d92f      	bls.n	8006852 <create_name+0xaa>
 80067f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067f4:	2b2f      	cmp	r3, #47	; 0x2f
 80067f6:	d02c      	beq.n	8006852 <create_name+0xaa>
 80067f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067fa:	2b5c      	cmp	r3, #92	; 0x5c
 80067fc:	d029      	beq.n	8006852 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2bfe      	cmp	r3, #254	; 0xfe
 8006802:	d901      	bls.n	8006808 <create_name+0x60>
			return FR_INVALID_NAME;
 8006804:	2306      	movs	r3, #6
 8006806:	e176      	b.n	8006af6 <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800680a:	b2db      	uxtb	r3, r3
 800680c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800680e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006810:	2101      	movs	r1, #1
 8006812:	4618      	mov	r0, r3
 8006814:	f001 fa7c 	bl	8007d10 <ff_convert>
 8006818:	4603      	mov	r3, r0
 800681a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800681c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <create_name+0x7e>
 8006822:	2306      	movs	r3, #6
 8006824:	e167      	b.n	8006af6 <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8006826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006828:	2b7f      	cmp	r3, #127	; 0x7f
 800682a:	d809      	bhi.n	8006840 <create_name+0x98>
 800682c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800682e:	4619      	mov	r1, r3
 8006830:	48b3      	ldr	r0, [pc, #716]	; (8006b00 <create_name+0x358>)
 8006832:	f7fe fb17 	bl	8004e64 <chk_chr>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <create_name+0x98>
			return FR_INVALID_NAME;
 800683c:	2306      	movs	r3, #6
 800683e:	e15a      	b.n	8006af6 <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	617a      	str	r2, [r7, #20]
 8006846:	005b      	lsls	r3, r3, #1
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800684e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006850:	e7c5      	b.n	80067de <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	441a      	add	r2, r3
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800685c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800685e:	2b1f      	cmp	r3, #31
 8006860:	d801      	bhi.n	8006866 <create_name+0xbe>
 8006862:	2304      	movs	r3, #4
 8006864:	e000      	b.n	8006868 <create_name+0xc0>
 8006866:	2300      	movs	r3, #0
 8006868:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800686c:	e011      	b.n	8006892 <create_name+0xea>
		w = lfn[di - 1];
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006874:	3b01      	subs	r3, #1
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	881b      	ldrh	r3, [r3, #0]
 800687e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006882:	2b20      	cmp	r3, #32
 8006884:	d002      	beq.n	800688c <create_name+0xe4>
 8006886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006888:	2b2e      	cmp	r3, #46	; 0x2e
 800688a:	d106      	bne.n	800689a <create_name+0xf2>
		di--;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3b01      	subs	r3, #1
 8006890:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ea      	bne.n	800686e <create_name+0xc6>
 8006898:	e000      	b.n	800689c <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 800689a:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <create_name+0xfe>
 80068a2:	2306      	movs	r3, #6
 80068a4:	e127      	b.n	8006af6 <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	2200      	movs	r2, #0
 80068b0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	220b      	movs	r2, #11
 80068b8:	2120      	movs	r1, #32
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fa93 	bl	8004de6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80068c0:	2300      	movs	r3, #0
 80068c2:	61bb      	str	r3, [r7, #24]
 80068c4:	e002      	b.n	80068cc <create_name+0x124>
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	3301      	adds	r3, #1
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d0f5      	beq.n	80068c6 <create_name+0x11e>
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	2b2e      	cmp	r3, #46	; 0x2e
 80068e6:	d0ee      	beq.n	80068c6 <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <create_name+0x15a>
 80068ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80068f2:	f043 0303 	orr.w	r3, r3, #3
 80068f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80068fa:	e002      	b.n	8006902 <create_name+0x15a>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3b01      	subs	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <create_name+0x174>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800690e:	3b01      	subs	r3, #1
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	2b2e      	cmp	r3, #46	; 0x2e
 800691a:	d1ef      	bne.n	80068fc <create_name+0x154>

	b = i = 0; ni = 8;
 800691c:	2300      	movs	r3, #0
 800691e:	623b      	str	r3, [r7, #32]
 8006920:	2300      	movs	r3, #0
 8006922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006926:	2308      	movs	r3, #8
 8006928:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	61ba      	str	r2, [r7, #24]
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800693a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 808f 	beq.w	8006a60 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006944:	2b20      	cmp	r3, #32
 8006946:	d006      	beq.n	8006956 <create_name+0x1ae>
 8006948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800694a:	2b2e      	cmp	r3, #46	; 0x2e
 800694c:	d10a      	bne.n	8006964 <create_name+0x1bc>
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	429a      	cmp	r2, r3
 8006954:	d006      	beq.n	8006964 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 8006956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800695a:	f043 0303 	orr.w	r3, r3, #3
 800695e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006962:	e07c      	b.n	8006a5e <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006964:	6a3a      	ldr	r2, [r7, #32]
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	429a      	cmp	r2, r3
 800696a:	d203      	bcs.n	8006974 <create_name+0x1cc>
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	429a      	cmp	r2, r3
 8006972:	d123      	bne.n	80069bc <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2b0b      	cmp	r3, #11
 8006978:	d106      	bne.n	8006988 <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 800697a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800697e:	f043 0303 	orr.w	r3, r3, #3
 8006982:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006986:	e06e      	b.n	8006a66 <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	429a      	cmp	r2, r3
 800698e:	d005      	beq.n	800699c <create_name+0x1f4>
 8006990:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006994:	f043 0303 	orr.w	r3, r3, #3
 8006998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d85f      	bhi.n	8006a64 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	2308      	movs	r3, #8
 80069aa:	623b      	str	r3, [r7, #32]
 80069ac:	230b      	movs	r3, #11
 80069ae:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80069b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069ba:	e050      	b.n	8006a5e <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80069bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069be:	2b7f      	cmp	r3, #127	; 0x7f
 80069c0:	d914      	bls.n	80069ec <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80069c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069c4:	2100      	movs	r1, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f001 f9a2 	bl	8007d10 <ff_convert>
 80069cc:	4603      	mov	r3, r0
 80069ce:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80069d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d004      	beq.n	80069e0 <create_name+0x238>
 80069d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069d8:	3b80      	subs	r3, #128	; 0x80
 80069da:	4a4a      	ldr	r2, [pc, #296]	; (8006b04 <create_name+0x35c>)
 80069dc:	5cd3      	ldrb	r3, [r2, r3]
 80069de:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80069e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069e4:	f043 0302 	orr.w	r3, r3, #2
 80069e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80069ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <create_name+0x25a>
 80069f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f4:	4619      	mov	r1, r3
 80069f6:	4844      	ldr	r0, [pc, #272]	; (8006b08 <create_name+0x360>)
 80069f8:	f7fe fa34 	bl	8004e64 <chk_chr>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a02:	235f      	movs	r3, #95	; 0x5f
 8006a04:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a0a:	f043 0303 	orr.w	r3, r3, #3
 8006a0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a12:	e01b      	b.n	8006a4c <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d909      	bls.n	8006a2e <create_name+0x286>
 8006a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a1c:	2b5a      	cmp	r3, #90	; 0x5a
 8006a1e:	d806      	bhi.n	8006a2e <create_name+0x286>
					b |= 2;
 8006a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a24:	f043 0302 	orr.w	r3, r3, #2
 8006a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a2c:	e00e      	b.n	8006a4c <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a30:	2b60      	cmp	r3, #96	; 0x60
 8006a32:	d90b      	bls.n	8006a4c <create_name+0x2a4>
 8006a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a36:	2b7a      	cmp	r3, #122	; 0x7a
 8006a38:	d808      	bhi.n	8006a4c <create_name+0x2a4>
						b |= 1; w -= 0x20;
 8006a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a48:	3b20      	subs	r3, #32
 8006a4a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	1c59      	adds	r1, r3, #1
 8006a54:	6239      	str	r1, [r7, #32]
 8006a56:	4413      	add	r3, r2
 8006a58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8006a5e:	e764      	b.n	800692a <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 8006a60:	bf00      	nop
 8006a62:	e000      	b.n	8006a66 <create_name+0x2be>
			if (si > di) break;			/* No extension */
 8006a64:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2be5      	cmp	r3, #229	; 0xe5
 8006a6e:	d103      	bne.n	8006a78 <create_name+0x2d0>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2205      	movs	r2, #5
 8006a76:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d104      	bne.n	8006a88 <create_name+0x2e0>
 8006a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8006a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a8c:	f003 030c 	and.w	r3, r3, #12
 8006a90:	2b0c      	cmp	r3, #12
 8006a92:	d005      	beq.n	8006aa0 <create_name+0x2f8>
 8006a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d105      	bne.n	8006aac <create_name+0x304>
		cf |= NS_LFN;
 8006aa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d117      	bne.n	8006ae8 <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d105      	bne.n	8006ad0 <create_name+0x328>
 8006ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ac8:	f043 0310 	orr.w	r3, r3, #16
 8006acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ad4:	f003 030c 	and.w	r3, r3, #12
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d105      	bne.n	8006ae8 <create_name+0x340>
 8006adc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ae0:	f043 0308 	orr.w	r3, r3, #8
 8006ae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	330b      	adds	r3, #11
 8006aee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006af2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006af4:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3728      	adds	r7, #40	; 0x28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	08007e78 	.word	0x08007e78
 8006b04:	08007ed8 	.word	0x08007ed8
 8006b08:	08007e84 	.word	0x08007e84

08006b0c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b2f      	cmp	r3, #47	; 0x2f
 8006b1c:	d003      	beq.n	8006b26 <follow_path+0x1a>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b5c      	cmp	r3, #92	; 0x5c
 8006b24:	d102      	bne.n	8006b2c <follow_path+0x20>
		path++;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	2b1f      	cmp	r3, #31
 8006b38:	d809      	bhi.n	8006b4e <follow_path+0x42>
		res = dir_sdi(dp, 0);
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff f88d 	bl	8005c5c <dir_sdi>
 8006b42:	4603      	mov	r3, r0
 8006b44:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	615a      	str	r2, [r3, #20]
 8006b4c:	e041      	b.n	8006bd2 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b4e:	463b      	mov	r3, r7
 8006b50:	4619      	mov	r1, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fe28 	bl	80067a8 <create_name>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d132      	bne.n	8006bc8 <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff fc6d 	bl	8006442 <dir_find>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	7adb      	ldrb	r3, [r3, #11]
 8006b72:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d125      	bne.n	8006bcc <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006b80:	7bbb      	ldrb	r3, [r7, #14]
 8006b82:	f003 0304 	and.w	r3, r3, #4
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d120      	bne.n	8006bcc <follow_path+0xc0>
 8006b8a:	2305      	movs	r3, #5
 8006b8c:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006b8e:	e01d      	b.n	8006bcc <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11a      	bne.n	8006bd0 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	330b      	adds	r3, #11
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d102      	bne.n	8006bb4 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 8006bae:	2305      	movs	r3, #5
 8006bb0:	73fb      	strb	r3, [r7, #15]
 8006bb2:	e00e      	b.n	8006bd2 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68b9      	ldr	r1, [r7, #8]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fa5c 	bl	8006078 <ld_clust>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006bc6:	e7c2      	b.n	8006b4e <follow_path+0x42>
			if (res != FR_OK) break;
 8006bc8:	bf00      	nop
 8006bca:	e002      	b.n	8006bd2 <follow_path+0xc6>
				break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bd0:	bf00      	nop
		}
	}

	return res;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006be4:	f04f 33ff 	mov.w	r3, #4294967295
 8006be8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d031      	beq.n	8006c56 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e002      	b.n	8006c00 <get_ldnumber+0x24>
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b1f      	cmp	r3, #31
 8006c06:	d903      	bls.n	8006c10 <get_ldnumber+0x34>
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b3a      	cmp	r3, #58	; 0x3a
 8006c0e:	d1f4      	bne.n	8006bfa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b3a      	cmp	r3, #58	; 0x3a
 8006c16:	d11c      	bne.n	8006c52 <get_ldnumber+0x76>
			tp = *path;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	60fa      	str	r2, [r7, #12]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	3b30      	subs	r3, #48	; 0x30
 8006c28:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b09      	cmp	r3, #9
 8006c2e:	d80e      	bhi.n	8006c4e <get_ldnumber+0x72>
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d10a      	bne.n	8006c4e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <get_ldnumber+0x72>
					vol = (int)i;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	3301      	adds	r3, #1
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	e002      	b.n	8006c58 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c52:	2300      	movs	r3, #0
 8006c54:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c56:	693b      	ldr	r3, [r7, #16]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
	...

08006c64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c74:	3304      	adds	r3, #4
 8006c76:	2200      	movs	r2, #0
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8006c80:	330c      	adds	r3, #12
 8006c82:	f04f 32ff 	mov.w	r2, #4294967295
 8006c86:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fe fb08 	bl	80052a0 <move_window>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <check_fs+0x36>
		return 3;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e04a      	b.n	8006d30 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	021b      	lsls	r3, r3, #8
 8006ca6:	b21a      	sxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8006cae:	b21b      	sxth	r3, r3
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	b21b      	sxth	r3, r3
 8006cb4:	4a20      	ldr	r2, [pc, #128]	; (8006d38 <check_fs+0xd4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d001      	beq.n	8006cbe <check_fs+0x5a>
		return 2;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e038      	b.n	8006d30 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3336      	adds	r3, #54	; 0x36
 8006cc2:	3303      	adds	r3, #3
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	061a      	lsls	r2, r3, #24
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3336      	adds	r3, #54	; 0x36
 8006ccc:	3302      	adds	r3, #2
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	041b      	lsls	r3, r3, #16
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	3236      	adds	r2, #54	; 0x36
 8006cd8:	3201      	adds	r2, #1
 8006cda:	7812      	ldrb	r2, [r2, #0]
 8006cdc:	0212      	lsls	r2, r2, #8
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006cec:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <check_fs+0xd8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d101      	bne.n	8006cf6 <check_fs+0x92>
		return 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e01c      	b.n	8006d30 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3352      	adds	r3, #82	; 0x52
 8006cfa:	3303      	adds	r3, #3
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	061a      	lsls	r2, r3, #24
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3352      	adds	r3, #82	; 0x52
 8006d04:	3302      	adds	r3, #2
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	041b      	lsls	r3, r3, #16
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	3252      	adds	r2, #82	; 0x52
 8006d10:	3201      	adds	r2, #1
 8006d12:	7812      	ldrb	r2, [r2, #0]
 8006d14:	0212      	lsls	r2, r2, #8
 8006d16:	4313      	orrs	r3, r2
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d24:	4a05      	ldr	r2, [pc, #20]	; (8006d3c <check_fs+0xd8>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d101      	bne.n	8006d2e <check_fs+0xca>
		return 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <check_fs+0xcc>

	return 1;
 8006d2e:	2301      	movs	r3, #1
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3708      	adds	r7, #8
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	ffffaa55 	.word	0xffffaa55
 8006d3c:	00544146 	.word	0x00544146

08006d40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b096      	sub	sp, #88	; 0x58
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d54:	68b8      	ldr	r0, [r7, #8]
 8006d56:	f7ff ff41 	bl	8006bdc <get_ldnumber>
 8006d5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da01      	bge.n	8006d66 <find_volume+0x26>
 8006d62:	230b      	movs	r3, #11
 8006d64:	e33c      	b.n	80073e0 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d66:	4ab3      	ldr	r2, [pc, #716]	; (8007034 <find_volume+0x2f4>)
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <find_volume+0x3a>
 8006d76:	230c      	movs	r3, #12
 8006d78:	e332      	b.n	80073e0 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7e:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01d      	beq.n	8006dc8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d92:	3301      	adds	r3, #1
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7fd ff6a 	bl	8004c70 <disk_status>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006da2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10c      	bne.n	8006dc8 <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <find_volume+0x84>
 8006db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8006dc0:	230a      	movs	r3, #10
 8006dc2:	e30d      	b.n	80073e0 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	e30b      	b.n	80073e0 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ddc:	3301      	adds	r3, #1
 8006dde:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de6:	3301      	adds	r3, #1
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd ff5a 	bl	8004ca4 <disk_initialize>
 8006df0:	4603      	mov	r3, r0
 8006df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006df6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e02:	2303      	movs	r3, #3
 8006e04:	e2ec      	b.n	80073e0 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <find_volume+0xdc>
 8006e0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8006e18:	230a      	movs	r3, #10
 8006e1a:	e2e1      	b.n	80073e0 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e22:	3301      	adds	r3, #1
 8006e24:	7818      	ldrb	r0, [r3, #0]
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2c:	330a      	adds	r3, #10
 8006e2e:	461a      	mov	r2, r3
 8006e30:	2102      	movs	r1, #2
 8006e32:	f7fd ff9d 	bl	8004d70 <disk_ioctl>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10f      	bne.n	8006e5c <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e42:	330a      	adds	r3, #10
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e4a:	d307      	bcc.n	8006e5c <find_volume+0x11c>
 8006e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e52:	330a      	adds	r3, #10
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e5a:	d901      	bls.n	8006e60 <find_volume+0x120>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e2bf      	b.n	80073e0 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006e64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e68:	f7ff fefc 	bl	8006c64 <check_fs>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006e72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d155      	bne.n	8006f26 <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7e:	e029      	b.n	8006ed4 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006e80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e8a:	4413      	add	r3, r2
 8006e8c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	3304      	adds	r3, #4
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d012      	beq.n	8006ebe <find_volume+0x17e>
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	330b      	adds	r3, #11
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	061a      	lsls	r2, r3, #24
 8006ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea2:	330a      	adds	r3, #10
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	041b      	lsls	r3, r3, #16
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eac:	3209      	adds	r2, #9
 8006eae:	7812      	ldrb	r2, [r2, #0]
 8006eb0:	0212      	lsls	r2, r2, #8
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb6:	3208      	adds	r2, #8
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	e000      	b.n	8006ec0 <find_volume+0x180>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006ec8:	440b      	add	r3, r1
 8006eca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d9d2      	bls.n	8006e80 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006eda:	2300      	movs	r3, #0
 8006edc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <find_volume+0x1aa>
 8006ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006ef8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <find_volume+0x1cc>
 8006f00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f04:	f7ff feae 	bl	8006c64 <check_fs>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	e000      	b.n	8006f0e <find_volume+0x1ce>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006f12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d005      	beq.n	8006f26 <find_volume+0x1e6>
 8006f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d9e1      	bls.n	8006eea <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d101      	bne.n	8006f32 <find_volume+0x1f2>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e256      	b.n	80073e0 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006f32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <find_volume+0x1fe>
 8006f3a:	230d      	movs	r3, #13
 8006f3c:	e250      	b.n	80073e0 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f40:	7b1b      	ldrb	r3, [r3, #12]
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	b21a      	sxth	r2, r3
 8006f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f48:	7adb      	ldrb	r3, [r3, #11]
 8006f4a:	b21b      	sxth	r3, r3
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f58:	330a      	adds	r3, #10
 8006f5a:	881b      	ldrh	r3, [r3, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d001      	beq.n	8006f64 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8006f60:	230d      	movs	r3, #13
 8006f62:	e23d      	b.n	80073e0 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f66:	7ddb      	ldrb	r3, [r3, #23]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	b21a      	sxth	r2, r3
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	7d9b      	ldrb	r3, [r3, #22]
 8006f70:	b21b      	sxth	r3, r3
 8006f72:	4313      	orrs	r3, r2
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d112      	bne.n	8006fa6 <find_volume+0x266>
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8006f86:	061a      	lsls	r2, r3, #24
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006f8e:	041b      	lsls	r3, r3, #16
 8006f90:	4313      	orrs	r3, r2
 8006f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f94:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006f98:	0212      	lsls	r2, r2, #8
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8006fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fac:	3318      	adds	r3, #24
 8006fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fb0:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	7c1a      	ldrb	r2, [r3, #16]
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fbc:	3303      	adds	r3, #3
 8006fbe:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc6:	3303      	adds	r3, #3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d008      	beq.n	8006fe0 <find_volume+0x2a0>
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd4:	3303      	adds	r3, #3
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b02      	cmp	r3, #2
 8006fda:	d001      	beq.n	8006fe0 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8006fdc:	230d      	movs	r3, #13
 8006fde:	e1ff      	b.n	80073e0 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe6:	3303      	adds	r3, #3
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	7b5a      	ldrb	r2, [r3, #13]
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffe:	3302      	adds	r3, #2
 8007000:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007008:	3302      	adds	r3, #2
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00e      	beq.n	800702e <find_volume+0x2ee>
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007016:	3302      	adds	r3, #2
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007022:	3302      	adds	r3, #2
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	3b01      	subs	r3, #1
 8007028:	4013      	ands	r3, r2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d004      	beq.n	8007038 <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 800702e:	230d      	movs	r3, #13
 8007030:	e1d6      	b.n	80073e0 <find_volume+0x6a0>
 8007032:	bf00      	nop
 8007034:	20000044 	.word	0x20000044

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	7c9b      	ldrb	r3, [r3, #18]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	b21a      	sxth	r2, r3
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	7c5b      	ldrb	r3, [r3, #17]
 8007044:	b21b      	sxth	r3, r3
 8007046:	4313      	orrs	r3, r2
 8007048:	b21b      	sxth	r3, r3
 800704a:	b29a      	uxth	r2, r3
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007052:	3308      	adds	r3, #8
 8007054:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800705c:	3308      	adds	r3, #8
 800705e:	881a      	ldrh	r2, [r3, #0]
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007066:	330a      	adds	r3, #10
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	095b      	lsrs	r3, r3, #5
 800706c:	b29b      	uxth	r3, r3
 800706e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007072:	fb03 f301 	mul.w	r3, r3, r1
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	b29b      	uxth	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 800707e:	230d      	movs	r3, #13
 8007080:	e1ae      	b.n	80073e0 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	7d1b      	ldrb	r3, [r3, #20]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	b21a      	sxth	r2, r3
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	7cdb      	ldrb	r3, [r3, #19]
 800708e:	b21b      	sxth	r3, r3
 8007090:	4313      	orrs	r3, r2
 8007092:	b21b      	sxth	r3, r3
 8007094:	b29b      	uxth	r3, r3
 8007096:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8007098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709a:	2b00      	cmp	r3, #0
 800709c:	d112      	bne.n	80070c4 <find_volume+0x384>
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80070a4:	061a      	lsls	r2, r3, #24
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	4313      	orrs	r3, r2
 80070b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b2:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80070b6:	0212      	lsls	r2, r2, #8
 80070b8:	4313      	orrs	r3, r2
 80070ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070bc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	7bdb      	ldrb	r3, [r3, #15]
 80070c8:	021b      	lsls	r3, r3, #8
 80070ca:	b21a      	sxth	r2, r3
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	7b9b      	ldrb	r3, [r3, #14]
 80070d0:	b21b      	sxth	r3, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b21b      	sxth	r3, r3
 80070d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80070d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <find_volume+0x3a2>
 80070de:	230d      	movs	r3, #13
 80070e0:	e17e      	b.n	80073e0 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80070e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070e6:	441a      	add	r2, r3
 80070e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ee:	3308      	adds	r3, #8
 80070f0:	8819      	ldrh	r1, [r3, #0]
 80070f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070f8:	330a      	adds	r3, #10
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	b29b      	uxth	r3, r3
 8007100:	fbb1 f3f3 	udiv	r3, r1, r3
 8007104:	b29b      	uxth	r3, r3
 8007106:	4413      	add	r3, r2
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800710a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	429a      	cmp	r2, r3
 8007110:	d201      	bcs.n	8007116 <find_volume+0x3d6>
 8007112:	230d      	movs	r3, #13
 8007114:	e164      	b.n	80073e0 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8007116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711a:	1ad2      	subs	r2, r2, r3
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007122:	3302      	adds	r3, #2
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	fbb2 f3f3 	udiv	r3, r2, r3
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <find_volume+0x3f6>
 8007132:	230d      	movs	r3, #13
 8007134:	e154      	b.n	80073e0 <find_volume+0x6a0>
	fmt = FS_FAT12;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007142:	4293      	cmp	r3, r2
 8007144:	d902      	bls.n	800714c <find_volume+0x40c>
 8007146:	2302      	movs	r3, #2
 8007148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007152:	4293      	cmp	r3, r2
 8007154:	d902      	bls.n	800715c <find_volume+0x41c>
 8007156:	2303      	movs	r3, #3
 8007158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	1c9a      	adds	r2, r3, #2
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	3314      	adds	r3, #20
 8007168:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007170:	331c      	adds	r3, #28
 8007172:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007174:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8007176:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800717a:	441a      	add	r2, r3
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007182:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8007184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	441a      	add	r2, r3
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007190:	3308      	adds	r3, #8
 8007192:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 8007194:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007198:	2b03      	cmp	r3, #3
 800719a:	d127      	bne.n	80071ec <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a2:	3308      	adds	r3, #8
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <find_volume+0x46e>
 80071aa:	230d      	movs	r3, #13
 80071ac:	e118      	b.n	80073e0 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80071b4:	061a      	lsls	r2, r3, #24
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80071bc:	041b      	lsls	r3, r3, #16
 80071be:	4313      	orrs	r3, r2
 80071c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80071c6:	0212      	lsls	r2, r2, #8
 80071c8:	4313      	orrs	r3, r2
 80071ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071cc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80071d0:	431a      	orrs	r2, r3
 80071d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071d4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80071d8:	3304      	adds	r3, #4
 80071da:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e2:	3314      	adds	r3, #20
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	647b      	str	r3, [r7, #68]	; 0x44
 80071ea:	e030      	b.n	800724e <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80071ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f2:	3308      	adds	r3, #8
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <find_volume+0x4be>
 80071fa:	230d      	movs	r3, #13
 80071fc:	e0f0      	b.n	80073e0 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007208:	441a      	add	r2, r3
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007210:	3304      	adds	r3, #4
 8007212:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007218:	2b02      	cmp	r3, #2
 800721a:	d106      	bne.n	800722a <find_volume+0x4ea>
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007222:	3314      	adds	r3, #20
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	e010      	b.n	800724c <find_volume+0x50c>
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007230:	3314      	adds	r3, #20
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4613      	mov	r3, r2
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	4413      	add	r3, r2
 800723a:	085a      	lsrs	r2, r3, #1
 800723c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007242:	3314      	adds	r3, #20
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800724c:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007254:	3318      	adds	r3, #24
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800725e:	330a      	adds	r3, #10
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	4619      	mov	r1, r3
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	440b      	add	r3, r1
 8007268:	1e59      	subs	r1, r3, #1
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007270:	330a      	adds	r3, #10
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	fbb1 f3f3 	udiv	r3, r1, r3
 8007278:	429a      	cmp	r2, r3
 800727a:	d201      	bcs.n	8007280 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 800727c:	230d      	movs	r3, #13
 800727e:	e0af      	b.n	80073e0 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007286:	3310      	adds	r3, #16
 8007288:	f04f 32ff 	mov.w	r2, #4294967295
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007294:	3310      	adds	r3, #16
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800729e:	330c      	adds	r3, #12
 80072a0:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a8:	3305      	adds	r3, #5
 80072aa:	2280      	movs	r2, #128	; 0x80
 80072ac:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80072ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d17d      	bne.n	80073b2 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80072b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	b21a      	sxth	r2, r3
 80072c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072c6:	b21b      	sxth	r3, r3
 80072c8:	4313      	orrs	r3, r2
 80072ca:	b21b      	sxth	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d170      	bne.n	80073b2 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 80072d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d2:	3301      	adds	r3, #1
 80072d4:	4619      	mov	r1, r3
 80072d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072d8:	f7fd ffe2 	bl	80052a0 <move_window>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d167      	bne.n	80073b2 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e8:	3305      	adds	r3, #5
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	b21a      	sxth	r2, r3
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80072fe:	b21b      	sxth	r3, r3
 8007300:	4313      	orrs	r3, r2
 8007302:	b21b      	sxth	r3, r3
 8007304:	4a38      	ldr	r2, [pc, #224]	; (80073e8 <find_volume+0x6a8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d153      	bne.n	80073b2 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	78db      	ldrb	r3, [r3, #3]
 800730e:	061a      	lsls	r2, r3, #24
 8007310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007312:	789b      	ldrb	r3, [r3, #2]
 8007314:	041b      	lsls	r3, r3, #16
 8007316:	4313      	orrs	r3, r2
 8007318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800731a:	7852      	ldrb	r2, [r2, #1]
 800731c:	0212      	lsls	r2, r2, #8
 800731e:	4313      	orrs	r3, r2
 8007320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007322:	7812      	ldrb	r2, [r2, #0]
 8007324:	4313      	orrs	r3, r2
 8007326:	4a31      	ldr	r2, [pc, #196]	; (80073ec <find_volume+0x6ac>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d142      	bne.n	80073b2 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800732c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732e:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8007332:	061a      	lsls	r2, r3, #24
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800733a:	041b      	lsls	r3, r3, #16
 800733c:	4313      	orrs	r3, r2
 800733e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007340:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8007344:	0212      	lsls	r2, r2, #8
 8007346:	4313      	orrs	r3, r2
 8007348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800734a:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800734e:	4313      	orrs	r3, r2
 8007350:	4a27      	ldr	r2, [pc, #156]	; (80073f0 <find_volume+0x6b0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d12d      	bne.n	80073b2 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800735c:	061a      	lsls	r2, r3, #24
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8007364:	041b      	lsls	r3, r3, #16
 8007366:	4313      	orrs	r3, r2
 8007368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800736a:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800736e:	0212      	lsls	r2, r2, #8
 8007370:	4313      	orrs	r3, r2
 8007372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007374:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8007378:	431a      	orrs	r2, r3
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007380:	3310      	adds	r3, #16
 8007382:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007386:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800738a:	061a      	lsls	r2, r3, #24
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8007392:	041b      	lsls	r3, r3, #16
 8007394:	4313      	orrs	r3, r2
 8007396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007398:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800739c:	0212      	lsls	r2, r2, #8
 800739e:	4313      	orrs	r3, r2
 80073a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a2:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80073a6:	431a      	orrs	r2, r3
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ae:	330c      	adds	r3, #12
 80073b0:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80073bc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80073be:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <find_volume+0x6b4>)
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	3301      	adds	r3, #1
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <find_volume+0x6b4>)
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	4b0a      	ldr	r3, [pc, #40]	; (80073f4 <find_volume+0x6b4>)
 80073cc:	881a      	ldrh	r2, [r3, #0]
 80073ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d4:	3306      	adds	r3, #6
 80073d6:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80073d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073da:	f7fd fedf 	bl	800519c <clear_lock>
#endif

	return FR_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3758      	adds	r7, #88	; 0x58
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	ffffaa55 	.word	0xffffaa55
 80073ec:	41615252 	.word	0x41615252
 80073f0:	61417272 	.word	0x61417272
 80073f4:	20000048 	.word	0x20000048

080073f8 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d022      	beq.n	8007450 <validate+0x58>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d01e      	beq.n	8007450 <validate+0x58>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d017      	beq.n	8007450 <validate+0x58>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007428:	3306      	adds	r3, #6
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	889b      	ldrh	r3, [r3, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d10d      	bne.n	8007450 <validate+0x58>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800743c:	3301      	adds	r3, #1
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f7fd fc15 	bl	8004c70 <disk_status>
 8007446:	4603      	mov	r3, r0
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d001      	beq.n	8007454 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007450:	2309      	movs	r3, #9
 8007452:	e000      	b.n	8007456 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8007472:	f107 0310 	add.w	r3, r7, #16
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fbb0 	bl	8006bdc <get_ldnumber>
 800747c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b00      	cmp	r3, #0
 8007482:	da01      	bge.n	8007488 <f_mount+0x28>
 8007484:	230b      	movs	r3, #11
 8007486:	e02f      	b.n	80074e8 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007488:	4a19      	ldr	r2, [pc, #100]	; (80074f0 <f_mount+0x90>)
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007490:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 8007498:	69b8      	ldr	r0, [r7, #24]
 800749a:	f7fd fe7f 	bl	800519c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d004      	beq.n	80074b8 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b4:	2200      	movs	r2, #0
 80074b6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	490d      	ldr	r1, [pc, #52]	; (80074f0 <f_mount+0x90>)
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <f_mount+0x6e>
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d001      	beq.n	80074d2 <f_mount+0x72>
 80074ce:	2300      	movs	r3, #0
 80074d0:	e00a      	b.n	80074e8 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80074d2:	f107 0108 	add.w	r1, r7, #8
 80074d6:	f107 030c 	add.w	r3, r7, #12
 80074da:	2200      	movs	r2, #0
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fc2f 	bl	8006d40 <find_volume>
 80074e2:	4603      	mov	r3, r0
 80074e4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80074e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20000044 	.word	0x20000044

080074f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b096      	sub	sp, #88	; 0x58
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <f_open+0x18>
 8007508:	2309      	movs	r3, #9
 800750a:	e178      	b.n	80077fe <f_open+0x30a>
	fp->fs = 0;			/* Clear file object */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	b2da      	uxtb	r2, r3
 8007522:	f107 0108 	add.w	r1, r7, #8
 8007526:	f107 0320 	add.w	r3, r7, #32
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fc08 	bl	8006d40 <find_volume>
 8007530:	4603      	mov	r3, r0
 8007532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800753a:	2b00      	cmp	r3, #0
 800753c:	f040 815d 	bne.w	80077fa <f_open+0x306>
		INIT_BUF(dj);
 8007540:	f107 0314 	add.w	r3, r7, #20
 8007544:	63bb      	str	r3, [r7, #56]	; 0x38
 8007546:	4bb0      	ldr	r3, [pc, #704]	; (8007808 <f_open+0x314>)
 8007548:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	f107 0320 	add.w	r3, r7, #32
 8007550:	4611      	mov	r1, r2
 8007552:	4618      	mov	r0, r3
 8007554:	f7ff fada 	bl	8006b0c <follow_path>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 800755e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007560:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007562:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007566:	2b00      	cmp	r3, #0
 8007568:	d118      	bne.n	800759c <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800756a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d103      	bne.n	8007578 <f_open+0x84>
				res = FR_INVALID_NAME;
 8007570:	2306      	movs	r3, #6
 8007572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007576:	e011      	b.n	800759c <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	bf14      	ite	ne
 8007582:	2301      	movne	r3, #1
 8007584:	2300      	moveq	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	461a      	mov	r2, r3
 800758a:	f107 0320 	add.w	r3, r7, #32
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f7fd fc81 	bl	8004e98 <chk_lock>
 8007596:	4603      	mov	r3, r0
 8007598:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	f003 031c 	and.w	r3, r3, #28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80a1 	beq.w	80076ea <f_open+0x1f6>
			if (res != FR_OK) {					/* No file, create new */
 80075a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d019      	beq.n	80075e4 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80075b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d10e      	bne.n	80075d6 <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80075b8:	f7fd fcd8 	bl	8004f6c <enq_lock>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d006      	beq.n	80075d0 <f_open+0xdc>
 80075c2:	f107 0320 	add.w	r3, r7, #32
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fe fff0 	bl	80065ac <dir_register>
 80075cc:	4603      	mov	r3, r0
 80075ce:	e000      	b.n	80075d2 <f_open+0xde>
 80075d0:	2312      	movs	r3, #18
 80075d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	f043 0308 	orr.w	r3, r3, #8
 80075dc:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	653b      	str	r3, [r7, #80]	; 0x50
 80075e2:	e012      	b.n	800760a <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80075e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e6:	330b      	adds	r3, #11
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 0311 	and.w	r3, r3, #17
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <f_open+0x106>
					res = FR_DENIED;
 80075f2:	2307      	movs	r3, #7
 80075f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80075f8:	e007      	b.n	800760a <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	f003 0304 	and.w	r3, r3, #4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <f_open+0x116>
						res = FR_EXIST;
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800760a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800760e:	2b00      	cmp	r3, #0
 8007610:	f040 8089 	bne.w	8007726 <f_open+0x232>
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	f003 0308 	and.w	r3, r3, #8
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8083 	beq.w	8007726 <f_open+0x232>
				dw = GET_FATTIME();				/* Created time */
 8007620:	f7fc fdf6 	bl	8004210 <get_fattime>
 8007624:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 8007626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007628:	330e      	adds	r3, #14
 800762a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007632:	b29b      	uxth	r3, r3
 8007634:	0a1b      	lsrs	r3, r3, #8
 8007636:	b29a      	uxth	r2, r3
 8007638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763a:	330f      	adds	r3, #15
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007642:	0c1a      	lsrs	r2, r3, #16
 8007644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007646:	3310      	adds	r3, #16
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	701a      	strb	r2, [r3, #0]
 800764c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764e:	0e1a      	lsrs	r2, r3, #24
 8007650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007652:	3311      	adds	r3, #17
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8007658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800765a:	330b      	adds	r3, #11
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007662:	331c      	adds	r3, #28
 8007664:	2200      	movs	r2, #0
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800766a:	331d      	adds	r3, #29
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007672:	331e      	adds	r3, #30
 8007674:	2200      	movs	r2, #0
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767a:	331f      	adds	r3, #31
 800767c:	2200      	movs	r2, #0
 800767e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fcf7 	bl	8006078 <ld_clust>
 800768a:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 800768c:	2100      	movs	r1, #0
 800768e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007690:	f7fe fd20 	bl	80060d4 <st_clust>
				dj.fs->wflag = 1;
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800769a:	3304      	adds	r3, #4
 800769c:	2201      	movs	r2, #1
 800769e:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 80076a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d03f      	beq.n	8007726 <f_open+0x232>
					dw = dj.fs->winsect;
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80076ac:	330c      	adds	r3, #12
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe f97b 	bl	80059b2 <remove_chain>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 80076c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d12d      	bne.n	8007726 <f_open+0x232>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ce:	3a01      	subs	r2, #1
 80076d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076d4:	330c      	adds	r3, #12
 80076d6:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd fddf 	bl	80052a0 <move_window>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80076e8:	e01d      	b.n	8007726 <f_open+0x232>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80076ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d119      	bne.n	8007726 <f_open+0x232>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80076f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076f4:	330b      	adds	r3, #11
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	f003 0310 	and.w	r3, r3, #16
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <f_open+0x214>
					res = FR_NO_FILE;
 8007700:	2304      	movs	r3, #4
 8007702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007706:	e00e      	b.n	8007726 <f_open+0x232>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8007708:	79fb      	ldrb	r3, [r7, #7]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <f_open+0x232>
 8007712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007714:	330b      	adds	r3, #11
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <f_open+0x232>
						res = FR_DENIED;
 8007720:	2307      	movs	r3, #7
 8007722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 8007726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800772a:	2b00      	cmp	r3, #0
 800772c:	d12b      	bne.n	8007786 <f_open+0x292>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <f_open+0x24c>
				mode |= FA__WRITTEN;
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	f043 0320 	orr.w	r3, r3, #32
 800773e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8007746:	330c      	adds	r3, #12
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007752:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	f023 0301 	bic.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	bf14      	ite	ne
 800775e:	2301      	movne	r3, #1
 8007760:	2300      	moveq	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	f107 0320 	add.w	r3, r7, #32
 800776a:	4611      	mov	r1, r2
 800776c:	4618      	mov	r0, r3
 800776e:	f7fd fc21 	bl	8004fb4 <inc_lock>
 8007772:	4602      	mov	r2, r0
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <f_open+0x292>
 8007780:	2302      	movs	r3, #2
 8007782:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8007786:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800778a:	2b00      	cmp	r3, #0
 800778c:	d135      	bne.n	80077fa <f_open+0x306>
			fp->flag = mode;					/* File access mode */
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	79fa      	ldrb	r2, [r7, #7]
 8007792:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fc6a 	bl	8006078 <ld_clust>
 80077a4:	4602      	mov	r2, r0
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80077aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077ac:	331f      	adds	r3, #31
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	061a      	lsls	r2, r3, #24
 80077b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b4:	331e      	adds	r3, #30
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	041b      	lsls	r3, r3, #16
 80077ba:	4313      	orrs	r3, r2
 80077bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077be:	321d      	adds	r2, #29
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	0212      	lsls	r2, r2, #8
 80077c4:	4313      	orrs	r3, r2
 80077c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077c8:	321c      	adds	r2, #28
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80077e4:	6a3a      	ldr	r2, [r7, #32]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077f2:	3306      	adds	r3, #6
 80077f4:	881a      	ldrh	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 80077fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3758      	adds	r7, #88	; 0x58
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000064 	.word	0x20000064

0800780c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	; 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff fde7 	bl	80073f8 <validate>
 800782a:	4603      	mov	r3, r0
 800782c:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800782e:	7ffb      	ldrb	r3, [r7, #31]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <f_read+0x2c>
 8007834:	7ffb      	ldrb	r3, [r7, #31]
 8007836:	e15a      	b.n	8007aee <f_read+0x2e2>
	if (fp->err)								/* Check error */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	79db      	ldrb	r3, [r3, #7]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	79db      	ldrb	r3, [r3, #7]
 8007844:	e153      	b.n	8007aee <f_read+0x2e2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	799b      	ldrb	r3, [r3, #6]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8007852:	2307      	movs	r3, #7
 8007854:	e14b      	b.n	8007aee <f_read+0x2e2>
	remain = fp->fsize - fp->fptr;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	429a      	cmp	r2, r3
 8007868:	f240 813c 	bls.w	8007ae4 <f_read+0x2d8>
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007870:	e138      	b.n	8007ae4 <f_read+0x2d8>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800787e:	330a      	adds	r3, #10
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	fbb2 f1f3 	udiv	r1, r2, r3
 8007886:	fb03 f301 	mul.w	r3, r3, r1
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	f040 80d4 	bne.w	8007a3a <f_read+0x22e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800789e:	330a      	adds	r3, #10
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b0:	3302      	adds	r3, #2
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	3b01      	subs	r3, #1
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	4013      	ands	r3, r2
 80078ba:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d130      	bne.n	8007924 <f_read+0x118>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <f_read+0xc6>
					clst = fp->sclust;			/* Follow from the origin */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d0:	e014      	b.n	80078fc <f_read+0xf0>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d007      	beq.n	80078ea <f_read+0xde>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	4619      	mov	r1, r3
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f7fe f97f 	bl	8005be4 <clmt_clust>
 80078e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80078e8:	e008      	b.n	80078fc <f_read+0xf0>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fd fdfd 	bl	80054f4 <get_fat>
 80078fa:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80078fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d804      	bhi.n	800790c <f_read+0x100>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2202      	movs	r2, #2
 8007906:	71da      	strb	r2, [r3, #7]
 8007908:	2302      	movs	r3, #2
 800790a:	e0f0      	b.n	8007aee <f_read+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007912:	d104      	bne.n	800791e <f_read+0x112>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	71da      	strb	r2, [r3, #7]
 800791a:	2301      	movs	r3, #1
 800791c:	e0e7      	b.n	8007aee <f_read+0x2e2>
				fp->clust = clst;				/* Update current cluster */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007922:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	4619      	mov	r1, r3
 800792e:	4610      	mov	r0, r2
 8007930:	f7fd fdb9 	bl	80054a6 <clust2sect>
 8007934:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d104      	bne.n	8007946 <f_read+0x13a>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2202      	movs	r2, #2
 8007940:	71da      	strb	r2, [r3, #7]
 8007942:	2302      	movs	r3, #2
 8007944:	e0d3      	b.n	8007aee <f_read+0x2e2>
			sect += csect;
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4413      	add	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007956:	330a      	adds	r3, #10
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	2b00      	cmp	r3, #0
 8007968:	d064      	beq.n	8007a34 <f_read+0x228>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800796a:	7dfa      	ldrb	r2, [r7, #23]
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	441a      	add	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007978:	3302      	adds	r3, #2
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d909      	bls.n	8007994 <f_read+0x188>
					cc = fp->fs->csize - csect;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007988:	3302      	adds	r3, #2
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	7dfb      	ldrb	r3, [r7, #23]
 8007990:	1ad3      	subs	r3, r2, r3
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799c:	3301      	adds	r3, #1
 800799e:	7818      	ldrb	r0, [r3, #0]
 80079a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	6a39      	ldr	r1, [r7, #32]
 80079a6:	f7fd f9a3 	bl	8004cf0 <disk_read>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d004      	beq.n	80079ba <f_read+0x1ae>
					ABORT(fp->fs, FR_DISK_ERR);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	71da      	strb	r2, [r3, #7]
 80079b6:	2301      	movs	r3, #1
 80079b8:	e099      	b.n	8007aee <f_read+0x2e2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c2:	3304      	adds	r3, #4
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d028      	beq.n	8007a1c <f_read+0x210>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80079d2:	330c      	adds	r3, #12
 80079d4:	681a      	ldr	r2, [r3, #0]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079dc:	429a      	cmp	r2, r3
 80079de:	d91d      	bls.n	8007a1c <f_read+0x210>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80079e8:	330c      	adds	r3, #12
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079f8:	330a      	adds	r3, #10
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	fb03 f302 	mul.w	r3, r3, r2
 8007a00:	6a3a      	ldr	r2, [r7, #32]
 8007a02:	18d0      	adds	r0, r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a12:	330a      	adds	r3, #10
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f7fd f9c8 	bl	8004dac <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a24:	330a      	adds	r3, #10
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	fb02 f303 	mul.w	r3, r2, r3
 8007a30:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8007a32:	e043      	b.n	8007abc <f_read+0x2b0>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a42:	330a      	adds	r3, #10
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a54:	330a      	adds	r3, #10
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a5c:	fb03 f301 	mul.w	r3, r3, r1
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	1ac3      	subs	r3, r0, r3
 8007a64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8007a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d901      	bls.n	8007a72 <f_read+0x266>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f7fd fc0f 	bl	80052a0 <move_window>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <f_read+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	71da      	strb	r2, [r3, #7]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e02d      	b.n	8007aee <f_read+0x2e2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6819      	ldr	r1, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa2:	330a      	adds	r3, #10
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	fbb2 f0f3 	udiv	r0, r2, r3
 8007aaa:	fb03 f300 	mul.w	r3, r3, r0
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	440b      	add	r3, r1
 8007ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6a38      	ldr	r0, [r7, #32]
 8007ab8:	f7fd f978 	bl	8004dac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	4413      	add	r3, r2
 8007ac2:	623b      	str	r3, [r7, #32]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	441a      	add	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	609a      	str	r2, [r3, #8]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	441a      	add	r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f47f aec3 	bne.w	8007872 <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3730      	adds	r7, #48	; 0x30
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b086      	sub	sp, #24
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7ff fc7a 	bl	80073f8 <validate>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d17a      	bne.n	8007c04 <f_sync+0x10e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	799b      	ldrb	r3, [r3, #6]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d074      	beq.n	8007c04 <f_sync+0x10e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f7fd fbbb 	bl	80052a0 <move_window>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d167      	bne.n	8007c04 <f_sync+0x10e>
				dir = fp->dir_ptr;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	330b      	adds	r3, #11
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	330b      	adds	r3, #11
 8007b44:	f042 0220 	orr.w	r2, r2, #32
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	331c      	adds	r3, #28
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	0a1b      	lsrs	r3, r3, #8
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	331d      	adds	r3, #29
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	0c1a      	lsrs	r2, r3, #16
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	331e      	adds	r3, #30
 8007b74:	b2d2      	uxtb	r2, r2
 8007b76:	701a      	strb	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	0e1a      	lsrs	r2, r3, #24
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	331f      	adds	r3, #31
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6938      	ldr	r0, [r7, #16]
 8007b8e:	f7fe faa1 	bl	80060d4 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007b92:	f7fc fb3d 	bl	8004210 <get_fattime>
 8007b96:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	3316      	adds	r3, #22
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	701a      	strb	r2, [r3, #0]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	0a1b      	lsrs	r3, r3, #8
 8007ba8:	b29a      	uxth	r2, r3
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3317      	adds	r3, #23
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	0c1a      	lsrs	r2, r3, #16
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3318      	adds	r3, #24
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	0e1a      	lsrs	r2, r3, #24
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3319      	adds	r3, #25
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3312      	adds	r3, #18
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	3313      	adds	r3, #19
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	799b      	ldrb	r3, [r3, #6]
 8007bde:	f023 0320 	bic.w	r3, r3, #32
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fd fb84 	bl	8005308 <sync_fs>
 8007c00:	4603      	mov	r3, r0
 8007c02:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff ff6d 	bl	8007af6 <f_sync>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d114      	bne.n	8007c50 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fbe6 	bl	80073f8 <validate>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10c      	bne.n	8007c50 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fd fa6a 	bl	8005114 <dec_lock>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007c72:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007c74:	7a5b      	ldrb	r3, [r3, #9]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d831      	bhi.n	8007ce0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007c7c:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007c7e:	7a5b      	ldrb	r3, [r3, #9]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	4b19      	ldr	r3, [pc, #100]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007c86:	2100      	movs	r1, #0
 8007c88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007c8a:	4b18      	ldr	r3, [pc, #96]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007c8c:	7a5b      	ldrb	r3, [r3, #9]
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	4a16      	ldr	r2, [pc, #88]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007c9a:	4b14      	ldr	r3, [pc, #80]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007c9c:	7a5b      	ldrb	r3, [r3, #9]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4b12      	ldr	r3, [pc, #72]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007ca4:	4413      	add	r3, r2
 8007ca6:	79fa      	ldrb	r2, [r7, #7]
 8007ca8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007caa:	4b10      	ldr	r3, [pc, #64]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007cac:	7a5b      	ldrb	r3, [r3, #9]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	b2d1      	uxtb	r1, r2
 8007cb4:	4a0d      	ldr	r2, [pc, #52]	; (8007cec <FATFS_LinkDriverEx+0x90>)
 8007cb6:	7251      	strb	r1, [r2, #9]
 8007cb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cba:	7dbb      	ldrb	r3, [r7, #22]
 8007cbc:	3330      	adds	r3, #48	; 0x30
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	223a      	movs	r2, #58	; 0x3a
 8007cca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3302      	adds	r3, #2
 8007cd0:	222f      	movs	r2, #47	; 0x2f
 8007cd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3303      	adds	r3, #3
 8007cd8:	2200      	movs	r2, #0
 8007cda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bc80      	pop	{r7}
 8007cea:	4770      	bx	lr
 8007cec:	20000264 	.word	0x20000264

08007cf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff ffac 	bl	8007c5c <FATFS_LinkDriverEx>
 8007d04:	4603      	mov	r3, r0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	6039      	str	r1, [r7, #0]
 8007d1a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d20:	d802      	bhi.n	8007d28 <ff_convert+0x18>
		c = chr;
 8007d22:	88fb      	ldrh	r3, [r7, #6]
 8007d24:	81fb      	strh	r3, [r7, #14]
 8007d26:	e025      	b.n	8007d74 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d2e:	88fb      	ldrh	r3, [r7, #6]
 8007d30:	2bff      	cmp	r3, #255	; 0xff
 8007d32:	d805      	bhi.n	8007d40 <ff_convert+0x30>
 8007d34:	88fb      	ldrh	r3, [r7, #6]
 8007d36:	3b80      	subs	r3, #128	; 0x80
 8007d38:	4a11      	ldr	r2, [pc, #68]	; (8007d80 <ff_convert+0x70>)
 8007d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d3e:	e000      	b.n	8007d42 <ff_convert+0x32>
 8007d40:	2300      	movs	r3, #0
 8007d42:	81fb      	strh	r3, [r7, #14]
 8007d44:	e016      	b.n	8007d74 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8007d46:	2300      	movs	r3, #0
 8007d48:	81fb      	strh	r3, [r7, #14]
 8007d4a:	e009      	b.n	8007d60 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007d4c:	89fb      	ldrh	r3, [r7, #14]
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <ff_convert+0x70>)
 8007d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d006      	beq.n	8007d68 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007d5a:	89fb      	ldrh	r3, [r7, #14]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	81fb      	strh	r3, [r7, #14]
 8007d60:	89fb      	ldrh	r3, [r7, #14]
 8007d62:	2b7f      	cmp	r3, #127	; 0x7f
 8007d64:	d9f2      	bls.n	8007d4c <ff_convert+0x3c>
 8007d66:	e000      	b.n	8007d6a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007d68:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007d6a:	89fb      	ldrh	r3, [r7, #14]
 8007d6c:	3380      	adds	r3, #128	; 0x80
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007d74:	89fb      	ldrh	r3, [r7, #14]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr
 8007d80:	08007f68 	.word	0x08007f68

08007d84 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	e002      	b.n	8007d9a <ff_wtoupper+0x16>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3301      	adds	r3, #1
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	4a0f      	ldr	r2, [pc, #60]	; (8007dd8 <ff_wtoupper+0x54>)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d006      	beq.n	8007db4 <ff_wtoupper+0x30>
 8007da6:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <ff_wtoupper+0x54>)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dae:	88fa      	ldrh	r2, [r7, #6]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d1ef      	bne.n	8007d94 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8007db4:	4a08      	ldr	r2, [pc, #32]	; (8007dd8 <ff_wtoupper+0x54>)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d004      	beq.n	8007dca <ff_wtoupper+0x46>
 8007dc0:	4a06      	ldr	r2, [pc, #24]	; (8007ddc <ff_wtoupper+0x58>)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc8:	e000      	b.n	8007dcc <ff_wtoupper+0x48>
 8007dca:	88fb      	ldrh	r3, [r7, #6]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3714      	adds	r7, #20
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr
 8007dd6:	bf00      	nop
 8007dd8:	08008068 	.word	0x08008068
 8007ddc:	08008248 	.word	0x08008248

08007de0 <__libc_init_array>:
 8007de0:	b570      	push	{r4, r5, r6, lr}
 8007de2:	2500      	movs	r5, #0
 8007de4:	4e0c      	ldr	r6, [pc, #48]	; (8007e18 <__libc_init_array+0x38>)
 8007de6:	4c0d      	ldr	r4, [pc, #52]	; (8007e1c <__libc_init_array+0x3c>)
 8007de8:	1ba4      	subs	r4, r4, r6
 8007dea:	10a4      	asrs	r4, r4, #2
 8007dec:	42a5      	cmp	r5, r4
 8007dee:	d109      	bne.n	8007e04 <__libc_init_array+0x24>
 8007df0:	f000 f822 	bl	8007e38 <_init>
 8007df4:	2500      	movs	r5, #0
 8007df6:	4e0a      	ldr	r6, [pc, #40]	; (8007e20 <__libc_init_array+0x40>)
 8007df8:	4c0a      	ldr	r4, [pc, #40]	; (8007e24 <__libc_init_array+0x44>)
 8007dfa:	1ba4      	subs	r4, r4, r6
 8007dfc:	10a4      	asrs	r4, r4, #2
 8007dfe:	42a5      	cmp	r5, r4
 8007e00:	d105      	bne.n	8007e0e <__libc_init_array+0x2e>
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e08:	4798      	blx	r3
 8007e0a:	3501      	adds	r5, #1
 8007e0c:	e7ee      	b.n	8007dec <__libc_init_array+0xc>
 8007e0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e12:	4798      	blx	r3
 8007e14:	3501      	adds	r5, #1
 8007e16:	e7f2      	b.n	8007dfe <__libc_init_array+0x1e>
 8007e18:	08008428 	.word	0x08008428
 8007e1c:	08008428 	.word	0x08008428
 8007e20:	08008428 	.word	0x08008428
 8007e24:	0800842c 	.word	0x0800842c

08007e28 <memset>:
 8007e28:	4603      	mov	r3, r0
 8007e2a:	4402      	add	r2, r0
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d100      	bne.n	8007e32 <memset+0xa>
 8007e30:	4770      	bx	lr
 8007e32:	f803 1b01 	strb.w	r1, [r3], #1
 8007e36:	e7f9      	b.n	8007e2c <memset+0x4>

08007e38 <_init>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr

08007e44 <_fini>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr
