
C21_Music_Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004808  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000614  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f28  08004f28  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004f28  08004f28  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f28  08004f28  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002838  20000024  08004f54  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000285c  08004f54  0002285c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c24f  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d60  00000000  00000000  0003c29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001566d  00000000  00000000  0003fffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001010  00000000  00000000  00055670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002888  00000000  00000000  00056680  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015195  00000000  00000000  00058f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001109c  00000000  00000000  0006e09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00077b0b  00000000  00000000  0007f139  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000f6c44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003788  00000000  00000000  000f6cc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	080048fc 	.word	0x080048fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	080048fc 	.word	0x080048fc

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b530      	push	{r4, r5, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800014e:	2201      	movs	r2, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000150:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000156:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000158:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
{
 800015c:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800015e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000160:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000162:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000164:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000166:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000168:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800016c:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800016e:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000170:	940d      	str	r4, [sp, #52]	; 0x34
 8000172:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000176:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800017a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800017e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8000182:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000184:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000186:	f001 f847 	bl	8001218 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800018a:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000190:	4629      	mov	r1, r5
 8000192:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000194:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000196:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000198:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800019a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800019c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800019e:	f001 fa69 	bl	8001674 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001a2:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001a4:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001a6:	9404      	str	r4, [sp, #16]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001a8:	9301      	str	r3, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001aa:	f001 fb23 	bl	80017f4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80001ae:	b015      	add	sp, #84	; 0x54
 80001b0:	bd30      	pop	{r4, r5, pc}
 80001b2:	bf00      	nop

080001b4 <main>:
{
 80001b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b8:	2400      	movs	r4, #0
{
 80001ba:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 80001bc:	f000 fd30 	bl	8000c20 <HAL_Init>
  SystemClock_Config();
 80001c0:	f7ff ffc4 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80001c8:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001cc:	4ebe      	ldr	r6, [pc, #760]	; (80004c8 <main+0x314>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80001ce:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d2:	69b1      	ldr	r1, [r6, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80001d4:	4622      	mov	r2, r4
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d6:	f041 0110 	orr.w	r1, r1, #16
 80001da:	61b1      	str	r1, [r6, #24]
 80001dc:	69b0      	ldr	r0, [r6, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80001de:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e2:	f000 0010 	and.w	r0, r0, #16
 80001e6:	9004      	str	r0, [sp, #16]
 80001e8:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ea:	69b5      	ldr	r5, [r6, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80001ec:	48b7      	ldr	r0, [pc, #732]	; (80004cc <main+0x318>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001ee:	f045 0520 	orr.w	r5, r5, #32
 80001f2:	61b5      	str	r5, [r6, #24]
 80001f4:	69b7      	ldr	r7, [r6, #24]

  /*Configure GPIO pins : PA6 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f6:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f8:	f007 0720 	and.w	r7, r7, #32
 80001fc:	9705      	str	r7, [sp, #20]
 80001fe:	9f05      	ldr	r7, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	f8d6 c018 	ldr.w	ip, [r6, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000204:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000206:	f04c 0c04 	orr.w	ip, ip, #4
 800020a:	f8c6 c018 	str.w	ip, [r6, #24]
 800020e:	f8d6 c018 	ldr.w	ip, [r6, #24]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000212:	f44f 7a00 	mov.w	sl, #512	; 0x200
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000216:	f00c 0c04 	and.w	ip, ip, #4
 800021a:	f8cd c018 	str.w	ip, [sp, #24]
 800021e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000220:	f8d6 c018 	ldr.w	ip, [r6, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000224:	f04f 090a 	mov.w	r9, #10
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000228:	f04c 0c08 	orr.w	ip, ip, #8
 800022c:	f8c6 c018 	str.w	ip, [r6, #24]
 8000230:	f8d6 c018 	ldr.w	ip, [r6, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000234:	f44f 7b82 	mov.w	fp, #260	; 0x104
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000238:	ea0c 0c08 	and.w	ip, ip, r8
 800023c:	f8cd c01c 	str.w	ip, [sp, #28]
 8000240:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000242:	f000 ff55 	bl	80010f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 8000246:	4622      	mov	r2, r4
 8000248:	f240 4186 	movw	r1, #1158	; 0x486
 800024c:	48a0      	ldr	r0, [pc, #640]	; (80004d0 <main+0x31c>)
 800024e:	f000 ff4f 	bl	80010f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000252:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000256:	4a9f      	ldr	r2, [pc, #636]	; (80004d4 <main+0x320>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000258:	a915      	add	r1, sp, #84	; 0x54
 800025a:	489f      	ldr	r0, [pc, #636]	; (80004d8 <main+0x324>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800025c:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000260:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000262:	f000 fe4b 	bl	8000efc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000266:	f44f 62f8 	mov.w	r2, #1984	; 0x7c0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026a:	a915      	add	r1, sp, #84	; 0x54
 800026c:	4897      	ldr	r0, [pc, #604]	; (80004cc <main+0x318>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026e:	e9cd 2515 	strd	r2, r5, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000272:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000274:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000276:	f000 fe41 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|SD_CS_Pin;
 800027a:	f240 4286 	movw	r2, #1158	; 0x486
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800027e:	a915      	add	r1, sp, #84	; 0x54
 8000280:	4893      	ldr	r0, [pc, #588]	; (80004d0 <main+0x31c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000282:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	9718      	str	r7, [sp, #96]	; 0x60
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|SD_CS_Pin;
 8000288:	9215      	str	r2, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028a:	f000 fe37 	bl	8000efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800028e:	4622      	mov	r2, r4
 8000290:	4621      	mov	r1, r4
 8000292:	2028      	movs	r0, #40	; 0x28
 8000294:	f000 fd0c 	bl	8000cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000298:	2028      	movs	r0, #40	; 0x28
 800029a:	f000 fd3f 	bl	8000d1c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800029e:	6971      	ldr	r1, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002a0:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a2:	4329      	orrs	r1, r5
 80002a4:	6171      	str	r1, [r6, #20]
 80002a6:	6970      	ldr	r0, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002a8:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	4028      	ands	r0, r5
 80002ac:	9003      	str	r0, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002ae:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002b0:	9e03      	ldr	r6, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002b2:	f000 fcfd 	bl	8000cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002b6:	200c      	movs	r0, #12
 80002b8:	f000 fd30 	bl	8000d1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002bc:	4622      	mov	r2, r4
 80002be:	4621      	mov	r1, r4
 80002c0:	200d      	movs	r0, #13
 80002c2:	f000 fcf5 	bl	8000cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002c6:	200d      	movs	r0, #13
 80002c8:	f000 fd28 	bl	8000d1c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002cc:	4622      	mov	r2, r4
 80002ce:	4621      	mov	r1, r4
 80002d0:	200f      	movs	r0, #15
 80002d2:	f000 fced 	bl	8000cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002d6:	200f      	movs	r0, #15
 80002d8:	f000 fd20 	bl	8000d1c <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80002dc:	4a7f      	ldr	r2, [pc, #508]	; (80004dc <main+0x328>)
 80002de:	4980      	ldr	r1, [pc, #512]	; (80004e0 <main+0x32c>)
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002e0:	4610      	mov	r0, r2
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002e2:	e9c2 a806 	strd	sl, r8, [r2, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002e6:	e9c2 1b00 	strd	r1, fp, [r2]
  hspi1.Init.CRCPolynomial = 10;
 80002ea:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002ee:	e9c2 4402 	strd	r4, r4, [r2, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002f2:	e9c2 4404 	strd	r4, r4, [r2, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002f6:	e9c2 4408 	strd	r4, r4, [r2, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002fa:	6294      	str	r4, [r2, #40]	; 0x28
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fc:	260c      	movs	r6, #12
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002fe:	f001 fc31 	bl	8001b64 <HAL_SPI_Init>
  MX_FATFS_Init();
 8000302:	f002 f931 	bl	8002568 <MX_FATFS_Init>
  huart2.Init.BaudRate = 115200;
 8000306:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Instance = USART2;
 800030a:	4a76      	ldr	r2, [pc, #472]	; (80004e4 <main+0x330>)
 800030c:	4b76      	ldr	r3, [pc, #472]	; (80004e8 <main+0x334>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800030e:	4610      	mov	r0, r2
  huart2.Init.BaudRate = 115200;
 8000310:	e9c2 3100 	strd	r3, r1, [r2]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000314:	e9c2 4402 	strd	r4, r4, [r2, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000318:	6114      	str	r4, [r2, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031a:	e9c2 4406 	strd	r4, r4, [r2, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800031e:	6156      	str	r6, [r2, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000320:	f002 f8c2 	bl	80024a8 <HAL_UART_Init>
  hspi2.Instance = SPI2;
 8000324:	4a71      	ldr	r2, [pc, #452]	; (80004ec <main+0x338>)
 8000326:	4972      	ldr	r1, [pc, #456]	; (80004f0 <main+0x33c>)
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000328:	4610      	mov	r0, r2
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800032a:	e9c2 4a05 	strd	r4, sl, [r2, #20]
  hspi2.Init.CRCPolynomial = 10;
 800032e:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  hspi2.Instance = SPI2;
 8000332:	6011      	str	r1, [r2, #0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000334:	e9c2 b401 	strd	fp, r4, [r2, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000338:	e9c2 4403 	strd	r4, r4, [r2, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800033c:	e9c2 4407 	strd	r4, r4, [r2, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000340:	e9c2 4409 	strd	r4, r4, [r2, #36]	; 0x24
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000344:	f001 fc0e 	bl	8001b64 <HAL_SPI_Init>
  hpcd_USB_FS.Instance = USB;
 8000348:	4a6a      	ldr	r2, [pc, #424]	; (80004f4 <main+0x340>)
 800034a:	496b      	ldr	r1, [pc, #428]	; (80004f8 <main+0x344>)
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800034c:	4610      	mov	r0, r2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800034e:	e9c2 8701 	strd	r8, r7, [r2, #4]
  hpcd_USB_FS.Instance = USB;
 8000352:	6011      	str	r1, [r2, #0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000354:	e9c2 4406 	strd	r4, r4, [r2, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000358:	6214      	str	r4, [r2, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800035a:	f000 fedf 	bl	800111c <HAL_PCD_Init>
  htim2.Init.Period = 255;
 800035e:	22ff      	movs	r2, #255	; 0xff
  htim2.Instance = TIM2;
 8000360:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  htim2.Instance = TIM2;
 8000368:	4f64      	ldr	r7, [pc, #400]	; (80004fc <main+0x348>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800036c:	4638      	mov	r0, r7
  htim2.Init.Period = 255;
 800036e:	60fa      	str	r2, [r7, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000370:	e9c7 5401 	strd	r5, r4, [r7, #4]
  htim2.Instance = TIM2;
 8000374:	6039      	str	r1, [r7, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000376:	9408      	str	r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000378:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 800037c:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 8000380:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 8000384:	941b      	str	r4, [sp, #108]	; 0x6c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800038a:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	9409      	str	r4, [sp, #36]	; 0x24
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800038e:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000390:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000392:	f001 ff41 	bl	8002218 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000396:	a90a      	add	r1, sp, #40	; 0x28
 8000398:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800039a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039e:	f001 fda5 	bl	8001eec <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003a2:	4638      	mov	r0, r7
 80003a4:	f001 ff54 	bl	8002250 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a8:	a908      	add	r1, sp, #32
 80003aa:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ac:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b0:	f002 f814 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b4:	2360      	movs	r3, #96	; 0x60
  htim1.Init.Prescaler = 10000;
 80003b6:	f242 7910 	movw	r9, #10000	; 0x2710
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003ba:	4622      	mov	r2, r4
 80003bc:	a915      	add	r1, sp, #84	; 0x54
 80003be:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c0:	9315      	str	r3, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003c2:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c6:	9419      	str	r4, [sp, #100]	; 0x64
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003c8:	f001 ff8c 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003cc:	a915      	add	r1, sp, #84	; 0x54
 80003ce:	4632      	mov	r2, r6
 80003d0:	4638      	mov	r0, r7
  htim1.Instance = TIM1;
 80003d2:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000518 <main+0x364>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003d6:	f001 ff85 	bl	80022e4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80003da:	4638      	mov	r0, r7
 80003dc:	f000 faa6 	bl	800092c <HAL_TIM_MspPostInit>
  htim1.Instance = TIM1;
 80003e0:	4a47      	ldr	r2, [pc, #284]	; (8000500 <main+0x34c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e2:	4640      	mov	r0, r8
  htim1.Init.Prescaler = 10000;
 80003e4:	e9c8 2900 	strd	r2, r9, [r8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e8:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 80003ec:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f4:	f8c8 4008 	str.w	r4, [r8, #8]
  htim1.Init.RepetitionCounter = 0;
 80003f8:	e9c8 4404 	strd	r4, r4, [r8, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fc:	f8c8 4018 	str.w	r4, [r8, #24]
  htim1.Init.Period = 10000;
 8000400:	f8c8 900c 	str.w	r9, [r8, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000404:	f001 ff08 	bl	8002218 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000408:	a915      	add	r1, sp, #84	; 0x54
 800040a:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800040c:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000410:	f001 fd6c 	bl	8001eec <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000414:	a90a      	add	r1, sp, #40	; 0x28
 8000416:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041c:	f001 ffde 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim1);
 8000420:	4640      	mov	r0, r8
 8000422:	f001 fd2d 	bl	8001e80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000426:	4621      	mov	r1, r4
 8000428:	4638      	mov	r0, r7
 800042a:	f001 fd5d 	bl	8001ee8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10000);
 800042e:	683b      	ldr	r3, [r7, #0]
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000430:	4631      	mov	r1, r6
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 10000);
 8000432:	f8c3 9034 	str.w	r9, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000436:	4638      	mov	r0, r7
 8000438:	f001 fd56 	bl	8001ee8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 10000);
 800043c:	683b      	ldr	r3, [r7, #0]
  fres = f_mount ( &fs ,  "" ,   1);
 800043e:	462a      	mov	r2, r5
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 10000);
 8000440:	f8c3 9040 	str.w	r9, [r3, #64]	; 0x40
  fres = f_mount ( &fs ,  "" ,   1);
 8000444:	492f      	ldr	r1, [pc, #188]	; (8000504 <main+0x350>)
 8000446:	4830      	ldr	r0, [pc, #192]	; (8000508 <main+0x354>)
 8000448:	f003 ff28 	bl	800429c <f_mount>
 800044c:	4d2f      	ldr	r5, [pc, #188]	; (800050c <main+0x358>)
 800044e:	7028      	strb	r0, [r5, #0]
   while ( fres !=  FR_OK ){
 8000450:	b170      	cbz	r0, 8000470 <main+0x2bc>
 	  fres = f_mount ( &fs ,  "" ,   1);
 8000452:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8000504 <main+0x350>
 8000456:	4e2c      	ldr	r6, [pc, #176]	; (8000508 <main+0x354>)
 8000458:	2201      	movs	r2, #1
 800045a:	4641      	mov	r1, r8
 800045c:	4630      	mov	r0, r6
 800045e:	f003 ff1d 	bl	800429c <f_mount>
 8000462:	7028      	strb	r0, [r5, #0]
 	  HAL_Delay(100);
 8000464:	2064      	movs	r0, #100	; 0x64
 8000466:	f000 fbff 	bl	8000c68 <HAL_Delay>
   while ( fres !=  FR_OK ){
 800046a:	782b      	ldrb	r3, [r5, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d1f3      	bne.n	8000458 <main+0x2a4>
   ST7735_Init();
 8000470:	f000 f910 	bl	8000694 <ST7735_Init>
 8000474:	4e26      	ldr	r6, [pc, #152]	; (8000510 <main+0x35c>)
	     res = f_open(&file, "e1.wav", FA_READ);
 8000476:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800051c <main+0x368>
	     playing_notes = 1;
 800047a:	4d26      	ldr	r5, [pc, #152]	; (8000514 <main+0x360>)
	  			  res = f_open(&file, "f1.wav", FA_READ);
 800047c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8000520 <main+0x36c>
	   if(notes == 1){
 8000480:	f896 a000 	ldrb.w	sl, [r6]
 8000484:	fa5f fa8a 	uxtb.w	sl, sl
 8000488:	f1ba 0f01 	cmp.w	sl, #1
 800048c:	d070      	beq.n	8000570 <main+0x3bc>
	   if(notes == 2){
 800048e:	f896 a000 	ldrb.w	sl, [r6]
 8000492:	fa5f fa8a 	uxtb.w	sl, sl
 8000496:	f1ba 0f02 	cmp.w	sl, #2
 800049a:	d078      	beq.n	800058e <main+0x3da>
	   if(notes != 0){
 800049c:	7833      	ldrb	r3, [r6, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0ee      	beq.n	8000480 <main+0x2cc>
	   if(res != FR_OK) {
 80004a2:	9b01      	ldr	r3, [sp, #4]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	f040 8082 	bne.w	80005ae <main+0x3fa>
	   res = f_read(&file, header, sizeof(header), &bytesRead);
 80004aa:	ab08      	add	r3, sp, #32
 80004ac:	222c      	movs	r2, #44	; 0x2c
 80004ae:	a915      	add	r1, sp, #84	; 0x54
 80004b0:	a80a      	add	r0, sp, #40	; 0x28
 80004b2:	f004 f833 	bl	800451c <f_read>
	      if(res != FR_OK) {
 80004b6:	9001      	str	r0, [sp, #4]
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d171      	bne.n	80005a0 <main+0x3ec>
	      while(f_eof (&file) == 0){
 80004bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d048      	beq.n	8000556 <main+0x3a2>
 80004c4:	e02e      	b.n	8000524 <main+0x370>
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	10110000 	.word	0x10110000
 80004d8:	40011000 	.word	0x40011000
 80004dc:	200013a8 	.word	0x200013a8
 80004e0:	40013000 	.word	0x40013000
 80004e4:	20001440 	.word	0x20001440
 80004e8:	40004400 	.word	0x40004400
 80004ec:	20000278 	.word	0x20000278
 80004f0:	40003800 	.word	0x40003800
 80004f4:	20001510 	.word	0x20001510
 80004f8:	40005c00 	.word	0x40005c00
 80004fc:	20001400 	.word	0x20001400
 8000500:	40012c00 	.word	0x40012c00
 8000504:	08004a5c 	.word	0x08004a5c
 8000508:	200002d0 	.word	0x200002d0
 800050c:	2000150c 	.word	0x2000150c
 8000510:	20000040 	.word	0x20000040
 8000514:	20000041 	.word	0x20000041
 8000518:	20001364 	.word	0x20001364
 800051c:	0800492c 	.word	0x0800492c
 8000520:	08004924 	.word	0x08004924
	    	  if(playing_notes == 0){
 8000524:	782b      	ldrb	r3, [r5, #0]
 8000526:	b1b3      	cbz	r3, 8000556 <main+0x3a2>
	      res = f_read(&file, data, sizeof(data), &bytesRead);
 8000528:	ab08      	add	r3, sp, #32
 800052a:	2201      	movs	r2, #1
 800052c:	a902      	add	r1, sp, #8
 800052e:	a80a      	add	r0, sp, #40	; 0x28
 8000530:	f003 fff4 	bl	800451c <f_read>
	            if(res != FR_OK) {
 8000534:	bba0      	cbnz	r0, 80005a0 <main+0x3ec>
	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 255 - data[0]);
 8000536:	f44f 73c8 	mov.w	r3, #400	; 0x190
	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 255 - data[0]);
 800053a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800053e:	6839      	ldr	r1, [r7, #0]
 8000540:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8000544:	640a      	str	r2, [r1, #64]	; 0x40
	            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 255 - data[0]);
 8000546:	634a      	str	r2, [r1, #52]	; 0x34
	                asm("NOP");
 8000548:	bf00      	nop
	            for(int a = 0; a <400; a++){
 800054a:	3b01      	subs	r3, #1
 800054c:	d1fc      	bne.n	8000548 <main+0x394>
	      while(f_eof (&file) == 0){
 800054e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8000552:	429a      	cmp	r2, r3
 8000554:	d1e6      	bne.n	8000524 <main+0x370>
	      notes = 0;
 8000556:	2300      	movs	r3, #0
	      f_close(&file);
 8000558:	a80a      	add	r0, sp, #40	; 0x28
	      notes = 0;
 800055a:	7033      	strb	r3, [r6, #0]
	      playing_notes = 0;
 800055c:	702b      	strb	r3, [r5, #0]
	      f_close(&file);
 800055e:	f004 f91b 	bl	8004798 <f_close>
	   if(notes == 1){
 8000562:	f896 a000 	ldrb.w	sl, [r6]
 8000566:	fa5f fa8a 	uxtb.w	sl, sl
 800056a:	f1ba 0f01 	cmp.w	sl, #1
 800056e:	d18e      	bne.n	800048e <main+0x2da>
	     res = f_open(&file, "e1.wav", FA_READ);
 8000570:	4652      	mov	r2, sl
 8000572:	4649      	mov	r1, r9
 8000574:	a80a      	add	r0, sp, #40	; 0x28
 8000576:	f003 fed1 	bl	800431c <f_open>
	     playing_notes = 1;
 800057a:	f885 a000 	strb.w	sl, [r5]
	   if(notes == 2){
 800057e:	f896 a000 	ldrb.w	sl, [r6]
	     res = f_open(&file, "e1.wav", FA_READ);
 8000582:	9001      	str	r0, [sp, #4]
	   if(notes == 2){
 8000584:	fa5f fa8a 	uxtb.w	sl, sl
 8000588:	f1ba 0f02 	cmp.w	sl, #2
 800058c:	d186      	bne.n	800049c <main+0x2e8>
	  			  res = f_open(&file, "f1.wav", FA_READ);
 800058e:	2201      	movs	r2, #1
 8000590:	4641      	mov	r1, r8
 8000592:	a80a      	add	r0, sp, #40	; 0x28
 8000594:	f003 fec2 	bl	800431c <f_open>
	  			  playing_notes = 2;
 8000598:	f885 a000 	strb.w	sl, [r5]
	  			  res = f_open(&file, "f1.wav", FA_READ);
 800059c:	9001      	str	r0, [sp, #4]
 800059e:	e77d      	b.n	800049c <main+0x2e8>
	                f_close(&file);
 80005a0:	a80a      	add	r0, sp, #40	; 0x28
 80005a2:	f004 f8f9 	bl	8004798 <f_close>
	                return 2;
 80005a6:	2002      	movs	r0, #2
  }
 80005a8:	b021      	add	sp, #132	; 0x84
 80005aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	       return 1;
 80005ae:	2001      	movs	r0, #1
 80005b0:	e7fa      	b.n	80005a8 <main+0x3f4>
 80005b2:	bf00      	nop

080005b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	  if ( GPIO_Pin == GPIO_PIN_13)
 80005b4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80005b8:	d002      	beq.n	80005c0 <HAL_GPIO_EXTI_Callback+0xc>
                if(playing_notes != 0){
                	playing_notes = 0;
                }

	      }
	      if ( GPIO_Pin == GPIO_PIN_14)
 80005ba:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80005be:	d108      	bne.n	80005d2 <HAL_GPIO_EXTI_Callback+0x1e>
	          {
	              // Write your code here

//	      	HAL_TIM_Base_Start_IT(&htim4);

	    	  notes = 1;
 80005c0:	2101      	movs	r1, #1
	           {
	               // Write your code here

//	       	HAL_TIM_Base_Start_IT(&htim4);

	    	  notes = 2;
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <HAL_GPIO_EXTI_Callback+0x28>)
	    	    if(playing_notes != 0){
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x2c>)
	    	  notes = 2;
 80005c6:	7011      	strb	r1, [r2, #0]
	    	    if(playing_notes != 0){
 80005c8:	781a      	ldrb	r2, [r3, #0]
 80005ca:	b10a      	cbz	r2, 80005d0 <HAL_GPIO_EXTI_Callback+0x1c>
	    	                	playing_notes = 0;
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
	    	                }
	   //   	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	           }

}
 80005d0:	4770      	bx	lr
	      if ( GPIO_Pin == GPIO_PIN_15)
 80005d2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80005d6:	d1fb      	bne.n	80005d0 <HAL_GPIO_EXTI_Callback+0x1c>
	    	  notes = 2;
 80005d8:	2102      	movs	r1, #2
 80005da:	e7f2      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0xe>
 80005dc:	20000040 	.word	0x20000040
 80005e0:	20000041 	.word	0x20000041

080005e4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 80005e8:	b510      	push	{r4, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	ac02      	add	r4, sp, #8
 80005ee:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <ST7735_WriteCommand+0x28>)
 80005fa:	f000 fd79 	bl	80010f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80005fe:	4621      	mov	r1, r4
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2201      	movs	r2, #1
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <ST7735_WriteCommand+0x2c>)
 8000608:	f001 faec 	bl	8001be4 <HAL_SPI_Transmit>
}
 800060c:	b002      	add	sp, #8
 800060e:	bd10      	pop	{r4, pc}
 8000610:	40010800 	.word	0x40010800
 8000614:	20000278 	.word	0x20000278

08000618 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	4604      	mov	r4, r0
 800061c:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <ST7735_WriteData+0x24>)
 8000626:	f000 fd63 	bl	80010f0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,1000);
 800062a:	b2aa      	uxth	r2, r5
 800062c:	4621      	mov	r1, r4
}
 800062e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size,1000);
 8000632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <ST7735_WriteData+0x28>)
 8000638:	f001 bad4 	b.w	8001be4 <HAL_SPI_Transmit>
 800063c:	40010800 	.word	0x40010800
 8000640:	20000278 	.word	0x20000278

08000644 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000646:	7805      	ldrb	r5, [r0, #0]
 8000648:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 800064a:	3d01      	subs	r5, #1
 800064c:	b2ed      	uxtb	r5, r5
 800064e:	2dff      	cmp	r5, #255	; 0xff
 8000650:	d00f      	beq.n	8000672 <ST7735_ExecuteCommandList+0x2e>
        uint8_t cmd = *addr++;
        ST7735_WriteCommand(cmd);
 8000652:	4634      	mov	r4, r6
 8000654:	f814 0b02 	ldrb.w	r0, [r4], #2
 8000658:	f7ff ffc6 	bl	80005e8 <ST7735_WriteCommand>

        numArgs = *addr++;
 800065c:	7876      	ldrb	r6, [r6, #1]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
        numArgs &= ~DELAY;
        if(numArgs) {
 800065e:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 8000662:	d111      	bne.n	8000688 <ST7735_ExecuteCommandList+0x44>
            ST7735_WriteData((uint8_t*)addr, numArgs);
            addr += numArgs;
        }

        if(ms) {
 8000664:	0633      	lsls	r3, r6, #24
 8000666:	d405      	bmi.n	8000674 <ST7735_ExecuteCommandList+0x30>
            ms = *addr++;
 8000668:	4626      	mov	r6, r4
    while(numCommands--) {
 800066a:	3d01      	subs	r5, #1
 800066c:	b2ed      	uxtb	r5, r5
 800066e:	2dff      	cmp	r5, #255	; 0xff
 8000670:	d1ef      	bne.n	8000652 <ST7735_ExecuteCommandList+0xe>
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 8000672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ms = *addr++;
 8000674:	7820      	ldrb	r0, [r4, #0]
 8000676:	3401      	adds	r4, #1
 8000678:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 800067a:	bf08      	it	eq
 800067c:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 8000680:	f000 faf2 	bl	8000c68 <HAL_Delay>
            ms = *addr++;
 8000684:	4626      	mov	r6, r4
 8000686:	e7f0      	b.n	800066a <ST7735_ExecuteCommandList+0x26>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000688:	4620      	mov	r0, r4
 800068a:	4639      	mov	r1, r7
 800068c:	f7ff ffc4 	bl	8000618 <ST7735_WriteData>
            addr += numArgs;
 8000690:	443c      	add	r4, r7
 8000692:	e7e7      	b.n	8000664 <ST7735_ExecuteCommandList+0x20>

08000694 <ST7735_Init>:

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
}

void ST7735_Init() {
 8000694:	b538      	push	{r3, r4, r5, lr}
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000696:	4c14      	ldr	r4, [pc, #80]	; (80006e8 <ST7735_Init+0x54>)
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000698:	4d14      	ldr	r5, [pc, #80]	; (80006ec <ST7735_Init+0x58>)
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800069a:	4620      	mov	r0, r4
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	f000 fd25 	bl	80010f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80006a6:	4628      	mov	r0, r5
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ae:	f000 fd1f 	bl	80010f0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80006b2:	2005      	movs	r0, #5
 80006b4:	f000 fad8 	bl	8000c68 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006be:	4628      	mov	r0, r5
 80006c0:	f000 fd16 	bl	80010f0 <HAL_GPIO_WritePin>
    ST7735_Select();
    ST7735_Reset();
    ST7735_ExecuteCommandList(init_cmds1);
 80006c4:	480a      	ldr	r0, [pc, #40]	; (80006f0 <ST7735_Init+0x5c>)
 80006c6:	f7ff ffbd 	bl	8000644 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <ST7735_Init+0x60>)
 80006cc:	f7ff ffba 	bl	8000644 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <ST7735_Init+0x64>)
 80006d2:	f7ff ffb7 	bl	8000644 <ST7735_ExecuteCommandList>
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80006d6:	4620      	mov	r0, r4
    ST7735_Unselect();
}
 80006d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e2:	f000 bd05 	b.w	80010f0 <HAL_GPIO_WritePin>
 80006e6:	bf00      	nop
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	40010800 	.word	0x40010800
 80006f0:	08004934 	.word	0x08004934
 80006f4:	08004970 	.word	0x08004970
 80006f8:	08004980 	.word	0x08004980

080006fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_MspInit+0x3c>)
{
 80006fe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000700:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000702:	490e      	ldr	r1, [pc, #56]	; (800073c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000704:	f042 0201 	orr.w	r2, r2, #1
 8000708:	619a      	str	r2, [r3, #24]
 800070a:	699a      	ldr	r2, [r3, #24]
 800070c:	f002 0201 	and.w	r2, r2, #1
 8000710:	9200      	str	r2, [sp, #0]
 8000712:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800071a:	61da      	str	r2, [r3, #28]
 800071c:	69db      	ldr	r3, [r3, #28]
 800071e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000726:	684b      	ldr	r3, [r1, #4]
 8000728:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800072c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000730:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	b002      	add	sp, #8
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	40010000 	.word	0x40010000

08000740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8000744:	6803      	ldr	r3, [r0, #0]
 8000746:	4a56      	ldr	r2, [pc, #344]	; (80008a0 <HAL_SPI_MspInit+0x160>)
{
 8000748:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 800074a:	4293      	cmp	r3, r2
{
 800074c:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8000752:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 8000756:	d004      	beq.n	8000762 <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8000758:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <HAL_SPI_MspInit+0x164>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d05c      	beq.n	8000818 <HAL_SPI_MspInit+0xd8>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800075e:	b009      	add	sp, #36	; 0x24
 8000760:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000762:	2128      	movs	r1, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000766:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000768:	4b4f      	ldr	r3, [pc, #316]	; (80008a8 <HAL_SPI_MspInit+0x168>)
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000770:	619a      	str	r2, [r3, #24]
 8000772:	699a      	ldr	r2, [r3, #24]
 8000774:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800077c:	699a      	ldr	r2, [r3, #24]
 800077e:	f042 0208 	orr.w	r2, r2, #8
 8000782:	619a      	str	r2, [r3, #24]
 8000784:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000786:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	4846      	ldr	r0, [pc, #280]	; (80008ac <HAL_SPI_MspInit+0x16c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f000 fbb0 	bl	8000efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800079c:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	4843      	ldr	r0, [pc, #268]	; (80008ac <HAL_SPI_MspInit+0x16c>)
 80007a0:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	f000 fba7 	bl	8000efc <HAL_GPIO_Init>
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007ae:	2080      	movs	r0, #128	; 0x80
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80007b4:	4a3e      	ldr	r2, [pc, #248]	; (80008b0 <HAL_SPI_MspInit+0x170>)
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80007b6:	4e3f      	ldr	r6, [pc, #252]	; (80008b4 <HAL_SPI_MspInit+0x174>)
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80007b8:	6853      	ldr	r3, [r2, #4]
 80007ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	6053      	str	r3, [r2, #4]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80007c4:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <HAL_SPI_MspInit+0x178>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007c6:	60f0      	str	r0, [r6, #12]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80007c8:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ca:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007ce:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80007d2:	61b4      	str	r4, [r6, #24]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80007d4:	6033      	str	r3, [r6, #0]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007d6:	61f1      	str	r1, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80007d8:	f000 fac6 	bl	8000d68 <HAL_DMA_Init>
 80007dc:	2800      	cmp	r0, #0
 80007de:	d158      	bne.n	8000892 <HAL_SPI_MspInit+0x152>
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007e0:	2080      	movs	r0, #128	; 0x80
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007e2:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007e4:	2710      	movs	r7, #16
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80007e6:	2120      	movs	r1, #32
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007ec:	4c33      	ldr	r4, [pc, #204]	; (80008bc <HAL_SPI_MspInit+0x17c>)
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80007ee:	64ee      	str	r6, [r5, #76]	; 0x4c
 80007f0:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007f2:	4e33      	ldr	r6, [pc, #204]	; (80008c0 <HAL_SPI_MspInit+0x180>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80007f4:	60e0      	str	r0, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80007f6:	4620      	mov	r0, r4
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80007f8:	e9c4 6700 	strd	r6, r7, [r4]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80007fc:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000800:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000802:	e9c4 3304 	strd	r3, r3, [r4, #16]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000806:	f000 faaf 	bl	8000d68 <HAL_DMA_Init>
 800080a:	b108      	cbz	r0, 8000810 <HAL_SPI_MspInit+0xd0>
      Error_Handler();
 800080c:	f7ff feea 	bl	80005e4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000810:	64ac      	str	r4, [r5, #72]	; 0x48
 8000812:	6265      	str	r5, [r4, #36]	; 0x24
}
 8000814:	b009      	add	sp, #36	; 0x24
 8000816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000818:	f44f 4120 	mov.w	r1, #40960	; 0xa000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800081e:	2603      	movs	r6, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <HAL_SPI_MspInit+0x168>)
 8000822:	69da      	ldr	r2, [r3, #28]
 8000824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000828:	61da      	str	r2, [r3, #28]
 800082a:	69da      	ldr	r2, [r3, #28]
 800082c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000830:	9202      	str	r2, [sp, #8]
 8000832:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	699a      	ldr	r2, [r3, #24]
 8000836:	f042 0208 	orr.w	r2, r2, #8
 800083a:	619a      	str	r2, [r3, #24]
 800083c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800083e:	9104      	str	r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	f003 0308 	and.w	r3, r3, #8
 8000844:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	9005      	str	r0, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	4818      	ldr	r0, [pc, #96]	; (80008ac <HAL_SPI_MspInit+0x16c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f000 fb54 	bl	8000efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000854:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	a904      	add	r1, sp, #16
 800085a:	4814      	ldr	r0, [pc, #80]	; (80008ac <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800085c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f000 fb4b 	bl	8000efc <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000866:	2010      	movs	r0, #16
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000868:	2280      	movs	r2, #128	; 0x80
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800086e:	4e15      	ldr	r6, [pc, #84]	; (80008c4 <HAL_SPI_MspInit+0x184>)
 8000870:	4915      	ldr	r1, [pc, #84]	; (80008c8 <HAL_SPI_MspInit+0x188>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000872:	e9c6 0401 	strd	r0, r4, [r6, #4]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000876:	4630      	mov	r0, r6
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000878:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800087c:	61b4      	str	r4, [r6, #24]
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800087e:	6031      	str	r1, [r6, #0]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000880:	60f2      	str	r2, [r6, #12]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000882:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000884:	f000 fa70 	bl	8000d68 <HAL_DMA_Init>
 8000888:	b930      	cbnz	r0, 8000898 <HAL_SPI_MspInit+0x158>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800088a:	64ae      	str	r6, [r5, #72]	; 0x48
 800088c:	6275      	str	r5, [r6, #36]	; 0x24
}
 800088e:	b009      	add	sp, #36	; 0x24
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000892:	f7ff fea7 	bl	80005e4 <Error_Handler>
 8000896:	e7a3      	b.n	80007e0 <HAL_SPI_MspInit+0xa0>
      Error_Handler();
 8000898:	f7ff fea4 	bl	80005e4 <Error_Handler>
 800089c:	e7f5      	b.n	800088a <HAL_SPI_MspInit+0x14a>
 800089e:	bf00      	nop
 80008a0:	40013000 	.word	0x40013000
 80008a4:	40003800 	.word	0x40003800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010c00 	.word	0x40010c00
 80008b0:	40010000 	.word	0x40010000
 80008b4:	20001480 	.word	0x20001480
 80008b8:	4002001c 	.word	0x4002001c
 80008bc:	200017a8 	.word	0x200017a8
 80008c0:	40020030 	.word	0x40020030
 80008c4:	200014c8 	.word	0x200014c8
 80008c8:	40020058 	.word	0x40020058

080008cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008cc:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM1)
 80008ce:	6803      	ldr	r3, [r0, #0]
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <HAL_TIM_Base_MspInit+0x58>)
{
 80008d2:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d00f      	beq.n	80008f8 <HAL_TIM_Base_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80008d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008dc:	d10a      	bne.n	80008f4 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008de:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008e2:	69da      	ldr	r2, [r3, #28]
 80008e4:	f042 0201 	orr.w	r2, r2, #1
 80008e8:	61da      	str	r2, [r3, #28]
 80008ea:	69db      	ldr	r3, [r3, #28]
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008f4:	b002      	add	sp, #8
 80008f6:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <HAL_TIM_Base_MspInit+0x5c>)
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80008fc:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008fe:	699c      	ldr	r4, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000900:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000902:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8000906:	619c      	str	r4, [r3, #24]
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000912:	f000 f9cd 	bl	8000cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000916:	2019      	movs	r0, #25
}
 8000918:	b002      	add	sp, #8
 800091a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800091e:	f000 b9fd 	b.w	8000d1c <HAL_NVIC_EnableIRQ>
 8000922:	bf00      	nop
 8000924:	40012c00 	.word	0x40012c00
 8000928:	40021000 	.word	0x40021000

0800092c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	2300      	movs	r3, #0
{
 800092e:	b510      	push	{r4, lr}
  if(htim->Instance==TIM2)
 8000930:	6802      	ldr	r2, [r0, #0]
{
 8000932:	b086      	sub	sp, #24
  if(htim->Instance==TIM2)
 8000934:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800093c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM2)
 8000940:	d001      	beq.n	8000946 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000942:	b006      	add	sp, #24
 8000944:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000946:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000950:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000954:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	f042 0208 	orr.w	r2, r2, #8
 800095c:	619a      	str	r2, [r3, #24]
 800095e:	699a      	ldr	r2, [r3, #24]
 8000960:	f002 0208 	and.w	r2, r2, #8
 8000964:	9200      	str	r2, [sp, #0]
 8000966:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	699a      	ldr	r2, [r3, #24]
 800096a:	f042 0204 	orr.w	r2, r2, #4
 800096e:	619a      	str	r2, [r3, #24]
 8000970:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000972:	9002      	str	r0, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <HAL_TIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f000 fabb 	bl	8000efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	a902      	add	r1, sp, #8
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800098e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f000 fab2 	bl	8000efc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8000998:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <HAL_TIM_MspPostInit+0x88>)
 800099a:	6853      	ldr	r3, [r2, #4]
 800099c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80009a4:	6053      	str	r3, [r2, #4]
}
 80009a6:	b006      	add	sp, #24
 80009a8:	bd10      	pop	{r4, pc}
 80009aa:	bf00      	nop
 80009ac:	40010c00 	.word	0x40010c00
 80009b0:	40010800 	.word	0x40010800
 80009b4:	40010000 	.word	0x40010000

080009b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 80009bc:	6802      	ldr	r2, [r0, #0]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x68>)
{
 80009c0:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 80009c2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80009c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART2)
 80009cc:	d001      	beq.n	80009d2 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ce:	b006      	add	sp, #24
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009d2:	2104      	movs	r1, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d6:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80009dc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009de:	4811      	ldr	r0, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80009e4:	61da      	str	r2, [r3, #28]
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80009ec:	9200      	str	r2, [sp, #0]
 80009ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	699a      	ldr	r2, [r3, #24]
 80009f2:	430a      	orrs	r2, r1
 80009f4:	619a      	str	r2, [r3, #24]
 80009f6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009f8:	9102      	str	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	400b      	ands	r3, r1
 80009fc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a04:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f000 fa79 	bl	8000efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a0a:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_UART_MspInit+0x6c>)
 8000a0e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a16:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f000 fa70 	bl	8000efc <HAL_GPIO_Init>
}
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40010800 	.word	0x40010800

08000a28 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8000a28:	6802      	ldr	r2, [r0, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_PCD_MspInit+0x28>)
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d000      	beq.n	8000a32 <HAL_PCD_MspInit+0xa>
 8000a30:	4770      	bx	lr
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a32:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000a36:	69da      	ldr	r2, [r3, #28]
{
 8000a38:	b082      	sub	sp, #8
    __HAL_RCC_USB_CLK_ENABLE();
 8000a3a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a3e:	61da      	str	r2, [r3, #28]
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a4a:	b002      	add	sp, #8
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40005c00 	.word	0x40005c00

08000a54 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <SDTimer_Handler+0x20>)
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	b11a      	cbz	r2, 8000a62 <SDTimer_Handler+0xe>
    Timer1--;
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	3a01      	subs	r2, #1
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SDTimer_Handler+0x24>)
 8000a64:	7813      	ldrb	r3, [r2, #0]
 8000a66:	b11b      	cbz	r3, 8000a70 <SDTimer_Handler+0x1c>
    Timer2--;
 8000a68:	7813      	ldrb	r3, [r2, #0]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	7013      	strb	r3, [r2, #0]
}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200017f1 	.word	0x200017f1
 8000a78:	200017f0 	.word	0x200017f0

08000a7c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	e7fe      	b.n	8000a80 <HardFault_Handler>
 8000a82:	bf00      	nop

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler>
 8000a86:	bf00      	nop

08000a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a88:	e7fe      	b.n	8000a88 <BusFault_Handler>
 8000a8a:	bf00      	nop

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler>
 8000a8e:	bf00      	nop

08000a90 <SVC_Handler>:
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <DebugMon_Handler>:
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <PendSV_Handler>:
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <SysTick_Handler+0x24>)
 8000aa0:	7813      	ldrb	r3, [r2, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	7013      	strb	r3, [r2, #0]
  if(FatFsCnt >= 10)
 8000aa8:	7813      	ldrb	r3, [r2, #0]
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	d903      	bls.n	8000ab6 <SysTick_Handler+0x1a>
  {
    FatFsCnt = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	7013      	strb	r3, [r2, #0]
    SDTimer_Handler();
 8000ab2:	f7ff ffcf 	bl	8000a54 <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8000aba:	f000 b8c3 	b.w	8000c44 <HAL_IncTick>
 8000abe:	bf00      	nop
 8000ac0:	20000042 	.word	0x20000042

08000ac4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000ac4:	4801      	ldr	r0, [pc, #4]	; (8000acc <DMA1_Channel2_IRQHandler+0x8>)
 8000ac6:	f000 b983 	b.w	8000dd0 <HAL_DMA_IRQHandler>
 8000aca:	bf00      	nop
 8000acc:	20001480 	.word	0x20001480

08000ad0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000ad0:	4801      	ldr	r0, [pc, #4]	; (8000ad8 <DMA1_Channel3_IRQHandler+0x8>)
 8000ad2:	f000 b97d 	b.w	8000dd0 <HAL_DMA_IRQHandler>
 8000ad6:	bf00      	nop
 8000ad8:	200017a8 	.word	0x200017a8

08000adc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000adc:	4801      	ldr	r0, [pc, #4]	; (8000ae4 <DMA1_Channel5_IRQHandler+0x8>)
 8000ade:	f000 b977 	b.w	8000dd0 <HAL_DMA_IRQHandler>
 8000ae2:	bf00      	nop
 8000ae4:	200014c8 	.word	0x200014c8

08000ae8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ae8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 8000aea:	4c09      	ldr	r4, [pc, #36]	; (8000b10 <TIM1_UP_IRQHandler+0x28>)
  HAL_TIM_IRQHandler(&htim1);
 8000aec:	4809      	ldr	r0, [pc, #36]	; (8000b14 <TIM1_UP_IRQHandler+0x2c>)
 8000aee:	f001 faad 	bl	800204c <HAL_TIM_IRQHandler>
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 8000af2:	4620      	mov	r0, r4
 8000af4:	2140      	movs	r1, #64	; 0x40
 8000af6:	f000 faff 	bl	80010f8 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 8000afa:	4620      	mov	r0, r4
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	f000 fafb 	bl	80010f8 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8000b06:	2104      	movs	r1, #4
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <TIM1_UP_IRQHandler+0x30>)
 8000b0a:	f000 baf5 	b.w	80010f8 <HAL_GPIO_TogglePin>
 8000b0e:	bf00      	nop
 8000b10:	40010800 	.word	0x40010800
 8000b14:	20001364 	.word	0x20001364
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b1e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b22:	f000 faef 	bl	8001104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000b26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b2a:	f000 faeb 	bl	8001104 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000b32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b36:	f000 bae5 	b.w	8001104 <HAL_GPIO_EXTI_IRQHandler>
 8000b3a:	bf00      	nop

08000b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b3c:	b430      	push	{r4, r5}

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b3e:	f44f 051f 	mov.w	r5, #10420224	; 0x9f0000
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b42:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR |= 0x00000001U;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <SystemInit+0x44>)
  RCC->CFGR &= 0xF8FF0000U;
 8000b48:	4a0e      	ldr	r2, [pc, #56]	; (8000b84 <SystemInit+0x48>)
  RCC->CR |= 0x00000001U;
 8000b4a:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b4c:	480e      	ldr	r0, [pc, #56]	; (8000b88 <SystemInit+0x4c>)
  RCC->CR |= 0x00000001U;
 8000b4e:	f041 0101 	orr.w	r1, r1, #1
 8000b52:	6019      	str	r1, [r3, #0]
  RCC->CFGR &= 0xF8FF0000U;
 8000b54:	6859      	ldr	r1, [r3, #4]
 8000b56:	400a      	ands	r2, r1
 8000b58:	605a      	str	r2, [r3, #4]
  RCC->CR &= 0xFEF6FFFFU;
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000b60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b64:	601a      	str	r2, [r3, #0]
  RCC->CR &= 0xFFFBFFFFU;
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b6c:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= 0xFF80FFFFU;
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000b74:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000U;
 8000b76:	609d      	str	r5, [r3, #8]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b78:	6084      	str	r4, [r0, #8]
#endif 
}
 8000b7a:	bc30      	pop	{r4, r5}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	f8ff0000 	.word	0xf8ff0000
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b8e:	e003      	b.n	8000b98 <LoopCopyDataInit>

08000b90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b96:	3104      	adds	r1, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b98:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ba0:	d3f6      	bcc.n	8000b90 <CopyDataInit>
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ba4:	e002      	b.n	8000bac <LoopFillZerobss>

08000ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ba8:	f842 3b04 	str.w	r3, [r2], #4

08000bac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bb0:	d3f9      	bcc.n	8000ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ffc3 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f003 fe7d 	bl	80048b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fafb 	bl	80001b4 <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r3, =_sidata
 8000bc0:	08004f30 	.word	0x08004f30
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bc8:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8000bcc:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000bd0:	2000285c 	.word	0x2000285c

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bde:	490d      	ldr	r1, [pc, #52]	; (8000c14 <HAL_InitTick+0x3c>)
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <HAL_InitTick+0x40>)
 8000be2:	7809      	ldrb	r1, [r1, #0]
 8000be4:	6812      	ldr	r2, [r2, #0]
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000bea:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bec:	fbb2 f0f3 	udiv	r0, r2, r3
 8000bf0:	f000 f8a2 	bl	8000d38 <HAL_SYSTICK_Config>
 8000bf4:	b908      	cbnz	r0, 8000bfa <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf6:	2d0f      	cmp	r5, #15
 8000bf8:	d901      	bls.n	8000bfe <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000bfa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000bfc:	bd38      	pop	{r3, r4, r5, pc}
 8000bfe:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	4602      	mov	r2, r0
 8000c02:	4629      	mov	r1, r5
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f852 	bl	8000cb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_InitTick+0x44>)
 8000c0e:	4620      	mov	r0, r4
 8000c10:	601d      	str	r5, [r3, #0]
}
 8000c12:	bd38      	pop	{r3, r4, r5, pc}
 8000c14:	20000004 	.word	0x20000004
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_Init+0x20>)
{
 8000c22:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c24:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c26:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c2e:	f000 f82d 	bl	8000c8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff ffd0 	bl	8000bd8 <HAL_InitTick>
  HAL_MspInit();
 8000c38:	f7ff fd60 	bl	80006fc <HAL_MspInit>
}
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	bd08      	pop	{r3, pc}
 8000c40:	40022000 	.word	0x40022000

08000c44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x10>)
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <HAL_IncTick+0x14>)
 8000c48:	6811      	ldr	r1, [r2, #0]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	200017f4 	.word	0x200017f4
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c5c:	4b01      	ldr	r3, [pc, #4]	; (8000c64 <HAL_GetTick+0x8>)
 8000c5e:	6818      	ldr	r0, [r3, #0]
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200017f4 	.word	0x200017f4

08000c68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff fff6 	bl	8000c5c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c70:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000c72:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000c74:	d002      	beq.n	8000c7c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <HAL_Delay+0x20>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	1b40      	subs	r0, r0, r5
 8000c82:	42a0      	cmp	r0, r4
 8000c84:	d3fa      	bcc.n	8000c7c <HAL_Delay+0x14>
  {
  }
}
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4a06      	ldr	r2, [pc, #24]	; (8000cac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c92:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	400b      	ands	r3, r1
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000ca4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ca6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_NVIC_SetPriority+0x64>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b430      	push	{r4, r5}
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cba:	f1c3 0507 	rsb	r5, r3, #7
 8000cbe:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	bf28      	it	cs
 8000cc6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc8:	2c06      	cmp	r4, #6
 8000cca:	d919      	bls.n	8000d00 <HAL_NVIC_SetPriority+0x50>
 8000ccc:	f04f 34ff 	mov.w	r4, #4294967295
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	409c      	lsls	r4, r3
 8000cd4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	40aa      	lsls	r2, r5
 8000cde:	ea21 0102 	bic.w	r1, r1, r2
 8000ce2:	fa01 f203 	lsl.w	r2, r1, r3
 8000ce6:	4322      	orrs	r2, r4
 8000ce8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000cea:	2800      	cmp	r0, #0
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	db0a      	blt.n	8000d06 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000cf4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000cf8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000cfc:	bc30      	pop	{r4, r5}
 8000cfe:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d00:	2400      	movs	r4, #0
 8000d02:	4623      	mov	r3, r4
 8000d04:	e7e8      	b.n	8000cd8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <HAL_NVIC_SetPriority+0x68>)
 8000d08:	f000 000f 	and.w	r0, r0, #15
 8000d0c:	4403      	add	r3, r0
 8000d0e:	761a      	strb	r2, [r3, #24]
 8000d10:	bc30      	pop	{r4, r5}
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00
 8000d18:	e000ecfc 	.word	0xe000ecfc

08000d1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	db07      	blt.n	8000d30 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d20:	2301      	movs	r3, #1
 8000d22:	f000 011f 	and.w	r1, r0, #31
 8000d26:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <HAL_NVIC_EnableIRQ+0x18>)
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	0940      	lsrs	r0, r0, #5
 8000d2c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	3801      	subs	r0, #1
 8000d3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d3e:	d20d      	bcs.n	8000d5c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d40:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	4c06      	ldr	r4, [pc, #24]	; (8000d64 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d52:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8000d54:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d56:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d58:	6019      	str	r1, [r3, #0]
 8000d5a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	e000e010 	.word	0xe000e010
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d68:	b350      	cbz	r0, 8000dc0 <HAL_DMA_Init+0x58>
 8000d6a:	4602      	mov	r2, r0
{
 8000d6c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d6e:	e9d0 3601 	ldrd	r3, r6, [r0, #4]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d72:	2400      	movs	r4, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d74:	2501      	movs	r5, #1
  tmp |=  hdma->Init.Direction        |
 8000d76:	4333      	orrs	r3, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d78:	68d6      	ldr	r6, [r2, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7a:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7c:	4333      	orrs	r3, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7e:	4911      	ldr	r1, [pc, #68]	; (8000dc4 <HAL_DMA_Init+0x5c>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d80:	6916      	ldr	r6, [r2, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d82:	4f11      	ldr	r7, [pc, #68]	; (8000dc8 <HAL_DMA_Init+0x60>)
 8000d84:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d86:	4333      	orrs	r3, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d88:	6956      	ldr	r6, [r2, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d8a:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d8e:	4333      	orrs	r3, r6
 8000d90:	6996      	ldr	r6, [r2, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d92:	69d7      	ldr	r7, [r2, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d94:	4333      	orrs	r3, r6
  tmp = hdma->Instance->CCR;
 8000d96:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d98:	0909      	lsrs	r1, r1, #4
 8000d9a:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d9c:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da0:	433b      	orrs	r3, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000da2:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000da6:	6411      	str	r1, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000da8:	4908      	ldr	r1, [pc, #32]	; (8000dcc <HAL_DMA_Init+0x64>)
  tmp |=  hdma->Init.Direction        |
 8000daa:	4333      	orrs	r3, r6
  hdma->DmaBaseAddress = DMA1;
 8000dac:	63d1      	str	r1, [r2, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8000dae:	6003      	str	r3, [r0, #0]
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;

  return HAL_OK;
 8000db0:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db2:	6394      	str	r4, [r2, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8000db4:	f882 4020 	strb.w	r4, [r2, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8000db8:	f882 5021 	strb.w	r5, [r2, #33]	; 0x21
}
 8000dbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000dbe:	4770      	bx	lr
    return HAL_ERROR;
 8000dc0:	2001      	movs	r0, #1
}
 8000dc2:	4770      	bx	lr
 8000dc4:	bffdfff8 	.word	0xbffdfff8
 8000dc8:	cccccccd 	.word	0xcccccccd
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <HAL_DMA_IRQHandler>:
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dd0:	2204      	movs	r2, #4
{
 8000dd2:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000dd4:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000dd8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000dda:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000ddc:	408a      	lsls	r2, r1
 8000dde:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000de0:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000de2:	d01f      	beq.n	8000e24 <HAL_DMA_IRQHandler+0x54>
 8000de4:	076a      	lsls	r2, r5, #29
 8000de6:	d51d      	bpl.n	8000e24 <HAL_DMA_IRQHandler+0x54>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	0691      	lsls	r1, r2, #26
 8000dec:	d403      	bmi.n	8000df6 <HAL_DMA_IRQHandler+0x26>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	f022 0204 	bic.w	r2, r2, #4
 8000df4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000df6:	4a3f      	ldr	r2, [pc, #252]	; (8000ef4 <HAL_DMA_IRQHandler+0x124>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d05c      	beq.n	8000eb6 <HAL_DMA_IRQHandler+0xe6>
 8000dfc:	3214      	adds	r2, #20
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d061      	beq.n	8000ec6 <HAL_DMA_IRQHandler+0xf6>
 8000e02:	3214      	adds	r2, #20
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d068      	beq.n	8000eda <HAL_DMA_IRQHandler+0x10a>
 8000e08:	3214      	adds	r2, #20
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d06b      	beq.n	8000ee6 <HAL_DMA_IRQHandler+0x116>
 8000e0e:	3214      	adds	r2, #20
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d05d      	beq.n	8000ed0 <HAL_DMA_IRQHandler+0x100>
 8000e14:	3214      	adds	r2, #20
 8000e16:	4293      	cmp	r3, r2
 8000e18:	bf0c      	ite	eq
 8000e1a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000e1e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000e22:	e049      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferHalfCpltCallback(hdma);
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e24:	2202      	movs	r2, #2
 8000e26:	408a      	lsls	r2, r1
 8000e28:	4222      	tst	r2, r4
 8000e2a:	d022      	beq.n	8000e72 <HAL_DMA_IRQHandler+0xa2>
 8000e2c:	07aa      	lsls	r2, r5, #30
 8000e2e:	d520      	bpl.n	8000e72 <HAL_DMA_IRQHandler+0xa2>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	0691      	lsls	r1, r2, #26
 8000e34:	d406      	bmi.n	8000e44 <HAL_DMA_IRQHandler+0x74>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e36:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	f022 020a 	bic.w	r2, r2, #10
 8000e3e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000e40:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e44:	4a2b      	ldr	r2, [pc, #172]	; (8000ef4 <HAL_DMA_IRQHandler+0x124>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d02b      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0xd2>
 8000e4a:	3214      	adds	r2, #20
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d042      	beq.n	8000ed6 <HAL_DMA_IRQHandler+0x106>
 8000e50:	3214      	adds	r2, #20
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d044      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x110>
 8000e56:	3214      	adds	r2, #20
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d036      	beq.n	8000eca <HAL_DMA_IRQHandler+0xfa>
 8000e5c:	3214      	adds	r2, #20
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d044      	beq.n	8000eec <HAL_DMA_IRQHandler+0x11c>
 8000e62:	3214      	adds	r2, #20
 8000e64:	4293      	cmp	r3, r2
 8000e66:	bf0c      	ite	eq
 8000e68:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000e6c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000e70:	e018      	b.n	8000ea4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferCpltCallback(hdma);
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e72:	2208      	movs	r2, #8
 8000e74:	408a      	lsls	r2, r1
 8000e76:	4222      	tst	r2, r4
 8000e78:	d01b      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0xe2>
 8000e7a:	072a      	lsls	r2, r5, #28
 8000e7c:	d519      	bpl.n	8000eb2 <HAL_DMA_IRQHandler+0xe2>
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e7e:	2201      	movs	r2, #1

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e80:	2500      	movs	r5, #0
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e82:	681c      	ldr	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e84:	fa02 f101 	lsl.w	r1, r2, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e88:	f024 040e 	bic.w	r4, r4, #14
 8000e8c:	601c      	str	r4, [r3, #0]

    if (hdma->XferErrorCallback != NULL)
 8000e8e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e90:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e92:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000e94:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000e98:	f880 5020 	strb.w	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000e9c:	b14b      	cbz	r3, 8000eb2 <HAL_DMA_IRQHandler+0xe2>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000e9e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000ea0:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ea2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000ea4:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ea6:	4c14      	ldr	r4, [pc, #80]	; (8000ef8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferCpltCallback != NULL)
 8000ea8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eaa:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000eac:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000eb0:	b93a      	cbnz	r2, 8000ec2 <HAL_DMA_IRQHandler+0xf2>
}
 8000eb2:	bc70      	pop	{r4, r5, r6}
 8000eb4:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	490f      	ldr	r1, [pc, #60]	; (8000ef8 <HAL_DMA_IRQHandler+0x128>)
    if(hdma->XferHalfCpltCallback != NULL)
 8000eba:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ebc:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000ebe:	2a00      	cmp	r2, #0
 8000ec0:	d0f7      	beq.n	8000eb2 <HAL_DMA_IRQHandler+0xe2>
}
 8000ec2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8000ec4:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	e7f6      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ece:	e7e9      	b.n	8000ea4 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ed4:	e7f0      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	e7e4      	b.n	8000ea4 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ede:	e7eb      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee4:	e7de      	b.n	8000ea4 <HAL_DMA_IRQHandler+0xd4>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000ee6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eea:	e7e5      	b.n	8000eb8 <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef0:	e7d8      	b.n	8000ea4 <HAL_DMA_IRQHandler+0xd4>
 8000ef2:	bf00      	nop
 8000ef4:	40020008 	.word	0x40020008
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efc:	680a      	ldr	r2, [r1, #0]
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	f000 80dc 	beq.w	80010bc <HAL_GPIO_Init+0x1c0>
{
 8000f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t config = 0x00u;
 8000f08:	f04f 0a00 	mov.w	sl, #0
{
 8000f0c:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 8000f0e:	4655      	mov	r5, sl
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f10:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80010e4 <HAL_GPIO_Init+0x1e8>
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f14:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 80010e8 <HAL_GPIO_Init+0x1ec>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f18:	4f6d      	ldr	r7, [pc, #436]	; (80010d0 <HAL_GPIO_Init+0x1d4>)
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f1a:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 80010ec <HAL_GPIO_Init+0x1f0>
 8000f1e:	e003      	b.n	8000f28 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000f20:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	fa32 f305 	lsrs.w	r3, r2, r5
 8000f26:	d079      	beq.n	800101c <HAL_GPIO_Init+0x120>
    ioposition = (0x01uL << position);
 8000f28:	2301      	movs	r3, #1
 8000f2a:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2c:	ea02 0403 	and.w	r4, r2, r3
    if (iocurrent == ioposition)
 8000f30:	42a3      	cmp	r3, r4
 8000f32:	d1f5      	bne.n	8000f20 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8000f34:	684a      	ldr	r2, [r1, #4]
 8000f36:	2a12      	cmp	r2, #18
 8000f38:	f000 809f 	beq.w	800107a <HAL_GPIO_Init+0x17e>
 8000f3c:	f200 8088 	bhi.w	8001050 <HAL_GPIO_Init+0x154>
 8000f40:	2a02      	cmp	r2, #2
 8000f42:	f000 809e 	beq.w	8001082 <HAL_GPIO_Init+0x186>
 8000f46:	d97d      	bls.n	8001044 <HAL_GPIO_Init+0x148>
 8000f48:	2a03      	cmp	r2, #3
 8000f4a:	d06a      	beq.n	8001022 <HAL_GPIO_Init+0x126>
 8000f4c:	2a11      	cmp	r2, #17
 8000f4e:	d102      	bne.n	8000f56 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f50:	68cb      	ldr	r3, [r1, #12]
 8000f52:	f103 0a04 	add.w	sl, r3, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f56:	2cff      	cmp	r4, #255	; 0xff
 8000f58:	d867      	bhi.n	800102a <HAL_GPIO_Init+0x12e>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	6803      	ldr	r3, [r0, #0]
 8000f5e:	00aa      	lsls	r2, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f60:	260f      	movs	r6, #15
 8000f62:	fa06 fb02 	lsl.w	fp, r6, r2
 8000f66:	ea23 030b 	bic.w	r3, r3, fp
 8000f6a:	fa0a f202 	lsl.w	r2, sl, r2
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	f8c9 3000 	str.w	r3, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f74:	684a      	ldr	r2, [r1, #4]
 8000f76:	00d3      	lsls	r3, r2, #3
 8000f78:	d562      	bpl.n	8001040 <HAL_GPIO_Init+0x144>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000f7e:	f025 0303 	bic.w	r3, r5, #3
 8000f82:	f049 0901 	orr.w	r9, r9, #1
 8000f86:	f8cc 9018 	str.w	r9, [ip, #24]
 8000f8a:	f8dc 9018 	ldr.w	r9, [ip, #24]
 8000f8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f92:	f009 0901 	and.w	r9, r9, #1
 8000f96:	f8cd 900c 	str.w	r9, [sp, #12]
 8000f9a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f9e:	f005 0903 	and.w	r9, r5, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa2:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000faa:	f8d3 b008 	ldr.w	fp, [r3, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fae:	fa06 f609 	lsl.w	r6, r6, r9
 8000fb2:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fb6:	4570      	cmp	r0, lr
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fb8:	9601      	str	r6, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fba:	d011      	beq.n	8000fe0 <HAL_GPIO_Init+0xe4>
 8000fbc:	4540      	cmp	r0, r8
 8000fbe:	d064      	beq.n	800108a <HAL_GPIO_Init+0x18e>
 8000fc0:	4e44      	ldr	r6, [pc, #272]	; (80010d4 <HAL_GPIO_Init+0x1d8>)
 8000fc2:	42b0      	cmp	r0, r6
 8000fc4:	d07b      	beq.n	80010be <HAL_GPIO_Init+0x1c2>
 8000fc6:	4e44      	ldr	r6, [pc, #272]	; (80010d8 <HAL_GPIO_Init+0x1dc>)
 8000fc8:	42b0      	cmp	r0, r6
 8000fca:	bf0c      	ite	eq
 8000fcc:	f04f 0b03 	moveq.w	fp, #3
 8000fd0:	f04f 0b04 	movne.w	fp, #4
 8000fd4:	9e01      	ldr	r6, [sp, #4]
 8000fd6:	fa0b f909 	lsl.w	r9, fp, r9
 8000fda:	ea46 0609 	orr.w	r6, r6, r9
 8000fde:	9601      	str	r6, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fe0:	9e01      	ldr	r6, [sp, #4]
 8000fe2:	609e      	str	r6, [r3, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe4:	683b      	ldr	r3, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe6:	03d6      	lsls	r6, r2, #15
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe8:	bf4c      	ite	mi
 8000fea:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fec:	43a3      	bicpl	r3, r4
 8000fee:	603b      	str	r3, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff0:	687b      	ldr	r3, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff2:	0396      	lsls	r6, r2, #14
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff4:	bf4c      	ite	mi
 8000ff6:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ff8:	43a3      	bicpl	r3, r4
 8000ffa:	607b      	str	r3, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ffe:	02d6      	lsls	r6, r2, #11
          SET_BIT(EXTI->RTSR, iocurrent);
 8001000:	bf4c      	ite	mi
 8001002:	4323      	orrmi	r3, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001004:	43a3      	bicpl	r3, r4
 8001006:	60bb      	str	r3, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001008:	0292      	lsls	r2, r2, #10
          SET_BIT(EXTI->FTSR, iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100c:	d515      	bpl.n	800103a <HAL_GPIO_Init+0x13e>
          SET_BIT(EXTI->FTSR, iocurrent);
 800100e:	431c      	orrs	r4, r3
 8001010:	60fc      	str	r4, [r7, #12]
 8001012:	680a      	ldr	r2, [r1, #0]
	position++;
 8001014:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	fa32 f305 	lsrs.w	r3, r2, r5
 800101a:	d185      	bne.n	8000f28 <HAL_GPIO_Init+0x2c>
  }
}
 800101c:	b005      	add	sp, #20
 800101e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001022:	2cff      	cmp	r4, #255	; 0xff
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001024:	f04f 0a00 	mov.w	sl, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001028:	d997      	bls.n	8000f5a <HAL_GPIO_Init+0x5e>
 800102a:	f105 4280 	add.w	r2, r5, #1073741824	; 0x40000000
 800102e:	3a08      	subs	r2, #8
 8001030:	6843      	ldr	r3, [r0, #4]
 8001032:	0092      	lsls	r2, r2, #2
 8001034:	f100 0904 	add.w	r9, r0, #4
 8001038:	e792      	b.n	8000f60 <HAL_GPIO_Init+0x64>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800103a:	ea23 0404 	bic.w	r4, r3, r4
 800103e:	60fc      	str	r4, [r7, #12]
 8001040:	680a      	ldr	r2, [r1, #0]
 8001042:	e76d      	b.n	8000f20 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8001044:	b1a2      	cbz	r2, 8001070 <HAL_GPIO_Init+0x174>
 8001046:	2a01      	cmp	r2, #1
 8001048:	d185      	bne.n	8000f56 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800104a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800104e:	e782      	b.n	8000f56 <HAL_GPIO_Init+0x5a>
      switch (GPIO_Init->Mode)
 8001050:	4e22      	ldr	r6, [pc, #136]	; (80010dc <HAL_GPIO_Init+0x1e0>)
 8001052:	42b2      	cmp	r2, r6
 8001054:	d00c      	beq.n	8001070 <HAL_GPIO_Init+0x174>
 8001056:	d920      	bls.n	800109a <HAL_GPIO_Init+0x19e>
 8001058:	4e21      	ldr	r6, [pc, #132]	; (80010e0 <HAL_GPIO_Init+0x1e4>)
 800105a:	42b2      	cmp	r2, r6
 800105c:	d008      	beq.n	8001070 <HAL_GPIO_Init+0x174>
 800105e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001062:	42b2      	cmp	r2, r6
 8001064:	d004      	beq.n	8001070 <HAL_GPIO_Init+0x174>
 8001066:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800106a:	42b2      	cmp	r2, r6
 800106c:	f47f af73 	bne.w	8000f56 <HAL_GPIO_Init+0x5a>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001070:	688a      	ldr	r2, [r1, #8]
 8001072:	b9e2      	cbnz	r2, 80010ae <HAL_GPIO_Init+0x1b2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001074:	f04f 0a04 	mov.w	sl, #4
 8001078:	e76d      	b.n	8000f56 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800107a:	68cb      	ldr	r3, [r1, #12]
 800107c:	f103 0a0c 	add.w	sl, r3, #12
          break;
 8001080:	e769      	b.n	8000f56 <HAL_GPIO_Init+0x5a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001082:	68cb      	ldr	r3, [r1, #12]
 8001084:	f103 0a08 	add.w	sl, r3, #8
          break;
 8001088:	e765      	b.n	8000f56 <HAL_GPIO_Init+0x5a>
 800108a:	f04f 0b01 	mov.w	fp, #1
 800108e:	fa0b f909 	lsl.w	r9, fp, r9
 8001092:	ea46 0609 	orr.w	r6, r6, r9
 8001096:	9601      	str	r6, [sp, #4]
 8001098:	e7a2      	b.n	8000fe0 <HAL_GPIO_Init+0xe4>
      switch (GPIO_Init->Mode)
 800109a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800109e:	42b2      	cmp	r2, r6
 80010a0:	d0e6      	beq.n	8001070 <HAL_GPIO_Init+0x174>
 80010a2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80010a6:	42b2      	cmp	r2, r6
 80010a8:	f47f af55 	bne.w	8000f56 <HAL_GPIO_Init+0x5a>
 80010ac:	e7e0      	b.n	8001070 <HAL_GPIO_Init+0x174>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010ae:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80010b0:	bf0c      	ite	eq
 80010b2:	6103      	streq	r3, [r0, #16]
            GPIOx->BRR = ioposition;
 80010b4:	6143      	strne	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b6:	f04f 0a08 	mov.w	sl, #8
 80010ba:	e74c      	b.n	8000f56 <HAL_GPIO_Init+0x5a>
 80010bc:	4770      	bx	lr
 80010be:	f04f 0b02 	mov.w	fp, #2
 80010c2:	9e01      	ldr	r6, [sp, #4]
 80010c4:	fa0b f909 	lsl.w	r9, fp, r9
 80010c8:	ea46 0609 	orr.w	r6, r6, r9
 80010cc:	9601      	str	r6, [sp, #4]
 80010ce:	e787      	b.n	8000fe0 <HAL_GPIO_Init+0xe4>
 80010d0:	40010400 	.word	0x40010400
 80010d4:	40011000 	.word	0x40011000
 80010d8:	40011400 	.word	0x40011400
 80010dc:	10210000 	.word	0x10210000
 80010e0:	10310000 	.word	0x10310000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010800 	.word	0x40010800
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f0:	b902      	cbnz	r2, 80010f4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010f2:	0409      	lsls	r1, r1, #16
 80010f4:	6101      	str	r1, [r0, #16]
  }
}
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80010f8:	68c3      	ldr	r3, [r0, #12]
 80010fa:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010fc:	bf14      	ite	ne
 80010fe:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001100:	6101      	streq	r1, [r0, #16]
  }
}
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001106:	6951      	ldr	r1, [r2, #20]
 8001108:	4201      	tst	r1, r0
 800110a:	d100      	bne.n	800110e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800110c:	4770      	bx	lr
{
 800110e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001110:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001112:	f7ff fa4f 	bl	80005b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001116:	bd08      	pop	{r3, pc}
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111e:	b087      	sub	sp, #28
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001120:	2800      	cmp	r0, #0
 8001122:	d074      	beq.n	800120e <HAL_PCD_Init+0xf2>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001124:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8001128:	4604      	mov	r4, r0
 800112a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800112e:	2b00      	cmp	r3, #0
 8001130:	d068      	beq.n	8001204 <HAL_PCD_Init+0xe8>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001132:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001134:	4626      	mov	r6, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001136:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 800113a:	6820      	ldr	r0, [r4, #0]
 800113c:	f001 f9ec 	bl	8002518 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001140:	f856 cb10 	ldr.w	ip, [r6], #16
 8001144:	466d      	mov	r5, sp
 8001146:	4637      	mov	r7, r6
 8001148:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	1d27      	adds	r7, r4, #4
 8001150:	602b      	str	r3, [r5, #0]
 8001152:	4660      	mov	r0, ip
 8001154:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001158:	f001 f9d6 	bl	8002508 <USB_CoreInit>
 800115c:	4605      	mov	r5, r0
 800115e:	b130      	cbz	r0, 800116e <HAL_PCD_Init+0x52>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001160:	2302      	movs	r3, #2
    return HAL_ERROR;
 8001162:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001164:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001168:	4628      	mov	r0, r5
 800116a:	b007      	add	sp, #28
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800116e:	4601      	mov	r1, r0
 8001170:	6820      	ldr	r0, [r4, #0]
 8001172:	f001 f9db 	bl	800252c <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800117a:	f1bc 0f00 	cmp.w	ip, #0
 800117e:	d029      	beq.n	80011d4 <HAL_PCD_Init+0xb8>
 8001180:	4628      	mov	r0, r5
    hpcd->IN_ep[i].is_in = 1U;
 8001182:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001186:	462a      	mov	r2, r5
    hpcd->IN_ep[i].is_in = 1U;
 8001188:	eb04 1340 	add.w	r3, r4, r0, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	1c45      	adds	r5, r0, #1
    hpcd->IN_ep[i].num = i;
 800118e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001192:	86d8      	strh	r0, [r3, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001194:	b2e8      	uxtb	r0, r5
 8001196:	4560      	cmp	r0, ip
    hpcd->IN_ep[i].is_in = 1U;
 8001198:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800119c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a0:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a6:	d3ef      	bcc.n	8001188 <HAL_PCD_Init+0x6c>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011a8:	2300      	movs	r3, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80011aa:	4619      	mov	r1, r3
 80011ac:	eb04 1243 	add.w	r2, r4, r3, lsl #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b0:	1c5d      	adds	r5, r3, #1
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b2:	f103 000a 	add.w	r0, r3, #10
    hpcd->OUT_ep[i].num = i;
 80011b6:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ba:	b2eb      	uxtb	r3, r5
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011bc:	0140      	lsls	r0, r0, #5
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011be:	4563      	cmp	r3, ip
    hpcd->OUT_ep[i].is_in = 0U;
 80011c0:	f882 1129 	strb.w	r1, [r2, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011c4:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011c8:	f8c2 1138 	str.w	r1, [r2, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011cc:	f8c2 113c 	str.w	r1, [r2, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011d0:	5021      	str	r1, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d2:	d3eb      	bcc.n	80011ac <HAL_PCD_Init+0x90>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011d6:	466d      	mov	r5, sp
 80011d8:	f8d4 c000 	ldr.w	ip, [r4]
 80011dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011de:	6833      	ldr	r3, [r6, #0]
 80011e0:	4660      	mov	r0, ip
 80011e2:	602b      	str	r3, [r5, #0]
 80011e4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80011e8:	f001 f9a2 	bl	8002530 <USB_DevInit>
 80011ec:	4605      	mov	r5, r0
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d1b6      	bne.n	8001160 <HAL_PCD_Init+0x44>
  hpcd->State = HAL_PCD_STATE_READY;
 80011f2:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80011f4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  (void)USB_DevDisconnect(hpcd->Instance);
 80011f8:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80011fa:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80011fe:	f001 f9b1 	bl	8002564 <USB_DevDisconnect>
  return HAL_OK;
 8001202:	e7b1      	b.n	8001168 <HAL_PCD_Init+0x4c>
    hpcd->Lock = HAL_UNLOCKED;
 8001204:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
    HAL_PCD_MspInit(hpcd);
 8001208:	f7ff fc0e 	bl	8000a28 <HAL_PCD_MspInit>
 800120c:	e791      	b.n	8001132 <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 800120e:	2501      	movs	r5, #1
}
 8001210:	4628      	mov	r0, r5
 8001212:	b007      	add	sp, #28
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001216:	bf00      	nop

08001218 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001218:	2800      	cmp	r0, #0
 800121a:	f000 8155 	beq.w	80014c8 <HAL_RCC_OscConfig+0x2b0>
{
 800121e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001222:	6803      	ldr	r3, [r0, #0]
{
 8001224:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	07dd      	lsls	r5, r3, #31
 8001228:	4604      	mov	r4, r0
 800122a:	d535      	bpl.n	8001298 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800122c:	49a8      	ldr	r1, [pc, #672]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 800122e:	684a      	ldr	r2, [r1, #4]
 8001230:	f002 020c 	and.w	r2, r2, #12
 8001234:	2a04      	cmp	r2, #4
 8001236:	f000 8105 	beq.w	8001444 <HAL_RCC_OscConfig+0x22c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800123a:	684a      	ldr	r2, [r1, #4]
 800123c:	f002 020c 	and.w	r2, r2, #12
 8001240:	2a08      	cmp	r2, #8
 8001242:	f000 80fb 	beq.w	800143c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	6863      	ldr	r3, [r4, #4]
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d010      	beq.n	8001270 <HAL_RCC_OscConfig+0x58>
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 8120 	beq.w	8001494 <HAL_RCC_OscConfig+0x27c>
 8001254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001258:	f000 8178 	beq.w	800154c <HAL_RCC_OscConfig+0x334>
 800125c:	4b9c      	ldr	r3, [pc, #624]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e004      	b.n	800127a <HAL_RCC_OscConfig+0x62>
 8001270:	4a97      	ldr	r2, [pc, #604]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 8001272:	6813      	ldr	r3, [r2, #0]
 8001274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001278:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fcef 	bl	8000c5c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127e:	4d94      	ldr	r5, [pc, #592]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
        tickstart = HAL_GetTick();
 8001280:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	e005      	b.n	8001290 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fcea 	bl	8000c5c <HAL_GetTick>
 8001288:	1b80      	subs	r0, r0, r6
 800128a:	2864      	cmp	r0, #100	; 0x64
 800128c:	f200 80f5 	bhi.w	800147a <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001290:	682b      	ldr	r3, [r5, #0]
 8001292:	039a      	lsls	r2, r3, #14
 8001294:	d5f6      	bpl.n	8001284 <HAL_RCC_OscConfig+0x6c>
 8001296:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001298:	079f      	lsls	r7, r3, #30
 800129a:	d44d      	bmi.n	8001338 <HAL_RCC_OscConfig+0x120>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129c:	071a      	lsls	r2, r3, #28
 800129e:	d522      	bpl.n	80012e6 <HAL_RCC_OscConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a0:	69a3      	ldr	r3, [r4, #24]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80ba 	beq.w	800141c <HAL_RCC_OscConfig+0x204>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012a8:	2201      	movs	r2, #1
 80012aa:	4b8a      	ldr	r3, [pc, #552]	; (80014d4 <HAL_RCC_OscConfig+0x2bc>)

      /* Get Start Tick */
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ac:	4d88      	ldr	r5, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_ENABLE();
 80012ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012b0:	f7ff fcd4 	bl	8000c5c <HAL_GetTick>
 80012b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	e005      	b.n	80012c4 <HAL_RCC_OscConfig+0xac>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b8:	f7ff fcd0 	bl	8000c5c <HAL_GetTick>
 80012bc:	1b80      	subs	r0, r0, r6
 80012be:	2802      	cmp	r0, #2
 80012c0:	f200 80db 	bhi.w	800147a <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012c6:	079b      	lsls	r3, r3, #30
 80012c8:	d5f6      	bpl.n	80012b8 <HAL_RCC_OscConfig+0xa0>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012ca:	4b83      	ldr	r3, [pc, #524]	; (80014d8 <HAL_RCC_OscConfig+0x2c0>)
 80012cc:	4a83      	ldr	r2, [pc, #524]	; (80014dc <HAL_RCC_OscConfig+0x2c4>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0a5b      	lsrs	r3, r3, #9
 80012d6:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80012d8:	bf00      	nop
  }
  while (Delay --);
 80012da:	9b01      	ldr	r3, [sp, #4]
 80012dc:	1e5a      	subs	r2, r3, #1
 80012de:	9201      	str	r2, [sp, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f9      	bne.n	80012d8 <HAL_RCC_OscConfig+0xc0>
 80012e4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e6:	075d      	lsls	r5, r3, #29
 80012e8:	d569      	bpl.n	80013be <HAL_RCC_OscConfig+0x1a6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ea:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80012ec:	69da      	ldr	r2, [r3, #28]
 80012ee:	00d0      	lsls	r0, r2, #3
 80012f0:	f100 80ec 	bmi.w	80014cc <HAL_RCC_OscConfig+0x2b4>
      pwrclkchanged = SET;
 80012f4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	69da      	ldr	r2, [r3, #28]
 80012f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012fc:	61da      	str	r2, [r3, #28]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001308:	4b75      	ldr	r3, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0x2c8>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	05d1      	lsls	r1, r2, #23
 800130e:	f140 80a3 	bpl.w	8001458 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001312:	68e3      	ldr	r3, [r4, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d037      	beq.n	8001388 <HAL_RCC_OscConfig+0x170>
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80e7 	beq.w	80014ec <HAL_RCC_OscConfig+0x2d4>
 800131e:	2b05      	cmp	r3, #5
 8001320:	4b6b      	ldr	r3, [pc, #428]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 8001322:	6a1a      	ldr	r2, [r3, #32]
 8001324:	f000 811f 	beq.w	8001566 <HAL_RCC_OscConfig+0x34e>
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	f022 0204 	bic.w	r2, r2, #4
 8001334:	621a      	str	r2, [r3, #32]
 8001336:	e02c      	b.n	8001392 <HAL_RCC_OscConfig+0x17a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001338:	4a65      	ldr	r2, [pc, #404]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 800133a:	6851      	ldr	r1, [r2, #4]
 800133c:	f011 0f0c 	tst.w	r1, #12
 8001340:	d061      	beq.n	8001406 <HAL_RCC_OscConfig+0x1ee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001342:	6851      	ldr	r1, [r2, #4]
 8001344:	f001 010c 	and.w	r1, r1, #12
 8001348:	2908      	cmp	r1, #8
 800134a:	d059      	beq.n	8001400 <HAL_RCC_OscConfig+0x1e8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134c:	6923      	ldr	r3, [r4, #16]
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 80eb 	beq.w	800152a <HAL_RCC_OscConfig+0x312>
        __HAL_RCC_HSI_ENABLE();
 8001354:	2201      	movs	r2, #1
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <HAL_RCC_OscConfig+0x2cc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	4d5d      	ldr	r5, [pc, #372]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_ENABLE();
 800135a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800135c:	f7ff fc7e 	bl	8000c5c <HAL_GetTick>
 8001360:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001362:	e005      	b.n	8001370 <HAL_RCC_OscConfig+0x158>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fc7a 	bl	8000c5c <HAL_GetTick>
 8001368:	1b80      	subs	r0, r0, r6
 800136a:	2802      	cmp	r0, #2
 800136c:	f200 8085 	bhi.w	800147a <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	682b      	ldr	r3, [r5, #0]
 8001372:	0798      	lsls	r0, r3, #30
 8001374:	d5f6      	bpl.n	8001364 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	6962      	ldr	r2, [r4, #20]
 800137a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800137e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001382:	602b      	str	r3, [r5, #0]
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	e789      	b.n	800129c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001388:	4a51      	ldr	r2, [pc, #324]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 800138a:	6a13      	ldr	r3, [r2, #32]
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8001392:	f7ff fc63 	bl	8000c5c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001396:	4e4e      	ldr	r6, [pc, #312]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
      tickstart = HAL_GetTick();
 8001398:	4680      	mov	r8, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f241 3788 	movw	r7, #5000	; 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	e005      	b.n	80013ac <HAL_RCC_OscConfig+0x194>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013a0:	f7ff fc5c 	bl	8000c5c <HAL_GetTick>
 80013a4:	eba0 0008 	sub.w	r0, r0, r8
 80013a8:	42b8      	cmp	r0, r7
 80013aa:	d866      	bhi.n	800147a <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	6a33      	ldr	r3, [r6, #32]
 80013ae:	079b      	lsls	r3, r3, #30
 80013b0:	d5f6      	bpl.n	80013a0 <HAL_RCC_OscConfig+0x188>
    if (pwrclkchanged == SET)
 80013b2:	b125      	cbz	r5, 80013be <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80013b6:	69d3      	ldr	r3, [r2, #28]
 80013b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013bc:	61d3      	str	r3, [r2, #28]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013be:	69e0      	ldr	r0, [r4, #28]
 80013c0:	b1d0      	cbz	r0, 80013f8 <HAL_RCC_OscConfig+0x1e0>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013c2:	4d43      	ldr	r5, [pc, #268]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 80013c4:	686a      	ldr	r2, [r5, #4]
 80013c6:	f002 020c 	and.w	r2, r2, #12
 80013ca:	2a08      	cmp	r2, #8
 80013cc:	f000 80d3 	beq.w	8001576 <HAL_RCC_OscConfig+0x35e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80013d2:	f04f 0100 	mov.w	r1, #0
 80013d6:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <HAL_RCC_OscConfig+0x2d0>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d8:	f000 80de 	beq.w	8001598 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_DISABLE();
 80013dc:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 80013de:	f7ff fc3d 	bl	8000c5c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80013e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	e004      	b.n	80013f2 <HAL_RCC_OscConfig+0x1da>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff fc38 	bl	8000c5c <HAL_GetTick>
 80013ec:	1b40      	subs	r0, r0, r5
 80013ee:	2802      	cmp	r0, #2
 80013f0:	d843      	bhi.n	800147a <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	d4f7      	bmi.n	80013e8 <HAL_RCC_OscConfig+0x1d0>
  return HAL_OK;
 80013f8:	2000      	movs	r0, #0
}
 80013fa:	b002      	add	sp, #8
 80013fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001400:	6852      	ldr	r2, [r2, #4]
 8001402:	03d6      	lsls	r6, r2, #15
 8001404:	d4a2      	bmi.n	800134c <HAL_RCC_OscConfig+0x134>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	4a32      	ldr	r2, [pc, #200]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 8001408:	6812      	ldr	r2, [r2, #0]
 800140a:	0795      	lsls	r5, r2, #30
 800140c:	d539      	bpl.n	8001482 <HAL_RCC_OscConfig+0x26a>
 800140e:	6922      	ldr	r2, [r4, #16]
 8001410:	2a01      	cmp	r2, #1
 8001412:	d036      	beq.n	8001482 <HAL_RCC_OscConfig+0x26a>
        return HAL_ERROR;
 8001414:	2001      	movs	r0, #1
}
 8001416:	b002      	add	sp, #8
 8001418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800141c:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141e:	4d2c      	ldr	r5, [pc, #176]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
      __HAL_RCC_LSI_DISABLE();
 8001420:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001422:	f7ff fc1b 	bl	8000c5c <HAL_GetTick>
 8001426:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	e004      	b.n	8001434 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142a:	f7ff fc17 	bl	8000c5c <HAL_GetTick>
 800142e:	1b80      	subs	r0, r0, r6
 8001430:	2802      	cmp	r0, #2
 8001432:	d822      	bhi.n	800147a <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001436:	079f      	lsls	r7, r3, #30
 8001438:	d4f7      	bmi.n	800142a <HAL_RCC_OscConfig+0x212>
 800143a:	e753      	b.n	80012e4 <HAL_RCC_OscConfig+0xcc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800143c:	684a      	ldr	r2, [r1, #4]
 800143e:	03d0      	lsls	r0, r2, #15
 8001440:	f57f af01 	bpl.w	8001246 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 8001446:	6812      	ldr	r2, [r2, #0]
 8001448:	0391      	lsls	r1, r2, #14
 800144a:	f57f af25 	bpl.w	8001298 <HAL_RCC_OscConfig+0x80>
 800144e:	6862      	ldr	r2, [r4, #4]
 8001450:	2a00      	cmp	r2, #0
 8001452:	f47f af21 	bne.w	8001298 <HAL_RCC_OscConfig+0x80>
 8001456:	e7dd      	b.n	8001414 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001458:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145a:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001460:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001462:	f7ff fbfb 	bl	8000c5c <HAL_GetTick>
 8001466:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001468:	6833      	ldr	r3, [r6, #0]
 800146a:	05da      	lsls	r2, r3, #23
 800146c:	f53f af51 	bmi.w	8001312 <HAL_RCC_OscConfig+0xfa>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001470:	f7ff fbf4 	bl	8000c5c <HAL_GetTick>
 8001474:	1bc0      	subs	r0, r0, r7
 8001476:	2864      	cmp	r0, #100	; 0x64
 8001478:	d9f6      	bls.n	8001468 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 800147a:	2003      	movs	r0, #3
}
 800147c:	b002      	add	sp, #8
 800147e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001482:	4913      	ldr	r1, [pc, #76]	; (80014d0 <HAL_RCC_OscConfig+0x2b8>)
 8001484:	6960      	ldr	r0, [r4, #20]
 8001486:	680a      	ldr	r2, [r1, #0]
 8001488:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800148c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001490:	600a      	str	r2, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	e703      	b.n	800129c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001498:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800149c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014ae:	f7ff fbd5 	bl	8000c5c <HAL_GetTick>
 80014b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b4:	e004      	b.n	80014c0 <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fbd1 	bl	8000c5c <HAL_GetTick>
 80014ba:	1b80      	subs	r0, r0, r6
 80014bc:	2864      	cmp	r0, #100	; 0x64
 80014be:	d8dc      	bhi.n	800147a <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	039b      	lsls	r3, r3, #14
 80014c4:	d4f7      	bmi.n	80014b6 <HAL_RCC_OscConfig+0x29e>
 80014c6:	e6e6      	b.n	8001296 <HAL_RCC_OscConfig+0x7e>
    return HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
}
 80014ca:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 80014cc:	2500      	movs	r5, #0
 80014ce:	e71b      	b.n	8001308 <HAL_RCC_OscConfig+0xf0>
 80014d0:	40021000 	.word	0x40021000
 80014d4:	42420480 	.word	0x42420480
 80014d8:	20000000 	.word	0x20000000
 80014dc:	10624dd3 	.word	0x10624dd3
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42420000 	.word	0x42420000
 80014e8:	42420060 	.word	0x42420060
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80014f4:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f6:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f8:	f022 0201 	bic.w	r2, r2, #1
 80014fc:	621a      	str	r2, [r3, #32]
 80014fe:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001500:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	f022 0204 	bic.w	r2, r2, #4
 8001508:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800150a:	f7ff fba7 	bl	8000c5c <HAL_GetTick>
 800150e:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001510:	e004      	b.n	800151c <HAL_RCC_OscConfig+0x304>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fba3 	bl	8000c5c <HAL_GetTick>
 8001516:	1bc0      	subs	r0, r0, r7
 8001518:	4540      	cmp	r0, r8
 800151a:	d8ae      	bhi.n	800147a <HAL_RCC_OscConfig+0x262>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151c:	6a33      	ldr	r3, [r6, #32]
 800151e:	0798      	lsls	r0, r3, #30
 8001520:	d4f7      	bmi.n	8001512 <HAL_RCC_OscConfig+0x2fa>
    if (pwrclkchanged == SET)
 8001522:	2d00      	cmp	r5, #0
 8001524:	f43f af4b 	beq.w	80013be <HAL_RCC_OscConfig+0x1a6>
 8001528:	e744      	b.n	80013b4 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_DISABLE();
 800152a:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x3e4>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152c:	4d34      	ldr	r5, [pc, #208]	; (8001600 <HAL_RCC_OscConfig+0x3e8>)
        __HAL_RCC_HSI_DISABLE();
 800152e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001530:	f7ff fb94 	bl	8000c5c <HAL_GetTick>
 8001534:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001536:	e004      	b.n	8001542 <HAL_RCC_OscConfig+0x32a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001538:	f7ff fb90 	bl	8000c5c <HAL_GetTick>
 800153c:	1b80      	subs	r0, r0, r6
 800153e:	2802      	cmp	r0, #2
 8001540:	d89b      	bhi.n	800147a <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	0799      	lsls	r1, r3, #30
 8001546:	d4f7      	bmi.n	8001538 <HAL_RCC_OscConfig+0x320>
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	e6a7      	b.n	800129c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001550:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	e689      	b.n	800127a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001566:	f042 0204 	orr.w	r2, r2, #4
 800156a:	621a      	str	r2, [r3, #32]
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	f042 0201 	orr.w	r2, r2, #1
 8001572:	621a      	str	r2, [r3, #32]
 8001574:	e70d      	b.n	8001392 <HAL_RCC_OscConfig+0x17a>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001576:	2801      	cmp	r0, #1
 8001578:	f43f af4d 	beq.w	8001416 <HAL_RCC_OscConfig+0x1fe>
        pll_config = RCC->CFGR;
 800157c:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	6a22      	ldr	r2, [r4, #32]
 8001580:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001584:	4291      	cmp	r1, r2
 8001586:	f47f af45 	bne.w	8001414 <HAL_RCC_OscConfig+0x1fc>
 800158a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800158c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001590:	1a18      	subs	r0, r3, r0
 8001592:	bf18      	it	ne
 8001594:	2001      	movne	r0, #1
 8001596:	e73e      	b.n	8001416 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_PLL_DISABLE();
 8001598:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800159a:	f7ff fb5f 	bl	8000c5c <HAL_GetTick>
 800159e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a0:	e005      	b.n	80015ae <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb5b 	bl	8000c5c <HAL_GetTick>
 80015a6:	1b80      	subs	r0, r0, r6
 80015a8:	2802      	cmp	r0, #2
 80015aa:	f63f af66 	bhi.w	800147a <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	0199      	lsls	r1, r3, #6
 80015b2:	d4f6      	bmi.n	80015a2 <HAL_RCC_OscConfig+0x38a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015b4:	6a22      	ldr	r2, [r4, #32]
 80015b6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3b0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015bc:	686b      	ldr	r3, [r5, #4]
 80015be:	68a1      	ldr	r1, [r4, #8]
 80015c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015c4:	430b      	orrs	r3, r1
 80015c6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80015c8:	2501      	movs	r5, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_RCC_OscConfig+0x3e8>)
 80015cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	4302      	orrs	r2, r0
 80015d2:	f421 1174 	bic.w	r1, r1, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <HAL_RCC_OscConfig+0x3ec>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80015dc:	6005      	str	r5, [r0, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015de:	461c      	mov	r4, r3
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb3c 	bl	8000c5c <HAL_GetTick>
 80015e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e6:	e005      	b.n	80015f4 <HAL_RCC_OscConfig+0x3dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fb38 	bl	8000c5c <HAL_GetTick>
 80015ec:	1b40      	subs	r0, r0, r5
 80015ee:	2802      	cmp	r0, #2
 80015f0:	f63f af43 	bhi.w	800147a <HAL_RCC_OscConfig+0x262>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	019a      	lsls	r2, r3, #6
 80015f8:	d5f6      	bpl.n	80015e8 <HAL_RCC_OscConfig+0x3d0>
 80015fa:	e6fd      	b.n	80013f8 <HAL_RCC_OscConfig+0x1e0>
 80015fc:	42420000 	.word	0x42420000
 8001600:	40021000 	.word	0x40021000
 8001604:	42420060 	.word	0x42420060

08001608 <HAL_RCC_GetSysClockFreq>:
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001608:	f240 2201 	movw	r2, #513	; 0x201
{
 800160c:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001610:	f10d 0c18 	add.w	ip, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001614:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800161a:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 800161e:	4912      	ldr	r1, [pc, #72]	; (8001668 <HAL_RCC_GetSysClockFreq+0x60>)
 8001620:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001622:	f003 020c 	and.w	r2, r3, #12
 8001626:	2a08      	cmp	r2, #8
 8001628:	d002      	beq.n	8001630 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 800162a:	4810      	ldr	r0, [pc, #64]	; (800166c <HAL_RCC_GetSysClockFreq+0x64>)
}
 800162c:	b006      	add	sp, #24
 800162e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001630:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001634:	4462      	add	r2, ip
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001636:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001638:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800163c:	d404      	bmi.n	8001648 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800163e:	480c      	ldr	r0, [pc, #48]	; (8001670 <HAL_RCC_GetSysClockFreq+0x68>)
 8001640:	fb00 f002 	mul.w	r0, r0, r2
}
 8001644:	b006      	add	sp, #24
 8001646:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001648:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <HAL_RCC_GetSysClockFreq+0x64>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001650:	fb00 f002 	mul.w	r0, r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001654:	4463      	add	r3, ip
 8001656:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800165a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800165e:	b006      	add	sp, #24
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	08004914 	.word	0x08004914
 8001668:	40021000 	.word	0x40021000
 800166c:	007a1200 	.word	0x007a1200
 8001670:	003d0900 	.word	0x003d0900

08001674 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001674:	b178      	cbz	r0, 8001696 <HAL_RCC_ClockConfig+0x22>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001676:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <HAL_RCC_ClockConfig+0x12c>)
 8001678:	6813      	ldr	r3, [r2, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	428b      	cmp	r3, r1
 8001680:	d20b      	bcs.n	800169a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	6813      	ldr	r3, [r2, #0]
 8001684:	f023 0307 	bic.w	r3, r3, #7
 8001688:	430b      	orrs	r3, r1
 800168a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168c:	6813      	ldr	r3, [r2, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	428b      	cmp	r3, r1
 8001694:	d001      	beq.n	800169a <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 8001696:	2001      	movs	r0, #1
}
 8001698:	4770      	bx	lr
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169a:	6803      	ldr	r3, [r0, #0]
{
 800169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a0:	079d      	lsls	r5, r3, #30
 80016a2:	d514      	bpl.n	80016ce <HAL_RCC_ClockConfig+0x5a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	075c      	lsls	r4, r3, #29
 80016a6:	d504      	bpl.n	80016b2 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016a8:	4c3e      	ldr	r4, [pc, #248]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
 80016aa:	6862      	ldr	r2, [r4, #4]
 80016ac:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80016b0:	6062      	str	r2, [r4, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	071a      	lsls	r2, r3, #28
 80016b4:	d504      	bpl.n	80016c0 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b6:	4c3b      	ldr	r4, [pc, #236]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
 80016b8:	6862      	ldr	r2, [r4, #4]
 80016ba:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80016be:	6062      	str	r2, [r4, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4c38      	ldr	r4, [pc, #224]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
 80016c2:	6885      	ldr	r5, [r0, #8]
 80016c4:	6862      	ldr	r2, [r4, #4]
 80016c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80016ca:	432a      	orrs	r2, r5
 80016cc:	6062      	str	r2, [r4, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ce:	07df      	lsls	r7, r3, #31
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	d520      	bpl.n	8001718 <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	6842      	ldr	r2, [r0, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016da:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016dc:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	d056      	beq.n	800178e <HAL_RCC_ClockConfig+0x11a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016e0:	2a02      	cmp	r2, #2
 80016e2:	d059      	beq.n	8001798 <HAL_RCC_ClockConfig+0x124>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	0799      	lsls	r1, r3, #30
 80016e6:	d527      	bpl.n	8001738 <HAL_RCC_ClockConfig+0xc4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016e8:	4e2e      	ldr	r6, [pc, #184]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ea:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ee:	6873      	ldr	r3, [r6, #4]
 80016f0:	f023 0303 	bic.w	r3, r3, #3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80016f8:	f7ff fab0 	bl	8000c5c <HAL_GetTick>
 80016fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016fe:	e004      	b.n	800170a <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001700:	f7ff faac 	bl	8000c5c <HAL_GetTick>
 8001704:	1bc0      	subs	r0, r0, r7
 8001706:	4540      	cmp	r0, r8
 8001708:	d844      	bhi.n	8001794 <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	6873      	ldr	r3, [r6, #4]
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001716:	d1f3      	bne.n	8001700 <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001718:	4a21      	ldr	r2, [pc, #132]	; (80017a0 <HAL_RCC_ClockConfig+0x12c>)
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	42ab      	cmp	r3, r5
 8001722:	d90c      	bls.n	800173e <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001724:	6813      	ldr	r3, [r2, #0]
 8001726:	f023 0307 	bic.w	r3, r3, #7
 800172a:	432b      	orrs	r3, r5
 800172c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172e:	6813      	ldr	r3, [r2, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	42ab      	cmp	r3, r5
 8001736:	d002      	beq.n	800173e <HAL_RCC_ClockConfig+0xca>
    return HAL_ERROR;
 8001738:	2001      	movs	r0, #1
}
 800173a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	075a      	lsls	r2, r3, #29
 8001742:	d506      	bpl.n	8001752 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001744:	4917      	ldr	r1, [pc, #92]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
 8001746:	68e0      	ldr	r0, [r4, #12]
 8001748:	684a      	ldr	r2, [r1, #4]
 800174a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800174e:	4302      	orrs	r2, r0
 8001750:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001752:	071b      	lsls	r3, r3, #28
 8001754:	d412      	bmi.n	800177c <HAL_RCC_ClockConfig+0x108>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001756:	f7ff ff57 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
 800175c:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_RCC_ClockConfig+0x134>)
 800175e:	685b      	ldr	r3, [r3, #4]
  HAL_InitTick(uwTickPrio);
 8001760:	4912      	ldr	r1, [pc, #72]	; (80017ac <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001762:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001766:	5cd3      	ldrb	r3, [r2, r3]
 8001768:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <HAL_RCC_ClockConfig+0x13c>)
 800176a:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick(uwTickPrio);
 800176e:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001770:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8001772:	f7ff fa31 	bl	8000bd8 <HAL_InitTick>
  return HAL_OK;
 8001776:	2000      	movs	r0, #0
}
 8001778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x130>)
 800177e:	6921      	ldr	r1, [r4, #16]
 8001780:	6853      	ldr	r3, [r2, #4]
 8001782:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001786:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800178a:	6053      	str	r3, [r2, #4]
 800178c:	e7e3      	b.n	8001756 <HAL_RCC_ClockConfig+0xe2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	039e      	lsls	r6, r3, #14
 8001790:	d4aa      	bmi.n	80016e8 <HAL_RCC_ClockConfig+0x74>
 8001792:	e7d1      	b.n	8001738 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 8001794:	2003      	movs	r0, #3
 8001796:	e7ef      	b.n	8001778 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001798:	0198      	lsls	r0, r3, #6
 800179a:	d4a5      	bmi.n	80016e8 <HAL_RCC_ClockConfig+0x74>
 800179c:	e7cc      	b.n	8001738 <HAL_RCC_ClockConfig+0xc4>
 800179e:	bf00      	nop
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	080049ac 	.word	0x080049ac
 80017ac:	20000008 	.word	0x20000008
 80017b0:	20000000 	.word	0x20000000

080017b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80017b6:	4905      	ldr	r1, [pc, #20]	; (80017cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80017b8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	6810      	ldr	r0, [r2, #0]
}
 80017c4:	40d8      	lsrs	r0, r3
 80017c6:	4770      	bx	lr
 80017c8:	40021000 	.word	0x40021000
 80017cc:	080049bc 	.word	0x080049bc
 80017d0:	20000000 	.word	0x20000000

080017d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80017d6:	4905      	ldr	r1, [pc, #20]	; (80017ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80017d8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017dc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	6810      	ldr	r0, [r2, #0]
}
 80017e4:	40d8      	lsrs	r0, r3
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000
 80017ec:	080049bc 	.word	0x080049bc
 80017f0:	20000000 	.word	0x20000000

080017f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f8:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017fa:	6800      	ldr	r0, [r0, #0]
{
 80017fc:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017fe:	07c5      	lsls	r5, r0, #31
 8001800:	d52a      	bpl.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	00d1      	lsls	r1, r2, #3
 8001808:	d53d      	bpl.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus       pwrclkchanged = RESET;
 800180c:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	05d2      	lsls	r2, r2, #23
 8001812:	d546      	bpl.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001814:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001816:	6860      	ldr	r0, [r4, #4]
 8001818:	6a0a      	ldr	r2, [r1, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800181a:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800181e:	d00f      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001820:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8001824:	4293      	cmp	r3, r2
 8001826:	d00b      	beq.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001828:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800182a:	2600      	movs	r6, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800182c:	6a0b      	ldr	r3, [r1, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800182e:	4a31      	ldr	r2, [pc, #196]	; (80018f4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001830:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001834:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001836:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001838:	6208      	str	r0, [r1, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800183a:	07d8      	lsls	r0, r3, #31
 800183c:	d445      	bmi.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800183e:	6860      	ldr	r0, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001840:	4a2a      	ldr	r2, [pc, #168]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001842:	6a13      	ldr	r3, [r2, #32]
 8001844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001848:	4303      	orrs	r3, r0
 800184a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800184c:	b11d      	cbz	r5, 8001856 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184e:	69d3      	ldr	r3, [r2, #28]
 8001850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001858:	0783      	lsls	r3, r0, #30
 800185a:	d506      	bpl.n	800186a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800185c:	4a23      	ldr	r2, [pc, #140]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800185e:	68a1      	ldr	r1, [r4, #8]
 8001860:	6853      	ldr	r3, [r2, #4]
 8001862:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001866:	430b      	orrs	r3, r1
 8001868:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800186a:	f010 0010 	ands.w	r0, r0, #16
 800186e:	d007      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001870:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001872:	4a1e      	ldr	r2, [pc, #120]	; (80018ec <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001874:	68e1      	ldr	r1, [r4, #12]
 8001876:	6853      	ldr	r3, [r2, #4]
 8001878:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800187c:	430b      	orrs	r3, r1
 800187e:	6053      	str	r3, [r2, #4]
}
 8001880:	b002      	add	sp, #8
 8001882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8001888:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800188e:	61da      	str	r2, [r3, #28]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	05d2      	lsls	r2, r2, #23
 80018a0:	d4b8      	bmi.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a2:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	461e      	mov	r6, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80018ac:	f7ff f9d6 	bl	8000c5c <HAL_GetTick>
 80018b0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b2:	6833      	ldr	r3, [r6, #0]
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	d4ad      	bmi.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b8:	f7ff f9d0 	bl	8000c5c <HAL_GetTick>
 80018bc:	1bc0      	subs	r0, r0, r7
 80018be:	2864      	cmp	r0, #100	; 0x64
 80018c0:	d9f7      	bls.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80018c2:	2003      	movs	r0, #3
}
 80018c4:	b002      	add	sp, #8
 80018c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ca:	460e      	mov	r6, r1
        tickstart = HAL_GetTick();
 80018cc:	f7ff f9c6 	bl	8000c5c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80018d4:	4680      	mov	r8, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d6:	6a33      	ldr	r3, [r6, #32]
 80018d8:	079a      	lsls	r2, r3, #30
 80018da:	d4b0      	bmi.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018dc:	f7ff f9be 	bl	8000c5c <HAL_GetTick>
 80018e0:	eba0 0008 	sub.w	r0, r0, r8
 80018e4:	42b8      	cmp	r0, r7
 80018e6:	d9f6      	bls.n	80018d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80018e8:	e7eb      	b.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40007000 	.word	0x40007000
 80018f4:	42420440 	.word	0x42420440

080018f8 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80018f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018fc:	4607      	mov	r7, r0
 80018fe:	460d      	mov	r5, r1
 8001900:	4616      	mov	r6, r2
 8001902:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001904:	683c      	ldr	r4, [r7, #0]
 8001906:	e001      	b.n	800190c <SPI_WaitFlagStateUntilTimeout.constprop.6+0x14>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001908:	1c73      	adds	r3, r6, #1
 800190a:	d106      	bne.n	800191a <SPI_WaitFlagStateUntilTimeout.constprop.6+0x22>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800190c:	68a0      	ldr	r0, [r4, #8]
 800190e:	ea35 0300 	bics.w	r3, r5, r0
 8001912:	d0f9      	beq.n	8001908 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x10>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001914:	2000      	movs	r0, #0
}
 8001916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800191a:	f7ff f99f 	bl	8000c5c <HAL_GetTick>
 800191e:	eba0 0008 	sub.w	r0, r0, r8
 8001922:	4286      	cmp	r6, r0
 8001924:	d8ee      	bhi.n	8001904 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001926:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800192a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800192c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001930:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001934:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001936:	d014      	beq.n	8001962 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x6a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800193a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800193e:	d007      	beq.n	8001950 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x58>
        hspi->State = HAL_SPI_STATE_READY;
 8001940:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8001942:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8001944:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001948:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 800194c:	2003      	movs	r0, #3
 800194e:	e7e2      	b.n	8001916 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x1e>
          SPI_RESET_CRC(hspi);
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e7ee      	b.n	8001940 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x48>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001968:	d002      	beq.n	8001970 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800196a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800196e:	d1e3      	bne.n	8001938 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x40>
          __HAL_SPI_DISABLE(hspi);
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	e7de      	b.n	8001938 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x40>
 800197a:	bf00      	nop

0800197c <HAL_SPI_TransmitReceive.part.2>:
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 800197c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001980:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001982:	2001      	movs	r0, #1
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 8001984:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8001986:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
 800198a:	4691      	mov	r9, r2
 800198c:	4698      	mov	r8, r3
 800198e:	460f      	mov	r7, r1
 8001990:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  tickstart = HAL_GetTick();
 8001992:	f7ff f963 	bl	8000c5c <HAL_GetTick>
  tmp_state           = hspi->State;
 8001996:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800199a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 800199c:	b2d2      	uxtb	r2, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800199e:	2a01      	cmp	r2, #1
  tmp_mode            = hspi->Init.Mode;
 80019a0:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80019a2:	d011      	beq.n	80019c8 <HAL_SPI_TransmitReceive.part.2+0x4c>
 80019a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019a8:	d009      	beq.n	80019be <HAL_SPI_TransmitReceive.part.2+0x42>
    errorcode = HAL_BUSY;
 80019aa:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80019ac:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80019ae:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80019b0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80019b4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80019b8:	b003      	add	sp, #12
 80019ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80019be:	68a1      	ldr	r1, [r4, #8]
 80019c0:	2900      	cmp	r1, #0
 80019c2:	d1f2      	bne.n	80019aa <HAL_SPI_TransmitReceive.part.2+0x2e>
 80019c4:	2a04      	cmp	r2, #4
 80019c6:	d1f0      	bne.n	80019aa <HAL_SPI_TransmitReceive.part.2+0x2e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80019c8:	2f00      	cmp	r7, #0
 80019ca:	d064      	beq.n	8001a96 <HAL_SPI_TransmitReceive.part.2+0x11a>
 80019cc:	f1b9 0f00 	cmp.w	r9, #0
 80019d0:	d061      	beq.n	8001a96 <HAL_SPI_TransmitReceive.part.2+0x11a>
 80019d2:	f1b8 0f00 	cmp.w	r8, #0
 80019d6:	d05e      	beq.n	8001a96 <HAL_SPI_TransmitReceive.part.2+0x11a>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019d8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019dc:	6821      	ldr	r1, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80019de:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80019e0:	bf1c      	itt	ne
 80019e2:	2205      	movne	r2, #5
 80019e4:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019e8:	2200      	movs	r2, #0
 80019ea:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80019ec:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80019f0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019f4:	6808      	ldr	r0, [r1, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80019f6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019fa:	0640      	lsls	r0, r0, #25
  hspi->RxXferSize  = Size;
 80019fc:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a00:	6327      	str	r7, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001a02:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxISR       = NULL;
 8001a06:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a0a:	d546      	bpl.n	8001a9a <HAL_SPI_TransmitReceive.part.2+0x11e>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a0c:	68e2      	ldr	r2, [r4, #12]
 8001a0e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001a12:	d05a      	beq.n	8001aca <HAL_SPI_TransmitReceive.part.2+0x14e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d145      	bne.n	8001aa4 <HAL_SPI_TransmitReceive.part.2+0x128>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a18:	783b      	ldrb	r3, [r7, #0]
 8001a1a:	730b      	strb	r3, [r1, #12]
      hspi->TxXferCount--;
 8001a1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a1e:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a20:	3b01      	subs	r3, #1
 8001a22:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a24:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001a26:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a28:	6322      	str	r2, [r4, #48]	; 0x30
        txallowed = 1U;
 8001a2a:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a2c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001a2e:	b292      	uxth	r2, r2
 8001a30:	b91a      	cbnz	r2, 8001a3a <HAL_SPI_TransmitReceive.part.2+0xbe>
 8001a32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d038      	beq.n	8001aac <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001a3a:	6822      	ldr	r2, [r4, #0]
 8001a3c:	6893      	ldr	r3, [r2, #8]
 8001a3e:	0798      	lsls	r0, r3, #30
 8001a40:	d50f      	bpl.n	8001a62 <HAL_SPI_TransmitReceive.part.2+0xe6>
 8001a42:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b163      	cbz	r3, 8001a62 <HAL_SPI_TransmitReceive.part.2+0xe6>
 8001a48:	b15f      	cbz	r7, 8001a62 <HAL_SPI_TransmitReceive.part.2+0xe6>
        txallowed = 0U;
 8001a4a:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001a4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8001a52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001a54:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a56:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8001a58:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	6822      	ldr	r2, [r4, #0]
 8001a5e:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8001a60:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a62:	6893      	ldr	r3, [r2, #8]
 8001a64:	07d9      	lsls	r1, r3, #31
 8001a66:	d50d      	bpl.n	8001a84 <HAL_SPI_TransmitReceive.part.2+0x108>
 8001a68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b153      	cbz	r3, 8001a84 <HAL_SPI_TransmitReceive.part.2+0x108>
        txallowed = 1U;
 8001a6e:	2701      	movs	r7, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a70:	68d2      	ldr	r2, [r2, #12]
 8001a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a74:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001a76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001a78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8001a7e:	443a      	add	r2, r7
        hspi->RxXferCount--;
 8001a80:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8001a82:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001a84:	f7ff f8ea 	bl	8000c5c <HAL_GetTick>
 8001a88:	1b80      	subs	r0, r0, r6
 8001a8a:	4285      	cmp	r5, r0
 8001a8c:	d8ce      	bhi.n	8001a2c <HAL_SPI_TransmitReceive.part.2+0xb0>
 8001a8e:	1c6b      	adds	r3, r5, #1
 8001a90:	d0cc      	beq.n	8001a2c <HAL_SPI_TransmitReceive.part.2+0xb0>
        errorcode = HAL_TIMEOUT;
 8001a92:	2003      	movs	r0, #3
 8001a94:	e78a      	b.n	80019ac <HAL_SPI_TransmitReceive.part.2+0x30>
    errorcode = HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
 8001a98:	e788      	b.n	80019ac <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_ENABLE(hspi);
 8001a9a:	680a      	ldr	r2, [r1, #0]
 8001a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa0:	600a      	str	r2, [r1, #0]
 8001aa2:	e7b3      	b.n	8001a0c <HAL_SPI_TransmitReceive.part.2+0x90>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aa4:	f1b8 0f01 	cmp.w	r8, #1
 8001aa8:	d1bf      	bne.n	8001a2a <HAL_SPI_TransmitReceive.part.2+0xae>
 8001aaa:	e7b5      	b.n	8001a18 <HAL_SPI_TransmitReceive.part.2+0x9c>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001aac:	4633      	mov	r3, r6
 8001aae:	462a      	mov	r2, r5
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff ff20 	bl	80018f8 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d046      	beq.n	8001b4a <HAL_SPI_TransmitReceive.part.2+0x1ce>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001abc:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001abe:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001ac0:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ac6:	6562      	str	r2, [r4, #84]	; 0x54
 8001ac8:	e770      	b.n	80019ac <HAL_SPI_TransmitReceive.part.2+0x30>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d034      	beq.n	8001b38 <HAL_SPI_TransmitReceive.part.2+0x1bc>
 8001ace:	f1b8 0f01 	cmp.w	r8, #1
 8001ad2:	d031      	beq.n	8001b38 <HAL_SPI_TransmitReceive.part.2+0x1bc>
        txallowed = 1U;
 8001ad4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ad6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b91b      	cbnz	r3, 8001ae4 <HAL_SPI_TransmitReceive.part.2+0x168>
 8001adc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0e3      	beq.n	8001aac <HAL_SPI_TransmitReceive.part.2+0x130>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	0791      	lsls	r1, r2, #30
 8001aea:	d50d      	bpl.n	8001b08 <HAL_SPI_TransmitReceive.part.2+0x18c>
 8001aec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001aee:	b292      	uxth	r2, r2
 8001af0:	b152      	cbz	r2, 8001b08 <HAL_SPI_TransmitReceive.part.2+0x18c>
 8001af2:	b14f      	cbz	r7, 8001b08 <HAL_SPI_TransmitReceive.part.2+0x18c>
        txallowed = 0U;
 8001af4:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001af6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001af8:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001afc:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001afe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b00:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001b02:	3a01      	subs	r2, #1
 8001b04:	b292      	uxth	r2, r2
 8001b06:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	07d2      	lsls	r2, r2, #31
 8001b0c:	d50c      	bpl.n	8001b28 <HAL_SPI_TransmitReceive.part.2+0x1ac>
 8001b0e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001b10:	b292      	uxth	r2, r2
 8001b12:	b14a      	cbz	r2, 8001b28 <HAL_SPI_TransmitReceive.part.2+0x1ac>
        txallowed = 1U;
 8001b14:	2701      	movs	r7, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b1a:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8001b1e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b20:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b28:	f7ff f898 	bl	8000c5c <HAL_GetTick>
 8001b2c:	1b80      	subs	r0, r0, r6
 8001b2e:	42a8      	cmp	r0, r5
 8001b30:	d3d1      	bcc.n	8001ad6 <HAL_SPI_TransmitReceive.part.2+0x15a>
 8001b32:	1c6b      	adds	r3, r5, #1
 8001b34:	d0cf      	beq.n	8001ad6 <HAL_SPI_TransmitReceive.part.2+0x15a>
 8001b36:	e7ac      	b.n	8001a92 <HAL_SPI_TransmitReceive.part.2+0x116>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b38:	f837 3b02 	ldrh.w	r3, [r7], #2
 8001b3c:	60cb      	str	r3, [r1, #12]
      hspi->TxXferCount--;
 8001b3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b40:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001b48:	e7c4      	b.n	8001ad4 <HAL_SPI_TransmitReceive.part.2+0x158>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b4a:	68a3      	ldr	r3, [r4, #8]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f af2d 	bne.w	80019ac <HAL_SPI_TransmitReceive.part.2+0x30>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	9001      	str	r0, [sp, #4]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	9b01      	ldr	r3, [sp, #4]
 8001b60:	e724      	b.n	80019ac <HAL_SPI_TransmitReceive.part.2+0x30>
 8001b62:	bf00      	nop

08001b64 <HAL_SPI_Init>:
  if (hspi == NULL)
 8001b64:	2800      	cmp	r0, #0
 8001b66:	d03b      	beq.n	8001be0 <HAL_SPI_Init+0x7c>
{
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6a:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b6c:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
 8001b70:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b72:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b74:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8001b78:	b361      	cbz	r1, 8001bd4 <HAL_SPI_Init+0x70>
 8001b7a:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b7c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b80:	2702      	movs	r7, #2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b82:	2100      	movs	r1, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001b84:	2501      	movs	r5, #1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b86:	68e0      	ldr	r0, [r4, #12]
 8001b88:	4333      	orrs	r3, r6
 8001b8a:	6926      	ldr	r6, [r4, #16]
 8001b8c:	4303      	orrs	r3, r0
 8001b8e:	6960      	ldr	r0, [r4, #20]
 8001b90:	4333      	orrs	r3, r6
 8001b92:	69e6      	ldr	r6, [r4, #28]
 8001b94:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8001b98:	4303      	orrs	r3, r0
 8001b9a:	6a20      	ldr	r0, [r4, #32]
 8001b9c:	4333      	orrs	r3, r6
  __HAL_SPI_DISABLE(hspi);
 8001b9e:	6826      	ldr	r6, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ba0:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ba4:	4303      	orrs	r3, r0
 8001ba6:	f40c 7000 	and.w	r0, ip, #512	; 0x200
 8001baa:	4303      	orrs	r3, r0
  __HAL_SPI_DISABLE(hspi);
 8001bac:	6830      	ldr	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bb2:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8001bb4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bb8:	f00c 0204 	and.w	r2, ip, #4
  __HAL_SPI_DISABLE(hspi);
 8001bbc:	6030      	str	r0, [r6, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bbe:	6033      	str	r3, [r6, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bc0:	6072      	str	r2, [r6, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bc2:	69f3      	ldr	r3, [r6, #28]
  return HAL_OK;
 8001bc4:	4608      	mov	r0, r1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bca:	61f3      	str	r3, [r6, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bcc:	6561      	str	r1, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bce:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8001bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Lock = HAL_UNLOCKED;
 8001bd4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001bd8:	f7fe fdb2 	bl	8000740 <HAL_SPI_MspInit>
 8001bdc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bde:	e7cd      	b.n	8001b7c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001be0:	2001      	movs	r0, #1
}
 8001be2:	4770      	bx	lr

08001be4 <HAL_SPI_Transmit>:
{
 8001be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 8001be8:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 8001bec:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8001bee:	2c01      	cmp	r4, #1
 8001bf0:	d077      	beq.n	8001ce2 <HAL_SPI_Transmit+0xfe>
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	4617      	mov	r7, r2
 8001bfe:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8001c00:	f7ff f82c 	bl	8000c5c <HAL_GetTick>
 8001c04:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c06:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001c0a:	b2c0      	uxtb	r0, r0
 8001c0c:	2801      	cmp	r0, #1
 8001c0e:	d009      	beq.n	8001c24 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8001c10:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001c12:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001c14:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001c16:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c1a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001c1e:	b002      	add	sp, #8
 8001c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8001c24:	f1b8 0f00 	cmp.w	r8, #0
 8001c28:	d0f3      	beq.n	8001c12 <HAL_SPI_Transmit+0x2e>
 8001c2a:	2f00      	cmp	r7, #0
 8001c2c:	d0f1      	beq.n	8001c12 <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c2e:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c30:	2103      	movs	r1, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c32:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c34:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c3c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c3e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c40:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8001c42:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001c46:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c48:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
 8001c4c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001c4e:	86a7      	strh	r7, [r4, #52]	; 0x34
 8001c50:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c52:	d103      	bne.n	8001c5c <HAL_SPI_Transmit+0x78>
    SPI_1LINE_TX(hspi);
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c5a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	0652      	lsls	r2, r2, #25
 8001c60:	d543      	bpl.n	8001cea <HAL_SPI_Transmit+0x106>
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c62:	68e2      	ldr	r2, [r4, #12]
 8001c64:	6861      	ldr	r1, [r4, #4]
 8001c66:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001c6a:	d04f      	beq.n	8001d0c <HAL_SPI_Transmit+0x128>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c6c:	2900      	cmp	r1, #0
 8001c6e:	d141      	bne.n	8001cf4 <HAL_SPI_Transmit+0x110>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c70:	f898 2000 	ldrb.w	r2, [r8]
 8001c74:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001c76:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c78:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c7e:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001c80:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c82:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001c84:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001c86:	b292      	uxth	r2, r2
 8001c88:	b18a      	cbz	r2, 8001cae <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	0792      	lsls	r2, r2, #30
 8001c90:	d533      	bpl.n	8001cfa <HAL_SPI_Transmit+0x116>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001c98:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	b292      	uxth	r2, r2
 8001ca0:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001ca2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ca4:	3101      	adds	r1, #1
    while (hspi->TxXferCount > 0U)
 8001ca6:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ca8:	6321      	str	r1, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001caa:	2a00      	cmp	r2, #0
 8001cac:	d1ed      	bne.n	8001c8a <HAL_SPI_Transmit+0xa6>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001cae:	4633      	mov	r3, r6
 8001cb0:	462a      	mov	r2, r5
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	f7ff fe1f 	bl	80018f8 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001cba:	b120      	cbz	r0, 8001cc6 <HAL_SPI_Transmit+0xe2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cbc:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001cbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc4:	6562      	str	r2, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cc6:	68a3      	ldr	r3, [r4, #8]
 8001cc8:	b933      	cbnz	r3, 8001cd8 <HAL_SPI_Transmit+0xf4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	68d3      	ldr	r3, [r2, #12]
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	6893      	ldr	r3, [r2, #8]
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001cda:	3000      	adds	r0, #0
 8001cdc:	bf18      	it	ne
 8001cde:	2001      	movne	r0, #1
error:
 8001ce0:	e797      	b.n	8001c12 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8001ce2:	2002      	movs	r0, #2
}
 8001ce4:	b002      	add	sp, #8
 8001ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SPI_ENABLE(hspi);
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e7b6      	b.n	8001c62 <HAL_SPI_Transmit+0x7e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf4:	2f01      	cmp	r7, #1
 8001cf6:	d1c5      	bne.n	8001c84 <HAL_SPI_Transmit+0xa0>
 8001cf8:	e7ba      	b.n	8001c70 <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cfa:	f7fe ffaf 	bl	8000c5c <HAL_GetTick>
 8001cfe:	1b80      	subs	r0, r0, r6
 8001d00:	42a8      	cmp	r0, r5
 8001d02:	d3bf      	bcc.n	8001c84 <HAL_SPI_Transmit+0xa0>
 8001d04:	1c6b      	adds	r3, r5, #1
 8001d06:	d0bd      	beq.n	8001c84 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8001d08:	2003      	movs	r0, #3
 8001d0a:	e782      	b.n	8001c12 <HAL_SPI_Transmit+0x2e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d0c:	b311      	cbz	r1, 8001d54 <HAL_SPI_Transmit+0x170>
 8001d0e:	2f01      	cmp	r7, #1
 8001d10:	d020      	beq.n	8001d54 <HAL_SPI_Transmit+0x170>
    while (hspi->TxXferCount > 0U)
 8001d12:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0c9      	beq.n	8001cae <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	0790      	lsls	r0, r2, #30
 8001d20:	d510      	bpl.n	8001d44 <HAL_SPI_Transmit+0x160>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d24:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001d28:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001d2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d2c:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0b8      	beq.n	8001cae <HAL_SPI_Transmit+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d3c:	6823      	ldr	r3, [r4, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	0790      	lsls	r0, r2, #30
 8001d42:	d4ee      	bmi.n	8001d22 <HAL_SPI_Transmit+0x13e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d44:	f7fe ff8a 	bl	8000c5c <HAL_GetTick>
 8001d48:	1b80      	subs	r0, r0, r6
 8001d4a:	42a8      	cmp	r0, r5
 8001d4c:	d3e1      	bcc.n	8001d12 <HAL_SPI_Transmit+0x12e>
 8001d4e:	1c69      	adds	r1, r5, #1
 8001d50:	d0df      	beq.n	8001d12 <HAL_SPI_Transmit+0x12e>
 8001d52:	e7d9      	b.n	8001d08 <HAL_SPI_Transmit+0x124>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d54:	4641      	mov	r1, r8
 8001d56:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001d5a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001d5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d5e:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001d66:	e7d4      	b.n	8001d12 <HAL_SPI_Transmit+0x12e>

08001d68 <HAL_SPI_TransmitReceive>:
{
 8001d68:	b410      	push	{r4}
  __HAL_LOCK(hspi);
 8001d6a:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
 8001d6e:	2c01      	cmp	r4, #1
 8001d70:	d002      	beq.n	8001d78 <HAL_SPI_TransmitReceive+0x10>
}
 8001d72:	bc10      	pop	{r4}
 8001d74:	f7ff be02 	b.w	800197c <HAL_SPI_TransmitReceive.part.2>
 8001d78:	2002      	movs	r0, #2
 8001d7a:	bc10      	pop	{r4}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop

08001d80 <HAL_SPI_GetState>:
  return hspi->State;
 8001d80:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop

08001d88 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d88:	6a02      	ldr	r2, [r0, #32]
{
 8001d8a:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d8c:	f022 0201 	bic.w	r2, r2, #1
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d90:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d92:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8001d94:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001d96:	6847      	ldr	r7, [r0, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001d98:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx = TIMx->CCMR1;
 8001d9c:	6982      	ldr	r2, [r0, #24]
  tmpccer |= OC_Config->OCPolarity;
 8001d9e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001da0:	4d0d      	ldr	r5, [pc, #52]	; (8001dd8 <TIM_OC1_SetConfig+0x50>)
  tmpccmrx |= OC_Config->OCMode;
 8001da2:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001da4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001da8:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8001daa:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dae:	d006      	beq.n	8001dbe <TIM_OC1_SetConfig+0x36>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001db0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001db2:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001db4:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001db6:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8001db8:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8001dba:	6203      	str	r3, [r0, #32]
}
 8001dbc:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8001dbe:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001dc0:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dc4:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dc8:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8001dcc:	4333      	orrs	r3, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dce:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dd4:	4327      	orrs	r7, r4
 8001dd6:	e7eb      	b.n	8001db0 <TIM_OC1_SetConfig+0x28>
 8001dd8:	40012c00 	.word	0x40012c00

08001ddc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ddc:	6a02      	ldr	r2, [r0, #32]
{
 8001dde:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001de4:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001de6:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8001de8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001dea:	6847      	ldr	r7, [r0, #4]
  tmpccer &= ~TIM_CCER_CC3P;
 8001dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 8001df0:	69c2      	ldr	r2, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001df2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001df6:	4d0f      	ldr	r5, [pc, #60]	; (8001e34 <TIM_OC3_SetConfig+0x58>)
  tmpccmrx |= OC_Config->OCMode;
 8001df8:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001dfa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001dfe:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8001e00:	ea42 0204 	orr.w	r2, r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001e04:	d006      	beq.n	8001e14 <TIM_OC3_SetConfig+0x38>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e06:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001e08:	6047      	str	r7, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001e0a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001e0c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8001e0e:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8001e10:	6203      	str	r3, [r0, #32]
}
 8001e12:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e14:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e1a:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e1e:	f427 5740 	bic.w	r7, r7, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e22:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e26:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e2c:	ea47 1704 	orr.w	r7, r7, r4, lsl #4
 8001e30:	e7e9      	b.n	8001e06 <TIM_OC3_SetConfig+0x2a>
 8001e32:	bf00      	nop
 8001e34:	40012c00 	.word	0x40012c00

08001e38 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e38:	6a02      	ldr	r2, [r0, #32]
{
 8001e3a:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e40:	688e      	ldr	r6, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e42:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e44:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001e46:	6845      	ldr	r5, [r0, #4]
  tmpccer &= ~TIM_CCER_CC4P;
 8001e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx = TIMx->CCMR2;
 8001e4c:	69c2      	ldr	r2, [r0, #28]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e4e:	ea43 3306 	orr.w	r3, r3, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e52:	4e0a      	ldr	r6, [pc, #40]	; (8001e7c <TIM_OC4_SetConfig+0x44>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e54:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e56:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e5a:	42b0      	cmp	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e5c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e60:	d104      	bne.n	8001e6c <TIM_OC4_SetConfig+0x34>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e62:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e64:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e68:	ea45 1584 	orr.w	r5, r5, r4, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e6c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001e6e:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001e70:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8001e72:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8001e74:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8001e76:	6203      	str	r3, [r0, #32]
}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00

08001e80 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e80:	6803      	ldr	r3, [r0, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	f042 0201 	orr.w	r2, r2, #1
 8001e88:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e90:	2a06      	cmp	r2, #6
 8001e92:	d003      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
}
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_TIM_OC_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ea0:	2201      	movs	r2, #1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ea2:	6803      	ldr	r3, [r0, #0]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ea4:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ea8:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001eaa:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8001eae:	ea20 0001 	bic.w	r0, r0, r1
 8001eb2:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001eb4:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_TIM_OC_Start+0x40>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001eb8:	4301      	orrs	r1, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eba:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ebc:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ebe:	d00a      	beq.n	8001ed6 <HAL_TIM_OC_Start+0x36>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec6:	2a06      	cmp	r2, #6
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_OC_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
}
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8001ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
 8001ede:	e7ef      	b.n	8001ec0 <HAL_TIM_OC_Start+0x20>
 8001ee0:	40012c00 	.word	0x40012c00

08001ee4 <HAL_TIM_PWM_MspInit>:
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <HAL_TIM_PWM_Start>:
 8001ee8:	f7ff bfda 	b.w	8001ea0 <HAL_TIM_OC_Start>

08001eec <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001eec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d05a      	beq.n	8001faa <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	2202      	movs	r2, #2
{
 8001ef6:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8001ef8:	2501      	movs	r5, #1
  tmpsmcr = htim->Instance->SMCR;
 8001efa:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001efc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001f00:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f02:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f04:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001f08:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8001f0c:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 8001f0e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 8001f12:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f14:	d074      	beq.n	8002000 <HAL_TIM_ConfigClockSource+0x114>
 8001f16:	d94a      	bls.n	8001fae <HAL_TIM_ConfigClockSource+0xc2>
 8001f18:	2c60      	cmp	r4, #96	; 0x60
 8001f1a:	d02d      	beq.n	8001f78 <HAL_TIM_ConfigClockSource+0x8c>
 8001f1c:	d956      	bls.n	8001fcc <HAL_TIM_ConfigClockSource+0xe0>
 8001f1e:	2c70      	cmp	r4, #112	; 0x70
 8001f20:	d01a      	beq.n	8001f58 <HAL_TIM_ConfigClockSource+0x6c>
 8001f22:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8001f26:	d10e      	bne.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f28:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001f2c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001f2e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f30:	432a      	orrs	r2, r5
 8001f32:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f36:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f3a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001f3c:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f44:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	bcf0      	pop	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_READY;
 8001f4a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001f4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001f50:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  return HAL_OK;
 8001f54:	4618      	mov	r0, r3
}
 8001f56:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f58:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8001f5c:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8001f5e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f60:	432a      	orrs	r2, r5
 8001f62:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f66:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f6a:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8001f6c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001f6e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f70:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001f74:	609a      	str	r2, [r3, #8]
      break;
 8001f76:	e7e6      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f78:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f7a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f7c:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f80:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f82:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f84:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f86:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f88:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f90:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f94:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f98:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f9a:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001f9c:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fa2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e7cd      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8001faa:	2002      	movs	r0, #2
}
 8001fac:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001fae:	2c10      	cmp	r4, #16
 8001fb0:	d004      	beq.n	8001fbc <HAL_TIM_ConfigClockSource+0xd0>
 8001fb2:	d93d      	bls.n	8002030 <HAL_TIM_ConfigClockSource+0x144>
 8001fb4:	2c20      	cmp	r4, #32
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_ConfigClockSource+0xd0>
 8001fb8:	2c30      	cmp	r4, #48	; 0x30
 8001fba:	d1c4      	bne.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 8001fbc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fbe:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fc6:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 8001fc8:	609c      	str	r4, [r3, #8]
 8001fca:	e7bc      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8001fcc:	2c50      	cmp	r4, #80	; 0x50
 8001fce:	d1ba      	bne.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8001fd0:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd2:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd4:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fd6:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fda:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fdc:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fde:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fe0:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fe4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fe8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001fec:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ff0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8001ff2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ff4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ff8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	e7a2      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 8002000:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002002:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002004:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002006:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800200a:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800200c:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800200e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002010:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002014:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002018:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800201c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800201e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002020:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8002022:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002028:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	e78a      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002030:	2c00      	cmp	r4, #0
 8002032:	d0c3      	beq.n	8001fbc <HAL_TIM_ConfigClockSource+0xd0>
 8002034:	e787      	b.n	8001f46 <HAL_TIM_ConfigClockSource+0x5a>
 8002036:	bf00      	nop

08002038 <HAL_TIM_PeriodElapsedCallback>:
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop

0800203c <HAL_TIM_OC_DelayElapsedCallback>:
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <HAL_TIM_IC_CaptureCallback>:
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <HAL_TIM_TriggerCallback>:
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop

0800204c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204c:	6803      	ldr	r3, [r0, #0]
{
 800204e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	691a      	ldr	r2, [r3, #16]
{
 8002052:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002054:	0791      	lsls	r1, r2, #30
 8002056:	d502      	bpl.n	800205e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	0792      	lsls	r2, r2, #30
 800205c:	d45f      	bmi.n	800211e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	0750      	lsls	r0, r2, #29
 8002062:	d502      	bpl.n	800206a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	0751      	lsls	r1, r2, #29
 8002068:	d446      	bmi.n	80020f8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	0712      	lsls	r2, r2, #28
 800206e:	d502      	bpl.n	8002076 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	0710      	lsls	r0, r2, #28
 8002074:	d42e      	bmi.n	80020d4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	06d2      	lsls	r2, r2, #27
 800207a:	d502      	bpl.n	8002082 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	06d0      	lsls	r0, r2, #27
 8002080:	d418      	bmi.n	80020b4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	07d1      	lsls	r1, r2, #31
 8002086:	d502      	bpl.n	800208e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	07d2      	lsls	r2, r2, #31
 800208c:	d45d      	bmi.n	800214a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	0610      	lsls	r0, r2, #24
 8002092:	d502      	bpl.n	800209a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	0611      	lsls	r1, r2, #24
 8002098:	d45f      	bmi.n	800215a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	0652      	lsls	r2, r2, #25
 800209e:	d502      	bpl.n	80020a6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	0650      	lsls	r0, r2, #25
 80020a4:	d461      	bmi.n	800216a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	0691      	lsls	r1, r2, #26
 80020aa:	d502      	bpl.n	80020b2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	0692      	lsls	r2, r2, #26
 80020b0:	d443      	bmi.n	800213a <HAL_TIM_IRQHandler+0xee>
}
 80020b2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ba:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020bc:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c6:	d064      	beq.n	8002192 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80020c8:	f7ff ffba 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020cc:	2200      	movs	r2, #0
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	7722      	strb	r2, [r4, #28]
 80020d2:	e7d6      	b.n	8002082 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d4:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020d8:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020da:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020dc:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e0:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e4:	d152      	bne.n	800218c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	f7ff ffa9 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff ffaa 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f0:	2200      	movs	r2, #0
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	7722      	strb	r2, [r4, #28]
 80020f6:	e7be      	b.n	8002076 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020f8:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fc:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020fe:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002102:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002104:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002108:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800210a:	d13c      	bne.n	8002186 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210c:	f7ff ff96 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff ff97 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	2200      	movs	r2, #0
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	7722      	strb	r2, [r4, #28]
 800211c:	e7a5      	b.n	800206a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800211e:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002122:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002124:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002126:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002128:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800212a:	079b      	lsls	r3, r3, #30
 800212c:	d025      	beq.n	800217a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800212e:	f7ff ff87 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	2200      	movs	r2, #0
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	7722      	strb	r2, [r4, #28]
 8002138:	e791      	b.n	800205e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800213a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800213e:	4620      	mov	r0, r4
}
 8002140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002144:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002146:	f000 b96b 	b.w	8002420 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800214a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800214e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002150:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002152:	f7ff ff71 	bl	8002038 <HAL_TIM_PeriodElapsedCallback>
 8002156:	6823      	ldr	r3, [r4, #0]
 8002158:	e799      	b.n	800208e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800215a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800215e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002160:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002162:	f000 f95f 	bl	8002424 <HAL_TIMEx_BreakCallback>
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	e797      	b.n	800209a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800216a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800216e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002170:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002172:	f7ff ff69 	bl	8002048 <HAL_TIM_TriggerCallback>
 8002176:	6823      	ldr	r3, [r4, #0]
 8002178:	e795      	b.n	80020a6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	f7ff ff5f 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff60 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
 8002184:	e7d5      	b.n	8002132 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	f7ff ff5b 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 800218a:	e7c4      	b.n	8002116 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800218c:	f7ff ff58 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8002190:	e7ae      	b.n	80020f0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	f7ff ff53 	bl	800203c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002196:	4620      	mov	r0, r4
 8002198:	f7ff ff54 	bl	8002044 <HAL_TIM_PWM_PulseFinishedCallback>
 800219c:	e796      	b.n	80020cc <HAL_TIM_IRQHandler+0x80>
 800219e:	bf00      	nop

080021a0 <TIM_Base_SetConfig>:
{
 80021a0:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a2:	4e1c      	ldr	r6, [pc, #112]	; (8002214 <TIM_Base_SetConfig+0x74>)
  tmpcr1 = TIMx->CR1;
 80021a4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a6:	42b0      	cmp	r0, r6
 80021a8:	694d      	ldr	r5, [r1, #20]
 80021aa:	688c      	ldr	r4, [r1, #8]
 80021ac:	680a      	ldr	r2, [r1, #0]
 80021ae:	d01d      	beq.n	80021ec <TIM_Base_SetConfig+0x4c>
 80021b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021b4:	d011      	beq.n	80021da <TIM_Base_SetConfig+0x3a>
 80021b6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80021ba:	42b0      	cmp	r0, r6
 80021bc:	d00d      	beq.n	80021da <TIM_Base_SetConfig+0x3a>
 80021be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80021c2:	42b0      	cmp	r0, r6
 80021c4:	d009      	beq.n	80021da <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ca:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80021cc:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80021ce:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021d2:	6282      	str	r2, [r0, #40]	; 0x28
}
 80021d4:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80021d6:	6143      	str	r3, [r0, #20]
}
 80021d8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80021da:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021e0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e8:	430b      	orrs	r3, r1
 80021ea:	e7ec      	b.n	80021c6 <TIM_Base_SetConfig+0x26>
    tmpcr1 |= Structure->CounterMode;
 80021ec:	684e      	ldr	r6, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021f2:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f4:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fa:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002200:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002202:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002206:	6282      	str	r2, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002208:	690b      	ldr	r3, [r1, #16]
}
 800220a:	bc70      	pop	{r4, r5, r6}
    TIMx->RCR = Structure->RepetitionCounter;
 800220c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800220e:	2301      	movs	r3, #1
 8002210:	6143      	str	r3, [r0, #20]
}
 8002212:	4770      	bx	lr
 8002214:	40012c00 	.word	0x40012c00

08002218 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002218:	b1b8      	cbz	r0, 800224a <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800221e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002220:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002224:	4604      	mov	r4, r0
 8002226:	b15b      	cbz	r3, 8002240 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800222a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002230:	1d21      	adds	r1, r4, #4
 8002232:	f7ff ffb5 	bl	80021a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002236:	2301      	movs	r3, #1
  return HAL_OK;
 8002238:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800223a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800223e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002240:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002244:	f7fe fb42 	bl	80008cc <HAL_TIM_Base_MspInit>
 8002248:	e7ee      	b.n	8002228 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800224a:	2001      	movs	r0, #1
}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8002250:	b1b8      	cbz	r0, 8002282 <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002252:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8002256:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002258:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800225c:	4604      	mov	r4, r0
 800225e:	b15b      	cbz	r3, 8002278 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002262:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002268:	1d21      	adds	r1, r4, #4
 800226a:	f7ff ff99 	bl	80021a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800226e:	2301      	movs	r3, #1
  return HAL_OK;
 8002270:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002272:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002276:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002278:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800227c:	f7ff fe32 	bl	8001ee4 <HAL_TIM_PWM_MspInit>
 8002280:	e7ee      	b.n	8002260 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8002282:	2001      	movs	r0, #1
}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002288:	6a02      	ldr	r2, [r0, #32]
{
 800228a:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800228c:	f022 0210 	bic.w	r2, r2, #16
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002290:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002292:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 8002294:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002296:	6847      	ldr	r7, [r0, #4]
  tmpccer &= ~TIM_CCER_CC2P;
 8002298:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx = TIMx->CCMR1;
 800229c:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800229e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022a2:	4d0f      	ldr	r5, [pc, #60]	; (80022e0 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022a4:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022a6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022aa:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022ac:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022b0:	d006      	beq.n	80022c0 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 80022b2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80022b4:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022b6:	6182      	str	r2, [r0, #24]
}
 80022b8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80022ba:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022bc:	6203      	str	r3, [r0, #32]
}
 80022be:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022c0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80022c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022c6:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022ca:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022ce:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022d2:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80022d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022d8:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 80022dc:	e7e9      	b.n	80022b2 <TIM_OC2_SetConfig+0x2a>
 80022de:	bf00      	nop
 80022e0:	40012c00 	.word	0x40012c00

080022e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80022e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d074      	beq.n	80023d8 <HAL_TIM_PWM_ConfigChannel+0xf4>
 80022ee:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80022f2:	2101      	movs	r1, #1
 80022f4:	4604      	mov	r4, r0
 80022f6:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80022fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80022fe:	2a0c      	cmp	r2, #12
 8002300:	d819      	bhi.n	8002336 <HAL_TIM_PWM_ConfigChannel+0x52>
 8002302:	e8df f002 	tbb	[pc, r2]
 8002306:	1807      	.short	0x1807
 8002308:	18381818 	.word	0x18381818
 800230c:	18511818 	.word	0x18511818
 8002310:	1818      	.short	0x1818
 8002312:	1f          	.byte	0x1f
 8002313:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002314:	4629      	mov	r1, r5
 8002316:	6800      	ldr	r0, [r0, #0]
 8002318:	f7ff fd36 	bl	8001d88 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800231c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800231e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002320:	6999      	ldr	r1, [r3, #24]
 8002322:	f041 0108 	orr.w	r1, r1, #8
 8002326:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002328:	6999      	ldr	r1, [r3, #24]
 800232a:	f021 0104 	bic.w	r1, r1, #4
 800232e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	4302      	orrs	r2, r0
 8002334:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002336:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002338:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800233a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800233e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002342:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002344:	4629      	mov	r1, r5
 8002346:	6800      	ldr	r0, [r0, #0]
 8002348:	f7ff fd76 	bl	8001e38 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800234c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800234e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002350:	69d9      	ldr	r1, [r3, #28]
 8002352:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002356:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002358:	69d9      	ldr	r1, [r3, #28]
 800235a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800235e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002360:	69da      	ldr	r2, [r3, #28]
 8002362:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002366:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8002368:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800236a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800236c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8002370:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002374:	e7e5      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002376:	4629      	mov	r1, r5
 8002378:	6800      	ldr	r0, [r0, #0]
 800237a:	f7ff ff85 	bl	8002288 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800237e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002380:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002382:	6999      	ldr	r1, [r3, #24]
 8002384:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8002388:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800238a:	6999      	ldr	r1, [r3, #24]
 800238c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002390:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002398:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800239a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800239c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800239e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80023a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80023a6:	e7cc      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023a8:	4629      	mov	r1, r5
 80023aa:	6800      	ldr	r0, [r0, #0]
 80023ac:	f7ff fd16 	bl	8001ddc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023b0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023b2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023b4:	69d9      	ldr	r1, [r3, #28]
 80023b6:	f041 0108 	orr.w	r1, r1, #8
 80023ba:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023bc:	69d9      	ldr	r1, [r3, #28]
 80023be:	f021 0104 	bic.w	r1, r1, #4
 80023c2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	4302      	orrs	r2, r0
 80023c8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80023ca:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80023d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80023d6:	e7b4      	b.n	8002342 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80023d8:	2002      	movs	r0, #2
}
 80023da:	bd38      	pop	{r3, r4, r5, pc}

080023dc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023dc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80023e0:	2a01      	cmp	r2, #1
 80023e2:	d01a      	beq.n	800241a <HAL_TIMEx_MasterConfigSynchronization+0x3e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	2202      	movs	r2, #2
{
 80023e6:	b4f0      	push	{r4, r5, r6, r7}
 80023e8:	4603      	mov	r3, r0
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80023ea:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_READY;
 80023ec:	2601      	movs	r6, #1
  tmpcr2 = htim->Instance->CR2;
 80023ee:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80023f4:	6860      	ldr	r0, [r4, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023f6:	e9d1 2700 	ldrd	r2, r7, [r1]
  tmpcr2 &= ~TIM_CR2_MMS;
 80023fa:	f020 0170 	bic.w	r1, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023fe:	4311      	orrs	r1, r2
  tmpsmcr = htim->Instance->SMCR;
 8002400:	68a2      	ldr	r2, [r4, #8]

  return HAL_OK;
 8002402:	4628      	mov	r0, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002408:	433a      	orrs	r2, r7
  htim->Instance->CR2 = tmpcr2;
 800240a:	6061      	str	r1, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800240c:	60a2      	str	r2, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 800240e:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002412:	f883 503c 	strb.w	r5, [r3, #60]	; 0x3c
}
 8002416:	bcf0      	pop	{r4, r5, r6, r7}
 8002418:	4770      	bx	lr
  __HAL_LOCK(htim);
 800241a:	2002      	movs	r0, #2
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop

08002420 <HAL_TIMEx_CommutCallback>:
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <HAL_TIMEx_BreakCallback>:
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop

08002428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002428:	b538      	push	{r3, r4, r5, lr}
 800242a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800242c:	6803      	ldr	r3, [r0, #0]
 800242e:	68c0      	ldr	r0, [r0, #12]
 8002430:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002432:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002434:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002438:	4301      	orrs	r1, r0
 800243a:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800243c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800243e:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002442:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002446:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8002448:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800244c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800244e:	430a      	orrs	r2, r1
 8002450:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	69a0      	ldr	r0, [r4, #24]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002456:	4912      	ldr	r1, [pc, #72]	; (80024a0 <UART_SetConfig+0x78>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002458:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800245c:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 800245e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002460:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8002462:	d01a      	beq.n	800249a <UART_SetConfig+0x72>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002464:	f7ff f9a6 	bl	80017b4 <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002468:	6863      	ldr	r3, [r4, #4]
 800246a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002474:	fbb0 f0f3 	udiv	r0, r0, r3
 8002478:	2364      	movs	r3, #100	; 0x64
 800247a:	490a      	ldr	r1, [pc, #40]	; (80024a4 <UART_SetConfig+0x7c>)
 800247c:	6824      	ldr	r4, [r4, #0]
 800247e:	fba1 5200 	umull	r5, r2, r1, r0
 8002482:	0952      	lsrs	r2, r2, #5
 8002484:	fb03 0312 	mls	r3, r3, r2, r0
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	3332      	adds	r3, #50	; 0x32
 800248c:	fba1 1303 	umull	r1, r3, r1, r3
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8002496:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002498:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800249a:	f7ff f99b 	bl	80017d4 <HAL_RCC_GetPCLK2Freq>
 800249e:	e7e3      	b.n	8002468 <UART_SetConfig+0x40>
 80024a0:	40013800 	.word	0x40013800
 80024a4:	51eb851f 	.word	0x51eb851f

080024a8 <HAL_UART_Init>:
  if (huart == NULL)
 80024a8:	b360      	cbz	r0, 8002504 <HAL_UART_Init+0x5c>
{
 80024aa:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80024ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024b0:	4604      	mov	r4, r0
 80024b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024b6:	b303      	cbz	r3, 80024fa <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80024b8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80024ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024c0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80024c2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80024c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024ca:	f7ff ffad 	bl	8002428 <UART_SetConfig>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ce:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80024d0:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d2:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 80024d4:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024e4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024ec:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ee:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80024f0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80024f4:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80024f8:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80024fa:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024fe:	f7fe fa5b 	bl	80009b8 <HAL_UART_MspInit>
 8002502:	e7d9      	b.n	80024b8 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8002504:	2001      	movs	r0, #1
}
 8002506:	4770      	bx	lr

08002508 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002508:	b084      	sub	sp, #16
 800250a:	a801      	add	r0, sp, #4
 800250c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002510:	b004      	add	sp, #16
 8002512:	2000      	movs	r0, #0
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002518:	f244 03ff 	movw	r3, #16639	; 0x40ff
{
 800251c:	4602      	mov	r2, r0
  USBx->CNTR &= ~winterruptmask;
 800251e:	f8b0 1040 	ldrh.w	r1, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002522:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 8002524:	400b      	ands	r3, r1
 8002526:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
 800252a:	4770      	bx	lr

0800252c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800252c:	2000      	movs	r0, #0
 800252e:	4770      	bx	lr

08002530 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002530:	b084      	sub	sp, #16
 8002532:	b470      	push	{r4, r5, r6}
 8002534:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002536:	2501      	movs	r5, #1

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002538:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 800253a:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 800253e:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002542:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002546:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800254a:	f8b4 6040 	ldrh.w	r6, [r4, #64]	; 0x40
{
 800254e:	ad04      	add	r5, sp, #16
  USBx->CNTR |= winterruptmask;
 8002550:	f446 463f 	orr.w	r6, r6, #48896	; 0xbf00
 8002554:	f8a4 6040 	strh.w	r6, [r4, #64]	; 0x40
{
 8002558:	e885 000e 	stmia.w	r5, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800255c:	bc70      	pop	{r4, r5, r6}
 800255e:	b004      	add	sp, #16
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <USB_DevDisconnect>:
 8002564:	2000      	movs	r0, #0
 8002566:	4770      	bx	lr

08002568 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002568:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800256a:	4903      	ldr	r1, [pc, #12]	; (8002578 <MX_FATFS_Init+0x10>)
 800256c:	4803      	ldr	r0, [pc, #12]	; (800257c <MX_FATFS_Init+0x14>)
 800256e:	f002 f93f 	bl	80047f0 <FATFS_LinkDriver>
 8002572:	4b03      	ldr	r3, [pc, #12]	; (8002580 <MX_FATFS_Init+0x18>)
 8002574:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002576:	bd08      	pop	{r3, pc}
 8002578:	200017f8 	.word	0x200017f8
 800257c:	20000010 	.word	0x20000010
 8002580:	200017fc 	.word	0x200017fc

08002584 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8002584:	2000      	movs	r0, #0
 8002586:	4770      	bx	lr

08002588 <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8002588:	b510      	push	{r4, lr}
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800258a:	4c09      	ldr	r4, [pc, #36]	; (80025b0 <SPI_TxByte+0x28>)
{
 800258c:	b082      	sub	sp, #8
 800258e:	f88d 0007 	strb.w	r0, [sp, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002592:	4620      	mov	r0, r4
 8002594:	f7ff fbf4 	bl	8001d80 <HAL_SPI_GetState>
 8002598:	2801      	cmp	r0, #1
 800259a:	d1fa      	bne.n	8002592 <SPI_TxByte+0xa>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800259c:	4602      	mov	r2, r0
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	f10d 0107 	add.w	r1, sp, #7
 80025a6:	4802      	ldr	r0, [pc, #8]	; (80025b0 <SPI_TxByte+0x28>)
 80025a8:	f7ff fb1c 	bl	8001be4 <HAL_SPI_Transmit>
}
 80025ac:	b002      	add	sp, #8
 80025ae:	bd10      	pop	{r4, pc}
 80025b0:	200013a8 	.word	0x200013a8

080025b4 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
  uint8_t dummy, data;
  dummy = 0xFF;
 80025b4:	22ff      	movs	r2, #255	; 0xff
  data = 0;
 80025b6:	2300      	movs	r3, #0
{
 80025b8:	b510      	push	{r4, lr}
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80025ba:	4c0d      	ldr	r4, [pc, #52]	; (80025f0 <SPI_RxByte+0x3c>)
{
 80025bc:	b084      	sub	sp, #16
  dummy = 0xFF;
 80025be:	f88d 200e 	strb.w	r2, [sp, #14]
  data = 0;
 80025c2:	f88d 300f 	strb.w	r3, [sp, #15]
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80025c6:	4620      	mov	r0, r4
 80025c8:	f7ff fbda 	bl	8001d80 <HAL_SPI_GetState>
 80025cc:	2801      	cmp	r0, #1
 80025ce:	d1fa      	bne.n	80025c6 <SPI_RxByte+0x12>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80025d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025d4:	4603      	mov	r3, r0
 80025d6:	9200      	str	r2, [sp, #0]
 80025d8:	f10d 010e 	add.w	r1, sp, #14
 80025dc:	f10d 020f 	add.w	r2, sp, #15
 80025e0:	4803      	ldr	r0, [pc, #12]	; (80025f0 <SPI_RxByte+0x3c>)
 80025e2:	f7ff fbc1 	bl	8001d68 <HAL_SPI_TransmitReceive>
  
  return data;
}
 80025e6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80025ea:	b004      	add	sp, #16
 80025ec:	bd10      	pop	{r4, pc}
 80025ee:	bf00      	nop
 80025f0:	200013a8 	.word	0x200013a8

080025f4 <SD_PowerOn>:
  return res;
}

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 80025f4:	b530      	push	{r4, r5, lr}
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
{
 80025f8:	b083      	sub	sp, #12
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	481a      	ldr	r0, [pc, #104]	; (8002668 <SD_PowerOn+0x74>)
 80025fe:	f7fe fd77 	bl	80010f0 <HAL_GPIO_WritePin>
 8002602:	240a      	movs	r4, #10
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
  
  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 8002604:	20ff      	movs	r0, #255	; 0xff
 8002606:	f7ff ffbf 	bl	8002588 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800260a:	3c01      	subs	r4, #1
 800260c:	d1fa      	bne.n	8002604 <SD_PowerOn+0x10>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800260e:	4622      	mov	r2, r4
 8002610:	4815      	ldr	r0, [pc, #84]	; (8002668 <SD_PowerOn+0x74>)
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	f7fe fd6c 	bl	80010f0 <HAL_GPIO_WritePin>
  
  /* SPI Chips Select */
  SELECT();
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8002618:	2340      	movs	r3, #64	; 0x40
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
 800261a:	f44f 4215 	mov.w	r2, #38144	; 0x9500
 800261e:	4618      	mov	r0, r3
  cmd_arg[0] = (CMD0 | 0x40);
 8002620:	9300      	str	r3, [sp, #0]
  cmd_arg[3] = 0;
 8002622:	f8ad 2004 	strh.w	r2, [sp, #4]
 8002626:	466c      	mov	r4, sp
 8002628:	f10d 0505 	add.w	r5, sp, #5
 800262c:	e001      	b.n	8002632 <SD_PowerOn+0x3e>
 800262e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  cmd_arg[5] = 0x95;
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 8002632:	f7ff ffa9 	bl	8002588 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002636:	42ac      	cmp	r4, r5
 8002638:	d1f9      	bne.n	800262e <SD_PowerOn+0x3a>
 800263a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 800263e:	e001      	b.n	8002644 <SD_PowerOn+0x50>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8002640:	3c01      	subs	r4, #1
 8002642:	d003      	beq.n	800264c <SD_PowerOn+0x58>
 8002644:	f7ff ffb6 	bl	80025b4 <SPI_RxByte>
 8002648:	2801      	cmp	r0, #1
 800264a:	d1f9      	bne.n	8002640 <SD_PowerOn+0x4c>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800264c:	2201      	movs	r2, #1
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	4805      	ldr	r0, [pc, #20]	; (8002668 <SD_PowerOn+0x74>)
 8002652:	f7fe fd4d 	bl	80010f0 <HAL_GPIO_WritePin>
  {
    Count--;
  }
  
  DESELECT();
  SPI_TxByte(0XFF);
 8002656:	20ff      	movs	r0, #255	; 0xff
 8002658:	f7ff ff96 	bl	8002588 <SPI_TxByte>
  
  PowerFlag = 1;
 800265c:	2201      	movs	r2, #1
 800265e:	4b03      	ldr	r3, [pc, #12]	; (800266c <SD_PowerOn+0x78>)
 8002660:	701a      	strb	r2, [r3, #0]
}
 8002662:	b003      	add	sp, #12
 8002664:	bd30      	pop	{r4, r5, pc}
 8002666:	bf00      	nop
 8002668:	40010c00 	.word	0x40010c00
 800266c:	20000044 	.word	0x20000044

08002670 <SD_ReadyWait>:
  Timer2 = 50;
 8002670:	2332      	movs	r3, #50	; 0x32
{
 8002672:	b510      	push	{r4, lr}
  Timer2 = 50;
 8002674:	4c05      	ldr	r4, [pc, #20]	; (800268c <SD_ReadyWait+0x1c>)
 8002676:	7023      	strb	r3, [r4, #0]
  SPI_RxByte();
 8002678:	f7ff ff9c 	bl	80025b4 <SPI_RxByte>
 800267c:	e001      	b.n	8002682 <SD_ReadyWait+0x12>
  } while ((res != 0xFF) && Timer2);
 800267e:	7823      	ldrb	r3, [r4, #0]
 8002680:	b11b      	cbz	r3, 800268a <SD_ReadyWait+0x1a>
    res = SPI_RxByte();
 8002682:	f7ff ff97 	bl	80025b4 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 8002686:	28ff      	cmp	r0, #255	; 0xff
 8002688:	d1f9      	bne.n	800267e <SD_ReadyWait+0xe>
}
 800268a:	bd10      	pop	{r4, pc}
 800268c:	200017f0 	.word	0x200017f0

08002690 <SD_TxDataBlock>:
}

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4605      	mov	r5, r0
 8002694:	460c      	mov	r4, r1
  uint8_t resp, wc;
  uint8_t i = 0;
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002696:	f7ff ffeb 	bl	8002670 <SD_ReadyWait>
 800269a:	28ff      	cmp	r0, #255	; 0xff
 800269c:	d001      	beq.n	80026a2 <SD_TxDataBlock+0x12>
    return FALSE;
 800269e:	2000      	movs	r0, #0
  
  if ((resp & 0x1F) == 0x05)
    return TRUE;
  else
    return FALSE;
}
 80026a0:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(token);      
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7ff ff70 	bl	8002588 <SPI_TxByte>
  if (token != 0xFD) 
 80026a8:	2cfd      	cmp	r4, #253	; 0xfd
 80026aa:	d028      	beq.n	80026fe <SD_TxDataBlock+0x6e>
 80026ac:	1cac      	adds	r4, r5, #2
 80026ae:	f205 2502 	addw	r5, r5, #514	; 0x202
      SPI_TxByte(*buff++);
 80026b2:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 80026b6:	f7ff ff67 	bl	8002588 <SPI_TxByte>
 80026ba:	3402      	adds	r4, #2
      SPI_TxByte(*buff++);
 80026bc:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 80026c0:	f7ff ff62 	bl	8002588 <SPI_TxByte>
    } while (--wc);
 80026c4:	42ac      	cmp	r4, r5
 80026c6:	d1f4      	bne.n	80026b2 <SD_TxDataBlock+0x22>
    SPI_RxByte();       /* CRC 무시 */
 80026c8:	f7ff ff74 	bl	80025b4 <SPI_RxByte>
    SPI_RxByte();
 80026cc:	2441      	movs	r4, #65	; 0x41
 80026ce:	f7ff ff71 	bl	80025b4 <SPI_RxByte>
 80026d2:	e002      	b.n	80026da <SD_TxDataBlock+0x4a>
    while (i <= 64) 
 80026d4:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80026d8:	d007      	beq.n	80026ea <SD_TxDataBlock+0x5a>
      resp = SPI_RxByte();
 80026da:	f7ff ff6b 	bl	80025b4 <SPI_RxByte>
 80026de:	f000 051f 	and.w	r5, r0, #31
      if ((resp & 0x1F) == 0x05) 
 80026e2:	2d05      	cmp	r5, #5
 80026e4:	f104 33ff 	add.w	r3, r4, #4294967295
 80026e8:	d1f4      	bne.n	80026d4 <SD_TxDataBlock+0x44>
    while (SPI_RxByte() == 0);
 80026ea:	f7ff ff63 	bl	80025b4 <SPI_RxByte>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d0fb      	beq.n	80026ea <SD_TxDataBlock+0x5a>
    return FALSE;
 80026f2:	f1a5 0005 	sub.w	r0, r5, #5
 80026f6:	fab0 f080 	clz	r0, r0
 80026fa:	0940      	lsrs	r0, r0, #5
}
 80026fc:	bd38      	pop	{r3, r4, r5, pc}
 80026fe:	2500      	movs	r5, #0
 8002700:	e7f7      	b.n	80026f2 <SD_TxDataBlock+0x62>
 8002702:	bf00      	nop

08002704 <SD_SendCmd.part.0>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	460c      	mov	r4, r1
 8002708:	4605      	mov	r5, r0
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
    return 0xFF;
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800270a:	f7ff ff3d 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800270e:	0e20      	lsrs	r0, r4, #24
 8002710:	f7ff ff3a 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002714:	f3c4 4007 	ubfx	r0, r4, #16, #8
 8002718:	f7ff ff36 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800271c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002720:	f7ff ff32 	bl	8002588 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002724:	b2e0      	uxtb	r0, r4
 8002726:	f7ff ff2f 	bl	8002588 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
  if (cmd == CMD0)
 800272a:	2d40      	cmp	r5, #64	; 0x40
 800272c:	d017      	beq.n	800275e <SD_SendCmd.part.0+0x5a>
    crc = 0x95; /* CRC for CMD0(0) */
  
  if (cmd == CMD8)
 800272e:	2d48      	cmp	r5, #72	; 0x48
 8002730:	d10d      	bne.n	800274e <SD_SendCmd.part.0+0x4a>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002732:	2087      	movs	r0, #135	; 0x87
 8002734:	f7ff ff28 	bl	8002588 <SPI_TxByte>
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
 8002738:	240a      	movs	r4, #10
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
  do
  {
    res = SPI_RxByte();
 800273a:	f7ff ff3b 	bl	80025b4 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 800273e:	0602      	lsls	r2, r0, #24
 8002740:	f104 33ff 	add.w	r3, r4, #4294967295
 8002744:	d502      	bpl.n	800274c <SD_SendCmd.part.0+0x48>
 8002746:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800274a:	d1f6      	bne.n	800273a <SD_SendCmd.part.0+0x36>
  
  return res;
}
 800274c:	bd38      	pop	{r3, r4, r5, pc}
  SPI_TxByte(crc);
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff ff1a 	bl	8002588 <SPI_TxByte>
  if (cmd == CMD12)
 8002754:	2d4c      	cmp	r5, #76	; 0x4c
 8002756:	d1ef      	bne.n	8002738 <SD_SendCmd.part.0+0x34>
    SPI_RxByte();
 8002758:	f7ff ff2c 	bl	80025b4 <SPI_RxByte>
 800275c:	e7ec      	b.n	8002738 <SD_SendCmd.part.0+0x34>
  SPI_TxByte(crc);
 800275e:	2095      	movs	r0, #149	; 0x95
 8002760:	f7ff ff12 	bl	8002588 <SPI_TxByte>
 8002764:	e7e8      	b.n	8002738 <SD_SendCmd.part.0+0x34>
 8002766:	bf00      	nop

08002768 <SD_SendCmd>:
{
 8002768:	b538      	push	{r3, r4, r5, lr}
 800276a:	4604      	mov	r4, r0
 800276c:	460d      	mov	r5, r1
  if (SD_ReadyWait() != 0xFF)
 800276e:	f7ff ff7f 	bl	8002670 <SD_ReadyWait>
 8002772:	28ff      	cmp	r0, #255	; 0xff
 8002774:	d001      	beq.n	800277a <SD_SendCmd+0x12>
}
 8002776:	20ff      	movs	r0, #255	; 0xff
 8002778:	bd38      	pop	{r3, r4, r5, pc}
 800277a:	4629      	mov	r1, r5
 800277c:	4620      	mov	r0, r4
 800277e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002782:	f7ff bfbf 	b.w	8002704 <SD_SendCmd.part.0>
 8002786:	bf00      	nop

08002788 <SD_RxDataBlock>:
  Timer1 = 10;
 8002788:	230a      	movs	r3, #10
{
 800278a:	b570      	push	{r4, r5, r6, lr}
  Timer1 = 10;
 800278c:	4e11      	ldr	r6, [pc, #68]	; (80027d4 <SD_RxDataBlock+0x4c>)
{
 800278e:	4604      	mov	r4, r0
 8002790:	460d      	mov	r5, r1
  Timer1 = 10;
 8002792:	7033      	strb	r3, [r6, #0]
 8002794:	e003      	b.n	800279e <SD_RxDataBlock+0x16>
  } while((token == 0xFF) && Timer1);
 8002796:	7833      	ldrb	r3, [r6, #0]
 8002798:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800279c:	b1bb      	cbz	r3, 80027ce <SD_RxDataBlock+0x46>
    token = SPI_RxByte();
 800279e:	f7ff ff09 	bl	80025b4 <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 80027a2:	28ff      	cmp	r0, #255	; 0xff
 80027a4:	d0f7      	beq.n	8002796 <SD_RxDataBlock+0xe>
  if(token != 0xFE)
 80027a6:	28fe      	cmp	r0, #254	; 0xfe
 80027a8:	d112      	bne.n	80027d0 <SD_RxDataBlock+0x48>
 80027aa:	3402      	adds	r4, #2
  *buff = SPI_RxByte();
 80027ac:	f7ff ff02 	bl	80025b4 <SPI_RxByte>
 80027b0:	f804 0c02 	strb.w	r0, [r4, #-2]
 80027b4:	f7ff fefe 	bl	80025b4 <SPI_RxByte>
  } while(btr -= 2);
 80027b8:	3d02      	subs	r5, #2
  *buff = SPI_RxByte();
 80027ba:	f804 0c01 	strb.w	r0, [r4, #-1]
 80027be:	f104 0402 	add.w	r4, r4, #2
  } while(btr -= 2);
 80027c2:	d1f3      	bne.n	80027ac <SD_RxDataBlock+0x24>
  SPI_RxByte(); /* CRC 무시 */
 80027c4:	f7ff fef6 	bl	80025b4 <SPI_RxByte>
  SPI_RxByte();
 80027c8:	f7ff fef4 	bl	80025b4 <SPI_RxByte>
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 80027d0:	2000      	movs	r0, #0
}
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	200017f1 	.word	0x200017f1

080027d8 <SD_disk_initialize>:
DSTATUS SD_disk_initialize(BYTE drv) 
{
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80027d8:	b960      	cbnz	r0, 80027f4 <SD_disk_initialize+0x1c>
{
 80027da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return STA_NOINIT;  
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80027de:	4d75      	ldr	r5, [pc, #468]	; (80029b4 <SD_disk_initialize+0x1dc>)
{
 80027e0:	b082      	sub	sp, #8
  if(Stat & STA_NODISK)
 80027e2:	782a      	ldrb	r2, [r5, #0]
 80027e4:	f012 0402 	ands.w	r4, r2, #2
 80027e8:	d006      	beq.n	80027f8 <SD_disk_initialize+0x20>
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 80027ea:	7828      	ldrb	r0, [r5, #0]
 80027ec:	b2c0      	uxtb	r0, r0
}
 80027ee:	b002      	add	sp, #8
 80027f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return STA_NOINIT;  
 80027f4:	2001      	movs	r0, #1
}
 80027f6:	4770      	bx	lr
  SD_PowerOn();         
 80027f8:	f7ff fefc 	bl	80025f4 <SD_PowerOn>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80027fc:	4622      	mov	r2, r4
 80027fe:	2180      	movs	r1, #128	; 0x80
 8002800:	486d      	ldr	r0, [pc, #436]	; (80029b8 <SD_disk_initialize+0x1e0>)
 8002802:	f7fe fc75 	bl	80010f0 <HAL_GPIO_WritePin>
  if (SD_ReadyWait() != 0xFF)
 8002806:	f7ff ff33 	bl	8002670 <SD_ReadyWait>
 800280a:	28ff      	cmp	r0, #255	; 0xff
 800280c:	d010      	beq.n	8002830 <SD_disk_initialize+0x58>
  CardType = type;
 800280e:	2400      	movs	r4, #0
 8002810:	4b6a      	ldr	r3, [pc, #424]	; (80029bc <SD_disk_initialize+0x1e4>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002812:	2201      	movs	r2, #1
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	4868      	ldr	r0, [pc, #416]	; (80029b8 <SD_disk_initialize+0x1e0>)
  CardType = type;
 8002818:	701c      	strb	r4, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800281a:	f7fe fc69 	bl	80010f0 <HAL_GPIO_WritePin>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800281e:	f7ff fec9 	bl	80025b4 <SPI_RxByte>
  return Stat;
 8002822:	7828      	ldrb	r0, [r5, #0]
  PowerFlag = 0;
 8002824:	4b66      	ldr	r3, [pc, #408]	; (80029c0 <SD_disk_initialize+0x1e8>)
  return Stat;
 8002826:	b2c0      	uxtb	r0, r0
  PowerFlag = 0;
 8002828:	701c      	strb	r4, [r3, #0]
}
 800282a:	b002      	add	sp, #8
 800282c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002830:	4621      	mov	r1, r4
 8002832:	2040      	movs	r0, #64	; 0x40
 8002834:	f7ff ff66 	bl	8002704 <SD_SendCmd.part.0>
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002838:	2801      	cmp	r0, #1
 800283a:	d1e8      	bne.n	800280e <SD_disk_initialize+0x36>
    Timer1 = 100;
 800283c:	2364      	movs	r3, #100	; 0x64
 800283e:	4c61      	ldr	r4, [pc, #388]	; (80029c4 <SD_disk_initialize+0x1ec>)
 8002840:	7023      	strb	r3, [r4, #0]
  if (SD_ReadyWait() != 0xFF)
 8002842:	f7ff ff15 	bl	8002670 <SD_ReadyWait>
 8002846:	28ff      	cmp	r0, #255	; 0xff
 8002848:	d045      	beq.n	80028d6 <SD_disk_initialize+0xfe>
 800284a:	f7ff ff11 	bl	8002670 <SD_ReadyWait>
 800284e:	28ff      	cmp	r0, #255	; 0xff
 8002850:	f000 809a 	beq.w	8002988 <SD_disk_initialize+0x1b0>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002854:	2601      	movs	r6, #1
 8002856:	e005      	b.n	8002864 <SD_disk_initialize+0x8c>
  if (SD_ReadyWait() != 0xFF)
 8002858:	f7ff ff0a 	bl	8002670 <SD_ReadyWait>
 800285c:	28ff      	cmp	r0, #255	; 0xff
 800285e:	d033      	beq.n	80028c8 <SD_disk_initialize+0xf0>
      } while (Timer1);
 8002860:	7823      	ldrb	r3, [r4, #0]
 8002862:	b1ab      	cbz	r3, 8002890 <SD_disk_initialize+0xb8>
        if (type == 2) 
 8002864:	2e02      	cmp	r6, #2
 8002866:	d1f7      	bne.n	8002858 <SD_disk_initialize+0x80>
  if (SD_ReadyWait() != 0xFF)
 8002868:	f7ff ff02 	bl	8002670 <SD_ReadyWait>
 800286c:	28ff      	cmp	r0, #255	; 0xff
 800286e:	d1f7      	bne.n	8002860 <SD_disk_initialize+0x88>
 8002870:	2100      	movs	r1, #0
 8002872:	2077      	movs	r0, #119	; 0x77
 8002874:	f7ff ff46 	bl	8002704 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002878:	2801      	cmp	r0, #1
 800287a:	d8f1      	bhi.n	8002860 <SD_disk_initialize+0x88>
  if (SD_ReadyWait() != 0xFF)
 800287c:	f7ff fef8 	bl	8002670 <SD_ReadyWait>
 8002880:	28ff      	cmp	r0, #255	; 0xff
 8002882:	d1ed      	bne.n	8002860 <SD_disk_initialize+0x88>
 8002884:	2100      	movs	r1, #0
 8002886:	2069      	movs	r0, #105	; 0x69
 8002888:	f7ff ff3c 	bl	8002704 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800288c:	2800      	cmp	r0, #0
 800288e:	d1e7      	bne.n	8002860 <SD_disk_initialize+0x88>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002890:	7823      	ldrb	r3, [r4, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0bb      	beq.n	800280e <SD_disk_initialize+0x36>
  if (SD_ReadyWait() != 0xFF)
 8002896:	f7ff feeb 	bl	8002670 <SD_ReadyWait>
 800289a:	28ff      	cmp	r0, #255	; 0xff
 800289c:	d1b7      	bne.n	800280e <SD_disk_initialize+0x36>
 800289e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028a2:	2050      	movs	r0, #80	; 0x50
 80028a4:	f7ff ff2e 	bl	8002704 <SD_SendCmd.part.0>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d1b0      	bne.n	800280e <SD_disk_initialize+0x36>
  CardType = type;
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <SD_disk_initialize+0x1e4>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80028ae:	2201      	movs	r2, #1
 80028b0:	2180      	movs	r1, #128	; 0x80
 80028b2:	4841      	ldr	r0, [pc, #260]	; (80029b8 <SD_disk_initialize+0x1e0>)
  CardType = type;
 80028b4:	701e      	strb	r6, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80028b6:	f7fe fc1b 	bl	80010f0 <HAL_GPIO_WritePin>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80028ba:	f7ff fe7b 	bl	80025b4 <SPI_RxByte>
    Stat &= ~STA_NOINIT; 
 80028be:	782b      	ldrb	r3, [r5, #0]
 80028c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028c4:	702b      	strb	r3, [r5, #0]
 80028c6:	e790      	b.n	80027ea <SD_disk_initialize+0x12>
 80028c8:	2100      	movs	r1, #0
 80028ca:	2041      	movs	r0, #65	; 0x41
 80028cc:	f7ff ff1a 	bl	8002704 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD1, 0) == 0)
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d1c5      	bne.n	8002860 <SD_disk_initialize+0x88>
 80028d4:	e7dc      	b.n	8002890 <SD_disk_initialize+0xb8>
 80028d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80028da:	2048      	movs	r0, #72	; 0x48
 80028dc:	f7ff ff12 	bl	8002704 <SD_SendCmd.part.0>
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80028e0:	2801      	cmp	r0, #1
 80028e2:	d1b2      	bne.n	800284a <SD_disk_initialize+0x72>
 80028e4:	f10d 0804 	add.w	r8, sp, #4
 80028e8:	4646      	mov	r6, r8
 80028ea:	af02      	add	r7, sp, #8
        ocr[n] = SPI_RxByte();
 80028ec:	f7ff fe62 	bl	80025b4 <SPI_RxByte>
 80028f0:	f806 0b01 	strb.w	r0, [r6], #1
      for (n = 0; n < 4; n++)
 80028f4:	42b7      	cmp	r7, r6
 80028f6:	d1f9      	bne.n	80028ec <SD_disk_initialize+0x114>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80028f8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d186      	bne.n	800280e <SD_disk_initialize+0x36>
 8002900:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002904:	2baa      	cmp	r3, #170	; 0xaa
 8002906:	d182      	bne.n	800280e <SD_disk_initialize+0x36>
 8002908:	e001      	b.n	800290e <SD_disk_initialize+0x136>
        } while (Timer1);
 800290a:	7823      	ldrb	r3, [r4, #0]
 800290c:	b1a3      	cbz	r3, 8002938 <SD_disk_initialize+0x160>
  if (SD_ReadyWait() != 0xFF)
 800290e:	f7ff feaf 	bl	8002670 <SD_ReadyWait>
 8002912:	28ff      	cmp	r0, #255	; 0xff
 8002914:	d1f9      	bne.n	800290a <SD_disk_initialize+0x132>
 8002916:	2100      	movs	r1, #0
 8002918:	2077      	movs	r0, #119	; 0x77
 800291a:	f7ff fef3 	bl	8002704 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800291e:	2801      	cmp	r0, #1
 8002920:	d8f3      	bhi.n	800290a <SD_disk_initialize+0x132>
  if (SD_ReadyWait() != 0xFF)
 8002922:	f7ff fea5 	bl	8002670 <SD_ReadyWait>
 8002926:	28ff      	cmp	r0, #255	; 0xff
 8002928:	d1ef      	bne.n	800290a <SD_disk_initialize+0x132>
 800292a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800292e:	2069      	movs	r0, #105	; 0x69
 8002930:	f7ff fee8 	bl	8002704 <SD_SendCmd.part.0>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002934:	2800      	cmp	r0, #0
 8002936:	d1e8      	bne.n	800290a <SD_disk_initialize+0x132>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002938:	7823      	ldrb	r3, [r4, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f43f af67 	beq.w	800280e <SD_disk_initialize+0x36>
  if (SD_ReadyWait() != 0xFF)
 8002940:	f7ff fe96 	bl	8002670 <SD_ReadyWait>
 8002944:	28ff      	cmp	r0, #255	; 0xff
 8002946:	f47f af62 	bne.w	800280e <SD_disk_initialize+0x36>
 800294a:	2100      	movs	r1, #0
 800294c:	207a      	movs	r0, #122	; 0x7a
 800294e:	f7ff fed9 	bl	8002704 <SD_SendCmd.part.0>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002952:	2800      	cmp	r0, #0
 8002954:	f47f af5b 	bne.w	800280e <SD_disk_initialize+0x36>
 8002958:	4604      	mov	r4, r0
            ocr[n] = SPI_RxByte();
 800295a:	f7ff fe2b 	bl	80025b4 <SPI_RxByte>
 800295e:	f808 0004 	strb.w	r0, [r8, r4]
 8002962:	3401      	adds	r4, #1
          for (n = 0; n < 4; n++)
 8002964:	2c04      	cmp	r4, #4
 8002966:	d1f8      	bne.n	800295a <SD_disk_initialize+0x182>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002968:	f89d 3004 	ldrb.w	r3, [sp, #4]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800296c:	2201      	movs	r2, #1
          type = (ocr[0] & 0x40) ? 6 : 2;
 800296e:	065b      	lsls	r3, r3, #25
  CardType = type;
 8002970:	bf4c      	ite	mi
 8002972:	2406      	movmi	r4, #6
 8002974:	2402      	movpl	r4, #2
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <SD_disk_initialize+0x1e4>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	480f      	ldr	r0, [pc, #60]	; (80029b8 <SD_disk_initialize+0x1e0>)
  CardType = type;
 800297c:	701c      	strb	r4, [r3, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800297e:	f7fe fbb7 	bl	80010f0 <HAL_GPIO_WritePin>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002982:	f7ff fe17 	bl	80025b4 <SPI_RxByte>
 8002986:	e79a      	b.n	80028be <SD_disk_initialize+0xe6>
 8002988:	2100      	movs	r1, #0
 800298a:	2077      	movs	r0, #119	; 0x77
 800298c:	f7ff feba 	bl	8002704 <SD_SendCmd.part.0>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002990:	2801      	cmp	r0, #1
 8002992:	f63f af5f 	bhi.w	8002854 <SD_disk_initialize+0x7c>
  if (SD_ReadyWait() != 0xFF)
 8002996:	f7ff fe6b 	bl	8002670 <SD_ReadyWait>
 800299a:	28ff      	cmp	r0, #255	; 0xff
 800299c:	f47f af5a 	bne.w	8002854 <SD_disk_initialize+0x7c>
 80029a0:	2100      	movs	r1, #0
 80029a2:	2069      	movs	r0, #105	; 0x69
 80029a4:	f7ff feae 	bl	8002704 <SD_SendCmd.part.0>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80029a8:	2801      	cmp	r0, #1
 80029aa:	f63f af53 	bhi.w	8002854 <SD_disk_initialize+0x7c>
 80029ae:	2602      	movs	r6, #2
 80029b0:	e758      	b.n	8002864 <SD_disk_initialize+0x8c>
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c
 80029b8:	40010c00 	.word	0x40010c00
 80029bc:	20000043 	.word	0x20000043
 80029c0:	20000044 	.word	0x20000044
 80029c4:	200017f1 	.word	0x200017f1

080029c8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
 80029c8:	b918      	cbnz	r0, 80029d2 <SD_disk_status+0xa>
    return STA_NOINIT; 
  
  return Stat;
 80029ca:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <SD_disk_status+0x10>)
 80029cc:	7818      	ldrb	r0, [r3, #0]
 80029ce:	b2c0      	uxtb	r0, r0
 80029d0:	4770      	bx	lr
    return STA_NOINIT; 
 80029d2:	2001      	movs	r0, #1
}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2000000c 	.word	0x2000000c

080029dc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80029dc:	b570      	push	{r4, r5, r6, lr}
  if (pdrv || !count)
 80029de:	bb08      	cbnz	r0, 8002a24 <SD_disk_read+0x48>
 80029e0:	461c      	mov	r4, r3
 80029e2:	b1fb      	cbz	r3, 8002a24 <SD_disk_read+0x48>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <SD_disk_read+0xac>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	07d8      	lsls	r0, r3, #31
 80029ea:	d41e      	bmi.n	8002a2a <SD_disk_read+0x4e>
    return RES_NOTRDY;
  
  if (!(CardType & 4))
 80029ec:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <SD_disk_read+0xb0>)
 80029ee:	4616      	mov	r6, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	460d      	mov	r5, r1
 80029f4:	075b      	lsls	r3, r3, #29
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80029f6:	bf58      	it	pl
 80029f8:	0256      	lslpl	r6, r2, #9
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	2200      	movs	r2, #0
 80029fe:	4824      	ldr	r0, [pc, #144]	; (8002a90 <SD_disk_read+0xb4>)
 8002a00:	f7fe fb76 	bl	80010f0 <HAL_GPIO_WritePin>
  
  SELECT();
  
  if (count == 1) 
 8002a04:	2c01      	cmp	r4, #1
 8002a06:	d013      	beq.n	8002a30 <SD_disk_read+0x54>
  if (SD_ReadyWait() != 0xFF)
 8002a08:	f7ff fe32 	bl	8002670 <SD_ReadyWait>
 8002a0c:	28ff      	cmp	r0, #255	; 0xff
 8002a0e:	d022      	beq.n	8002a56 <SD_disk_read+0x7a>
 8002a10:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002a12:	2201      	movs	r2, #1
 8002a14:	2180      	movs	r1, #128	; 0x80
 8002a16:	481e      	ldr	r0, [pc, #120]	; (8002a90 <SD_disk_read+0xb4>)
 8002a18:	f7fe fb6a 	bl	80010f0 <HAL_GPIO_WritePin>
      SD_SendCmd(CMD12, 0); 
    }
  }
  
  DESELECT();
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002a1c:	f7ff fdca 	bl	80025b4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
}
 8002a20:	4620      	mov	r0, r4
 8002a22:	bd70      	pop	{r4, r5, r6, pc}
    return RES_PARERR;
 8002a24:	2404      	movs	r4, #4
}
 8002a26:	4620      	mov	r0, r4
 8002a28:	bd70      	pop	{r4, r5, r6, pc}
    return RES_NOTRDY;
 8002a2a:	2403      	movs	r4, #3
}
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
  if (SD_ReadyWait() != 0xFF)
 8002a30:	f7ff fe1e 	bl	8002670 <SD_ReadyWait>
 8002a34:	28ff      	cmp	r0, #255	; 0xff
 8002a36:	d1eb      	bne.n	8002a10 <SD_disk_read+0x34>
 8002a38:	4631      	mov	r1, r6
 8002a3a:	2051      	movs	r0, #81	; 0x51
 8002a3c:	f7ff fe62 	bl	8002704 <SD_SendCmd.part.0>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d1e5      	bne.n	8002a10 <SD_disk_read+0x34>
 8002a44:	4628      	mov	r0, r5
 8002a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a4a:	f7ff fe9d 	bl	8002788 <SD_RxDataBlock>
 8002a4e:	fab0 f480 	clz	r4, r0
 8002a52:	0964      	lsrs	r4, r4, #5
 8002a54:	e7dd      	b.n	8002a12 <SD_disk_read+0x36>
 8002a56:	4631      	mov	r1, r6
 8002a58:	2052      	movs	r0, #82	; 0x52
 8002a5a:	f7ff fe53 	bl	8002704 <SD_SendCmd.part.0>
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d1d6      	bne.n	8002a10 <SD_disk_read+0x34>
 8002a62:	e001      	b.n	8002a68 <SD_disk_read+0x8c>
      } while (--count);
 8002a64:	3c01      	subs	r4, #1
 8002a66:	d009      	beq.n	8002a7c <SD_disk_read+0xa0>
        if (!SD_RxDataBlock(buff, 512))
 8002a68:	4628      	mov	r0, r5
 8002a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a6e:	f7ff fe8b 	bl	8002788 <SD_RxDataBlock>
        buff += 512;
 8002a72:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!SD_RxDataBlock(buff, 512))
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d1f4      	bne.n	8002a64 <SD_disk_read+0x88>
 8002a7a:	2401      	movs	r4, #1
      SD_SendCmd(CMD12, 0); 
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	204c      	movs	r0, #76	; 0x4c
 8002a80:	f7ff fe72 	bl	8002768 <SD_SendCmd>
 8002a84:	e7c5      	b.n	8002a12 <SD_disk_read+0x36>
 8002a86:	bf00      	nop
 8002a88:	2000000c 	.word	0x2000000c
 8002a8c:	20000043 	.word	0x20000043
 8002a90:	40010c00 	.word	0x40010c00

08002a94 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdrv || !count)
 8002a96:	bb40      	cbnz	r0, 8002aea <SD_disk_write+0x56>
 8002a98:	461c      	mov	r4, r3
 8002a9a:	b333      	cbz	r3, 8002aea <SD_disk_write+0x56>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 8002a9c:	4b32      	ldr	r3, [pc, #200]	; (8002b68 <SD_disk_write+0xd4>)
 8002a9e:	4616      	mov	r6, r2
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	07d5      	lsls	r5, r2, #31
 8002aa4:	d424      	bmi.n	8002af0 <SD_disk_write+0x5c>
    return RES_NOTRDY;
  
  if (Stat & STA_PROTECT)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	0758      	lsls	r0, r3, #29
 8002aaa:	d424      	bmi.n	8002af6 <SD_disk_write+0x62>
    return RES_WRPRT;
  
  if (!(CardType & 4))
 8002aac:	4f2f      	ldr	r7, [pc, #188]	; (8002b6c <SD_disk_write+0xd8>)
 8002aae:	460d      	mov	r5, r1
 8002ab0:	783b      	ldrb	r3, [r7, #0]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002ab2:	2180      	movs	r1, #128	; 0x80
  if (!(CardType & 4))
 8002ab4:	075a      	lsls	r2, r3, #29
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002ab6:	482e      	ldr	r0, [pc, #184]	; (8002b70 <SD_disk_write+0xdc>)
 8002ab8:	f04f 0200 	mov.w	r2, #0
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002abc:	bf58      	it	pl
 8002abe:	0276      	lslpl	r6, r6, #9
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002ac0:	f7fe fb16 	bl	80010f0 <HAL_GPIO_WritePin>
  
  SELECT();
  
  if (count == 1) 
 8002ac4:	2c01      	cmp	r4, #1
 8002ac6:	d022      	beq.n	8002b0e <SD_disk_write+0x7a>
      count = 0;
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002ac8:	783b      	ldrb	r3, [r7, #0]
 8002aca:	079b      	lsls	r3, r3, #30
 8002acc:	d416      	bmi.n	8002afc <SD_disk_write+0x68>
  if (SD_ReadyWait() != 0xFF)
 8002ace:	f7ff fdcf 	bl	8002670 <SD_ReadyWait>
 8002ad2:	28ff      	cmp	r0, #255	; 0xff
 8002ad4:	d02d      	beq.n	8002b32 <SD_disk_write+0x9e>
{
 8002ad6:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	4824      	ldr	r0, [pc, #144]	; (8002b70 <SD_disk_write+0xdc>)
 8002ade:	f7fe fb07 	bl	80010f0 <HAL_GPIO_WritePin>
      }
    }
  }
  
  DESELECT();
  SPI_RxByte();
 8002ae2:	f7ff fd67 	bl	80025b4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
}
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return RES_PARERR;
 8002aea:	2404      	movs	r4, #4
}
 8002aec:	4620      	mov	r0, r4
 8002aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return RES_NOTRDY;
 8002af0:	2403      	movs	r4, #3
}
 8002af2:	4620      	mov	r0, r4
 8002af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return RES_WRPRT;
 8002af6:	2402      	movs	r4, #2
}
 8002af8:	4620      	mov	r0, r4
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SD_SendCmd(CMD55, 0);
 8002afc:	2100      	movs	r1, #0
 8002afe:	2077      	movs	r0, #119	; 0x77
 8002b00:	f7ff fe32 	bl	8002768 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002b04:	4621      	mov	r1, r4
 8002b06:	2057      	movs	r0, #87	; 0x57
 8002b08:	f7ff fe2e 	bl	8002768 <SD_SendCmd>
 8002b0c:	e7df      	b.n	8002ace <SD_disk_write+0x3a>
  if (SD_ReadyWait() != 0xFF)
 8002b0e:	f7ff fdaf 	bl	8002670 <SD_ReadyWait>
 8002b12:	28ff      	cmp	r0, #255	; 0xff
 8002b14:	d1df      	bne.n	8002ad6 <SD_disk_write+0x42>
 8002b16:	4631      	mov	r1, r6
 8002b18:	2058      	movs	r0, #88	; 0x58
 8002b1a:	f7ff fdf3 	bl	8002704 <SD_SendCmd.part.0>
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d1d9      	bne.n	8002ad6 <SD_disk_write+0x42>
 8002b22:	4628      	mov	r0, r5
 8002b24:	21fe      	movs	r1, #254	; 0xfe
 8002b26:	f7ff fdb3 	bl	8002690 <SD_TxDataBlock>
 8002b2a:	fab0 f480 	clz	r4, r0
 8002b2e:	0964      	lsrs	r4, r4, #5
 8002b30:	e7d2      	b.n	8002ad8 <SD_disk_write+0x44>
 8002b32:	4631      	mov	r1, r6
 8002b34:	2059      	movs	r0, #89	; 0x59
 8002b36:	f7ff fde5 	bl	8002704 <SD_SendCmd.part.0>
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d1cb      	bne.n	8002ad6 <SD_disk_write+0x42>
 8002b3e:	e001      	b.n	8002b44 <SD_disk_write+0xb0>
      } while (--count);
 8002b40:	3c01      	subs	r4, #1
 8002b42:	d007      	beq.n	8002b54 <SD_disk_write+0xc0>
        if(!SD_TxDataBlock(buff, 0xFC))
 8002b44:	4628      	mov	r0, r5
 8002b46:	21fc      	movs	r1, #252	; 0xfc
 8002b48:	f7ff fda2 	bl	8002690 <SD_TxDataBlock>
        buff += 512;
 8002b4c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if(!SD_TxDataBlock(buff, 0xFC))
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d1f5      	bne.n	8002b40 <SD_disk_write+0xac>
      if(!SD_TxDataBlock(0, 0xFD))
 8002b54:	21fd      	movs	r1, #253	; 0xfd
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7ff fd9a 	bl	8002690 <SD_TxDataBlock>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d0ba      	beq.n	8002ad6 <SD_disk_write+0x42>
 8002b60:	3400      	adds	r4, #0
 8002b62:	bf18      	it	ne
 8002b64:	2401      	movne	r4, #1
 8002b66:	e7b7      	b.n	8002ad8 <SD_disk_write+0x44>
 8002b68:	2000000c 	.word	0x2000000c
 8002b6c:	20000043 	.word	0x20000043
 8002b70:	40010c00 	.word	0x40010c00

08002b74 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	b086      	sub	sp, #24
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
 8002b78:	bb10      	cbnz	r0, 8002bc0 <SD_disk_ioctl+0x4c>
    return RES_PARERR;
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 8002b7a:	2905      	cmp	r1, #5
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	4615      	mov	r5, r2
 8002b80:	d013      	beq.n	8002baa <SD_disk_ioctl+0x36>
      res = RES_PARERR;
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002b82:	4b5b      	ldr	r3, [pc, #364]	; (8002cf0 <SD_disk_ioctl+0x17c>)
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	f012 0201 	ands.w	r2, r2, #1
 8002b8a:	d11d      	bne.n	8002bc8 <SD_disk_ioctl+0x54>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002b8c:	2180      	movs	r1, #128	; 0x80
 8002b8e:	4859      	ldr	r0, [pc, #356]	; (8002cf4 <SD_disk_ioctl+0x180>)
 8002b90:	f7fe faae 	bl	80010f0 <HAL_GPIO_WritePin>
      return RES_NOTRDY;
    
    SELECT();
    
    switch (ctrl) 
 8002b94:	2c0d      	cmp	r4, #13
 8002b96:	d831      	bhi.n	8002bfc <SD_disk_ioctl+0x88>
 8002b98:	e8df f004 	tbb	[pc, r4]
 8002b9c:	3042665f 	.word	0x3042665f
 8002ba0:	30303030 	.word	0x30303030
 8002ba4:	47303030 	.word	0x47303030
 8002ba8:	204d      	.short	0x204d
    switch (*ptr) 
 8002baa:	7813      	ldrb	r3, [r2, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d00f      	beq.n	8002bd0 <SD_disk_ioctl+0x5c>
 8002bb0:	d32f      	bcc.n	8002c12 <SD_disk_ioctl+0x9e>
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d104      	bne.n	8002bc0 <SD_disk_ioctl+0x4c>
  return PowerFlag;
 8002bb6:	4b50      	ldr	r3, [pc, #320]	; (8002cf8 <SD_disk_ioctl+0x184>)
      res = RES_OK;             /* Power Check */
 8002bb8:	4604      	mov	r4, r0
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	7053      	strb	r3, [r2, #1]
      break;
 8002bbe:	e000      	b.n	8002bc2 <SD_disk_ioctl+0x4e>
      res = RES_PARERR;
 8002bc0:	2404      	movs	r4, #4
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	b006      	add	sp, #24
 8002bc6:	bd70      	pop	{r4, r5, r6, pc}
      return RES_NOTRDY;
 8002bc8:	2403      	movs	r4, #3
}
 8002bca:	4620      	mov	r0, r4
 8002bcc:	b006      	add	sp, #24
 8002bce:	bd70      	pop	{r4, r5, r6, pc}
 8002bd0:	9001      	str	r0, [sp, #4]
      SD_PowerOn();             /* Power On */
 8002bd2:	f7ff fd0f 	bl	80025f4 <SD_PowerOn>
      res = RES_OK;
 8002bd6:	9801      	ldr	r0, [sp, #4]
 8002bd8:	4604      	mov	r4, r0
      break;
 8002bda:	e7f2      	b.n	8002bc2 <SD_disk_ioctl+0x4e>
  if (SD_ReadyWait() != 0xFF)
 8002bdc:	f7ff fd48 	bl	8002670 <SD_ReadyWait>
 8002be0:	28ff      	cmp	r0, #255	; 0xff
 8002be2:	d10b      	bne.n	8002bfc <SD_disk_ioctl+0x88>
 8002be4:	2100      	movs	r1, #0
 8002be6:	207a      	movs	r0, #122	; 0x7a
 8002be8:	f7ff fd8c 	bl	8002704 <SD_SendCmd.part.0>
      if (SD_SendCmd(CMD58, 0) == 0) 
 8002bec:	b930      	cbnz	r0, 8002bfc <SD_disk_ioctl+0x88>
 8002bee:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 8002bf0:	f7ff fce0 	bl	80025b4 <SPI_RxByte>
 8002bf4:	f805 0b01 	strb.w	r0, [r5], #1
        for (n = 0; n < 4; n++)
 8002bf8:	42ac      	cmp	r4, r5
 8002bfa:	d1f9      	bne.n	8002bf0 <SD_disk_ioctl+0x7c>
      res = RES_PARERR;
 8002bfc:	2404      	movs	r4, #4
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	483c      	ldr	r0, [pc, #240]	; (8002cf4 <SD_disk_ioctl+0x180>)
 8002c04:	f7fe fa74 	bl	80010f0 <HAL_GPIO_WritePin>
    SPI_RxByte();
 8002c08:	f7ff fcd4 	bl	80025b4 <SPI_RxByte>
}
 8002c0c:	4620      	mov	r0, r4
 8002c0e:	b006      	add	sp, #24
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
  return PowerFlag;
 8002c12:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <SD_disk_ioctl+0x184>)
      if (SD_CheckPower())
 8002c14:	781c      	ldrb	r4, [r3, #0]
 8002c16:	2c00      	cmp	r4, #0
 8002c18:	d0d3      	beq.n	8002bc2 <SD_disk_ioctl+0x4e>
  PowerFlag = 0;
 8002c1a:	7018      	strb	r0, [r3, #0]
      res = RES_OK;
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	e7d0      	b.n	8002bc2 <SD_disk_ioctl+0x4e>
      *(WORD*) buff = 512;
 8002c20:	f44f 7300 	mov.w	r3, #512	; 0x200
      res = RES_OK;
 8002c24:	2400      	movs	r4, #0
      *(WORD*) buff = 512;
 8002c26:	802b      	strh	r3, [r5, #0]
      break;
 8002c28:	e7e9      	b.n	8002bfe <SD_disk_ioctl+0x8a>
  if (SD_ReadyWait() != 0xFF)
 8002c2a:	f7ff fd21 	bl	8002670 <SD_ReadyWait>
 8002c2e:	28ff      	cmp	r0, #255	; 0xff
 8002c30:	d050      	beq.n	8002cd4 <SD_disk_ioctl+0x160>
  res = RES_ERROR;
 8002c32:	2401      	movs	r4, #1
 8002c34:	e7e3      	b.n	8002bfe <SD_disk_ioctl+0x8a>
  if (SD_ReadyWait() != 0xFF)
 8002c36:	f7ff fd1b 	bl	8002670 <SD_ReadyWait>
 8002c3a:	28ff      	cmp	r0, #255	; 0xff
 8002c3c:	d1f9      	bne.n	8002c32 <SD_disk_ioctl+0xbe>
 8002c3e:	2100      	movs	r1, #0
 8002c40:	204a      	movs	r0, #74	; 0x4a
 8002c42:	f7ff fd5f 	bl	8002704 <SD_SendCmd.part.0>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002c46:	2800      	cmp	r0, #0
 8002c48:	d1f3      	bne.n	8002c32 <SD_disk_ioctl+0xbe>
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	f7ff fd9b 	bl	8002788 <SD_RxDataBlock>
  res = RES_ERROR;
 8002c52:	fab0 f480 	clz	r4, r0
 8002c56:	0964      	lsrs	r4, r4, #5
 8002c58:	e7d1      	b.n	8002bfe <SD_disk_ioctl+0x8a>
      if (SD_ReadyWait() == 0xFF)
 8002c5a:	f7ff fd09 	bl	8002670 <SD_ReadyWait>
  res = RES_ERROR;
 8002c5e:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8002c62:	bf18      	it	ne
 8002c64:	2401      	movne	r4, #1
 8002c66:	e7ca      	b.n	8002bfe <SD_disk_ioctl+0x8a>
  if (SD_ReadyWait() != 0xFF)
 8002c68:	f7ff fd02 	bl	8002670 <SD_ReadyWait>
 8002c6c:	28ff      	cmp	r0, #255	; 0xff
 8002c6e:	d1e0      	bne.n	8002c32 <SD_disk_ioctl+0xbe>
 8002c70:	2100      	movs	r1, #0
 8002c72:	2049      	movs	r0, #73	; 0x49
 8002c74:	f7ff fd46 	bl	8002704 <SD_SendCmd.part.0>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002c78:	4604      	mov	r4, r0
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d1d9      	bne.n	8002c32 <SD_disk_ioctl+0xbe>
 8002c7e:	2110      	movs	r1, #16
 8002c80:	a802      	add	r0, sp, #8
 8002c82:	f7ff fd81 	bl	8002788 <SD_RxDataBlock>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d0d3      	beq.n	8002c32 <SD_disk_ioctl+0xbe>
        if ((csd[0] >> 6) == 1) 
 8002c8a:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002c8e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8002c92:	0989      	lsrs	r1, r1, #6
 8002c94:	2901      	cmp	r1, #1
 8002c96:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8002c9a:	d022      	beq.n	8002ce2 <SD_disk_ioctl+0x16e>
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c9c:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8002ca0:	f89d 0012 	ldrb.w	r0, [sp, #18]
 8002ca4:	f001 010f 	and.w	r1, r1, #15
 8002ca8:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002cac:	f89d 600f 	ldrb.w	r6, [sp, #15]
 8002cb0:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002cb4:	0992      	lsrs	r2, r2, #6
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	f003 0306 	and.w	r3, r3, #6
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002cbc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8002cc0:	0280      	lsls	r0, r0, #10
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002cc2:	4419      	add	r1, r3
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002cc4:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8002cc8:	1c53      	adds	r3, r2, #1
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002cca:	4403      	add	r3, r0
 8002ccc:	1fca      	subs	r2, r1, #7
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	e794      	b.n	8002bfe <SD_disk_ioctl+0x8a>
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2049      	movs	r0, #73	; 0x49
 8002cd8:	f7ff fd14 	bl	8002704 <SD_SendCmd.part.0>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	d1a8      	bne.n	8002c32 <SD_disk_ioctl+0xbe>
 8002ce0:	e7b3      	b.n	8002c4a <SD_disk_ioctl+0xd6>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
          *(DWORD*) buff = (DWORD) csize << 10;
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	602b      	str	r3, [r5, #0]
 8002cee:	e786      	b.n	8002bfe <SD_disk_ioctl+0x8a>
 8002cf0:	2000000c 	.word	0x2000000c
 8002cf4:	40010c00 	.word	0x40010c00
 8002cf8:	20000044 	.word	0x20000044

08002cfc <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002cfc:	f7ff bd6c 	b.w	80027d8 <SD_disk_initialize>

08002d00 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8002d00:	f7ff be62 	b.w	80029c8 <SD_disk_status>

08002d04 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8002d04:	f7ff be6a 	b.w	80029dc <SD_disk_read>

08002d08 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8002d08:	f7ff bec4 	b.w	8002a94 <SD_disk_write>

08002d0c <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002d0c:	f7ff bf32 	b.w	8002b74 <SD_disk_ioctl>

08002d10 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <disk_status+0x10>)
 8002d12:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002d16:	6852      	ldr	r2, [r2, #4]
 8002d18:	4403      	add	r3, r0
 8002d1a:	6852      	ldr	r2, [r2, #4]
 8002d1c:	7a18      	ldrb	r0, [r3, #8]
 8002d1e:	4710      	bx	r2
 8002d20:	20000268 	.word	0x20000268

08002d24 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <disk_initialize+0x1c>)
 8002d26:	5c1a      	ldrb	r2, [r3, r0]
 8002d28:	b942      	cbnz	r2, 8002d3c <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8002d2a:	2101      	movs	r1, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002d2c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8002d30:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 8002d32:	5419      	strb	r1, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002d34:	4403      	add	r3, r0
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	7a18      	ldrb	r0, [r3, #8]
 8002d3a:	4710      	bx	r2
  }
  return stat;
}
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	4770      	bx	lr
 8002d40:	20000268 	.word	0x20000268

08002d44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002d44:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d46:	4c05      	ldr	r4, [pc, #20]	; (8002d5c <disk_read+0x18>)
 8002d48:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002d4c:	686d      	ldr	r5, [r5, #4]
 8002d4e:	4404      	add	r4, r0
 8002d50:	68ad      	ldr	r5, [r5, #8]
 8002d52:	7a20      	ldrb	r0, [r4, #8]
 8002d54:	46ac      	mov	ip, r5
  return res;
}
 8002d56:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002d58:	4760      	bx	ip
 8002d5a:	bf00      	nop
 8002d5c:	20000268 	.word	0x20000268

08002d60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002d60:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002d62:	4c05      	ldr	r4, [pc, #20]	; (8002d78 <disk_write+0x18>)
 8002d64:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8002d68:	686d      	ldr	r5, [r5, #4]
 8002d6a:	4404      	add	r4, r0
 8002d6c:	68ed      	ldr	r5, [r5, #12]
 8002d6e:	7a20      	ldrb	r0, [r4, #8]
 8002d70:	46ac      	mov	ip, r5
  return res;
}
 8002d72:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002d74:	4760      	bx	ip
 8002d76:	bf00      	nop
 8002d78:	20000268 	.word	0x20000268

08002d7c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <disk_ioctl+0x18>)
{
 8002d7e:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002d80:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8002d84:	6864      	ldr	r4, [r4, #4]
 8002d86:	4403      	add	r3, r0
 8002d88:	6924      	ldr	r4, [r4, #16]
 8002d8a:	7a18      	ldrb	r0, [r3, #8]
 8002d8c:	4623      	mov	r3, r4
  return res;
}
 8002d8e:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002d90:	4718      	bx	r3
 8002d92:	bf00      	nop
 8002d94:	20000268 	.word	0x20000268

08002d98 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8002d98:	4a1f      	ldr	r2, [pc, #124]	; (8002e18 <chk_lock+0x80>)
{
 8002d9a:	b430      	push	{r4, r5}
		if (Files[i].fs) {	/* Existing entry */
 8002d9c:	6813      	ldr	r3, [r2, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d037      	beq.n	8002e12 <chk_lock+0x7a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002da2:	6804      	ldr	r4, [r0, #0]
 8002da4:	429c      	cmp	r4, r3
 8002da6:	d00d      	beq.n	8002dc4 <chk_lock+0x2c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002da8:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
 8002daa:	68d3      	ldr	r3, [r2, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02d      	beq.n	8002e0c <chk_lock+0x74>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002db0:	6805      	ldr	r5, [r0, #0]
 8002db2:	42ab      	cmp	r3, r5
 8002db4:	d01c      	beq.n	8002df0 <chk_lock+0x58>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002db6:	bb4c      	cbnz	r4, 8002e0c <chk_lock+0x74>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8002db8:	bc30      	pop	{r4, r5}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002dba:	2902      	cmp	r1, #2
 8002dbc:	bf0c      	ite	eq
 8002dbe:	2000      	moveq	r0, #0
 8002dc0:	2012      	movne	r0, #18
}
 8002dc2:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002dc4:	6854      	ldr	r4, [r2, #4]
 8002dc6:	6883      	ldr	r3, [r0, #8]
 8002dc8:	429c      	cmp	r4, r3
 8002dca:	d1ed      	bne.n	8002da8 <chk_lock+0x10>
				Files[i].clu == dp->sclust &&
 8002dcc:	8914      	ldrh	r4, [r2, #8]
 8002dce:	88c3      	ldrh	r3, [r0, #6]
 8002dd0:	429c      	cmp	r4, r3
 8002dd2:	d1e9      	bne.n	8002da8 <chk_lock+0x10>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002dd4:	2000      	movs	r0, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002dd6:	b9b1      	cbnz	r1, 8002e06 <chk_lock+0x6e>
}
 8002dd8:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002dda:	0043      	lsls	r3, r0, #1
 8002ddc:	4403      	add	r3, r0
 8002dde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8002de2:	8953      	ldrh	r3, [r2, #10]
 8002de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de8:	bf14      	ite	ne
 8002dea:	2000      	movne	r0, #0
 8002dec:	2010      	moveq	r0, #16
}
 8002dee:	4770      	bx	lr
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002df0:	6915      	ldr	r5, [r2, #16]
 8002df2:	6883      	ldr	r3, [r0, #8]
 8002df4:	429d      	cmp	r5, r3
 8002df6:	d1de      	bne.n	8002db6 <chk_lock+0x1e>
				Files[i].clu == dp->sclust &&
 8002df8:	88c3      	ldrh	r3, [r0, #6]
 8002dfa:	8a90      	ldrh	r0, [r2, #20]
 8002dfc:	4298      	cmp	r0, r3
 8002dfe:	d1da      	bne.n	8002db6 <chk_lock+0x1e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002e00:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002e02:	2900      	cmp	r1, #0
 8002e04:	d0e8      	beq.n	8002dd8 <chk_lock+0x40>
}
 8002e06:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002e08:	2010      	movs	r0, #16
}
 8002e0a:	4770      	bx	lr
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002e0c:	2000      	movs	r0, #0
}
 8002e0e:	bc30      	pop	{r4, r5}
 8002e10:	4770      	bx	lr
			be = 1;
 8002e12:	2401      	movs	r4, #1
 8002e14:	e7c9      	b.n	8002daa <chk_lock+0x12>
 8002e16:	bf00      	nop
 8002e18:	2000004c 	.word	0x2000004c

08002e1c <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <inc_lock+0xa4>)
{
 8002e1e:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->fs &&
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	6804      	ldr	r4, [r0, #0]
 8002e24:	4294      	cmp	r4, r2
 8002e26:	d01c      	beq.n	8002e62 <inc_lock+0x46>
 8002e28:	68dd      	ldr	r5, [r3, #12]
 8002e2a:	42a5      	cmp	r5, r4
 8002e2c:	d006      	beq.n	8002e3c <inc_lock+0x20>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e2e:	b312      	cbz	r2, 8002e76 <inc_lock+0x5a>
 8002e30:	2d00      	cmp	r5, #0
 8002e32:	d03b      	beq.n	8002eac <inc_lock+0x90>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002e34:	2600      	movs	r6, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 8002e36:	4630      	mov	r0, r6
 8002e38:	bcf0      	pop	{r4, r5, r6, r7}
 8002e3a:	4770      	bx	lr
		if (Files[i].fs == dp->fs &&
 8002e3c:	691f      	ldr	r7, [r3, #16]
 8002e3e:	6886      	ldr	r6, [r0, #8]
 8002e40:	42b7      	cmp	r7, r6
 8002e42:	d1f4      	bne.n	8002e2e <inc_lock+0x12>
			Files[i].clu == dp->sclust &&
 8002e44:	8a9f      	ldrh	r7, [r3, #20]
 8002e46:	88c6      	ldrh	r6, [r0, #6]
 8002e48:	42b7      	cmp	r7, r6
 8002e4a:	d1f0      	bne.n	8002e2e <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e4c:	2501      	movs	r5, #1
 8002e4e:	006a      	lsls	r2, r5, #1
 8002e50:	1950      	adds	r0, r2, r5
 8002e52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e56:	8940      	ldrh	r0, [r0, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e58:	bb59      	cbnz	r1, 8002eb2 <inc_lock+0x96>
 8002e5a:	1c41      	adds	r1, r0, #1
 8002e5c:	b289      	uxth	r1, r1
 8002e5e:	1c6e      	adds	r6, r5, #1
 8002e60:	e01d      	b.n	8002e9e <inc_lock+0x82>
		if (Files[i].fs == dp->fs &&
 8002e62:	6886      	ldr	r6, [r0, #8]
 8002e64:	685d      	ldr	r5, [r3, #4]
 8002e66:	42ae      	cmp	r6, r5
 8002e68:	d1de      	bne.n	8002e28 <inc_lock+0xc>
			Files[i].clu == dp->sclust &&
 8002e6a:	88c6      	ldrh	r6, [r0, #6]
 8002e6c:	891d      	ldrh	r5, [r3, #8]
 8002e6e:	42ae      	cmp	r6, r5
 8002e70:	d1da      	bne.n	8002e28 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002e72:	2500      	movs	r5, #0
 8002e74:	e7eb      	b.n	8002e4e <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002e76:	4615      	mov	r5, r2
 8002e78:	2601      	movs	r6, #1
		Files[i].ctr = 0;
 8002e7a:	2700      	movs	r7, #0
		Files[i].fs = dp->fs;
 8002e7c:	006a      	lsls	r2, r5, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e7e:	42b9      	cmp	r1, r7
		Files[i].fs = dp->fs;
 8002e80:	eb02 0105 	add.w	r1, r2, r5
 8002e84:	ea4f 0181 	mov.w	r1, r1, lsl #2
 8002e88:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->sclust;
 8002e8a:	6884      	ldr	r4, [r0, #8]
		Files[i].idx = dp->index;
 8002e8c:	88c0      	ldrh	r0, [r0, #6]
		Files[i].fs = dp->fs;
 8002e8e:	4419      	add	r1, r3
		Files[i].clu = dp->sclust;
 8002e90:	604c      	str	r4, [r1, #4]
		Files[i].idx = dp->index;
 8002e92:	8108      	strh	r0, [r1, #8]
		Files[i].ctr = 0;
 8002e94:	814f      	strh	r7, [r1, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002e96:	bf14      	ite	ne
 8002e98:	f44f 7180 	movne.w	r1, #256	; 0x100
 8002e9c:	2101      	moveq	r1, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002e9e:	442a      	add	r2, r5
 8002ea0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	bcf0      	pop	{r4, r5, r6, r7}
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002ea8:	8159      	strh	r1, [r3, #10]
}
 8002eaa:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002eac:	2602      	movs	r6, #2
 8002eae:	2501      	movs	r5, #1
 8002eb0:	e7e3      	b.n	8002e7a <inc_lock+0x5e>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d1be      	bne.n	8002e34 <inc_lock+0x18>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eba:	1c6e      	adds	r6, r5, #1
 8002ebc:	e7ef      	b.n	8002e9e <inc_lock+0x82>
 8002ebe:	bf00      	nop
 8002ec0:	2000004c 	.word	0x2000004c

08002ec4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8002ec4:	b430      	push	{r4, r5}
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002ec6:	6804      	ldr	r4, [r0, #0]
 8002ec8:	b1ec      	cbz	r4, 8002f06 <get_ldnumber+0x42>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002eca:	7825      	ldrb	r5, [r4, #0]
 8002ecc:	2d1f      	cmp	r5, #31
 8002ece:	d90a      	bls.n	8002ee6 <get_ldnumber+0x22>
 8002ed0:	2d3a      	cmp	r5, #58	; 0x3a
 8002ed2:	d018      	beq.n	8002f06 <get_ldnumber+0x42>
 8002ed4:	4623      	mov	r3, r4
 8002ed6:	e002      	b.n	8002ede <get_ldnumber+0x1a>
 8002ed8:	2a3a      	cmp	r2, #58	; 0x3a
 8002eda:	d008      	beq.n	8002eee <get_ldnumber+0x2a>
 8002edc:	460b      	mov	r3, r1
 8002ede:	785a      	ldrb	r2, [r3, #1]
 8002ee0:	1c59      	adds	r1, r3, #1
 8002ee2:	2a1f      	cmp	r2, #31
 8002ee4:	d8f8      	bhi.n	8002ed8 <get_ldnumber+0x14>
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002ee6:	2200      	movs	r2, #0
#endif
	}
	return vol;
}
 8002ee8:	bc30      	pop	{r4, r5}
 8002eea:	4610      	mov	r0, r2
 8002eec:	4770      	bx	lr
			i = *tp++ - '0'; 
 8002eee:	3401      	adds	r4, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002ef0:	42a1      	cmp	r1, r4
			i = *tp++ - '0'; 
 8002ef2:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002ef6:	d106      	bne.n	8002f06 <get_ldnumber+0x42>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002ef8:	2d30      	cmp	r5, #48	; 0x30
 8002efa:	d104      	bne.n	8002f06 <get_ldnumber+0x42>
}
 8002efc:	bc30      	pop	{r4, r5}
					*path = ++tt;
 8002efe:	3302      	adds	r3, #2
 8002f00:	6003      	str	r3, [r0, #0]
}
 8002f02:	4610      	mov	r0, r2
 8002f04:	4770      	bx	lr
	int vol = -1;
 8002f06:	f04f 32ff 	mov.w	r2, #4294967295
}
 8002f0a:	bc30      	pop	{r4, r5}
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4770      	bx	lr

08002f10 <validate>:
)
{
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002f10:	b1b8      	cbz	r0, 8002f42 <validate+0x32>
{
 8002f12:	b508      	push	{r3, lr}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002f14:	6803      	ldr	r3, [r0, #0]
 8002f16:	b14b      	cbz	r3, 8002f2c <validate+0x1c>
 8002f18:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	b12a      	cbz	r2, 8002f2c <validate+0x1c>
 8002f20:	f241 0106 	movw	r1, #4102	; 0x1006
 8002f24:	8882      	ldrh	r2, [r0, #4]
 8002f26:	5a59      	ldrh	r1, [r3, r1]
 8002f28:	4291      	cmp	r1, r2
 8002f2a:	d001      	beq.n	8002f30 <validate+0x20>
		return FR_INVALID_OBJECT;
 8002f2c:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 8002f2e:	bd08      	pop	{r3, pc}
	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8002f30:	f241 0201 	movw	r2, #4097	; 0x1001
 8002f34:	5c98      	ldrb	r0, [r3, r2]
 8002f36:	f7ff feeb 	bl	8002d10 <disk_status>
 8002f3a:	f010 0001 	ands.w	r0, r0, #1
 8002f3e:	d1f5      	bne.n	8002f2c <validate+0x1c>
}
 8002f40:	bd08      	pop	{r3, pc}
		return FR_INVALID_OBJECT;
 8002f42:	2009      	movs	r0, #9
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop

08002f48 <sync_window.part.2>:
		wsect = fs->winsect;	/* Current sector number */
 8002f48:	f241 022c 	movw	r2, #4140	; 0x102c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002f4c:	f241 0301 	movw	r3, #4097	; 0x1001
FRESULT sync_window (
 8002f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8002f54:	5885      	ldr	r5, [r0, r2]
FRESULT sync_window (
 8002f56:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8002f58:	4601      	mov	r1, r0
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	5cc0      	ldrb	r0, [r0, r3]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f7ff fefe 	bl	8002d60 <disk_write>
 8002f64:	bb28      	cbnz	r0, 8002fb2 <sync_window.part.2+0x6a>
			fs->wflag = 0;
 8002f66:	f241 0304 	movw	r3, #4100	; 0x1004
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002f6a:	f241 0718 	movw	r7, #4120	; 0x1018
			fs->wflag = 0;
 8002f6e:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002f70:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	59e3      	ldr	r3, [r4, r7]
 8002f78:	1aaa      	subs	r2, r5, r2
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d216      	bcs.n	8002fac <sync_window.part.2+0x64>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f82:	5ca6      	ldrb	r6, [r4, r2]
 8002f84:	2e01      	cmp	r6, #1
 8002f86:	d911      	bls.n	8002fac <sync_window.part.2+0x64>
 8002f88:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
 8002f8c:	4427      	add	r7, r4
 8002f8e:	f108 0801 	add.w	r8, r8, #1
 8002f92:	e000      	b.n	8002f96 <sync_window.part.2+0x4e>
 8002f94:	683b      	ldr	r3, [r7, #0]
					wsect += fs->fsize;
 8002f96:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002f98:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002f9a:	462a      	mov	r2, r5
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	f898 0000 	ldrb.w	r0, [r8]
 8002fa4:	f7ff fedc 	bl	8002d60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002fa8:	2e01      	cmp	r6, #1
 8002faa:	d1f3      	bne.n	8002f94 <sync_window.part.2+0x4c>
	FRESULT res = FR_OK;
 8002fac:	2000      	movs	r0, #0
}
 8002fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_DISK_ERR;
 8002fb2:	2001      	movs	r0, #1
}
 8002fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fb8 <sync_fs>:
{
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002fba:	f241 0304 	movw	r3, #4100	; 0x1004
 8002fbe:	5cc3      	ldrb	r3, [r0, r3]
{
 8002fc0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002fc2:	b97b      	cbnz	r3, 8002fe4 <sync_fs+0x2c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002fc4:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d013      	beq.n	8002ff6 <sync_fs+0x3e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8002fce:	f241 0301 	movw	r3, #4097	; 0x1001
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	5ce0      	ldrb	r0, [r4, r3]
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	f7ff fed0 	bl	8002d7c <disk_ioctl>
 8002fdc:	3000      	adds	r0, #0
 8002fde:	bf18      	it	ne
 8002fe0:	2001      	movne	r0, #1
}
 8002fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe4:	f7ff ffb0 	bl	8002f48 <sync_window.part.2>
	if (res == FR_OK) {
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d1fa      	bne.n	8002fe2 <sync_fs+0x2a>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8002fec:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d1eb      	bne.n	8002fce <sync_fs+0x16>
 8002ff6:	f241 0305 	movw	r3, #4101	; 0x1005
 8002ffa:	5ce3      	ldrb	r3, [r4, r3]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d1e6      	bne.n	8002fce <sync_fs+0x16>
			mem_set(fs->win.d8, 0, SS(fs));
 8003000:	f241 030a 	movw	r3, #4106	; 0x100a
 8003004:	5ae2      	ldrh	r2, [r4, r3]
	while (cnt--)
 8003006:	b132      	cbz	r2, 8003016 <sync_fs+0x5e>
	BYTE *d = (BYTE*)dst;
 8003008:	4623      	mov	r3, r4
		*d++ = (BYTE)val;
 800300a:	2100      	movs	r1, #0
 800300c:	4422      	add	r2, r4
 800300e:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 8003012:	429a      	cmp	r2, r3
 8003014:	d1fb      	bne.n	800300e <sync_fs+0x56>
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003016:	f241 0110 	movw	r1, #4112	; 0x1010
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800301a:	f241 030c 	movw	r3, #4108	; 0x100c
			fs->winsect = fs->volbase + 1;
 800301e:	f241 021c 	movw	r2, #4124	; 0x101c
 8003022:	f241 062c 	movw	r6, #4140	; 0x102c
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003026:	f64a 2555 	movw	r5, #43605	; 0xaa55
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800302a:	f241 0001 	movw	r0, #4097	; 0x1001
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 800302e:	5861      	ldr	r1, [r4, r1]
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003030:	58e3      	ldr	r3, [r4, r3]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003032:	f3c1 2707 	ubfx	r7, r1, #8, #8
			fs->winsect = fs->volbase + 1;
 8003036:	58a2      	ldr	r2, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003038:	f884 11e8 	strb.w	r1, [r4, #488]	; 0x1e8
 800303c:	f884 71e9 	strb.w	r7, [r4, #489]	; 0x1e9
 8003040:	0c0f      	lsrs	r7, r1, #16
 8003042:	0e09      	lsrs	r1, r1, #24
 8003044:	f884 11eb 	strb.w	r1, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003048:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800304c:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
 8003050:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8003054:	0c19      	lsrs	r1, r3, #16
 8003056:	0e1b      	lsrs	r3, r3, #24
 8003058:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
 800305c:	f884 31ef 	strb.w	r3, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 8003060:	3201      	adds	r2, #1
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003062:	490a      	ldr	r1, [pc, #40]	; (800308c <sync_fs+0xd4>)
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <sync_fs+0xd8>)
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003066:	f884 71ea 	strb.w	r7, [r4, #490]	; 0x1ea
			fs->winsect = fs->volbase + 1;
 800306a:	51a2      	str	r2, [r4, r6]
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800306c:	f8a4 51fe 	strh.w	r5, [r4, #510]	; 0x1fe
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003070:	5c20      	ldrb	r0, [r4, r0]
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003072:	6021      	str	r1, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003074:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003078:	4621      	mov	r1, r4
 800307a:	2301      	movs	r3, #1
 800307c:	f7ff fe70 	bl	8002d60 <disk_write>
			fs->fsi_flag = 0;
 8003080:	f241 0305 	movw	r3, #4101	; 0x1005
 8003084:	2200      	movs	r2, #0
 8003086:	54e2      	strb	r2, [r4, r3]
 8003088:	e7a1      	b.n	8002fce <sync_fs+0x16>
 800308a:	bf00      	nop
 800308c:	41615252 	.word	0x41615252
 8003090:	61417272 	.word	0x61417272

08003094 <move_window.part.3>:
FRESULT move_window (
 8003094:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003096:	f241 0304 	movw	r3, #4100	; 0x1004
 800309a:	5cc3      	ldrb	r3, [r0, r3]
FRESULT move_window (
 800309c:	4604      	mov	r4, r0
 800309e:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80030a0:	b113      	cbz	r3, 80030a8 <move_window.part.3+0x14>
 80030a2:	f7ff ff51 	bl	8002f48 <sync_window.part.2>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80030a6:	b988      	cbnz	r0, 80030cc <move_window.part.3+0x38>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80030a8:	f241 0201 	movw	r2, #4097	; 0x1001
 80030ac:	2301      	movs	r3, #1
 80030ae:	5ca0      	ldrb	r0, [r4, r2]
 80030b0:	4621      	mov	r1, r4
 80030b2:	462a      	mov	r2, r5
 80030b4:	f7ff fe46 	bl	8002d44 <disk_read>
				res = FR_DISK_ERR;
 80030b8:	2800      	cmp	r0, #0
 80030ba:	bf18      	it	ne
 80030bc:	f04f 35ff 	movne.w	r5, #4294967295
			fs->winsect = sector;
 80030c0:	f241 032c 	movw	r3, #4140	; 0x102c
				res = FR_DISK_ERR;
 80030c4:	bf0c      	ite	eq
 80030c6:	2000      	moveq	r0, #0
 80030c8:	2001      	movne	r0, #1
			fs->winsect = sector;
 80030ca:	50e5      	str	r5, [r4, r3]
}
 80030cc:	bd38      	pop	{r3, r4, r5, pc}
 80030ce:	bf00      	nop

080030d0 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
{
 80030d4:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80030d6:	f241 032c 	movw	r3, #4140	; 0x102c
 80030da:	f241 0504 	movw	r5, #4100	; 0x1004
 80030de:	2600      	movs	r6, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80030e0:	4291      	cmp	r1, r2
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80030e2:	5546      	strb	r6, [r0, r5]
{
 80030e4:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80030e6:	50c2      	str	r2, [r0, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80030e8:	d11a      	bne.n	8003120 <check_fs+0x50>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80030ea:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80030ee:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
 80030f2:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80030f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d10e      	bne.n	800311c <check_fs+0x4c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80030fe:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8003102:	4a0b      	ldr	r2, [pc, #44]	; (8003130 <check_fs+0x60>)
 8003104:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003108:	4293      	cmp	r3, r2
 800310a:	d00f      	beq.n	800312c <check_fs+0x5c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800310c:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8003110:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8003114:	1a80      	subs	r0, r0, r2
 8003116:	bf18      	it	ne
 8003118:	2001      	movne	r0, #1
}
 800311a:	bd70      	pop	{r4, r5, r6, pc}
		return 2;
 800311c:	2002      	movs	r0, #2
}
 800311e:	bd70      	pop	{r4, r5, r6, pc}
 8003120:	f7ff ffb8 	bl	8003094 <move_window.part.3>
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003124:	2800      	cmp	r0, #0
 8003126:	d0e0      	beq.n	80030ea <check_fs+0x1a>
		return 3;
 8003128:	2003      	movs	r0, #3
}
 800312a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
 800312c:	2000      	movs	r0, #0
}
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	00544146 	.word	0x00544146

08003134 <find_volume>:
{
 8003134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8003138:	2300      	movs	r3, #0
{
 800313a:	4607      	mov	r7, r0
 800313c:	b085      	sub	sp, #20
	vol = get_ldnumber(path);
 800313e:	4608      	mov	r0, r1
	*rfs = 0;
 8003140:	603b      	str	r3, [r7, #0]
{
 8003142:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 8003144:	f7ff febe 	bl	8002ec4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003148:	1e05      	subs	r5, r0, #0
 800314a:	f2c0 8101 	blt.w	8003350 <find_volume+0x21c>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800314e:	4bbc      	ldr	r3, [pc, #752]	; (8003440 <find_volume+0x30c>)
 8003150:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003154:	2c00      	cmp	r4, #0
 8003156:	f000 8103 	beq.w	8003360 <find_volume+0x22c>
	*rfs = fs;							/* Return pointer to the file system object */
 800315a:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800315c:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 8003160:	783b      	ldrb	r3, [r7, #0]
 8003162:	b18b      	cbz	r3, 8003188 <find_volume+0x54>
		stat = disk_status(fs->drv);
 8003164:	f241 0301 	movw	r3, #4097	; 0x1001
 8003168:	5ce0      	ldrb	r0, [r4, r3]
 800316a:	f7ff fdd1 	bl	8002d10 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800316e:	07c1      	lsls	r1, r0, #31
 8003170:	d40a      	bmi.n	8003188 <find_volume+0x54>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003172:	2e00      	cmp	r6, #0
 8003174:	f000 80f8 	beq.w	8003368 <find_volume+0x234>
 8003178:	f010 0004 	ands.w	r0, r0, #4
 800317c:	f000 80e5 	beq.w	800334a <find_volume+0x216>
				return FR_WRITE_PROTECTED;
 8003180:	200a      	movs	r0, #10
}
 8003182:	b005      	add	sp, #20
 8003184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8003188:	2200      	movs	r2, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800318a:	f241 0301 	movw	r3, #4097	; 0x1001
 800318e:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8003190:	703a      	strb	r2, [r7, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003192:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003194:	f7ff fdc6 	bl	8002d24 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003198:	07c2      	lsls	r2, r0, #31
 800319a:	f100 80dd 	bmi.w	8003358 <find_volume+0x224>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800319e:	b10e      	cbz	r6, 80031a4 <find_volume+0x70>
 80031a0:	0743      	lsls	r3, r0, #29
 80031a2:	d4ed      	bmi.n	8003180 <find_volume+0x4c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 80031a4:	f241 050a 	movw	r5, #4106	; 0x100a
 80031a8:	f241 0301 	movw	r3, #4097	; 0x1001
 80031ac:	1962      	adds	r2, r4, r5
 80031ae:	5ce0      	ldrb	r0, [r4, r3]
 80031b0:	2102      	movs	r1, #2
 80031b2:	f7ff fde3 	bl	8002d7c <disk_ioctl>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	f040 80c6 	bne.w	8003348 <find_volume+0x214>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 80031bc:	5b63      	ldrh	r3, [r4, r5]
 80031be:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80031c2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80031c6:	f200 80bf 	bhi.w	8003348 <find_volume+0x214>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80031ca:	4601      	mov	r1, r0
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff ff7f 	bl	80030d0 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80031d2:	2801      	cmp	r0, #1
 80031d4:	f000 80ca 	beq.w	800336c <find_volume+0x238>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80031d8:	2803      	cmp	r0, #3
 80031da:	f000 80b5 	beq.w	8003348 <find_volume+0x214>
	bsect = 0;
 80031de:	4605      	mov	r5, r0
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 80031e0:	2800      	cmp	r0, #0
 80031e2:	f040 80dc 	bne.w	800339e <find_volume+0x26a>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80031e6:	f241 020a 	movw	r2, #4106	; 0x100a
 80031ea:	7b21      	ldrb	r1, [r4, #12]
 80031ec:	7ae3      	ldrb	r3, [r4, #11]
 80031ee:	5aa2      	ldrh	r2, [r4, r2]
 80031f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f040 80d2 	bne.w	800339e <find_volume+0x26a>
	fs->fsize = fasize;
 80031fa:	f241 0018 	movw	r0, #4120	; 0x1018
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80031fe:	f241 0603 	movw	r6, #4099	; 0x1003
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8003202:	7de1      	ldrb	r1, [r4, #23]
 8003204:	7da2      	ldrb	r2, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8003206:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 800320a:	bf08      	it	eq
 800320c:	6a62      	ldreq	r2, [r4, #36]	; 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800320e:	7c21      	ldrb	r1, [r4, #16]
	fs->fsize = fasize;
 8003210:	5022      	str	r2, [r4, r0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8003212:	1e48      	subs	r0, r1, #1
 8003214:	2801      	cmp	r0, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003216:	55a1      	strb	r1, [r4, r6]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8003218:	f200 80c1 	bhi.w	800339e <find_volume+0x26a>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800321c:	f241 0002 	movw	r0, #4098	; 0x1002
 8003220:	7b66      	ldrb	r6, [r4, #13]
 8003222:	5426      	strb	r6, [r4, r0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003224:	2e00      	cmp	r6, #0
 8003226:	f000 80ba 	beq.w	800339e <find_volume+0x26a>
 800322a:	1e70      	subs	r0, r6, #1
 800322c:	4230      	tst	r0, r6
 800322e:	f040 80b6 	bne.w	800339e <find_volume+0x26a>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003232:	f894 e012 	ldrb.w	lr, [r4, #18]
 8003236:	f894 c011 	ldrb.w	ip, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800323a:	0958      	lsrs	r0, r3, #5
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800323c:	ea4c 2c0e 	orr.w	ip, ip, lr, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003240:	fbbc fef0 	udiv	lr, ip, r0
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003244:	f241 0808 	movw	r8, #4104	; 0x1008
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003248:	fb00 c01e 	mls	r0, r0, lr, ip
 800324c:	b280      	uxth	r0, r0
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800324e:	f824 c008 	strh.w	ip, [r4, r8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003252:	2800      	cmp	r0, #0
 8003254:	f040 80a3 	bne.w	800339e <find_volume+0x26a>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003258:	f894 8014 	ldrb.w	r8, [r4, #20]
 800325c:	7ce0      	ldrb	r0, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800325e:	f894 900f 	ldrb.w	r9, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8003262:	ea50 2008 	orrs.w	r0, r0, r8, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003266:	f894 800e 	ldrb.w	r8, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800326a:	bf08      	it	eq
 800326c:	6a20      	ldreq	r0, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800326e:	ea58 2809 	orrs.w	r8, r8, r9, lsl #8
 8003272:	f000 8094 	beq.w	800339e <find_volume+0x26a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003276:	fb02 f101 	mul.w	r1, r2, r1
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800327a:	44c6      	add	lr, r8
 800327c:	448e      	add	lr, r1
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800327e:	4570      	cmp	r0, lr
 8003280:	f0c0 808d 	bcc.w	800339e <find_volume+0x26a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003284:	eba0 000e 	sub.w	r0, r0, lr
 8003288:	fbb0 f6f6 	udiv	r6, r0, r6
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800328c:	2e00      	cmp	r6, #0
 800328e:	f000 8086 	beq.w	800339e <find_volume+0x26a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003292:	f640 7bf5 	movw	fp, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003296:	f64f 79f5 	movw	r9, #65525	; 0xfff5
 800329a:	eb0e 0a05 	add.w	sl, lr, r5
	fmt = FS_FAT12;
 800329e:	455e      	cmp	r6, fp
 80032a0:	bf8c      	ite	hi
 80032a2:	f04f 0e02 	movhi.w	lr, #2
 80032a6:	f04f 0e01 	movls.w	lr, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80032aa:	454e      	cmp	r6, r9
 80032ac:	eb08 0005 	add.w	r0, r8, r5
 80032b0:	f106 0802 	add.w	r8, r6, #2
 80032b4:	d97c      	bls.n	80033b0 <find_volume+0x27c>
	fs->volbase = bsect;								/* Volume start sector */
 80032b6:	f241 061c 	movw	r6, #4124	; 0x101c
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80032ba:	f241 0e14 	movw	lr, #4116	; 0x1014
	fs->database = bsect + sysect;						/* Data start sector */
 80032be:	f241 0128 	movw	r1, #4136	; 0x1028
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80032c2:	f844 800e 	str.w	r8, [r4, lr]
	fs->volbase = bsect;								/* Volume start sector */
 80032c6:	51a5      	str	r5, [r4, r6]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80032c8:	f504 5681 	add.w	r6, r4, #4128	; 0x1020
 80032cc:	6030      	str	r0, [r6, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80032ce:	f844 a001 	str.w	sl, [r4, r1]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80032d2:	f1bc 0f00 	cmp.w	ip, #0
 80032d6:	d162      	bne.n	800339e <find_volume+0x26a>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80032de:	fbb1 f3f3 	udiv	r3, r1, r3
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80032e2:	f241 0124 	movw	r1, #4132	; 0x1024
 80032e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80032e8:	429a      	cmp	r2, r3
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80032ea:	5060      	str	r0, [r4, r1]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80032ec:	d357      	bcc.n	800339e <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	f241 020c 	movw	r2, #4108	; 0x100c
 80032f6:	f241 0610 	movw	r6, #4112	; 0x1010
	fs->fsi_flag = 0x80;
 80032fa:	f241 0105 	movw	r1, #4101	; 0x1005
 80032fe:	2080      	movs	r0, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003300:	51a3      	str	r3, [r4, r6]
 8003302:	50a3      	str	r3, [r4, r2]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8003304:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8003308:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
	fs->fsi_flag = 0x80;
 800330c:	5460      	strb	r0, [r4, r1]
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800330e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003312:	2b01      	cmp	r3, #1
 8003314:	f000 809a 	beq.w	800344c <find_volume+0x318>
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003318:	f04f 0e03 	mov.w	lr, #3
	fs->id = ++Fsid;	/* File system mount ID */
 800331c:	f241 0506 	movw	r5, #4102	; 0x1006
 8003320:	4948      	ldr	r1, [pc, #288]	; (8003444 <find_volume+0x310>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003322:	4a49      	ldr	r2, [pc, #292]	; (8003448 <find_volume+0x314>)
	fs->id = ++Fsid;	/* File system mount ID */
 8003324:	880b      	ldrh	r3, [r1, #0]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003326:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8003328:	3301      	adds	r3, #1
 800332a:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800332c:	4284      	cmp	r4, r0
	fs->id = ++Fsid;	/* File system mount ID */
 800332e:	800b      	strh	r3, [r1, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
 8003330:	f887 e000 	strb.w	lr, [r7]
	fs->id = ++Fsid;	/* File system mount ID */
 8003334:	5363      	strh	r3, [r4, r5]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003336:	bf04      	itt	eq
 8003338:	2300      	moveq	r3, #0
 800333a:	6013      	streq	r3, [r2, #0]
 800333c:	68d3      	ldr	r3, [r2, #12]
 800333e:	2000      	movs	r0, #0
 8003340:	429c      	cmp	r4, r3
 8003342:	d102      	bne.n	800334a <find_volume+0x216>
 8003344:	60d0      	str	r0, [r2, #12]
 8003346:	e000      	b.n	800334a <find_volume+0x216>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8003348:	2001      	movs	r0, #1
}
 800334a:	b005      	add	sp, #20
 800334c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8003350:	200b      	movs	r0, #11
}
 8003352:	b005      	add	sp, #20
 8003354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003358:	2003      	movs	r0, #3
}
 800335a:	b005      	add	sp, #20
 800335c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003360:	200c      	movs	r0, #12
}
 8003362:	b005      	add	sp, #20
 8003364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return FR_OK;				/* The file system object is valid */
 8003368:	4630      	mov	r0, r6
 800336a:	e7ee      	b.n	800334a <find_volume+0x216>
 800336c:	466e      	mov	r6, sp
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800336e:	4631      	mov	r1, r6
 8003370:	f504 73e3 	add.w	r3, r4, #454	; 0x1c6
 8003374:	f204 2006 	addw	r0, r4, #518	; 0x206
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003378:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800337c:	b102      	cbz	r2, 8003380 <find_volume+0x24c>
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003382:	4283      	cmp	r3, r0
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003384:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003388:	d1f6      	bne.n	8003378 <find_volume+0x244>
 800338a:	f106 0810 	add.w	r8, r6, #16
			bsect = br[i];
 800338e:	f856 5b04 	ldr.w	r5, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003392:	b935      	cbnz	r5, 80033a2 <find_volume+0x26e>
 8003394:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003396:	4546      	cmp	r6, r8
 8003398:	d1f9      	bne.n	800338e <find_volume+0x25a>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800339a:	2803      	cmp	r0, #3
 800339c:	d0d4      	beq.n	8003348 <find_volume+0x214>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800339e:	200d      	movs	r0, #13
 80033a0:	e7d3      	b.n	800334a <find_volume+0x216>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80033a2:	4629      	mov	r1, r5
 80033a4:	4620      	mov	r0, r4
 80033a6:	f7ff fe93 	bl	80030d0 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d1f3      	bne.n	8003396 <find_volume+0x262>
 80033ae:	e71a      	b.n	80031e6 <find_volume+0xb2>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80033b0:	f241 0b14 	movw	fp, #4116	; 0x1014
	fs->volbase = bsect;								/* Volume start sector */
 80033b4:	f241 091c 	movw	r9, #4124	; 0x101c
	fs->database = bsect + sysect;						/* Data start sector */
 80033b8:	f241 0628 	movw	r6, #4136	; 0x1028
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80033bc:	f844 800b 	str.w	r8, [r4, fp]
	fs->volbase = bsect;								/* Volume start sector */
 80033c0:	f844 5009 	str.w	r5, [r4, r9]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80033c4:	f504 5581 	add.w	r5, r4, #4128	; 0x1020
 80033c8:	6028      	str	r0, [r5, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 80033ca:	f844 a006 	str.w	sl, [r4, r6]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80033ce:	f1bc 0f00 	cmp.w	ip, #0
 80033d2:	d0e4      	beq.n	800339e <find_volume+0x26a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80033d4:	f241 0524 	movw	r5, #4132	; 0x1024
 80033d8:	4401      	add	r1, r0
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80033da:	f1be 0f02 	cmp.w	lr, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80033de:	5161      	str	r1, [r4, r5]
 80033e0:	f103 30ff 	add.w	r0, r3, #4294967295
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80033e4:	d019      	beq.n	800341a <find_volume+0x2e6>
 80033e6:	f008 0101 	and.w	r1, r8, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80033ea:	4401      	add	r1, r0
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80033ec:	eb08 0848 	add.w	r8, r8, r8, lsl #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80033f0:	eb01 0158 	add.w	r1, r1, r8, lsr #1
 80033f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d3d0      	bcc.n	800339e <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	f241 0510 	movw	r5, #4112	; 0x1010
 8003404:	f241 000c 	movw	r0, #4108	; 0x100c
	fs->fsi_flag = 0x80;
 8003408:	f241 0205 	movw	r2, #4101	; 0x1005
 800340c:	2180      	movs	r1, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800340e:	5163      	str	r3, [r4, r5]
	fs->fsi_flag = 0x80;
 8003410:	f04f 0e01 	mov.w	lr, #1
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003414:	5023      	str	r3, [r4, r0]
	fs->fsi_flag = 0x80;
 8003416:	54a1      	strb	r1, [r4, r2]
 8003418:	e780      	b.n	800331c <find_volume+0x1e8>
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800341a:	eb00 0148 	add.w	r1, r0, r8, lsl #1
 800341e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003422:	4293      	cmp	r3, r2
 8003424:	d8bb      	bhi.n	800339e <find_volume+0x26a>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003426:	f04f 33ff 	mov.w	r3, #4294967295
 800342a:	f241 0510 	movw	r5, #4112	; 0x1010
 800342e:	f241 000c 	movw	r0, #4108	; 0x100c
	fs->fsi_flag = 0x80;
 8003432:	f241 0205 	movw	r2, #4101	; 0x1005
 8003436:	2180      	movs	r1, #128	; 0x80
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003438:	5163      	str	r3, [r4, r5]
 800343a:	5023      	str	r3, [r4, r0]
	fs->fsi_flag = 0x80;
 800343c:	54a1      	strb	r1, [r4, r2]
 800343e:	e76d      	b.n	800331c <find_volume+0x1e8>
 8003440:	20000048 	.word	0x20000048
 8003444:	20000064 	.word	0x20000064
 8003448:	2000004c 	.word	0x2000004c
	if (sector != fs->winsect) {	/* Window offset changed? */
 800344c:	f241 032c 	movw	r3, #4140	; 0x102c
 8003450:	58e3      	ldr	r3, [r4, r3]
		&& move_window(fs, bsect + 1) == FR_OK)
 8003452:	1c69      	adds	r1, r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003454:	4299      	cmp	r1, r3
 8003456:	d12a      	bne.n	80034ae <find_volume+0x37a>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003458:	f64a 2255 	movw	r2, #43605	; 0xaa55
		fs->fsi_flag = 0;
 800345c:	f241 0005 	movw	r0, #4101	; 0x1005
 8003460:	2500      	movs	r5, #0
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003462:	f894 11ff 	ldrb.w	r1, [r4, #511]	; 0x1ff
 8003466:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
		fs->fsi_flag = 0;
 800346a:	5425      	strb	r5, [r4, r0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800346c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003470:	4293      	cmp	r3, r2
 8003472:	f47f af51 	bne.w	8003318 <find_volume+0x1e4>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8003476:	4b11      	ldr	r3, [pc, #68]	; (80034bc <find_volume+0x388>)
 8003478:	6822      	ldr	r2, [r4, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	f47f af4c 	bne.w	8003318 <find_volume+0x1e4>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8003480:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8003484:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003488:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800348c:	3320      	adds	r3, #32
 800348e:	429a      	cmp	r2, r3
 8003490:	f47f af42 	bne.w	8003318 <find_volume+0x1e4>
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8003494:	f241 0110 	movw	r1, #4112	; 0x1010
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003498:	f241 030c 	movw	r3, #4108	; 0x100c
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800349c:	f8d4 01e8 	ldr.w	r0, [r4, #488]	; 0x1e8
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80034a0:	f8d4 21ec 	ldr.w	r2, [r4, #492]	; 0x1ec
 80034a4:	f04f 0e03 	mov.w	lr, #3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80034a8:	5060      	str	r0, [r4, r1]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80034aa:	50e2      	str	r2, [r4, r3]
 80034ac:	e736      	b.n	800331c <find_volume+0x1e8>
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7ff fdf0 	bl	8003094 <move_window.part.3>
		&& move_window(fs, bsect + 1) == FR_OK)
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d0cf      	beq.n	8003458 <find_volume+0x324>
 80034b8:	e72e      	b.n	8003318 <find_volume+0x1e4>
 80034ba:	bf00      	nop
 80034bc:	41615252 	.word	0x41615252

080034c0 <get_fat.part.6>:
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80034c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 80034c4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80034c8:	781b      	ldrb	r3, [r3, #0]
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80034ca:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 80034cc:	2b02      	cmp	r3, #2
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
 80034ce:	460e      	mov	r6, r1
		switch (fs->fs_type) {
 80034d0:	d052      	beq.n	8003578 <get_fat.part.6+0xb8>
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d02d      	beq.n	8003532 <get_fat.part.6+0x72>
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d002      	beq.n	80034e0 <get_fat.part.6+0x20>
			val = 1;	/* Internal error */
 80034da:	2001      	movs	r0, #1
}
 80034dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80034e0:	f241 0a0a 	movw	sl, #4106	; 0x100a
 80034e4:	f830 300a 	ldrh.w	r3, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 80034e8:	eb01 0851 	add.w	r8, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80034ec:	f241 072c 	movw	r7, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80034f0:	fbb8 f5f3 	udiv	r5, r8, r3
 80034f4:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 80034f8:	f8d9 2000 	ldr.w	r2, [r9]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80034fc:	f850 c007 	ldr.w	ip, [r0, r7]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003500:	18a9      	adds	r1, r5, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003502:	4561      	cmp	r1, ip
 8003504:	d15c      	bne.n	80035c0 <get_fat.part.6+0x100>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003506:	f108 0701 	add.w	r7, r8, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800350a:	fbb7 f0f3 	udiv	r0, r7, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 800350e:	fb03 8515 	mls	r5, r3, r5, r8
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003512:	1881      	adds	r1, r0, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003514:	4561      	cmp	r1, ip
			wc = fs->win.d8[bc++ % SS(fs)];
 8003516:	5d65      	ldrb	r5, [r4, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003518:	d15e      	bne.n	80035d8 <get_fat.part.6+0x118>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800351a:	fb03 7310 	mls	r3, r3, r0, r7
 800351e:	5ce0      	ldrb	r0, [r4, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003520:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8003522:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003526:	bf4c      	ite	mi
 8003528:	0900      	lsrmi	r0, r0, #4
 800352a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800352e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003532:	f241 050a 	movw	r5, #4106	; 0x100a
 8003536:	5b42      	ldrh	r2, [r0, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003538:	f241 032c 	movw	r3, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800353c:	0891      	lsrs	r1, r2, #2
 800353e:	fbb6 f1f1 	udiv	r1, r6, r1
 8003542:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
 8003546:	683f      	ldr	r7, [r7, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003548:	58c3      	ldr	r3, [r0, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800354a:	4439      	add	r1, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 800354c:	4299      	cmp	r1, r3
 800354e:	d132      	bne.n	80035b6 <get_fat.part.6+0xf6>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003550:	00b6      	lsls	r6, r6, #2
 8003552:	fbb6 f3f2 	udiv	r3, r6, r2
 8003556:	fb02 6613 	mls	r6, r2, r3, r6
 800355a:	19a3      	adds	r3, r4, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800355c:	7898      	ldrb	r0, [r3, #2]
 800355e:	78d9      	ldrb	r1, [r3, #3]
 8003560:	5da2      	ldrb	r2, [r4, r6]
 8003562:	0400      	lsls	r0, r0, #16
 8003564:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	4310      	orrs	r0, r2
 800356c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003570:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8003574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003578:	f241 050a 	movw	r5, #4106	; 0x100a
 800357c:	5b42      	ldrh	r2, [r0, r5]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800357e:	f241 032c 	movw	r3, #4140	; 0x102c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003582:	0851      	lsrs	r1, r2, #1
 8003584:	fbb6 f1f1 	udiv	r1, r6, r1
 8003588:	f500 5781 	add.w	r7, r0, #4128	; 0x1020
 800358c:	683f      	ldr	r7, [r7, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800358e:	58c3      	ldr	r3, [r0, r3]
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003590:	4439      	add	r1, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003592:	4299      	cmp	r1, r3
 8003594:	d003      	beq.n	800359e <get_fat.part.6+0xde>
 8003596:	f7ff fd7d 	bl	8003094 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800359a:	bb38      	cbnz	r0, 80035ec <get_fat.part.6+0x12c>
 800359c:	5b62      	ldrh	r2, [r4, r5]
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800359e:	0076      	lsls	r6, r6, #1
 80035a0:	fbb6 f3f2 	udiv	r3, r6, r2
 80035a4:	fb02 6613 	mls	r6, r2, r3, r6
			val = LD_WORD(p);
 80035a8:	19a3      	adds	r3, r4, r6
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	5da0      	ldrb	r0, [r4, r6]
 80035ae:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80035b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b6:	f7ff fd6d 	bl	8003094 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80035ba:	b9b8      	cbnz	r0, 80035ec <get_fat.part.6+0x12c>
 80035bc:	5b62      	ldrh	r2, [r4, r5]
 80035be:	e7c7      	b.n	8003550 <get_fat.part.6+0x90>
 80035c0:	f7ff fd68 	bl	8003094 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035c4:	b990      	cbnz	r0, 80035ec <get_fat.part.6+0x12c>
 80035c6:	f834 300a 	ldrh.w	r3, [r4, sl]
 80035ca:	f8d9 2000 	ldr.w	r2, [r9]
 80035ce:	fbb8 f5f3 	udiv	r5, r8, r3
 80035d2:	f854 c007 	ldr.w	ip, [r4, r7]
 80035d6:	e796      	b.n	8003506 <get_fat.part.6+0x46>
 80035d8:	4620      	mov	r0, r4
 80035da:	f7ff fd5b 	bl	8003094 <move_window.part.3>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035de:	b928      	cbnz	r0, 80035ec <get_fat.part.6+0x12c>
 80035e0:	f241 030a 	movw	r3, #4106	; 0x100a
 80035e4:	5ae3      	ldrh	r3, [r4, r3]
 80035e6:	fbb7 f0f3 	udiv	r0, r7, r3
 80035ea:	e796      	b.n	800351a <get_fat.part.6+0x5a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80035f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080035f4 <dir_sdi>:
{
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	460d      	mov	r5, r1
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80035f8:	6881      	ldr	r1, [r0, #8]
	dp->index = (WORD)idx;	/* Current index */
 80035fa:	80c5      	strh	r5, [r0, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80035fc:	2901      	cmp	r1, #1
 80035fe:	d029      	beq.n	8003654 <dir_sdi+0x60>
 8003600:	f241 0214 	movw	r2, #4116	; 0x1014
 8003604:	6803      	ldr	r3, [r0, #0]
 8003606:	4604      	mov	r4, r0
 8003608:	589a      	ldr	r2, [r3, r2]
 800360a:	428a      	cmp	r2, r1
 800360c:	d922      	bls.n	8003654 <dir_sdi+0x60>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800360e:	b319      	cbz	r1, 8003658 <dir_sdi+0x64>
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003610:	f241 000a 	movw	r0, #4106	; 0x100a
 8003614:	f241 0602 	movw	r6, #4098	; 0x1002
 8003618:	5a18      	ldrh	r0, [r3, r0]
 800361a:	5d9e      	ldrb	r6, [r3, r6]
 800361c:	0940      	lsrs	r0, r0, #5
 800361e:	fb06 f600 	mul.w	r6, r6, r0
		while (idx >= ic) {	/* Follow cluster chain */
 8003622:	42b5      	cmp	r5, r6
 8003624:	d33e      	bcc.n	80036a4 <dir_sdi+0xb0>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003626:	2901      	cmp	r1, #1
 8003628:	d914      	bls.n	8003654 <dir_sdi+0x60>
 800362a:	428a      	cmp	r2, r1
 800362c:	d912      	bls.n	8003654 <dir_sdi+0x60>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800362e:	f241 0714 	movw	r7, #4116	; 0x1014
 8003632:	e001      	b.n	8003638 <dir_sdi+0x44>
		while (idx >= ic) {	/* Follow cluster chain */
 8003634:	42ae      	cmp	r6, r5
 8003636:	d835      	bhi.n	80036a4 <dir_sdi+0xb0>
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff41 	bl	80034c0 <get_fat.part.6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800363e:	1c43      	adds	r3, r0, #1
 8003640:	4601      	mov	r1, r0
			idx -= ic;
 8003642:	eba5 0506 	sub.w	r5, r5, r6
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003646:	d03c      	beq.n	80036c2 <dir_sdi+0xce>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003648:	2801      	cmp	r0, #1
 800364a:	d903      	bls.n	8003654 <dir_sdi+0x60>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	59da      	ldr	r2, [r3, r7]
 8003650:	4282      	cmp	r2, r0
 8003652:	d8ef      	bhi.n	8003634 <dir_sdi+0x40>
	if (!sect) return FR_INT_ERR;
 8003654:	2002      	movs	r0, #2
}
 8003656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003658:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 800365c:	7800      	ldrb	r0, [r0, #0]
 800365e:	2803      	cmp	r0, #3
 8003660:	d019      	beq.n	8003696 <dir_sdi+0xa2>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003662:	f241 0208 	movw	r2, #4104	; 0x1008
 8003666:	5a9a      	ldrh	r2, [r3, r2]
 8003668:	42aa      	cmp	r2, r5
 800366a:	d9f3      	bls.n	8003654 <dir_sdi+0x60>
		sect = dp->fs->dirbase;
 800366c:	f241 0224 	movw	r2, #4132	; 0x1024
 8003670:	589e      	ldr	r6, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 8003672:	60e1      	str	r1, [r4, #12]
	if (!sect) return FR_INT_ERR;
 8003674:	2e00      	cmp	r6, #0
 8003676:	d0ed      	beq.n	8003654 <dir_sdi+0x60>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003678:	f241 020a 	movw	r2, #4106	; 0x100a
 800367c:	5a9a      	ldrh	r2, [r3, r2]
	return FR_OK;
 800367e:	2000      	movs	r0, #0
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003680:	0952      	lsrs	r2, r2, #5
 8003682:	fbb5 f1f2 	udiv	r1, r5, r2
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003686:	fb02 5511 	mls	r5, r2, r1, r5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800368a:	4431      	add	r1, r6
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800368c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003690:	e9c4 1304 	strd	r1, r3, [r4, #16]
}
 8003694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = dp->fs->dirbase;
 8003696:	f241 0024 	movw	r0, #4132	; 0x1024
 800369a:	5818      	ldr	r0, [r3, r0]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800369c:	2800      	cmp	r0, #0
 800369e:	d0e0      	beq.n	8003662 <dir_sdi+0x6e>
 80036a0:	4601      	mov	r1, r0
 80036a2:	e7b5      	b.n	8003610 <dir_sdi+0x1c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80036a4:	3a02      	subs	r2, #2
	clst -= 2;
 80036a6:	1e88      	subs	r0, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80036a8:	4290      	cmp	r0, r2
 80036aa:	d301      	bcc.n	80036b0 <dir_sdi+0xbc>
	dp->clust = clst;	/* Current cluster# */
 80036ac:	60e1      	str	r1, [r4, #12]
 80036ae:	e7d1      	b.n	8003654 <dir_sdi+0x60>
	return clst * fs->csize + fs->database;
 80036b0:	f241 0602 	movw	r6, #4098	; 0x1002
 80036b4:	f241 0228 	movw	r2, #4136	; 0x1028
 80036b8:	5d9e      	ldrb	r6, [r3, r6]
 80036ba:	589a      	ldr	r2, [r3, r2]
 80036bc:	fb00 2606 	mla	r6, r0, r6, r2
 80036c0:	e7d7      	b.n	8003672 <dir_sdi+0x7e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80036c2:	2001      	movs	r0, #1
}
 80036c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c6:	bf00      	nop

080036c8 <put_fat.part.7>:
FRESULT put_fat (
 80036c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		switch (fs->fs_type) {
 80036cc:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80036d0:	781b      	ldrb	r3, [r3, #0]
FRESULT put_fat (
 80036d2:	4604      	mov	r4, r0
		switch (fs->fs_type) {
 80036d4:	2b02      	cmp	r3, #2
FRESULT put_fat (
 80036d6:	460d      	mov	r5, r1
 80036d8:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 80036da:	d075      	beq.n	80037c8 <put_fat.part.7+0x100>
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d046      	beq.n	800376e <put_fat.part.7+0xa6>
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d002      	beq.n	80036ea <put_fat.part.7+0x22>
			res = FR_INT_ERR;
 80036e4:	2002      	movs	r0, #2
}
 80036e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80036ea:	f241 0a0a 	movw	sl, #4106	; 0x100a
 80036ee:	f830 c00a 	ldrh.w	ip, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 80036f2:	eb01 0751 	add.w	r7, r1, r1, lsr #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80036f6:	f241 082c 	movw	r8, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80036fa:	fbb7 f3fc 	udiv	r3, r7, ip
 80036fe:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 8003702:	f8d9 2000 	ldr.w	r2, [r9]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003706:	f850 e008 	ldr.w	lr, [r0, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800370a:	1899      	adds	r1, r3, r2
	if (sector != fs->winsect) {	/* Window offset changed? */
 800370c:	4571      	cmp	r1, lr
 800370e:	f040 8082 	bne.w	8003816 <put_fat.part.7+0x14e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003712:	f107 0801 	add.w	r8, r7, #1
 8003716:	fbb8 f0fc 	udiv	r0, r8, ip
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800371a:	07ed      	lsls	r5, r5, #31
 800371c:	eb00 0102 	add.w	r1, r0, r2
			p = &fs->win.d8[bc++ % SS(fs)];
 8003720:	fb0c 7313 	mls	r3, ip, r3, r7
			fs->wflag = 1;
 8003724:	f241 0204 	movw	r2, #4100	; 0x1004
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003728:	f140 808a 	bpl.w	8003840 <put_fat.part.7+0x178>
			fs->wflag = 1;
 800372c:	2701      	movs	r7, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800372e:	5ce5      	ldrb	r5, [r4, r3]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003730:	458e      	cmp	lr, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003732:	f005 050f 	and.w	r5, r5, #15
 8003736:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 800373a:	54e5      	strb	r5, [r4, r3]
			fs->wflag = 1;
 800373c:	54a7      	strb	r7, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800373e:	d009      	beq.n	8003754 <put_fat.part.7+0x8c>
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fca7 	bl	8003094 <move_window.part.3>
			if (res != FR_OK) break;
 8003746:	2800      	cmp	r0, #0
 8003748:	d1cd      	bne.n	80036e6 <put_fat.part.7+0x1e>
			p = &fs->win.d8[bc % SS(fs)];
 800374a:	f241 030a 	movw	r3, #4106	; 0x100a
 800374e:	5ae0      	ldrh	r0, [r4, r3]
 8003750:	fbb8 fcf0 	udiv	ip, r8, r0
 8003754:	fb00 8c1c 	mls	ip, r0, ip, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003758:	f3c6 1207 	ubfx	r2, r6, #4, #8
			fs->wflag = 1;
 800375c:	f241 0304 	movw	r3, #4100	; 0x1004
 8003760:	2101      	movs	r1, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003762:	f804 200c 	strb.w	r2, [r4, ip]
			fs->wflag = 1;
 8003766:	54e1      	strb	r1, [r4, r3]
 8003768:	2000      	movs	r0, #0
}
 800376a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800376e:	f241 070a 	movw	r7, #4106	; 0x100a
 8003772:	5bc2      	ldrh	r2, [r0, r7]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003774:	f241 032c 	movw	r3, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003778:	0891      	lsrs	r1, r2, #2
 800377a:	fbb5 f1f1 	udiv	r1, r5, r1
 800377e:	f500 5c81 	add.w	ip, r0, #4128	; 0x1020
 8003782:	f8dc c000 	ldr.w	ip, [ip]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003786:	58c3      	ldr	r3, [r0, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003788:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 800378a:	4299      	cmp	r1, r3
 800378c:	d151      	bne.n	8003832 <put_fat.part.7+0x16a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800378e:	00ad      	lsls	r5, r5, #2
 8003790:	fbb5 f3f2 	udiv	r3, r5, r2
			fs->wflag = 1;
 8003794:	f241 0704 	movw	r7, #4100	; 0x1004
 8003798:	f04f 0c01 	mov.w	ip, #1
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800379c:	fb02 5513 	mls	r5, r2, r3, r5
 80037a0:	1961      	adds	r1, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 80037a2:	78cb      	ldrb	r3, [r1, #3]
			fs->wflag = 1;
 80037a4:	2000      	movs	r0, #0
			val |= LD_DWORD(p) & 0xF0000000;
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037ac:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 80037b0:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80037b4:	5562      	strb	r2, [r4, r5]
 80037b6:	704b      	strb	r3, [r1, #1]
 80037b8:	0c13      	lsrs	r3, r2, #16
 80037ba:	0e12      	lsrs	r2, r2, #24
 80037bc:	708b      	strb	r3, [r1, #2]
 80037be:	70ca      	strb	r2, [r1, #3]
			fs->wflag = 1;
 80037c0:	f804 c007 	strb.w	ip, [r4, r7]
}
 80037c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80037c8:	f241 070a 	movw	r7, #4106	; 0x100a
 80037cc:	5bc2      	ldrh	r2, [r0, r7]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80037ce:	f241 032c 	movw	r3, #4140	; 0x102c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80037d2:	0851      	lsrs	r1, r2, #1
 80037d4:	fbb5 f1f1 	udiv	r1, r5, r1
 80037d8:	f500 5c81 	add.w	ip, r0, #4128	; 0x1020
 80037dc:	f8dc c000 	ldr.w	ip, [ip]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80037e0:	58c3      	ldr	r3, [r0, r3]
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80037e2:	4461      	add	r1, ip
	if (sector != fs->winsect) {	/* Window offset changed? */
 80037e4:	4299      	cmp	r1, r3
 80037e6:	d005      	beq.n	80037f4 <put_fat.part.7+0x12c>
 80037e8:	f7ff fc54 	bl	8003094 <move_window.part.3>
			if (res != FR_OK) break;
 80037ec:	2800      	cmp	r0, #0
 80037ee:	f47f af7a 	bne.w	80036e6 <put_fat.part.7+0x1e>
 80037f2:	5be2      	ldrh	r2, [r4, r7]
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80037f4:	006d      	lsls	r5, r5, #1
 80037f6:	fbb5 f3f2 	udiv	r3, r5, r2
			fs->wflag = 1;
 80037fa:	f241 0104 	movw	r1, #4100	; 0x1004
 80037fe:	2701      	movs	r7, #1
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003800:	fb02 5513 	mls	r5, r2, r3, r5
			ST_WORD(p, (WORD)val);
 8003804:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8003808:	5566      	strb	r6, [r4, r5]
 800380a:	4425      	add	r5, r4
 800380c:	706b      	strb	r3, [r5, #1]
			fs->wflag = 1;
 800380e:	5467      	strb	r7, [r4, r1]
 8003810:	2000      	movs	r0, #0
}
 8003812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003816:	f7ff fc3d 	bl	8003094 <move_window.part.3>
			if (res != FR_OK) break;
 800381a:	2800      	cmp	r0, #0
 800381c:	f47f af63 	bne.w	80036e6 <put_fat.part.7+0x1e>
 8003820:	f834 c00a 	ldrh.w	ip, [r4, sl]
 8003824:	f8d9 2000 	ldr.w	r2, [r9]
 8003828:	fbb7 f3fc 	udiv	r3, r7, ip
 800382c:	f854 e008 	ldr.w	lr, [r4, r8]
 8003830:	e76f      	b.n	8003712 <put_fat.part.7+0x4a>
 8003832:	f7ff fc2f 	bl	8003094 <move_window.part.3>
			if (res != FR_OK) break;
 8003836:	2800      	cmp	r0, #0
 8003838:	f47f af55 	bne.w	80036e6 <put_fat.part.7+0x1e>
 800383c:	5be2      	ldrh	r2, [r4, r7]
 800383e:	e7a6      	b.n	800378e <put_fat.part.7+0xc6>
			fs->wflag = 1;
 8003840:	2501      	movs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003842:	458e      	cmp	lr, r1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003844:	54e6      	strb	r6, [r4, r3]
			fs->wflag = 1;
 8003846:	54a5      	strb	r5, [r4, r2]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003848:	d109      	bne.n	800385e <put_fat.part.7+0x196>
			p = &fs->win.d8[bc % SS(fs)];
 800384a:	fb00 8c1c 	mls	ip, r0, ip, r8
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800384e:	f814 200c 	ldrb.w	r2, [r4, ip]
 8003852:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8003856:	f022 020f 	bic.w	r2, r2, #15
 800385a:	4332      	orrs	r2, r6
 800385c:	e77e      	b.n	800375c <put_fat.part.7+0x94>
 800385e:	4620      	mov	r0, r4
 8003860:	f7ff fc18 	bl	8003094 <move_window.part.3>
			if (res != FR_OK) break;
 8003864:	2800      	cmp	r0, #0
 8003866:	f47f af3e 	bne.w	80036e6 <put_fat.part.7+0x1e>
			p = &fs->win.d8[bc % SS(fs)];
 800386a:	f241 030a 	movw	r3, #4106	; 0x100a
 800386e:	5ae0      	ldrh	r0, [r4, r3]
 8003870:	fbb8 fcf0 	udiv	ip, r8, r0
 8003874:	e7e9      	b.n	800384a <put_fat.part.7+0x182>
 8003876:	bf00      	nop

08003878 <create_chain>:
{
 8003878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800387c:	4606      	mov	r6, r0
	if (clst == 0) {		/* Create a new chain */
 800387e:	4688      	mov	r8, r1
 8003880:	bb31      	cbnz	r1, 80038d0 <create_chain+0x58>
		scl = fs->last_clust;			/* Get suggested start point */
 8003882:	f241 020c 	movw	r2, #4108	; 0x100c
 8003886:	f241 0314 	movw	r3, #4116	; 0x1014
 800388a:	5885      	ldr	r5, [r0, r2]
 800388c:	58c3      	ldr	r3, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800388e:	bb95      	cbnz	r5, 80038f6 <create_chain+0x7e>
 8003890:	2501      	movs	r5, #1
 8003892:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 8003896:	462c      	mov	r4, r5
 8003898:	3714      	adds	r7, #20
 800389a:	e010      	b.n	80038be <create_chain+0x46>
			if (ncl > scl) return 0;	/* No free cluster */
 800389c:	2d01      	cmp	r5, #1
 800389e:	d92e      	bls.n	80038fe <create_chain+0x86>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d911      	bls.n	80038c8 <create_chain+0x50>
			ncl = 2;
 80038a4:	2402      	movs	r4, #2
 80038a6:	4621      	mov	r1, r4
 80038a8:	4630      	mov	r0, r6
 80038aa:	f7ff fe09 	bl	80034c0 <get_fat.part.6>
		if (cs == 0) break;				/* Found a free cluster */
 80038ae:	b350      	cbz	r0, 8003906 <create_chain+0x8e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80038b0:	1c41      	adds	r1, r0, #1
 80038b2:	d036      	beq.n	8003922 <create_chain+0xaa>
 80038b4:	2801      	cmp	r0, #1
 80038b6:	d007      	beq.n	80038c8 <create_chain+0x50>
		if (ncl == scl) return 0;		/* No free cluster */
 80038b8:	42a5      	cmp	r5, r4
 80038ba:	d020      	beq.n	80038fe <create_chain+0x86>
 80038bc:	683b      	ldr	r3, [r7, #0]
		ncl++;							/* Next cluster */
 80038be:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80038c0:	429c      	cmp	r4, r3
 80038c2:	d2eb      	bcs.n	800389c <create_chain+0x24>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80038c4:	2c01      	cmp	r4, #1
 80038c6:	d8ee      	bhi.n	80038a6 <create_chain+0x2e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80038c8:	2401      	movs	r4, #1
}
 80038ca:	4620      	mov	r0, r4
 80038cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80038d0:	2901      	cmp	r1, #1
 80038d2:	d9f9      	bls.n	80038c8 <create_chain+0x50>
 80038d4:	f241 0514 	movw	r5, #4116	; 0x1014
 80038d8:	5943      	ldr	r3, [r0, r5]
 80038da:	4299      	cmp	r1, r3
 80038dc:	d2f4      	bcs.n	80038c8 <create_chain+0x50>
 80038de:	f7ff fdef 	bl	80034c0 <get_fat.part.6>
		if (cs < 2) return 1;			/* Invalid value */
 80038e2:	2801      	cmp	r0, #1
 80038e4:	4604      	mov	r4, r0
 80038e6:	d9ef      	bls.n	80038c8 <create_chain+0x50>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80038e8:	3001      	adds	r0, #1
 80038ea:	d01a      	beq.n	8003922 <create_chain+0xaa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80038ec:	5973      	ldr	r3, [r6, r5]
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	d8eb      	bhi.n	80038ca <create_chain+0x52>
 80038f2:	4645      	mov	r5, r8
 80038f4:	e7cd      	b.n	8003892 <create_chain+0x1a>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80038f6:	429d      	cmp	r5, r3
 80038f8:	bf28      	it	cs
 80038fa:	2501      	movcs	r5, #1
 80038fc:	e7c9      	b.n	8003892 <create_chain+0x1a>
			if (ncl > scl) return 0;	/* No free cluster */
 80038fe:	2400      	movs	r4, #0
}
 8003900:	4620      	mov	r0, r4
 8003902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003906:	f241 0514 	movw	r5, #4116	; 0x1014
 800390a:	5973      	ldr	r3, [r6, r5]
 800390c:	42a3      	cmp	r3, r4
 800390e:	d9db      	bls.n	80038c8 <create_chain+0x50>
 8003910:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003914:	4621      	mov	r1, r4
 8003916:	4630      	mov	r0, r6
 8003918:	f7ff fed6 	bl	80036c8 <put_fat.part.7>
	if (res == FR_OK && clst != 0) {
 800391c:	b130      	cbz	r0, 800392c <create_chain+0xb4>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800391e:	2801      	cmp	r0, #1
 8003920:	d1d2      	bne.n	80038c8 <create_chain+0x50>
 8003922:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003926:	4620      	mov	r0, r4
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (res == FR_OK && clst != 0) {
 800392c:	f1b8 0f00 	cmp.w	r8, #0
 8003930:	d00c      	beq.n	800394c <create_chain+0xd4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003932:	f1b8 0f01 	cmp.w	r8, #1
 8003936:	d9c7      	bls.n	80038c8 <create_chain+0x50>
 8003938:	5973      	ldr	r3, [r6, r5]
 800393a:	4598      	cmp	r8, r3
 800393c:	d2c4      	bcs.n	80038c8 <create_chain+0x50>
 800393e:	4641      	mov	r1, r8
 8003940:	4622      	mov	r2, r4
 8003942:	4630      	mov	r0, r6
 8003944:	f7ff fec0 	bl	80036c8 <put_fat.part.7>
	if (res == FR_OK) {
 8003948:	2800      	cmp	r0, #0
 800394a:	d1e8      	bne.n	800391e <create_chain+0xa6>
		if (fs->free_clust != 0xFFFFFFFF) {
 800394c:	f241 0110 	movw	r1, #4112	; 0x1010
		fs->last_clust = ncl;			/* Update FSINFO */
 8003950:	f241 020c 	movw	r2, #4108	; 0x100c
		if (fs->free_clust != 0xFFFFFFFF) {
 8003954:	5873      	ldr	r3, [r6, r1]
		fs->last_clust = ncl;			/* Update FSINFO */
 8003956:	50b4      	str	r4, [r6, r2]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	d0b6      	beq.n	80038ca <create_chain+0x52>
			fs->fsi_flag |= 1;
 800395c:	f241 0005 	movw	r0, #4101	; 0x1005
 8003960:	5c32      	ldrb	r2, [r6, r0]
			fs->free_clust--;
 8003962:	3b01      	subs	r3, #1
			fs->fsi_flag |= 1;
 8003964:	f042 0201 	orr.w	r2, r2, #1
			fs->free_clust--;
 8003968:	5073      	str	r3, [r6, r1]
			fs->fsi_flag |= 1;
 800396a:	5432      	strb	r2, [r6, r0]
 800396c:	e7ad      	b.n	80038ca <create_chain+0x52>
 800396e:	bf00      	nop

08003970 <dir_next>:
{
 8003970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8003974:	88c4      	ldrh	r4, [r0, #6]
 8003976:	3401      	adds	r4, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003978:	b2a3      	uxth	r3, r4
 800397a:	2b00      	cmp	r3, #0
 800397c:	d053      	beq.n	8003a26 <dir_next+0xb6>
 800397e:	6902      	ldr	r2, [r0, #16]
 8003980:	2a00      	cmp	r2, #0
 8003982:	d050      	beq.n	8003a26 <dir_next+0xb6>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003984:	f241 030a 	movw	r3, #4106	; 0x100a
 8003988:	4605      	mov	r5, r0
 800398a:	6800      	ldr	r0, [r0, #0]
 800398c:	460e      	mov	r6, r1
 800398e:	5ac3      	ldrh	r3, [r0, r3]
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	fbb4 f7f3 	udiv	r7, r4, r3
 8003996:	fb03 4317 	mls	r3, r3, r7, r4
 800399a:	2b00      	cmp	r3, #0
 800399c:	d137      	bne.n	8003a0e <dir_next+0x9e>
		if (!dp->clust) {		/* Static table */
 800399e:	68e9      	ldr	r1, [r5, #12]
		dp->sect++;					/* Next sector */
 80039a0:	3201      	adds	r2, #1
 80039a2:	612a      	str	r2, [r5, #16]
		if (!dp->clust) {		/* Static table */
 80039a4:	2900      	cmp	r1, #0
 80039a6:	d039      	beq.n	8003a1c <dir_next+0xac>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80039a8:	f241 0202 	movw	r2, #4098	; 0x1002
 80039ac:	5c82      	ldrb	r2, [r0, r2]
 80039ae:	3a01      	subs	r2, #1
 80039b0:	4017      	ands	r7, r2
 80039b2:	d12c      	bne.n	8003a0e <dir_next+0x9e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80039b4:	2901      	cmp	r1, #1
 80039b6:	d939      	bls.n	8003a2c <dir_next+0xbc>
 80039b8:	f241 0814 	movw	r8, #4116	; 0x1014
 80039bc:	f850 3008 	ldr.w	r3, [r0, r8]
 80039c0:	4299      	cmp	r1, r3
 80039c2:	d233      	bcs.n	8003a2c <dir_next+0xbc>
 80039c4:	f7ff fd7c 	bl	80034c0 <get_fat.part.6>
				if (clst <= 1) return FR_INT_ERR;
 80039c8:	2801      	cmp	r0, #1
 80039ca:	4681      	mov	r9, r0
 80039cc:	d92e      	bls.n	8003a2c <dir_next+0xbc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80039ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80039d2:	d07b      	beq.n	8003acc <dir_next+0x15c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80039d4:	6828      	ldr	r0, [r5, #0]
 80039d6:	f850 1008 	ldr.w	r1, [r0, r8]
 80039da:	4549      	cmp	r1, r9
 80039dc:	d928      	bls.n	8003a30 <dir_next+0xc0>
 80039de:	f1a9 0a02 	sub.w	sl, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80039e2:	3902      	subs	r1, #2
 80039e4:	458a      	cmp	sl, r1
				dp->clust = clst;				/* Initialize data for new cluster */
 80039e6:	f8c5 900c 	str.w	r9, [r5, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80039ea:	d271      	bcs.n	8003ad0 <dir_next+0x160>
	return clst * fs->csize + fs->database;
 80039ec:	f241 0202 	movw	r2, #4098	; 0x1002
 80039f0:	f241 0328 	movw	r3, #4136	; 0x1028
 80039f4:	5c82      	ldrb	r2, [r0, r2]
 80039f6:	58c3      	ldr	r3, [r0, r3]
 80039f8:	fb0a 3202 	mla	r2, sl, r2, r3
 80039fc:	f241 030a 	movw	r3, #4106	; 0x100a
 8003a00:	5ac3      	ldrh	r3, [r0, r3]
				dp->sect = clust2sect(dp->fs, clst);
 8003a02:	612a      	str	r2, [r5, #16]
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	fbb4 f2f3 	udiv	r2, r4, r3
 8003a0a:	fb03 4312 	mls	r3, r3, r2, r4
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003a0e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8003a12:	6168      	str	r0, [r5, #20]
	dp->index = (WORD)i;	/* Current index */
 8003a14:	80ec      	strh	r4, [r5, #6]
	return FR_OK;
 8003a16:	2000      	movs	r0, #0
}
 8003a18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003a1c:	f241 0208 	movw	r2, #4104	; 0x1008
 8003a20:	5a82      	ldrh	r2, [r0, r2]
 8003a22:	42a2      	cmp	r2, r4
 8003a24:	d8f3      	bhi.n	8003a0e <dir_next+0x9e>
		return FR_NO_FILE;
 8003a26:	2004      	movs	r0, #4
}
 8003a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst <= 1) return FR_INT_ERR;
 8003a2c:	2002      	movs	r0, #2
 8003a2e:	e7fb      	b.n	8003a28 <dir_next+0xb8>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003a30:	2e00      	cmp	r6, #0
 8003a32:	d0f8      	beq.n	8003a26 <dir_next+0xb6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003a34:	68e9      	ldr	r1, [r5, #12]
 8003a36:	f7ff ff1f 	bl	8003878 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003a3a:	4681      	mov	r9, r0
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d049      	beq.n	8003ad4 <dir_next+0x164>
					if (clst == 1) return FR_INT_ERR;
 8003a40:	2801      	cmp	r0, #1
 8003a42:	d0f3      	beq.n	8003a2c <dir_next+0xbc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003a44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a48:	d040      	beq.n	8003acc <dir_next+0x15c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003a4a:	f241 0204 	movw	r2, #4100	; 0x1004
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003a4e:	682b      	ldr	r3, [r5, #0]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003a50:	5c9a      	ldrb	r2, [r3, r2]
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d14a      	bne.n	8003aec <dir_next+0x17c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003a56:	f241 010a 	movw	r1, #4106	; 0x100a
 8003a5a:	5a59      	ldrh	r1, [r3, r1]
 8003a5c:	461a      	mov	r2, r3
	while (cnt--)
 8003a5e:	b131      	cbz	r1, 8003a6e <dir_next+0xfe>
		*d++ = (BYTE)val;
 8003a60:	2000      	movs	r0, #0
 8003a62:	440b      	add	r3, r1
 8003a64:	f802 0b01 	strb.w	r0, [r2], #1
	while (cnt--)
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1fb      	bne.n	8003a64 <dir_next+0xf4>
 8003a6c:	682b      	ldr	r3, [r5, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a6e:	f241 0214 	movw	r2, #4116	; 0x1014
 8003a72:	589a      	ldr	r2, [r3, r2]
	clst -= 2;
 8003a74:	f1a9 0a02 	sub.w	sl, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a78:	3a02      	subs	r2, #2
 8003a7a:	4592      	cmp	sl, r2
	return clst * fs->csize + fs->database;
 8003a7c:	bf38      	it	cc
 8003a7e:	f241 0228 	movwcc	r2, #4136	; 0x1028
 8003a82:	f241 0102 	movw	r1, #4098	; 0x1002
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003a86:	bf28      	it	cs
 8003a88:	2200      	movcs	r2, #0
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003a8a:	f241 0b2c 	movw	fp, #4140	; 0x102c
 8003a8e:	5c59      	ldrb	r1, [r3, r1]
	return clst * fs->csize + fs->database;
 8003a90:	bf3c      	itt	cc
 8003a92:	589a      	ldrcc	r2, [r3, r2]
 8003a94:	fb0a 2201 	mlacc	r2, sl, r1, r2
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003a98:	f843 200b 	str.w	r2, [r3, fp]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003a9c:	b1e1      	cbz	r1, 8003ad8 <dir_next+0x168>
						dp->fs->wflag = 1;
 8003a9e:	f241 0804 	movw	r8, #4100	; 0x1004
 8003aa2:	2601      	movs	r6, #1
 8003aa4:	e00a      	b.n	8003abc <dir_next+0x14c>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003aa6:	f241 0102 	movw	r1, #4098	; 0x1002
						dp->fs->winsect++;
 8003aaa:	682b      	ldr	r3, [r5, #0]
 8003aac:	f853 200b 	ldr.w	r2, [r3, fp]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003ab0:	5c59      	ldrb	r1, [r3, r1]
						dp->fs->winsect++;
 8003ab2:	3201      	adds	r2, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003ab4:	42b9      	cmp	r1, r7
						dp->fs->winsect++;
 8003ab6:	f843 200b 	str.w	r2, [r3, fp]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003aba:	d90d      	bls.n	8003ad8 <dir_next+0x168>
						dp->fs->wflag = 1;
 8003abc:	f803 6008 	strb.w	r6, [r3, r8]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fa41 	bl	8002f48 <sync_window.part.2>
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003ac6:	3701      	adds	r7, #1
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d0ec      	beq.n	8003aa6 <dir_next+0x136>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003acc:	2001      	movs	r0, #1
 8003ace:	e7ab      	b.n	8003a28 <dir_next+0xb8>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	e793      	b.n	80039fc <dir_next+0x8c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003ad4:	2007      	movs	r0, #7
 8003ad6:	e7a7      	b.n	8003a28 <dir_next+0xb8>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003ad8:	f241 062c 	movw	r6, #4140	; 0x102c
 8003adc:	f241 0114 	movw	r1, #4116	; 0x1014
 8003ae0:	599a      	ldr	r2, [r3, r6]
 8003ae2:	5859      	ldr	r1, [r3, r1]
 8003ae4:	1bd2      	subs	r2, r2, r7
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	519a      	str	r2, [r3, r6]
 8003aea:	e77a      	b.n	80039e2 <dir_next+0x72>
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fa2b 	bl	8002f48 <sync_window.part.2>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d1ea      	bne.n	8003acc <dir_next+0x15c>
 8003af6:	682b      	ldr	r3, [r5, #0]
 8003af8:	e7ad      	b.n	8003a56 <dir_next+0xe6>
 8003afa:	bf00      	nop

08003afc <dir_find.part.8>:
FRESULT dir_find (
 8003afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b04:	f04f 08ff 	mov.w	r8, #255	; 0xff
FRESULT dir_find (
 8003b08:	b083      	sub	sp, #12
 8003b0a:	4604      	mov	r4, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003b0c:	4645      	mov	r5, r8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b0e:	f241 072c 	movw	r7, #4140	; 0x102c
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003b12:	8483      	strh	r3, [r0, #36]	; 0x24
 8003b14:	e00a      	b.n	8003b2c <dir_find.part.8+0x30>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003b16:	290f      	cmp	r1, #15
 8003b18:	d031      	beq.n	8003b7e <dir_find.part.8+0x82>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b1e:	25ff      	movs	r5, #255	; 0xff
 8003b20:	84a3      	strh	r3, [r4, #36]	; 0x24
		res = dir_next(dp, 0);		/* Next entry */
 8003b22:	2100      	movs	r1, #0
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7ff ff23 	bl	8003970 <dir_next>
	} while (res == FR_OK);
 8003b2a:	bb28      	cbnz	r0, 8003b78 <dir_find.part.8+0x7c>
		res = move_window(dp->fs, dp->sect);
 8003b2c:	6820      	ldr	r0, [r4, #0]
 8003b2e:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003b30:	59c3      	ldr	r3, [r0, r7]
 8003b32:	4299      	cmp	r1, r3
 8003b34:	d002      	beq.n	8003b3c <dir_find.part.8+0x40>
 8003b36:	f7ff faad 	bl	8003094 <move_window.part.3>
		if (res != FR_OK) break;
 8003b3a:	b9e8      	cbnz	r0, 8003b78 <dir_find.part.8+0x7c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003b3c:	6966      	ldr	r6, [r4, #20]
		c = dir[DIR_Name];
 8003b3e:	7832      	ldrb	r2, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003b40:	2a00      	cmp	r2, #0
 8003b42:	d044      	beq.n	8003bce <dir_find.part.8+0xd2>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003b44:	2ae5      	cmp	r2, #229	; 0xe5
 8003b46:	d0e8      	beq.n	8003b1a <dir_find.part.8+0x1e>
		a = dir[DIR_Attr] & AM_MASK;
 8003b48:	7af3      	ldrb	r3, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003b4a:	0718      	lsls	r0, r3, #28
		a = dir[DIR_Attr] & AM_MASK;
 8003b4c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003b50:	d4e1      	bmi.n	8003b16 <dir_find.part.8+0x1a>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003b52:	290f      	cmp	r1, #15
 8003b54:	d013      	beq.n	8003b7e <dir_find.part.8+0x82>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003b56:	b325      	cbz	r5, 8003ba2 <dir_find.part.8+0xa6>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003b58:	69a3      	ldr	r3, [r4, #24]
 8003b5a:	7ad9      	ldrb	r1, [r3, #11]
 8003b5c:	07c9      	lsls	r1, r1, #31
 8003b5e:	d4dc      	bmi.n	8003b1a <dir_find.part.8+0x1e>
 8003b60:	f103 000b 	add.w	r0, r3, #11
 8003b64:	e001      	b.n	8003b6a <dir_find.part.8+0x6e>
 8003b66:	f816 2f01 	ldrb.w	r2, [r6, #1]!
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003b6a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003b6e:	4291      	cmp	r1, r2
 8003b70:	d1d3      	bne.n	8003b1a <dir_find.part.8+0x1e>
 8003b72:	4283      	cmp	r3, r0
 8003b74:	d1f7      	bne.n	8003b66 <dir_find.part.8+0x6a>
 8003b76:	2000      	movs	r0, #0
}
 8003b78:	b003      	add	sp, #12
 8003b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (dp->lfn) {
 8003b7e:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8003b82:	f1b9 0f00 	cmp.w	r9, #0
 8003b86:	d0cc      	beq.n	8003b22 <dir_find.part.8+0x26>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003b88:	0653      	lsls	r3, r2, #25
 8003b8a:	d51c      	bpl.n	8003bc6 <dir_find.part.8+0xca>
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003b8c:	88e3      	ldrh	r3, [r4, #6]
						sum = dir[LDIR_Chksum];
 8003b8e:	f896 800d 	ldrb.w	r8, [r6, #13]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003b92:	f002 05bf 	and.w	r5, r2, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003b96:	84a3      	strh	r3, [r4, #36]	; 0x24
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003b98:	7b73      	ldrb	r3, [r6, #13]
 8003b9a:	4543      	cmp	r3, r8
 8003b9c:	d01b      	beq.n	8003bd6 <dir_find.part.8+0xda>
 8003b9e:	25ff      	movs	r5, #255	; 0xff
 8003ba0:	e7bf      	b.n	8003b22 <dir_find.part.8+0x26>
 8003ba2:	4631      	mov	r1, r6
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f106 0c0a 	add.w	ip, r6, #10
 8003baa:	e001      	b.n	8003bb0 <dir_find.part.8+0xb4>
 8003bac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003bb0:	01eb      	lsls	r3, r5, #7
 8003bb2:	ea43 0555 	orr.w	r5, r3, r5, lsr #1
 8003bb6:	4405      	add	r5, r0
 8003bb8:	458c      	cmp	ip, r1
 8003bba:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8003bbe:	d1f5      	bne.n	8003bac <dir_find.part.8+0xb0>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003bc0:	4545      	cmp	r5, r8
 8003bc2:	d1c9      	bne.n	8003b58 <dir_find.part.8+0x5c>
 8003bc4:	e7d7      	b.n	8003b76 <dir_find.part.8+0x7a>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003bc6:	42aa      	cmp	r2, r5
 8003bc8:	d0e6      	beq.n	8003b98 <dir_find.part.8+0x9c>
 8003bca:	25ff      	movs	r5, #255	; 0xff
 8003bcc:	e7a9      	b.n	8003b22 <dir_find.part.8+0x26>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003bce:	2004      	movs	r0, #4
}
 8003bd0:	b003      	add	sp, #12
 8003bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003bd6:	f04f 0c01 	mov.w	ip, #1
 8003bda:	7832      	ldrb	r2, [r6, #0]
 8003bdc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8003c58 <dir_find.part.8+0x15c>
 8003be0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be4:	3a01      	subs	r2, #1
 8003be6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	s = 0; wc = 1;
 8003bea:	4660      	mov	r0, ip
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003bec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8003bf0:	f10b 0a0c 	add.w	sl, fp, #12
 8003bf4:	e007      	b.n	8003c06 <dir_find.part.8+0x10a>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfa:	4299      	cmp	r1, r3
 8003bfc:	d1cf      	bne.n	8003b9e <dir_find.part.8+0xa2>
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8003bfe:	45da      	cmp	sl, fp
 8003c00:	d01e      	beq.n	8003c40 <dir_find.part.8+0x144>
 8003c02:	f81b cf01 	ldrb.w	ip, [fp, #1]!
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003c06:	eb06 010c 	add.w	r1, r6, ip
 8003c0a:	f891 e001 	ldrb.w	lr, [r1, #1]
 8003c0e:	f816 100c 	ldrb.w	r1, [r6, ip]
 8003c12:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		if (wc) {	/* Last character has not been processed */
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d0ed      	beq.n	8003bf6 <dir_find.part.8+0xfa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	9201      	str	r2, [sp, #4]
 8003c1e:	f000 fe31 	bl	8004884 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003c22:	9a01      	ldr	r2, [sp, #4]
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003c24:	9000      	str	r0, [sp, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003c26:	1c53      	adds	r3, r2, #1
 8003c28:	2afe      	cmp	r2, #254	; 0xfe
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	d8b7      	bhi.n	8003b9e <dir_find.part.8+0xa2>
 8003c2e:	f839 0012 	ldrh.w	r0, [r9, r2, lsl #1]
 8003c32:	f000 fe27 	bl	8004884 <ff_wtoupper>
 8003c36:	9900      	ldr	r1, [sp, #0]
 8003c38:	4281      	cmp	r1, r0
 8003c3a:	d1b0      	bne.n	8003b9e <dir_find.part.8+0xa2>
 8003c3c:	9a01      	ldr	r2, [sp, #4]
 8003c3e:	e7de      	b.n	8003bfe <dir_find.part.8+0x102>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003c40:	7833      	ldrb	r3, [r6, #0]
 8003c42:	065e      	lsls	r6, r3, #25
 8003c44:	d504      	bpl.n	8003c50 <dir_find.part.8+0x154>
 8003c46:	b118      	cbz	r0, 8003c50 <dir_find.part.8+0x154>
 8003c48:	f839 3012 	ldrh.w	r3, [r9, r2, lsl #1]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1a6      	bne.n	8003b9e <dir_find.part.8+0xa2>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003c50:	3d01      	subs	r5, #1
 8003c52:	b2ed      	uxtb	r5, r5
 8003c54:	e765      	b.n	8003b22 <dir_find.part.8+0x26>
 8003c56:	bf00      	nop
 8003c58:	08004a44 	.word	0x08004a44

08003c5c <dir_register>:
{
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fn = dp->fn; lfn = dp->lfn;
 8003c60:	f8d0 a018 	ldr.w	sl, [r0, #24]
{
 8003c64:	4604      	mov	r4, r0
	fn = dp->fn; lfn = dp->lfn;
 8003c66:	4653      	mov	r3, sl
{
 8003c68:	b089      	sub	sp, #36	; 0x24
	fn = dp->fn; lfn = dp->lfn;
 8003c6a:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8003c6e:	a905      	add	r1, sp, #20
 8003c70:	f10a 050c 	add.w	r5, sl, #12
		*d++ = *s++;
 8003c74:	f813 2b01 	ldrb.w	r2, [r3], #1
	while (cnt--)
 8003c78:	42ab      	cmp	r3, r5
		*d++ = *s++;
 8003c7a:	f801 2b01 	strb.w	r2, [r1], #1
	while (cnt--)
 8003c7e:	d1f9      	bne.n	8003c74 <dir_register+0x18>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003c80:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8003c84:	07dd      	lsls	r5, r3, #31
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	d57b      	bpl.n	8003d82 <dir_register+0x126>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003c8a:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8003c8c:	f04f 0b01 	mov.w	fp, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003c90:	4eb5      	ldr	r6, [pc, #724]	; (8003f68 <dir_register+0x30c>)
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003c92:	f88a 300b 	strb.w	r3, [sl, #11]
 8003c96:	f10a 39ff 	add.w	r9, sl, #4294967295
 8003c9a:	6223      	str	r3, [r4, #32]
 8003c9c:	f10a 070a 	add.w	r7, sl, #10
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	4655      	mov	r5, sl
	const BYTE *s = (const BYTE*)src;
 8003ca4:	aa05      	add	r2, sp, #20
		*d++ = *s++;
 8003ca6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003caa:	f803 1f01 	strb.w	r1, [r3, #1]!
	while (cnt--)
 8003cae:	429f      	cmp	r7, r3
 8003cb0:	d1f9      	bne.n	8003ca6 <dir_register+0x4a>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003cb2:	f1bb 0f05 	cmp.w	fp, #5
 8003cb6:	d95a      	bls.n	8003d6e <dir_register+0x112>
 8003cb8:	f1a8 0c02 	sub.w	ip, r8, #2
		while (*lfn) {	/* Create a CRC */
 8003cbc:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003cc0:	465b      	mov	r3, fp
		while (*lfn) {	/* Create a CRC */
 8003cc2:	b17a      	cbz	r2, 8003ce4 <dir_register+0x88>
 8003cc4:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8003cc6:	f002 0001 	and.w	r0, r2, #1
 8003cca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003cce:	03d8      	lsls	r0, r3, #15
 8003cd0:	bf48      	it	mi
 8003cd2:	4073      	eormi	r3, r6
			for (i = 0; i < 16; i++) {
 8003cd4:	3901      	subs	r1, #1
				wc >>= 1;
 8003cd6:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8003cda:	d1f4      	bne.n	8003cc6 <dir_register+0x6a>
		while (*lfn) {	/* Create a CRC */
 8003cdc:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	d1ef      	bne.n	8003cc4 <dir_register+0x68>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	f10d 0c13 	add.w	ip, sp, #19
		c = (seq % 16) + '0';
 8003cea:	f003 000f 	and.w	r0, r3, #15
 8003cee:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8003cf2:	2939      	cmp	r1, #57	; 0x39
 8003cf4:	bf88      	it	hi
 8003cf6:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
	} while (seq);
 8003cfa:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8003cfc:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d00:	f80c 1901 	strb.w	r1, [ip], #-1
	} while (seq);
 8003d04:	d1f1      	bne.n	8003cea <dir_register+0x8e>
	ns[i] = '~';
 8003d06:	207e      	movs	r0, #126	; 0x7e
 8003d08:	a908      	add	r1, sp, #32
 8003d0a:	4411      	add	r1, r2
 8003d0c:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003d10:	2a00      	cmp	r2, #0
 8003d12:	f000 80aa 	beq.w	8003e6a <dir_register+0x20e>
 8003d16:	f89a 1000 	ldrb.w	r1, [sl]
 8003d1a:	2920      	cmp	r1, #32
 8003d1c:	d104      	bne.n	8003d28 <dir_register+0xcc>
 8003d1e:	e006      	b.n	8003d2e <dir_register+0xd2>
 8003d20:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8003d24:	2920      	cmp	r1, #32
 8003d26:	d002      	beq.n	8003d2e <dir_register+0xd2>
 8003d28:	3301      	adds	r3, #1
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d1f8      	bne.n	8003d20 <dir_register+0xc4>
 8003d2e:	1e59      	subs	r1, r3, #1
 8003d30:	4451      	add	r1, sl
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003d32:	2a07      	cmp	r2, #7
 8003d34:	a808      	add	r0, sp, #32
 8003d36:	4410      	add	r0, r2
 8003d38:	bf8c      	ite	hi
 8003d3a:	2020      	movhi	r0, #32
 8003d3c:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
 8003d40:	f103 0301 	add.w	r3, r3, #1
 8003d44:	bf98      	it	ls
 8003d46:	3201      	addls	r2, #1
	} while (j < 8);
 8003d48:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003d4a:	f801 0f01 	strb.w	r0, [r1, #1]!
	} while (j < 8);
 8003d4e:	d9f0      	bls.n	8003d32 <dir_register+0xd6>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003d50:	2100      	movs	r1, #0
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fc4e 	bl	80035f4 <dir_sdi>
	if (res != FR_OK) return res;
 8003d58:	b958      	cbnz	r0, 8003d72 <dir_register+0x116>
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f7ff fece 	bl	8003afc <dir_find.part.8>
			if (res != FR_OK) break;
 8003d60:	b938      	cbnz	r0, 8003d72 <dir_register+0x116>
		for (n = 1; n < 100; n++) {
 8003d62:	f10b 0b01 	add.w	fp, fp, #1
 8003d66:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 8003d6a:	d199      	bne.n	8003ca0 <dir_register+0x44>
 8003d6c:	e078      	b.n	8003e60 <dir_register+0x204>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003d6e:	465b      	mov	r3, fp
 8003d70:	e7b8      	b.n	8003ce4 <dir_register+0x88>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003d72:	2804      	cmp	r0, #4
 8003d74:	4605      	mov	r5, r0
 8003d76:	d154      	bne.n	8003e22 <dir_register+0x1c6>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8003d78:	9b01      	ldr	r3, [sp, #4]
 8003d7a:	f88a 300b 	strb.w	r3, [sl, #11]
 8003d7e:	f8c4 8020 	str.w	r8, [r4, #32]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003d82:	9b01      	ldr	r3, [sp, #4]
 8003d84:	079b      	lsls	r3, r3, #30
 8003d86:	d450      	bmi.n	8003e2a <dir_register+0x1ce>
	res = dir_sdi(dp, 0);
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4620      	mov	r0, r4
 8003d8c:	f7ff fc32 	bl	80035f4 <dir_sdi>
		nent = 1;
 8003d90:	2601      	movs	r6, #1
	if (res == FR_OK) {
 8003d92:	4605      	mov	r5, r0
 8003d94:	2800      	cmp	r0, #0
 8003d96:	d161      	bne.n	8003e5c <dir_register+0x200>
		n = 0;
 8003d98:	4607      	mov	r7, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d9a:	f241 082c 	movw	r8, #4140	; 0x102c
 8003d9e:	e007      	b.n	8003db0 <dir_register+0x154>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003da0:	b1a3      	cbz	r3, 8003dcc <dir_register+0x170>
				n = 0;					/* Not a blank entry. Restart to search */
 8003da2:	2700      	movs	r7, #0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003da4:	2101      	movs	r1, #1
 8003da6:	4620      	mov	r0, r4
 8003da8:	f7ff fde2 	bl	8003970 <dir_next>
		} while (res == FR_OK);
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d15e      	bne.n	8003e6e <dir_register+0x212>
			res = move_window(dp->fs, dp->sect);
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003db4:	f850 3008 	ldr.w	r3, [r0, r8]
 8003db8:	4299      	cmp	r1, r3
 8003dba:	d003      	beq.n	8003dc4 <dir_register+0x168>
 8003dbc:	f7ff f96a 	bl	8003094 <move_window.part.3>
			if (res != FR_OK) break;
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	d154      	bne.n	8003e6e <dir_register+0x212>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003dc4:	6963      	ldr	r3, [r4, #20]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2be5      	cmp	r3, #229	; 0xe5
 8003dca:	d1e9      	bne.n	8003da0 <dir_register+0x144>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003dcc:	3701      	adds	r7, #1
 8003dce:	42be      	cmp	r6, r7
 8003dd0:	d1e8      	bne.n	8003da4 <dir_register+0x148>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003dd2:	1e73      	subs	r3, r6, #1
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	d155      	bne.n	8003e84 <dir_register+0x228>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003dd8:	f241 032c 	movw	r3, #4140	; 0x102c
		res = move_window(dp->fs, dp->sect);
 8003ddc:	6820      	ldr	r0, [r4, #0]
 8003dde:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003de0:	58c3      	ldr	r3, [r0, r3]
 8003de2:	4299      	cmp	r1, r3
 8003de4:	d145      	bne.n	8003e72 <dir_register+0x216>
		*d++ = (BYTE)val;
 8003de6:	2100      	movs	r1, #0
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8003de8:	6963      	ldr	r3, [r4, #20]
 8003dea:	f103 0220 	add.w	r2, r3, #32
		*d++ = (BYTE)val;
 8003dee:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d1fb      	bne.n	8003dee <dir_register+0x192>
 8003df6:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8003dfa:	f103 000b 	add.w	r0, r3, #11
 8003dfe:	3a01      	subs	r2, #1
		*d++ = *s++;
 8003e00:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 8003e04:	4283      	cmp	r3, r0
		*d++ = *s++;
 8003e06:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 8003e0a:	d1f9      	bne.n	8003e00 <dir_register+0x1a4>
			dp->fs->wflag = 1;
 8003e0c:	f241 0204 	movw	r2, #4100	; 0x1004
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003e10:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
			dp->fs->wflag = 1;
 8003e14:	2101      	movs	r1, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003e16:	7adb      	ldrb	r3, [r3, #11]
 8003e18:	f003 0318 	and.w	r3, r3, #24
 8003e1c:	7303      	strb	r3, [r0, #12]
			dp->fs->wflag = 1;
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	5499      	strb	r1, [r3, r2]
}
 8003e22:	4628      	mov	r0, r5
 8003e24:	b009      	add	sp, #36	; 0x24
 8003e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (n = 0; lfn[n]; n++) ;
 8003e2a:	f8b8 3000 	ldrh.w	r3, [r8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0aa      	beq.n	8003d88 <dir_register+0x12c>
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <dir_register+0x1dc>
 8003e36:	460b      	mov	r3, r1
 8003e38:	f838 2f02 	ldrh.w	r2, [r8, #2]!
 8003e3c:	1c59      	adds	r1, r3, #1
 8003e3e:	2a00      	cmp	r2, #0
 8003e40:	d1f9      	bne.n	8003e36 <dir_register+0x1da>
 8003e42:	4a4a      	ldr	r2, [pc, #296]	; (8003f6c <dir_register+0x310>)
 8003e44:	f103 061a 	add.w	r6, r3, #26
	res = dir_sdi(dp, 0);
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	fba2 3606 	umull	r3, r6, r2, r6
 8003e50:	f7ff fbd0 	bl	80035f4 <dir_sdi>
 8003e54:	08b6      	lsrs	r6, r6, #2
	if (res == FR_OK) {
 8003e56:	4605      	mov	r5, r0
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	d09d      	beq.n	8003d98 <dir_register+0x13c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003e5c:	2d04      	cmp	r5, #4
 8003e5e:	d1e0      	bne.n	8003e22 <dir_register+0x1c6>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003e60:	2507      	movs	r5, #7
}
 8003e62:	4628      	mov	r0, r5
 8003e64:	b009      	add	sp, #36	; 0x24
 8003e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	e75f      	b.n	8003d2e <dir_register+0xd2>
			if (res != FR_OK) break;
 8003e6e:	4605      	mov	r5, r0
 8003e70:	e7f4      	b.n	8003e5c <dir_register+0x200>
 8003e72:	f7ff f90f 	bl	8003094 <move_window.part.3>
		if (res == FR_OK) {
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d0b5      	beq.n	8003de6 <dir_register+0x18a>
 8003e7a:	4605      	mov	r5, r0
}
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	b009      	add	sp, #36	; 0x24
 8003e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = dir_sdi(dp, dp->index - nent);
 8003e84:	88e1      	ldrh	r1, [r4, #6]
 8003e86:	9b01      	ldr	r3, [sp, #4]
 8003e88:	4620      	mov	r0, r4
 8003e8a:	1ac9      	subs	r1, r1, r3
 8003e8c:	f7ff fbb2 	bl	80035f4 <dir_sdi>
		if (res == FR_OK) {
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d1f2      	bne.n	8003e7a <dir_register+0x21e>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8003e94:	69a1      	ldr	r1, [r4, #24]
	BYTE sum = 0;
 8003e96:	4680      	mov	r8, r0
 8003e98:	f101 000b 	add.w	r0, r1, #11
	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003e9c:	ea4f 13c8 	mov.w	r3, r8, lsl #7
 8003ea0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ea4:	ea43 0358 	orr.w	r3, r3, r8, lsr #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4281      	cmp	r1, r0
 8003eac:	f003 08ff 	and.w	r8, r3, #255	; 0xff
 8003eb0:	d1f4      	bne.n	8003e9c <dir_register+0x240>
 8003eb2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8003f70 <dir_register+0x314>
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003eb6:	f241 032c 	movw	r3, #4140	; 0x102c
				res = move_window(dp->fs, dp->sect);
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	6921      	ldr	r1, [r4, #16]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003ebe:	58c3      	ldr	r3, [r0, r3]
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	d003      	beq.n	8003ecc <dir_register+0x270>
 8003ec4:	f7ff f8e6 	bl	8003094 <move_window.part.3>
				if (res != FR_OK) break;
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d1d6      	bne.n	8003e7a <dir_register+0x21e>
	dir[LDIR_Type] = 0;
 8003ecc:	2000      	movs	r0, #0
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003ece:	f89d b004 	ldrb.w	fp, [sp, #4]
 8003ed2:	6966      	ldr	r6, [r4, #20]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003ed4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8003ed8:	eb02 0142 	add.w	r1, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003edc:	270f      	movs	r7, #15
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003ede:	f8d4 e020 	ldr.w	lr, [r4, #32]
	s = wc = 0;
 8003ee2:	4603      	mov	r3, r0
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003ee4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	dir[LDIR_Type] = 0;
 8003ee8:	7330      	strb	r0, [r6, #12]
	s = wc = 0;
 8003eea:	4601      	mov	r1, r0
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8003eec:	76b0      	strb	r0, [r6, #26]
 8003eee:	76f0      	strb	r0, [r6, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003ef0:	f64f 7aff 	movw	sl, #65535	; 0xffff
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003ef4:	2001      	movs	r0, #1
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003ef6:	f886 800d 	strb.w	r8, [r6, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003efa:	72f7      	strb	r7, [r6, #11]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003efc:	4553      	cmp	r3, sl
 8003efe:	bf0e      	itee	eq
 8003f00:	4694      	moveq	ip, r2
 8003f02:	f83e 3012 	ldrhne.w	r3, [lr, r2, lsl #1]
 8003f06:	f102 0c01 	addne.w	ip, r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003f0a:	1837      	adds	r7, r6, r0
 8003f0c:	0a1a      	lsrs	r2, r3, #8
 8003f0e:	5433      	strb	r3, [r6, r0]
 8003f10:	3101      	adds	r1, #1
 8003f12:	707a      	strb	r2, [r7, #1]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003f14:	b933      	cbnz	r3, 8003f24 <dir_register+0x2c8>
	} while (++s < 13);
 8003f16:	290c      	cmp	r1, #12
 8003f18:	d811      	bhi.n	8003f3e <dir_register+0x2e2>
 8003f1a:	f811 0009 	ldrb.w	r0, [r1, r9]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003f1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f22:	e7f2      	b.n	8003f0a <dir_register+0x2ae>
	} while (++s < 13);
 8003f24:	290c      	cmp	r1, #12
 8003f26:	d803      	bhi.n	8003f30 <dir_register+0x2d4>
 8003f28:	4662      	mov	r2, ip
 8003f2a:	f819 0001 	ldrb.w	r0, [r9, r1]
 8003f2e:	e7e5      	b.n	8003efc <dir_register+0x2a0>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8003f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d002      	beq.n	8003f3e <dir_register+0x2e2>
 8003f38:	f83e 301c 	ldrh.w	r3, [lr, ip, lsl #1]
 8003f3c:	b90b      	cbnz	r3, 8003f42 <dir_register+0x2e6>
 8003f3e:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
				dp->fs->wflag = 1;
 8003f42:	2001      	movs	r0, #1
 8003f44:	f241 0304 	movw	r3, #4100	; 0x1004
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003f48:	f886 b000 	strb.w	fp, [r6]
				dp->fs->wflag = 1;
 8003f4c:	6822      	ldr	r2, [r4, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8003f4e:	2100      	movs	r1, #0
				dp->fs->wflag = 1;
 8003f50:	54d0      	strb	r0, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8003f52:	4620      	mov	r0, r4
 8003f54:	f7ff fd0c 	bl	8003970 <dir_next>
			} while (res == FR_OK && --nent);
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d18e      	bne.n	8003e7a <dir_register+0x21e>
 8003f5c:	9b01      	ldr	r3, [sp, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	d1a8      	bne.n	8003eb6 <dir_register+0x25a>
 8003f64:	e738      	b.n	8003dd8 <dir_register+0x17c>
 8003f66:	bf00      	nop
 8003f68:	00011021 	.word	0x00011021
 8003f6c:	4ec4ec4f 	.word	0x4ec4ec4f
 8003f70:	08004a44 	.word	0x08004a44

08003f74 <remove_chain.part.9>:
FRESULT remove_chain (
 8003f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f78:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003f7c:	46b8      	mov	r8, r7
FRESULT remove_chain (
 8003f7e:	4606      	mov	r6, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	3714      	adds	r7, #20
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003f84:	f108 0810 	add.w	r8, r8, #16
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	429c      	cmp	r4, r3
 8003f8c:	d225      	bcs.n	8003fda <remove_chain.part.9+0x66>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003f8e:	2c01      	cmp	r4, #1
 8003f90:	d926      	bls.n	8003fe0 <remove_chain.part.9+0x6c>
 8003f92:	4621      	mov	r1, r4
 8003f94:	4630      	mov	r0, r6
 8003f96:	f7ff fa93 	bl	80034c0 <get_fat.part.6>
			if (nxt == 0) break;				/* Empty cluster? */
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	b1e8      	cbz	r0, 8003fda <remove_chain.part.9+0x66>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003f9e:	2801      	cmp	r0, #1
 8003fa0:	d01e      	beq.n	8003fe0 <remove_chain.part.9+0x6c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003fa2:	1c41      	adds	r1, r0, #1
 8003fa4:	d01f      	beq.n	8003fe6 <remove_chain.part.9+0x72>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	429c      	cmp	r4, r3
 8003faa:	d219      	bcs.n	8003fe0 <remove_chain.part.9+0x6c>
 8003fac:	4621      	mov	r1, r4
 8003fae:	2200      	movs	r2, #0
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f7ff fb89 	bl	80036c8 <put_fat.part.7>
			if (res != FR_OK) break;
 8003fb6:	b9a0      	cbnz	r0, 8003fe2 <remove_chain.part.9+0x6e>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003fb8:	f8d8 3000 	ldr.w	r3, [r8]
FRESULT remove_chain (
 8003fbc:	462c      	mov	r4, r5
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	d0e2      	beq.n	8003f88 <remove_chain.part.9+0x14>
				fs->fsi_flag |= 1;
 8003fc2:	f241 0205 	movw	r2, #4101	; 0x1005
				fs->free_clust++;
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f8c8 3000 	str.w	r3, [r8]
				fs->fsi_flag |= 1;
 8003fcc:	5cb3      	ldrb	r3, [r6, r2]
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	54b3      	strb	r3, [r6, r2]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d3d9      	bcc.n	8003f8e <remove_chain.part.9+0x1a>
FRESULT remove_chain (
 8003fda:	2000      	movs	r0, #0
}
 8003fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003fe0:	2002      	movs	r0, #2
}
 8003fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003fe6:	2001      	movs	r0, #1
}
 8003fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003fec <follow_path>:
{
 8003fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003ff0:	780b      	ldrb	r3, [r1, #0]
{
 8003ff2:	b083      	sub	sp, #12
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003ff4:	2b2f      	cmp	r3, #47	; 0x2f
{
 8003ff6:	460d      	mov	r5, r1
 8003ff8:	4607      	mov	r7, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003ffa:	d041      	beq.n	8004080 <follow_path+0x94>
 8003ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8003ffe:	d03f      	beq.n	8004080 <follow_path+0x94>
	dp->sclust = 0;							/* Always start from the root directory */
 8004000:	2400      	movs	r4, #0
 8004002:	60bc      	str	r4, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004004:	7828      	ldrb	r0, [r5, #0]
 8004006:	281f      	cmp	r0, #31
 8004008:	d802      	bhi.n	8004010 <follow_path+0x24>
 800400a:	e03f      	b.n	800408c <follow_path+0xa0>
 800400c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004010:	282f      	cmp	r0, #47	; 0x2f
 8004012:	d0fb      	beq.n	800400c <follow_path+0x20>
 8004014:	285c      	cmp	r0, #92	; 0x5c
 8004016:	d0f9      	beq.n	800400c <follow_path+0x20>
		w = p[si++];					/* Get a character */
 8004018:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800401a:	281f      	cmp	r0, #31
	lfn = dp->lfn;
 800401c:	f8d7 9020 	ldr.w	r9, [r7, #32]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004020:	d92a      	bls.n	8004078 <follow_path+0x8c>
 8004022:	282f      	cmp	r0, #47	; 0x2f
 8004024:	d028      	beq.n	8004078 <follow_path+0x8c>
 8004026:	285c      	cmp	r0, #92	; 0x5c
 8004028:	d026      	beq.n	8004078 <follow_path+0x8c>
 800402a:	f1a9 0602 	sub.w	r6, r9, #2
 800402e:	46b3      	mov	fp, r6
 8004030:	46aa      	mov	sl, r5
		w = p[si++];					/* Get a character */
 8004032:	2401      	movs	r4, #1
 8004034:	e00f      	b.n	8004056 <follow_path+0x6a>
		lfn[di++] = w;					/* Store the Unicode character */
 8004036:	f82b 0f02 	strh.w	r0, [fp, #2]!
		w = p[si++];					/* Get a character */
 800403a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 800403e:	1c63      	adds	r3, r4, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004040:	281f      	cmp	r0, #31
 8004042:	f240 8107 	bls.w	8004254 <follow_path+0x268>
 8004046:	282f      	cmp	r0, #47	; 0x2f
 8004048:	d028      	beq.n	800409c <follow_path+0xb0>
 800404a:	285c      	cmp	r0, #92	; 0x5c
 800404c:	d026      	beq.n	800409c <follow_path+0xb0>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004052:	d011      	beq.n	8004078 <follow_path+0x8c>
 8004054:	461c      	mov	r4, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004056:	2101      	movs	r1, #1
 8004058:	f000 fbf0 	bl	800483c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800405c:	b160      	cbz	r0, 8004078 <follow_path+0x8c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800405e:	287f      	cmp	r0, #127	; 0x7f
 8004060:	d8e9      	bhi.n	8004036 <follow_path+0x4a>
	while (*str && *str != chr) str++;
 8004062:	2822      	cmp	r0, #34	; 0x22
 8004064:	d008      	beq.n	8004078 <follow_path+0x8c>
 8004066:	232a      	movs	r3, #42	; 0x2a
 8004068:	4a89      	ldr	r2, [pc, #548]	; (8004290 <follow_path+0x2a4>)
 800406a:	e003      	b.n	8004074 <follow_path+0x88>
 800406c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0e0      	beq.n	8004036 <follow_path+0x4a>
 8004074:	4298      	cmp	r0, r3
 8004076:	d1f9      	bne.n	800406c <follow_path+0x80>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004078:	2006      	movs	r0, #6
}
 800407a:	b003      	add	sp, #12
 800407c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	dp->sclust = 0;							/* Always start from the root directory */
 8004080:	2400      	movs	r4, #0
		path++;
 8004082:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8004084:	60bc      	str	r4, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004086:	7828      	ldrb	r0, [r5, #0]
 8004088:	281f      	cmp	r0, #31
 800408a:	d8c1      	bhi.n	8004010 <follow_path+0x24>
		res = dir_sdi(dp, 0);
 800408c:	4621      	mov	r1, r4
 800408e:	4638      	mov	r0, r7
 8004090:	f7ff fab0 	bl	80035f4 <dir_sdi>
		dp->dir = 0;
 8004094:	617c      	str	r4, [r7, #20]
}
 8004096:	b003      	add	sp, #12
 8004098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800409c:	f04f 0b00 	mov.w	fp, #0
	*path = &p[si];						/* Return pointer to the next segment */
 80040a0:	441d      	add	r5, r3
 80040a2:	eb09 0244 	add.w	r2, r9, r4, lsl #1
		w = lfn[di - 1];
 80040a6:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d001      	beq.n	80040b2 <follow_path+0xc6>
 80040ae:	2b2e      	cmp	r3, #46	; 0x2e
 80040b0:	d102      	bne.n	80040b8 <follow_path+0xcc>
	while (di) {						/* Strip trailing spaces and dots */
 80040b2:	3c01      	subs	r4, #1
 80040b4:	d1f7      	bne.n	80040a6 <follow_path+0xba>
 80040b6:	e7df      	b.n	8004078 <follow_path+0x8c>
	lfn[di] = 0;						/* LFN is created */
 80040b8:	2200      	movs	r2, #0
		*d++ = (BYTE)val;
 80040ba:	2120      	movs	r1, #32
	mem_set(dp->fn, ' ', 11);
 80040bc:	69bb      	ldr	r3, [r7, #24]
	lfn[di] = 0;						/* LFN is created */
 80040be:	f829 2014 	strh.w	r2, [r9, r4, lsl #1]
 80040c2:	f103 000b 	add.w	r0, r3, #11
 80040c6:	eb09 0244 	add.w	r2, r9, r4, lsl #1
		*d++ = (BYTE)val;
 80040ca:	f803 1b01 	strb.w	r1, [r3], #1
	while (cnt--)
 80040ce:	4298      	cmp	r0, r3
 80040d0:	d1fb      	bne.n	80040ca <follow_path+0xde>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80040d2:	f04f 0a00 	mov.w	sl, #0
 80040d6:	e001      	b.n	80040dc <follow_path+0xf0>
 80040d8:	f10a 0a01 	add.w	sl, sl, #1
 80040dc:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 80040e0:	2820      	cmp	r0, #32
 80040e2:	d0f9      	beq.n	80040d8 <follow_path+0xec>
 80040e4:	282e      	cmp	r0, #46	; 0x2e
 80040e6:	d0f7      	beq.n	80040d8 <follow_path+0xec>
	if (si) cf |= NS_LOSS | NS_LFN;
 80040e8:	f1ba 0f00 	cmp.w	sl, #0
 80040ec:	d001      	beq.n	80040f2 <follow_path+0x106>
 80040ee:	f04b 0b03 	orr.w	fp, fp, #3
 80040f2:	4613      	mov	r3, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80040f4:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 80040f8:	2a2e      	cmp	r2, #46	; 0x2e
 80040fa:	d001      	beq.n	8004100 <follow_path+0x114>
 80040fc:	3c01      	subs	r4, #1
 80040fe:	d1f9      	bne.n	80040f4 <follow_path+0x108>
		dp->fn[i++] = (BYTE)w;
 8004100:	2300      	movs	r3, #0
 8004102:	f04f 0808 	mov.w	r8, #8
 8004106:	461e      	mov	r6, r3
		w = lfn[si++];					/* Get an LFN character */
 8004108:	f10a 0a01 	add.w	sl, sl, #1
		if (!w) break;					/* Break on end of the LFN */
 800410c:	b340      	cbz	r0, 8004160 <follow_path+0x174>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800410e:	2820      	cmp	r0, #32
 8004110:	d076      	beq.n	8004200 <follow_path+0x214>
 8004112:	282e      	cmp	r0, #46	; 0x2e
 8004114:	d079      	beq.n	800420a <follow_path+0x21e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004116:	4543      	cmp	r3, r8
 8004118:	d219      	bcs.n	800414e <follow_path+0x162>
 800411a:	4554      	cmp	r4, sl
 800411c:	d077      	beq.n	800420e <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 800411e:	287f      	cmp	r0, #127	; 0x7f
 8004120:	f200 8082 	bhi.w	8004228 <follow_path+0x23c>
	while (*str && *str != chr) str++;
 8004124:	282b      	cmp	r0, #43	; 0x2b
 8004126:	f000 808e 	beq.w	8004246 <follow_path+0x25a>
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	4a59      	ldr	r2, [pc, #356]	; (8004294 <follow_path+0x2a8>)
 800412e:	4281      	cmp	r1, r0
 8004130:	f000 8089 	beq.w	8004246 <follow_path+0x25a>
 8004134:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8004138:	2900      	cmp	r1, #0
 800413a:	d1f8      	bne.n	800412e <follow_path+0x142>
				if (IsUpper(w)) {		/* ASCII large capital */
 800413c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8004140:	2919      	cmp	r1, #25
 8004142:	f200 808b 	bhi.w	800425c <follow_path+0x270>
					b |= 2;
 8004146:	f046 0602 	orr.w	r6, r6, #2
 800414a:	b2c0      	uxtb	r0, r0
 800414c:	e07e      	b.n	800424c <follow_path+0x260>
			if (ni == 11) {				/* Long extension */
 800414e:	f1b8 0f0b 	cmp.w	r8, #11
 8004152:	f000 8091 	beq.w	8004278 <follow_path+0x28c>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004156:	4554      	cmp	r4, sl
 8004158:	d05c      	beq.n	8004214 <follow_path+0x228>
 800415a:	f04b 0b03 	orr.w	fp, fp, #3
			if (si > di) break;			/* No extension */
 800415e:	d259      	bcs.n	8004214 <follow_path+0x228>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	7819      	ldrb	r1, [r3, #0]
 8004164:	29e5      	cmp	r1, #229	; 0xe5
 8004166:	d102      	bne.n	800416e <follow_path+0x182>
 8004168:	2105      	movs	r1, #5
 800416a:	7019      	strb	r1, [r3, #0]
 800416c:	69bb      	ldr	r3, [r7, #24]
	if (ni == 8) b <<= 2;
 800416e:	f1b8 0f08 	cmp.w	r8, #8
 8004172:	bf04      	itt	eq
 8004174:	00b6      	lsleq	r6, r6, #2
 8004176:	b2f6      	uxtbeq	r6, r6
 8004178:	f006 020c 	and.w	r2, r6, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800417c:	2a0c      	cmp	r2, #12
 800417e:	d050      	beq.n	8004222 <follow_path+0x236>
 8004180:	f006 0603 	and.w	r6, r6, #3
 8004184:	2e03      	cmp	r6, #3
 8004186:	d04c      	beq.n	8004222 <follow_path+0x236>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004188:	f01b 0f02 	tst.w	fp, #2
 800418c:	d107      	bne.n	800419e <follow_path+0x1b2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800418e:	2e01      	cmp	r6, #1
 8004190:	bf08      	it	eq
 8004192:	f04b 0b10 	orreq.w	fp, fp, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004196:	2a04      	cmp	r2, #4
 8004198:	bf08      	it	eq
 800419a:	f04b 0b08 	orreq.w	fp, fp, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800419e:	f883 b00b 	strb.w	fp, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80041a2:	2100      	movs	r1, #0
 80041a4:	4638      	mov	r0, r7
 80041a6:	f7ff fa25 	bl	80035f4 <dir_sdi>
	if (res != FR_OK) return res;
 80041aa:	b9f8      	cbnz	r0, 80041ec <follow_path+0x200>
 80041ac:	4638      	mov	r0, r7
 80041ae:	f7ff fca5 	bl	8003afc <dir_find.part.8>
			ns = dp->fn[NSFLAG];
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80041b6:	b9d8      	cbnz	r0, 80041f0 <follow_path+0x204>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80041b8:	0759      	lsls	r1, r3, #29
 80041ba:	f53f af5e 	bmi.w	800407a <follow_path+0x8e>
			dir = dp->dir;						/* Follow the sub-directory */
 80041be:	697b      	ldr	r3, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80041c0:	7ada      	ldrb	r2, [r3, #11]
 80041c2:	06d2      	lsls	r2, r2, #27
 80041c4:	d554      	bpl.n	8004270 <follow_path+0x284>
			dp->sclust = ld_clust(dp->fs, dir);
 80041c6:	6839      	ldr	r1, [r7, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 80041c8:	7ed8      	ldrb	r0, [r3, #27]
			dp->sclust = ld_clust(dp->fs, dir);
 80041ca:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 80041ce:	7809      	ldrb	r1, [r1, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 80041d0:	7e9a      	ldrb	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32)
 80041d2:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80041d4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 80041d8:	d105      	bne.n	80041e6 <follow_path+0x1fa>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80041da:	7d59      	ldrb	r1, [r3, #21]
 80041dc:	7d1b      	ldrb	r3, [r3, #20]
 80041de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
			dp->sclust = ld_clust(dp->fs, dir);
 80041e6:	60ba      	str	r2, [r7, #8]
 80041e8:	7828      	ldrb	r0, [r5, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80041ea:	e711      	b.n	8004010 <follow_path+0x24>
			ns = dp->fn[NSFLAG];
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	7adb      	ldrb	r3, [r3, #11]
				if (res == FR_NO_FILE) {	/* Object is not found */
 80041f0:	2804      	cmp	r0, #4
 80041f2:	f47f af42 	bne.w	800407a <follow_path+0x8e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80041f6:	f013 0f04 	tst.w	r3, #4
 80041fa:	bf08      	it	eq
 80041fc:	2005      	moveq	r0, #5
 80041fe:	e73c      	b.n	800407a <follow_path+0x8e>
			cf |= NS_LOSS | NS_LFN; continue;
 8004200:	f04b 0b03 	orr.w	fp, fp, #3
 8004204:	f839 001a 	ldrh.w	r0, [r9, sl, lsl #1]
 8004208:	e77e      	b.n	8004108 <follow_path+0x11c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800420a:	4554      	cmp	r4, sl
 800420c:	d1f8      	bne.n	8004200 <follow_path+0x214>
			if (ni == 11) {				/* Long extension */
 800420e:	f1b8 0f0b 	cmp.w	r8, #11
 8004212:	d031      	beq.n	8004278 <follow_path+0x28c>
			b <<= 2; continue;
 8004214:	00b6      	lsls	r6, r6, #2
 8004216:	b2f6      	uxtb	r6, r6
 8004218:	46a2      	mov	sl, r4
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800421a:	f04f 080b 	mov.w	r8, #11
 800421e:	2308      	movs	r3, #8
 8004220:	e7f0      	b.n	8004204 <follow_path+0x218>
		cf |= NS_LFN;
 8004222:	f04b 0b02 	orr.w	fp, fp, #2
 8004226:	e7ba      	b.n	800419e <follow_path+0x1b2>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004228:	2100      	movs	r1, #0
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	f000 fb06 	bl	800483c <ff_convert>
 8004230:	f04b 0b02 	orr.w	fp, fp, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004234:	9b01      	ldr	r3, [sp, #4]
 8004236:	b130      	cbz	r0, 8004246 <follow_path+0x25a>
 8004238:	4a17      	ldr	r2, [pc, #92]	; (8004298 <follow_path+0x2ac>)
 800423a:	4410      	add	r0, r2
 800423c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004240:	2800      	cmp	r0, #0
 8004242:	f47f af6f 	bne.w	8004124 <follow_path+0x138>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004246:	205f      	movs	r0, #95	; 0x5f
 8004248:	f04b 0b03 	orr.w	fp, fp, #3
		dp->fn[i++] = (BYTE)w;
 800424c:	69b9      	ldr	r1, [r7, #24]
 800424e:	54c8      	strb	r0, [r1, r3]
 8004250:	3301      	adds	r3, #1
 8004252:	e7d7      	b.n	8004204 <follow_path+0x218>
	*path = &p[si];						/* Return pointer to the next segment */
 8004254:	441d      	add	r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004256:	f04f 0b04 	mov.w	fp, #4
 800425a:	e722      	b.n	80040a2 <follow_path+0xb6>
					if (IsLower(w)) {	/* ASCII small capital */
 800425c:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8004260:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8004262:	bf97      	itett	ls
 8004264:	3820      	subls	r0, #32
 8004266:	b2c0      	uxtbhi	r0, r0
 8004268:	b2c0      	uxtbls	r0, r0
 800426a:	f046 0601 	orrls.w	r6, r6, #1
 800426e:	e7ed      	b.n	800424c <follow_path+0x260>
				res = FR_NO_PATH; break;
 8004270:	2005      	movs	r0, #5
}
 8004272:	b003      	add	sp, #12
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004278:	69bb      	ldr	r3, [r7, #24]
				cf |= NS_LOSS | NS_LFN; break;
 800427a:	f04b 0b03 	orr.w	fp, fp, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800427e:	781a      	ldrb	r2, [r3, #0]
 8004280:	2ae5      	cmp	r2, #229	; 0xe5
 8004282:	f47f af79 	bne.w	8004178 <follow_path+0x18c>
 8004286:	2205      	movs	r2, #5
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	e774      	b.n	8004178 <follow_path+0x18c>
 800428e:	bf00      	nop
 8004290:	08004a55 	.word	0x08004a55
 8004294:	08004a61 	.word	0x08004a61
 8004298:	080049c4 	.word	0x080049c4

0800429c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800429c:	b530      	push	{r4, r5, lr}
 800429e:	b085      	sub	sp, #20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80042a0:	ab04      	add	r3, sp, #16
 80042a2:	f843 1d04 	str.w	r1, [r3, #-4]!
{
 80042a6:	9001      	str	r0, [sp, #4]


	vol = get_ldnumber(&rp);
 80042a8:	4618      	mov	r0, r3
{
 80042aa:	4614      	mov	r4, r2
 80042ac:	9100      	str	r1, [sp, #0]
	vol = get_ldnumber(&rp);
 80042ae:	f7fe fe09 	bl	8002ec4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80042b2:	1e02      	subs	r2, r0, #0
 80042b4:	db23      	blt.n	80042fe <f_mount+0x62>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80042b6:	4917      	ldr	r1, [pc, #92]	; (8004314 <f_mount+0x78>)
 80042b8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]

	if (cfs) {
 80042bc:	b173      	cbz	r3, 80042dc <f_mount+0x40>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80042be:	4816      	ldr	r0, [pc, #88]	; (8004318 <f_mount+0x7c>)
 80042c0:	6805      	ldr	r5, [r0, #0]
 80042c2:	42ab      	cmp	r3, r5
 80042c4:	bf04      	itt	eq
 80042c6:	2500      	moveq	r5, #0
 80042c8:	6005      	streq	r5, [r0, #0]
 80042ca:	68c5      	ldr	r5, [r0, #12]
 80042cc:	42ab      	cmp	r3, r5
 80042ce:	bf04      	itt	eq
 80042d0:	2500      	moveq	r5, #0
 80042d2:	60c5      	streq	r5, [r0, #12]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80042d4:	2000      	movs	r0, #0
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 80042dc:	9b01      	ldr	r3, [sp, #4]
 80042de:	b14b      	cbz	r3, 80042f4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80042e0:	2000      	movs	r0, #0
 80042e2:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80042e6:	2c01      	cmp	r4, #1
	FatFs[vol] = fs;					/* Register new fs object */
 80042e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		fs->fs_type = 0;				/* Clear new fs object */
 80042ec:	7028      	strb	r0, [r5, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80042ee:	d009      	beq.n	8004304 <f_mount+0x68>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80042f0:	b005      	add	sp, #20
 80042f2:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80042f4:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 80042f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80042fa:	b005      	add	sp, #20
 80042fc:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80042fe:	200b      	movs	r0, #11
}
 8004300:	b005      	add	sp, #20
 8004302:	bd30      	pop	{r4, r5, pc}
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004304:	4602      	mov	r2, r0
 8004306:	4669      	mov	r1, sp
 8004308:	a801      	add	r0, sp, #4
 800430a:	f7fe ff13 	bl	8003134 <find_volume>
}
 800430e:	b005      	add	sp, #20
 8004310:	bd30      	pop	{r4, r5, pc}
 8004312:	bf00      	nop
 8004314:	20000048 	.word	0x20000048
 8004318:	2000004c 	.word	0x2000004c

0800431c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800431c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004320:	b090      	sub	sp, #64	; 0x40
 8004322:	9101      	str	r1, [sp, #4]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004324:	2800      	cmp	r0, #0
 8004326:	d038      	beq.n	800439a <f_open+0x7e>
	fp->fs = 0;			/* Clear file object */
 8004328:	2300      	movs	r3, #0
 800432a:	4604      	mov	r4, r0
 800432c:	6003      	str	r3, [r0, #0]
 800432e:	4615      	mov	r5, r2

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004330:	a806      	add	r0, sp, #24
 8004332:	f002 021e 	and.w	r2, r2, #30
 8004336:	a901      	add	r1, sp, #4
 8004338:	f7fe fefc 	bl	8003134 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800433c:	4606      	mov	r6, r0
 800433e:	b118      	cbz	r0, 8004348 <f_open+0x2c>
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8004340:	4630      	mov	r0, r6
 8004342:	b010      	add	sp, #64	; 0x40
 8004344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		INIT_BUF(dj);
 8004348:	4a72      	ldr	r2, [pc, #456]	; (8004514 <f_open+0x1f8>)
 800434a:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800434c:	9901      	ldr	r1, [sp, #4]
 800434e:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 8004350:	930c      	str	r3, [sp, #48]	; 0x30
 8004352:	920e      	str	r2, [sp, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8004354:	f7ff fe4a 	bl	8003fec <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8004358:	f005 081f 	and.w	r8, r5, #31
		res = follow_path(&dj, path);	/* Follow the file path */
 800435c:	4603      	mov	r3, r0
 800435e:	f005 091c 	and.w	r9, r5, #28
		if (res == FR_OK) {
 8004362:	b9f8      	cbnz	r0, 80043a4 <f_open+0x88>
		dir = dj.dir;
 8004364:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (!dir)	/* Default directory itself */
 8004366:	b387      	cbz	r7, 80043ca <f_open+0xae>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004368:	f018 0f1e 	tst.w	r8, #30
 800436c:	bf14      	ite	ne
 800436e:	f04f 0a01 	movne.w	sl, #1
 8004372:	f04f 0a00 	moveq.w	sl, #0
 8004376:	a806      	add	r0, sp, #24
 8004378:	4651      	mov	r1, sl
 800437a:	f7fe fd0d 	bl	8002d98 <chk_lock>
 800437e:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004380:	f1b9 0f00 	cmp.w	r9, #0
 8004384:	f000 80b1 	beq.w	80044ea <f_open+0x1ce>
			if (res != FR_OK) {					/* No file, create new */
 8004388:	b988      	cbnz	r0, 80043ae <f_open+0x92>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800438a:	7afb      	ldrb	r3, [r7, #11]
 800438c:	f013 0f11 	tst.w	r3, #17
 8004390:	d119      	bne.n	80043c6 <f_open+0xaa>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004392:	0768      	lsls	r0, r5, #29
 8004394:	d51b      	bpl.n	80043ce <f_open+0xb2>
						res = FR_EXIST;
 8004396:	2608      	movs	r6, #8
 8004398:	e7d2      	b.n	8004340 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800439a:	2609      	movs	r6, #9
}
 800439c:	4630      	mov	r0, r6
 800439e:	b010      	add	sp, #64	; 0x40
 80043a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80043a4:	f1b9 0f00 	cmp.w	r9, #0
 80043a8:	d101      	bne.n	80043ae <f_open+0x92>
 80043aa:	4606      	mov	r6, r0
 80043ac:	e7c8      	b.n	8004340 <f_open+0x24>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	f040 80ad 	bne.w	800450e <f_open+0x1f2>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043b4:	4b58      	ldr	r3, [pc, #352]	; (8004518 <f_open+0x1fc>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	d03c      	beq.n	8004436 <f_open+0x11a>
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d039      	beq.n	8004436 <f_open+0x11a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80043c2:	2612      	movs	r6, #18
 80043c4:	e7bc      	b.n	8004340 <f_open+0x24>
					res = FR_DENIED;
 80043c6:	2607      	movs	r6, #7
 80043c8:	e7ba      	b.n	8004340 <f_open+0x24>
				res = FR_INVALID_NAME;
 80043ca:	2606      	movs	r6, #6
 80043cc:	e7b8      	b.n	8004340 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80043ce:	0729      	lsls	r1, r5, #28
 80043d0:	d439      	bmi.n	8004446 <f_open+0x12a>
 80043d2:	9b06      	ldr	r3, [sp, #24]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80043d4:	f241 022c 	movw	r2, #4140	; 0x102c
 80043d8:	589b      	ldr	r3, [r3, r2]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80043da:	4651      	mov	r1, sl
 80043dc:	a806      	add	r0, sp, #24
			fp->dir_ptr = dir;
 80043de:	e9c4 3707 	strd	r3, r7, [r4, #28]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80043e2:	f7fe fd1b 	bl	8002e1c <inc_lock>
 80043e6:	62a0      	str	r0, [r4, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 80043e8:	b318      	cbz	r0, 8004432 <f_open+0x116>
			fp->err = 0;						/* Clear error flag */
 80043ea:	2300      	movs	r3, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80043ec:	9a06      	ldr	r2, [sp, #24]
			fp->flag = mode;					/* File access mode */
 80043ee:	f884 8006 	strb.w	r8, [r4, #6]
			fp->err = 0;						/* Clear error flag */
 80043f2:	71e3      	strb	r3, [r4, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80043f4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 80043f8:	7809      	ldrb	r1, [r1, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 80043fa:	7ef8      	ldrb	r0, [r7, #27]
 80043fc:	7ebb      	ldrb	r3, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 80043fe:	2903      	cmp	r1, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004400:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	if (fs->fs_type == FS_FAT32)
 8004404:	d105      	bne.n	8004412 <f_open+0xf6>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004406:	7d78      	ldrb	r0, [r7, #21]
 8004408:	7d39      	ldrb	r1, [r7, #20]
 800440a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800440e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			fp->id = fp->fs->id;
 8004412:	f241 0506 	movw	r5, #4102	; 0x1006
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004416:	6123      	str	r3, [r4, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8004418:	69f8      	ldr	r0, [r7, #28]
			fp->id = fp->fs->id;
 800441a:	5b53      	ldrh	r3, [r2, r5]
			fp->fptr = 0;						/* File pointer */
 800441c:	2100      	movs	r1, #0
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800441e:	60e0      	str	r0, [r4, #12]
}
 8004420:	4630      	mov	r0, r6
			fp->fs = dj.fs;	 					/* Validate file object */
 8004422:	6022      	str	r2, [r4, #0]
			fp->id = fp->fs->id;
 8004424:	80a3      	strh	r3, [r4, #4]
			fp->fptr = 0;						/* File pointer */
 8004426:	60a1      	str	r1, [r4, #8]
			fp->dsect = 0;
 8004428:	61a1      	str	r1, [r4, #24]
			fp->cltbl = 0;						/* Normal seek mode */
 800442a:	6261      	str	r1, [r4, #36]	; 0x24
}
 800442c:	b010      	add	sp, #64	; 0x40
 800442e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		res = FR_INT_ERR;
 8004432:	2602      	movs	r6, #2
 8004434:	e784      	b.n	8004340 <f_open+0x24>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004436:	a806      	add	r0, sp, #24
 8004438:	f7ff fc10 	bl	8003c5c <dir_register>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800443c:	f048 0808 	orr.w	r8, r8, #8
				dir = dj.dir;					/* New entry */
 8004440:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004442:	2800      	cmp	r0, #0
 8004444:	d1b1      	bne.n	80043aa <f_open+0x8e>
				dw = GET_FATTIME();				/* Created time */
 8004446:	f7fe f89d 	bl	8002584 <get_fattime>
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800444a:	2200      	movs	r2, #0
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800444c:	9b06      	ldr	r3, [sp, #24]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800444e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8004452:	0c01      	lsrs	r1, r0, #16
 8004454:	73b8      	strb	r0, [r7, #14]
 8004456:	0e00      	lsrs	r0, r0, #24
 8004458:	73fd      	strb	r5, [r7, #15]
 800445a:	7439      	strb	r1, [r7, #16]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800445c:	72fa      	strb	r2, [r7, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800445e:	773a      	strb	r2, [r7, #28]
 8004460:	777a      	strb	r2, [r7, #29]
 8004462:	77ba      	strb	r2, [r7, #30]
 8004464:	77fa      	strb	r2, [r7, #31]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8004466:	7478      	strb	r0, [r7, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8004468:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
	if (fs->fs_type == FS_FAT32)
 800446c:	7812      	ldrb	r2, [r2, #0]
	cl = LD_WORD(dir + DIR_FstClusLO);
 800446e:	7ef9      	ldrb	r1, [r7, #27]
 8004470:	7ebd      	ldrb	r5, [r7, #26]
	if (fs->fs_type == FS_FAT32)
 8004472:	2a03      	cmp	r2, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8004474:	ea45 2501 	orr.w	r5, r5, r1, lsl #8
	if (fs->fs_type == FS_FAT32)
 8004478:	d105      	bne.n	8004486 <f_open+0x16a>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800447a:	7d79      	ldrb	r1, [r7, #21]
 800447c:	7d3a      	ldrb	r2, [r7, #20]
 800447e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004482:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004486:	2200      	movs	r2, #0
				dj.fs->wflag = 1;
 8004488:	f241 0104 	movw	r1, #4100	; 0x1004
 800448c:	2001      	movs	r0, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 800448e:	76ba      	strb	r2, [r7, #26]
 8004490:	76fa      	strb	r2, [r7, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004492:	753a      	strb	r2, [r7, #20]
 8004494:	757a      	strb	r2, [r7, #21]
				dj.fs->wflag = 1;
 8004496:	5458      	strb	r0, [r3, r1]
				if (cl) {						/* Remove the cluster chain if exist */
 8004498:	b315      	cbz	r5, 80044e0 <f_open+0x1c4>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800449a:	4285      	cmp	r5, r0
 800449c:	d0c9      	beq.n	8004432 <f_open+0x116>
 800449e:	f241 0214 	movw	r2, #4116	; 0x1014
 80044a2:	589a      	ldr	r2, [r3, r2]
 80044a4:	4295      	cmp	r5, r2
 80044a6:	d2c4      	bcs.n	8004432 <f_open+0x116>
					dw = dj.fs->winsect;
 80044a8:	f241 092c 	movw	r9, #4140	; 0x102c
 80044ac:	4618      	mov	r0, r3
 80044ae:	4629      	mov	r1, r5
 80044b0:	f853 a009 	ldr.w	sl, [r3, r9]
 80044b4:	f7ff fd5e 	bl	8003f74 <remove_chain.part.9>
					if (res == FR_OK) {
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f47f af76 	bne.w	80043aa <f_open+0x8e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80044be:	f241 010c 	movw	r1, #4108	; 0x100c
 80044c2:	9b06      	ldr	r3, [sp, #24]
 80044c4:	3d01      	subs	r5, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80044c6:	f853 2009 	ldr.w	r2, [r3, r9]
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80044ca:	505d      	str	r5, [r3, r1]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80044cc:	4592      	cmp	sl, r2
 80044ce:	d007      	beq.n	80044e0 <f_open+0x1c4>
 80044d0:	4651      	mov	r1, sl
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fe fdde 	bl	8003094 <move_window.part.3>
		if (res == FR_OK) {
 80044d8:	2800      	cmp	r0, #0
 80044da:	f47f af66 	bne.w	80043aa <f_open+0x8e>
 80044de:	9b06      	ldr	r3, [sp, #24]
				mode |= FA__WRITTEN;
 80044e0:	f04f 0a01 	mov.w	sl, #1
 80044e4:	f048 0820 	orr.w	r8, r8, #32
 80044e8:	e774      	b.n	80043d4 <f_open+0xb8>
			if (res == FR_OK) {					/* Follow succeeded */
 80044ea:	2800      	cmp	r0, #0
 80044ec:	f47f af5d 	bne.w	80043aa <f_open+0x8e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80044f0:	7afb      	ldrb	r3, [r7, #11]
 80044f2:	06da      	lsls	r2, r3, #27
 80044f4:	d409      	bmi.n	800450a <f_open+0x1ee>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80044f6:	07a8      	lsls	r0, r5, #30
 80044f8:	d502      	bpl.n	8004500 <f_open+0x1e4>
 80044fa:	07d9      	lsls	r1, r3, #31
 80044fc:	f53f af63 	bmi.w	80043c6 <f_open+0xaa>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004500:	072a      	lsls	r2, r5, #28
 8004502:	9b06      	ldr	r3, [sp, #24]
 8004504:	f57f af66 	bpl.w	80043d4 <f_open+0xb8>
 8004508:	e7ea      	b.n	80044e0 <f_open+0x1c4>
					res = FR_NO_FILE;
 800450a:	2604      	movs	r6, #4
 800450c:	e718      	b.n	8004340 <f_open+0x24>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800450e:	461e      	mov	r6, r3
 8004510:	e716      	b.n	8004340 <f_open+0x24>
 8004512:	bf00      	nop
 8004514:	20000068 	.word	0x20000068
 8004518:	2000004c 	.word	0x2000004c

0800451c <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 800451c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004520:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8004522:	2300      	movs	r3, #0
{
 8004524:	b083      	sub	sp, #12
	*br = 0;	/* Clear read byte counter */
 8004526:	f8c9 3000 	str.w	r3, [r9]
{
 800452a:	468a      	mov	sl, r1
 800452c:	4614      	mov	r4, r2
 800452e:	4606      	mov	r6, r0

	res = validate(fp);							/* Check validity */
 8004530:	f7fe fcee 	bl	8002f10 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004534:	4680      	mov	r8, r0
 8004536:	2800      	cmp	r0, #0
 8004538:	d149      	bne.n	80045ce <f_read+0xb2>
	if (fp->err)								/* Check error */
 800453a:	79f3      	ldrb	r3, [r6, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d14a      	bne.n	80045d6 <f_read+0xba>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004540:	79b3      	ldrb	r3, [r6, #6]
 8004542:	07d9      	lsls	r1, r3, #31
 8004544:	f140 80ab 	bpl.w	800469e <f_read+0x182>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 8004548:	e9d6 2702 	ldrd	r2, r7, [r6, #8]
 800454c:	1abf      	subs	r7, r7, r2
 800454e:	42a7      	cmp	r7, r4
 8004550:	bf28      	it	cs
 8004552:	4627      	movcs	r7, r4
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 8004554:	2f00      	cmp	r7, #0
 8004556:	d03a      	beq.n	80045ce <f_read+0xb2>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8004558:	f241 0b0a 	movw	fp, #4106	; 0x100a
 800455c:	6830      	ldr	r0, [r6, #0]
 800455e:	f830 c00b 	ldrh.w	ip, [r0, fp]
 8004562:	fbb2 f1fc 	udiv	r1, r2, ip
 8004566:	fb0c 2311 	mls	r3, ip, r1, r2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d038      	beq.n	80045e0 <f_read+0xc4>
 800456e:	69b4      	ldr	r4, [r6, #24]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004570:	f241 012c 	movw	r1, #4140	; 0x102c
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004574:	ebac 0503 	sub.w	r5, ip, r3
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004578:	5841      	ldr	r1, [r0, r1]
 800457a:	42bd      	cmp	r5, r7
 800457c:	bf28      	it	cs
 800457e:	463d      	movcs	r5, r7
 8004580:	42a1      	cmp	r1, r4
 8004582:	d00c      	beq.n	800459e <f_read+0x82>
 8004584:	4621      	mov	r1, r4
 8004586:	f7fe fd85 	bl	8003094 <move_window.part.3>
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 800458a:	2800      	cmp	r0, #0
 800458c:	d156      	bne.n	800463c <f_read+0x120>
 800458e:	6830      	ldr	r0, [r6, #0]
 8004590:	68b2      	ldr	r2, [r6, #8]
 8004592:	f830 300b 	ldrh.w	r3, [r0, fp]
 8004596:	fbb2 f1f3 	udiv	r1, r2, r3
 800459a:	fb03 2311 	mls	r3, r3, r1, r2
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800459e:	4403      	add	r3, r0
	while (cnt--)
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	d07a      	beq.n	800469a <f_read+0x17e>
 80045a4:	f10a 32ff 	add.w	r2, sl, #4294967295
 80045a8:	1958      	adds	r0, r3, r5
		*d++ = *s++;
 80045aa:	f813 1b01 	ldrb.w	r1, [r3], #1
	while (cnt--)
 80045ae:	4283      	cmp	r3, r0
		*d++ = *s++;
 80045b0:	f802 1f01 	strb.w	r1, [r2, #1]!
	while (cnt--)
 80045b4:	d1f9      	bne.n	80045aa <f_read+0x8e>
 80045b6:	68b2      	ldr	r2, [r6, #8]
 80045b8:	44aa      	add	sl, r5
 80045ba:	1b7f      	subs	r7, r7, r5
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80045bc:	f8d9 3000 	ldr.w	r3, [r9]
 80045c0:	442a      	add	r2, r5
 80045c2:	441d      	add	r5, r3
 80045c4:	60b2      	str	r2, [r6, #8]
 80045c6:	f8c9 5000 	str.w	r5, [r9]
	for ( ;  btr;								/* Repeat until all data read */
 80045ca:	2f00      	cmp	r7, #0
 80045cc:	d1c6      	bne.n	800455c <f_read+0x40>
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 80045ce:	4640      	mov	r0, r8
 80045d0:	b003      	add	sp, #12
 80045d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045d6:	4698      	mov	r8, r3
 80045d8:	4640      	mov	r0, r8
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80045e0:	f241 0302 	movw	r3, #4098	; 0x1002
 80045e4:	5cc4      	ldrb	r4, [r0, r3]
 80045e6:	1e63      	subs	r3, r4, #1
 80045e8:	400b      	ands	r3, r1
			if (!csect) {						/* On the cluster boundary? */
 80045ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80045ee:	d02d      	beq.n	800464c <f_read+0x130>
 80045f0:	6974      	ldr	r4, [r6, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045f2:	f241 0214 	movw	r2, #4116	; 0x1014
 80045f6:	5882      	ldr	r2, [r0, r2]
	clst -= 2;
 80045f8:	3c02      	subs	r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80045fa:	3a02      	subs	r2, #2
 80045fc:	4294      	cmp	r4, r2
 80045fe:	d247      	bcs.n	8004690 <f_read+0x174>
	return clst * fs->csize + fs->database;
 8004600:	f241 0128 	movw	r1, #4136	; 0x1028
 8004604:	f241 0202 	movw	r2, #4098	; 0x1002
 8004608:	5841      	ldr	r1, [r0, r1]
 800460a:	5c82      	ldrb	r2, [r0, r2]
 800460c:	fb02 1404 	mla	r4, r2, r4, r1
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004610:	2c00      	cmp	r4, #0
 8004612:	d03d      	beq.n	8004690 <f_read+0x174>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004614:	f830 c00b 	ldrh.w	ip, [r0, fp]
			sect += csect;
 8004618:	441c      	add	r4, r3
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 800461a:	fbb7 f5fc 	udiv	r5, r7, ip
			if (cc) {							/* Read maximum contiguous sectors directly */
 800461e:	b1f5      	cbz	r5, 800465e <f_read+0x142>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004620:	1959      	adds	r1, r3, r5
 8004622:	428a      	cmp	r2, r1
					cc = fp->fs->csize - csect;
 8004624:	bf38      	it	cc
 8004626:	1ad5      	subcc	r5, r2, r3
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8004628:	f241 0201 	movw	r2, #4097	; 0x1001
 800462c:	462b      	mov	r3, r5
 800462e:	5c80      	ldrb	r0, [r0, r2]
 8004630:	4651      	mov	r1, sl
 8004632:	4622      	mov	r2, r4
 8004634:	f7fe fb86 	bl	8002d44 <disk_read>
 8004638:	2800      	cmp	r0, #0
 800463a:	d033      	beq.n	80046a4 <f_read+0x188>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800463c:	f04f 0801 	mov.w	r8, #1
}
 8004640:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004642:	f886 8007 	strb.w	r8, [r6, #7]
}
 8004646:	b003      	add	sp, #12
 8004648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (fp->fptr == 0) {			/* On the top of the file? */
 800464c:	b972      	cbnz	r2, 800466c <f_read+0x150>
					clst = fp->sclust;			/* Follow from the origin */
 800464e:	6934      	ldr	r4, [r6, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004650:	2c01      	cmp	r4, #1
 8004652:	d91d      	bls.n	8004690 <f_read+0x174>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004654:	1c62      	adds	r2, r4, #1
 8004656:	d0f1      	beq.n	800463c <f_read+0x120>
 8004658:	6830      	ldr	r0, [r6, #0]
				fp->clust = clst;				/* Update current cluster */
 800465a:	6174      	str	r4, [r6, #20]
 800465c:	e7c9      	b.n	80045f2 <f_read+0xd6>
 800465e:	68b2      	ldr	r2, [r6, #8]
			fp->dsect = sect;
 8004660:	61b4      	str	r4, [r6, #24]
 8004662:	fbb2 f3fc 	udiv	r3, r2, ip
 8004666:	fb0c 2313 	mls	r3, ip, r3, r2
 800466a:	e781      	b.n	8004570 <f_read+0x54>
					if (fp->cltbl)
 800466c:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800466e:	2d00      	cmp	r5, #0
 8004670:	d03b      	beq.n	80046ea <f_read+0x1ce>
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004672:	686a      	ldr	r2, [r5, #4]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8004674:	fbb1 f1f4 	udiv	r1, r1, r4
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004678:	1d28      	adds	r0, r5, #4
		if (!ncl) return 0;		/* End of table? (error) */
 800467a:	b14a      	cbz	r2, 8004690 <f_read+0x174>
		if (cl < ncl) break;	/* In this fragment? */
 800467c:	4291      	cmp	r1, r2
 800467e:	d202      	bcs.n	8004686 <f_read+0x16a>
 8004680:	e041      	b.n	8004706 <f_read+0x1ea>
 8004682:	428a      	cmp	r2, r1
 8004684:	d83f      	bhi.n	8004706 <f_read+0x1ea>
		cl -= ncl; tbl++;		/* Next fragment */
 8004686:	1a89      	subs	r1, r1, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004688:	f850 2f08 	ldr.w	r2, [r0, #8]!
		if (!ncl) return 0;		/* End of table? (error) */
 800468c:	2a00      	cmp	r2, #0
 800468e:	d1f8      	bne.n	8004682 <f_read+0x166>
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004690:	f04f 0802 	mov.w	r8, #2
 8004694:	f886 8007 	strb.w	r8, [r6, #7]
 8004698:	e799      	b.n	80045ce <f_read+0xb2>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800469a:	60b2      	str	r2, [r6, #8]
 800469c:	e75f      	b.n	800455e <f_read+0x42>
		LEAVE_FF(fp->fs, FR_DENIED);
 800469e:	f04f 0807 	mov.w	r8, #7
 80046a2:	e794      	b.n	80045ce <f_read+0xb2>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 80046a4:	f241 0304 	movw	r3, #4100	; 0x1004
 80046a8:	6830      	ldr	r0, [r6, #0]
 80046aa:	5cc3      	ldrb	r3, [r0, r3]
 80046ac:	f830 200b 	ldrh.w	r2, [r0, fp]
 80046b0:	b1ab      	cbz	r3, 80046de <f_read+0x1c2>
 80046b2:	f241 032c 	movw	r3, #4140	; 0x102c
 80046b6:	58c3      	ldr	r3, [r0, r3]
 80046b8:	1b1c      	subs	r4, r3, r4
 80046ba:	42a5      	cmp	r5, r4
 80046bc:	d90f      	bls.n	80046de <f_read+0x1c2>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 80046be:	fb02 f404 	mul.w	r4, r2, r4
	while (cnt--)
 80046c2:	b162      	cbz	r2, 80046de <f_read+0x1c2>
 80046c4:	3c01      	subs	r4, #1
 80046c6:	eb0a 0304 	add.w	r3, sl, r4
 80046ca:	4402      	add	r2, r0
		*d++ = *s++;
 80046cc:	f810 1b01 	ldrb.w	r1, [r0], #1
	while (cnt--)
 80046d0:	4290      	cmp	r0, r2
		*d++ = *s++;
 80046d2:	f803 1f01 	strb.w	r1, [r3, #1]!
	while (cnt--)
 80046d6:	d1f9      	bne.n	80046cc <f_read+0x1b0>
 80046d8:	6830      	ldr	r0, [r6, #0]
 80046da:	f830 200b 	ldrh.w	r2, [r0, fp]
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80046de:	fb02 f505 	mul.w	r5, r2, r5
 80046e2:	68b2      	ldr	r2, [r6, #8]
 80046e4:	44aa      	add	sl, r5
 80046e6:	1b7f      	subs	r7, r7, r5
 80046e8:	e768      	b.n	80045bc <f_read+0xa0>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80046ea:	6971      	ldr	r1, [r6, #20]
 80046ec:	9301      	str	r3, [sp, #4]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80046ee:	2901      	cmp	r1, #1
 80046f0:	d9ce      	bls.n	8004690 <f_read+0x174>
 80046f2:	f241 0214 	movw	r2, #4116	; 0x1014
 80046f6:	5882      	ldr	r2, [r0, r2]
 80046f8:	4291      	cmp	r1, r2
 80046fa:	d2c9      	bcs.n	8004690 <f_read+0x174>
 80046fc:	f7fe fee0 	bl	80034c0 <get_fat.part.6>
 8004700:	9b01      	ldr	r3, [sp, #4]
 8004702:	4604      	mov	r4, r0
 8004704:	e7a4      	b.n	8004650 <f_read+0x134>
	return cl + *tbl;	/* Return the cluster number */
 8004706:	6844      	ldr	r4, [r0, #4]
 8004708:	440c      	add	r4, r1
 800470a:	e7a1      	b.n	8004650 <f_read+0x134>

0800470c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8004710:	f7fe fbfe 	bl	8002f10 <validate>
	if (res == FR_OK) {
 8004714:	2800      	cmp	r0, #0
 8004716:	d13e      	bne.n	8004796 <f_sync+0x8a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8004718:	79a3      	ldrb	r3, [r4, #6]
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	d53b      	bpl.n	8004796 <f_sync+0x8a>
	if (sector != fs->winsect) {	/* Window offset changed? */
 800471e:	f241 032c 	movw	r3, #4140	; 0x102c
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8004722:	6820      	ldr	r0, [r4, #0]
 8004724:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004726:	58c3      	ldr	r3, [r0, r3]
 8004728:	4299      	cmp	r1, r3
 800472a:	d002      	beq.n	8004732 <f_sync+0x26>
 800472c:	f7fe fcb2 	bl	8003094 <move_window.part.3>
			if (res == FR_OK) {
 8004730:	bb88      	cbnz	r0, 8004796 <f_sync+0x8a>
				dir = fp->dir_ptr;
 8004732:	6a25      	ldr	r5, [r4, #32]
				st_clust(dir, fp->sclust);					/* Update start cluster */
				tm = GET_FATTIME();							/* Update updated time */
				ST_DWORD(dir + DIR_WrtTime, tm);
				ST_WORD(dir + DIR_LstAccDate, 0);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
 8004734:	2601      	movs	r6, #1
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004736:	7aeb      	ldrb	r3, [r5, #11]
 8004738:	f043 0320 	orr.w	r3, r3, #32
 800473c:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	772b      	strb	r3, [r5, #28]
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	776b      	strb	r3, [r5, #29]
 8004748:	89e3      	ldrh	r3, [r4, #14]
 800474a:	77ab      	strb	r3, [r5, #30]
 800474c:	7be3      	ldrb	r3, [r4, #15]
 800474e:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8004750:	6923      	ldr	r3, [r4, #16]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004752:	0c1a      	lsrs	r2, r3, #16
 8004754:	0a11      	lsrs	r1, r2, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004756:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800475a:	76ab      	strb	r3, [r5, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800475c:	752a      	strb	r2, [r5, #20]
 800475e:	7569      	strb	r1, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004760:	76e8      	strb	r0, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8004762:	f7fd ff0f 	bl	8002584 <get_fattime>
				ST_WORD(dir + DIR_LstAccDate, 0);
 8004766:	2300      	movs	r3, #0
				fp->fs->wflag = 1;
 8004768:	f241 0104 	movw	r1, #4100	; 0x1004
				ST_DWORD(dir + DIR_WrtTime, tm);
 800476c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004770:	75a8      	strb	r0, [r5, #22]
 8004772:	75ea      	strb	r2, [r5, #23]
 8004774:	0c02      	lsrs	r2, r0, #16
 8004776:	0e00      	lsrs	r0, r0, #24
 8004778:	7668      	strb	r0, [r5, #25]
 800477a:	762a      	strb	r2, [r5, #24]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800477c:	74ab      	strb	r3, [r5, #18]
 800477e:	74eb      	strb	r3, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 8004780:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
 8004782:	6822      	ldr	r2, [r4, #0]
				fp->flag &= ~FA__WRITTEN;
 8004784:	f023 0320 	bic.w	r3, r3, #32
 8004788:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
 800478a:	5456      	strb	r6, [r2, r1]
				res = sync_fs(fp->fs);
 800478c:	4610      	mov	r0, r2
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 800478e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8004792:	f7fe bc11 	b.w	8002fb8 <sync_fs>
}
 8004796:	bd70      	pop	{r4, r5, r6, pc}

08004798 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800479c:	f7ff ffb6 	bl	800470c <f_sync>
	if (res == FR_OK)
 80047a0:	b100      	cbz	r0, 80047a4 <f_close+0xc>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
		res = validate(fp);				/* Lock volume */
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7fe fbb3 	bl	8002f10 <validate>
		if (res == FR_OK) {
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d1f9      	bne.n	80047a2 <f_close+0xa>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80047ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047b0:	3b01      	subs	r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d810      	bhi.n	80047d8 <f_close+0x40>
		n = Files[i].ctr;
 80047b6:	005a      	lsls	r2, r3, #1
 80047b8:	4e0c      	ldr	r6, [pc, #48]	; (80047ec <f_close+0x54>)
 80047ba:	18d1      	adds	r1, r2, r3
 80047bc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80047c0:	894d      	ldrh	r5, [r1, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80047c2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80047c6:	d00f      	beq.n	80047e8 <f_close+0x50>
		if (n) n--;					/* Decrement read mode open count */
 80047c8:	b945      	cbnz	r5, 80047dc <f_close+0x44>
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047ca:	2100      	movs	r1, #0
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	50f1      	str	r1, [r6, r3]
				fp->fs = 0;				/* Invalidate file object */
 80047d2:	2300      	movs	r3, #0
 80047d4:	6023      	str	r3, [r4, #0]
}
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047d8:	2002      	movs	r0, #2
}
 80047da:	bd70      	pop	{r4, r5, r6, pc}
		if (n) n--;					/* Decrement read mode open count */
 80047dc:	3d01      	subs	r5, #1
 80047de:	b2ad      	uxth	r5, r5
		Files[i].ctr = n;
 80047e0:	814d      	strh	r5, [r1, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80047e2:	2d00      	cmp	r5, #0
 80047e4:	d1f5      	bne.n	80047d2 <f_close+0x3a>
 80047e6:	e7f0      	b.n	80047ca <f_close+0x32>
		Files[i].ctr = n;
 80047e8:	8148      	strh	r0, [r1, #10]
 80047ea:	e7ee      	b.n	80047ca <f_close+0x32>
 80047ec:	2000004c 	.word	0x2000004c

080047f0 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <FATFS_LinkDriver+0x48>)
 80047f2:	7a5a      	ldrb	r2, [r3, #9]
 80047f4:	2a01      	cmp	r2, #1
 80047f6:	d901      	bls.n	80047fc <FATFS_LinkDriver+0xc>
  uint8_t ret = 1;
 80047f8:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80047fa:	4770      	bx	lr
    disk.is_initialized[disk.nbr] = 0;
 80047fc:	2200      	movs	r2, #0
{
 80047fe:	b4f0      	push	{r4, r5, r6, r7}
    path[1] = ':';
 8004800:	263a      	movs	r6, #58	; 0x3a
    path[2] = '/';
 8004802:	252f      	movs	r5, #47	; 0x2f
    disk.is_initialized[disk.nbr] = 0;
 8004804:	f893 c009 	ldrb.w	ip, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 8004808:	7a5f      	ldrb	r7, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 800480a:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;  
 800480c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004810:	6078      	str	r0, [r7, #4]
    DiskNum = disk.nbr++;
 8004812:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;  
 8004814:	441c      	add	r4, r3
    DiskNum = disk.nbr++;
 8004816:	b2c0      	uxtb	r0, r0
    disk.lun[disk.nbr] = lun;  
 8004818:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800481a:	1c44      	adds	r4, r0, #1
 800481c:	b2e4      	uxtb	r4, r4
    disk.is_initialized[disk.nbr] = 0;
 800481e:	fa5f fc8c 	uxtb.w	ip, ip
    DiskNum = disk.nbr++;
 8004822:	725c      	strb	r4, [r3, #9]
    disk.is_initialized[disk.nbr] = 0;
 8004824:	f803 200c 	strb.w	r2, [r3, ip]
    path[0] = DiskNum + '0';
 8004828:	3030      	adds	r0, #48	; 0x30
 800482a:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800482c:	704e      	strb	r6, [r1, #1]
    path[3] = 0;
 800482e:	4610      	mov	r0, r2
    path[2] = '/';
 8004830:	708d      	strb	r5, [r1, #2]
    path[3] = 0;
 8004832:	70ca      	strb	r2, [r1, #3]
}
 8004834:	bcf0      	pop	{r4, r5, r6, r7}
 8004836:	4770      	bx	lr
 8004838:	20000268 	.word	0x20000268

0800483c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800483c:	287f      	cmp	r0, #127	; 0x7f
 800483e:	d919      	bls.n	8004874 <ff_convert+0x38>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8004840:	b989      	cbnz	r1, 8004866 <ff_convert+0x2a>
{
 8004842:	b410      	push	{r4}
 8004844:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <ff_convert+0x44>)
		if (dir) {		/* OEMCP to Unicode */
 8004846:	23c7      	movs	r3, #199	; 0xc7
 8004848:	e003      	b.n	8004852 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800484a:	2980      	cmp	r1, #128	; 0x80
 800484c:	d015      	beq.n	800487a <ff_convert+0x3e>
 800484e:	f832 3f02 	ldrh.w	r3, [r2, #2]!
				if (chr == Tbl[c]) break;
 8004852:	4298      	cmp	r0, r3
 8004854:	b28c      	uxth	r4, r1
 8004856:	f101 0101 	add.w	r1, r1, #1
 800485a:	d1f6      	bne.n	800484a <ff_convert+0xe>
 800485c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8004860:	b280      	uxth	r0, r0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8004862:	bc10      	pop	{r4}
 8004864:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004866:	28ff      	cmp	r0, #255	; 0xff
 8004868:	d805      	bhi.n	8004876 <ff_convert+0x3a>
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <ff_convert+0x44>)
 800486c:	3880      	subs	r0, #128	; 0x80
 800486e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8004872:	4770      	bx	lr
}
 8004874:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004876:	2000      	movs	r0, #0
 8004878:	4770      	bx	lr
 800487a:	2000      	movs	r0, #0
 800487c:	e7f1      	b.n	8004862 <ff_convert+0x26>
 800487e:	bf00      	nop
 8004880:	08004a68 	.word	0x08004a68

08004884 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004884:	2861      	cmp	r0, #97	; 0x61
 8004886:	d00e      	beq.n	80048a6 <ff_wtoupper+0x22>
 8004888:	2201      	movs	r2, #1
 800488a:	2362      	movs	r3, #98	; 0x62
 800488c:	4907      	ldr	r1, [pc, #28]	; (80048ac <ff_wtoupper+0x28>)
 800488e:	4283      	cmp	r3, r0
 8004890:	d005      	beq.n	800489e <ff_wtoupper+0x1a>
 8004892:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8004896:	3201      	adds	r2, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f8      	bne.n	800488e <ff_wtoupper+0xa>

	return tbl_lower[i] ? tbl_upper[i] : chr;
}
 800489c:	4770      	bx	lr
 800489e:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <ff_wtoupper+0x2c>)
 80048a0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80048a4:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80048a6:	2041      	movs	r0, #65	; 0x41
	return tbl_lower[i] ? tbl_upper[i] : chr;
 80048a8:	e7f8      	b.n	800489c <ff_wtoupper+0x18>
 80048aa:	bf00      	nop
 80048ac:	08004b6a 	.word	0x08004b6a
 80048b0:	08004d48 	.word	0x08004d48

080048b4 <__libc_init_array>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	2500      	movs	r5, #0
 80048b8:	4e0c      	ldr	r6, [pc, #48]	; (80048ec <__libc_init_array+0x38>)
 80048ba:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <__libc_init_array+0x3c>)
 80048bc:	1ba4      	subs	r4, r4, r6
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	42a5      	cmp	r5, r4
 80048c2:	d109      	bne.n	80048d8 <__libc_init_array+0x24>
 80048c4:	f000 f81a 	bl	80048fc <_init>
 80048c8:	2500      	movs	r5, #0
 80048ca:	4e0a      	ldr	r6, [pc, #40]	; (80048f4 <__libc_init_array+0x40>)
 80048cc:	4c0a      	ldr	r4, [pc, #40]	; (80048f8 <__libc_init_array+0x44>)
 80048ce:	1ba4      	subs	r4, r4, r6
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	42a5      	cmp	r5, r4
 80048d4:	d105      	bne.n	80048e2 <__libc_init_array+0x2e>
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048dc:	4798      	blx	r3
 80048de:	3501      	adds	r5, #1
 80048e0:	e7ee      	b.n	80048c0 <__libc_init_array+0xc>
 80048e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048e6:	4798      	blx	r3
 80048e8:	3501      	adds	r5, #1
 80048ea:	e7f2      	b.n	80048d2 <__libc_init_array+0x1e>
 80048ec:	08004f28 	.word	0x08004f28
 80048f0:	08004f28 	.word	0x08004f28
 80048f4:	08004f28 	.word	0x08004f28
 80048f8:	08004f2c 	.word	0x08004f2c

080048fc <_init>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr

08004908 <_fini>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	bf00      	nop
 800490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490e:	bc08      	pop	{r3}
 8004910:	469e      	mov	lr, r3
 8004912:	4770      	bx	lr
