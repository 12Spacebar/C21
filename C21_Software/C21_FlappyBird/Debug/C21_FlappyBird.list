
C21_FlappyBird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004940  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8c4  08004a4c  08004a4c  00014a4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f310  0800f310  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  0800f310  0800f310  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f310  0800f310  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f310  0800f310  0001f310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f314  0800f314  0001f314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800f318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002838  20000088  0800f3a0  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028c0  0800f3a0  000228c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7d9  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f62  00000000  00000000  0003b88a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000fded  00000000  00000000  0003f7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001080  00000000  00000000  0004f5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a50  00000000  00000000  00050660  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015c77  00000000  00000000  000520b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001001b  00000000  00000000  00067d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007814a  00000000  00000000  00077d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000efe8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003424  00000000  00000000  000eff08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a34 	.word	0x08004a34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08004a34 	.word	0x08004a34

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800014e:	2414      	movs	r4, #20
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000150:	2610      	movs	r6, #16
{
 8000152:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000154:	4622      	mov	r2, r4
 8000156:	2100      	movs	r1, #0
 8000158:	a80c      	add	r0, sp, #48	; 0x30
 800015a:	f004 fb69 	bl	8004830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015e:	4622      	mov	r2, r4
 8000160:	eb0d 0004 	add.w	r0, sp, r4
 8000164:	2100      	movs	r1, #0
 8000166:	f004 fb63 	bl	8004830 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800016a:	4632      	mov	r2, r6
 800016c:	2100      	movs	r1, #0
 800016e:	a801      	add	r0, sp, #4
 8000170:	f004 fb5e 	bl	8004830 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000174:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000176:	2201      	movs	r2, #1
 8000178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800017c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000180:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000184:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000188:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800018a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800018c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800018e:	f001 fa75 	bl	800167c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000192:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000194:	2400      	movs	r4, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000196:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800019a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800019e:	4629      	mov	r1, r5
 80001a0:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001a2:	e9cd 4307 	strd	r4, r3, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001a6:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001a8:	f001 fc40 	bl	8001a2c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ac:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001ae:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001b0:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001b2:	f001 fcf7 	bl	8001ba4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80001b6:	b014      	add	sp, #80	; 0x50
 80001b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080001bc <main>:
{
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c0:	4dcb      	ldr	r5, [pc, #812]	; (80004f0 <main+0x334>)
{
 80001c2:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
  HAL_Init();
 80001c6:	f000 ff81 	bl	80010cc <HAL_Init>
  SystemClock_Config();
 80001ca:	f7ff ffbf 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	2210      	movs	r2, #16
 80001d0:	2100      	movs	r1, #0
 80001d2:	a81f      	add	r0, sp, #124	; 0x7c
 80001d4:	f004 fb2c 	bl	8004830 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d8:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001dc:	f043 0310 	orr.w	r3, r3, #16
 80001e0:	61ab      	str	r3, [r5, #24]
 80001e2:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001e4:	f240 4182 	movw	r1, #1154	; 0x482
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e8:	f003 0310 	and.w	r3, r3, #16
 80001ec:	9307      	str	r3, [sp, #28]
 80001ee:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001f2:	48c0      	ldr	r0, [pc, #768]	; (80004f4 <main+0x338>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f4:	f043 0320 	orr.w	r3, r3, #32
 80001f8:	61ab      	str	r3, [r5, #24]
 80001fa:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fc:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fe:	f003 0320 	and.w	r3, r3, #32
 8000202:	9308      	str	r3, [sp, #32]
 8000204:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000206:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB1 PB10 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000208:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020a:	f043 0304 	orr.w	r3, r3, #4
 800020e:	61ab      	str	r3, [r5, #24]
 8000210:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000212:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000214:	f003 0304 	and.w	r3, r3, #4
 8000218:	9309      	str	r3, [sp, #36]	; 0x24
 800021a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800021c:	69ab      	ldr	r3, [r5, #24]
  hspi1.Init.CRCPolynomial = 10;
 800021e:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000222:	f043 0308 	orr.w	r3, r3, #8
 8000226:	61ab      	str	r3, [r5, #24]
 8000228:	69ab      	ldr	r3, [r5, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800022a:	f44f 7a82 	mov.w	sl, #260	; 0x104
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022e:	f003 0308 	and.w	r3, r3, #8
 8000232:	930a      	str	r3, [sp, #40]	; 0x28
 8000234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 8000236:	f001 f993 	bl	8001560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000240:	48ad      	ldr	r0, [pc, #692]	; (80004f8 <main+0x33c>)
 8000242:	f001 f98d 	bl	8001560 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000246:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800024a:	4bac      	ldr	r3, [pc, #688]	; (80004fc <main+0x340>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800024c:	a91f      	add	r1, sp, #124	; 0x7c
 800024e:	48ac      	ldr	r0, [pc, #688]	; (8000500 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000250:	e9cd 231f 	strd	r2, r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000254:	9421      	str	r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000256:	f001 f89d 	bl	8001394 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800025a:	f240 4382 	movw	r3, #1154	; 0x482
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800025e:	a91f      	add	r1, sp, #124	; 0x7c
 8000260:	48a4      	ldr	r0, [pc, #656]	; (80004f4 <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000262:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000266:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000268:	9722      	str	r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026a:	f001 f893 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800026e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000272:	a91f      	add	r1, sp, #124	; 0x7c
 8000274:	48a0      	ldr	r0, [pc, #640]	; (80004f8 <main+0x33c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	e9cd 361f 	strd	r3, r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027a:	e9cd 4721 	strd	r4, r7, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027e:	f001 f889 	bl	8001394 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000282:	4622      	mov	r2, r4
 8000284:	4621      	mov	r1, r4
 8000286:	2028      	movs	r0, #40	; 0x28
 8000288:	f000 ff68 	bl	800115c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800028c:	2028      	movs	r0, #40	; 0x28
 800028e:	f000 ff99 	bl	80011c4 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000292:	696b      	ldr	r3, [r5, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000294:	f44f 7900 	mov.w	r9, #512	; 0x200
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000298:	4333      	orrs	r3, r6
 800029a:	616b      	str	r3, [r5, #20]
 800029c:	696b      	ldr	r3, [r5, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800029e:	2508      	movs	r5, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a0:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002a2:	4622      	mov	r2, r4
 80002a4:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002a6:	9306      	str	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002a8:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002aa:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002ac:	f000 ff56 	bl	800115c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002b0:	200c      	movs	r0, #12
 80002b2:	f000 ff87 	bl	80011c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002b6:	4622      	mov	r2, r4
 80002b8:	4621      	mov	r1, r4
 80002ba:	200d      	movs	r0, #13
 80002bc:	f000 ff4e 	bl	800115c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002c0:	200d      	movs	r0, #13
 80002c2:	f000 ff7f 	bl	80011c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002c6:	4622      	mov	r2, r4
 80002c8:	4621      	mov	r1, r4
 80002ca:	200f      	movs	r0, #15
 80002cc:	f000 ff46 	bl	800115c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002d0:	200f      	movs	r0, #15
 80002d2:	f000 ff77 	bl	80011c4 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80002d6:	488b      	ldr	r0, [pc, #556]	; (8000504 <main+0x348>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d8:	4b8b      	ldr	r3, [pc, #556]	; (8000508 <main+0x34c>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002da:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002de:	e9c0 3a00 	strd	r3, sl, [r0]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e2:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002e6:	e9c0 9506 	strd	r9, r5, [r0, #24]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ea:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002ee:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002f0:	f8c0 802c 	str.w	r8, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002f4:	f001 fd17 	bl	8001d26 <HAL_SPI_Init>
  MX_FATFS_Init();
 80002f8:	f002 fa7c 	bl	80027f4 <MX_FATFS_Init>
  huart2.Init.BaudRate = 115200;
 80002fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8000300:	4882      	ldr	r0, [pc, #520]	; (800050c <main+0x350>)
  huart2.Init.BaudRate = 115200;
 8000302:	4983      	ldr	r1, [pc, #524]	; (8000510 <main+0x354>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8000308:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000310:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000316:	f002 fa0f 	bl	8002738 <HAL_UART_Init>
  hspi2.Instance = SPI2;
 800031a:	487e      	ldr	r0, [pc, #504]	; (8000514 <main+0x358>)
 800031c:	4b7e      	ldr	r3, [pc, #504]	; (8000518 <main+0x35c>)
  hspi2.Init.CRCPolynomial = 10;
 800031e:	e9c0 480a 	strd	r4, r8, [r0, #40]	; 0x28
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000322:	e9c0 3a00 	strd	r3, sl, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000326:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800032a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800032e:	e9c0 9406 	strd	r9, r4, [r0, #24]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000332:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000336:	f001 fcf6 	bl	8001d26 <HAL_SPI_Init>
  hpcd_USB_FS.Instance = USB;
 800033a:	4878      	ldr	r0, [pc, #480]	; (800051c <main+0x360>)
 800033c:	4b78      	ldr	r3, [pc, #480]	; (8000520 <main+0x364>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800033e:	6087      	str	r7, [r0, #8]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000340:	e9c0 3500 	strd	r3, r5, [r0]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000344:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000348:	6204      	str	r4, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800034a:	f001 f921 	bl	8001590 <HAL_PCD_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034e:	4621      	mov	r1, r4
 8000350:	2210      	movs	r2, #16
 8000352:	a814      	add	r0, sp, #80	; 0x50
 8000354:	f004 fa6c 	bl	8004830 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000358:	221c      	movs	r2, #28
 800035a:	4621      	mov	r1, r4
 800035c:	a81f      	add	r0, sp, #124	; 0x7c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800035e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000362:	f004 fa65 	bl	8004830 <memset>
  htim2.Instance = TIM2;
 8000366:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036a:	4d6e      	ldr	r5, [pc, #440]	; (8000524 <main+0x368>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036c:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  htim2.Init.Prescaler = 1;
 8000370:	e9c5 3600 	strd	r3, r6, [r5]
  htim2.Init.Period = 1632;
 8000374:	f44f 63cc 	mov.w	r3, #1632	; 0x660
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000378:	4628      	mov	r0, r5
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037a:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800037e:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000380:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000382:	f002 f81f 	bl	80023c4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000386:	a914      	add	r1, sp, #80	; 0x50
 8000388:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800038a:	9714      	str	r7, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800038c:	f002 f8e6 	bl	800255c <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000390:	4628      	mov	r0, r5
 8000392:	f002 f831 	bl	80023f8 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000396:	a90b      	add	r1, sp, #44	; 0x2c
 8000398:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800039e:	f002 f971 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003a2:	2360      	movs	r3, #96	; 0x60
  htim1.Init.Prescaler = 71;
 80003a4:	f04f 0847 	mov.w	r8, #71	; 0x47
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003a8:	4622      	mov	r2, r4
 80003aa:	a91f      	add	r1, sp, #124	; 0x7c
 80003ac:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 80003ae:	e9cd 341f 	strd	r3, r4, [sp, #124]	; 0x7c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b2:	9421      	str	r4, [sp, #132]	; 0x84
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003b4:	9423      	str	r4, [sp, #140]	; 0x8c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003b6:	f002 f865 	bl	8002484 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80003ba:	4628      	mov	r0, r5
 80003bc:	f000 fcb6 	bl	8000d2c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c0:	2210      	movs	r2, #16
 80003c2:	4621      	mov	r1, r4
 80003c4:	a81f      	add	r0, sp, #124	; 0x7c
 80003c6:	f004 fa33 	bl	8004830 <memset>
  htim1.Instance = TIM1;
 80003ca:	4d57      	ldr	r5, [pc, #348]	; (8000528 <main+0x36c>)
  htim1.Init.Prescaler = 71;
 80003cc:	4b57      	ldr	r3, [pc, #348]	; (800052c <main+0x370>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003ce:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 71;
 80003d0:	e9c5 3800 	strd	r3, r8, [r5]
  htim1.Init.Period = 1000;
 80003d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003da:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003de:	e9c5 4405 	strd	r4, r4, [r5, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e6:	f001 ffed 	bl	80023c4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ea:	a91f      	add	r1, sp, #124	; 0x7c
 80003ec:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ee:	971f      	str	r7, [sp, #124]	; 0x7c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003f0:	f002 f8b4 	bl	800255c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003f4:	a914      	add	r1, sp, #80	; 0x50
 80003f6:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f8:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003fc:	f002 f942 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000400:	2210      	movs	r2, #16
 8000402:	4621      	mov	r1, r4
 8000404:	a81f      	add	r0, sp, #124	; 0x7c
 8000406:	f004 fa13 	bl	8004830 <memset>
  htim4.Instance = TIM4;
 800040a:	4d49      	ldr	r5, [pc, #292]	; (8000530 <main+0x374>)
 800040c:	4b49      	ldr	r3, [pc, #292]	; (8000534 <main+0x378>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800040e:	4628      	mov	r0, r5
  htim4.Init.Prescaler = 71;
 8000410:	e9c5 3800 	strd	r3, r8, [r5]
  htim4.Init.Period = 2000;
 8000414:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000418:	60ac      	str	r4, [r5, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041a:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800041e:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000420:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000424:	f001 ffce 	bl	80023c4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000428:	a91f      	add	r1, sp, #124	; 0x7c
 800042a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042c:	971f      	str	r7, [sp, #124]	; 0x7c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800042e:	f002 f895 	bl	800255c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000432:	a914      	add	r1, sp, #80	; 0x50
 8000434:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000436:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800043a:	f002 f923 	bl	8002684 <HAL_TIMEx_MasterConfigSynchronization>
  ST7735_Init();
 800043e:	f000 faf7 	bl	8000a30 <ST7735_Init>
  ST7735_DrawImage(0, 0, 128, 128, &ground);
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	4d3c      	ldr	r5, [pc, #240]	; (8000538 <main+0x37c>)
 8000446:	461a      	mov	r2, r3
 8000448:	4621      	mov	r1, r4
 800044a:	4620      	mov	r0, r4
 800044c:	9500      	str	r5, [sp, #0]
 800044e:	f000 fb24 	bl	8000a9a <ST7735_DrawImage>
  fres = f_mount ( &fs ,  "" ,   1);
 8000452:	4632      	mov	r2, r6
 8000454:	4939      	ldr	r1, [pc, #228]	; (800053c <main+0x380>)
 8000456:	483a      	ldr	r0, [pc, #232]	; (8000540 <main+0x384>)
 8000458:	f003 fe3a 	bl	80040d0 <f_mount>
 800045c:	4c39      	ldr	r4, [pc, #228]	; (8000544 <main+0x388>)
 800045e:	46a8      	mov	r8, r5
 	  fres = f_mount ( &fs ,  "" ,   1);
 8000460:	4e37      	ldr	r6, [pc, #220]	; (8000540 <main+0x384>)
 8000462:	4d36      	ldr	r5, [pc, #216]	; (800053c <main+0x380>)
  fres = f_mount ( &fs ,  "" ,   1);
 8000464:	7020      	strb	r0, [r4, #0]
   while ( fres !=  FR_OK ){
 8000466:	7823      	ldrb	r3, [r4, #0]
 	  fres = f_mount ( &fs ,  "" ,   1);
 8000468:	2201      	movs	r2, #1
   while ( fres !=  FR_OK ){
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 81c3 	bne.w	80007f6 <main+0x63a>
      FRESULT res = f_open(&file, "rose.bmp", FA_READ);
 8000470:	4935      	ldr	r1, [pc, #212]	; (8000548 <main+0x38c>)
 8000472:	a814      	add	r0, sp, #80	; 0x50
 8000474:	f003 fe64 	bl	8004140 <f_open>
      if(res != FR_OK) {
 8000478:	2800      	cmp	r0, #0
 800047a:	f040 81f4 	bne.w	8000866 <main+0x6aa>
  res = f_read(&file, header, sizeof(header), &bytesRead);
 800047e:	ab05      	add	r3, sp, #20
 8000480:	2222      	movs	r2, #34	; 0x22
 8000482:	a90b      	add	r1, sp, #44	; 0x2c
 8000484:	a814      	add	r0, sp, #80	; 0x50
 8000486:	f003 ff33 	bl	80042f0 <f_read>
  if(res != FR_OK) {
 800048a:	2800      	cmp	r0, #0
 800048c:	f040 81f1 	bne.w	8000872 <main+0x6b6>
  res = f_lseek(&file, imageOffset);
 8000490:	f8dd 1036 	ldr.w	r1, [sp, #54]	; 0x36
 8000494:	a814      	add	r0, sp, #80	; 0x50
 8000496:	f004 f833 	bl	8004500 <f_lseek>
  res = f_close(&file);
 800049a:	a814      	add	r0, sp, #80	; 0x50
        num = (rand() % (upper - lower + 1)) + lower;
 800049c:	2447      	movs	r4, #71	; 0x47
  res = f_close(&file);
 800049e:	f004 f820 	bl	80044e2 <f_close>
        num = (rand() % (upper - lower + 1)) + lower;
 80004a2:	f004 fa81 	bl	80049a8 <rand>
 80004a6:	fb90 f3f4 	sdiv	r3, r0, r4
 80004aa:	fb03 0014 	mls	r0, r3, r4, r0
  col_array[0] = printRandoms(30, 100);
 80004ae:	4d27      	ldr	r5, [pc, #156]	; (800054c <main+0x390>)
        num = (rand() % (upper - lower + 1)) + lower;
 80004b0:	301e      	adds	r0, #30
  col_array[0] = printRandoms(30, 100);
 80004b2:	6028      	str	r0, [r5, #0]
        num = (rand() % (upper - lower + 1)) + lower;
 80004b4:	f004 fa78 	bl	80049a8 <rand>
 80004b8:	fb90 f3f4 	sdiv	r3, r0, r4
  col_pos[0] = 128;
 80004bc:	2780      	movs	r7, #128	; 0x80
 80004be:	4e24      	ldr	r6, [pc, #144]	; (8000550 <main+0x394>)
        num = (rand() % (upper - lower + 1)) + lower;
 80004c0:	fb03 0014 	mls	r0, r3, r4, r0
 80004c4:	4634      	mov	r4, r6
  col_pos[1] = 128;
 80004c6:	e9c6 7700 	strd	r7, r7, [r6]
        num = (rand() % (upper - lower + 1)) + lower;
 80004ca:	301e      	adds	r0, #30
			  buffer[a][b] = ground[a][b + i];
 80004cc:	f8df a084 	ldr.w	sl, [pc, #132]	; 8000554 <main+0x398>
  col_array[1] = printRandoms(30, 100);
 80004d0:	6068      	str	r0, [r5, #4]
  col_pos[2] = 128;
 80004d2:	60b7      	str	r7, [r6, #8]
		  ptr = (uint16_t *) calloc(1280, sizeof(uint16_t));
 80004d4:	2102      	movs	r1, #2
 80004d6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80004da:	f004 f967 	bl	80047ac <calloc>
 80004de:	6832      	ldr	r2, [r6, #0]
 80004e0:	4683      	mov	fp, r0
 80004e2:	4601      	mov	r1, r0
 80004e4:	eb08 2202 	add.w	r2, r8, r2, lsl #8
 80004e8:	f500 6020 	add.w	r0, r0, #2560	; 0xa00
 80004ec:	e034      	b.n	8000558 <main+0x39c>
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010c00 	.word	0x40010c00
 80004f8:	40010800 	.word	0x40010800
 80004fc:	10110000 	.word	0x10110000
 8000500:	40011000 	.word	0x40011000
 8000504:	20001410 	.word	0x20001410
 8000508:	40013000 	.word	0x40013000
 800050c:	200014a8 	.word	0x200014a8
 8000510:	40004400 	.word	0x40004400
 8000514:	200002ec 	.word	0x200002ec
 8000518:	40003800 	.word	0x40003800
 800051c:	20001574 	.word	0x20001574
 8000520:	40005c00 	.word	0x40005c00
 8000524:	20001468 	.word	0x20001468
 8000528:	200013cc 	.word	0x200013cc
 800052c:	40012c00 	.word	0x40012c00
 8000530:	20000344 	.word	0x20000344
 8000534:	40000800 	.word	0x40000800
 8000538:	08004c1e 	.word	0x08004c1e
 800053c:	0800ee4f 	.word	0x0800ee4f
 8000540:	20000384 	.word	0x20000384
 8000544:	20001570 	.word	0x20001570
 8000548:	0800cc1e 	.word	0x0800cc1e
 800054c:	200013b4 	.word	0x200013b4
 8000550:	200013c0 	.word	0x200013c0
 8000554:	200000a4 	.word	0x200000a4
			  for(int b = 0; b < 128; b++){
 8000558:	2300      	movs	r3, #0
				  ptr[a*128 + b] = ground[col_pos[0] +a][b];
 800055a:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 800055e:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
			  for(int b = 0; b < 128; b++){
 8000562:	3301      	adds	r3, #1
 8000564:	2b80      	cmp	r3, #128	; 0x80
 8000566:	d1f8      	bne.n	800055a <main+0x39e>
 8000568:	f501 7180 	add.w	r1, r1, #256	; 0x100
		  for(int a = 0; a < 10; a++){
 800056c:	4281      	cmp	r1, r0
 800056e:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000572:	d1f1      	bne.n	8000558 <main+0x39c>
		  ptr1 = (uint16_t *) calloc(1280, sizeof(uint16_t));
 8000574:	2102      	movs	r1, #2
 8000576:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800057a:	f004 f917 	bl	80047ac <calloc>
 800057e:	6862      	ldr	r2, [r4, #4]
 8000580:	9002      	str	r0, [sp, #8]
 8000582:	4601      	mov	r1, r0
 8000584:	eb08 2202 	add.w	r2, r8, r2, lsl #8
 8000588:	f500 6020 	add.w	r0, r0, #2560	; 0xa00
					  for(int b = 0; b < 128; b++){
 800058c:	2300      	movs	r3, #0
						  ptr1[a*128 + b] = ground[col_pos[1] +a][b];
 800058e:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 8000592:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
					  for(int b = 0; b < 128; b++){
 8000596:	3301      	adds	r3, #1
 8000598:	2b80      	cmp	r3, #128	; 0x80
 800059a:	d1f8      	bne.n	800058e <main+0x3d2>
 800059c:	f501 7180 	add.w	r1, r1, #256	; 0x100
				  for(int a = 0; a < 10; a++){
 80005a0:	4281      	cmp	r1, r0
 80005a2:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80005a6:	d1f1      	bne.n	800058c <main+0x3d0>
				  ptr2 = (uint16_t *) calloc(1280, sizeof(uint16_t));
 80005a8:	2102      	movs	r1, #2
 80005aa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80005ae:	f004 f8fd 	bl	80047ac <calloc>
 80005b2:	4602      	mov	r2, r0
 80005b4:	68a3      	ldr	r3, [r4, #8]
 80005b6:	9003      	str	r0, [sp, #12]
 80005b8:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 80005bc:	f500 6120 	add.w	r1, r0, #2560	; 0xa00
				 			  for(int b = 0; b < 128; b++){
 80005c0:	f04f 0900 	mov.w	r9, #0
				 				  ptr2[a*128 + b] = ground[col_pos[2] +a][b];
 80005c4:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 80005c8:	f822 0019 	strh.w	r0, [r2, r9, lsl #1]
				 			  for(int b = 0; b < 128; b++){
 80005cc:	f109 0901 	add.w	r9, r9, #1
 80005d0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80005d4:	d1f6      	bne.n	80005c4 <main+0x408>
 80005d6:	f502 7280 	add.w	r2, r2, #256	; 0x100
				 		  for(int a = 0; a < 10; a++){
 80005da:	4291      	cmp	r1, r2
 80005dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80005e0:	d1ee      	bne.n	80005c0 <main+0x404>
			  buffer[a][b] = ground[a][b + i];
 80005e2:	f8da 3000 	ldr.w	r3, [sl]
 80005e6:	a91f      	add	r1, sp, #124	; 0x7c
 80005e8:	eb08 0043 	add.w	r0, r8, r3, lsl #1
 80005ec:	f20d 2c3e 	addw	ip, sp, #574	; 0x23e
		  for(int b = 0; b < 15; b++){
 80005f0:	2200      	movs	r2, #0
			  buffer[a][b] = ground[a][b + i];
 80005f2:	f830 e012 	ldrh.w	lr, [r0, r2, lsl #1]
 80005f6:	f821 e012 	strh.w	lr, [r1, r2, lsl #1]
		  for(int b = 0; b < 15; b++){
 80005fa:	3201      	adds	r2, #1
 80005fc:	2a0f      	cmp	r2, #15
 80005fe:	d1f8      	bne.n	80005f2 <main+0x436>
 8000600:	311e      	adds	r1, #30
	  for(int a = 0; a < 15; a++){
 8000602:	458c      	cmp	ip, r1
 8000604:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000608:	d1f2      	bne.n	80005f0 <main+0x434>
      if(i < 128){
 800060a:	2b7f      	cmp	r3, #127	; 0x7f
 800060c:	f300 80fc 	bgt.w	8000808 <main+0x64c>
    	  i+=2;
 8000610:	3302      	adds	r3, #2
 8000612:	f8ca 3000 	str.w	r3, [sl]
      if(col_pos[0] > 0){
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	f340 80fe 	ble.w	800081a <main+0x65e>
    	  col_pos[0]--;
 800061e:	3b01      	subs	r3, #1
 8000620:	6023      	str	r3, [r4, #0]
      if(col_pos[1] < 0 ){
 8000622:	6863      	ldr	r3, [r4, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	f280 8105 	bge.w	8000834 <main+0x678>
    	  col_pos[1] = 128;
 800062a:	2380      	movs	r3, #128	; 0x80
 800062c:	6063      	str	r3, [r4, #4]
        num = (rand() % (upper - lower + 1)) + lower;
 800062e:	f004 f9bb 	bl	80049a8 <rand>
 8000632:	2365      	movs	r3, #101	; 0x65
 8000634:	fb90 f2f3 	sdiv	r2, r0, r3
 8000638:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[1] = printRandoms(0, 100);
 800063c:	6068      	str	r0, [r5, #4]
      if(col_pos[2] < 0){
 800063e:	68a3      	ldr	r3, [r4, #8]
 8000640:	2b00      	cmp	r3, #0
 8000642:	f280 8102 	bge.w	800084a <main+0x68e>
    	  col_pos[2] = 128;
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	60a3      	str	r3, [r4, #8]
        num = (rand() % (upper - lower + 1)) + lower;
 800064a:	f004 f9ad 	bl	80049a8 <rand>
 800064e:	2365      	movs	r3, #101	; 0x65
 8000650:	fb90 f2f3 	sdiv	r2, r0, r3
 8000654:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[2] = printRandoms(0, 100);
 8000658:	60a8      	str	r0, [r5, #8]
      if(j > 0){
 800065a:	2f00      	cmp	r7, #0
 800065c:	f340 8100 	ble.w	8000860 <main+0x6a4>
    	  j--;
 8000660:	f107 39ff 	add.w	r9, r7, #4294967295
          if(col_pos[0] < 10){
 8000664:	6823      	ldr	r3, [r4, #0]
 8000666:	2b09      	cmp	r3, #9
 8000668:	dc17      	bgt.n	800069a <main+0x4de>
 800066a:	f8da 2000 	ldr.w	r2, [sl]
        	  if( (col_array[0] < i) || (col_array[0] - 20 > i )){
 800066e:	682b      	ldr	r3, [r5, #0]
 8000670:	4293      	cmp	r3, r2
 8000672:	db02      	blt.n	800067a <main+0x4be>
 8000674:	3b14      	subs	r3, #20
 8000676:	4293      	cmp	r3, r2
 8000678:	dd0f      	ble.n	800069a <main+0x4de>
        		  ST7735_DrawImage(0, 0, 128, 128, &ground);
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	2100      	movs	r1, #0
 800067e:	461a      	mov	r2, r3
 8000680:	4608      	mov	r0, r1
 8000682:	f8cd 8000 	str.w	r8, [sp]
 8000686:	f000 fa08 	bl	8000a9a <ST7735_DrawImage>
        	      ST7735_DrawImage(50, 0, 33, 128, &over);
 800068a:	4b7b      	ldr	r3, [pc, #492]	; (8000878 <main+0x6bc>)
 800068c:	2221      	movs	r2, #33	; 0x21
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2100      	movs	r1, #0
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	2032      	movs	r0, #50	; 0x32
 8000696:	f000 fa00 	bl	8000a9a <ST7735_DrawImage>
          if(col_pos[1] < 10){
 800069a:	6863      	ldr	r3, [r4, #4]
 800069c:	2b09      	cmp	r3, #9
 800069e:	dc17      	bgt.n	80006d0 <main+0x514>
 80006a0:	f8da 2000 	ldr.w	r2, [sl]
             	  if( (col_array[1] < i) || (col_array[1] - 20 > i )){
 80006a4:	686b      	ldr	r3, [r5, #4]
 80006a6:	4293      	cmp	r3, r2
 80006a8:	db02      	blt.n	80006b0 <main+0x4f4>
 80006aa:	3b14      	subs	r3, #20
 80006ac:	4293      	cmp	r3, r2
 80006ae:	dd0f      	ble.n	80006d0 <main+0x514>
             		 ST7735_DrawImage(0, 0, 128, 128, &ground);
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	2100      	movs	r1, #0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4608      	mov	r0, r1
 80006b8:	f8cd 8000 	str.w	r8, [sp]
 80006bc:	f000 f9ed 	bl	8000a9a <ST7735_DrawImage>
             	     ST7735_DrawImage(50, 0, 33, 128, &over);
 80006c0:	4b6d      	ldr	r3, [pc, #436]	; (8000878 <main+0x6bc>)
 80006c2:	2221      	movs	r2, #33	; 0x21
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2100      	movs	r1, #0
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	2032      	movs	r0, #50	; 0x32
 80006cc:	f000 f9e5 	bl	8000a9a <ST7735_DrawImage>
          if(col_pos[2] < 10){
 80006d0:	68a3      	ldr	r3, [r4, #8]
 80006d2:	2b09      	cmp	r3, #9
 80006d4:	dc17      	bgt.n	8000706 <main+0x54a>
 80006d6:	f8da 2000 	ldr.w	r2, [sl]
             	  if( (col_array[2] < i) || (col_array[2] - 20 > i )){
 80006da:	68ab      	ldr	r3, [r5, #8]
 80006dc:	4293      	cmp	r3, r2
 80006de:	db02      	blt.n	80006e6 <main+0x52a>
 80006e0:	3b14      	subs	r3, #20
 80006e2:	4293      	cmp	r3, r2
 80006e4:	dd0f      	ble.n	8000706 <main+0x54a>
             		 ST7735_DrawImage(0, 0, 128, 128, &ground);
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	2100      	movs	r1, #0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4608      	mov	r0, r1
 80006ee:	f8cd 8000 	str.w	r8, [sp]
 80006f2:	f000 f9d2 	bl	8000a9a <ST7735_DrawImage>
             	     ST7735_DrawImage(50, 0, 33, 128, &over);
 80006f6:	4b60      	ldr	r3, [pc, #384]	; (8000878 <main+0x6bc>)
 80006f8:	2221      	movs	r2, #33	; 0x21
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2100      	movs	r1, #0
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	2032      	movs	r0, #50	; 0x32
 8000702:	f000 f9ca 	bl	8000a9a <ST7735_DrawImage>
	  ST7735_DrawImage(i, 0, 15, 15, &bird);
 8000706:	4b5d      	ldr	r3, [pc, #372]	; (800087c <main+0x6c0>)
 8000708:	f8ba 0000 	ldrh.w	r0, [sl]
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	230f      	movs	r3, #15
	  ST7735_FillRectangle(0, col_pos[0], col_array[0] , 10, ST7735_GREEN);
 8000710:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
	  ST7735_DrawImage(i, 0, 15, 15, &bird);
 8000714:	461a      	mov	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f000 f9bf 	bl	8000a9a <ST7735_DrawImage>
	  ST7735_FillRectangle(0, col_pos[0], col_array[0] , 10, ST7735_GREEN);
 800071c:	882a      	ldrh	r2, [r5, #0]
 800071e:	8831      	ldrh	r1, [r6, #0]
 8000720:	230a      	movs	r3, #10
 8000722:	2000      	movs	r0, #0
 8000724:	9700      	str	r7, [sp, #0]
 8000726:	f000 f9ab 	bl	8000a80 <ST7735_FillRectangle>
	  ST7735_FillRectangle(col_array[0] + 20,col_pos[0], 88 - col_array[0] , 10, ST7735_GREEN);
 800072a:	8828      	ldrh	r0, [r5, #0]
 800072c:	8831      	ldrh	r1, [r6, #0]
 800072e:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 8000732:	3014      	adds	r0, #20
 8000734:	9700      	str	r7, [sp, #0]
 8000736:	230a      	movs	r3, #10
 8000738:	b292      	uxth	r2, r2
 800073a:	b280      	uxth	r0, r0
 800073c:	f000 f9a0 	bl	8000a80 <ST7735_FillRectangle>
	  if(col_pos[1] < 128){
 8000740:	6871      	ldr	r1, [r6, #4]
 8000742:	297f      	cmp	r1, #127	; 0x7f
 8000744:	dc11      	bgt.n	800076a <main+0x5ae>
		  ST7735_FillRectangle(0, col_pos[1], col_array[1] , 10, ST7735_GREEN);
 8000746:	88aa      	ldrh	r2, [r5, #4]
 8000748:	230a      	movs	r3, #10
 800074a:	b289      	uxth	r1, r1
 800074c:	2000      	movs	r0, #0
 800074e:	9700      	str	r7, [sp, #0]
 8000750:	f000 f996 	bl	8000a80 <ST7735_FillRectangle>
		  ST7735_FillRectangle(col_array[1] + 20,col_pos[1], 88 - col_array[1] , 10, ST7735_GREEN);
 8000754:	88a8      	ldrh	r0, [r5, #4]
 8000756:	88b1      	ldrh	r1, [r6, #4]
 8000758:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 800075c:	3014      	adds	r0, #20
 800075e:	9700      	str	r7, [sp, #0]
 8000760:	230a      	movs	r3, #10
 8000762:	b292      	uxth	r2, r2
 8000764:	b280      	uxth	r0, r0
 8000766:	f000 f98b 	bl	8000a80 <ST7735_FillRectangle>
	  if(col_pos[2] < 128){
 800076a:	68b1      	ldr	r1, [r6, #8]
 800076c:	297f      	cmp	r1, #127	; 0x7f
 800076e:	dc13      	bgt.n	8000798 <main+0x5dc>
	 		  ST7735_FillRectangle(0, col_pos[2], col_array[2] , 10, ST7735_GREEN);
 8000770:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
 8000774:	892a      	ldrh	r2, [r5, #8]
 8000776:	230a      	movs	r3, #10
 8000778:	b289      	uxth	r1, r1
 800077a:	2000      	movs	r0, #0
 800077c:	9700      	str	r7, [sp, #0]
 800077e:	f000 f97f 	bl	8000a80 <ST7735_FillRectangle>
	 		  ST7735_FillRectangle(col_array[2] + 20,col_pos[2], 88 - col_array[2] , 10, ST7735_GREEN);
 8000782:	8928      	ldrh	r0, [r5, #8]
 8000784:	8931      	ldrh	r1, [r6, #8]
 8000786:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 800078a:	3014      	adds	r0, #20
 800078c:	9700      	str	r7, [sp, #0]
 800078e:	230a      	movs	r3, #10
 8000790:	b292      	uxth	r2, r2
 8000792:	b280      	uxth	r0, r0
 8000794:	f000 f974 	bl	8000a80 <ST7735_FillRectangle>
	  HAL_Delay(100);
 8000798:	2064      	movs	r0, #100	; 0x64
 800079a:	f000 fcbb 	bl	8001114 <HAL_Delay>
	  ST7735_DrawImage(i, 0, 15, 15, &buffer);
 800079e:	ab1f      	add	r3, sp, #124	; 0x7c
 80007a0:	f8ba 0000 	ldrh.w	r0, [sl]
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	230f      	movs	r3, #15
 80007a8:	2100      	movs	r1, #0
 80007aa:	461a      	mov	r2, r3
 80007ac:	f000 f975 	bl	8000a9a <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[0], 128, 10, ptr);
 80007b0:	8821      	ldrh	r1, [r4, #0]
 80007b2:	230a      	movs	r3, #10
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	2000      	movs	r0, #0
 80007b8:	f8cd b000 	str.w	fp, [sp]
 80007bc:	f000 f96d 	bl	8000a9a <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[1], 128, 10, ptr1);
 80007c0:	9b02      	ldr	r3, [sp, #8]
 80007c2:	88a1      	ldrh	r1, [r4, #4]
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2000      	movs	r0, #0
 80007ca:	230a      	movs	r3, #10
 80007cc:	f000 f965 	bl	8000a9a <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[2], 128, 10, ptr2);
 80007d0:	9b03      	ldr	r3, [sp, #12]
 80007d2:	8921      	ldrh	r1, [r4, #8]
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2000      	movs	r0, #0
 80007da:	230a      	movs	r3, #10
 80007dc:	f000 f95d 	bl	8000a9a <ST7735_DrawImage>
	  free(ptr);
 80007e0:	4658      	mov	r0, fp
 80007e2:	f004 f81d 	bl	8004820 <free>
	  free(ptr1);
 80007e6:	9802      	ldr	r0, [sp, #8]
 80007e8:	f004 f81a 	bl	8004820 <free>
	  free(ptr2);
 80007ec:	9803      	ldr	r0, [sp, #12]
 80007ee:	f004 f817 	bl	8004820 <free>
	  while(1){
 80007f2:	464f      	mov	r7, r9
 80007f4:	e66e      	b.n	80004d4 <main+0x318>
 	  fres = f_mount ( &fs ,  "" ,   1);
 80007f6:	4629      	mov	r1, r5
 80007f8:	4630      	mov	r0, r6
 80007fa:	f003 fc69 	bl	80040d0 <f_mount>
 80007fe:	7020      	strb	r0, [r4, #0]
 	  HAL_Delay(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f000 fc87 	bl	8001114 <HAL_Delay>
 8000806:	e62e      	b.n	8000466 <main+0x2aa>
    	  ST7735_DrawImage(50, 0, 33, 128, &over);
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <main+0x6bc>)
 800080a:	2221      	movs	r2, #33	; 0x21
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2100      	movs	r1, #0
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	2032      	movs	r0, #50	; 0x32
 8000814:	f000 f941 	bl	8000a9a <ST7735_DrawImage>
 8000818:	e6fd      	b.n	8000616 <main+0x45a>
    	  col_pos[0] = 128;
 800081a:	2780      	movs	r7, #128	; 0x80
        num = (rand() % (upper - lower + 1)) + lower;
 800081c:	f004 f8c4 	bl	80049a8 <rand>
    	  col_pos[0] = 128;
 8000820:	6027      	str	r7, [r4, #0]
        num = (rand() % (upper - lower + 1)) + lower;
 8000822:	f004 f8c1 	bl	80049a8 <rand>
 8000826:	2365      	movs	r3, #101	; 0x65
 8000828:	fb90 f2f3 	sdiv	r2, r0, r3
 800082c:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[0] = printRandoms(0, 100);
 8000830:	6028      	str	r0, [r5, #0]
 8000832:	e6f6      	b.n	8000622 <main+0x466>
    	  if(col_pos[1] != 128){
 8000834:	2b80      	cmp	r3, #128	; 0x80
 8000836:	d002      	beq.n	800083e <main+0x682>
     	     col_pos[1] --;
 8000838:	3b01      	subs	r3, #1
            	 col_pos[1] --;
 800083a:	6063      	str	r3, [r4, #4]
 800083c:	e6ff      	b.n	800063e <main+0x482>
             if(col_pos[0] < 88){
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	2b57      	cmp	r3, #87	; 0x57
 8000842:	f73f aefc 	bgt.w	800063e <main+0x482>
            	 col_pos[1] --;
 8000846:	237f      	movs	r3, #127	; 0x7f
 8000848:	e7f7      	b.n	800083a <main+0x67e>
          	  if(col_pos[2] != 128){
 800084a:	2b80      	cmp	r3, #128	; 0x80
 800084c:	d002      	beq.n	8000854 <main+0x698>
          		  col_pos[2] --;
 800084e:	3b01      	subs	r3, #1
          	         col_pos[2] --;
 8000850:	60a3      	str	r3, [r4, #8]
 8000852:	e702      	b.n	800065a <main+0x49e>
          	      if(col_pos[1] < 88){
 8000854:	6863      	ldr	r3, [r4, #4]
 8000856:	2b57      	cmp	r3, #87	; 0x57
 8000858:	f73f aeff 	bgt.w	800065a <main+0x49e>
          	         col_pos[2] --;
 800085c:	237f      	movs	r3, #127	; 0x7f
 800085e:	e7f7      	b.n	8000850 <main+0x694>
        num = (rand() % (upper - lower + 1)) + lower;
 8000860:	f004 f8a2 	bl	80049a8 <rand>
 8000864:	e6fe      	b.n	8000664 <main+0x4a8>
          return -1;
 8000866:	f04f 30ff 	mov.w	r0, #4294967295
}
 800086a:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800086e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return -2;
 8000872:	f06f 0001 	mvn.w	r0, #1
 8000876:	e7f8      	b.n	800086a <main+0x6ae>
 8000878:	0800cc28 	.word	0x0800cc28
 800087c:	08004a5c 	.word	0x08004a5c

08000880 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000880:	4770      	bx	lr
	...

08000884 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800088a:	4801      	ldr	r0, [pc, #4]	; (8000890 <ST7735_Select+0xc>)
 800088c:	f000 be68 	b.w	8001560 <HAL_GPIO_WritePin>
 8000890:	40010800 	.word	0x40010800

08000894 <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 8000894:	b513      	push	{r0, r1, r4, lr}
 8000896:	ac02      	add	r4, sp, #8
 8000898:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <ST7735_WriteCommand+0x28>)
 80008a4:	f000 fe5c 	bl	8001560 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	2201      	movs	r2, #1
 80008ae:	4621      	mov	r1, r4
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <ST7735_WriteCommand+0x2c>)
 80008b2:	f001 fa73 	bl	8001d9c <HAL_SPI_Transmit>
}
 80008b6:	b002      	add	sp, #8
 80008b8:	bd10      	pop	{r4, pc}
 80008ba:	bf00      	nop
 80008bc:	40010800 	.word	0x40010800
 80008c0:	200002ec 	.word	0x200002ec

080008c4 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	4604      	mov	r4, r0
 80008c8:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <ST7735_WriteData+0x24>)
 80008d2:	f000 fe45 	bl	8001560 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80008d6:	b2aa      	uxth	r2, r5
 80008d8:	4621      	mov	r1, r4
}
 80008da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80008de:	f04f 33ff 	mov.w	r3, #4294967295
 80008e2:	4802      	ldr	r0, [pc, #8]	; (80008ec <ST7735_WriteData+0x28>)
 80008e4:	f001 ba5a 	b.w	8001d9c <HAL_SPI_Transmit>
 80008e8:	40010800 	.word	0x40010800
 80008ec:	200002ec 	.word	0x200002ec

080008f0 <ST7735_ExecuteCommandList>:
static void ST7735_WriteData_16bit(uint8_t* buff, size_t buff_size) {
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
}

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80008f2:	7805      	ldrb	r5, [r0, #0]
 80008f4:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 80008f6:	3d01      	subs	r5, #1
 80008f8:	b2ed      	uxtb	r5, r5
 80008fa:	2dff      	cmp	r5, #255	; 0xff
 80008fc:	d100      	bne.n	8000900 <ST7735_ExecuteCommandList+0x10>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 80008fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 8000900:	4634      	mov	r4, r6
 8000902:	f814 0b02 	ldrb.w	r0, [r4], #2
 8000906:	f7ff ffc5 	bl	8000894 <ST7735_WriteCommand>
        numArgs = *addr++;
 800090a:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 800090c:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 8000910:	d004      	beq.n	800091c <ST7735_ExecuteCommandList+0x2c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000912:	4620      	mov	r0, r4
 8000914:	4639      	mov	r1, r7
 8000916:	f7ff ffd5 	bl	80008c4 <ST7735_WriteData>
            addr += numArgs;
 800091a:	443c      	add	r4, r7
        if(ms) {
 800091c:	0633      	lsls	r3, r6, #24
 800091e:	d508      	bpl.n	8000932 <ST7735_ExecuteCommandList+0x42>
            ms = *addr++;
 8000920:	7820      	ldrb	r0, [r4, #0]
 8000922:	1c66      	adds	r6, r4, #1
            if(ms == 255) ms = 500;
 8000924:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 8000926:	bf08      	it	eq
 8000928:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 800092c:	f000 fbf2 	bl	8001114 <HAL_Delay>
            ms = *addr++;
 8000930:	4634      	mov	r4, r6
 8000932:	4626      	mov	r6, r4
 8000934:	e7df      	b.n	80008f6 <ST7735_ExecuteCommandList+0x6>

08000936 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000938:	4607      	mov	r7, r0
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800093a:	202a      	movs	r0, #42	; 0x2a
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800093c:	4616      	mov	r6, r2
 800093e:	460d      	mov	r5, r1
 8000940:	461c      	mov	r4, r3
    ST7735_WriteCommand(ST7735_CASET);
 8000942:	f7ff ffa7 	bl	8000894 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
    ST7735_WriteData(data, sizeof(data));
 8000946:	2104      	movs	r1, #4
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000948:	2300      	movs	r3, #0
    ST7735_WriteData(data, sizeof(data));
 800094a:	eb0d 0001 	add.w	r0, sp, r1
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800094e:	3702      	adds	r7, #2
 8000950:	3602      	adds	r6, #2
 8000952:	f88d 3004 	strb.w	r3, [sp, #4]
 8000956:	f88d 3006 	strb.w	r3, [sp, #6]
 800095a:	f88d 7005 	strb.w	r7, [sp, #5]
 800095e:	f88d 6007 	strb.w	r6, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8000962:	f7ff ffaf 	bl	80008c4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000966:	202b      	movs	r0, #43	; 0x2b
 8000968:	f7ff ff94 	bl	8000894 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
    data[3] = y1 + ST7735_YSTART;
    ST7735_WriteData(data, sizeof(data));
 800096c:	2104      	movs	r1, #4
    data[1] = y0 + ST7735_YSTART;
 800096e:	3503      	adds	r5, #3
    ST7735_WriteData(data, sizeof(data));
 8000970:	eb0d 0001 	add.w	r0, sp, r1
    data[3] = y1 + ST7735_YSTART;
 8000974:	3403      	adds	r4, #3
    data[1] = y0 + ST7735_YSTART;
 8000976:	f88d 5005 	strb.w	r5, [sp, #5]
    data[3] = y1 + ST7735_YSTART;
 800097a:	f88d 4007 	strb.w	r4, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 800097e:	f7ff ffa1 	bl	80008c4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000982:	202c      	movs	r0, #44	; 0x2c
 8000984:	f7ff ff86 	bl	8000894 <ST7735_WriteCommand>
}
 8000988:	b003      	add	sp, #12
 800098a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800098c <ST7735_Unselect>:
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000992:	4801      	ldr	r0, [pc, #4]	; (8000998 <ST7735_Unselect+0xc>)
 8000994:	f000 bde4 	b.w	8001560 <HAL_GPIO_WritePin>
 8000998:	40010800 	.word	0x40010800

0800099c <ST7735_FillRectangle.part.1>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800099c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80009a0:	461c      	mov	r4, r3
 80009a2:	4615      	mov	r5, r2
 80009a4:	460f      	mov	r7, r1
 80009a6:	4606      	mov	r6, r0
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80009a8:	1883      	adds	r3, r0, r2
 80009aa:	2b80      	cmp	r3, #128	; 0x80
 80009ac:	bfc8      	it	gt
 80009ae:	f1c0 0580 	rsbgt	r5, r0, #128	; 0x80
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80009b2:	eb01 0304 	add.w	r3, r1, r4
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80009b6:	bfc8      	it	gt
 80009b8:	b2ad      	uxthgt	r5, r5
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80009ba:	2b80      	cmp	r3, #128	; 0x80
 80009bc:	bfc4      	itt	gt
 80009be:	f1c1 0480 	rsbgt	r4, r1, #128	; 0x80
 80009c2:	b2a4      	uxthgt	r4, r4
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80009c4:	f8bd 8020 	ldrh.w	r8, [sp, #32]

    ST7735_Select();
 80009c8:	f7ff ff5c 	bl	8000884 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80009cc:	b2f9      	uxtb	r1, r7
 80009ce:	b2f0      	uxtb	r0, r6
 80009d0:	1e4b      	subs	r3, r1, #1
 80009d2:	1e42      	subs	r2, r0, #1
 80009d4:	4423      	add	r3, r4
 80009d6:	442a      	add	r2, r5
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	f7ff ffab 	bl	8000936 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80009e0:	ea4f 2318 	mov.w	r3, r8, lsr #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <ST7735_FillRectangle.part.1+0x8c>)
    uint8_t data[] = { color >> 8, color & 0xFF };
 80009ec:	f88d 3004 	strb.w	r3, [sp, #4]
 80009f0:	f88d 8005 	strb.w	r8, [sp, #5]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80009f4:	f000 fdb4 	bl	8001560 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80009f8:	4f0c      	ldr	r7, [pc, #48]	; (8000a2c <ST7735_FillRectangle.part.1+0x90>)
    for(y = h; y > 0; y--) {
 80009fa:	b994      	cbnz	r4, 8000a22 <ST7735_FillRectangle.part.1+0x86>
        }
    }

    ST7735_Unselect();
 80009fc:	f7ff ffc6 	bl	800098c <ST7735_Unselect>
}
 8000a00:	b002      	add	sp, #8
 8000a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	a901      	add	r1, sp, #4
 8000a0e:	4638      	mov	r0, r7
 8000a10:	f001 f9c4 	bl	8001d9c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000a14:	3e01      	subs	r6, #1
 8000a16:	b2b6      	uxth	r6, r6
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d1f4      	bne.n	8000a06 <ST7735_FillRectangle.part.1+0x6a>
    for(y = h; y > 0; y--) {
 8000a1c:	3c01      	subs	r4, #1
 8000a1e:	b2a4      	uxth	r4, r4
 8000a20:	e7eb      	b.n	80009fa <ST7735_FillRectangle.part.1+0x5e>
        for(x = w; x > 0; x--) {
 8000a22:	462e      	mov	r6, r5
 8000a24:	e7f8      	b.n	8000a18 <ST7735_FillRectangle.part.1+0x7c>
 8000a26:	bf00      	nop
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	200002ec 	.word	0x200002ec

08000a30 <ST7735_Init>:
void ST7735_Init() {
 8000a30:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a32:	4c0f      	ldr	r4, [pc, #60]	; (8000a70 <ST7735_Init+0x40>)
    ST7735_Select();
 8000a34:	f7ff ff26 	bl	8000884 <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f000 fd8e 	bl	8001560 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a44:	2005      	movs	r0, #5
 8000a46:	f000 fb65 	bl	8001114 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a50:	4620      	mov	r0, r4
 8000a52:	f000 fd85 	bl	8001560 <HAL_GPIO_WritePin>
    ST7735_ExecuteCommandList(init_cmds1);
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <ST7735_Init+0x44>)
 8000a58:	f7ff ff4a 	bl	80008f0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <ST7735_Init+0x48>)
 8000a5e:	f7ff ff47 	bl	80008f0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000a62:	4806      	ldr	r0, [pc, #24]	; (8000a7c <ST7735_Init+0x4c>)
 8000a64:	f7ff ff44 	bl	80008f0 <ST7735_ExecuteCommandList>
}
 8000a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ST7735_Unselect();
 8000a6c:	f7ff bf8e 	b.w	800098c <ST7735_Unselect>
 8000a70:	40010800 	.word	0x40010800
 8000a74:	0800ed28 	.word	0x0800ed28
 8000a78:	0800ed63 	.word	0x0800ed63
 8000a7c:	0800ed70 	.word	0x0800ed70

08000a80 <ST7735_FillRectangle>:
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a80:	b430      	push	{r4, r5}
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000a82:	287f      	cmp	r0, #127	; 0x7f
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a84:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000a88:	d805      	bhi.n	8000a96 <ST7735_FillRectangle+0x16>
 8000a8a:	297f      	cmp	r1, #127	; 0x7f
 8000a8c:	d803      	bhi.n	8000a96 <ST7735_FillRectangle+0x16>
 8000a8e:	9402      	str	r4, [sp, #8]
}
 8000a90:	bc30      	pop	{r4, r5}
 8000a92:	f7ff bf83 	b.w	800099c <ST7735_FillRectangle.part.1>
 8000a96:	bc30      	pop	{r4, r5}
 8000a98:	4770      	bx	lr

08000a9a <ST7735_DrawImage>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000a9e:	287f      	cmp	r0, #127	; 0x7f
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000aa0:	4604      	mov	r4, r0
 8000aa2:	460d      	mov	r5, r1
 8000aa4:	4617      	mov	r7, r2
 8000aa6:	461e      	mov	r6, r3
 8000aa8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000aac:	d81c      	bhi.n	8000ae8 <ST7735_DrawImage+0x4e>
 8000aae:	297f      	cmp	r1, #127	; 0x7f
 8000ab0:	d81a      	bhi.n	8000ae8 <ST7735_DrawImage+0x4e>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000ab2:	1883      	adds	r3, r0, r2
 8000ab4:	2b80      	cmp	r3, #128	; 0x80
 8000ab6:	dc17      	bgt.n	8000ae8 <ST7735_DrawImage+0x4e>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000ab8:	198b      	adds	r3, r1, r6
 8000aba:	2b80      	cmp	r3, #128	; 0x80
 8000abc:	dc14      	bgt.n	8000ae8 <ST7735_DrawImage+0x4e>

    ST7735_Select();
 8000abe:	f7ff fee1 	bl	8000884 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ac2:	b2e0      	uxtb	r0, r4
 8000ac4:	b2e9      	uxtb	r1, r5
 8000ac6:	1e73      	subs	r3, r6, #1
 8000ac8:	1e7a      	subs	r2, r7, #1
 8000aca:	440b      	add	r3, r1
 8000acc:	4402      	add	r2, r0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	f7ff ff30 	bl	8000936 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000ad6:	0071      	lsls	r1, r6, #1
 8000ad8:	4379      	muls	r1, r7
 8000ada:	4640      	mov	r0, r8
 8000adc:	f7ff fef2 	bl	80008c4 <ST7735_WriteData>
    ST7735_Unselect();
}
 8000ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ST7735_Unselect();
 8000ae4:	f7ff bf52 	b.w	800098c <ST7735_Unselect>
}
 8000ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000aec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_MspInit+0x3c>)
{
 8000aee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af0:	699a      	ldr	r2, [r3, #24]
 8000af2:	f042 0201 	orr.w	r2, r2, #1
 8000af6:	619a      	str	r2, [r3, #24]
 8000af8:	699a      	ldr	r2, [r3, #24]
 8000afa:	f002 0201 	and.w	r2, r2, #1
 8000afe:	9200      	str	r2, [sp, #0]
 8000b00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	69da      	ldr	r2, [r3, #28]
 8000b04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b08:	61da      	str	r2, [r3, #28]
 8000b0a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b16:	6853      	ldr	r3, [r2, #4]
 8000b18:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	b002      	add	sp, #8
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40010000 	.word	0x40010000

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	2710      	movs	r7, #16
{
 8000b34:	4605      	mov	r5, r0
 8000b36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	463a      	mov	r2, r7
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	eb0d 0007 	add.w	r0, sp, r7
 8000b40:	f003 fe76 	bl	8004830 <memset>
  if(hspi->Instance==SPI1)
 8000b44:	682b      	ldr	r3, [r5, #0]
 8000b46:	4a4b      	ldr	r2, [pc, #300]	; (8000c74 <HAL_SPI_MspInit+0x144>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d15c      	bne.n	8000c06 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <HAL_SPI_MspInit+0x148>)
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2028      	movs	r0, #40	; 0x28
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b50:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b52:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b58:	619a      	str	r2, [r3, #24]
 8000b5a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	699a      	ldr	r2, [r3, #24]

    __HAL_AFIO_REMAP_SPI1_ENABLE();

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000b6a:	4c44      	ldr	r4, [pc, #272]	; (8000c7c <HAL_SPI_MspInit+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	f042 0208 	orr.w	r2, r2, #8
 8000b70:	619a      	str	r2, [r3, #24]
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b82:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	483e      	ldr	r0, [pc, #248]	; (8000c80 <HAL_SPI_MspInit+0x150>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f000 fc04 	bl	8001394 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	483c      	ldr	r0, [pc, #240]	; (8000c80 <HAL_SPI_MspInit+0x150>)
 8000b8e:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b92:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f000 fbfc 	bl	8001394 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000b9c:	4a39      	ldr	r2, [pc, #228]	; (8000c84 <HAL_SPI_MspInit+0x154>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000b9e:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000ba0:	6853      	ldr	r3, [r2, #4]
 8000ba2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6053      	str	r3, [r2, #4]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <HAL_SPI_MspInit+0x158>)
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bae:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb0:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb4:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bb6:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000bbe:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bc2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000bc4:	f000 fb22 	bl	800120c <HAL_DMA_Init>
 8000bc8:	b108      	cbz	r0, 8000bce <HAL_SPI_MspInit+0x9e>
    {
      Error_Handler();
 8000bca:	f7ff fe59 	bl	8000880 <Error_Handler>

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bce:	2310      	movs	r3, #16
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000bd0:	64ec      	str	r4, [r5, #76]	; 0x4c
 8000bd2:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bd4:	492d      	ldr	r1, [pc, #180]	; (8000c8c <HAL_SPI_MspInit+0x15c>)
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000bd6:	4c2e      	ldr	r4, [pc, #184]	; (8000c90 <HAL_SPI_MspInit+0x160>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd8:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bda:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000be4:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000be8:	2320      	movs	r3, #32
 8000bea:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bf0:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bf2:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000bf4:	f000 fb0a 	bl	800120c <HAL_DMA_Init>
 8000bf8:	b108      	cbz	r0, 8000bfe <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000bfa:	f7ff fe41 	bl	8000880 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000bfe:	64ac      	str	r4, [r5, #72]	; 0x48
 8000c00:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c02:	b009      	add	sp, #36	; 0x24
 8000c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hspi->Instance==SPI2)
 8000c06:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <HAL_SPI_MspInit+0x164>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d1fa      	bne.n	8000c02 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <HAL_SPI_MspInit+0x148>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c10:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	481b      	ldr	r0, [pc, #108]	; (8000c80 <HAL_SPI_MspInit+0x150>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c18:	61da      	str	r2, [r3, #28]
 8000c1a:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2600      	movs	r6, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c1e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000c22:	9202      	str	r2, [sp, #8]
 8000c24:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	699a      	ldr	r2, [r3, #24]
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000c28:	4c1b      	ldr	r4, [pc, #108]	; (8000c98 <HAL_SPI_MspInit+0x168>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	f042 0208 	orr.w	r2, r2, #8
 8000c2e:	619a      	str	r2, [r3, #24]
 8000c30:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	9303      	str	r3, [sp, #12]
 8000c3c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c48:	f000 fba4 	bl	8001394 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	a904      	add	r1, sp, #16
 8000c52:	480b      	ldr	r0, [pc, #44]	; (8000c80 <HAL_SPI_MspInit+0x150>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c54:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f000 fb9b 	bl	8001394 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <HAL_SPI_MspInit+0x16c>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c60:	60a6      	str	r6, [r4, #8]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c62:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c66:	2380      	movs	r3, #128	; 0x80
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000c68:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c6c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8000c70:	e7bc      	b.n	8000bec <HAL_SPI_MspInit+0xbc>
 8000c72:	bf00      	nop
 8000c74:	40013000 	.word	0x40013000
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	200014e8 	.word	0x200014e8
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	40010000 	.word	0x40010000
 8000c88:	4002001c 	.word	0x4002001c
 8000c8c:	40020030 	.word	0x40020030
 8000c90:	2000180c 	.word	0x2000180c
 8000c94:	40003800 	.word	0x40003800
 8000c98:	2000152c 	.word	0x2000152c
 8000c9c:	40020058 	.word	0x40020058

08000ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM1)
 8000ca2:	6803      	ldr	r3, [r0, #0]
 8000ca4:	4a1e      	ldr	r2, [pc, #120]	; (8000d20 <HAL_TIM_Base_MspInit+0x80>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d114      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000caa:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cac:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cae:	699a      	ldr	r2, [r3, #24]
 8000cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000cb4:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cb8:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cba:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cc4:	f000 fa4a 	bl	800115c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cc8:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cca:	b005      	add	sp, #20
 8000ccc:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cd0:	f000 ba78 	b.w	80011c4 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM2)
 8000cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cda:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000cde:	69da      	ldr	r2, [r3, #28]
 8000ce0:	f042 0201 	orr.w	r2, r2, #1
 8000ce4:	61da      	str	r2, [r3, #28]
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	9302      	str	r3, [sp, #8]
 8000cee:	9b02      	ldr	r3, [sp, #8]
}
 8000cf0:	b005      	add	sp, #20
 8000cf2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM4)
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_TIM_Base_MspInit+0x88>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d1f9      	bne.n	8000cf0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_TIM_Base_MspInit+0x84>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cfe:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d00:	69da      	ldr	r2, [r3, #28]
 8000d02:	f042 0204 	orr.w	r2, r2, #4
 8000d06:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d0c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	9303      	str	r3, [sp, #12]
 8000d14:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d16:	f000 fa21 	bl	800115c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d1a:	201e      	movs	r0, #30
 8000d1c:	e7d5      	b.n	8000cca <HAL_TIM_Base_MspInit+0x2a>
 8000d1e:	bf00      	nop
 8000d20:	40012c00 	.word	0x40012c00
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40000800 	.word	0x40000800

08000d2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d2c:	b510      	push	{r4, lr}
 8000d2e:	4604      	mov	r4, r0
 8000d30:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	2210      	movs	r2, #16
 8000d34:	2100      	movs	r1, #0
 8000d36:	a802      	add	r0, sp, #8
 8000d38:	f003 fd7a 	bl	8004830 <memset>
  if(htim->Instance==TIM2)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d42:	d11d      	bne.n	8000d80 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d44:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d48:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	f042 0204 	orr.w	r2, r2, #4
 8000d50:	619a      	str	r2, [r3, #24]
 8000d52:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <HAL_TIM_MspPostInit+0x58>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f000 fb13 	bl	8001394 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000d6e:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_TIM_MspPostInit+0x5c>)
 8000d70:	6853      	ldr	r3, [r2, #4]
 8000d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d76:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d80:	b006      	add	sp, #24
 8000d82:	bd10      	pop	{r4, pc}
 8000d84:	40010800 	.word	0x40010800
 8000d88:	40010000 	.word	0x40010000

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	4604      	mov	r4, r0
 8000d90:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	2210      	movs	r2, #16
 8000d94:	2100      	movs	r1, #0
 8000d96:	a802      	add	r0, sp, #8
 8000d98:	f003 fd4a 	bl	8004830 <memset>
  if(huart->Instance==USART2)
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_UART_MspInit+0x6c>)
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d126      	bne.n	8000df2 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000da8:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000db0:	61da      	str	r2, [r3, #28]
 8000db2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	4811      	ldr	r0, [pc, #68]	; (8000dfc <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	699a      	ldr	r2, [r3, #24]
 8000dc0:	f042 0204 	orr.w	r2, r2, #4
 8000dc4:	619a      	str	r2, [r3, #24]
 8000dc6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f000 fada 	bl	8001394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2108      	movs	r1, #8
 8000de2:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	4805      	ldr	r0, [pc, #20]	; (8000dfc <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de6:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f000 fad1 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df2:	b006      	add	sp, #24
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	bf00      	nop
 8000df8:	40004400 	.word	0x40004400
 8000dfc:	40010800 	.word	0x40010800

08000e00 <HAL_PCD_MspInit>:
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
  if(hpcd->Instance==USB)
 8000e00:	6802      	ldr	r2, [r0, #0]
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_PCD_MspInit+0x24>)
{
 8000e04:	b082      	sub	sp, #8
  if(hpcd->Instance==USB)
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d10a      	bne.n	8000e20 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e0a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000e0e:	69da      	ldr	r2, [r3, #28]
 8000e10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e14:	61da      	str	r2, [r3, #28]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e20:	b002      	add	sp, #8
 8000e22:	4770      	bx	lr
 8000e24:	40005c00 	.word	0x40005c00

08000e28 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <SDTimer_Handler+0x20>)
 8000e2a:	7813      	ldrb	r3, [r2, #0]
 8000e2c:	b11b      	cbz	r3, 8000e36 <SDTimer_Handler+0xe>
    Timer1--;
 8000e2e:	7813      	ldrb	r3, [r2, #0]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SDTimer_Handler+0x24>)
 8000e38:	7813      	ldrb	r3, [r2, #0]
 8000e3a:	b11b      	cbz	r3, 8000e44 <SDTimer_Handler+0x1c>
    Timer2--;
 8000e3c:	7813      	ldrb	r3, [r2, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	7013      	strb	r3, [r2, #0]
}
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20001851 	.word	0x20001851
 8000e4c:	20001850 	.word	0x20001850

08000e50 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e50:	4770      	bx	lr

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler>

08000e5a <SVC_Handler>:
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <SysTick_Handler+0x24>)
 8000e64:	7813      	ldrb	r3, [r2, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	7013      	strb	r3, [r2, #0]
  if(FatFsCnt >= 10)
 8000e6c:	7813      	ldrb	r3, [r2, #0]
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	d903      	bls.n	8000e7a <SysTick_Handler+0x1a>
  {
    FatFsCnt = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	7013      	strb	r3, [r2, #0]
    SDTimer_Handler();
 8000e76:	f7ff ffd7 	bl	8000e28 <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8000e7e:	f000 b937 	b.w	80010f0 <HAL_IncTick>
 8000e82:	bf00      	nop
 8000e84:	200000a8 	.word	0x200000a8

08000e88 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000e88:	4801      	ldr	r0, [pc, #4]	; (8000e90 <DMA1_Channel2_IRQHandler+0x8>)
 8000e8a:	f000 b9ef 	b.w	800126c <HAL_DMA_IRQHandler>
 8000e8e:	bf00      	nop
 8000e90:	200014e8 	.word	0x200014e8

08000e94 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000e94:	4801      	ldr	r0, [pc, #4]	; (8000e9c <DMA1_Channel3_IRQHandler+0x8>)
 8000e96:	f000 b9e9 	b.w	800126c <HAL_DMA_IRQHandler>
 8000e9a:	bf00      	nop
 8000e9c:	2000180c 	.word	0x2000180c

08000ea0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000ea0:	4801      	ldr	r0, [pc, #4]	; (8000ea8 <DMA1_Channel5_IRQHandler+0x8>)
 8000ea2:	f000 b9e3 	b.w	800126c <HAL_DMA_IRQHandler>
 8000ea6:	bf00      	nop
 8000ea8:	2000152c 	.word	0x2000152c

08000eac <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eac:	4801      	ldr	r0, [pc, #4]	; (8000eb4 <TIM1_UP_IRQHandler+0x8>)
 8000eae:	f001 b9af 	b.w	8002210 <HAL_TIM_IRQHandler>
 8000eb2:	bf00      	nop
 8000eb4:	200013cc 	.word	0x200013cc

08000eb8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000eb8:	4801      	ldr	r0, [pc, #4]	; (8000ec0 <TIM4_IRQHandler+0x8>)
 8000eba:	f001 b9a9 	b.w	8002210 <HAL_TIM_IRQHandler>
 8000ebe:	bf00      	nop
 8000ec0:	20000344 	.word	0x20000344

08000ec4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ec6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eca:	f000 fb55 	bl	8001578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000ece:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ed2:	f000 fb51 	bl	8001578 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000eda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ede:	f000 bb4b 	b.w	8001578 <HAL_GPIO_EXTI_IRQHandler>
	...

08000ee4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	  if ( GPIO_Pin == GPIO_PIN_13)
 8000ee4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 8000ee8:	b508      	push	{r3, lr}
	  if ( GPIO_Pin == GPIO_PIN_13)
 8000eea:	d106      	bne.n	8000efa <HAL_GPIO_EXTI_Callback+0x16>
	      {
	          // Write your code here
	      	HAL_TIM_Base_Start_IT(&htim4);
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000eee:	f001 f965 	bl	80021bc <HAL_TIM_Base_Start_IT>

	      	pin_selected = 3;
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x40>)
	           {
	               // Write your code here

	       	HAL_TIM_Base_Start_IT(&htim4);

	       	pin_selected = 5;
 8000ef6:	701a      	strb	r2, [r3, #0]

	   //   	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	           }

}
 8000ef8:	bd08      	pop	{r3, pc}
	      if ( GPIO_Pin == GPIO_PIN_14)
 8000efa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000efe:	d105      	bne.n	8000f0c <HAL_GPIO_EXTI_Callback+0x28>
	      	HAL_TIM_Base_Start_IT(&htim4);
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f02:	f001 f95b 	bl	80021bc <HAL_TIM_Base_Start_IT>
	      	pin_selected = 4;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f08:	2204      	movs	r2, #4
 8000f0a:	e7f4      	b.n	8000ef6 <HAL_GPIO_EXTI_Callback+0x12>
	      if ( GPIO_Pin == GPIO_PIN_15)
 8000f0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000f10:	d1f2      	bne.n	8000ef8 <HAL_GPIO_EXTI_Callback+0x14>
	       	HAL_TIM_Base_Start_IT(&htim4);
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f14:	f001 f952 	bl	80021bc <HAL_TIM_Base_Start_IT>
	       	pin_selected = 5;
 8000f18:	4b02      	ldr	r3, [pc, #8]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	e7eb      	b.n	8000ef6 <HAL_GPIO_EXTI_Callback+0x12>
 8000f1e:	bf00      	nop
 8000f20:	20000344 	.word	0x20000344
 8000f24:	200000a9 	.word	0x200000a9

08000f28 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b538      	push	{r3, r4, r5, lr}
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(pin_selected == 3 ){
 8000f2a:	4c1b      	ldr	r4, [pc, #108]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f2c:	7823      	ldrb	r3, [r4, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d10f      	bne.n	8000f52 <HAL_TIM_PeriodElapsedCallback+0x2a>
  	if(HAL_GPIO_ReadPin(GPIOC, 8192) == GPIO_PIN_SET){
 8000f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f36:	4819      	ldr	r0, [pc, #100]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f38:	f000 fb0c 	bl	8001554 <HAL_GPIO_ReadPin>
 8000f3c:	2801      	cmp	r0, #1
 8000f3e:	d106      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x26>
//  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
  		i -= 5;
 8000f40:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
  		HAL_TIM_Base_Stop_IT(&htim4);
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
  		i -= 5;
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	3b05      	subs	r3, #5
 8000f48:	6013      	str	r3, [r2, #0]
  		HAL_TIM_Base_Stop_IT(&htim4);
 8000f4a:	f001 f947 	bl	80021dc <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	7023      	strb	r3, [r4, #0]
    }
    if(pin_selected == 4 ){
 8000f52:	7825      	ldrb	r5, [r4, #0]
 8000f54:	2d04      	cmp	r5, #4
 8000f56:	d10f      	bne.n	8000f78 <HAL_TIM_PeriodElapsedCallback+0x50>
  	if(HAL_GPIO_ReadPin(GPIOC, 16384) == GPIO_PIN_SET){
 8000f58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5c:	480f      	ldr	r0, [pc, #60]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f5e:	f000 faf9 	bl	8001554 <HAL_GPIO_ReadPin>
 8000f62:	2801      	cmp	r0, #1
 8000f64:	d106      	bne.n	8000f74 <HAL_TIM_PeriodElapsedCallback+0x4c>

  		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8000f66:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000f68:	4629      	mov	r1, r5
 8000f6a:	f000 fafe 	bl	800156a <HAL_GPIO_TogglePin>

  		HAL_TIM_Base_Stop_IT(&htim4);
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f70:	f001 f934 	bl	80021dc <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	7023      	strb	r3, [r4, #0]
    }
    if(pin_selected == 4 ){
 8000f78:	7823      	ldrb	r3, [r4, #0]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d10b      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x6e>
  	if(HAL_GPIO_ReadPin(GPIOC,  32768) == GPIO_PIN_SET){
 8000f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000f84:	f000 fae6 	bl	8001554 <HAL_GPIO_ReadPin>
 8000f88:	2801      	cmp	r0, #1
 8000f8a:	d102      	bne.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x6a>

//  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);

  		HAL_TIM_Base_Stop_IT(&htim4);
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f8e:	f001 f925 	bl	80021dc <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	7023      	strb	r3, [r4, #0]
    }

}
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
 8000f98:	200000a9 	.word	0x200000a9
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	200000a4 	.word	0x200000a4
 8000fa4:	20000344 	.word	0x20000344
 8000fa8:	40010c00 	.word	0x40010c00

08000fac <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <_sbrk+0x30>)
{
 8000fae:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000fb0:	6819      	ldr	r1, [r3, #0]
{
 8000fb2:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8000fb4:	b909      	cbnz	r1, 8000fba <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000fb6:	490a      	ldr	r1, [pc, #40]	; (8000fe0 <_sbrk+0x34>)
 8000fb8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <_sbrk+0x38>)
 8000fbe:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <_sbrk+0x3c>)
 8000fc0:	4402      	add	r2, r0
 8000fc2:	1b09      	subs	r1, r1, r4
 8000fc4:	428a      	cmp	r2, r1
 8000fc6:	d906      	bls.n	8000fd6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000fc8:	f003 fbf8 	bl	80047bc <__errno>
 8000fcc:	230c      	movs	r3, #12
 8000fce:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000fd4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000fd6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8000fd8:	e7fc      	b.n	8000fd4 <_sbrk+0x28>
 8000fda:	bf00      	nop
 8000fdc:	200000ac 	.word	0x200000ac
 8000fe0:	200028c0 	.word	0x200028c0
 8000fe4:	20005000 	.word	0x20005000
 8000fe8:	00000400 	.word	0x00000400

08000fec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <SystemInit+0x40>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ff6:	6859      	ldr	r1, [r3, #4]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <SystemInit+0x44>)
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001004:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001008:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001010:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001018:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800101a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800101e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <SystemInit+0x48>)
 8001026:	609a      	str	r2, [r3, #8]
#endif 
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000
 8001030:	f8ff0000 	.word	0xf8ff0000
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001038:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800103a:	e003      	b.n	8001044 <LoopCopyDataInit>

0800103c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800103e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001040:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001042:	3104      	adds	r1, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001048:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800104a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800104c:	d3f6      	bcc.n	800103c <CopyDataInit>
  ldr r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001050:	e002      	b.n	8001058 <LoopFillZerobss>

08001052 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001054:	f842 3b04 	str.w	r3, [r2], #4

08001058 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800105a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800105c:	d3f9      	bcc.n	8001052 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800105e:	f7ff ffc5 	bl	8000fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001062:	f003 fbb1 	bl	80047c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001066:	f7ff f8a9 	bl	80001bc <main>
  bx lr
 800106a:	4770      	bx	lr
  ldr r3, =_sidata
 800106c:	0800f318 	.word	0x0800f318
  ldr r0, =_sdata
 8001070:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001074:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8001078:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 800107c:	200028c0 	.word	0x200028c0

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_InitTick+0x3c>)
{
 8001088:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108a:	7818      	ldrb	r0, [r3, #0]
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	fbb3 f3f0 	udiv	r3, r3, r0
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_InitTick+0x40>)
 8001096:	6810      	ldr	r0, [r2, #0]
 8001098:	fbb0 f0f3 	udiv	r0, r0, r3
 800109c:	f000 f8a0 	bl	80011e0 <HAL_SYSTICK_Config>
 80010a0:	4604      	mov	r4, r0
 80010a2:	b958      	cbnz	r0, 80010bc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a4:	2d0f      	cmp	r5, #15
 80010a6:	d809      	bhi.n	80010bc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	4602      	mov	r2, r0
 80010aa:	4629      	mov	r1, r5
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f854 	bl	800115c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4620      	mov	r0, r4
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <HAL_InitTick+0x44>)
 80010b8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80010bc:	2001      	movs	r0, #1
 80010be:	e7fc      	b.n	80010ba <HAL_InitTick+0x36>
 80010c0:	20000004 	.word	0x20000004
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008

080010cc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x20>)
{
 80010ce:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	f000 f82d 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff ffd0 	bl	8001084 <HAL_InitTick>
  HAL_MspInit();
 80010e4:	f7ff fd02 	bl	8000aec <HAL_MspInit>
}
 80010e8:	2000      	movs	r0, #0
 80010ea:	bd08      	pop	{r3, pc}
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80010f0:	4a03      	ldr	r2, [pc, #12]	; (8001100 <HAL_IncTick+0x10>)
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <HAL_IncTick+0x14>)
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	440b      	add	r3, r1
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20001854 	.word	0x20001854
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001108:	4b01      	ldr	r3, [pc, #4]	; (8001110 <HAL_GetTick+0x8>)
 800110a:	6818      	ldr	r0, [r3, #0]
}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20001854 	.word	0x20001854

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff fff6 	bl	8001108 <HAL_GetTick>
 800111c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001120:	bf1e      	ittt	ne
 8001122:	4b04      	ldrne	r3, [pc, #16]	; (8001134 <HAL_Delay+0x20>)
 8001124:	781b      	ldrbne	r3, [r3, #0]
 8001126:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001128:	f7ff ffee 	bl	8001108 <HAL_GetTick>
 800112c:	1b40      	subs	r0, r0, r5
 800112e:	42a0      	cmp	r0, r4
 8001130:	d3fa      	bcc.n	8001128 <HAL_Delay+0x14>
  {
  }
}
 8001132:	bd38      	pop	{r3, r4, r5, pc}
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800113a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800113e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001146:	041b      	lsls	r3, r3, #16
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800114e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001152:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001154:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115e:	b570      	push	{r4, r5, r6, lr}
 8001160:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001162:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001166:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116a:	f1c4 0507 	rsb	r5, r4, #7
 800116e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001170:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	bf28      	it	cs
 8001176:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001178:	2b06      	cmp	r3, #6
 800117a:	bf98      	it	ls
 800117c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117e:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	bf88      	it	hi
 8001184:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001186:	ea21 0303 	bic.w	r3, r1, r3
 800118a:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	fa06 f404 	lsl.w	r4, r6, r4
 8001190:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001194:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001196:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	bfa8      	it	ge
 800119c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80011a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a4:	bfb8      	it	lt
 80011a6:	4a06      	ldrlt	r2, [pc, #24]	; (80011c0 <HAL_NVIC_SetPriority+0x64>)
 80011a8:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	bfab      	itete	ge
 80011ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011ba:	bd70      	pop	{r4, r5, r6, pc}
 80011bc:	e000ed00 	.word	0xe000ed00
 80011c0:	e000ed14 	.word	0xe000ed14

080011c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80011c4:	2800      	cmp	r0, #0
 80011c6:	db08      	blt.n	80011da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c8:	2301      	movs	r3, #1
 80011ca:	0942      	lsrs	r2, r0, #5
 80011cc:	f000 001f 	and.w	r0, r0, #31
 80011d0:	fa03 f000 	lsl.w	r0, r3, r0
 80011d4:	4b01      	ldr	r3, [pc, #4]	; (80011dc <HAL_NVIC_EnableIRQ+0x18>)
 80011d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80011da:	4770      	bx	lr
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	3801      	subs	r0, #1
 80011e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011e6:	d20a      	bcs.n	80011fe <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800120c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800120e:	b330      	cbz	r0, 800125e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001210:	2214      	movs	r2, #20
 8001212:	6801      	ldr	r1, [r0, #0]
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_DMA_Init+0x58>)
 8001216:	440b      	add	r3, r1
 8001218:	fbb3 f3f2 	udiv	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001222:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001224:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001226:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800122a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800122e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001232:	4323      	orrs	r3, r4
 8001234:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001236:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800123a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123c:	6944      	ldr	r4, [r0, #20]
 800123e:	4323      	orrs	r3, r4
 8001240:	6984      	ldr	r4, [r0, #24]
 8001242:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001244:	69c4      	ldr	r4, [r0, #28]
 8001246:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001248:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800124a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800124c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001250:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001254:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001256:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800125a:	4618      	mov	r0, r3
}
 800125c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e7fc      	b.n	800125c <HAL_DMA_Init+0x50>
 8001262:	bf00      	nop
 8001264:	bffdfff8 	.word	0xbffdfff8
 8001268:	40020000 	.word	0x40020000

0800126c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800126c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800126e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001270:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001272:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001274:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001276:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001278:	4095      	lsls	r5, r2
 800127a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 800127c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800127e:	d032      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x7a>
 8001280:	074d      	lsls	r5, r1, #29
 8001282:	d530      	bpl.n	80012e6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001288:	bf5e      	ittt	pl
 800128a:	681a      	ldrpl	r2, [r3, #0]
 800128c:	f022 0204 	bicpl.w	r2, r2, #4
 8001290:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001292:	4a3e      	ldr	r2, [pc, #248]	; (800138c <HAL_DMA_IRQHandler+0x120>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d019      	beq.n	80012cc <HAL_DMA_IRQHandler+0x60>
 8001298:	3214      	adds	r2, #20
 800129a:	4293      	cmp	r3, r2
 800129c:	d018      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x64>
 800129e:	3214      	adds	r2, #20
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d017      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x68>
 80012a4:	3214      	adds	r2, #20
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d017      	beq.n	80012da <HAL_DMA_IRQHandler+0x6e>
 80012aa:	3214      	adds	r2, #20
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d017      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x74>
 80012b0:	3214      	adds	r2, #20
 80012b2:	4293      	cmp	r3, r2
 80012b4:	bf0c      	ite	eq
 80012b6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80012ba:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <HAL_DMA_IRQHandler+0x124>)
 80012c0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05e      	beq.n	8001386 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80012c8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80012ca:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012cc:	2304      	movs	r3, #4
 80012ce:	e7f6      	b.n	80012be <HAL_DMA_IRQHandler+0x52>
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	e7f4      	b.n	80012be <HAL_DMA_IRQHandler+0x52>
 80012d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d8:	e7f1      	b.n	80012be <HAL_DMA_IRQHandler+0x52>
 80012da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012de:	e7ee      	b.n	80012be <HAL_DMA_IRQHandler+0x52>
 80012e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012e4:	e7eb      	b.n	80012be <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80012e6:	2502      	movs	r5, #2
 80012e8:	4095      	lsls	r5, r2
 80012ea:	4225      	tst	r5, r4
 80012ec:	d035      	beq.n	800135a <HAL_DMA_IRQHandler+0xee>
 80012ee:	078d      	lsls	r5, r1, #30
 80012f0:	d533      	bpl.n	800135a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	0694      	lsls	r4, r2, #26
 80012f6:	d406      	bmi.n	8001306 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f022 020a 	bic.w	r2, r2, #10
 80012fe:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001300:	2201      	movs	r2, #1
 8001302:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_DMA_IRQHandler+0x120>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d019      	beq.n	8001340 <HAL_DMA_IRQHandler+0xd4>
 800130c:	3214      	adds	r2, #20
 800130e:	4293      	cmp	r3, r2
 8001310:	d018      	beq.n	8001344 <HAL_DMA_IRQHandler+0xd8>
 8001312:	3214      	adds	r2, #20
 8001314:	4293      	cmp	r3, r2
 8001316:	d017      	beq.n	8001348 <HAL_DMA_IRQHandler+0xdc>
 8001318:	3214      	adds	r2, #20
 800131a:	4293      	cmp	r3, r2
 800131c:	d017      	beq.n	800134e <HAL_DMA_IRQHandler+0xe2>
 800131e:	3214      	adds	r2, #20
 8001320:	4293      	cmp	r3, r2
 8001322:	d017      	beq.n	8001354 <HAL_DMA_IRQHandler+0xe8>
 8001324:	3214      	adds	r2, #20
 8001326:	4293      	cmp	r3, r2
 8001328:	bf0c      	ite	eq
 800132a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800132e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8001332:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_DMA_IRQHandler+0x124>)
 8001334:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001336:	2300      	movs	r3, #0
 8001338:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800133c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800133e:	e7c1      	b.n	80012c4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001340:	2302      	movs	r3, #2
 8001342:	e7f6      	b.n	8001332 <HAL_DMA_IRQHandler+0xc6>
 8001344:	2320      	movs	r3, #32
 8001346:	e7f4      	b.n	8001332 <HAL_DMA_IRQHandler+0xc6>
 8001348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134c:	e7f1      	b.n	8001332 <HAL_DMA_IRQHandler+0xc6>
 800134e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001352:	e7ee      	b.n	8001332 <HAL_DMA_IRQHandler+0xc6>
 8001354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001358:	e7eb      	b.n	8001332 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800135a:	2508      	movs	r5, #8
 800135c:	4095      	lsls	r5, r2
 800135e:	4225      	tst	r5, r4
 8001360:	d011      	beq.n	8001386 <HAL_DMA_IRQHandler+0x11a>
 8001362:	0709      	lsls	r1, r1, #28
 8001364:	d50f      	bpl.n	8001386 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	f021 010e 	bic.w	r1, r1, #14
 800136c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800136e:	2301      	movs	r3, #1
 8001370:	fa03 f202 	lsl.w	r2, r3, r2
 8001374:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001376:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001378:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800137c:	2300      	movs	r3, #0
 800137e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001382:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001384:	e79e      	b.n	80012c4 <HAL_DMA_IRQHandler+0x58>
}
 8001386:	bc70      	pop	{r4, r5, r6}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40020008 	.word	0x40020008
 8001390:	40020000 	.word	0x40020000

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001398:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800139a:	4626      	mov	r6, r4
 800139c:	4b65      	ldr	r3, [pc, #404]	; (8001534 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800139e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001544 <HAL_GPIO_Init+0x1b0>
 80013a2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001548 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a6:	680a      	ldr	r2, [r1, #0]
 80013a8:	fa32 f506 	lsrs.w	r5, r2, r6
 80013ac:	d102      	bne.n	80013b4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80013ae:	b003      	add	sp, #12
 80013b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80013b4:	f04f 0801 	mov.w	r8, #1
 80013b8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013bc:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80013c0:	4590      	cmp	r8, r2
 80013c2:	d17e      	bne.n	80014c2 <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80013c4:	684d      	ldr	r5, [r1, #4]
 80013c6:	2d12      	cmp	r5, #18
 80013c8:	f000 80a9 	beq.w	800151e <HAL_GPIO_Init+0x18a>
 80013cc:	f200 8082 	bhi.w	80014d4 <HAL_GPIO_Init+0x140>
 80013d0:	2d02      	cmp	r5, #2
 80013d2:	f000 80a1 	beq.w	8001518 <HAL_GPIO_Init+0x184>
 80013d6:	d876      	bhi.n	80014c6 <HAL_GPIO_Init+0x132>
 80013d8:	2d00      	cmp	r5, #0
 80013da:	f000 8088 	beq.w	80014ee <HAL_GPIO_Init+0x15a>
 80013de:	2d01      	cmp	r5, #1
 80013e0:	f000 8098 	beq.w	8001514 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013e4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e8:	2aff      	cmp	r2, #255	; 0xff
 80013ea:	bf93      	iteet	ls
 80013ec:	4682      	movls	sl, r0
 80013ee:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80013f2:	3d08      	subhi	r5, #8
 80013f4:	f8d0 b000 	ldrls.w	fp, [r0]
 80013f8:	bf92      	itee	ls
 80013fa:	00b5      	lslls	r5, r6, #2
 80013fc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001400:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001402:	fa09 f805 	lsl.w	r8, r9, r5
 8001406:	ea2b 0808 	bic.w	r8, fp, r8
 800140a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800140e:	bf88      	it	hi
 8001410:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001414:	ea48 0505 	orr.w	r5, r8, r5
 8001418:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800141c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001420:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001424:	d04d      	beq.n	80014c2 <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4f44      	ldr	r7, [pc, #272]	; (8001538 <HAL_GPIO_Init+0x1a4>)
 8001428:	f026 0803 	bic.w	r8, r6, #3
 800142c:	69bd      	ldr	r5, [r7, #24]
 800142e:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001432:	f045 0501 	orr.w	r5, r5, #1
 8001436:	61bd      	str	r5, [r7, #24]
 8001438:	69bd      	ldr	r5, [r7, #24]
 800143a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800143e:	f005 0501 	and.w	r5, r5, #1
 8001442:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001444:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001448:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800144a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800144e:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001452:	fa09 f90b 	lsl.w	r9, r9, fp
 8001456:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800145a:	4d38      	ldr	r5, [pc, #224]	; (800153c <HAL_GPIO_Init+0x1a8>)
 800145c:	42a8      	cmp	r0, r5
 800145e:	d063      	beq.n	8001528 <HAL_GPIO_Init+0x194>
 8001460:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001464:	42a8      	cmp	r0, r5
 8001466:	d061      	beq.n	800152c <HAL_GPIO_Init+0x198>
 8001468:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800146c:	42a8      	cmp	r0, r5
 800146e:	d05f      	beq.n	8001530 <HAL_GPIO_Init+0x19c>
 8001470:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001474:	42a8      	cmp	r0, r5
 8001476:	bf0c      	ite	eq
 8001478:	2503      	moveq	r5, #3
 800147a:	2504      	movne	r5, #4
 800147c:	fa05 f50b 	lsl.w	r5, r5, fp
 8001480:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001484:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001488:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800148e:	bf14      	ite	ne
 8001490:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001492:	4395      	biceq	r5, r2
 8001494:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001496:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001498:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800149c:	bf14      	ite	ne
 800149e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014a0:	4395      	biceq	r5, r2
 80014a2:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a4:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a6:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80014aa:	bf14      	ite	ne
 80014ac:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4395      	biceq	r5, r2
 80014b0:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b2:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b4:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b8:	bf14      	ite	ne
 80014ba:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014bc:	ea25 0202 	biceq.w	r2, r5, r2
 80014c0:	60da      	str	r2, [r3, #12]
	position++;
 80014c2:	3601      	adds	r6, #1
 80014c4:	e76f      	b.n	80013a6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80014c6:	2d03      	cmp	r5, #3
 80014c8:	d022      	beq.n	8001510 <HAL_GPIO_Init+0x17c>
 80014ca:	2d11      	cmp	r5, #17
 80014cc:	d18a      	bne.n	80013e4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ce:	68cc      	ldr	r4, [r1, #12]
 80014d0:	3404      	adds	r4, #4
          break;
 80014d2:	e787      	b.n	80013e4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80014d4:	4f1a      	ldr	r7, [pc, #104]	; (8001540 <HAL_GPIO_Init+0x1ac>)
 80014d6:	42bd      	cmp	r5, r7
 80014d8:	d009      	beq.n	80014ee <HAL_GPIO_Init+0x15a>
 80014da:	d812      	bhi.n	8001502 <HAL_GPIO_Init+0x16e>
 80014dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800154c <HAL_GPIO_Init+0x1b8>
 80014e0:	454d      	cmp	r5, r9
 80014e2:	d004      	beq.n	80014ee <HAL_GPIO_Init+0x15a>
 80014e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80014e8:	454d      	cmp	r5, r9
 80014ea:	f47f af7b 	bne.w	80013e4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ee:	688c      	ldr	r4, [r1, #8]
 80014f0:	b1c4      	cbz	r4, 8001524 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f2:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80014f4:	bf0c      	ite	eq
 80014f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80014fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014fe:	2408      	movs	r4, #8
 8001500:	e770      	b.n	80013e4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001502:	4565      	cmp	r5, ip
 8001504:	d0f3      	beq.n	80014ee <HAL_GPIO_Init+0x15a>
 8001506:	4575      	cmp	r5, lr
 8001508:	d0f1      	beq.n	80014ee <HAL_GPIO_Init+0x15a>
 800150a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001550 <HAL_GPIO_Init+0x1bc>
 800150e:	e7eb      	b.n	80014e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001510:	2400      	movs	r4, #0
 8001512:	e767      	b.n	80013e4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001514:	68cc      	ldr	r4, [r1, #12]
          break;
 8001516:	e765      	b.n	80013e4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001518:	68cc      	ldr	r4, [r1, #12]
 800151a:	3408      	adds	r4, #8
          break;
 800151c:	e762      	b.n	80013e4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800151e:	68cc      	ldr	r4, [r1, #12]
 8001520:	340c      	adds	r4, #12
          break;
 8001522:	e75f      	b.n	80013e4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001524:	2404      	movs	r4, #4
 8001526:	e75d      	b.n	80013e4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001528:	2500      	movs	r5, #0
 800152a:	e7a7      	b.n	800147c <HAL_GPIO_Init+0xe8>
 800152c:	2501      	movs	r5, #1
 800152e:	e7a5      	b.n	800147c <HAL_GPIO_Init+0xe8>
 8001530:	2502      	movs	r5, #2
 8001532:	e7a3      	b.n	800147c <HAL_GPIO_Init+0xe8>
 8001534:	40010400 	.word	0x40010400
 8001538:	40021000 	.word	0x40021000
 800153c:	40010800 	.word	0x40010800
 8001540:	10210000 	.word	0x10210000
 8001544:	10310000 	.word	0x10310000
 8001548:	10320000 	.word	0x10320000
 800154c:	10110000 	.word	0x10110000
 8001550:	10220000 	.word	0x10220000

08001554 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001554:	6883      	ldr	r3, [r0, #8]
 8001556:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001558:	bf14      	ite	ne
 800155a:	2001      	movne	r0, #1
 800155c:	2000      	moveq	r0, #0
 800155e:	4770      	bx	lr

08001560 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001560:	b10a      	cbz	r2, 8001566 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001562:	6101      	str	r1, [r0, #16]
  }
}
 8001564:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001566:	0409      	lsls	r1, r1, #16
 8001568:	e7fb      	b.n	8001562 <HAL_GPIO_WritePin+0x2>

0800156a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800156a:	68c3      	ldr	r3, [r0, #12]
 800156c:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156e:	bf14      	ite	ne
 8001570:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001572:	6101      	streq	r1, [r0, #16]
  }
}
 8001574:	4770      	bx	lr
	...

08001578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001578:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800157c:	6959      	ldr	r1, [r3, #20]
 800157e:	4201      	tst	r1, r0
 8001580:	d002      	beq.n	8001588 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001582:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001584:	f7ff fcae 	bl	8000ee4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001588:	bd08      	pop	{r3, pc}
 800158a:	bf00      	nop
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001592:	4604      	mov	r4, r0
{
 8001594:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8001596:	b310      	cbz	r0, 80015de <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001598:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 800159c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015a0:	b91b      	cbnz	r3, 80015aa <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015a2:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015a6:	f7ff fc2b 	bl	8000e00 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015aa:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80015ac:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ae:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80015b0:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80015b4:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 80015b8:	f001 f8f3 	bl	80027a2 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	4625      	mov	r5, r4
 80015c4:	6033      	str	r3, [r6, #0]
 80015c6:	1d27      	adds	r7, r4, #4
 80015c8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80015cc:	f855 0b10 	ldr.w	r0, [r5], #16
 80015d0:	f001 f8e0 	bl	8002794 <USB_CoreInit>
 80015d4:	4606      	mov	r6, r0
 80015d6:	b120      	cbz	r0, 80015e2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015d8:	2302      	movs	r3, #2
 80015da:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 80015de:	2501      	movs	r5, #1
 80015e0:	e048      	b.n	8001674 <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015e2:	4601      	mov	r1, r0
 80015e4:	6820      	ldr	r0, [r4, #0]
 80015e6:	f001 f8e6 	bl	80027b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ec:	f04f 0c01 	mov.w	ip, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f0:	6861      	ldr	r1, [r4, #4]
 80015f2:	b2c3      	uxtb	r3, r0
 80015f4:	4299      	cmp	r1, r3
 80015f6:	f100 0001 	add.w	r0, r0, #1
 80015fa:	d817      	bhi.n	800162c <HAL_PCD_Init+0x9c>
 80015fc:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015fe:	4610      	mov	r0, r2
 8001600:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001602:	4299      	cmp	r1, r3
 8001604:	f102 0201 	add.w	r2, r2, #1
 8001608:	d81d      	bhi.n	8001646 <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	466e      	mov	r6, sp
 800160e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	6033      	str	r3, [r6, #0]
 8001614:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	f001 f8ce 	bl	80027ba <USB_DevInit>
 800161e:	2301      	movs	r3, #1
 8001620:	4605      	mov	r5, r0
 8001622:	b300      	cbz	r0, 8001666 <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001624:	2202      	movs	r2, #2
 8001626:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 800162a:	e7d8      	b.n	80015de <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800162c:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8001630:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8001634:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001638:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800163a:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_buff = 0U;
 800163e:	e9c2 660e 	strd	r6, r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_len = 0U;
 8001642:	6416      	str	r6, [r2, #64]	; 0x40
 8001644:	e7d5      	b.n	80015f2 <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 8001646:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 800164a:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 800164e:	330a      	adds	r3, #10
 8001650:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 8001652:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001656:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 800165a:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800165e:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001662:	50e0      	str	r0, [r4, r3]
 8001664:	e7cc      	b.n	8001600 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001666:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800166a:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800166e:	6820      	ldr	r0, [r4, #0]
 8001670:	f001 f8bd 	bl	80027ee <USB_DevDisconnect>

  return HAL_OK;
}
 8001674:	4628      	mov	r0, r5
 8001676:	b007      	add	sp, #28
 8001678:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800167c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800167c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001680:	4605      	mov	r5, r0
 8001682:	b908      	cbnz	r0, 8001688 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001684:	2001      	movs	r0, #1
 8001686:	e03c      	b.n	8001702 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001688:	6803      	ldr	r3, [r0, #0]
 800168a:	07db      	lsls	r3, r3, #31
 800168c:	d410      	bmi.n	80016b0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	079f      	lsls	r7, r3, #30
 8001692:	d45d      	bmi.n	8001750 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	0719      	lsls	r1, r3, #28
 8001698:	f100 8094 	bmi.w	80017c4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	075a      	lsls	r2, r3, #29
 80016a0:	f100 80be 	bmi.w	8001820 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a4:	69e8      	ldr	r0, [r5, #28]
 80016a6:	2800      	cmp	r0, #0
 80016a8:	f040 812c 	bne.w	8001904 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80016ac:	2000      	movs	r0, #0
 80016ae:	e028      	b.n	8001702 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	4c8f      	ldr	r4, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x274>)
 80016b2:	6863      	ldr	r3, [r4, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d007      	beq.n	80016cc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	6863      	ldr	r3, [r4, #4]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d109      	bne.n	80016da <HAL_RCC_OscConfig+0x5e>
 80016c6:	6863      	ldr	r3, [r4, #4]
 80016c8:	03de      	lsls	r6, r3, #15
 80016ca:	d506      	bpl.n	80016da <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	039c      	lsls	r4, r3, #14
 80016d0:	d5dd      	bpl.n	800168e <HAL_RCC_OscConfig+0x12>
 80016d2:	686b      	ldr	r3, [r5, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1da      	bne.n	800168e <HAL_RCC_OscConfig+0x12>
 80016d8:	e7d4      	b.n	8001684 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016da:	686b      	ldr	r3, [r5, #4]
 80016dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e0:	d112      	bne.n	8001708 <HAL_RCC_OscConfig+0x8c>
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016ea:	f7ff fd0d 	bl	8001108 <HAL_GetTick>
 80016ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	0398      	lsls	r0, r3, #14
 80016f4:	d4cb      	bmi.n	800168e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f6:	f7ff fd07 	bl	8001108 <HAL_GetTick>
 80016fa:	1b80      	subs	r0, r0, r6
 80016fc:	2864      	cmp	r0, #100	; 0x64
 80016fe:	d9f7      	bls.n	80016f0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001700:	2003      	movs	r0, #3
}
 8001702:	b002      	add	sp, #8
 8001704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	b99b      	cbnz	r3, 8001732 <HAL_RCC_OscConfig+0xb6>
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001710:	6023      	str	r3, [r4, #0]
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800171a:	f7ff fcf5 	bl	8001108 <HAL_GetTick>
 800171e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	0399      	lsls	r1, r3, #14
 8001724:	d5b3      	bpl.n	800168e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001726:	f7ff fcef 	bl	8001108 <HAL_GetTick>
 800172a:	1b80      	subs	r0, r0, r6
 800172c:	2864      	cmp	r0, #100	; 0x64
 800172e:	d9f7      	bls.n	8001720 <HAL_RCC_OscConfig+0xa4>
 8001730:	e7e6      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001732:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	d103      	bne.n	8001742 <HAL_RCC_OscConfig+0xc6>
 800173a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173e:	6023      	str	r3, [r4, #0]
 8001740:	e7cf      	b.n	80016e2 <HAL_RCC_OscConfig+0x66>
 8001742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001746:	6023      	str	r3, [r4, #0]
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	e7cb      	b.n	80016e8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001750:	4c67      	ldr	r4, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x274>)
 8001752:	6863      	ldr	r3, [r4, #4]
 8001754:	f013 0f0c 	tst.w	r3, #12
 8001758:	d007      	beq.n	800176a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d110      	bne.n	8001786 <HAL_RCC_OscConfig+0x10a>
 8001764:	6863      	ldr	r3, [r4, #4]
 8001766:	03da      	lsls	r2, r3, #15
 8001768:	d40d      	bmi.n	8001786 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	079b      	lsls	r3, r3, #30
 800176e:	d502      	bpl.n	8001776 <HAL_RCC_OscConfig+0xfa>
 8001770:	692b      	ldr	r3, [r5, #16]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d186      	bne.n	8001684 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	696a      	ldr	r2, [r5, #20]
 800177a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800177e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001782:	6023      	str	r3, [r4, #0]
 8001784:	e786      	b.n	8001694 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001786:	692a      	ldr	r2, [r5, #16]
 8001788:	4b5a      	ldr	r3, [pc, #360]	; (80018f4 <HAL_RCC_OscConfig+0x278>)
 800178a:	b16a      	cbz	r2, 80017a8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001790:	f7ff fcba 	bl	8001108 <HAL_GetTick>
 8001794:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	079f      	lsls	r7, r3, #30
 800179a:	d4ec      	bmi.n	8001776 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800179c:	f7ff fcb4 	bl	8001108 <HAL_GetTick>
 80017a0:	1b80      	subs	r0, r0, r6
 80017a2:	2802      	cmp	r0, #2
 80017a4:	d9f7      	bls.n	8001796 <HAL_RCC_OscConfig+0x11a>
 80017a6:	e7ab      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80017a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017aa:	f7ff fcad 	bl	8001108 <HAL_GetTick>
 80017ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	0798      	lsls	r0, r3, #30
 80017b4:	f57f af6e 	bpl.w	8001694 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fca6 	bl	8001108 <HAL_GetTick>
 80017bc:	1b80      	subs	r0, r0, r6
 80017be:	2802      	cmp	r0, #2
 80017c0:	d9f6      	bls.n	80017b0 <HAL_RCC_OscConfig+0x134>
 80017c2:	e79d      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c4:	69aa      	ldr	r2, [r5, #24]
 80017c6:	4c4a      	ldr	r4, [pc, #296]	; (80018f0 <HAL_RCC_OscConfig+0x274>)
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_OscConfig+0x27c>)
 80017ca:	b1da      	cbz	r2, 8001804 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80017cc:	2201      	movs	r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017d0:	f7ff fc9a 	bl	8001108 <HAL_GetTick>
 80017d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017d8:	079b      	lsls	r3, r3, #30
 80017da:	d50d      	bpl.n	80017f8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80017e0:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x280>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80017e8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80017ea:	bf00      	nop
  }
  while (Delay --);
 80017ec:	9b01      	ldr	r3, [sp, #4]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <HAL_RCC_OscConfig+0x16e>
 80017f6:	e751      	b.n	800169c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fc86 	bl	8001108 <HAL_GetTick>
 80017fc:	1b80      	subs	r0, r0, r6
 80017fe:	2802      	cmp	r0, #2
 8001800:	d9e9      	bls.n	80017d6 <HAL_RCC_OscConfig+0x15a>
 8001802:	e77d      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001804:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001806:	f7ff fc7f 	bl	8001108 <HAL_GetTick>
 800180a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800180e:	079f      	lsls	r7, r3, #30
 8001810:	f57f af44 	bpl.w	800169c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001814:	f7ff fc78 	bl	8001108 <HAL_GetTick>
 8001818:	1b80      	subs	r0, r0, r6
 800181a:	2802      	cmp	r0, #2
 800181c:	d9f6      	bls.n	800180c <HAL_RCC_OscConfig+0x190>
 800181e:	e76f      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001820:	4c33      	ldr	r4, [pc, #204]	; (80018f0 <HAL_RCC_OscConfig+0x274>)
 8001822:	69e3      	ldr	r3, [r4, #28]
 8001824:	00d8      	lsls	r0, r3, #3
 8001826:	d424      	bmi.n	8001872 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001828:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	69e3      	ldr	r3, [r4, #28]
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	61e3      	str	r3, [r4, #28]
 8001832:	69e3      	ldr	r3, [r4, #28]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183c:	4e30      	ldr	r6, [pc, #192]	; (8001900 <HAL_RCC_OscConfig+0x284>)
 800183e:	6833      	ldr	r3, [r6, #0]
 8001840:	05d9      	lsls	r1, r3, #23
 8001842:	d518      	bpl.n	8001876 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	68eb      	ldr	r3, [r5, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d126      	bne.n	8001898 <HAL_RCC_OscConfig+0x21c>
 800184a:	6a23      	ldr	r3, [r4, #32]
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001852:	f7ff fc59 	bl	8001108 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800185a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	6a23      	ldr	r3, [r4, #32]
 800185e:	079b      	lsls	r3, r3, #30
 8001860:	d53f      	bpl.n	80018e2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001862:	2f00      	cmp	r7, #0
 8001864:	f43f af1e 	beq.w	80016a4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001868:	69e3      	ldr	r3, [r4, #28]
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186e:	61e3      	str	r3, [r4, #28]
 8001870:	e718      	b.n	80016a4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2700      	movs	r7, #0
 8001874:	e7e2      	b.n	800183c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001876:	6833      	ldr	r3, [r6, #0]
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800187e:	f7ff fc43 	bl	8001108 <HAL_GetTick>
 8001882:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	6833      	ldr	r3, [r6, #0]
 8001886:	05da      	lsls	r2, r3, #23
 8001888:	d4dc      	bmi.n	8001844 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188a:	f7ff fc3d 	bl	8001108 <HAL_GetTick>
 800188e:	eba0 0008 	sub.w	r0, r0, r8
 8001892:	2864      	cmp	r0, #100	; 0x64
 8001894:	d9f6      	bls.n	8001884 <HAL_RCC_OscConfig+0x208>
 8001896:	e733      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	b9ab      	cbnz	r3, 80018c6 <HAL_RCC_OscConfig+0x24a>
 800189a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	f023 0301 	bic.w	r3, r3, #1
 80018a4:	6223      	str	r3, [r4, #32]
 80018a6:	6a23      	ldr	r3, [r4, #32]
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018ae:	f7ff fc2b 	bl	8001108 <HAL_GetTick>
 80018b2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	6a23      	ldr	r3, [r4, #32]
 80018b6:	0798      	lsls	r0, r3, #30
 80018b8:	d5d3      	bpl.n	8001862 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ba:	f7ff fc25 	bl	8001108 <HAL_GetTick>
 80018be:	1b80      	subs	r0, r0, r6
 80018c0:	4540      	cmp	r0, r8
 80018c2:	d9f7      	bls.n	80018b4 <HAL_RCC_OscConfig+0x238>
 80018c4:	e71c      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c6:	2b05      	cmp	r3, #5
 80018c8:	6a23      	ldr	r3, [r4, #32]
 80018ca:	d103      	bne.n	80018d4 <HAL_RCC_OscConfig+0x258>
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6223      	str	r3, [r4, #32]
 80018d2:	e7ba      	b.n	800184a <HAL_RCC_OscConfig+0x1ce>
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6223      	str	r3, [r4, #32]
 80018da:	6a23      	ldr	r3, [r4, #32]
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	e7b6      	b.n	8001850 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7ff fc11 	bl	8001108 <HAL_GetTick>
 80018e6:	eba0 0008 	sub.w	r0, r0, r8
 80018ea:	42b0      	cmp	r0, r6
 80018ec:	d9b6      	bls.n	800185c <HAL_RCC_OscConfig+0x1e0>
 80018ee:	e707      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
 80018fc:	20000000 	.word	0x20000000
 8001900:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x334>)
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	461c      	mov	r4, r3
 800190a:	f002 020c 	and.w	r2, r2, #12
 800190e:	2a08      	cmp	r2, #8
 8001910:	d03d      	beq.n	800198e <HAL_RCC_OscConfig+0x312>
 8001912:	2300      	movs	r3, #0
 8001914:	4e27      	ldr	r6, [pc, #156]	; (80019b4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001916:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001918:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191a:	d12b      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800191c:	f7ff fbf4 	bl	8001108 <HAL_GetTick>
 8001920:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001922:	6823      	ldr	r3, [r4, #0]
 8001924:	0199      	lsls	r1, r3, #6
 8001926:	d41f      	bmi.n	8001968 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001928:	6a2b      	ldr	r3, [r5, #32]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d105      	bne.n	800193c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001930:	6862      	ldr	r2, [r4, #4]
 8001932:	68a9      	ldr	r1, [r5, #8]
 8001934:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001938:	430a      	orrs	r2, r1
 800193a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800193e:	6862      	ldr	r2, [r4, #4]
 8001940:	430b      	orrs	r3, r1
 8001942:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001946:	4313      	orrs	r3, r2
 8001948:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800194a:	2301      	movs	r3, #1
 800194c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800194e:	f7ff fbdb 	bl	8001108 <HAL_GetTick>
 8001952:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	019a      	lsls	r2, r3, #6
 8001958:	f53f aea8 	bmi.w	80016ac <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fbd4 	bl	8001108 <HAL_GetTick>
 8001960:	1b40      	subs	r0, r0, r5
 8001962:	2802      	cmp	r0, #2
 8001964:	d9f6      	bls.n	8001954 <HAL_RCC_OscConfig+0x2d8>
 8001966:	e6cb      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fbce 	bl	8001108 <HAL_GetTick>
 800196c:	1bc0      	subs	r0, r0, r7
 800196e:	2802      	cmp	r0, #2
 8001970:	d9d7      	bls.n	8001922 <HAL_RCC_OscConfig+0x2a6>
 8001972:	e6c5      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001974:	f7ff fbc8 	bl	8001108 <HAL_GetTick>
 8001978:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	019b      	lsls	r3, r3, #6
 800197e:	f57f ae95 	bpl.w	80016ac <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff fbc1 	bl	8001108 <HAL_GetTick>
 8001986:	1b40      	subs	r0, r0, r5
 8001988:	2802      	cmp	r0, #2
 800198a:	d9f6      	bls.n	800197a <HAL_RCC_OscConfig+0x2fe>
 800198c:	e6b8      	b.n	8001700 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198e:	2801      	cmp	r0, #1
 8001990:	f43f aeb7 	beq.w	8001702 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001994:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001996:	6a2b      	ldr	r3, [r5, #32]
 8001998:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800199c:	429a      	cmp	r2, r3
 800199e:	f47f ae71 	bne.w	8001684 <HAL_RCC_OscConfig+0x8>
 80019a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019a4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80019a8:	1ac0      	subs	r0, r0, r3
 80019aa:	bf18      	it	ne
 80019ac:	2001      	movne	r0, #1
 80019ae:	e6a8      	b.n	8001702 <HAL_RCC_OscConfig+0x86>
 80019b0:	40021000 	.word	0x40021000
 80019b4:	42420060 	.word	0x42420060

080019b8 <HAL_RCC_GetSysClockFreq>:
{
 80019b8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80019bc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019be:	ac02      	add	r4, sp, #8
 80019c0:	f103 0510 	add.w	r5, r3, #16
 80019c4:	4622      	mov	r2, r4
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	3308      	adds	r3, #8
 80019cc:	c203      	stmia	r2!, {r0, r1}
 80019ce:	42ab      	cmp	r3, r5
 80019d0:	4614      	mov	r4, r2
 80019d2:	d1f7      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019d4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80019d8:	4911      	ldr	r1, [pc, #68]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019da:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80019de:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80019e0:	f003 020c 	and.w	r2, r3, #12
 80019e4:	2a08      	cmp	r2, #8
 80019e6:	d117      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019e8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80019ec:	a806      	add	r0, sp, #24
 80019ee:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019f0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019f2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019f6:	d50c      	bpl.n	8001a12 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019fa:	480a      	ldr	r0, [pc, #40]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a00:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a02:	aa06      	add	r2, sp, #24
 8001a04:	4413      	add	r3, r2
 8001a06:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a0a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001a0e:	b007      	add	sp, #28
 8001a10:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x70>)
 8001a14:	4350      	muls	r0, r2
 8001a16:	e7fa      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001a1a:	e7f8      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x56>
 8001a1c:	08004a4c 	.word	0x08004a4c
 8001a20:	40021000 	.word	0x40021000
 8001a24:	007a1200 	.word	0x007a1200
 8001a28:	003d0900 	.word	0x003d0900

08001a2c <HAL_RCC_ClockConfig>:
{
 8001a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a30:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001a32:	4604      	mov	r4, r0
 8001a34:	b910      	cbnz	r0, 8001a3c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a36:	2001      	movs	r0, #1
}
 8001a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4a44      	ldr	r2, [pc, #272]	; (8001b50 <HAL_RCC_ClockConfig+0x124>)
 8001a3e:	6813      	ldr	r3, [r2, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	428b      	cmp	r3, r1
 8001a46:	d328      	bcc.n	8001a9a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	6821      	ldr	r1, [r4, #0]
 8001a4a:	078e      	lsls	r6, r1, #30
 8001a4c:	d430      	bmi.n	8001ab0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4e:	07ca      	lsls	r2, r1, #31
 8001a50:	d443      	bmi.n	8001ada <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a52:	4a3f      	ldr	r2, [pc, #252]	; (8001b50 <HAL_RCC_ClockConfig+0x124>)
 8001a54:	6813      	ldr	r3, [r2, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	42ab      	cmp	r3, r5
 8001a5c:	d865      	bhi.n	8001b2a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5e:	6822      	ldr	r2, [r4, #0]
 8001a60:	4d3c      	ldr	r5, [pc, #240]	; (8001b54 <HAL_RCC_ClockConfig+0x128>)
 8001a62:	f012 0f04 	tst.w	r2, #4
 8001a66:	d16c      	bne.n	8001b42 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	0713      	lsls	r3, r2, #28
 8001a6a:	d506      	bpl.n	8001a7a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a6c:	686b      	ldr	r3, [r5, #4]
 8001a6e:	6922      	ldr	r2, [r4, #16]
 8001a70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a78:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a7a:	f7ff ff9d 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001a7e:	686b      	ldr	r3, [r5, #4]
 8001a80:	4a35      	ldr	r2, [pc, #212]	; (8001b58 <HAL_RCC_ClockConfig+0x12c>)
 8001a82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	40d8      	lsrs	r0, r3
 8001a8a:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <HAL_RCC_ClockConfig+0x130>)
 8001a8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a8e:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <HAL_RCC_ClockConfig+0x134>)
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	f7ff faf7 	bl	8001084 <HAL_InitTick>
  return HAL_OK;
 8001a96:	2000      	movs	r0, #0
 8001a98:	e7ce      	b.n	8001a38 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	6813      	ldr	r3, [r2, #0]
 8001a9c:	f023 0307 	bic.w	r3, r3, #7
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	6813      	ldr	r3, [r2, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	428b      	cmp	r3, r1
 8001aac:	d1c3      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xa>
 8001aae:	e7cb      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1c>
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab6:	bf1e      	ittt	ne
 8001ab8:	685a      	ldrne	r2, [r3, #4]
 8001aba:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001abe:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ac2:	bf42      	ittt	mi
 8001ac4:	685a      	ldrmi	r2, [r3, #4]
 8001ac6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001aca:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	68a0      	ldr	r0, [r4, #8]
 8001ad0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ad4:	4302      	orrs	r2, r0
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	e7b9      	b.n	8001a4e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ada:	6862      	ldr	r2, [r4, #4]
 8001adc:	4e1d      	ldr	r6, [pc, #116]	; (8001b54 <HAL_RCC_ClockConfig+0x128>)
 8001ade:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	d11a      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae8:	d0a5      	beq.n	8001a36 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aea:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af0:	f023 0303 	bic.w	r3, r3, #3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001af8:	f7ff fb06 	bl	8001108 <HAL_GetTick>
 8001afc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	6873      	ldr	r3, [r6, #4]
 8001b00:	6862      	ldr	r2, [r4, #4]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b0a:	d0a2      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff fafc 	bl	8001108 <HAL_GetTick>
 8001b10:	1bc0      	subs	r0, r0, r7
 8001b12:	4540      	cmp	r0, r8
 8001b14:	d9f3      	bls.n	8001afe <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001b16:	2003      	movs	r0, #3
 8001b18:	e78e      	b.n	8001a38 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	2a02      	cmp	r2, #2
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b22:	e7e1      	b.n	8001ae8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	f013 0f02 	tst.w	r3, #2
 8001b28:	e7de      	b.n	8001ae8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f023 0307 	bic.w	r3, r3, #7
 8001b30:	432b      	orrs	r3, r5
 8001b32:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	42ab      	cmp	r3, r5
 8001b3c:	f47f af7b 	bne.w	8001a36 <HAL_RCC_ClockConfig+0xa>
 8001b40:	e78d      	b.n	8001a5e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b42:	686b      	ldr	r3, [r5, #4]
 8001b44:	68e1      	ldr	r1, [r4, #12]
 8001b46:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	606b      	str	r3, [r5, #4]
 8001b4e:	e78b      	b.n	8001a68 <HAL_RCC_ClockConfig+0x3c>
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	0800ed9b 	.word	0x0800ed9b
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b72:	6810      	ldr	r0, [r2, #0]
}
 8001b74:	40d8      	lsrs	r0, r3
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	0800edab 	.word	0x0800edab
 8001b80:	20000000 	.word	0x20000000

08001b84 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b86:	4a05      	ldr	r2, [pc, #20]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b92:	6810      	ldr	r0, [r2, #0]
}
 8001b94:	40d8      	lsrs	r0, r3
 8001b96:	4770      	bx	lr
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	0800edab 	.word	0x0800edab
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ba4:	6803      	ldr	r3, [r0, #0]
{
 8001ba6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001baa:	07d9      	lsls	r1, r3, #31
{
 8001bac:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001bae:	d520      	bpl.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb0:	4c35      	ldr	r4, [pc, #212]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001bb2:	69e3      	ldr	r3, [r4, #28]
 8001bb4:	00da      	lsls	r2, r3, #3
 8001bb6:	d432      	bmi.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001bb8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bba:	69e3      	ldr	r3, [r4, #28]
 8001bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	61e3      	str	r3, [r4, #28]
 8001bc2:	69e3      	ldr	r3, [r4, #28]
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	4e2f      	ldr	r6, [pc, #188]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001bce:	6833      	ldr	r3, [r6, #0]
 8001bd0:	05db      	lsls	r3, r3, #23
 8001bd2:	d526      	bpl.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bd4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bd6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bda:	d136      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bdc:	6a23      	ldr	r3, [r4, #32]
 8001bde:	686a      	ldr	r2, [r5, #4]
 8001be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001be4:	4313      	orrs	r3, r2
 8001be6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001be8:	b11f      	cbz	r7, 8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bea:	69e3      	ldr	r3, [r4, #28]
 8001bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bf2:	6828      	ldr	r0, [r5, #0]
 8001bf4:	0783      	lsls	r3, r0, #30
 8001bf6:	d506      	bpl.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bf8:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001bfa:	68a9      	ldr	r1, [r5, #8]
 8001bfc:	6853      	ldr	r3, [r2, #4]
 8001bfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c06:	f010 0010 	ands.w	r0, r0, #16
 8001c0a:	d01b      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c0c:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c0e:	68e9      	ldr	r1, [r5, #12]
 8001c10:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c12:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6053      	str	r3, [r2, #4]
 8001c1c:	e012      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	2700      	movs	r7, #0
 8001c20:	e7d4      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	6833      	ldr	r3, [r6, #0]
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fa6d 	bl	8001108 <HAL_GetTick>
 8001c2e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	6833      	ldr	r3, [r6, #0]
 8001c32:	05d8      	lsls	r0, r3, #23
 8001c34:	d4ce      	bmi.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff fa67 	bl	8001108 <HAL_GetTick>
 8001c3a:	eba0 0008 	sub.w	r0, r0, r8
 8001c3e:	2864      	cmp	r0, #100	; 0x64
 8001c40:	d9f6      	bls.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001c42:	2003      	movs	r0, #3
}
 8001c44:	b002      	add	sp, #8
 8001c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c4a:	686a      	ldr	r2, [r5, #4]
 8001c4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d0c3      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c54:	2001      	movs	r0, #1
 8001c56:	4a0e      	ldr	r2, [pc, #56]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c58:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c5a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c5c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c62:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001c64:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c66:	07d9      	lsls	r1, r3, #31
 8001c68:	d5b8      	bpl.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fa4d 	bl	8001108 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c72:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c74:	6a23      	ldr	r3, [r4, #32]
 8001c76:	079a      	lsls	r2, r3, #30
 8001c78:	d4b0      	bmi.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c7a:	f7ff fa45 	bl	8001108 <HAL_GetTick>
 8001c7e:	1b80      	subs	r0, r0, r6
 8001c80:	4540      	cmp	r0, r8
 8001c82:	d9f7      	bls.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001c84:	e7dd      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c86:	bf00      	nop
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40007000 	.word	0x40007000
 8001c90:	42420440 	.word	0x42420440

08001c94 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	4604      	mov	r4, r0
 8001c98:	460e      	mov	r6, r1
 8001c9a:	4615      	mov	r5, r2
 8001c9c:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c9e:	6821      	ldr	r1, [r4, #0]
 8001ca0:	688a      	ldr	r2, [r1, #8]
 8001ca2:	ea36 0302 	bics.w	r3, r6, r2
 8001ca6:	d001      	beq.n	8001cac <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e02d      	b.n	8001d08 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8001cac:	1c6b      	adds	r3, r5, #1
 8001cae:	d0f7      	beq.n	8001ca0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001cb0:	f7ff fa2a 	bl	8001108 <HAL_GetTick>
 8001cb4:	1bc0      	subs	r0, r0, r7
 8001cb6:	4285      	cmp	r5, r0
 8001cb8:	d8f1      	bhi.n	8001c9e <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cc2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cc4:	6862      	ldr	r2, [r4, #4]
 8001cc6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001cca:	d10a      	bne.n	8001ce2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8001ccc:	68a2      	ldr	r2, [r4, #8]
 8001cce:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cd2:	d002      	beq.n	8001cda <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cd4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001cd8:	d103      	bne.n	8001ce2 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ce0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ce2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001ce4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001ce8:	d107      	bne.n	8001cfa <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cf8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001d00:	2300      	movs	r3, #0
 8001d02:	2003      	movs	r0, #3
 8001d04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d0a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0a:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	460a      	mov	r2, r1
 8001d10:	2180      	movs	r1, #128	; 0x80
{
 8001d12:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d14:	f7ff ffbe 	bl	8001c94 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001d18:	b120      	cbz	r0, 8001d24 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001d1a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d1e:	f043 0320 	orr.w	r3, r3, #32
 8001d22:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001d24:	bd10      	pop	{r4, pc}

08001d26 <HAL_SPI_Init>:
{
 8001d26:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001d28:	4604      	mov	r4, r0
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d034      	beq.n	8001d98 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d32:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d3a:	b91b      	cbnz	r3, 8001d44 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001d3c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001d40:	f7fe fef6 	bl	8000b30 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d44:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001d46:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d48:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001d4c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d4e:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d54:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d56:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001d5a:	4303      	orrs	r3, r0
 8001d5c:	68e0      	ldr	r0, [r4, #12]
 8001d5e:	4303      	orrs	r3, r0
 8001d60:	6920      	ldr	r0, [r4, #16]
 8001d62:	4303      	orrs	r3, r0
 8001d64:	6960      	ldr	r0, [r4, #20]
 8001d66:	4303      	orrs	r3, r0
 8001d68:	69e0      	ldr	r0, [r4, #28]
 8001d6a:	4303      	orrs	r3, r0
 8001d6c:	6a20      	ldr	r0, [r4, #32]
 8001d6e:	4303      	orrs	r3, r0
 8001d70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d72:	4303      	orrs	r3, r0
 8001d74:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d78:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d7a:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d7c:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d80:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d82:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d84:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d86:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d8c:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001d8e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d90:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001d96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	e7fc      	b.n	8001d96 <HAL_SPI_Init+0x70>

08001d9c <HAL_SPI_Transmit>:
{
 8001d9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001da0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001da2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001da6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001da8:	2b01      	cmp	r3, #1
{
 8001daa:	460d      	mov	r5, r1
 8001dac:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001dae:	f000 809c 	beq.w	8001eea <HAL_SPI_Transmit+0x14e>
 8001db2:	2301      	movs	r3, #1
 8001db4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001db8:	f7ff f9a6 	bl	8001108 <HAL_GetTick>
 8001dbc:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001dbe:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001dc2:	b2c0      	uxtb	r0, r0
 8001dc4:	2801      	cmp	r0, #1
 8001dc6:	f040 808e 	bne.w	8001ee6 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001dca:	2d00      	cmp	r5, #0
 8001dcc:	d05e      	beq.n	8001e8c <HAL_SPI_Transmit+0xf0>
 8001dce:	f1b8 0f00 	cmp.w	r8, #0
 8001dd2:	d05b      	beq.n	8001e8c <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dd4:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dd6:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dd8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ddc:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dde:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001de0:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001de2:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001de6:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001de8:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001dea:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8001dee:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001df4:	bf08      	it	eq
 8001df6:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001df8:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8001dfa:	bf08      	it	eq
 8001dfc:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8001e00:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001e04:	bf08      	it	eq
 8001e06:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e08:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e0a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e0c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001e0e:	bf5e      	ittt	pl
 8001e10:	6803      	ldrpl	r3, [r0, #0]
 8001e12:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001e16:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e18:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001e1c:	6863      	ldr	r3, [r4, #4]
 8001e1e:	d13e      	bne.n	8001e9e <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e20:	b113      	cbz	r3, 8001e28 <HAL_SPI_Transmit+0x8c>
 8001e22:	f1b8 0f01 	cmp.w	r8, #1
 8001e26:	d107      	bne.n	8001e38 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e28:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e2c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e2e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	b9a3      	cbnz	r3, 8001e68 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e3e:	463a      	mov	r2, r7
 8001e40:	4631      	mov	r1, r6
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ff61 	bl	8001d0a <SPI_EndRxTxTransaction>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d149      	bne.n	8001ee0 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e4c:	68a3      	ldr	r3, [r4, #8]
 8001e4e:	b933      	cbnz	r3, 8001e5e <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	9201      	str	r2, [sp, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001e60:	3000      	adds	r0, #0
 8001e62:	bf18      	it	ne
 8001e64:	2001      	movne	r0, #1
error:
 8001e66:	e011      	b.n	8001e8c <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	6893      	ldr	r3, [r2, #8]
 8001e6c:	0798      	lsls	r0, r3, #30
 8001e6e:	d505      	bpl.n	8001e7c <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e72:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001e76:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e78:	6323      	str	r3, [r4, #48]	; 0x30
 8001e7a:	e7d9      	b.n	8001e30 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e7c:	f7ff f944 	bl	8001108 <HAL_GetTick>
 8001e80:	1bc0      	subs	r0, r0, r7
 8001e82:	42b0      	cmp	r0, r6
 8001e84:	d3d8      	bcc.n	8001e38 <HAL_SPI_Transmit+0x9c>
 8001e86:	1c71      	adds	r1, r6, #1
 8001e88:	d0d6      	beq.n	8001e38 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8001e8a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e92:	2300      	movs	r3, #0
 8001e94:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e98:	b002      	add	sp, #8
 8001e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e9e:	b113      	cbz	r3, 8001ea6 <HAL_SPI_Transmit+0x10a>
 8001ea0:	f1b8 0f01 	cmp.w	r8, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ea6:	782b      	ldrb	r3, [r5, #0]
 8001ea8:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001eac:	3301      	adds	r3, #1
 8001eae:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001eb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001eb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0be      	beq.n	8001e3e <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	0792      	lsls	r2, r2, #30
 8001ec6:	d503      	bpl.n	8001ed0 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ec8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001eca:	7812      	ldrb	r2, [r2, #0]
 8001ecc:	731a      	strb	r2, [r3, #12]
 8001ece:	e7ec      	b.n	8001eaa <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed0:	f7ff f91a 	bl	8001108 <HAL_GetTick>
 8001ed4:	1bc0      	subs	r0, r0, r7
 8001ed6:	42b0      	cmp	r0, r6
 8001ed8:	d3ee      	bcc.n	8001eb8 <HAL_SPI_Transmit+0x11c>
 8001eda:	1c73      	adds	r3, r6, #1
 8001edc:	d0ec      	beq.n	8001eb8 <HAL_SPI_Transmit+0x11c>
 8001ede:	e7d4      	b.n	8001e8a <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	6563      	str	r3, [r4, #84]	; 0x54
 8001ee4:	e7b2      	b.n	8001e4c <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	e7d0      	b.n	8001e8c <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8001eea:	2002      	movs	r0, #2
 8001eec:	e7d4      	b.n	8001e98 <HAL_SPI_Transmit+0xfc>

08001eee <HAL_SPI_TransmitReceive>:
{
 8001eee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ef2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001ef4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001ef8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001efa:	2b01      	cmp	r3, #1
{
 8001efc:	460d      	mov	r5, r1
 8001efe:	4691      	mov	r9, r2
 8001f00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001f02:	f000 80e2 	beq.w	80020ca <HAL_SPI_TransmitReceive+0x1dc>
 8001f06:	2301      	movs	r3, #1
 8001f08:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001f0c:	f7ff f8fc 	bl	8001108 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001f10:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001f14:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8001f16:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f18:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8001f1a:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f1c:	d00a      	beq.n	8001f34 <HAL_SPI_TransmitReceive+0x46>
 8001f1e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001f22:	f040 80d0 	bne.w	80020c6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f26:	68a0      	ldr	r0, [r4, #8]
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	f040 80cc 	bne.w	80020c6 <HAL_SPI_TransmitReceive+0x1d8>
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	f040 80c9 	bne.w	80020c6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	f000 80c4 	beq.w	80020c2 <HAL_SPI_TransmitReceive+0x1d4>
 8001f3a:	f1b9 0f00 	cmp.w	r9, #0
 8001f3e:	f000 80c0 	beq.w	80020c2 <HAL_SPI_TransmitReceive+0x1d4>
 8001f42:	2e00      	cmp	r6, #0
 8001f44:	f000 80bd 	beq.w	80020c2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f48:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f4c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f50:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f52:	bf1c      	itt	ne
 8001f54:	2305      	movne	r3, #5
 8001f56:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8001f5e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f62:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001f64:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001f66:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f68:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001f6a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f6c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001f6e:	bf58      	it	pl
 8001f70:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f72:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001f74:	bf58      	it	pl
 8001f76:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001f7a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001f7c:	bf58      	it	pl
 8001f7e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f80:	68e2      	ldr	r2, [r4, #12]
 8001f82:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001f86:	d158      	bne.n	800203a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f88:	b109      	cbz	r1, 8001f8e <HAL_SPI_TransmitReceive+0xa0>
 8001f8a:	2e01      	cmp	r6, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f8e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f92:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f96:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f9e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fa0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b9ab      	cbnz	r3, 8001fd2 <HAL_SPI_TransmitReceive+0xe4>
 8001fa6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	b993      	cbnz	r3, 8001fd2 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fac:	4642      	mov	r2, r8
 8001fae:	4639      	mov	r1, r7
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	f7ff feaa 	bl	8001d0a <SPI_EndRxTxTransaction>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	f040 8081 	bne.w	80020be <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fbc:	68a3      	ldr	r3, [r4, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d132      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	9001      	str	r0, [sp, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	9201      	str	r2, [sp, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	9b01      	ldr	r3, [sp, #4]
 8001fd0:	e02a      	b.n	8002028 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fd2:	6822      	ldr	r2, [r4, #0]
 8001fd4:	6893      	ldr	r3, [r2, #8]
 8001fd6:	0799      	lsls	r1, r3, #30
 8001fd8:	d50d      	bpl.n	8001ff6 <HAL_SPI_TransmitReceive+0x108>
 8001fda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	b153      	cbz	r3, 8001ff6 <HAL_SPI_TransmitReceive+0x108>
 8001fe0:	b14d      	cbz	r5, 8001ff6 <HAL_SPI_TransmitReceive+0x108>
        txallowed = 0U;
 8001fe2:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fe6:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001fea:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fec:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001fee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ff6:	6893      	ldr	r3, [r2, #8]
 8001ff8:	07db      	lsls	r3, r3, #31
 8001ffa:	d50c      	bpl.n	8002016 <HAL_SPI_TransmitReceive+0x128>
 8001ffc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b14b      	cbz	r3, 8002016 <HAL_SPI_TransmitReceive+0x128>
        txallowed = 1U;
 8002002:	2501      	movs	r5, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002004:	68d2      	ldr	r2, [r2, #12]
 8002006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002008:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800200c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800200e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002010:	3b01      	subs	r3, #1
 8002012:	b29b      	uxth	r3, r3
 8002014:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002016:	f7ff f877 	bl	8001108 <HAL_GetTick>
 800201a:	eba0 0008 	sub.w	r0, r0, r8
 800201e:	4287      	cmp	r7, r0
 8002020:	d8be      	bhi.n	8001fa0 <HAL_SPI_TransmitReceive+0xb2>
 8002022:	1c7e      	adds	r6, r7, #1
 8002024:	d0bc      	beq.n	8001fa0 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8002026:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002028:	2301      	movs	r3, #1
 800202a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800202e:	2300      	movs	r3, #0
 8002030:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002034:	b003      	add	sp, #12
 8002036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800203a:	b109      	cbz	r1, 8002040 <HAL_SPI_TransmitReceive+0x152>
 800203c:	2e01      	cmp	r6, #1
 800203e:	d108      	bne.n	8002052 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002040:	782a      	ldrb	r2, [r5, #0]
 8002042:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002044:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002046:	3301      	adds	r3, #1
 8002048:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800204a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800204c:	3b01      	subs	r3, #1
 800204e:	b29b      	uxth	r3, r3
 8002050:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002052:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002054:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002056:	b29b      	uxth	r3, r3
 8002058:	b91b      	cbnz	r3, 8002062 <HAL_SPI_TransmitReceive+0x174>
 800205a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0a4      	beq.n	8001fac <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002062:	6822      	ldr	r2, [r4, #0]
 8002064:	6893      	ldr	r3, [r2, #8]
 8002066:	0798      	lsls	r0, r3, #30
 8002068:	d50e      	bpl.n	8002088 <HAL_SPI_TransmitReceive+0x19a>
 800206a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800206c:	b29b      	uxth	r3, r3
 800206e:	b15b      	cbz	r3, 8002088 <HAL_SPI_TransmitReceive+0x19a>
 8002070:	b155      	cbz	r5, 8002088 <HAL_SPI_TransmitReceive+0x19a>
        txallowed = 0U;
 8002072:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002074:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800207a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800207c:	3301      	adds	r3, #1
 800207e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002080:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002082:	3b01      	subs	r3, #1
 8002084:	b29b      	uxth	r3, r3
 8002086:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002088:	6822      	ldr	r2, [r4, #0]
 800208a:	6893      	ldr	r3, [r2, #8]
 800208c:	07d9      	lsls	r1, r3, #31
 800208e:	d50d      	bpl.n	80020ac <HAL_SPI_TransmitReceive+0x1be>
 8002090:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002092:	b29b      	uxth	r3, r3
 8002094:	b153      	cbz	r3, 80020ac <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8002096:	2501      	movs	r5, #1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002098:	68d2      	ldr	r2, [r2, #12]
 800209a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800209c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800209e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020a0:	3301      	adds	r3, #1
 80020a2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80020a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020ac:	f7ff f82c 	bl	8001108 <HAL_GetTick>
 80020b0:	eba0 0008 	sub.w	r0, r0, r8
 80020b4:	4287      	cmp	r7, r0
 80020b6:	d8cd      	bhi.n	8002054 <HAL_SPI_TransmitReceive+0x166>
 80020b8:	1c7b      	adds	r3, r7, #1
 80020ba:	d0cb      	beq.n	8002054 <HAL_SPI_TransmitReceive+0x166>
 80020bc:	e7b3      	b.n	8002026 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020be:	2320      	movs	r3, #32
 80020c0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80020c2:	2001      	movs	r0, #1
 80020c4:	e7b0      	b.n	8002028 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80020c6:	2002      	movs	r0, #2
 80020c8:	e7ae      	b.n	8002028 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80020ca:	2002      	movs	r0, #2
 80020cc:	e7b2      	b.n	8002034 <HAL_SPI_TransmitReceive+0x146>

080020ce <HAL_SPI_GetState>:
  return hspi->State;
 80020ce:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80020d2:	4770      	bx	lr

080020d4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d4:	6a03      	ldr	r3, [r0, #32]
{
 80020d6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020e2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020e4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020e6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80020ea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020ec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80020ee:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80020f2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020f4:	4d0a      	ldr	r5, [pc, #40]	; (8002120 <TIM_OC1_SetConfig+0x4c>)
 80020f6:	42a8      	cmp	r0, r5
 80020f8:	d10b      	bne.n	8002112 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80020fc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002100:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002102:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002106:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800210a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800210c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002110:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002112:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002114:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002116:	684a      	ldr	r2, [r1, #4]
 8002118:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211a:	6203      	str	r3, [r0, #32]
}
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	bf00      	nop
 8002120:	40012c00 	.word	0x40012c00

08002124 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002124:	6a03      	ldr	r3, [r0, #32]
{
 8002126:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800212c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800212e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002130:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002132:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002134:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002136:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800213a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800213c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800213e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002142:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002146:	4d0b      	ldr	r5, [pc, #44]	; (8002174 <TIM_OC3_SetConfig+0x50>)
 8002148:	42a8      	cmp	r0, r5
 800214a:	d10d      	bne.n	8002168 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800214c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800214e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002152:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002156:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800215a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800215e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002164:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002168:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800216a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800216c:	684a      	ldr	r2, [r1, #4]
 800216e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002170:	6203      	str	r3, [r0, #32]
}
 8002172:	bd70      	pop	{r4, r5, r6, pc}
 8002174:	40012c00 	.word	0x40012c00

08002178 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002178:	6a03      	ldr	r3, [r0, #32]
{
 800217a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800217c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002180:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002182:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002184:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002186:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002188:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800218a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800218e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002192:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002194:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002198:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800219c:	4d06      	ldr	r5, [pc, #24]	; (80021b8 <TIM_OC4_SetConfig+0x40>)
 800219e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021a0:	bf02      	ittt	eq
 80021a2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021a4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021a8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021ae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80021b0:	684a      	ldr	r2, [r1, #4]
 80021b2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b4:	6203      	str	r3, [r0, #32]
}
 80021b6:	bd30      	pop	{r4, r5, pc}
 80021b8:	40012c00 	.word	0x40012c00

080021bc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021bc:	6803      	ldr	r3, [r0, #0]
}
 80021be:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ce:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80021d0:	bf1e      	ittt	ne
 80021d2:	681a      	ldrne	r2, [r3, #0]
 80021d4:	f042 0201 	orrne.w	r2, r2, #1
 80021d8:	601a      	strne	r2, [r3, #0]
}
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80021dc:	6803      	ldr	r3, [r0, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 80021e6:	f241 1211 	movw	r2, #4369	; 0x1111
 80021ea:	6a19      	ldr	r1, [r3, #32]
 80021ec:	4211      	tst	r1, r2
 80021ee:	d108      	bne.n	8002202 <HAL_TIM_Base_Stop_IT+0x26>
 80021f0:	f240 4244 	movw	r2, #1092	; 0x444
 80021f4:	6a19      	ldr	r1, [r3, #32]
 80021f6:	4211      	tst	r1, r2
 80021f8:	bf02      	ittt	eq
 80021fa:	681a      	ldreq	r2, [r3, #0]
 80021fc:	f022 0201 	biceq.w	r2, r2, #1
 8002200:	601a      	streq	r2, [r3, #0]
}
 8002202:	2000      	movs	r0, #0
 8002204:	4770      	bx	lr

08002206 <HAL_TIM_PWM_MspInit>:
 8002206:	4770      	bx	lr

08002208 <HAL_TIM_OC_DelayElapsedCallback>:
 8002208:	4770      	bx	lr

0800220a <HAL_TIM_IC_CaptureCallback>:
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_PWM_PulseFinishedCallback>:
 800220c:	4770      	bx	lr

0800220e <HAL_TIM_TriggerCallback>:
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002210:	6803      	ldr	r3, [r0, #0]
{
 8002212:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002214:	691a      	ldr	r2, [r3, #16]
{
 8002216:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002218:	0791      	lsls	r1, r2, #30
 800221a:	d50e      	bpl.n	800223a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	0792      	lsls	r2, r2, #30
 8002220:	d50b      	bpl.n	800223a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002222:	f06f 0202 	mvn.w	r2, #2
 8002226:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002228:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800222a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800222c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800222e:	079b      	lsls	r3, r3, #30
 8002230:	d077      	beq.n	8002322 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002232:	f7ff ffea 	bl	800220a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002236:	2300      	movs	r3, #0
 8002238:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	0750      	lsls	r0, r2, #29
 8002240:	d510      	bpl.n	8002264 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	0751      	lsls	r1, r2, #29
 8002246:	d50d      	bpl.n	8002264 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002248:	f06f 0204 	mvn.w	r2, #4
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002250:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002252:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002254:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002258:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225a:	d068      	beq.n	800232e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800225c:	f7ff ffd5 	bl	800220a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002260:	2300      	movs	r3, #0
 8002262:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002264:	6823      	ldr	r3, [r4, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	0712      	lsls	r2, r2, #28
 800226a:	d50f      	bpl.n	800228c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	0710      	lsls	r0, r2, #28
 8002270:	d50c      	bpl.n	800228c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002272:	f06f 0208 	mvn.w	r2, #8
 8002276:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002278:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800227c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002280:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002282:	d05a      	beq.n	800233a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002284:	f7ff ffc1 	bl	800220a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002288:	2300      	movs	r3, #0
 800228a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	06d2      	lsls	r2, r2, #27
 8002292:	d510      	bpl.n	80022b6 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	06d0      	lsls	r0, r2, #27
 8002298:	d50d      	bpl.n	80022b6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800229a:	f06f 0210 	mvn.w	r2, #16
 800229e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ac:	d04b      	beq.n	8002346 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	f7ff ffac 	bl	800220a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	2300      	movs	r3, #0
 80022b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	07d1      	lsls	r1, r2, #31
 80022bc:	d508      	bpl.n	80022d0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	07d2      	lsls	r2, r2, #31
 80022c2:	d505      	bpl.n	80022d0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022c4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022cc:	f7fe fe2c 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	0610      	lsls	r0, r2, #24
 80022d6:	d508      	bpl.n	80022ea <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022d8:	68da      	ldr	r2, [r3, #12]
 80022da:	0611      	lsls	r1, r2, #24
 80022dc:	d505      	bpl.n	80022ea <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022de:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80022e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80022e6:	f000 f9ec 	bl	80026c2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	0652      	lsls	r2, r2, #25
 80022f0:	d508      	bpl.n	8002304 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	0650      	lsls	r0, r2, #25
 80022f6:	d505      	bpl.n	8002304 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80022fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022fe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002300:	f7ff ff85 	bl	800220e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	0691      	lsls	r1, r2, #26
 800230a:	d522      	bpl.n	8002352 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	0692      	lsls	r2, r2, #26
 8002310:	d51f      	bpl.n	8002352 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002312:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002316:	4620      	mov	r0, r4
}
 8002318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800231e:	f000 b9cf 	b.w	80026c0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	f7ff ff71 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff ff70 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 800232c:	e783      	b.n	8002236 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	f7ff ff6b 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002332:	4620      	mov	r0, r4
 8002334:	f7ff ff6a 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 8002338:	e792      	b.n	8002260 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	f7ff ff65 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff ff64 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 8002344:	e7a0      	b.n	8002288 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002346:	f7ff ff5f 	bl	8002208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800234a:	4620      	mov	r0, r4
 800234c:	f7ff ff5e 	bl	800220c <HAL_TIM_PWM_PulseFinishedCallback>
 8002350:	e7af      	b.n	80022b2 <HAL_TIM_IRQHandler+0xa2>
}
 8002352:	bd10      	pop	{r4, pc}

08002354 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002356:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002358:	4290      	cmp	r0, r2
 800235a:	d00a      	beq.n	8002372 <TIM_Base_SetConfig+0x1e>
 800235c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002360:	d007      	beq.n	8002372 <TIM_Base_SetConfig+0x1e>
 8002362:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002366:	4290      	cmp	r0, r2
 8002368:	d003      	beq.n	8002372 <TIM_Base_SetConfig+0x1e>
 800236a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800236e:	4290      	cmp	r0, r2
 8002370:	d115      	bne.n	800239e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8002372:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002378:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <TIM_Base_SetConfig+0x6c>)
 800237c:	4290      	cmp	r0, r2
 800237e:	d00a      	beq.n	8002396 <TIM_Base_SetConfig+0x42>
 8002380:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002384:	d007      	beq.n	8002396 <TIM_Base_SetConfig+0x42>
 8002386:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800238a:	4290      	cmp	r0, r2
 800238c:	d003      	beq.n	8002396 <TIM_Base_SetConfig+0x42>
 800238e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002392:	4290      	cmp	r0, r2
 8002394:	d103      	bne.n	800239e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002396:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800239c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239e:	694a      	ldr	r2, [r1, #20]
 80023a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023a4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80023a6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a8:	688b      	ldr	r3, [r1, #8]
 80023aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80023ac:	680b      	ldr	r3, [r1, #0]
 80023ae:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <TIM_Base_SetConfig+0x6c>)
 80023b2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80023b4:	bf04      	itt	eq
 80023b6:	690b      	ldreq	r3, [r1, #16]
 80023b8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80023ba:	2301      	movs	r3, #1
 80023bc:	6143      	str	r3, [r0, #20]
}
 80023be:	4770      	bx	lr
 80023c0:	40012c00 	.word	0x40012c00

080023c4 <HAL_TIM_Base_Init>:
{
 80023c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80023c6:	4604      	mov	r4, r0
 80023c8:	b1a0      	cbz	r0, 80023f4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80023ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023d2:	b91b      	cbnz	r3, 80023dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80023d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80023d8:	f7fe fc62 	bl	8000ca0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80023dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023de:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80023e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023e4:	1d21      	adds	r1, r4, #4
 80023e6:	f7ff ffb5 	bl	8002354 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	2301      	movs	r3, #1
  return HAL_OK;
 80023ec:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80023f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023f4:	2001      	movs	r0, #1
 80023f6:	e7fc      	b.n	80023f2 <HAL_TIM_Base_Init+0x2e>

080023f8 <HAL_TIM_PWM_Init>:
{
 80023f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80023fa:	4604      	mov	r4, r0
 80023fc:	b1a0      	cbz	r0, 8002428 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80023fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002402:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002406:	b91b      	cbnz	r3, 8002410 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002408:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800240c:	f7ff fefb 	bl	8002206 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002412:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002418:	1d21      	adds	r1, r4, #4
 800241a:	f7ff ff9b 	bl	8002354 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800241e:	2301      	movs	r3, #1
  return HAL_OK;
 8002420:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002422:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002426:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002428:	2001      	movs	r0, #1
 800242a:	e7fc      	b.n	8002426 <HAL_TIM_PWM_Init+0x2e>

0800242c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800242c:	6a03      	ldr	r3, [r0, #32]
{
 800242e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002430:	f023 0310 	bic.w	r3, r3, #16
 8002434:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002436:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002438:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800243a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800243c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800243e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002442:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002446:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002448:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800244c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002450:	4d0b      	ldr	r5, [pc, #44]	; (8002480 <TIM_OC2_SetConfig+0x54>)
 8002452:	42a8      	cmp	r0, r5
 8002454:	d10d      	bne.n	8002472 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002456:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800245c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002460:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002464:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002468:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800246a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800246e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002472:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002474:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002476:	684a      	ldr	r2, [r1, #4]
 8002478:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800247a:	6203      	str	r3, [r0, #32]
}
 800247c:	bd70      	pop	{r4, r5, r6, pc}
 800247e:	bf00      	nop
 8002480:	40012c00 	.word	0x40012c00

08002484 <HAL_TIM_PWM_ConfigChannel>:
{
 8002484:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002486:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800248a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800248c:	2b01      	cmp	r3, #1
 800248e:	f04f 0002 	mov.w	r0, #2
 8002492:	d025      	beq.n	80024e0 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002494:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002496:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800249a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 800249e:	2a0c      	cmp	r2, #12
 80024a0:	d818      	bhi.n	80024d4 <HAL_TIM_PWM_ConfigChannel+0x50>
 80024a2:	e8df f002 	tbb	[pc, r2]
 80024a6:	1707      	.short	0x1707
 80024a8:	171e1717 	.word	0x171e1717
 80024ac:	172f1717 	.word	0x172f1717
 80024b0:	1717      	.short	0x1717
 80024b2:	40          	.byte	0x40
 80024b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024b4:	6820      	ldr	r0, [r4, #0]
 80024b6:	f7ff fe0d 	bl	80020d4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024ba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024bc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	f042 0208 	orr.w	r2, r2, #8
 80024c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	f022 0204 	bic.w	r2, r2, #4
 80024cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024d2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80024d6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80024dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80024e0:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	f7ff ffa2 	bl	800242c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024e8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024ea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024fc:	699a      	ldr	r2, [r3, #24]
 80024fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002502:	e7e6      	b.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002504:	6820      	ldr	r0, [r4, #0]
 8002506:	f7ff fe0d 	bl	8002124 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800250a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800250c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	f042 0208 	orr.w	r2, r2, #8
 8002514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	f022 0204 	bic.w	r2, r2, #4
 800251c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002522:	61da      	str	r2, [r3, #28]
      break;
 8002524:	e7d6      	b.n	80024d4 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	f7ff fe26 	bl	8002178 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800252c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800252e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002530:	69da      	ldr	r2, [r3, #28]
 8002532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002536:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002546:	e7ec      	b.n	8002522 <HAL_TIM_PWM_ConfigChannel+0x9e>

08002548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002548:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800254a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800254c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800254e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002552:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002556:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002558:	6083      	str	r3, [r0, #8]
}
 800255a:	bd10      	pop	{r4, pc}

0800255c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800255c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002560:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002562:	2b01      	cmp	r3, #1
{
 8002564:	4604      	mov	r4, r0
 8002566:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800256a:	d019      	beq.n	80025a0 <HAL_TIM_ConfigClockSource+0x44>
 800256c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800256e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002572:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002574:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002578:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800257a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002582:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002584:	680b      	ldr	r3, [r1, #0]
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d065      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0xfa>
 800258a:	d815      	bhi.n	80025b8 <HAL_TIM_ConfigClockSource+0x5c>
 800258c:	2b10      	cmp	r3, #16
 800258e:	d00c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x4e>
 8002590:	d807      	bhi.n	80025a2 <HAL_TIM_ConfigClockSource+0x46>
 8002592:	b153      	cbz	r3, 80025aa <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002594:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002596:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002598:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800259c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d001      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x4e>
 80025a6:	2b30      	cmp	r3, #48	; 0x30
 80025a8:	d1f4      	bne.n	8002594 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80025aa:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ac:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025b4:	4313      	orrs	r3, r2
 80025b6:	e01a      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80025b8:	2b60      	cmp	r3, #96	; 0x60
 80025ba:	d034      	beq.n	8002626 <HAL_TIM_ConfigClockSource+0xca>
 80025bc:	d819      	bhi.n	80025f2 <HAL_TIM_ConfigClockSource+0x96>
 80025be:	2b50      	cmp	r3, #80	; 0x50
 80025c0:	d1e8      	bne.n	8002594 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	684a      	ldr	r2, [r1, #4]
 80025c4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80025c6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ca:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ce:	f025 0501 	bic.w	r5, r5, #1
 80025d2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80025d6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025dc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80025e0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80025e2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80025e4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ea:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80025ee:	6083      	str	r3, [r0, #8]
 80025f0:	e7d0      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80025f2:	2b70      	cmp	r3, #112	; 0x70
 80025f4:	d00c      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0xb4>
 80025f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fa:	d1cb      	bne.n	8002594 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80025fc:	68cb      	ldr	r3, [r1, #12]
 80025fe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002602:	f7ff ffa1 	bl	8002548 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002606:	6822      	ldr	r2, [r4, #0]
 8002608:	6893      	ldr	r3, [r2, #8]
 800260a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260e:	e008      	b.n	8002622 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002610:	68cb      	ldr	r3, [r1, #12]
 8002612:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002616:	f7ff ff97 	bl	8002548 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800261e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002622:	6093      	str	r3, [r2, #8]
      break;
 8002624:	e7b6      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002626:	684d      	ldr	r5, [r1, #4]
 8002628:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800262a:	6a01      	ldr	r1, [r0, #32]
 800262c:	f021 0110 	bic.w	r1, r1, #16
 8002630:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002632:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002634:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002636:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800263a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800263e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002642:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002646:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002648:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800264a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800264c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002650:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002654:	e7cb      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002656:	684a      	ldr	r2, [r1, #4]
 8002658:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800265a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800265e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002662:	f025 0501 	bic.w	r5, r5, #1
 8002666:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002668:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800266a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800266c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002670:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002674:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002676:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002678:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800267e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002682:	e7b4      	b.n	80025ee <HAL_TIM_ConfigClockSource+0x92>

08002684 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002684:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002688:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800268a:	2b01      	cmp	r3, #1
 800268c:	f04f 0302 	mov.w	r3, #2
 8002690:	d014      	beq.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002692:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002698:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800269a:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800269c:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800269e:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80026a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 80026a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a8:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026aa:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ac:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026ae:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b6:	2300      	movs	r3, #0
 80026b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80026bc:	4618      	mov	r0, r3

  return HAL_OK;
}
 80026be:	bd30      	pop	{r4, r5, pc}

080026c0 <HAL_TIMEx_CommutCallback>:
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIMEx_BreakCallback>:
 80026c2:	4770      	bx	lr

080026c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c8:	6803      	ldr	r3, [r0, #0]
 80026ca:	68c1      	ldr	r1, [r0, #12]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	2419      	movs	r4, #25
 80026d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80026d4:	430a      	orrs	r2, r1
 80026d6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026d8:	6882      	ldr	r2, [r0, #8]
 80026da:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80026dc:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026de:	4302      	orrs	r2, r0
 80026e0:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 80026e2:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80026e6:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026ea:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	69a9      	ldr	r1, [r5, #24]
 80026f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026f8:	430a      	orrs	r2, r1
 80026fa:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <UART_SetConfig+0x70>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d114      	bne.n	800272c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002702:	f7ff fa3f 	bl	8001b84 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002706:	4360      	muls	r0, r4
 8002708:	686c      	ldr	r4, [r5, #4]
 800270a:	2264      	movs	r2, #100	; 0x64
 800270c:	00a4      	lsls	r4, r4, #2
 800270e:	fbb0 f0f4 	udiv	r0, r0, r4
 8002712:	fbb0 f1f2 	udiv	r1, r0, r2
 8002716:	fb02 0311 	mls	r3, r2, r1, r0
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	3332      	adds	r3, #50	; 0x32
 800271e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002722:	682c      	ldr	r4, [r5, #0]
 8002724:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002728:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800272a:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800272c:	f7ff fa1a 	bl	8001b64 <HAL_RCC_GetPCLK1Freq>
 8002730:	e7e9      	b.n	8002706 <UART_SetConfig+0x42>
 8002732:	bf00      	nop
 8002734:	40013800 	.word	0x40013800

08002738 <HAL_UART_Init>:
{
 8002738:	b510      	push	{r4, lr}
  if (huart == NULL)
 800273a:	4604      	mov	r4, r0
 800273c:	b340      	cbz	r0, 8002790 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800273e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002742:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002746:	b91b      	cbnz	r3, 8002750 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002748:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800274c:	f7fe fb1e 	bl	8000d8c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002752:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002754:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002758:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800275a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800275c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002760:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002762:	f7ff ffaf 	bl	80026c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002766:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002778:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002780:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002782:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002784:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002786:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800278a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800278e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002790:	2001      	movs	r0, #1
 8002792:	e7fc      	b.n	800278e <HAL_UART_Init+0x56>

08002794 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002794:	b084      	sub	sp, #16
 8002796:	a801      	add	r0, sp, #4
 8002798:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800279c:	b004      	add	sp, #16
 800279e:	2000      	movs	r0, #0
 80027a0:	4770      	bx	lr

080027a2 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80027a2:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80027a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027aa:	045b      	lsls	r3, r3, #17
 80027ac:	0c5b      	lsrs	r3, r3, #17
 80027ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80027b2:	2000      	movs	r0, #0
 80027b4:	4770      	bx	lr

080027b6 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80027b6:	2000      	movs	r0, #0
 80027b8:	4770      	bx	lr

080027ba <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027ba:	b084      	sub	sp, #16
 80027bc:	b510      	push	{r4, lr}
 80027be:	ac03      	add	r4, sp, #12
 80027c0:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80027c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 80027c8:	2301      	movs	r3, #1
 80027ca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80027d4:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80027d8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80027dc:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
}
 80027e0:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80027e2:	f442 423f 	orr.w	r2, r2, #48896	; 0xbf00
 80027e6:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	4770      	bx	lr

080027ee <USB_DevDisconnect>:
 80027ee:	2000      	movs	r0, #0
 80027f0:	4770      	bx	lr
	...

080027f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80027f4:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80027f6:	4903      	ldr	r1, [pc, #12]	; (8002804 <MX_FATFS_Init+0x10>)
 80027f8:	4803      	ldr	r0, [pc, #12]	; (8002808 <MX_FATFS_Init+0x14>)
 80027fa:	f001 ffa3 	bl	8004744 <FATFS_LinkDriver>
 80027fe:	4b03      	ldr	r3, [pc, #12]	; (800280c <MX_FATFS_Init+0x18>)
 8002800:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002802:	bd08      	pop	{r3, pc}
 8002804:	20001858 	.word	0x20001858
 8002808:	20000010 	.word	0x20000010
 800280c:	2000185c 	.word	0x2000185c

08002810 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8002810:	2000      	movs	r0, #0
 8002812:	4770      	bx	lr

08002814 <SPI_TxByte>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
}

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8002814:	b507      	push	{r0, r1, r2, lr}
 8002816:	f88d 0007 	strb.w	r0, [sp, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800281a:	4808      	ldr	r0, [pc, #32]	; (800283c <SPI_TxByte+0x28>)
 800281c:	f7ff fc57 	bl	80020ce <HAL_SPI_GetState>
 8002820:	2801      	cmp	r0, #1
 8002822:	4602      	mov	r2, r0
 8002824:	d1f9      	bne.n	800281a <SPI_TxByte+0x6>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800282a:	f10d 0107 	add.w	r1, sp, #7
 800282e:	4803      	ldr	r0, [pc, #12]	; (800283c <SPI_TxByte+0x28>)
 8002830:	f7ff fab4 	bl	8001d9c <HAL_SPI_Transmit>
}
 8002834:	b003      	add	sp, #12
 8002836:	f85d fb04 	ldr.w	pc, [sp], #4
 800283a:	bf00      	nop
 800283c:	20001410 	.word	0x20001410

08002840 <SELECT>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	4801      	ldr	r0, [pc, #4]	; (800284c <SELECT+0xc>)
 8002846:	f7fe be8b 	b.w	8001560 <HAL_GPIO_WritePin>
 800284a:	bf00      	nop
 800284c:	40010c00 	.word	0x40010c00

08002850 <DESELECT>:
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002850:	2201      	movs	r2, #1
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	4801      	ldr	r0, [pc, #4]	; (800285c <DESELECT+0xc>)
 8002856:	f7fe be83 	b.w	8001560 <HAL_GPIO_WritePin>
 800285a:	bf00      	nop
 800285c:	40010c00 	.word	0x40010c00

08002860 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8002860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t dummy, data;
  dummy = 0xFF;
 8002862:	23ff      	movs	r3, #255	; 0xff
 8002864:	f88d 300e 	strb.w	r3, [sp, #14]
  data = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	f88d 300f 	strb.w	r3, [sp, #15]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 800286e:	480a      	ldr	r0, [pc, #40]	; (8002898 <SPI_RxByte+0x38>)
 8002870:	f7ff fc2d 	bl	80020ce <HAL_SPI_GetState>
 8002874:	2801      	cmp	r0, #1
 8002876:	4603      	mov	r3, r0
 8002878:	d1f9      	bne.n	800286e <SPI_RxByte+0xe>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 800287a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800287e:	f10d 010e 	add.w	r1, sp, #14
 8002882:	9200      	str	r2, [sp, #0]
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <SPI_RxByte+0x38>)
 8002886:	f10d 020f 	add.w	r2, sp, #15
 800288a:	f7ff fb30 	bl	8001eee <HAL_SPI_TransmitReceive>
  
  return data;
}
 800288e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8002892:	b005      	add	sp, #20
 8002894:	f85d fb04 	ldr.w	pc, [sp], #4
 8002898:	20001410 	.word	0x20001410

0800289c <SD_PowerOn>:
  return res;
}

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 800289c:	b513      	push	{r0, r1, r4, lr}
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800289e:	f7ff ffd7 	bl	8002850 <DESELECT>
 80028a2:	240a      	movs	r4, #10
  
  for(int i = 0; i < 10; i++)
  {
    SPI_TxByte(0xFF);
 80028a4:	20ff      	movs	r0, #255	; 0xff
 80028a6:	f7ff ffb5 	bl	8002814 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80028aa:	3c01      	subs	r4, #1
 80028ac:	d1fa      	bne.n	80028a4 <SD_PowerOn+0x8>
  }
  
  /* SPI Chips Select */
  SELECT();
 80028ae:	f7ff ffc7 	bl	8002840 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	9300      	str	r3, [sp, #0]
  cmd_arg[1] = 0;
  cmd_arg[2] = 0;
  cmd_arg[3] = 0;
 80028b6:	f44f 4315 	mov.w	r3, #38144	; 0x9500
 80028ba:	f8ad 3004 	strh.w	r3, [sp, #4]
  cmd_arg[5] = 0x95;
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
  {
    SPI_TxByte(cmd_arg[i]);
 80028be:	f81d 0004 	ldrb.w	r0, [sp, r4]
  for (int i = 0; i < 6; i++)
 80028c2:	3401      	adds	r4, #1
    SPI_TxByte(cmd_arg[i]);
 80028c4:	f7ff ffa6 	bl	8002814 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80028c8:	2c06      	cmp	r4, #6
 80028ca:	d1f8      	bne.n	80028be <SD_PowerOn+0x22>
 80028cc:	f44f 5400 	mov.w	r4, #8192	; 0x2000
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80028d0:	f7ff ffc6 	bl	8002860 <SPI_RxByte>
 80028d4:	2801      	cmp	r0, #1
 80028d6:	d001      	beq.n	80028dc <SD_PowerOn+0x40>
 80028d8:	3c01      	subs	r4, #1
 80028da:	d1f9      	bne.n	80028d0 <SD_PowerOn+0x34>
  {
    Count--;
  }
  
  DESELECT();
 80028dc:	f7ff ffb8 	bl	8002850 <DESELECT>
  SPI_TxByte(0XFF);
 80028e0:	20ff      	movs	r0, #255	; 0xff
 80028e2:	f7ff ff97 	bl	8002814 <SPI_TxByte>
  
  PowerFlag = 1;
 80028e6:	2201      	movs	r2, #1
 80028e8:	4b01      	ldr	r3, [pc, #4]	; (80028f0 <SD_PowerOn+0x54>)
 80028ea:	701a      	strb	r2, [r3, #0]
}
 80028ec:	b002      	add	sp, #8
 80028ee:	bd10      	pop	{r4, pc}
 80028f0:	200000b1 	.word	0x200000b1

080028f4 <SD_ReadyWait>:
  Timer2 = 50;
 80028f4:	2332      	movs	r3, #50	; 0x32
{
 80028f6:	b510      	push	{r4, lr}
  Timer2 = 50;
 80028f8:	4c05      	ldr	r4, [pc, #20]	; (8002910 <SD_ReadyWait+0x1c>)
 80028fa:	7023      	strb	r3, [r4, #0]
  SPI_RxByte();
 80028fc:	f7ff ffb0 	bl	8002860 <SPI_RxByte>
    res = SPI_RxByte();
 8002900:	f7ff ffae 	bl	8002860 <SPI_RxByte>
  } while ((res != 0xFF) && Timer2);
 8002904:	28ff      	cmp	r0, #255	; 0xff
 8002906:	d002      	beq.n	800290e <SD_ReadyWait+0x1a>
 8002908:	7823      	ldrb	r3, [r4, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f8      	bne.n	8002900 <SD_ReadyWait+0xc>
}
 800290e:	bd10      	pop	{r4, pc}
 8002910:	20001850 	.word	0x20001850

08002914 <SD_TxDataBlock>:
}

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002914:	b570      	push	{r4, r5, r6, lr}
 8002916:	4605      	mov	r5, r0
 8002918:	460e      	mov	r6, r1
  uint8_t resp, wc;
  uint8_t i = 0;
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 800291a:	f7ff ffeb 	bl	80028f4 <SD_ReadyWait>
 800291e:	28ff      	cmp	r0, #255	; 0xff
 8002920:	d12c      	bne.n	800297c <SD_TxDataBlock+0x68>
    return FALSE;
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002922:	4630      	mov	r0, r6
 8002924:	f7ff ff76 	bl	8002814 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8002928:	2efd      	cmp	r6, #253	; 0xfd
 800292a:	d021      	beq.n	8002970 <SD_TxDataBlock+0x5c>
 800292c:	1cac      	adds	r4, r5, #2
 800292e:	f205 2502 	addw	r5, r5, #514	; 0x202
    wc = 0;
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002932:	f814 0c02 	ldrb.w	r0, [r4, #-2]
 8002936:	f7ff ff6d 	bl	8002814 <SPI_TxByte>
 800293a:	3402      	adds	r4, #2
      SPI_TxByte(*buff++);
 800293c:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 8002940:	f7ff ff68 	bl	8002814 <SPI_TxByte>
    } while (--wc);
 8002944:	42ac      	cmp	r4, r5
 8002946:	d1f4      	bne.n	8002932 <SD_TxDataBlock+0x1e>
    
    SPI_RxByte();       /* CRC 무시 */
 8002948:	f7ff ff8a 	bl	8002860 <SPI_RxByte>
    SPI_RxByte();
 800294c:	2541      	movs	r5, #65	; 0x41
 800294e:	f7ff ff87 	bl	8002860 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
    {			
      resp = SPI_RxByte();
 8002952:	f7ff ff85 	bl	8002860 <SPI_RxByte>
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8002956:	f000 031f 	and.w	r3, r0, #31
 800295a:	2b05      	cmp	r3, #5
      resp = SPI_RxByte();
 800295c:	4604      	mov	r4, r0
      if ((resp & 0x1F) == 0x05) 
 800295e:	d003      	beq.n	8002968 <SD_TxDataBlock+0x54>
 8002960:	3d01      	subs	r5, #1
    while (i <= 64) 
 8002962:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002966:	d1f4      	bne.n	8002952 <SD_TxDataBlock+0x3e>
      
      i++;
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8002968:	f7ff ff7a 	bl	8002860 <SPI_RxByte>
 800296c:	2800      	cmp	r0, #0
 800296e:	d0fb      	beq.n	8002968 <SD_TxDataBlock+0x54>
  }
  
  if ((resp & 0x1F) == 0x05)
 8002970:	f004 001f 	and.w	r0, r4, #31
    return FALSE;
 8002974:	1f43      	subs	r3, r0, #5
 8002976:	4258      	negs	r0, r3
 8002978:	4158      	adcs	r0, r3
    return TRUE;
  else
    return FALSE;
}
 800297a:	bd70      	pop	{r4, r5, r6, pc}
    return FALSE;
 800297c:	2000      	movs	r0, #0
 800297e:	e7fc      	b.n	800297a <SD_TxDataBlock+0x66>

08002980 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002980:	b538      	push	{r3, r4, r5, lr}
 8002982:	4604      	mov	r4, r0
 8002984:	460d      	mov	r5, r1
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002986:	f7ff ffb5 	bl	80028f4 <SD_ReadyWait>
 800298a:	28ff      	cmp	r0, #255	; 0xff
 800298c:	d128      	bne.n	80029e0 <SD_SendCmd+0x60>
    return 0xFF;
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800298e:	4620      	mov	r0, r4
 8002990:	f7ff ff40 	bl	8002814 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002994:	0e28      	lsrs	r0, r5, #24
 8002996:	f7ff ff3d 	bl	8002814 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800299a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 800299e:	f7ff ff39 	bl	8002814 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80029a2:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80029a6:	f7ff ff35 	bl	8002814 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80029aa:	b2e8      	uxtb	r0, r5
 80029ac:	f7ff ff32 	bl	8002814 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
  if (cmd == CMD0)
 80029b0:	2c40      	cmp	r4, #64	; 0x40
 80029b2:	d013      	beq.n	80029dc <SD_SendCmd+0x5c>
    crc = 0x95; /* CRC for CMD0(0) */
  
  if (cmd == CMD8)
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80029b4:	2c48      	cmp	r4, #72	; 0x48
 80029b6:	bf14      	ite	ne
 80029b8:	2000      	movne	r0, #0
 80029ba:	2087      	moveq	r0, #135	; 0x87
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80029bc:	f7ff ff2a 	bl	8002814 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80029c0:	2c4c      	cmp	r4, #76	; 0x4c
 80029c2:	d101      	bne.n	80029c8 <SD_SendCmd+0x48>
    SPI_RxByte();
 80029c4:	f7ff ff4c 	bl	8002860 <SPI_RxByte>
  crc = 0;  
 80029c8:	240a      	movs	r4, #10
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
  do
  {
    res = SPI_RxByte();
 80029ca:	f7ff ff49 	bl	8002860 <SPI_RxByte>
  } while ((res & 0x80) && --n);
 80029ce:	0603      	lsls	r3, r0, #24
 80029d0:	d503      	bpl.n	80029da <SD_SendCmd+0x5a>
 80029d2:	3c01      	subs	r4, #1
 80029d4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80029d8:	d1f7      	bne.n	80029ca <SD_SendCmd+0x4a>
  
  return res;
}
 80029da:	bd38      	pop	{r3, r4, r5, pc}
    crc = 0x95; /* CRC for CMD0(0) */
 80029dc:	2095      	movs	r0, #149	; 0x95
 80029de:	e7ed      	b.n	80029bc <SD_SendCmd+0x3c>
    return 0xFF;
 80029e0:	20ff      	movs	r0, #255	; 0xff
 80029e2:	e7fa      	b.n	80029da <SD_SendCmd+0x5a>

080029e4 <SD_RxDataBlock>:
  Timer1 = 10;
 80029e4:	220a      	movs	r2, #10
{
 80029e6:	b570      	push	{r4, r5, r6, lr}
 80029e8:	4605      	mov	r5, r0
 80029ea:	460e      	mov	r6, r1
  Timer1 = 10;
 80029ec:	4c11      	ldr	r4, [pc, #68]	; (8002a34 <SD_RxDataBlock+0x50>)
 80029ee:	7022      	strb	r2, [r4, #0]
    token = SPI_RxByte();
 80029f0:	f7ff ff36 	bl	8002860 <SPI_RxByte>
  } while((token == 0xFF) && Timer1);
 80029f4:	28ff      	cmp	r0, #255	; 0xff
 80029f6:	d105      	bne.n	8002a04 <SD_RxDataBlock+0x20>
 80029f8:	7823      	ldrb	r3, [r4, #0]
 80029fa:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f6      	bne.n	80029f0 <SD_RxDataBlock+0xc>
}
 8002a02:	bd70      	pop	{r4, r5, r6, pc}
  if(token != 0xFE)
 8002a04:	28fe      	cmp	r0, #254	; 0xfe
 8002a06:	d113      	bne.n	8002a30 <SD_RxDataBlock+0x4c>
  } while(btr -= 2);
 8002a08:	3602      	adds	r6, #2
 8002a0a:	1cac      	adds	r4, r5, #2
 8002a0c:	4435      	add	r5, r6
  *buff = SPI_RxByte();
 8002a0e:	f7ff ff27 	bl	8002860 <SPI_RxByte>
 8002a12:	f804 0c02 	strb.w	r0, [r4, #-2]
 8002a16:	f7ff ff23 	bl	8002860 <SPI_RxByte>
 8002a1a:	3402      	adds	r4, #2
 8002a1c:	f804 0c03 	strb.w	r0, [r4, #-3]
  } while(btr -= 2);
 8002a20:	42a5      	cmp	r5, r4
 8002a22:	d1f4      	bne.n	8002a0e <SD_RxDataBlock+0x2a>
  SPI_RxByte(); /* CRC 무시 */
 8002a24:	f7ff ff1c 	bl	8002860 <SPI_RxByte>
  SPI_RxByte();
 8002a28:	f7ff ff1a 	bl	8002860 <SPI_RxByte>
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e7e8      	b.n	8002a02 <SD_RxDataBlock+0x1e>
    return FALSE;
 8002a30:	2000      	movs	r0, #0
 8002a32:	e7e6      	b.n	8002a02 <SD_RxDataBlock+0x1e>
 8002a34:	20001851 	.word	0x20001851

08002a38 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	f040 8095 	bne.w	8002b6a <SD_disk_initialize+0x132>
    return STA_NOINIT;  
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002a40:	4b4b      	ldr	r3, [pc, #300]	; (8002b70 <SD_disk_initialize+0x138>)
 8002a42:	781c      	ldrb	r4, [r3, #0]
 8002a44:	461e      	mov	r6, r3
 8002a46:	f014 0402 	ands.w	r4, r4, #2
 8002a4a:	d003      	beq.n	8002a54 <SD_disk_initialize+0x1c>
    return Stat;        
 8002a4c:	7818      	ldrb	r0, [r3, #0]
  {
    /* Initialization failed */
    SD_PowerOff();
  }
  
  return Stat;
 8002a4e:	b2c0      	uxtb	r0, r0
}
 8002a50:	b003      	add	sp, #12
 8002a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SD_PowerOn();         
 8002a54:	f7ff ff22 	bl	800289c <SD_PowerOn>
  SELECT();             
 8002a58:	f7ff fef2 	bl	8002840 <SELECT>
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	2040      	movs	r0, #64	; 0x40
 8002a60:	f7ff ff8e 	bl	8002980 <SD_SendCmd>
 8002a64:	2801      	cmp	r0, #1
 8002a66:	d170      	bne.n	8002b4a <SD_disk_initialize+0x112>
    Timer1 = 100;
 8002a68:	2364      	movs	r3, #100	; 0x64
 8002a6a:	4d42      	ldr	r5, [pc, #264]	; (8002b74 <SD_disk_initialize+0x13c>)
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002a6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002a70:	2048      	movs	r0, #72	; 0x48
    Timer1 = 100;
 8002a72:	702b      	strb	r3, [r5, #0]
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002a74:	f7ff ff84 	bl	8002980 <SD_SendCmd>
 8002a78:	2801      	cmp	r0, #1
 8002a7a:	d144      	bne.n	8002b06 <SD_disk_initialize+0xce>
        ocr[n] = SPI_RxByte();
 8002a7c:	af01      	add	r7, sp, #4
 8002a7e:	f7ff feef 	bl	8002860 <SPI_RxByte>
 8002a82:	5538      	strb	r0, [r7, r4]
 8002a84:	3401      	adds	r4, #1
      for (n = 0; n < 4; n++)
 8002a86:	2c04      	cmp	r4, #4
 8002a88:	d1f9      	bne.n	8002a7e <SD_disk_initialize+0x46>
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002a8a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d15b      	bne.n	8002b4a <SD_disk_initialize+0x112>
 8002a92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a96:	2baa      	cmp	r3, #170	; 0xaa
 8002a98:	d157      	bne.n	8002b4a <SD_disk_initialize+0x112>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	2077      	movs	r0, #119	; 0x77
 8002a9e:	f7ff ff6f 	bl	8002980 <SD_SendCmd>
 8002aa2:	2801      	cmp	r0, #1
 8002aa4:	d927      	bls.n	8002af6 <SD_disk_initialize+0xbe>
        } while (Timer1);
 8002aa6:	782b      	ldrb	r3, [r5, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f6      	bne.n	8002a9a <SD_disk_initialize+0x62>
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002aac:	782b      	ldrb	r3, [r5, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d04b      	beq.n	8002b4a <SD_disk_initialize+0x112>
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	207a      	movs	r0, #122	; 0x7a
 8002ab6:	f7ff ff63 	bl	8002980 <SD_SendCmd>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	d145      	bne.n	8002b4a <SD_disk_initialize+0x112>
 8002abe:	4604      	mov	r4, r0
            ocr[n] = SPI_RxByte();
 8002ac0:	f7ff fece 	bl	8002860 <SPI_RxByte>
 8002ac4:	5538      	strb	r0, [r7, r4]
 8002ac6:	3401      	adds	r4, #1
          for (n = 0; n < 4; n++)
 8002ac8:	2c04      	cmp	r4, #4
 8002aca:	d1f9      	bne.n	8002ac0 <SD_disk_initialize+0x88>
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002acc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ad0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002ad4:	bf14      	ite	ne
 8002ad6:	2406      	movne	r4, #6
 8002ad8:	2402      	moveq	r4, #2
  CardType = type;
 8002ada:	4b27      	ldr	r3, [pc, #156]	; (8002b78 <SD_disk_initialize+0x140>)
 8002adc:	701c      	strb	r4, [r3, #0]
  DESELECT();
 8002ade:	f7ff feb7 	bl	8002850 <DESELECT>
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002ae2:	f7ff febd 	bl	8002860 <SPI_RxByte>
  if (type) 
 8002ae6:	2c00      	cmp	r4, #0
 8002ae8:	d03c      	beq.n	8002b64 <SD_disk_initialize+0x12c>
    Stat &= ~STA_NOINIT; 
 8002aea:	7833      	ldrb	r3, [r6, #0]
 8002aec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002af0:	7033      	strb	r3, [r6, #0]
  return Stat;
 8002af2:	7830      	ldrb	r0, [r6, #0]
 8002af4:	e7ab      	b.n	8002a4e <SD_disk_initialize+0x16>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002af6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002afa:	2069      	movs	r0, #105	; 0x69
 8002afc:	f7ff ff40 	bl	8002980 <SD_SendCmd>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d1d0      	bne.n	8002aa6 <SD_disk_initialize+0x6e>
 8002b04:	e7d2      	b.n	8002aac <SD_disk_initialize+0x74>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002b06:	4621      	mov	r1, r4
 8002b08:	2077      	movs	r0, #119	; 0x77
 8002b0a:	f7ff ff39 	bl	8002980 <SD_SendCmd>
 8002b0e:	2801      	cmp	r0, #1
 8002b10:	d805      	bhi.n	8002b1e <SD_disk_initialize+0xe6>
 8002b12:	4621      	mov	r1, r4
 8002b14:	2069      	movs	r0, #105	; 0x69
 8002b16:	f7ff ff33 	bl	8002980 <SD_SendCmd>
 8002b1a:	2801      	cmp	r0, #1
 8002b1c:	d917      	bls.n	8002b4e <SD_disk_initialize+0x116>
 8002b1e:	2401      	movs	r4, #1
        if (type == 2) 
 8002b20:	2c02      	cmp	r4, #2
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002b22:	f04f 0100 	mov.w	r1, #0
        if (type == 2) 
 8002b26:	d11b      	bne.n	8002b60 <SD_disk_initialize+0x128>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002b28:	2077      	movs	r0, #119	; 0x77
 8002b2a:	f7ff ff29 	bl	8002980 <SD_SendCmd>
 8002b2e:	2801      	cmp	r0, #1
 8002b30:	d90f      	bls.n	8002b52 <SD_disk_initialize+0x11a>
      } while (Timer1);
 8002b32:	782b      	ldrb	r3, [r5, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f3      	bne.n	8002b20 <SD_disk_initialize+0xe8>
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002b38:	782b      	ldrb	r3, [r5, #0]
 8002b3a:	b133      	cbz	r3, 8002b4a <SD_disk_initialize+0x112>
 8002b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b40:	2050      	movs	r0, #80	; 0x50
 8002b42:	f7ff ff1d 	bl	8002980 <SD_SendCmd>
 8002b46:	2800      	cmp	r0, #0
 8002b48:	d0c7      	beq.n	8002ada <SD_disk_initialize+0xa2>
        type = 0;
 8002b4a:	2400      	movs	r4, #0
 8002b4c:	e7c5      	b.n	8002ada <SD_disk_initialize+0xa2>
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002b4e:	2402      	movs	r4, #2
 8002b50:	e7e6      	b.n	8002b20 <SD_disk_initialize+0xe8>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002b52:	2100      	movs	r1, #0
 8002b54:	2069      	movs	r0, #105	; 0x69
          if (SD_SendCmd(CMD1, 0) == 0)
 8002b56:	f7ff ff13 	bl	8002980 <SD_SendCmd>
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d1e9      	bne.n	8002b32 <SD_disk_initialize+0xfa>
 8002b5e:	e7eb      	b.n	8002b38 <SD_disk_initialize+0x100>
 8002b60:	2041      	movs	r0, #65	; 0x41
 8002b62:	e7f8      	b.n	8002b56 <SD_disk_initialize+0x11e>
  PowerFlag = 0;
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <SD_disk_initialize+0x144>)
 8002b66:	701c      	strb	r4, [r3, #0]
 8002b68:	e7c3      	b.n	8002af2 <SD_disk_initialize+0xba>
    return STA_NOINIT;  
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	e770      	b.n	8002a50 <SD_disk_initialize+0x18>
 8002b6e:	bf00      	nop
 8002b70:	2000000c 	.word	0x2000000c
 8002b74:	20001851 	.word	0x20001851
 8002b78:	200000b0 	.word	0x200000b0
 8002b7c:	200000b1 	.word	0x200000b1

08002b80 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
  if (drv)
 8002b80:	b918      	cbnz	r0, 8002b8a <SD_disk_status+0xa>
    return STA_NOINIT; 
  
  return Stat;
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <SD_disk_status+0x10>)
 8002b84:	7818      	ldrb	r0, [r3, #0]
 8002b86:	b2c0      	uxtb	r0, r0
 8002b88:	4770      	bx	lr
    return STA_NOINIT; 
 8002b8a:	2001      	movs	r0, #1
}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	2000000c 	.word	0x2000000c

08002b94 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002b94:	b570      	push	{r4, r5, r6, lr}
 8002b96:	460d      	mov	r5, r1
 8002b98:	4616      	mov	r6, r2
 8002b9a:	461c      	mov	r4, r3
  if (pdrv || !count)
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d137      	bne.n	8002c10 <SD_disk_read+0x7c>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d035      	beq.n	8002c10 <SD_disk_read+0x7c>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <SD_disk_read+0x84>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	07da      	lsls	r2, r3, #31
 8002baa:	d433      	bmi.n	8002c14 <SD_disk_read+0x80>
    return RES_NOTRDY;
  
  if (!(CardType & 4))
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <SD_disk_read+0x88>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	075b      	lsls	r3, r3, #29
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002bb2:	bf58      	it	pl
 8002bb4:	0276      	lslpl	r6, r6, #9
  
  SELECT();
 8002bb6:	f7ff fe43 	bl	8002840 <SELECT>
  
  if (count == 1) 
 8002bba:	2c01      	cmp	r4, #1
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002bbc:	4631      	mov	r1, r6
  if (count == 1) 
 8002bbe:	d113      	bne.n	8002be8 <SD_disk_read+0x54>
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002bc0:	2051      	movs	r0, #81	; 0x51
 8002bc2:	f7ff fedd 	bl	8002980 <SD_SendCmd>
 8002bc6:	b938      	cbnz	r0, 8002bd8 <SD_disk_read+0x44>
 8002bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bcc:	4628      	mov	r0, r5
 8002bce:	f7ff ff09 	bl	80029e4 <SD_RxDataBlock>
 8002bd2:	fab0 f480 	clz	r4, r0
 8002bd6:	0964      	lsrs	r4, r4, #5
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
    }
  }
  
  DESELECT();
 8002bd8:	f7ff fe3a 	bl	8002850 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002bdc:	f7ff fe40 	bl	8002860 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002be0:	1c20      	adds	r0, r4, #0
 8002be2:	bf18      	it	ne
 8002be4:	2001      	movne	r0, #1
}
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002be8:	2052      	movs	r0, #82	; 0x52
 8002bea:	f7ff fec9 	bl	8002980 <SD_SendCmd>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d1f2      	bne.n	8002bd8 <SD_disk_read+0x44>
        if (!SD_RxDataBlock(buff, 512))
 8002bf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf6:	4628      	mov	r0, r5
 8002bf8:	f7ff fef4 	bl	80029e4 <SD_RxDataBlock>
 8002bfc:	b118      	cbz	r0, 8002c06 <SD_disk_read+0x72>
      } while (--count);
 8002bfe:	3c01      	subs	r4, #1
        buff += 512;
 8002c00:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
 8002c04:	d1f5      	bne.n	8002bf2 <SD_disk_read+0x5e>
      SD_SendCmd(CMD12, 0); 
 8002c06:	2100      	movs	r1, #0
 8002c08:	204c      	movs	r0, #76	; 0x4c
 8002c0a:	f7ff feb9 	bl	8002980 <SD_SendCmd>
 8002c0e:	e7e3      	b.n	8002bd8 <SD_disk_read+0x44>
    return RES_PARERR;
 8002c10:	2004      	movs	r0, #4
 8002c12:	e7e8      	b.n	8002be6 <SD_disk_read+0x52>
    return RES_NOTRDY;
 8002c14:	2003      	movs	r0, #3
 8002c16:	e7e6      	b.n	8002be6 <SD_disk_read+0x52>
 8002c18:	2000000c 	.word	0x2000000c
 8002c1c:	200000b0 	.word	0x200000b0

08002c20 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	460d      	mov	r5, r1
 8002c24:	4616      	mov	r6, r2
 8002c26:	461c      	mov	r4, r3
  if (pdrv || !count)
 8002c28:	2800      	cmp	r0, #0
 8002c2a:	d147      	bne.n	8002cbc <SD_disk_write+0x9c>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d045      	beq.n	8002cbc <SD_disk_write+0x9c>
    return RES_PARERR;
  
  if (Stat & STA_NOINIT)
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <SD_disk_write+0xa8>)
 8002c32:	781a      	ldrb	r2, [r3, #0]
 8002c34:	07d0      	lsls	r0, r2, #31
 8002c36:	d443      	bmi.n	8002cc0 <SD_disk_write+0xa0>
    return RES_NOTRDY;
  
  if (Stat & STA_PROTECT)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	0759      	lsls	r1, r3, #29
 8002c3c:	d442      	bmi.n	8002cc4 <SD_disk_write+0xa4>
    return RES_WRPRT;
  
  if (!(CardType & 4))
 8002c3e:	4f23      	ldr	r7, [pc, #140]	; (8002ccc <SD_disk_write+0xac>)
 8002c40:	783a      	ldrb	r2, [r7, #0]
 8002c42:	0752      	lsls	r2, r2, #29
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002c44:	bf58      	it	pl
 8002c46:	0276      	lslpl	r6, r6, #9
  
  SELECT();
 8002c48:	f7ff fdfa 	bl	8002840 <SELECT>
  
  if (count == 1) 
 8002c4c:	2c01      	cmp	r4, #1
 8002c4e:	d113      	bne.n	8002c78 <SD_disk_write+0x58>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002c50:	4631      	mov	r1, r6
 8002c52:	2058      	movs	r0, #88	; 0x58
 8002c54:	f7ff fe94 	bl	8002980 <SD_SendCmd>
 8002c58:	bb70      	cbnz	r0, 8002cb8 <SD_disk_write+0x98>
 8002c5a:	21fe      	movs	r1, #254	; 0xfe
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f7ff fe59 	bl	8002914 <SD_TxDataBlock>
 8002c62:	fab0 f480 	clz	r4, r0
 8002c66:	0964      	lsrs	r4, r4, #5
        count = 1;
      }
    }
  }
  
  DESELECT();
 8002c68:	f7ff fdf2 	bl	8002850 <DESELECT>
  SPI_RxByte();
 8002c6c:	f7ff fdf8 	bl	8002860 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002c70:	1c20      	adds	r0, r4, #0
 8002c72:	bf18      	it	ne
 8002c74:	2001      	movne	r0, #1
}
 8002c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (CardType & 2) 
 8002c78:	783b      	ldrb	r3, [r7, #0]
 8002c7a:	079b      	lsls	r3, r3, #30
 8002c7c:	d507      	bpl.n	8002c8e <SD_disk_write+0x6e>
      SD_SendCmd(CMD55, 0);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2077      	movs	r0, #119	; 0x77
 8002c82:	f7ff fe7d 	bl	8002980 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002c86:	4621      	mov	r1, r4
 8002c88:	2057      	movs	r0, #87	; 0x57
 8002c8a:	f7ff fe79 	bl	8002980 <SD_SendCmd>
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002c8e:	4631      	mov	r1, r6
 8002c90:	2059      	movs	r0, #89	; 0x59
 8002c92:	f7ff fe75 	bl	8002980 <SD_SendCmd>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d1e6      	bne.n	8002c68 <SD_disk_write+0x48>
        if(!SD_TxDataBlock(buff, 0xFC))
 8002c9a:	21fc      	movs	r1, #252	; 0xfc
 8002c9c:	4628      	mov	r0, r5
 8002c9e:	f7ff fe39 	bl	8002914 <SD_TxDataBlock>
 8002ca2:	b118      	cbz	r0, 8002cac <SD_disk_write+0x8c>
      } while (--count);
 8002ca4:	3c01      	subs	r4, #1
        buff += 512;
 8002ca6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      } while (--count);
 8002caa:	d1f6      	bne.n	8002c9a <SD_disk_write+0x7a>
      if(!SD_TxDataBlock(0, 0xFD))
 8002cac:	21fd      	movs	r1, #253	; 0xfd
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7ff fe30 	bl	8002914 <SD_TxDataBlock>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d1d7      	bne.n	8002c68 <SD_disk_write+0x48>
        count = 1;
 8002cb8:	2401      	movs	r4, #1
 8002cba:	e7d5      	b.n	8002c68 <SD_disk_write+0x48>
    return RES_PARERR;
 8002cbc:	2004      	movs	r0, #4
 8002cbe:	e7da      	b.n	8002c76 <SD_disk_write+0x56>
    return RES_NOTRDY;
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	e7d8      	b.n	8002c76 <SD_disk_write+0x56>
    return RES_WRPRT;
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	e7d6      	b.n	8002c76 <SD_disk_write+0x56>
 8002cc8:	2000000c 	.word	0x2000000c
 8002ccc:	200000b0 	.word	0x200000b0

08002cd0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002cd2:	460c      	mov	r4, r1
 8002cd4:	4615      	mov	r5, r2
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
  WORD csize;
  
  if (drv)
 8002cd6:	4606      	mov	r6, r0
 8002cd8:	b938      	cbnz	r0, 8002cea <SD_disk_ioctl+0x1a>
    return RES_PARERR;
  
  res = RES_ERROR;
  
  if (ctrl == CTRL_POWER) 
 8002cda:	2905      	cmp	r1, #5
 8002cdc:	d116      	bne.n	8002d0c <SD_disk_ioctl+0x3c>
  {
    switch (*ptr) 
 8002cde:	7813      	ldrb	r3, [r2, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d00c      	beq.n	8002cfe <SD_disk_ioctl+0x2e>
 8002ce4:	d303      	bcc.n	8002cee <SD_disk_ioctl+0x1e>
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d00c      	beq.n	8002d04 <SD_disk_ioctl+0x34>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
      res = RES_OK;             /* Power Check */
      break;
    default:
      res = RES_PARERR;
 8002cea:	2404      	movs	r4, #4
 8002cec:	e004      	b.n	8002cf8 <SD_disk_ioctl+0x28>
  return PowerFlag;
 8002cee:	4b46      	ldr	r3, [pc, #280]	; (8002e08 <SD_disk_ioctl+0x138>)
      if (SD_CheckPower())
 8002cf0:	781c      	ldrb	r4, [r3, #0]
 8002cf2:	b10c      	cbz	r4, 8002cf8 <SD_disk_ioctl+0x28>
  PowerFlag = 0;
 8002cf4:	7018      	strb	r0, [r3, #0]
      res = RES_OK;             /* Power Check */
 8002cf6:	4634      	mov	r4, r6
    DESELECT();
    SPI_RxByte();
  }
  
  return res;
}
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
      SD_PowerOn();             /* Power On */
 8002cfe:	f7ff fdcd 	bl	800289c <SD_PowerOn>
 8002d02:	e7f8      	b.n	8002cf6 <SD_disk_ioctl+0x26>
  return PowerFlag;
 8002d04:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <SD_disk_ioctl+0x138>)
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	7053      	strb	r3, [r2, #1]
 8002d0a:	e7f4      	b.n	8002cf6 <SD_disk_ioctl+0x26>
    if (Stat & STA_NOINIT)
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <SD_disk_ioctl+0x13c>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	07db      	lsls	r3, r3, #31
 8002d12:	d477      	bmi.n	8002e04 <SD_disk_ioctl+0x134>
    SELECT();
 8002d14:	f7ff fd94 	bl	8002840 <SELECT>
    switch (ctrl) 
 8002d18:	2c0d      	cmp	r4, #13
 8002d1a:	d869      	bhi.n	8002df0 <SD_disk_ioctl+0x120>
 8002d1c:	e8df f004 	tbb	[pc, r4]
 8002d20:	6846074b 	.word	0x6846074b
 8002d24:	68686868 	.word	0x68686868
 8002d28:	52686868 	.word	0x52686868
 8002d2c:	6360      	.short	0x6360
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002d2e:	2100      	movs	r1, #0
 8002d30:	2049      	movs	r0, #73	; 0x49
 8002d32:	f7ff fe25 	bl	8002980 <SD_SendCmd>
 8002d36:	4604      	mov	r4, r0
 8002d38:	b128      	cbz	r0, 8002d46 <SD_disk_ioctl+0x76>
  res = RES_ERROR;
 8002d3a:	2401      	movs	r4, #1
    DESELECT();
 8002d3c:	f7ff fd88 	bl	8002850 <DESELECT>
    SPI_RxByte();
 8002d40:	f7ff fd8e 	bl	8002860 <SPI_RxByte>
 8002d44:	e7d8      	b.n	8002cf8 <SD_disk_ioctl+0x28>
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002d46:	2110      	movs	r1, #16
 8002d48:	4668      	mov	r0, sp
 8002d4a:	f7ff fe4b 	bl	80029e4 <SD_RxDataBlock>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d0f3      	beq.n	8002d3a <SD_disk_ioctl+0x6a>
        if ((csd[0] >> 6) == 1) 
 8002d52:	f89d 1000 	ldrb.w	r1, [sp]
 8002d56:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002d5a:	0989      	lsrs	r1, r1, #6
 8002d5c:	2901      	cmp	r1, #1
 8002d5e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8002d62:	d106      	bne.n	8002d72 <SD_disk_ioctl+0xa2>
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002d64:	3301      	adds	r3, #1
 8002d66:	eb03 2202 	add.w	r2, r3, r2, lsl #8
          *(DWORD*) buff = (DWORD) csize << 10;
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	0292      	lsls	r2, r2, #10
 8002d6e:	602a      	str	r2, [r5, #0]
 8002d70:	e7e4      	b.n	8002d3c <SD_disk_ioctl+0x6c>
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002d72:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002d76:	0992      	lsrs	r2, r2, #6
 8002d78:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002d7c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8002d80:	3201      	adds	r2, #1
 8002d82:	0289      	lsls	r1, r1, #10
 8002d84:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002d88:	440a      	add	r2, r1
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002d8a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8002d8e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002d92:	f001 010f 	and.w	r1, r1, #15
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8002d9c:	f003 0306 	and.w	r3, r3, #6
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002da0:	440b      	add	r3, r1
 8002da2:	3b07      	subs	r3, #7
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	602b      	str	r3, [r5, #0]
 8002daa:	e7c7      	b.n	8002d3c <SD_disk_ioctl+0x6c>
      *(WORD*) buff = 512;
 8002dac:	f44f 7300 	mov.w	r3, #512	; 0x200
      res = RES_OK;
 8002db0:	2400      	movs	r4, #0
      *(WORD*) buff = 512;
 8002db2:	802b      	strh	r3, [r5, #0]
      break;
 8002db4:	e7c2      	b.n	8002d3c <SD_disk_ioctl+0x6c>
      if (SD_ReadyWait() == 0xFF)
 8002db6:	f7ff fd9d 	bl	80028f4 <SD_ReadyWait>
  res = RES_ERROR;
 8002dba:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8002dbe:	bf18      	it	ne
 8002dc0:	2401      	movne	r4, #1
 8002dc2:	e7bb      	b.n	8002d3c <SD_disk_ioctl+0x6c>
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	2049      	movs	r0, #73	; 0x49
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002dc8:	f7ff fdda 	bl	8002980 <SD_SendCmd>
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	d1b4      	bne.n	8002d3a <SD_disk_ioctl+0x6a>
 8002dd0:	2110      	movs	r1, #16
 8002dd2:	4628      	mov	r0, r5
 8002dd4:	f7ff fe06 	bl	80029e4 <SD_RxDataBlock>
  res = RES_ERROR;
 8002dd8:	fab0 f480 	clz	r4, r0
 8002ddc:	0964      	lsrs	r4, r4, #5
 8002dde:	e7ad      	b.n	8002d3c <SD_disk_ioctl+0x6c>
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002de0:	2100      	movs	r1, #0
 8002de2:	204a      	movs	r0, #74	; 0x4a
 8002de4:	e7f0      	b.n	8002dc8 <SD_disk_ioctl+0xf8>
      if (SD_SendCmd(CMD58, 0) == 0) 
 8002de6:	2100      	movs	r1, #0
 8002de8:	207a      	movs	r0, #122	; 0x7a
 8002dea:	f7ff fdc9 	bl	8002980 <SD_SendCmd>
 8002dee:	b108      	cbz	r0, 8002df4 <SD_disk_ioctl+0x124>
      res = RES_PARERR;
 8002df0:	2404      	movs	r4, #4
 8002df2:	e7a3      	b.n	8002d3c <SD_disk_ioctl+0x6c>
 8002df4:	1d2c      	adds	r4, r5, #4
          *ptr++ = SPI_RxByte();
 8002df6:	f7ff fd33 	bl	8002860 <SPI_RxByte>
 8002dfa:	f805 0b01 	strb.w	r0, [r5], #1
        for (n = 0; n < 4; n++)
 8002dfe:	42ac      	cmp	r4, r5
 8002e00:	d1f9      	bne.n	8002df6 <SD_disk_ioctl+0x126>
 8002e02:	e7f5      	b.n	8002df0 <SD_disk_ioctl+0x120>
      return RES_NOTRDY;
 8002e04:	2403      	movs	r4, #3
 8002e06:	e777      	b.n	8002cf8 <SD_disk_ioctl+0x28>
 8002e08:	200000b1 	.word	0x200000b1
 8002e0c:	2000000c 	.word	0x2000000c

08002e10 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002e10:	f7ff be12 	b.w	8002a38 <SD_disk_initialize>

08002e14 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8002e14:	f7ff beb4 	b.w	8002b80 <SD_disk_status>

08002e18 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8002e18:	f7ff bebc 	b.w	8002b94 <SD_disk_read>

08002e1c <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8002e1c:	f7ff bf00 	b.w	8002c20 <SD_disk_write>

08002e20 <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002e20:	f7ff bf56 	b.w	8002cd0 <SD_disk_ioctl>

08002e24 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <disk_status+0x10>)
 8002e26:	181a      	adds	r2, r3, r0
 8002e28:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	7a10      	ldrb	r0, [r2, #8]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4718      	bx	r3
 8002e34:	200002d4 	.word	0x200002d4

08002e38 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <disk_initialize+0x1c>)
 8002e3a:	5c1a      	ldrb	r2, [r3, r0]
 8002e3c:	b942      	cbnz	r2, 8002e50 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 8002e3e:	2201      	movs	r2, #1
 8002e40:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002e42:	181a      	adds	r2, r3, r0
 8002e44:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	7a10      	ldrb	r0, [r2, #8]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4718      	bx	r3
  }
  return stat;
}
 8002e50:	2000      	movs	r0, #0
 8002e52:	4770      	bx	lr
 8002e54:	200002d4 	.word	0x200002d4

08002e58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002e58:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002e5a:	4c05      	ldr	r4, [pc, #20]	; (8002e70 <disk_read+0x18>)
 8002e5c:	1825      	adds	r5, r4, r0
 8002e5e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002e62:	6860      	ldr	r0, [r4, #4]
 8002e64:	6884      	ldr	r4, [r0, #8]
 8002e66:	7a28      	ldrb	r0, [r5, #8]
 8002e68:	46a4      	mov	ip, r4
  return res;
}
 8002e6a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8002e6c:	4760      	bx	ip
 8002e6e:	bf00      	nop
 8002e70:	200002d4 	.word	0x200002d4

08002e74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002e74:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002e76:	4c05      	ldr	r4, [pc, #20]	; (8002e8c <disk_write+0x18>)
 8002e78:	1825      	adds	r5, r4, r0
 8002e7a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002e7e:	6860      	ldr	r0, [r4, #4]
 8002e80:	68c4      	ldr	r4, [r0, #12]
 8002e82:	7a28      	ldrb	r0, [r5, #8]
 8002e84:	46a4      	mov	ip, r4
  return res;
}
 8002e86:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002e88:	4760      	bx	ip
 8002e8a:	bf00      	nop
 8002e8c:	200002d4 	.word	0x200002d4

08002e90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002e90:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <disk_ioctl+0x14>)
 8002e94:	181c      	adds	r4, r3, r0
 8002e96:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	7a20      	ldrb	r0, [r4, #8]
 8002e9e:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8002ea0:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002ea2:	4718      	bx	r3
 8002ea4:	200002d4 	.word	0x200002d4

08002ea8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8002ea8:	3801      	subs	r0, #1
 8002eaa:	440a      	add	r2, r1
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8002eac:	4291      	cmp	r1, r2
 8002eae:	d100      	bne.n	8002eb2 <mem_cpy+0xa>
		*d++ = *s++;
}
 8002eb0:	4770      	bx	lr
		*d++ = *s++;
 8002eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eb6:	f800 3f01 	strb.w	r3, [r0, #1]!
 8002eba:	e7f7      	b.n	8002eac <mem_cpy+0x4>

08002ebc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8002ebc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8002ebe:	4290      	cmp	r0, r2
 8002ec0:	d100      	bne.n	8002ec4 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 8002ec2:	4770      	bx	lr
		*d++ = (BYTE)val;
 8002ec4:	f800 1b01 	strb.w	r1, [r0], #1
 8002ec8:	e7f9      	b.n	8002ebe <mem_set+0x2>
	...

08002ecc <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8002ecc:	4a1b      	ldr	r2, [pc, #108]	; (8002f3c <chk_lock+0x70>)
{
 8002ece:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8002ed0:	6813      	ldr	r3, [r2, #0]
 8002ed2:	b163      	cbz	r3, 8002eee <chk_lock+0x22>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002ed4:	6804      	ldr	r4, [r0, #0]
 8002ed6:	429c      	cmp	r4, r3
 8002ed8:	d107      	bne.n	8002eea <chk_lock+0x1e>
 8002eda:	6854      	ldr	r4, [r2, #4]
 8002edc:	6883      	ldr	r3, [r0, #8]
 8002ede:	429c      	cmp	r4, r3
 8002ee0:	d103      	bne.n	8002eea <chk_lock+0x1e>
				Files[i].clu == dp->sclust &&
 8002ee2:	8914      	ldrh	r4, [r2, #8]
 8002ee4:	88c3      	ldrh	r3, [r0, #6]
 8002ee6:	429c      	cmp	r4, r3
 8002ee8:	d021      	beq.n	8002f2e <chk_lock+0x62>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002eea:	2400      	movs	r4, #0
 8002eec:	e000      	b.n	8002ef0 <chk_lock+0x24>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 8002eee:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8002ef0:	68d3      	ldr	r3, [r2, #12]
 8002ef2:	b1d3      	cbz	r3, 8002f2a <chk_lock+0x5e>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8002ef4:	6805      	ldr	r5, [r0, #0]
 8002ef6:	42ab      	cmp	r3, r5
 8002ef8:	d107      	bne.n	8002f0a <chk_lock+0x3e>
 8002efa:	6915      	ldr	r5, [r2, #16]
 8002efc:	6883      	ldr	r3, [r0, #8]
 8002efe:	429d      	cmp	r5, r3
 8002f00:	d103      	bne.n	8002f0a <chk_lock+0x3e>
				Files[i].clu == dp->sclust &&
 8002f02:	8a95      	ldrh	r5, [r2, #20]
 8002f04:	88c3      	ldrh	r3, [r0, #6]
 8002f06:	429d      	cmp	r5, r3
 8002f08:	d016      	beq.n	8002f38 <chk_lock+0x6c>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8002f0a:	b974      	cbnz	r4, 8002f2a <chk_lock+0x5e>
 8002f0c:	2902      	cmp	r1, #2
 8002f0e:	bf0c      	ite	eq
 8002f10:	2000      	moveq	r0, #0
 8002f12:	2012      	movne	r0, #18

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8002f14:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f16:	210c      	movs	r1, #12
 8002f18:	fb01 2203 	mla	r2, r1, r3, r2
 8002f1c:	8953      	ldrh	r3, [r2, #10]
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f22:	bf14      	ite	ne
 8002f24:	2000      	movne	r0, #0
 8002f26:	2010      	moveq	r0, #16
 8002f28:	e7f4      	b.n	8002f14 <chk_lock+0x48>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e7f2      	b.n	8002f14 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f2e:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d0f0      	beq.n	8002f16 <chk_lock+0x4a>
 8002f34:	2010      	movs	r0, #16
 8002f36:	e7ed      	b.n	8002f14 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e7f9      	b.n	8002f30 <chk_lock+0x64>
 8002f3c:	200000b8 	.word	0x200000b8

08002f40 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8002f40:	4a20      	ldr	r2, [pc, #128]	; (8002fc4 <inc_lock+0x84>)
{
 8002f42:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 8002f44:	6813      	ldr	r3, [r2, #0]
 8002f46:	6806      	ldr	r6, [r0, #0]
 8002f48:	429e      	cmp	r6, r3
 8002f4a:	d107      	bne.n	8002f5c <inc_lock+0x1c>
 8002f4c:	6855      	ldr	r5, [r2, #4]
 8002f4e:	6884      	ldr	r4, [r0, #8]
 8002f50:	42a5      	cmp	r5, r4
 8002f52:	d103      	bne.n	8002f5c <inc_lock+0x1c>
			Files[i].clu == dp->sclust &&
 8002f54:	88c5      	ldrh	r5, [r0, #6]
 8002f56:	8914      	ldrh	r4, [r2, #8]
 8002f58:	42a5      	cmp	r5, r4
 8002f5a:	d024      	beq.n	8002fa6 <inc_lock+0x66>
		if (Files[i].fs == dp->fs &&
 8002f5c:	68d4      	ldr	r4, [r2, #12]
 8002f5e:	42b4      	cmp	r4, r6
 8002f60:	d107      	bne.n	8002f72 <inc_lock+0x32>
 8002f62:	6917      	ldr	r7, [r2, #16]
 8002f64:	6885      	ldr	r5, [r0, #8]
 8002f66:	42af      	cmp	r7, r5
 8002f68:	d103      	bne.n	8002f72 <inc_lock+0x32>
			Files[i].clu == dp->sclust &&
 8002f6a:	8a97      	ldrh	r7, [r2, #20]
 8002f6c:	88c5      	ldrh	r5, [r0, #6]
 8002f6e:	42af      	cmp	r7, r5
 8002f70:	d024      	beq.n	8002fbc <inc_lock+0x7c>
			Files[i].idx == dp->index) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8002f72:	b10b      	cbz	r3, 8002f78 <inc_lock+0x38>
 8002f74:	bb24      	cbnz	r4, 8002fc0 <inc_lock+0x80>
 8002f76:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 8002f78:	240c      	movs	r4, #12
 8002f7a:	435c      	muls	r4, r3
 8002f7c:	1915      	adds	r5, r2, r4
 8002f7e:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 8002f80:	6884      	ldr	r4, [r0, #8]
		Files[i].idx = dp->index;
 8002f82:	88c0      	ldrh	r0, [r0, #6]
		Files[i].clu = dp->sclust;
 8002f84:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 8002f86:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 8002f88:	2000      	movs	r0, #0
 8002f8a:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002f8c:	b999      	cbnz	r1, 8002fb6 <inc_lock+0x76>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002f8e:	210c      	movs	r1, #12
 8002f90:	fb01 2103 	mla	r1, r1, r3, r2
 8002f94:	8949      	ldrh	r1, [r1, #10]
 8002f96:	3101      	adds	r1, #1
 8002f98:	b289      	uxth	r1, r1
 8002f9a:	200c      	movs	r0, #12
 8002f9c:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8002fa0:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002fa2:	8151      	strh	r1, [r2, #10]
}
 8002fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002fa6:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8002fa8:	2900      	cmp	r1, #0
 8002faa:	d0f0      	beq.n	8002f8e <inc_lock+0x4e>
 8002fac:	210c      	movs	r1, #12
 8002fae:	fb01 2103 	mla	r1, r1, r3, r2
 8002fb2:	8949      	ldrh	r1, [r1, #10]
 8002fb4:	b921      	cbnz	r1, 8002fc0 <inc_lock+0x80>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8002fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fba:	e7ee      	b.n	8002f9a <inc_lock+0x5a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e7f3      	b.n	8002fa8 <inc_lock+0x68>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7ef      	b.n	8002fa4 <inc_lock+0x64>
 8002fc4:	200000b8 	.word	0x200000b8

08002fc8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8002fc8:	3801      	subs	r0, #1
 8002fca:	2801      	cmp	r0, #1
 8002fcc:	d817      	bhi.n	8002ffe <dec_lock+0x36>
		n = Files[i].ctr;
 8002fce:	220c      	movs	r2, #12
 8002fd0:	490c      	ldr	r1, [pc, #48]	; (8003004 <dec_lock+0x3c>)
 8002fd2:	fb02 1200 	mla	r2, r2, r0, r1
 8002fd6:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8002fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fdc:	d106      	bne.n	8002fec <dec_lock+0x24>
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	4343      	muls	r3, r0
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	50c8      	str	r0, [r1, r3]
 8002fea:	4770      	bx	lr
		if (n) n--;					/* Decrement read mode open count */
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f8      	beq.n	8002fe2 <dec_lock+0x1a>
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8002ff4:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f3      	beq.n	8002fe2 <dec_lock+0x1a>
		res = FR_OK;
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8002ffe:	2002      	movs	r0, #2
	}
	return res;
}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200000b8 	.word	0x200000b8

08003008 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003008:	f241 030a 	movw	r3, #4106	; 0x100a
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800300c:	6a42      	ldr	r2, [r0, #36]	; 0x24
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800300e:	6800      	ldr	r0, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003010:	3204      	adds	r2, #4
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003012:	5ac3      	ldrh	r3, [r0, r3]
 8003014:	fbb1 f1f3 	udiv	r1, r1, r3
 8003018:	f241 0302 	movw	r3, #4098	; 0x1002
 800301c:	5cc3      	ldrb	r3, [r0, r3]
 800301e:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003022:	6810      	ldr	r0, [r2, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 8003024:	b130      	cbz	r0, 8003034 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8003026:	4281      	cmp	r1, r0
 8003028:	d302      	bcc.n	8003030 <clmt_clust+0x28>
		cl -= ncl; tbl++;		/* Next fragment */
 800302a:	1a09      	subs	r1, r1, r0
 800302c:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800302e:	e7f8      	b.n	8003022 <clmt_clust+0x1a>
	}
	return cl + *tbl;	/* Return the cluster number */
 8003030:	6850      	ldr	r0, [r2, #4]
 8003032:	4408      	add	r0, r1
}
 8003034:	4770      	bx	lr

08003036 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003036:	4602      	mov	r2, r0
 8003038:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 800303c:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800303e:	01c3      	lsls	r3, r0, #7
 8003040:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 8003044:	f812 0b01 	ldrb.w	r0, [r2], #1
 8003048:	4403      	add	r3, r0
 800304a:	428a      	cmp	r2, r1
 800304c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003050:	d1f5      	bne.n	800303e <sum_sfn+0x8>
	return sum;
}
 8003052:	4770      	bx	lr

08003054 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003054:	6802      	ldr	r2, [r0, #0]
{
 8003056:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8003058:	b152      	cbz	r2, 8003070 <get_ldnumber+0x1c>
 800305a:	4611      	mov	r1, r2
 800305c:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800305e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003062:	2c1f      	cmp	r4, #31
 8003064:	d90c      	bls.n	8003080 <get_ldnumber+0x2c>
 8003066:	2c3a      	cmp	r4, #58	; 0x3a
 8003068:	d1f8      	bne.n	800305c <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800306a:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800306c:	428b      	cmp	r3, r1
 800306e:	d002      	beq.n	8003076 <get_ldnumber+0x22>
	int vol = -1;
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	e005      	b.n	8003082 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003076:	7812      	ldrb	r2, [r2, #0]
 8003078:	2a30      	cmp	r2, #48	; 0x30
 800307a:	d1f9      	bne.n	8003070 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 800307c:	3301      	adds	r3, #1
 800307e:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003080:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8003082:	bd10      	pop	{r4, pc}

08003084 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8003084:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8003086:	b198      	cbz	r0, 80030b0 <validate+0x2c>
 8003088:	6803      	ldr	r3, [r0, #0]
 800308a:	b18b      	cbz	r3, 80030b0 <validate+0x2c>
 800308c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8003090:	7812      	ldrb	r2, [r2, #0]
 8003092:	b16a      	cbz	r2, 80030b0 <validate+0x2c>
 8003094:	f241 0206 	movw	r2, #4102	; 0x1006
 8003098:	5a99      	ldrh	r1, [r3, r2]
 800309a:	8882      	ldrh	r2, [r0, #4]
 800309c:	4291      	cmp	r1, r2
 800309e:	d107      	bne.n	80030b0 <validate+0x2c>
 80030a0:	f241 0201 	movw	r2, #4097	; 0x1001
 80030a4:	5c98      	ldrb	r0, [r3, r2]
 80030a6:	f7ff febd 	bl	8002e24 <disk_status>
 80030aa:	f010 0001 	ands.w	r0, r0, #1
 80030ae:	d000      	beq.n	80030b2 <validate+0x2e>
		return FR_INVALID_OBJECT;
 80030b0:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80030b2:	bd08      	pop	{r3, pc}

080030b4 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 80030b4:	7eca      	ldrb	r2, [r1, #27]
 80030b6:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 80030b8:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80030ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80030be:	bf01      	itttt	eq
 80030c0:	7d48      	ldrbeq	r0, [r1, #21]
 80030c2:	7d0a      	ldrbeq	r2, [r1, #20]
 80030c4:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80030c8:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	4770      	bx	lr

080030d0 <sync_window.part.1>:
		wsect = fs->winsect;	/* Current sector number */
 80030d0:	f241 032c 	movw	r3, #4140	; 0x102c
FRESULT sync_window (
 80030d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80030d8:	f241 0701 	movw	r7, #4097	; 0x1001
		wsect = fs->winsect;	/* Current sector number */
 80030dc:	58c5      	ldr	r5, [r0, r3]
FRESULT sync_window (
 80030de:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80030e0:	4601      	mov	r1, r0
 80030e2:	2301      	movs	r3, #1
 80030e4:	462a      	mov	r2, r5
 80030e6:	5dc0      	ldrb	r0, [r0, r7]
 80030e8:	f7ff fec4 	bl	8002e74 <disk_write>
 80030ec:	bb08      	cbnz	r0, 8003132 <sync_window.part.1+0x62>
			fs->wflag = 0;
 80030ee:	f241 0304 	movw	r3, #4100	; 0x1004
 80030f2:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80030f4:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80030fe:	58e1      	ldr	r1, [r4, r3]
 8003100:	1aaa      	subs	r2, r5, r2
 8003102:	428a      	cmp	r2, r1
 8003104:	d302      	bcc.n	800310c <sync_window.part.1+0x3c>
	FRESULT res = FR_OK;
 8003106:	2000      	movs	r0, #0
}
 8003108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800310c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003110:	f814 8002 	ldrb.w	r8, [r4, r2]
					wsect += fs->fsize;
 8003114:	18e6      	adds	r6, r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003116:	f1b8 0f01 	cmp.w	r8, #1
 800311a:	d9f4      	bls.n	8003106 <sync_window.part.1+0x36>
					wsect += fs->fsize;
 800311c:	6833      	ldr	r3, [r6, #0]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800311e:	4621      	mov	r1, r4
					wsect += fs->fsize;
 8003120:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8003122:	462a      	mov	r2, r5
 8003124:	2301      	movs	r3, #1
 8003126:	5de0      	ldrb	r0, [r4, r7]
 8003128:	f7ff fea4 	bl	8002e74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800312c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003130:	e7f1      	b.n	8003116 <sync_window.part.1+0x46>
			res = FR_DISK_ERR;
 8003132:	2001      	movs	r0, #1
 8003134:	e7e8      	b.n	8003108 <sync_window.part.1+0x38>

08003136 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003136:	f241 0304 	movw	r3, #4100	; 0x1004
 800313a:	5cc3      	ldrb	r3, [r0, r3]
 800313c:	b10b      	cbz	r3, 8003142 <sync_window+0xc>
 800313e:	f7ff bfc7 	b.w	80030d0 <sync_window.part.1>
}
 8003142:	4618      	mov	r0, r3
 8003144:	4770      	bx	lr

08003146 <move_window>:
{
 8003146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003148:	f241 072c 	movw	r7, #4140	; 0x102c
 800314c:	59c3      	ldr	r3, [r0, r7]
{
 800314e:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003150:	428b      	cmp	r3, r1
{
 8003152:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8003154:	d013      	beq.n	800317e <move_window+0x38>
		res = sync_window(fs);		/* Write-back changes */
 8003156:	f7ff ffee 	bl	8003136 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800315a:	4604      	mov	r4, r0
 800315c:	b968      	cbnz	r0, 800317a <move_window+0x34>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 800315e:	f241 0001 	movw	r0, #4097	; 0x1001
 8003162:	462a      	mov	r2, r5
 8003164:	2301      	movs	r3, #1
 8003166:	4631      	mov	r1, r6
 8003168:	5c30      	ldrb	r0, [r6, r0]
 800316a:	f7ff fe75 	bl	8002e58 <disk_read>
 800316e:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8003170:	bf1c      	itt	ne
 8003172:	f04f 35ff 	movne.w	r5, #4294967295
 8003176:	2401      	movne	r4, #1
			fs->winsect = sector;
 8003178:	51f5      	str	r5, [r6, r7]
}
 800317a:	4620      	mov	r0, r4
 800317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FRESULT res = FR_OK;
 800317e:	2400      	movs	r4, #0
 8003180:	e7fb      	b.n	800317a <move_window+0x34>
	...

08003184 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8003184:	f241 0304 	movw	r3, #4100	; 0x1004
 8003188:	2200      	movs	r2, #0
{
 800318a:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800318c:	54c2      	strb	r2, [r0, r3]
 800318e:	f241 032c 	movw	r3, #4140	; 0x102c
 8003192:	f04f 32ff 	mov.w	r2, #4294967295
 8003196:	50c2      	str	r2, [r0, r3]
{
 8003198:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800319a:	f7ff ffd4 	bl	8003146 <move_window>
 800319e:	b9c0      	cbnz	r0, 80031d2 <check_fs+0x4e>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80031a0:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 80031a4:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 80031a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031ac:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d110      	bne.n	80031d6 <check_fs+0x52>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80031b4:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 80031b8:	4a08      	ldr	r2, [pc, #32]	; (80031dc <check_fs+0x58>)
 80031ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031be:	4293      	cmp	r3, r2
 80031c0:	d006      	beq.n	80031d0 <check_fs+0x4c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80031c2:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 80031c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 80031ca:	1a80      	subs	r0, r0, r2
 80031cc:	bf18      	it	ne
 80031ce:	2001      	movne	r0, #1
}
 80031d0:	bd10      	pop	{r4, pc}
		return 3;
 80031d2:	2003      	movs	r0, #3
 80031d4:	e7fc      	b.n	80031d0 <check_fs+0x4c>
		return 2;
 80031d6:	2002      	movs	r0, #2
 80031d8:	e7fa      	b.n	80031d0 <check_fs+0x4c>
 80031da:	bf00      	nop
 80031dc:	00544146 	.word	0x00544146

080031e0 <find_volume>:
{
 80031e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	*rfs = 0;
 80031e4:	2300      	movs	r3, #0
{
 80031e6:	4606      	mov	r6, r0
	*rfs = 0;
 80031e8:	6003      	str	r3, [r0, #0]
	vol = get_ldnumber(path);
 80031ea:	4608      	mov	r0, r1
{
 80031ec:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80031ee:	f7ff ff31 	bl	8003054 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80031f2:	1e07      	subs	r7, r0, #0
 80031f4:	f2c0 8160 	blt.w	80034b8 <find_volume+0x2d8>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80031f8:	4bb3      	ldr	r3, [pc, #716]	; (80034c8 <find_volume+0x2e8>)
 80031fa:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80031fe:	2c00      	cmp	r4, #0
 8003200:	f000 815c 	beq.w	80034bc <find_volume+0x2dc>
	*rfs = fs;							/* Return pointer to the file system object */
 8003204:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8003206:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 800320a:	7833      	ldrb	r3, [r6, #0]
 800320c:	b183      	cbz	r3, 8003230 <find_volume+0x50>
		stat = disk_status(fs->drv);
 800320e:	f241 0301 	movw	r3, #4097	; 0x1001
 8003212:	5ce0      	ldrb	r0, [r4, r3]
 8003214:	f7ff fe06 	bl	8002e24 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003218:	07c1      	lsls	r1, r0, #31
 800321a:	d409      	bmi.n	8003230 <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800321c:	2d00      	cmp	r5, #0
 800321e:	f000 814f 	beq.w	80034c0 <find_volume+0x2e0>
 8003222:	f010 0004 	ands.w	r0, r0, #4
 8003226:	d000      	beq.n	800322a <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 8003228:	200a      	movs	r0, #10
}
 800322a:	b004      	add	sp, #16
 800322c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8003230:	2300      	movs	r3, #0
 8003232:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003234:	f241 0301 	movw	r3, #4097	; 0x1001
 8003238:	b2f8      	uxtb	r0, r7
 800323a:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800323c:	f7ff fdfc 	bl	8002e38 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003240:	07c2      	lsls	r2, r0, #31
 8003242:	f100 813f 	bmi.w	80034c4 <find_volume+0x2e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003246:	b10d      	cbz	r5, 800324c <find_volume+0x6c>
 8003248:	0743      	lsls	r3, r0, #29
 800324a:	d4ed      	bmi.n	8003228 <find_volume+0x48>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800324c:	f241 0301 	movw	r3, #4097	; 0x1001
 8003250:	f241 050a 	movw	r5, #4106	; 0x100a
 8003254:	2102      	movs	r1, #2
 8003256:	1962      	adds	r2, r4, r5
 8003258:	5ce0      	ldrb	r0, [r4, r3]
 800325a:	f7ff fe19 	bl	8002e90 <disk_ioctl>
 800325e:	4607      	mov	r7, r0
 8003260:	b108      	cbz	r0, 8003266 <find_volume+0x86>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8003262:	2001      	movs	r0, #1
 8003264:	e7e1      	b.n	800322a <find_volume+0x4a>
 8003266:	5b63      	ldrh	r3, [r4, r5]
 8003268:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800326c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8003270:	d8f7      	bhi.n	8003262 <find_volume+0x82>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8003272:	4601      	mov	r1, r0
 8003274:	4620      	mov	r0, r4
 8003276:	f7ff ff85 	bl	8003184 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800327a:	2801      	cmp	r0, #1
 800327c:	f040 8101 	bne.w	8003482 <find_volume+0x2a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003280:	4638      	mov	r0, r7
 8003282:	f504 72e3 	add.w	r2, r4, #454	; 0x1c6
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003286:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800328a:	b103      	cbz	r3, 800328e <find_volume+0xae>
 800328c:	6813      	ldr	r3, [r2, #0]
 800328e:	f84d 3020 	str.w	r3, [sp, r0, lsl #2]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003292:	3001      	adds	r0, #1
 8003294:	2804      	cmp	r0, #4
 8003296:	f102 0210 	add.w	r2, r2, #16
 800329a:	d1f4      	bne.n	8003286 <find_volume+0xa6>
 800329c:	2700      	movs	r7, #0
			bsect = br[i];
 800329e:	f85d 5027 	ldr.w	r5, [sp, r7, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80032a2:	2d00      	cmp	r5, #0
 80032a4:	f000 80e5 	beq.w	8003472 <find_volume+0x292>
 80032a8:	4629      	mov	r1, r5
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7ff ff6a 	bl	8003184 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80032b0:	2800      	cmp	r0, #0
 80032b2:	f040 80df 	bne.w	8003474 <find_volume+0x294>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80032b6:	7b23      	ldrb	r3, [r4, #12]
 80032b8:	7ae0      	ldrb	r0, [r4, #11]
 80032ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80032be:	f241 030a 	movw	r3, #4106	; 0x100a
 80032c2:	5ae3      	ldrh	r3, [r4, r3]
 80032c4:	4283      	cmp	r3, r0
 80032c6:	f040 80e0 	bne.w	800348a <find_volume+0x2aa>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80032ca:	7de3      	ldrb	r3, [r4, #23]
 80032cc:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80032ce:	f894 8010 	ldrb.w	r8, [r4, #16]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80032d2:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	fs->fsize = fasize;
 80032d6:	f241 0318 	movw	r3, #4120	; 0x1018
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80032da:	bf08      	it	eq
 80032dc:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 80032de:	50e1      	str	r1, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80032e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80032e4:	f804 8003 	strb.w	r8, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80032e8:	f108 33ff 	add.w	r3, r8, #4294967295
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	f200 80cc 	bhi.w	800348a <find_volume+0x2aa>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80032f2:	f241 0302 	movw	r3, #4098	; 0x1002
 80032f6:	f894 900d 	ldrb.w	r9, [r4, #13]
 80032fa:	f804 9003 	strb.w	r9, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80032fe:	f1b9 0f00 	cmp.w	r9, #0
 8003302:	f000 80c2 	beq.w	800348a <find_volume+0x2aa>
 8003306:	f109 33ff 	add.w	r3, r9, #4294967295
 800330a:	ea13 0f09 	tst.w	r3, r9
 800330e:	f040 80bc 	bne.w	800348a <find_volume+0x2aa>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003312:	7ca3      	ldrb	r3, [r4, #18]
 8003314:	f894 e011 	ldrb.w	lr, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003318:	0947      	lsrs	r7, r0, #5
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800331a:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800331e:	fbbe fcf7 	udiv	ip, lr, r7
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003322:	f241 0308 	movw	r3, #4104	; 0x1008
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003326:	fb07 e71c 	mls	r7, r7, ip, lr
 800332a:	b2bf      	uxth	r7, r7
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800332c:	f824 e003 	strh.w	lr, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003330:	2f00      	cmp	r7, #0
 8003332:	f040 80aa 	bne.w	800348a <find_volume+0x2aa>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003336:	7d22      	ldrb	r2, [r4, #20]
 8003338:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800333a:	7be7      	ldrb	r7, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800333c:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003340:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8003342:	bf08      	it	eq
 8003344:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8003346:	ea52 2207 	orrs.w	r2, r2, r7, lsl #8
 800334a:	f000 809e 	beq.w	800348a <find_volume+0x2aa>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800334e:	fb01 f808 	mul.w	r8, r1, r8
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003352:	4494      	add	ip, r2
 8003354:	44c4      	add	ip, r8
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003356:	4563      	cmp	r3, ip
 8003358:	f0c0 8097 	bcc.w	800348a <find_volume+0x2aa>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800335c:	eba3 030c 	sub.w	r3, r3, ip
 8003360:	fbb3 f3f9 	udiv	r3, r3, r9
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8090 	beq.w	800348a <find_volume+0x2aa>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800336a:	f640 77f5 	movw	r7, #4085	; 0xff5
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800336e:	f64f 79f5 	movw	r9, #65525	; 0xfff5
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003372:	42bb      	cmp	r3, r7
 8003374:	bf94      	ite	ls
 8003376:	2701      	movls	r7, #1
 8003378:	2702      	movhi	r7, #2
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800337a:	454b      	cmp	r3, r9
 800337c:	bf88      	it	hi
 800337e:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003380:	f241 0914 	movw	r9, #4116	; 0x1014
 8003384:	3302      	adds	r3, #2
 8003386:	f844 3009 	str.w	r3, [r4, r9]
	fs->volbase = bsect;								/* Volume start sector */
 800338a:	f241 091c 	movw	r9, #4124	; 0x101c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800338e:	442a      	add	r2, r5
	fs->volbase = bsect;								/* Volume start sector */
 8003390:	f844 5009 	str.w	r5, [r4, r9]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003394:	f504 5981 	add.w	r9, r4, #4128	; 0x1020
 8003398:	f8c9 2000 	str.w	r2, [r9]
	fs->database = bsect + sysect;						/* Data start sector */
 800339c:	f241 0928 	movw	r9, #4136	; 0x1028
 80033a0:	44ac      	add	ip, r5
	if (fmt == FS_FAT32) {
 80033a2:	2f03      	cmp	r7, #3
	fs->database = bsect + sysect;						/* Data start sector */
 80033a4:	f844 c009 	str.w	ip, [r4, r9]
	if (fmt == FS_FAT32) {
 80033a8:	d173      	bne.n	8003492 <find_volume+0x2b2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80033aa:	f1be 0f00 	cmp.w	lr, #0
 80033ae:	d16c      	bne.n	800348a <find_volume+0x2aa>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80033b0:	f241 0c24 	movw	ip, #4132	; 0x1024
 80033b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80033b6:	009b      	lsls	r3, r3, #2
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80033b8:	f844 200c 	str.w	r2, [r4, ip]
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 80033bc:	1e42      	subs	r2, r0, #1
 80033be:	4413      	add	r3, r2
 80033c0:	fbb3 f0f0 	udiv	r0, r3, r0
 80033c4:	4288      	cmp	r0, r1
 80033c6:	d860      	bhi.n	800348a <find_volume+0x2aa>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80033c8:	f04f 33ff 	mov.w	r3, #4294967295
 80033cc:	f241 0910 	movw	r9, #4112	; 0x1010
 80033d0:	f241 080c 	movw	r8, #4108	; 0x100c
 80033d4:	f844 3009 	str.w	r3, [r4, r9]
	fs->fsi_flag = 0x80;
 80033d8:	f241 0a05 	movw	sl, #4101	; 0x1005
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 80033dc:	f844 3008 	str.w	r3, [r4, r8]
	fs->fsi_flag = 0x80;
 80033e0:	2380      	movs	r3, #128	; 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80033e2:	2f03      	cmp	r7, #3
	fs->fsi_flag = 0x80;
 80033e4:	f804 300a 	strb.w	r3, [r4, sl]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80033e8:	d12d      	bne.n	8003446 <find_volume+0x266>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80033ea:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80033ee:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80033f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d125      	bne.n	8003446 <find_volume+0x266>
		&& move_window(fs, bsect + 1) == FR_OK)
 80033fa:	1c69      	adds	r1, r5, #1
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7ff fea2 	bl	8003146 <move_window>
 8003402:	bb00      	cbnz	r0, 8003446 <find_volume+0x266>
		fs->fsi_flag = 0;
 8003404:	f804 000a 	strb.w	r0, [r4, sl]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003408:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 800340c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8003410:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003414:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003418:	4293      	cmp	r3, r2
 800341a:	d114      	bne.n	8003446 <find_volume+0x266>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800341c:	6822      	ldr	r2, [r4, #0]
 800341e:	4b2b      	ldr	r3, [pc, #172]	; (80034cc <find_volume+0x2ec>)
 8003420:	429a      	cmp	r2, r3
 8003422:	d110      	bne.n	8003446 <find_volume+0x266>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8003424:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8003428:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 800342c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003430:	3320      	adds	r3, #32
 8003432:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8003434:	bf01      	itttt	eq
 8003436:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 800343a:	f844 3009 	streq.w	r3, [r4, r9]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800343e:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8003442:	f844 3008 	streq.w	r3, [r4, r8]
	fs->id = ++Fsid;	/* File system mount ID */
 8003446:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <find_volume+0x2f0>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8003448:	7037      	strb	r7, [r6, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800344a:	8813      	ldrh	r3, [r2, #0]
 800344c:	2000      	movs	r0, #0
 800344e:	3301      	adds	r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	8013      	strh	r3, [r2, #0]
 8003454:	f241 0206 	movw	r2, #4102	; 0x1006
 8003458:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <find_volume+0x2f4>)
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4294      	cmp	r4, r2
 8003460:	bf04      	itt	eq
 8003462:	2200      	moveq	r2, #0
 8003464:	601a      	streq	r2, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4294      	cmp	r4, r2
 800346a:	f47f aede 	bne.w	800322a <find_volume+0x4a>
 800346e:	60d8      	str	r0, [r3, #12]
 8003470:	e6db      	b.n	800322a <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003472:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003474:	3701      	adds	r7, #1
 8003476:	2f04      	cmp	r7, #4
 8003478:	f47f af11 	bne.w	800329e <find_volume+0xbe>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800347c:	2803      	cmp	r0, #3
 800347e:	d104      	bne.n	800348a <find_volume+0x2aa>
 8003480:	e6ef      	b.n	8003262 <find_volume+0x82>
 8003482:	2803      	cmp	r0, #3
 8003484:	f43f aeed 	beq.w	8003262 <find_volume+0x82>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003488:	b108      	cbz	r0, 800348e <find_volume+0x2ae>
 800348a:	200d      	movs	r0, #13
 800348c:	e6cd      	b.n	800322a <find_volume+0x4a>
	bsect = 0;
 800348e:	4605      	mov	r5, r0
 8003490:	e711      	b.n	80032b6 <find_volume+0xd6>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003492:	f1be 0f00 	cmp.w	lr, #0
 8003496:	d0f8      	beq.n	800348a <find_volume+0x2aa>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003498:	f241 0c24 	movw	ip, #4132	; 0x1024
 800349c:	4442      	add	r2, r8
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800349e:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 80034a0:	f844 200c 	str.w	r2, [r4, ip]
 80034a4:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80034a8:	bf1b      	ittet	ne
 80034aa:	18d2      	addne	r2, r2, r3
 80034ac:	f003 0301 	andne.w	r3, r3, #1
 80034b0:	4613      	moveq	r3, r2
 80034b2:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80034b6:	e781      	b.n	80033bc <find_volume+0x1dc>
	if (vol < 0) return FR_INVALID_DRIVE;
 80034b8:	200b      	movs	r0, #11
 80034ba:	e6b6      	b.n	800322a <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80034bc:	200c      	movs	r0, #12
 80034be:	e6b4      	b.n	800322a <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 80034c0:	4628      	mov	r0, r5
 80034c2:	e6b2      	b.n	800322a <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80034c4:	2003      	movs	r0, #3
 80034c6:	e6b0      	b.n	800322a <find_volume+0x4a>
 80034c8:	200000b4 	.word	0x200000b4
 80034cc:	41615252 	.word	0x41615252
 80034d0:	200000d0 	.word	0x200000d0
 80034d4:	200000b8 	.word	0x200000b8

080034d8 <sync_fs>:
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4604      	mov	r4, r0
	res = sync_window(fs);
 80034dc:	f7ff fe2b 	bl	8003136 <sync_window>
 80034e0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80034e2:	2800      	cmp	r0, #0
 80034e4:	d153      	bne.n	800358e <sync_fs+0xb6>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80034e6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d144      	bne.n	800357a <sync_fs+0xa2>
 80034f0:	f241 0605 	movw	r6, #4101	; 0x1005
 80034f4:	5da3      	ldrb	r3, [r4, r6]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d13f      	bne.n	800357a <sync_fs+0xa2>
			mem_set(fs->win.d8, 0, SS(fs));
 80034fa:	f241 020a 	movw	r2, #4106	; 0x100a
 80034fe:	4601      	mov	r1, r0
 8003500:	5aa2      	ldrh	r2, [r4, r2]
 8003502:	4620      	mov	r0, r4
 8003504:	f7ff fcda 	bl	8002ebc <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003508:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800350c:	f8a4 21fe 	strh.w	r2, [r4, #510]	; 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003510:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <sync_fs+0xb8>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003512:	f241 0001 	movw	r0, #4097	; 0x1001
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003516:	6022      	str	r2, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003518:	f102 52ff 	add.w	r2, r2, #534773760	; 0x1fe00000
 800351c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8003520:	3220      	adds	r2, #32
 8003522:	f8c4 21e4 	str.w	r2, [r4, #484]	; 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003526:	f241 0210 	movw	r2, #4112	; 0x1010
 800352a:	58a2      	ldr	r2, [r4, r2]
 800352c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003530:	f884 21e8 	strb.w	r2, [r4, #488]	; 0x1e8
 8003534:	f884 11e9 	strb.w	r1, [r4, #489]	; 0x1e9
 8003538:	0c11      	lsrs	r1, r2, #16
 800353a:	0e12      	lsrs	r2, r2, #24
 800353c:	f884 21eb 	strb.w	r2, [r4, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003540:	f241 020c 	movw	r2, #4108	; 0x100c
 8003544:	58a2      	ldr	r2, [r4, r2]
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8003546:	f884 11ea 	strb.w	r1, [r4, #490]	; 0x1ea
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800354a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800354e:	f884 21ec 	strb.w	r2, [r4, #492]	; 0x1ec
 8003552:	f884 11ed 	strb.w	r1, [r4, #493]	; 0x1ed
 8003556:	0c11      	lsrs	r1, r2, #16
 8003558:	0e12      	lsrs	r2, r2, #24
 800355a:	f884 21ef 	strb.w	r2, [r4, #495]	; 0x1ef
			fs->winsect = fs->volbase + 1;
 800355e:	f241 021c 	movw	r2, #4124	; 0x101c
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003562:	f884 11ee 	strb.w	r1, [r4, #494]	; 0x1ee
			fs->winsect = fs->volbase + 1;
 8003566:	f241 012c 	movw	r1, #4140	; 0x102c
 800356a:	58a2      	ldr	r2, [r4, r2]
 800356c:	3201      	adds	r2, #1
 800356e:	5062      	str	r2, [r4, r1]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8003570:	5c20      	ldrb	r0, [r4, r0]
 8003572:	4621      	mov	r1, r4
 8003574:	f7ff fc7e 	bl	8002e74 <disk_write>
			fs->fsi_flag = 0;
 8003578:	55a5      	strb	r5, [r4, r6]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800357a:	2200      	movs	r2, #0
 800357c:	f241 0301 	movw	r3, #4097	; 0x1001
 8003580:	4611      	mov	r1, r2
 8003582:	5ce0      	ldrb	r0, [r4, r3]
 8003584:	f7ff fc84 	bl	8002e90 <disk_ioctl>
			res = FR_DISK_ERR;
 8003588:	3000      	adds	r0, #0
 800358a:	bf18      	it	ne
 800358c:	2001      	movne	r0, #1
}
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	41615252 	.word	0x41615252

08003594 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003594:	f241 0314 	movw	r3, #4116	; 0x1014
 8003598:	58c3      	ldr	r3, [r0, r3]
	clst -= 2;
 800359a:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800359c:	3b02      	subs	r3, #2
 800359e:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 80035a0:	bf81      	itttt	hi
 80035a2:	f241 0302 	movwhi	r3, #4098	; 0x1002
 80035a6:	f241 0228 	movwhi	r2, #4136	; 0x1028
 80035aa:	5cc3      	ldrbhi	r3, [r0, r3]
 80035ac:	5880      	ldrhi	r0, [r0, r2]
 80035ae:	bf8c      	ite	hi
 80035b0:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80035b4:	2000      	movls	r0, #0
}
 80035b6:	4770      	bx	lr

080035b8 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80035b8:	2901      	cmp	r1, #1
{
 80035ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035be:	4605      	mov	r5, r0
 80035c0:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80035c2:	d97e      	bls.n	80036c2 <get_fat+0x10a>
 80035c4:	f241 0314 	movw	r3, #4116	; 0x1014
 80035c8:	58c3      	ldr	r3, [r0, r3]
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d979      	bls.n	80036c2 <get_fat+0x10a>
		switch (fs->fs_type) {
 80035ce:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d038      	beq.n	800364a <get_fat+0x92>
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d050      	beq.n	800367e <get_fat+0xc6>
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d170      	bne.n	80036c2 <get_fat+0x10a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035e0:	f241 080a 	movw	r8, #4106	; 0x100a
 80035e4:	f830 3008 	ldrh.w	r3, [r0, r8]
			bc = (UINT)clst; bc += bc / 2;
 80035e8:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80035ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80035f0:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
 80035f4:	f8d9 1000 	ldr.w	r1, [r9]
 80035f8:	4419      	add	r1, r3
 80035fa:	f7ff fda4 	bl	8003146 <move_window>
 80035fe:	b118      	cbz	r0, 8003608 <get_fat+0x50>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003600:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8003608:	f835 1008 	ldrh.w	r1, [r5, r8]
 800360c:	1c67      	adds	r7, r4, #1
 800360e:	fbb4 f3f1 	udiv	r3, r4, r1
 8003612:	fb01 4413 	mls	r4, r1, r3, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003616:	fbb7 f1f1 	udiv	r1, r7, r1
 800361a:	f8d9 3000 	ldr.w	r3, [r9]
 800361e:	4628      	mov	r0, r5
 8003620:	4419      	add	r1, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 8003622:	5d2c      	ldrb	r4, [r5, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003624:	f7ff fd8f 	bl	8003146 <move_window>
 8003628:	2800      	cmp	r0, #0
 800362a:	d1e9      	bne.n	8003600 <get_fat+0x48>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800362c:	f835 2008 	ldrh.w	r2, [r5, r8]
 8003630:	fbb7 f3f2 	udiv	r3, r7, r2
 8003634:	fb02 7313 	mls	r3, r2, r3, r7
 8003638:	5ce8      	ldrb	r0, [r5, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800363a:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800363c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8003640:	bf4c      	ite	mi
 8003642:	0900      	lsrmi	r0, r0, #4
 8003644:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003648:	e7dc      	b.n	8003604 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800364a:	f241 040a 	movw	r4, #4106	; 0x100a
 800364e:	5b03      	ldrh	r3, [r0, r4]
 8003650:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	fbb1 f3f3 	udiv	r3, r1, r3
 800365a:	6811      	ldr	r1, [r2, #0]
 800365c:	4419      	add	r1, r3
 800365e:	f7ff fd72 	bl	8003146 <move_window>
 8003662:	2800      	cmp	r0, #0
 8003664:	d1cc      	bne.n	8003600 <get_fat+0x48>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003666:	5b2a      	ldrh	r2, [r5, r4]
 8003668:	0076      	lsls	r6, r6, #1
 800366a:	fbb6 f3f2 	udiv	r3, r6, r2
 800366e:	fb02 6613 	mls	r6, r2, r3, r6
			val = LD_WORD(p);
 8003672:	19ab      	adds	r3, r5, r6
 8003674:	785b      	ldrb	r3, [r3, #1]
 8003676:	5da8      	ldrb	r0, [r5, r6]
 8003678:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800367c:	e7c2      	b.n	8003604 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800367e:	f241 040a 	movw	r4, #4106	; 0x100a
 8003682:	5b03      	ldrh	r3, [r0, r4]
 8003684:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	fbb1 f3f3 	udiv	r3, r1, r3
 800368e:	6811      	ldr	r1, [r2, #0]
 8003690:	4419      	add	r1, r3
 8003692:	f7ff fd58 	bl	8003146 <move_window>
 8003696:	2800      	cmp	r0, #0
 8003698:	d1b2      	bne.n	8003600 <get_fat+0x48>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800369a:	5b2a      	ldrh	r2, [r5, r4]
 800369c:	00b6      	lsls	r6, r6, #2
 800369e:	fbb6 f3f2 	udiv	r3, r6, r2
 80036a2:	fb02 6613 	mls	r6, r2, r3, r6
 80036a6:	19ab      	adds	r3, r5, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80036a8:	7898      	ldrb	r0, [r3, #2]
 80036aa:	78da      	ldrb	r2, [r3, #3]
 80036ac:	0400      	lsls	r0, r0, #16
 80036ae:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80036b2:	5daa      	ldrb	r2, [r5, r6]
 80036b4:	785b      	ldrb	r3, [r3, #1]
 80036b6:	4310      	orrs	r0, r2
 80036b8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80036bc:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 80036c0:	e7a0      	b.n	8003604 <get_fat+0x4c>
			val = 1;	/* Internal error */
 80036c2:	2001      	movs	r0, #1
	return val;
 80036c4:	e79e      	b.n	8003604 <get_fat+0x4c>

080036c6 <dir_sdi>:
{
 80036c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ca:	4605      	mov	r5, r0
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80036cc:	6884      	ldr	r4, [r0, #8]
{
 80036ce:	460e      	mov	r6, r1
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80036d0:	2c01      	cmp	r4, #1
	dp->index = (WORD)idx;	/* Current index */
 80036d2:	80e9      	strh	r1, [r5, #6]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80036d4:	d102      	bne.n	80036dc <dir_sdi+0x16>
		return FR_INT_ERR;
 80036d6:	2002      	movs	r0, #2
}
 80036d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80036dc:	f241 0214 	movw	r2, #4116	; 0x1014
 80036e0:	6803      	ldr	r3, [r0, #0]
 80036e2:	589a      	ldr	r2, [r3, r2]
 80036e4:	42a2      	cmp	r2, r4
 80036e6:	d9f6      	bls.n	80036d6 <dir_sdi+0x10>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80036e8:	bb1c      	cbnz	r4, 8003732 <dir_sdi+0x6c>
 80036ea:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	2a03      	cmp	r2, #3
 80036f2:	d103      	bne.n	80036fc <dir_sdi+0x36>
		clst = dp->fs->dirbase;
 80036f4:	f241 0224 	movw	r2, #4132	; 0x1024
 80036f8:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80036fa:	b9da      	cbnz	r2, 8003734 <dir_sdi+0x6e>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80036fc:	f241 0208 	movw	r2, #4104	; 0x1008
 8003700:	5a9a      	ldrh	r2, [r3, r2]
 8003702:	42b2      	cmp	r2, r6
 8003704:	d9e7      	bls.n	80036d6 <dir_sdi+0x10>
		sect = dp->fs->dirbase;
 8003706:	f241 0224 	movw	r2, #4132	; 0x1024
 800370a:	5898      	ldr	r0, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 800370c:	60ec      	str	r4, [r5, #12]
	if (!sect) return FR_INT_ERR;
 800370e:	2800      	cmp	r0, #0
 8003710:	d0e1      	beq.n	80036d6 <dir_sdi+0x10>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003712:	f241 020a 	movw	r2, #4106	; 0x100a
 8003716:	682b      	ldr	r3, [r5, #0]
 8003718:	5a99      	ldrh	r1, [r3, r2]
 800371a:	0949      	lsrs	r1, r1, #5
 800371c:	fbb6 f2f1 	udiv	r2, r6, r1
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003720:	fb01 6612 	mls	r6, r1, r2, r6
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8003724:	4410      	add	r0, r2
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8003726:	eb03 1346 	add.w	r3, r3, r6, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800372a:	6128      	str	r0, [r5, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800372c:	616b      	str	r3, [r5, #20]
	return FR_OK;
 800372e:	2000      	movs	r0, #0
 8003730:	e7d2      	b.n	80036d8 <dir_sdi+0x12>
 8003732:	4622      	mov	r2, r4
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003734:	f241 010a 	movw	r1, #4106	; 0x100a
 8003738:	f241 0002 	movw	r0, #4098	; 0x1002
		while (idx >= ic) {	/* Follow cluster chain */
 800373c:	4614      	mov	r4, r2
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800373e:	f241 0814 	movw	r8, #4116	; 0x1014
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003742:	5a5f      	ldrh	r7, [r3, r1]
 8003744:	0979      	lsrs	r1, r7, #5
 8003746:	5c1f      	ldrb	r7, [r3, r0]
 8003748:	434f      	muls	r7, r1
		while (idx >= ic) {	/* Follow cluster chain */
 800374a:	42be      	cmp	r6, r7
 800374c:	6828      	ldr	r0, [r5, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800374e:	4621      	mov	r1, r4
		while (idx >= ic) {	/* Follow cluster chain */
 8003750:	d202      	bcs.n	8003758 <dir_sdi+0x92>
		sect = clust2sect(dp->fs, clst);
 8003752:	f7ff ff1f 	bl	8003594 <clust2sect>
 8003756:	e7d9      	b.n	800370c <dir_sdi+0x46>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8003758:	f7ff ff2e 	bl	80035b8 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800375c:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800375e:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003760:	d008      	beq.n	8003774 <dir_sdi+0xae>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8003762:	2801      	cmp	r0, #1
 8003764:	d9b7      	bls.n	80036d6 <dir_sdi+0x10>
 8003766:	682b      	ldr	r3, [r5, #0]
 8003768:	f853 3008 	ldr.w	r3, [r3, r8]
 800376c:	4283      	cmp	r3, r0
 800376e:	d9b2      	bls.n	80036d6 <dir_sdi+0x10>
			idx -= ic;
 8003770:	1bf6      	subs	r6, r6, r7
 8003772:	e7ea      	b.n	800374a <dir_sdi+0x84>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003774:	2001      	movs	r0, #1
 8003776:	e7af      	b.n	80036d8 <dir_sdi+0x12>

08003778 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003778:	2901      	cmp	r1, #1
{
 800377a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800377e:	4604      	mov	r4, r0
 8003780:	460d      	mov	r5, r1
 8003782:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003784:	f240 8098 	bls.w	80038b8 <put_fat+0x140>
 8003788:	f241 0314 	movw	r3, #4116	; 0x1014
 800378c:	58c3      	ldr	r3, [r0, r3]
 800378e:	428b      	cmp	r3, r1
 8003790:	f240 8092 	bls.w	80038b8 <put_fat+0x140>
		switch (fs->fs_type) {
 8003794:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b02      	cmp	r3, #2
 800379c:	d04e      	beq.n	800383c <put_fat+0xc4>
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d066      	beq.n	8003870 <put_fat+0xf8>
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	f040 8088 	bne.w	80038b8 <put_fat+0x140>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80037a8:	f241 0a0a 	movw	sl, #4106	; 0x100a
 80037ac:	f830 300a 	ldrh.w	r3, [r0, sl]
			bc = (UINT)clst; bc += bc / 2;
 80037b0:	eb01 0951 	add.w	r9, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80037b4:	fbb9 f3f3 	udiv	r3, r9, r3
 80037b8:	f500 5881 	add.w	r8, r0, #4128	; 0x1020
 80037bc:	f8d8 1000 	ldr.w	r1, [r8]
 80037c0:	4419      	add	r1, r3
 80037c2:	f7ff fcc0 	bl	8003146 <move_window>
			if (res != FR_OK) break;
 80037c6:	bb80      	cbnz	r0, 800382a <put_fat+0xb2>
			p = &fs->win.d8[bc++ % SS(fs)];
 80037c8:	f834 100a 	ldrh.w	r1, [r4, sl]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80037cc:	f015 0501 	ands.w	r5, r5, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 80037d0:	fbb9 f2f1 	udiv	r2, r9, r1
 80037d4:	fb01 9212 	mls	r2, r1, r2, r9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80037d8:	bf17      	itett	ne
 80037da:	5ca3      	ldrbne	r3, [r4, r2]
 80037dc:	b2f3      	uxtbeq	r3, r6
 80037de:	f003 000f 	andne.w	r0, r3, #15
 80037e2:	0133      	lslne	r3, r6, #4
 80037e4:	bf1c      	itt	ne
 80037e6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 80037ea:	4303      	orrne	r3, r0
 80037ec:	54a3      	strb	r3, [r4, r2]
			fs->wflag = 1;
 80037ee:	f241 0304 	movw	r3, #4100	; 0x1004
 80037f2:	2201      	movs	r2, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 80037f4:	f109 0701 	add.w	r7, r9, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80037f8:	fbb7 f1f1 	udiv	r1, r7, r1
			fs->wflag = 1;
 80037fc:	54e2      	strb	r2, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80037fe:	f8d8 3000 	ldr.w	r3, [r8]
 8003802:	4620      	mov	r0, r4
 8003804:	4419      	add	r1, r3
 8003806:	f7ff fc9e 	bl	8003146 <move_window>
			if (res != FR_OK) break;
 800380a:	b970      	cbnz	r0, 800382a <put_fat+0xb2>
			p = &fs->win.d8[bc % SS(fs)];
 800380c:	f241 030a 	movw	r3, #4106	; 0x100a
 8003810:	5ae2      	ldrh	r2, [r4, r3]
 8003812:	fbb7 f3f2 	udiv	r3, r7, r2
 8003816:	fb02 7713 	mls	r7, r2, r3, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800381a:	b145      	cbz	r5, 800382e <put_fat+0xb6>
 800381c:	f3c6 1207 	ubfx	r2, r6, #4, #8
 8003820:	55e2      	strb	r2, [r4, r7]
			fs->wflag = 1;
 8003822:	f241 0304 	movw	r3, #4100	; 0x1004
 8003826:	2201      	movs	r2, #1
 8003828:	54e2      	strb	r2, [r4, r3]
}
 800382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800382e:	5de2      	ldrb	r2, [r4, r7]
 8003830:	f3c6 2603 	ubfx	r6, r6, #8, #4
 8003834:	f022 020f 	bic.w	r2, r2, #15
 8003838:	4332      	orrs	r2, r6
 800383a:	e7f1      	b.n	8003820 <put_fat+0xa8>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800383c:	f241 070a 	movw	r7, #4106	; 0x100a
 8003840:	5bc3      	ldrh	r3, [r0, r7]
 8003842:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	fbb1 f3f3 	udiv	r3, r1, r3
 800384c:	6811      	ldr	r1, [r2, #0]
 800384e:	4419      	add	r1, r3
 8003850:	f7ff fc79 	bl	8003146 <move_window>
			if (res != FR_OK) break;
 8003854:	2800      	cmp	r0, #0
 8003856:	d1e8      	bne.n	800382a <put_fat+0xb2>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003858:	5be2      	ldrh	r2, [r4, r7]
 800385a:	006d      	lsls	r5, r5, #1
 800385c:	fbb5 f3f2 	udiv	r3, r5, r2
 8003860:	fb02 5513 	mls	r5, r2, r3, r5
			ST_WORD(p, (WORD)val);
 8003864:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8003868:	5566      	strb	r6, [r4, r5]
 800386a:	4425      	add	r5, r4
 800386c:	706a      	strb	r2, [r5, #1]
 800386e:	e7d8      	b.n	8003822 <put_fat+0xaa>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003870:	f241 070a 	movw	r7, #4106	; 0x100a
 8003874:	5bc3      	ldrh	r3, [r0, r7]
 8003876:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003880:	6811      	ldr	r1, [r2, #0]
 8003882:	4419      	add	r1, r3
 8003884:	f7ff fc5f 	bl	8003146 <move_window>
			if (res != FR_OK) break;
 8003888:	2800      	cmp	r0, #0
 800388a:	d1ce      	bne.n	800382a <put_fat+0xb2>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800388c:	5be2      	ldrh	r2, [r4, r7]
 800388e:	00ad      	lsls	r5, r5, #2
 8003890:	fbb5 f3f2 	udiv	r3, r5, r2
 8003894:	fb02 5513 	mls	r5, r2, r3, r5
 8003898:	1961      	adds	r1, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 800389a:	78cb      	ldrb	r3, [r1, #3]
 800389c:	061b      	lsls	r3, r3, #24
 800389e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80038a2:	ea43 0206 	orr.w	r2, r3, r6
			ST_DWORD(p, val);
 80038a6:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80038aa:	5562      	strb	r2, [r4, r5]
 80038ac:	704b      	strb	r3, [r1, #1]
 80038ae:	0c13      	lsrs	r3, r2, #16
 80038b0:	0e12      	lsrs	r2, r2, #24
 80038b2:	708b      	strb	r3, [r1, #2]
 80038b4:	70ca      	strb	r2, [r1, #3]
 80038b6:	e7b4      	b.n	8003822 <put_fat+0xaa>
			res = FR_INT_ERR;
 80038b8:	2002      	movs	r0, #2
 80038ba:	e7b6      	b.n	800382a <put_fat+0xb2>

080038bc <create_chain>:
{
 80038bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c0:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 80038c2:	460f      	mov	r7, r1
 80038c4:	b9b9      	cbnz	r1, 80038f6 <create_chain+0x3a>
		scl = fs->last_clust;			/* Get suggested start point */
 80038c6:	f241 030c 	movw	r3, #4108	; 0x100c
 80038ca:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80038cc:	b336      	cbz	r6, 800391c <create_chain+0x60>
 80038ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80038d2:	58c3      	ldr	r3, [r0, r3]
 80038d4:	429e      	cmp	r6, r3
 80038d6:	bf28      	it	cs
 80038d8:	2601      	movcs	r6, #1
 80038da:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80038dc:	f505 5880 	add.w	r8, r5, #4096	; 0x1000
 80038e0:	f108 0814 	add.w	r8, r8, #20
 80038e4:	f8d8 3000 	ldr.w	r3, [r8]
		ncl++;							/* Next cluster */
 80038e8:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	d819      	bhi.n	8003922 <create_chain+0x66>
			if (ncl > scl) return 0;	/* No free cluster */
 80038ee:	2e01      	cmp	r6, #1
 80038f0:	d816      	bhi.n	8003920 <create_chain+0x64>
 80038f2:	2400      	movs	r4, #0
 80038f4:	e008      	b.n	8003908 <create_chain+0x4c>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80038f6:	f7ff fe5f 	bl	80035b8 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 80038fa:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80038fc:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 80038fe:	d93e      	bls.n	800397e <create_chain+0xc2>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003900:	1c42      	adds	r2, r0, #1
 8003902:	d104      	bne.n	800390e <create_chain+0x52>
			ncl = 2;
 8003904:	f04f 34ff 	mov.w	r4, #4294967295
}
 8003908:	4620      	mov	r0, r4
 800390a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800390e:	f241 0314 	movw	r3, #4116	; 0x1014
 8003912:	58eb      	ldr	r3, [r5, r3]
 8003914:	4283      	cmp	r3, r0
 8003916:	d8f7      	bhi.n	8003908 <create_chain+0x4c>
 8003918:	463e      	mov	r6, r7
 800391a:	e7de      	b.n	80038da <create_chain+0x1e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800391c:	2601      	movs	r6, #1
 800391e:	e7dc      	b.n	80038da <create_chain+0x1e>
			ncl = 2;
 8003920:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003922:	4621      	mov	r1, r4
 8003924:	4628      	mov	r0, r5
 8003926:	f7ff fe47 	bl	80035b8 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 800392a:	b130      	cbz	r0, 800393a <create_chain+0x7e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800392c:	1c43      	adds	r3, r0, #1
 800392e:	d0e9      	beq.n	8003904 <create_chain+0x48>
 8003930:	2801      	cmp	r0, #1
 8003932:	d024      	beq.n	800397e <create_chain+0xc2>
		if (ncl == scl) return 0;		/* No free cluster */
 8003934:	42b4      	cmp	r4, r6
 8003936:	d1d5      	bne.n	80038e4 <create_chain+0x28>
 8003938:	e7db      	b.n	80038f2 <create_chain+0x36>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800393a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800393e:	4621      	mov	r1, r4
 8003940:	4628      	mov	r0, r5
 8003942:	f7ff ff19 	bl	8003778 <put_fat>
	if (res == FR_OK && clst != 0) {
 8003946:	b9c0      	cbnz	r0, 800397a <create_chain+0xbe>
 8003948:	b987      	cbnz	r7, 800396c <create_chain+0xb0>
		fs->last_clust = ncl;			/* Update FSINFO */
 800394a:	f241 030c 	movw	r3, #4108	; 0x100c
		if (fs->free_clust != 0xFFFFFFFF) {
 800394e:	f241 0210 	movw	r2, #4112	; 0x1010
		fs->last_clust = ncl;			/* Update FSINFO */
 8003952:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003954:	58ab      	ldr	r3, [r5, r2]
 8003956:	1c59      	adds	r1, r3, #1
 8003958:	d0d6      	beq.n	8003908 <create_chain+0x4c>
			fs->free_clust--;
 800395a:	3b01      	subs	r3, #1
 800395c:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 800395e:	f241 0205 	movw	r2, #4101	; 0x1005
 8003962:	5cab      	ldrb	r3, [r5, r2]
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	54ab      	strb	r3, [r5, r2]
 800396a:	e7cd      	b.n	8003908 <create_chain+0x4c>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800396c:	4622      	mov	r2, r4
 800396e:	4639      	mov	r1, r7
 8003970:	4628      	mov	r0, r5
 8003972:	f7ff ff01 	bl	8003778 <put_fat>
	if (res == FR_OK) {
 8003976:	2800      	cmp	r0, #0
 8003978:	d0e7      	beq.n	800394a <create_chain+0x8e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800397a:	2801      	cmp	r0, #1
 800397c:	d0c2      	beq.n	8003904 <create_chain+0x48>
 800397e:	2401      	movs	r4, #1
 8003980:	e7c2      	b.n	8003908 <create_chain+0x4c>

08003982 <dir_next>:
{
 8003982:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = dp->index + 1;
 8003986:	88c6      	ldrh	r6, [r0, #6]
{
 8003988:	4604      	mov	r4, r0
	i = dp->index + 1;
 800398a:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800398c:	b2b3      	uxth	r3, r6
{
 800398e:	4688      	mov	r8, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003990:	b913      	cbnz	r3, 8003998 <dir_next+0x16>
		return FR_NO_FILE;
 8003992:	2004      	movs	r0, #4
}
 8003994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003998:	6902      	ldr	r2, [r0, #16]
 800399a:	2a00      	cmp	r2, #0
 800399c:	d0f9      	beq.n	8003992 <dir_next+0x10>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800399e:	f241 030a 	movw	r3, #4106	; 0x100a
 80039a2:	6800      	ldr	r0, [r0, #0]
 80039a4:	5ac3      	ldrh	r3, [r0, r3]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	fbb6 f5f3 	udiv	r5, r6, r3
 80039ac:	fb03 6315 	mls	r3, r3, r5, r6
 80039b0:	b943      	cbnz	r3, 80039c4 <dir_next+0x42>
		if (!dp->clust) {		/* Static table */
 80039b2:	68e1      	ldr	r1, [r4, #12]
		dp->sect++;					/* Next sector */
 80039b4:	3201      	adds	r2, #1
 80039b6:	6122      	str	r2, [r4, #16]
		if (!dp->clust) {		/* Static table */
 80039b8:	b999      	cbnz	r1, 80039e2 <dir_next+0x60>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80039ba:	f241 0308 	movw	r3, #4104	; 0x1008
 80039be:	5ac3      	ldrh	r3, [r0, r3]
 80039c0:	42b3      	cmp	r3, r6
 80039c2:	d9e6      	bls.n	8003992 <dir_next+0x10>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80039c4:	f241 020a 	movw	r2, #4106	; 0x100a
 80039c8:	6823      	ldr	r3, [r4, #0]
	dp->index = (WORD)i;	/* Current index */
 80039ca:	80e6      	strh	r6, [r4, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80039cc:	5a9a      	ldrh	r2, [r3, r2]
	return FR_OK;
 80039ce:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80039d0:	0952      	lsrs	r2, r2, #5
 80039d2:	fbb6 f1f2 	udiv	r1, r6, r2
 80039d6:	fb02 6611 	mls	r6, r2, r1, r6
 80039da:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 80039de:	6163      	str	r3, [r4, #20]
	return FR_OK;
 80039e0:	e7d8      	b.n	8003994 <dir_next+0x12>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80039e2:	f241 0302 	movw	r3, #4098	; 0x1002
 80039e6:	5cc7      	ldrb	r7, [r0, r3]
 80039e8:	3f01      	subs	r7, #1
 80039ea:	402f      	ands	r7, r5
 80039ec:	d1ea      	bne.n	80039c4 <dir_next+0x42>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80039ee:	f7ff fde3 	bl	80035b8 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 80039f2:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80039f4:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 80039f6:	d801      	bhi.n	80039fc <dir_next+0x7a>
 80039f8:	2002      	movs	r0, #2
 80039fa:	e7cb      	b.n	8003994 <dir_next+0x12>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80039fc:	1c42      	adds	r2, r0, #1
 80039fe:	d101      	bne.n	8003a04 <dir_next+0x82>
 8003a00:	2001      	movs	r0, #1
 8003a02:	e7c7      	b.n	8003994 <dir_next+0x12>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8003a04:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a08:	6820      	ldr	r0, [r4, #0]
 8003a0a:	58c3      	ldr	r3, [r0, r3]
 8003a0c:	42ab      	cmp	r3, r5
 8003a0e:	d832      	bhi.n	8003a76 <dir_next+0xf4>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8003a10:	f1b8 0f00 	cmp.w	r8, #0
 8003a14:	d0bd      	beq.n	8003992 <dir_next+0x10>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8003a16:	68e1      	ldr	r1, [r4, #12]
 8003a18:	f7ff ff50 	bl	80038bc <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d03e      	beq.n	8003aa0 <dir_next+0x11e>
					if (clst == 1) return FR_INT_ERR;
 8003a22:	2801      	cmp	r0, #1
 8003a24:	d0e8      	beq.n	80039f8 <dir_next+0x76>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8003a26:	1c43      	adds	r3, r0, #1
 8003a28:	d0ea      	beq.n	8003a00 <dir_next+0x7e>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	f7ff fb83 	bl	8003136 <sync_window>
 8003a30:	4601      	mov	r1, r0
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d1e4      	bne.n	8003a00 <dir_next+0x7e>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003a36:	f241 020a 	movw	r2, #4106	; 0x100a
 8003a3a:	6820      	ldr	r0, [r4, #0]
						dp->fs->wflag = 1;
 8003a3c:	f241 0904 	movw	r9, #4100	; 0x1004
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8003a40:	5a82      	ldrh	r2, [r0, r2]
 8003a42:	f7ff fa3b 	bl	8002ebc <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003a46:	f8d4 8000 	ldr.w	r8, [r4]
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	f7ff fda1 	bl	8003594 <clust2sect>
 8003a52:	f241 032c 	movw	r3, #4140	; 0x102c
						dp->fs->wflag = 1;
 8003a56:	f04f 0a01 	mov.w	sl, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003a5a:	f848 0003 	str.w	r0, [r8, r3]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003a5e:	f241 0802 	movw	r8, #4098	; 0x1002
 8003a62:	6820      	ldr	r0, [r4, #0]
 8003a64:	f810 3008 	ldrb.w	r3, [r0, r8]
 8003a68:	42bb      	cmp	r3, r7
 8003a6a:	d80b      	bhi.n	8003a84 <dir_next+0x102>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003a6c:	f241 022c 	movw	r2, #4140	; 0x102c
 8003a70:	5883      	ldr	r3, [r0, r2]
 8003a72:	1bdf      	subs	r7, r3, r7
 8003a74:	5087      	str	r7, [r0, r2]
				dp->clust = clst;				/* Initialize data for new cluster */
 8003a76:	60e5      	str	r5, [r4, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8003a78:	4629      	mov	r1, r5
 8003a7a:	6820      	ldr	r0, [r4, #0]
 8003a7c:	f7ff fd8a 	bl	8003594 <clust2sect>
 8003a80:	6120      	str	r0, [r4, #16]
 8003a82:	e79f      	b.n	80039c4 <dir_next+0x42>
						dp->fs->wflag = 1;
 8003a84:	f800 a009 	strb.w	sl, [r0, r9]
 8003a88:	f7ff fb22 	bl	80030d0 <sync_window.part.1>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d1b7      	bne.n	8003a00 <dir_next+0x7e>
						dp->fs->winsect++;
 8003a90:	f241 022c 	movw	r2, #4140	; 0x102c
 8003a94:	6821      	ldr	r1, [r4, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003a96:	3701      	adds	r7, #1
						dp->fs->winsect++;
 8003a98:	588b      	ldr	r3, [r1, r2]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	508b      	str	r3, [r1, r2]
 8003a9e:	e7e0      	b.n	8003a62 <dir_next+0xe0>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003aa0:	2007      	movs	r0, #7
 8003aa2:	e777      	b.n	8003994 <dir_next+0x12>

08003aa4 <dir_find.part.7>:
FRESULT dir_find (
 8003aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003aa8:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8003aac:	f64f 78ff 	movw	r8, #65535	; 0xffff
FRESULT dir_find (
 8003ab0:	4605      	mov	r5, r0
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003ab2:	464c      	mov	r4, r9
 8003ab4:	f8a0 8024 	strh.w	r8, [r0, #36]	; 0x24
		res = move_window(dp->fs, dp->sect);
 8003ab8:	6929      	ldr	r1, [r5, #16]
 8003aba:	6828      	ldr	r0, [r5, #0]
 8003abc:	f7ff fb43 	bl	8003146 <move_window>
		if (res != FR_OK) break;
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d15a      	bne.n	8003b7c <dir_find.part.7+0xd8>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003ac6:	696e      	ldr	r6, [r5, #20]
		c = dir[DIR_Name];
 8003ac8:	7833      	ldrb	r3, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d076      	beq.n	8003bbc <dir_find.part.7+0x118>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003ace:	2be5      	cmp	r3, #229	; 0xe5
 8003ad0:	d006      	beq.n	8003ae0 <dir_find.part.7+0x3c>
		a = dir[DIR_Attr] & AM_MASK;
 8003ad2:	7af1      	ldrb	r1, [r6, #11]
 8003ad4:	f001 023f 	and.w	r2, r1, #63	; 0x3f
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003ad8:	0709      	lsls	r1, r1, #28
 8003ada:	d504      	bpl.n	8003ae6 <dir_find.part.7+0x42>
 8003adc:	2a0f      	cmp	r2, #15
 8003ade:	d004      	beq.n	8003aea <dir_find.part.7+0x46>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003ae0:	f8a5 8024 	strh.w	r8, [r5, #36]	; 0x24
 8003ae4:	e050      	b.n	8003b88 <dir_find.part.7+0xe4>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003ae6:	2a0f      	cmp	r2, #15
 8003ae8:	d153      	bne.n	8003b92 <dir_find.part.7+0xee>
				if (dp->lfn) {
 8003aea:	f8d5 b020 	ldr.w	fp, [r5, #32]
 8003aee:	f1bb 0f00 	cmp.w	fp, #0
 8003af2:	d03c      	beq.n	8003b6e <dir_find.part.7+0xca>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003af4:	0658      	lsls	r0, r3, #25
 8003af6:	d545      	bpl.n	8003b84 <dir_find.part.7+0xe0>
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003af8:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003afc:	88eb      	ldrh	r3, [r5, #6]
						sum = dir[LDIR_Chksum];
 8003afe:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8003b02:	84ab      	strh	r3, [r5, #36]	; 0x24
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003b04:	7b73      	ldrb	r3, [r6, #13]
 8003b06:	454b      	cmp	r3, r9
 8003b08:	d13e      	bne.n	8003b88 <dir_find.part.7+0xe4>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003b0a:	7837      	ldrb	r7, [r6, #0]
	s = 0; wc = 1;
 8003b0c:	2001      	movs	r0, #1
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003b0e:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8003b12:	1e7b      	subs	r3, r7, #1
 8003b14:	270d      	movs	r7, #13
	s = 0; wc = 1;
 8003b16:	f04f 0a00 	mov.w	sl, #0
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8003b1a:	435f      	muls	r7, r3
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <dir_find.part.7+0x11c>)
 8003b1e:	f81a 1003 	ldrb.w	r1, [sl, r3]
 8003b22:	1872      	adds	r2, r6, r1
 8003b24:	f892 c001 	ldrb.w	ip, [r2, #1]
 8003b28:	5c72      	ldrb	r2, [r6, r1]
 8003b2a:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
		if (wc) {	/* Last character has not been processed */
 8003b2e:	b368      	cbz	r0, 8003b8c <dir_find.part.7+0xe8>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 fe29 	bl	8004788 <ff_wtoupper>
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003b36:	2ffe      	cmp	r7, #254	; 0xfe
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8003b38:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8003b3a:	d825      	bhi.n	8003b88 <dir_find.part.7+0xe4>
 8003b3c:	1c7a      	adds	r2, r7, #1
 8003b3e:	f83b 0017 	ldrh.w	r0, [fp, r7, lsl #1]
 8003b42:	9200      	str	r2, [sp, #0]
 8003b44:	f000 fe20 	bl	8004788 <ff_wtoupper>
 8003b48:	9901      	ldr	r1, [sp, #4]
 8003b4a:	4281      	cmp	r1, r0
 8003b4c:	d11c      	bne.n	8003b88 <dir_find.part.7+0xe4>
 8003b4e:	9a00      	ldr	r2, [sp, #0]
 8003b50:	4617      	mov	r7, r2
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8003b52:	f10a 0a01 	add.w	sl, sl, #1
 8003b56:	f1ba 0f0d 	cmp.w	sl, #13
 8003b5a:	d1df      	bne.n	8003b1c <dir_find.part.7+0x78>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8003b5c:	7833      	ldrb	r3, [r6, #0]
 8003b5e:	0659      	lsls	r1, r3, #25
 8003b60:	d503      	bpl.n	8003b6a <dir_find.part.7+0xc6>
 8003b62:	b110      	cbz	r0, 8003b6a <dir_find.part.7+0xc6>
 8003b64:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
 8003b68:	b973      	cbnz	r3, 8003b88 <dir_find.part.7+0xe4>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003b6a:	3c01      	subs	r4, #1
 8003b6c:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4628      	mov	r0, r5
 8003b72:	f7ff ff06 	bl	8003982 <dir_next>
	} while (res == FR_OK);
 8003b76:	4607      	mov	r7, r0
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d09d      	beq.n	8003ab8 <dir_find.part.7+0x14>
}
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	b003      	add	sp, #12
 8003b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003b84:	42a3      	cmp	r3, r4
 8003b86:	d0bd      	beq.n	8003b04 <dir_find.part.7+0x60>
 8003b88:	24ff      	movs	r4, #255	; 0xff
 8003b8a:	e7f0      	b.n	8003b6e <dir_find.part.7+0xca>
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8003b8c:	4542      	cmp	r2, r8
 8003b8e:	d0e0      	beq.n	8003b52 <dir_find.part.7+0xae>
 8003b90:	e7fa      	b.n	8003b88 <dir_find.part.7+0xe4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003b92:	b924      	cbnz	r4, 8003b9e <dir_find.part.7+0xfa>
 8003b94:	4630      	mov	r0, r6
 8003b96:	f7ff fa4e 	bl	8003036 <sum_sfn>
 8003b9a:	4548      	cmp	r0, r9
 8003b9c:	d0ee      	beq.n	8003b7c <dir_find.part.7+0xd8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003b9e:	69ab      	ldr	r3, [r5, #24]
 8003ba0:	7ada      	ldrb	r2, [r3, #11]
 8003ba2:	07d2      	lsls	r2, r2, #31
 8003ba4:	d49c      	bmi.n	8003ae0 <dir_find.part.7+0x3c>
 8003ba6:	f103 000b 	add.w	r0, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003baa:	4283      	cmp	r3, r0
 8003bac:	d0e6      	beq.n	8003b7c <dir_find.part.7+0xd8>
 8003bae:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bb6:	4291      	cmp	r1, r2
 8003bb8:	d0f7      	beq.n	8003baa <dir_find.part.7+0x106>
 8003bba:	e791      	b.n	8003ae0 <dir_find.part.7+0x3c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003bbc:	2704      	movs	r7, #4
 8003bbe:	e7dd      	b.n	8003b7c <dir_find.part.7+0xd8>
 8003bc0:	0800ee33 	.word	0x0800ee33

08003bc4 <follow_path>:
{
 8003bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003bc8:	780b      	ldrb	r3, [r1, #0]
{
 8003bca:	4607      	mov	r7, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003bcc:	2b2f      	cmp	r3, #47	; 0x2f
{
 8003bce:	4688      	mov	r8, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003bd0:	d001      	beq.n	8003bd6 <follow_path+0x12>
 8003bd2:	2b5c      	cmp	r3, #92	; 0x5c
 8003bd4:	d101      	bne.n	8003bda <follow_path+0x16>
		path++;
 8003bd6:	f108 0801 	add.w	r8, r8, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8003bda:	2400      	movs	r4, #0
 8003bdc:	60bc      	str	r4, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003bde:	f898 3000 	ldrb.w	r3, [r8]
 8003be2:	2b1f      	cmp	r3, #31
 8003be4:	f200 80c4 	bhi.w	8003d70 <follow_path+0x1ac>
		res = dir_sdi(dp, 0);
 8003be8:	4621      	mov	r1, r4
 8003bea:	4638      	mov	r0, r7
 8003bec:	f7ff fd6b 	bl	80036c6 <dir_sdi>
		dp->dir = 0;
 8003bf0:	617c      	str	r4, [r7, #20]
}
 8003bf2:	b003      	add	sp, #12
 8003bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lfn[di++] = w;					/* Store the Unicode character */
 8003bf8:	f825 0f02 	strh.w	r0, [r5, #2]!
 8003bfc:	4646      	mov	r6, r8
 8003bfe:	e0c7      	b.n	8003d90 <follow_path+0x1cc>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003c00:	281f      	cmp	r0, #31
	*path = &p[si];						/* Return pointer to the next segment */
 8003c02:	44a0      	add	r8, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003c04:	bf8c      	ite	hi
 8003c06:	2400      	movhi	r4, #0
 8003c08:	2404      	movls	r4, #4
 8003c0a:	eb0b 0246 	add.w	r2, fp, r6, lsl #1
	while (di) {						/* Strip trailing spaces and dots */
 8003c0e:	2e00      	cmp	r6, #0
 8003c10:	f000 80dd 	beq.w	8003dce <follow_path+0x20a>
		w = lfn[di - 1];
 8003c14:	f832 1d02 	ldrh.w	r1, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8003c18:	2920      	cmp	r1, #32
 8003c1a:	d002      	beq.n	8003c22 <follow_path+0x5e>
 8003c1c:	292e      	cmp	r1, #46	; 0x2e
 8003c1e:	f040 80da 	bne.w	8003dd6 <follow_path+0x212>
		di--;
 8003c22:	3e01      	subs	r6, #1
 8003c24:	e7f3      	b.n	8003c0e <follow_path+0x4a>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003c26:	3101      	adds	r1, #1
 8003c28:	f83b 2011 	ldrh.w	r2, [fp, r1, lsl #1]
 8003c2c:	2a20      	cmp	r2, #32
 8003c2e:	d0fa      	beq.n	8003c26 <follow_path+0x62>
 8003c30:	2a2e      	cmp	r2, #46	; 0x2e
 8003c32:	d0f8      	beq.n	8003c26 <follow_path+0x62>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003c34:	b109      	cbz	r1, 8003c3a <follow_path+0x76>
 8003c36:	f044 0403 	orr.w	r4, r4, #3
 8003c3a:	464a      	mov	r2, r9
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8003c3c:	f832 0d02 	ldrh.w	r0, [r2, #-2]!
 8003c40:	282e      	cmp	r0, #46	; 0x2e
 8003c42:	d001      	beq.n	8003c48 <follow_path+0x84>
 8003c44:	3e01      	subs	r6, #1
 8003c46:	d1f9      	bne.n	8003c3c <follow_path+0x78>
		dp->fn[i++] = (BYTE)w;
 8003c48:	f04f 0a00 	mov.w	sl, #0
 8003c4c:	f04f 0908 	mov.w	r9, #8
 8003c50:	4655      	mov	r5, sl
		w = lfn[si++];					/* Get an LFN character */
 8003c52:	f83b 0011 	ldrh.w	r0, [fp, r1, lsl #1]
 8003c56:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8003c58:	b1c0      	cbz	r0, 8003c8c <follow_path+0xc8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8003c5a:	2820      	cmp	r0, #32
 8003c5c:	d003      	beq.n	8003c66 <follow_path+0xa2>
 8003c5e:	282e      	cmp	r0, #46	; 0x2e
 8003c60:	d105      	bne.n	8003c6e <follow_path+0xaa>
 8003c62:	42b2      	cmp	r2, r6
 8003c64:	d007      	beq.n	8003c76 <follow_path+0xb2>
			cf |= NS_LOSS | NS_LFN; continue;
 8003c66:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	e7f1      	b.n	8003c52 <follow_path+0x8e>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003c6e:	45ca      	cmp	sl, r9
 8003c70:	d205      	bcs.n	8003c7e <follow_path+0xba>
 8003c72:	42b2      	cmp	r2, r6
 8003c74:	d14c      	bne.n	8003d10 <follow_path+0x14c>
			if (ni == 11) {				/* Long extension */
 8003c76:	f1b9 0f0b 	cmp.w	r9, #11
 8003c7a:	d141      	bne.n	8003d00 <follow_path+0x13c>
 8003c7c:	e002      	b.n	8003c84 <follow_path+0xc0>
 8003c7e:	f1b9 0f0b 	cmp.w	r9, #11
 8003c82:	d138      	bne.n	8003cf6 <follow_path+0x132>
				cf |= NS_LOSS | NS_LFN; break;
 8003c84:	f04f 090b 	mov.w	r9, #11
 8003c88:	f044 0403 	orr.w	r4, r4, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	2ae5      	cmp	r2, #229	; 0xe5
 8003c92:	bf04      	itt	eq
 8003c94:	2205      	moveq	r2, #5
 8003c96:	701a      	strbeq	r2, [r3, #0]
	if (ni == 8) b <<= 2;
 8003c98:	f1b9 0f08 	cmp.w	r9, #8
 8003c9c:	bf04      	itt	eq
 8003c9e:	00ad      	lsleq	r5, r5, #2
 8003ca0:	b2ed      	uxtbeq	r5, r5
 8003ca2:	f005 030c 	and.w	r3, r5, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d003      	beq.n	8003cb2 <follow_path+0xee>
 8003caa:	f005 0203 	and.w	r2, r5, #3
 8003cae:	2a03      	cmp	r2, #3
 8003cb0:	d101      	bne.n	8003cb6 <follow_path+0xf2>
		cf |= NS_LFN;
 8003cb2:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003cb6:	07a1      	lsls	r1, r4, #30
 8003cb8:	d409      	bmi.n	8003cce <follow_path+0x10a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003cba:	f005 0503 	and.w	r5, r5, #3
 8003cbe:	2d01      	cmp	r5, #1
 8003cc0:	bf08      	it	eq
 8003cc2:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	bf08      	it	eq
 8003cca:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003cce:	69bb      	ldr	r3, [r7, #24]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003cd0:	2100      	movs	r1, #0
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8003cd2:	72dc      	strb	r4, [r3, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	f7ff fcf6 	bl	80036c6 <dir_sdi>
	if (res != FR_OK) return res;
 8003cda:	b910      	cbnz	r0, 8003ce2 <follow_path+0x11e>
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f7ff fee1 	bl	8003aa4 <dir_find.part.7>
			ns = dp->fn[NSFLAG];
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8003ce6:	b3a8      	cbz	r0, 8003d54 <follow_path+0x190>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003ce8:	2804      	cmp	r0, #4
 8003cea:	d182      	bne.n	8003bf2 <follow_path+0x2e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003cec:	f013 0f04 	tst.w	r3, #4
 8003cf0:	bf08      	it	eq
 8003cf2:	2005      	moveq	r0, #5
 8003cf4:	e77d      	b.n	8003bf2 <follow_path+0x2e>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003cf6:	42b2      	cmp	r2, r6
 8003cf8:	d002      	beq.n	8003d00 <follow_path+0x13c>
 8003cfa:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8003cfe:	d8c5      	bhi.n	8003c8c <follow_path+0xc8>
			b <<= 2; continue;
 8003d00:	00ad      	lsls	r5, r5, #2
 8003d02:	b2ed      	uxtb	r5, r5
 8003d04:	4632      	mov	r2, r6
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003d06:	f04f 090b 	mov.w	r9, #11
 8003d0a:	f04f 0a08 	mov.w	sl, #8
 8003d0e:	e7ac      	b.n	8003c6a <follow_path+0xa6>
		if (w >= 0x80) {				/* Non ASCII character */
 8003d10:	287f      	cmp	r0, #127	; 0x7f
 8003d12:	d90c      	bls.n	8003d2e <follow_path+0x16a>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8003d14:	2100      	movs	r1, #0
 8003d16:	9201      	str	r2, [sp, #4]
 8003d18:	f000 fd18 	bl	800474c <ff_convert>
 8003d1c:	f044 0402 	orr.w	r4, r4, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8003d20:	9a01      	ldr	r2, [sp, #4]
 8003d22:	b158      	cbz	r0, 8003d3c <follow_path+0x178>
 8003d24:	4b38      	ldr	r3, [pc, #224]	; (8003e08 <follow_path+0x244>)
 8003d26:	4418      	add	r0, r3
 8003d28:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003d2c:	b130      	cbz	r0, 8003d3c <follow_path+0x178>
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <follow_path+0x248>)
	while (*str && *str != chr) str++;
 8003d30:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003d34:	2900      	cmp	r1, #0
 8003d36:	d05a      	beq.n	8003dee <follow_path+0x22a>
 8003d38:	4281      	cmp	r1, r0
 8003d3a:	d1f9      	bne.n	8003d30 <follow_path+0x16c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003d3c:	205f      	movs	r0, #95	; 0x5f
 8003d3e:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	f801 000a 	strb.w	r0, [r1, sl]
 8003d48:	f10a 0a01 	add.w	sl, sl, #1
 8003d4c:	e78d      	b.n	8003c6a <follow_path+0xa6>
					b |= 2;
 8003d4e:	f045 0502 	orr.w	r5, r5, #2
 8003d52:	e7f6      	b.n	8003d42 <follow_path+0x17e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003d54:	075a      	lsls	r2, r3, #29
 8003d56:	f53f af4c 	bmi.w	8003bf2 <follow_path+0x2e>
			dir = dp->dir;						/* Follow the sub-directory */
 8003d5a:	6979      	ldr	r1, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8003d5c:	7acb      	ldrb	r3, [r1, #11]
 8003d5e:	06db      	lsls	r3, r3, #27
 8003d60:	d537      	bpl.n	8003dd2 <follow_path+0x20e>
			dp->sclust = ld_clust(dp->fs, dir);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d68:	7818      	ldrb	r0, [r3, #0]
 8003d6a:	f7ff f9a3 	bl	80030b4 <ld_clust.isra.0>
 8003d6e:	60b8      	str	r0, [r7, #8]
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003d70:	f898 3000 	ldrb.w	r3, [r8]
 8003d74:	4644      	mov	r4, r8
 8003d76:	2b2f      	cmp	r3, #47	; 0x2f
 8003d78:	f108 0801 	add.w	r8, r8, #1
 8003d7c:	d0f8      	beq.n	8003d70 <follow_path+0x1ac>
 8003d7e:	2b5c      	cmp	r3, #92	; 0x5c
 8003d80:	d0f6      	beq.n	8003d70 <follow_path+0x1ac>
	si = di = 0;
 8003d82:	2600      	movs	r6, #0
	lfn = dp->lfn;
 8003d84:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8003d88:	f104 39ff 	add.w	r9, r4, #4294967295
 8003d8c:	f1ab 0502 	sub.w	r5, fp, #2
		w = p[si++];					/* Get a character */
 8003d90:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 8003d94:	f106 0801 	add.w	r8, r6, #1
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003d98:	281f      	cmp	r0, #31
 8003d9a:	f67f af31 	bls.w	8003c00 <follow_path+0x3c>
 8003d9e:	282f      	cmp	r0, #47	; 0x2f
 8003da0:	f43f af2e 	beq.w	8003c00 <follow_path+0x3c>
 8003da4:	285c      	cmp	r0, #92	; 0x5c
 8003da6:	f43f af2b 	beq.w	8003c00 <follow_path+0x3c>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8003daa:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
 8003dae:	d00e      	beq.n	8003dce <follow_path+0x20a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8003db0:	2101      	movs	r1, #1
 8003db2:	f000 fccb 	bl	800474c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8003db6:	b150      	cbz	r0, 8003dce <follow_path+0x20a>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8003db8:	287f      	cmp	r0, #127	; 0x7f
 8003dba:	f63f af1d 	bhi.w	8003bf8 <follow_path+0x34>
 8003dbe:	4914      	ldr	r1, [pc, #80]	; (8003e10 <follow_path+0x24c>)
	while (*str && *str != chr) str++;
 8003dc0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003dc4:	2a00      	cmp	r2, #0
 8003dc6:	f43f af17 	beq.w	8003bf8 <follow_path+0x34>
 8003dca:	4282      	cmp	r2, r0
 8003dcc:	d1f8      	bne.n	8003dc0 <follow_path+0x1fc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003dce:	2006      	movs	r0, #6
 8003dd0:	e70f      	b.n	8003bf2 <follow_path+0x2e>
 8003dd2:	2005      	movs	r0, #5
	return res;
 8003dd4:	e70d      	b.n	8003bf2 <follow_path+0x2e>
	lfn[di] = 0;						/* LFN is created */
 8003dd6:	2500      	movs	r5, #0
	mem_set(dp->fn, ' ', 11);
 8003dd8:	2120      	movs	r1, #32
	lfn[di] = 0;						/* LFN is created */
 8003dda:	f82b 5016 	strh.w	r5, [fp, r6, lsl #1]
	mem_set(dp->fn, ' ', 11);
 8003dde:	220b      	movs	r2, #11
 8003de0:	69b8      	ldr	r0, [r7, #24]
 8003de2:	f7ff f86b 	bl	8002ebc <mem_set>
	lfn[di] = 0;						/* LFN is created */
 8003de6:	eb0b 0946 	add.w	r9, fp, r6, lsl #1
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8003dea:	4629      	mov	r1, r5
 8003dec:	e71c      	b.n	8003c28 <follow_path+0x64>
				if (IsUpper(w)) {		/* ASCII large capital */
 8003dee:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8003df2:	2919      	cmp	r1, #25
 8003df4:	d9ab      	bls.n	8003d4e <follow_path+0x18a>
					if (IsLower(w)) {	/* ASCII small capital */
 8003df6:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8003dfa:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8003dfc:	bf9e      	ittt	ls
 8003dfe:	3820      	subls	r0, #32
 8003e00:	f045 0501 	orrls.w	r5, r5, #1
 8003e04:	b280      	uxthls	r0, r0
 8003e06:	e79c      	b.n	8003d42 <follow_path+0x17e>
 8003e08:	0800edb3 	.word	0x0800edb3
 8003e0c:	0800ee48 	.word	0x0800ee48
 8003e10:	0800ee3f 	.word	0x0800ee3f

08003e14 <dir_register>:
	mem_cpy(sn, fn, 12);
 8003e14:	220c      	movs	r2, #12
{
 8003e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fn = dp->fn; lfn = dp->lfn;
 8003e1a:	6986      	ldr	r6, [r0, #24]
{
 8003e1c:	b086      	sub	sp, #24
	fn = dp->fn; lfn = dp->lfn;
 8003e1e:	6a07      	ldr	r7, [r0, #32]
{
 8003e20:	4604      	mov	r4, r0
	mem_cpy(sn, fn, 12);
 8003e22:	4631      	mov	r1, r6
 8003e24:	eb0d 0002 	add.w	r0, sp, r2
 8003e28:	f7ff f83e 	bl	8002ea8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003e2c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003e30:	07db      	lsls	r3, r3, #31
 8003e32:	f140 8081 	bpl.w	8003f38 <dir_register+0x124>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003e36:	2300      	movs	r3, #0
		for (n = 1; n < 100; n++) {
 8003e38:	f04f 0901 	mov.w	r9, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003e3c:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8004058 <dir_register+0x244>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003e40:	72f3      	strb	r3, [r6, #11]
 8003e42:	6223      	str	r3, [r4, #32]
	mem_cpy(dst, src, 11);
 8003e44:	220b      	movs	r2, #11
 8003e46:	a903      	add	r1, sp, #12
 8003e48:	4630      	mov	r0, r6
 8003e4a:	f7ff f82d 	bl	8002ea8 <mem_cpy>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003e4e:	f1b9 0f05 	cmp.w	r9, #5
 8003e52:	d951      	bls.n	8003ef8 <dir_register+0xe4>
 8003e54:	464b      	mov	r3, r9
 8003e56:	1eb8      	subs	r0, r7, #2
		while (*lfn) {	/* Create a CRC */
 8003e58:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 8003e5c:	2a00      	cmp	r2, #0
 8003e5e:	d13d      	bne.n	8003edc <dir_register+0xc8>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003e60:	2207      	movs	r2, #7
		c = (seq % 16) + '0';
 8003e62:	f003 000f 	and.w	r0, r3, #15
 8003e66:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 8003e6a:	2939      	cmp	r1, #57	; 0x39
 8003e6c:	bf88      	it	hi
 8003e6e:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
		ns[i--] = c;
 8003e72:	3a01      	subs	r2, #1
 8003e74:	a801      	add	r0, sp, #4
 8003e76:	4410      	add	r0, r2
	} while (seq);
 8003e78:	091b      	lsrs	r3, r3, #4
		ns[i--] = c;
 8003e7a:	7041      	strb	r1, [r0, #1]
	} while (seq);
 8003e7c:	d1f1      	bne.n	8003e62 <dir_register+0x4e>
	ns[i] = '~';
 8003e7e:	207e      	movs	r0, #126	; 0x7e
 8003e80:	a906      	add	r1, sp, #24
 8003e82:	4411      	add	r1, r2
 8003e84:	f801 0c14 	strb.w	r0, [r1, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d003      	beq.n	8003e94 <dir_register+0x80>
 8003e8c:	5cf1      	ldrb	r1, [r6, r3]
 8003e8e:	1c58      	adds	r0, r3, #1
 8003e90:	2920      	cmp	r1, #32
 8003e92:	d133      	bne.n	8003efc <dir_register+0xe8>
 8003e94:	4433      	add	r3, r6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003e96:	2a07      	cmp	r2, #7
 8003e98:	bf8f      	iteee	hi
 8003e9a:	2120      	movhi	r1, #32
 8003e9c:	a906      	addls	r1, sp, #24
 8003e9e:	1889      	addls	r1, r1, r2
 8003ea0:	f811 1c14 	ldrbls.w	r1, [r1, #-20]
 8003ea4:	bf98      	it	ls
 8003ea6:	3201      	addls	r2, #1
 8003ea8:	f803 1b01 	strb.w	r1, [r3], #1
	} while (j < 8);
 8003eac:	1b99      	subs	r1, r3, r6
 8003eae:	2907      	cmp	r1, #7
 8003eb0:	d9f1      	bls.n	8003e96 <dir_register+0x82>
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f7ff fc06 	bl	80036c6 <dir_sdi>
	if (res != FR_OK) return res;
 8003eba:	4605      	mov	r5, r0
 8003ebc:	bbb0      	cbnz	r0, 8003f2c <dir_register+0x118>
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	f7ff fdf0 	bl	8003aa4 <dir_find.part.7>
			if (res != FR_OK) break;
 8003ec4:	4605      	mov	r5, r0
 8003ec6:	bb88      	cbnz	r0, 8003f2c <dir_register+0x118>
		for (n = 1; n < 100; n++) {
 8003ec8:	f109 0901 	add.w	r9, r9, #1
 8003ecc:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8003ed0:	d1b8      	bne.n	8003e44 <dir_register+0x30>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8003ed2:	2507      	movs	r5, #7
}
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	b006      	add	sp, #24
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		while (*lfn) {	/* Create a CRC */
 8003edc:	2110      	movs	r1, #16
				sr = (sr << 1) + (wc & 1);
 8003ede:	f002 0501 	and.w	r5, r2, #1
 8003ee2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8003ee6:	03dd      	lsls	r5, r3, #15
 8003ee8:	bf48      	it	mi
 8003eea:	ea83 0308 	eormi.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8003eee:	3901      	subs	r1, #1
				wc >>= 1;
 8003ef0:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8003ef4:	d1f3      	bne.n	8003ede <dir_register+0xca>
 8003ef6:	e7af      	b.n	8003e58 <dir_register+0x44>
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8003ef8:	464b      	mov	r3, r9
 8003efa:	e7b1      	b.n	8003e60 <dir_register+0x4c>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003efc:	4603      	mov	r3, r0
 8003efe:	e7c3      	b.n	8003e88 <dir_register+0x74>
		for (n = 0; lfn[n]; n++) ;
 8003f00:	3601      	adds	r6, #1
 8003f02:	f837 3016 	ldrh.w	r3, [r7, r6, lsl #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1fa      	bne.n	8003f00 <dir_register+0xec>
		nent = (n + 25) / 13;
 8003f0a:	230d      	movs	r3, #13
 8003f0c:	3619      	adds	r6, #25
 8003f0e:	fbb6 f6f3 	udiv	r6, r6, r3
 8003f12:	e016      	b.n	8003f42 <dir_register+0x12e>
		for (n = 0; lfn[n]; n++) ;
 8003f14:	2600      	movs	r6, #0
 8003f16:	e7f4      	b.n	8003f02 <dir_register+0xee>
				n = 0;					/* Not a blank entry. Restart to search */
 8003f18:	4607      	mov	r7, r0
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7ff fd30 	bl	8003982 <dir_next>
		} while (res == FR_OK);
 8003f22:	4605      	mov	r5, r0
 8003f24:	b1a8      	cbz	r0, 8003f52 <dir_register+0x13e>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003f26:	2d04      	cmp	r5, #4
 8003f28:	d0d3      	beq.n	8003ed2 <dir_register+0xbe>
 8003f2a:	e7d3      	b.n	8003ed4 <dir_register+0xc0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8003f2c:	2d04      	cmp	r5, #4
 8003f2e:	d1d1      	bne.n	8003ed4 <dir_register+0xc0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8003f30:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003f34:	72f3      	strb	r3, [r6, #11]
 8003f36:	6227      	str	r7, [r4, #32]
	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8003f38:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003f3c:	079b      	lsls	r3, r3, #30
 8003f3e:	d4e9      	bmi.n	8003f14 <dir_register+0x100>
		nent = 1;
 8003f40:	2601      	movs	r6, #1
	res = dir_sdi(dp, 0);
 8003f42:	2100      	movs	r1, #0
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7ff fbbe 	bl	80036c6 <dir_sdi>
	if (res == FR_OK) {
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d1ea      	bne.n	8003f26 <dir_register+0x112>
		n = 0;
 8003f50:	4607      	mov	r7, r0
			res = move_window(dp->fs, dp->sect);
 8003f52:	6921      	ldr	r1, [r4, #16]
 8003f54:	6820      	ldr	r0, [r4, #0]
 8003f56:	f7ff f8f6 	bl	8003146 <move_window>
			if (res != FR_OK) break;
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	d1e2      	bne.n	8003f26 <dir_register+0x112>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8003f60:	6963      	ldr	r3, [r4, #20]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2be5      	cmp	r3, #229	; 0xe5
 8003f66:	d001      	beq.n	8003f6c <dir_register+0x158>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1d5      	bne.n	8003f18 <dir_register+0x104>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003f6c:	3701      	adds	r7, #1
 8003f6e:	42be      	cmp	r6, r7
 8003f70:	d1d3      	bne.n	8003f1a <dir_register+0x106>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003f72:	3e01      	subs	r6, #1
 8003f74:	d051      	beq.n	800401a <dir_register+0x206>
		res = dir_sdi(dp, dp->index - nent);
 8003f76:	88e1      	ldrh	r1, [r4, #6]
 8003f78:	4620      	mov	r0, r4
 8003f7a:	1b89      	subs	r1, r1, r6
 8003f7c:	f7ff fba3 	bl	80036c6 <dir_sdi>
		if (res == FR_OK) {
 8003f80:	4605      	mov	r5, r0
 8003f82:	2800      	cmp	r0, #0
 8003f84:	d1a6      	bne.n	8003ed4 <dir_register+0xc0>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8003f86:	69a0      	ldr	r0, [r4, #24]
 8003f88:	f7ff f855 	bl	8003036 <sum_sfn>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003f8c:	f64f 79ff 	movw	r9, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8003f90:	4607      	mov	r7, r0
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003f92:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 800405c <dir_register+0x248>
				res = move_window(dp->fs, dp->sect);
 8003f96:	6921      	ldr	r1, [r4, #16]
 8003f98:	6820      	ldr	r0, [r4, #0]
 8003f9a:	f7ff f8d4 	bl	8003146 <move_window>
 8003f9e:	4605      	mov	r5, r0
				if (res != FR_OK) break;
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d197      	bne.n	8003ed4 <dir_register+0xc0>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003fa4:	220f      	movs	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003fa6:	250d      	movs	r5, #13
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003fa8:	6963      	ldr	r3, [r4, #20]
 8003faa:	b2f1      	uxtb	r1, r6
 8003fac:	f8d4 e020 	ldr.w	lr, [r4, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003fb0:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8003fb2:	1e4a      	subs	r2, r1, #1
 8003fb4:	436a      	muls	r2, r5
	s = wc = 0;
 8003fb6:	4605      	mov	r5, r0
	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8003fb8:	735f      	strb	r7, [r3, #13]
	dir[LDIR_Type] = 0;
 8003fba:	7318      	strb	r0, [r3, #12]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8003fbc:	7698      	strb	r0, [r3, #26]
 8003fbe:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003fc0:	4548      	cmp	r0, r9
 8003fc2:	bf18      	it	ne
 8003fc4:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003fc8:	f815 c008 	ldrb.w	ip, [r5, r8]
	} while (++s < 13);
 8003fcc:	f105 0501 	add.w	r5, r5, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003fd0:	f803 000c 	strb.w	r0, [r3, ip]
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8003fd4:	bf18      	it	ne
 8003fd6:	3201      	addne	r2, #1
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003fd8:	ea4f 2a10 	mov.w	sl, r0, lsr #8
 8003fdc:	449c      	add	ip, r3
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	bf08      	it	eq
 8003fe2:	4648      	moveq	r0, r9
	} while (++s < 13);
 8003fe4:	2d0d      	cmp	r5, #13
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8003fe6:	f88c a001 	strb.w	sl, [ip, #1]
	} while (++s < 13);
 8003fea:	d1e9      	bne.n	8003fc0 <dir_register+0x1ac>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8003fec:	4548      	cmp	r0, r9
 8003fee:	d002      	beq.n	8003ff6 <dir_register+0x1e2>
 8003ff0:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8003ff4:	b90a      	cbnz	r2, 8003ffa <dir_register+0x1e6>
 8003ff6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003ffa:	7019      	strb	r1, [r3, #0]
				dp->fs->wflag = 1;
 8003ffc:	f241 0304 	movw	r3, #4100	; 0x1004
 8004000:	2101      	movs	r1, #1
 8004002:	6822      	ldr	r2, [r4, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8004004:	4620      	mov	r0, r4
				dp->fs->wflag = 1;
 8004006:	54d1      	strb	r1, [r2, r3]
				res = dir_next(dp, 0);	/* Next entry */
 8004008:	2100      	movs	r1, #0
 800400a:	f7ff fcba 	bl	8003982 <dir_next>
			} while (res == FR_OK && --nent);
 800400e:	4605      	mov	r5, r0
 8004010:	2800      	cmp	r0, #0
 8004012:	f47f af5f 	bne.w	8003ed4 <dir_register+0xc0>
 8004016:	3e01      	subs	r6, #1
 8004018:	d1bd      	bne.n	8003f96 <dir_register+0x182>
		res = move_window(dp->fs, dp->sect);
 800401a:	6921      	ldr	r1, [r4, #16]
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	f7ff f892 	bl	8003146 <move_window>
		if (res == FR_OK) {
 8004022:	4605      	mov	r5, r0
 8004024:	2800      	cmp	r0, #0
 8004026:	f47f af55 	bne.w	8003ed4 <dir_register+0xc0>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800402a:	4601      	mov	r1, r0
 800402c:	2220      	movs	r2, #32
 800402e:	6960      	ldr	r0, [r4, #20]
 8004030:	f7fe ff44 	bl	8002ebc <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004034:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
 8004038:	220b      	movs	r2, #11
 800403a:	f7fe ff35 	bl	8002ea8 <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800403e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8004042:	7adb      	ldrb	r3, [r3, #11]
			dp->fs->wflag = 1;
 8004044:	2101      	movs	r1, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004046:	f003 0318 	and.w	r3, r3, #24
 800404a:	7313      	strb	r3, [r2, #12]
			dp->fs->wflag = 1;
 800404c:	f241 0304 	movw	r3, #4100	; 0x1004
 8004050:	6822      	ldr	r2, [r4, #0]
 8004052:	54d1      	strb	r1, [r2, r3]
 8004054:	e73e      	b.n	8003ed4 <dir_register+0xc0>
 8004056:	bf00      	nop
 8004058:	00011021 	.word	0x00011021
 800405c:	0800ee33 	.word	0x0800ee33

08004060 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004060:	2901      	cmp	r1, #1
{
 8004062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004066:	4604      	mov	r4, r0
 8004068:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800406a:	d802      	bhi.n	8004072 <remove_chain+0x12>
		res = FR_INT_ERR;
 800406c:	2002      	movs	r0, #2
}
 800406e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004072:	f241 0614 	movw	r6, #4116	; 0x1014
 8004076:	5983      	ldr	r3, [r0, r6]
 8004078:	428b      	cmp	r3, r1
 800407a:	d9f7      	bls.n	800406c <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800407c:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004080:	4406      	add	r6, r0
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004082:	3710      	adds	r7, #16
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004084:	6833      	ldr	r3, [r6, #0]
 8004086:	429d      	cmp	r5, r3
 8004088:	d205      	bcs.n	8004096 <remove_chain+0x36>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800408a:	4629      	mov	r1, r5
 800408c:	4620      	mov	r0, r4
 800408e:	f7ff fa93 	bl	80035b8 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8004092:	4680      	mov	r8, r0
 8004094:	b908      	cbnz	r0, 800409a <remove_chain+0x3a>
		res = FR_INT_ERR;
 8004096:	2000      	movs	r0, #0
 8004098:	e7e9      	b.n	800406e <remove_chain+0xe>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800409a:	2801      	cmp	r0, #1
 800409c:	d0e6      	beq.n	800406c <remove_chain+0xc>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800409e:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040a2:	d013      	beq.n	80040cc <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80040a4:	2200      	movs	r2, #0
 80040a6:	4629      	mov	r1, r5
 80040a8:	4620      	mov	r0, r4
 80040aa:	f7ff fb65 	bl	8003778 <put_fat>
			if (res != FR_OK) break;
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d1dd      	bne.n	800406e <remove_chain+0xe>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	d007      	beq.n	80040c8 <remove_chain+0x68>
				fs->fsi_flag |= 1;
 80040b8:	f241 0205 	movw	r2, #4101	; 0x1005
				fs->free_clust++;
 80040bc:	3301      	adds	r3, #1
 80040be:	603b      	str	r3, [r7, #0]
				fs->fsi_flag |= 1;
 80040c0:	5ca3      	ldrb	r3, [r4, r2]
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	54a3      	strb	r3, [r4, r2]
{
 80040c8:	4645      	mov	r5, r8
 80040ca:	e7db      	b.n	8004084 <remove_chain+0x24>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80040cc:	2001      	movs	r0, #1
 80040ce:	e7ce      	b.n	800406e <remove_chain+0xe>

080040d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80040d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80040d2:	e9cd 1000 	strd	r1, r0, [sp]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80040d6:	a804      	add	r0, sp, #16
 80040d8:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80040dc:	4615      	mov	r5, r2


	vol = get_ldnumber(&rp);
 80040de:	f7fe ffb9 	bl	8003054 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80040e2:	1e06      	subs	r6, r0, #0
 80040e4:	db23      	blt.n	800412e <f_mount+0x5e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80040e6:	4a14      	ldr	r2, [pc, #80]	; (8004138 <f_mount+0x68>)
 80040e8:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]

	if (cfs) {
 80040ec:	b16b      	cbz	r3, 800410a <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80040ee:	4913      	ldr	r1, [pc, #76]	; (800413c <f_mount+0x6c>)
 80040f0:	2400      	movs	r4, #0
 80040f2:	6808      	ldr	r0, [r1, #0]
 80040f4:	4283      	cmp	r3, r0
 80040f6:	bf04      	itt	eq
 80040f8:	2000      	moveq	r0, #0
 80040fa:	6008      	streq	r0, [r1, #0]
 80040fc:	68c8      	ldr	r0, [r1, #12]
 80040fe:	4283      	cmp	r3, r0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004104:	bf08      	it	eq
 8004106:	60cc      	streq	r4, [r1, #12]
		cfs->fs_type = 0;				/* Clear old fs object */
 8004108:	701c      	strb	r4, [r3, #0]
	}

	if (fs) {
 800410a:	9801      	ldr	r0, [sp, #4]
 800410c:	b118      	cbz	r0, 8004116 <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 800410e:	2100      	movs	r1, #0
 8004110:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8004114:	7019      	strb	r1, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004116:	f842 0026 	str.w	r0, [r2, r6, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800411a:	b130      	cbz	r0, 800412a <f_mount+0x5a>
 800411c:	2d01      	cmp	r5, #1
 800411e:	d108      	bne.n	8004132 <f_mount+0x62>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8004120:	2200      	movs	r2, #0
 8004122:	4669      	mov	r1, sp
 8004124:	a801      	add	r0, sp, #4
 8004126:	f7ff f85b 	bl	80031e0 <find_volume>
	LEAVE_FF(fs, res);
}
 800412a:	b004      	add	sp, #16
 800412c:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800412e:	200b      	movs	r0, #11
 8004130:	e7fb      	b.n	800412a <f_mount+0x5a>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004132:	2000      	movs	r0, #0
 8004134:	e7f9      	b.n	800412a <f_mount+0x5a>
 8004136:	bf00      	nop
 8004138:	200000b4 	.word	0x200000b4
 800413c:	200000b8 	.word	0x200000b8

08004140 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	b090      	sub	sp, #64	; 0x40
 8004146:	9101      	str	r1, [sp, #4]
 8004148:	4690      	mov	r8, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800414a:	4605      	mov	r5, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	f000 80a9 	beq.w	80042a4 <f_open+0x164>
	fp->fs = 0;			/* Clear file object */
 8004152:	2300      	movs	r3, #0

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8004154:	f002 021e 	and.w	r2, r2, #30
	fp->fs = 0;			/* Clear file object */
 8004158:	6003      	str	r3, [r0, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800415a:	a901      	add	r1, sp, #4
 800415c:	a806      	add	r0, sp, #24
 800415e:	f7ff f83f 	bl	80031e0 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8004162:	4606      	mov	r6, r0
 8004164:	2800      	cmp	r0, #0
 8004166:	f040 8099 	bne.w	800429c <f_open+0x15c>
		INIT_BUF(dj);
 800416a:	ab03      	add	r3, sp, #12
 800416c:	930c      	str	r3, [sp, #48]	; 0x30
 800416e:	4b5e      	ldr	r3, [pc, #376]	; (80042e8 <f_open+0x1a8>)
		res = follow_path(&dj, path);	/* Follow the file path */
 8004170:	9901      	ldr	r1, [sp, #4]
 8004172:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 8004174:	930e      	str	r3, [sp, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8004176:	f7ff fd25 	bl	8003bc4 <follow_path>
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800417a:	f008 071f 	and.w	r7, r8, #31
		dir = dj.dir;
 800417e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004180:	b948      	cbnz	r0, 8004196 <f_open+0x56>
			if (!dir)	/* Default directory itself */
 8004182:	2c00      	cmp	r4, #0
 8004184:	d060      	beq.n	8004248 <f_open+0x108>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004186:	f017 0f1e 	tst.w	r7, #30
 800418a:	bf14      	ite	ne
 800418c:	2101      	movne	r1, #1
 800418e:	2100      	moveq	r1, #0
 8004190:	a806      	add	r0, sp, #24
 8004192:	f7fe fe9b 	bl	8002ecc <chk_lock>
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004196:	f018 0f1c 	tst.w	r8, #28
 800419a:	d060      	beq.n	800425e <f_open+0x11e>
			if (res != FR_OK) {					/* No file, create new */
 800419c:	2800      	cmp	r0, #0
 800419e:	d055      	beq.n	800424c <f_open+0x10c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80041a0:	2804      	cmp	r0, #4
 80041a2:	d108      	bne.n	80041b6 <f_open+0x76>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80041a4:	4b51      	ldr	r3, [pc, #324]	; (80042ec <f_open+0x1ac>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	b112      	cbz	r2, 80041b0 <f_open+0x70>
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d17b      	bne.n	80042a8 <f_open+0x168>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80041b0:	a806      	add	r0, sp, #24
 80041b2:	f7ff fe2f 	bl	8003e14 <dir_register>
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80041b6:	f047 0708 	orr.w	r7, r7, #8
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d142      	bne.n	8004244 <f_open+0x104>
				dir = dj.dir;					/* New entry */
 80041be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80041c0:	073b      	lsls	r3, r7, #28
 80041c2:	d556      	bpl.n	8004272 <f_open+0x132>
				dw = GET_FATTIME();				/* Created time */
 80041c4:	f7fe fb24 	bl	8002810 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80041c8:	f04f 0800 	mov.w	r8, #0
				ST_DWORD(dir + DIR_CrtTime, dw);
 80041cc:	f3c0 2307 	ubfx	r3, r0, #8, #8
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80041d0:	f8dd 9018 	ldr.w	r9, [sp, #24]
				ST_DWORD(dir + DIR_CrtTime, dw);
 80041d4:	73a0      	strb	r0, [r4, #14]
 80041d6:	73e3      	strb	r3, [r4, #15]
 80041d8:	0c03      	lsrs	r3, r0, #16
 80041da:	0e00      	lsrs	r0, r0, #24
 80041dc:	7423      	strb	r3, [r4, #16]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80041de:	f884 800b 	strb.w	r8, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80041e2:	f884 801c 	strb.w	r8, [r4, #28]
 80041e6:	f884 801d 	strb.w	r8, [r4, #29]
 80041ea:	f884 801e 	strb.w	r8, [r4, #30]
 80041ee:	f884 801f 	strb.w	r8, [r4, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80041f2:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
				ST_DWORD(dir + DIR_CrtTime, dw);
 80041f6:	7460      	strb	r0, [r4, #17]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80041f8:	7818      	ldrb	r0, [r3, #0]
 80041fa:	4621      	mov	r1, r4
 80041fc:	f7fe ff5a 	bl	80030b4 <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 8004200:	f241 0304 	movw	r3, #4100	; 0x1004
 8004204:	2201      	movs	r2, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004206:	f884 801a 	strb.w	r8, [r4, #26]
 800420a:	f884 801b 	strb.w	r8, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800420e:	f884 8014 	strb.w	r8, [r4, #20]
 8004212:	f884 8015 	strb.w	r8, [r4, #21]
				dj.fs->wflag = 1;
 8004216:	f809 2003 	strb.w	r2, [r9, r3]
				if (cl) {						/* Remove the cluster chain if exist */
 800421a:	4680      	mov	r8, r0
 800421c:	b348      	cbz	r0, 8004272 <f_open+0x132>
					dw = dj.fs->winsect;
 800421e:	f241 032c 	movw	r3, #4140	; 0x102c
					res = remove_chain(dj.fs, cl);
 8004222:	4601      	mov	r1, r0
 8004224:	4648      	mov	r0, r9
					dw = dj.fs->winsect;
 8004226:	f859 a003 	ldr.w	sl, [r9, r3]
					res = remove_chain(dj.fs, cl);
 800422a:	f7ff ff19 	bl	8004060 <remove_chain>
					if (res == FR_OK) {
 800422e:	b948      	cbnz	r0, 8004244 <f_open+0x104>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004230:	f241 020c 	movw	r2, #4108	; 0x100c
 8004234:	9806      	ldr	r0, [sp, #24]
 8004236:	f108 33ff 	add.w	r3, r8, #4294967295
 800423a:	5083      	str	r3, [r0, r2]
						res = move_window(dj.fs, dw);
 800423c:	4651      	mov	r1, sl
 800423e:	f7fe ff82 	bl	8003146 <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 8004242:	b1b0      	cbz	r0, 8004272 <f_open+0x132>
 8004244:	4606      	mov	r6, r0
 8004246:	e029      	b.n	800429c <f_open+0x15c>
				res = FR_INVALID_NAME;
 8004248:	2006      	movs	r0, #6
 800424a:	e7a4      	b.n	8004196 <f_open+0x56>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800424c:	7ae3      	ldrb	r3, [r4, #11]
 800424e:	f013 0f11 	tst.w	r3, #17
 8004252:	d12d      	bne.n	80042b0 <f_open+0x170>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8004254:	f018 0f04 	tst.w	r8, #4
 8004258:	d0b2      	beq.n	80041c0 <f_open+0x80>
						res = FR_EXIST;
 800425a:	2608      	movs	r6, #8
 800425c:	e01e      	b.n	800429c <f_open+0x15c>
			if (res == FR_OK) {					/* Follow succeeded */
 800425e:	2800      	cmp	r0, #0
 8004260:	d1f0      	bne.n	8004244 <f_open+0x104>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8004262:	7ae3      	ldrb	r3, [r4, #11]
 8004264:	06d8      	lsls	r0, r3, #27
 8004266:	d421      	bmi.n	80042ac <f_open+0x16c>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8004268:	f018 0f02 	tst.w	r8, #2
 800426c:	d001      	beq.n	8004272 <f_open+0x132>
 800426e:	07da      	lsls	r2, r3, #31
 8004270:	d41e      	bmi.n	80042b0 <f_open+0x170>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8004272:	073b      	lsls	r3, r7, #28
				mode |= FA__WRITTEN;
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004274:	f241 032c 	movw	r3, #4140	; 0x102c
 8004278:	9a06      	ldr	r2, [sp, #24]
				mode |= FA__WRITTEN;
 800427a:	bf48      	it	mi
 800427c:	f047 0720 	orrmi.w	r7, r7, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8004280:	58d3      	ldr	r3, [r2, r3]
			fp->dir_ptr = dir;
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004282:	f017 0ffe 	tst.w	r7, #254	; 0xfe
			fp->dir_ptr = dir;
 8004286:	e9c5 3407 	strd	r3, r4, [r5, #28]
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800428a:	bf14      	ite	ne
 800428c:	2101      	movne	r1, #1
 800428e:	2100      	moveq	r1, #0
 8004290:	a806      	add	r0, sp, #24
 8004292:	f7fe fe55 	bl	8002f40 <inc_lock>
 8004296:	62a8      	str	r0, [r5, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8004298:	b960      	cbnz	r0, 80042b4 <f_open+0x174>
 800429a:	2602      	movs	r6, #2
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 800429c:	4630      	mov	r0, r6
 800429e:	b010      	add	sp, #64	; 0x40
 80042a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fp) return FR_INVALID_OBJECT;
 80042a4:	2609      	movs	r6, #9
 80042a6:	e7f9      	b.n	800429c <f_open+0x15c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80042a8:	2612      	movs	r6, #18
 80042aa:	e7f7      	b.n	800429c <f_open+0x15c>
					res = FR_NO_FILE;
 80042ac:	2604      	movs	r6, #4
 80042ae:	e7f5      	b.n	800429c <f_open+0x15c>
					res = FR_DENIED;
 80042b0:	2607      	movs	r6, #7
 80042b2:	e7f3      	b.n	800429c <f_open+0x15c>
			fp->flag = mode;					/* File access mode */
 80042b4:	71af      	strb	r7, [r5, #6]
			fp->err = 0;						/* Clear error flag */
 80042b6:	2700      	movs	r7, #0
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80042b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
			fp->err = 0;						/* Clear error flag */
 80042bc:	71ef      	strb	r7, [r5, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80042be:	f508 5380 	add.w	r3, r8, #4096	; 0x1000
 80042c2:	7818      	ldrb	r0, [r3, #0]
 80042c4:	4621      	mov	r1, r4
 80042c6:	f7fe fef5 	bl	80030b4 <ld_clust.isra.0>
 80042ca:	6128      	str	r0, [r5, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 80042cc:	69e3      	ldr	r3, [r4, #28]
			fp->dsect = 0;
 80042ce:	61af      	str	r7, [r5, #24]
			fp->fptr = 0;						/* File pointer */
 80042d0:	e9c5 7302 	strd	r7, r3, [r5, #8]
			fp->id = fp->fs->id;
 80042d4:	f241 0306 	movw	r3, #4102	; 0x1006
 80042d8:	f838 3003 	ldrh.w	r3, [r8, r3]
			fp->cltbl = 0;						/* Normal seek mode */
 80042dc:	626f      	str	r7, [r5, #36]	; 0x24
			fp->fs = dj.fs;	 					/* Validate file object */
 80042de:	f8c5 8000 	str.w	r8, [r5]
			fp->id = fp->fs->id;
 80042e2:	80ab      	strh	r3, [r5, #4]
 80042e4:	e7da      	b.n	800429c <f_open+0x15c>
 80042e6:	bf00      	nop
 80042e8:	200000d2 	.word	0x200000d2
 80042ec:	200000b8 	.word	0x200000b8

080042f0 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80042f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	469b      	mov	fp, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8cb 3000 	str.w	r3, [fp]
{
 80042fc:	4604      	mov	r4, r0
 80042fe:	468a      	mov	sl, r1
 8004300:	4616      	mov	r6, r2

	res = validate(fp);							/* Check validity */
 8004302:	f7fe febf 	bl	8003084 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004306:	4605      	mov	r5, r0
 8004308:	bb48      	cbnz	r0, 800435e <f_read+0x6e>
	if (fp->err)								/* Check error */
 800430a:	79e3      	ldrb	r3, [r4, #7]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f040 80a4 	bne.w	800445a <f_read+0x16a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8004312:	79a3      	ldrb	r3, [r4, #6]
 8004314:	07da      	lsls	r2, r3, #31
 8004316:	f140 80a2 	bpl.w	800445e <f_read+0x16e>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800431a:	e9d4 7302 	ldrd	r7, r3, [r4, #8]
 800431e:	1bdf      	subs	r7, r3, r7
 8004320:	42b7      	cmp	r7, r6
 8004322:	bf28      	it	cs
 8004324:	4637      	movcs	r7, r6
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8004326:	f241 090a 	movw	r9, #4106	; 0x100a
	for ( ;  btr;								/* Repeat until all data read */
 800432a:	b1c7      	cbz	r7, 800435e <f_read+0x6e>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	68a1      	ldr	r1, [r4, #8]
 8004330:	f830 3009 	ldrh.w	r3, [r0, r9]
 8004334:	fbb1 f2f3 	udiv	r2, r1, r3
 8004338:	fb03 1312 	mls	r3, r3, r2, r1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d16c      	bne.n	800441a <f_read+0x12a>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8004340:	f241 0302 	movw	r3, #4098	; 0x1002
 8004344:	5cc6      	ldrb	r6, [r0, r3]
 8004346:	3e01      	subs	r6, #1
 8004348:	4016      	ands	r6, r2
			if (!csect) {						/* On the cluster boundary? */
 800434a:	f016 03ff 	ands.w	r3, r6, #255	; 0xff
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	d118      	bne.n	8004384 <f_read+0x94>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8004352:	b941      	cbnz	r1, 8004366 <f_read+0x76>
					clst = fp->sclust;			/* Follow from the origin */
 8004354:	6920      	ldr	r0, [r4, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004356:	2801      	cmp	r0, #1
 8004358:	d80f      	bhi.n	800437a <f_read+0x8a>
 800435a:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800435c:	71e5      	strb	r5, [r4, #7]
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 800435e:	4628      	mov	r0, r5
 8004360:	b003      	add	sp, #12
 8004362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl)
 8004366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004368:	b11b      	cbz	r3, 8004372 <f_read+0x82>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800436a:	4620      	mov	r0, r4
 800436c:	f7fe fe4c 	bl	8003008 <clmt_clust>
 8004370:	e7f1      	b.n	8004356 <f_read+0x66>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8004372:	6961      	ldr	r1, [r4, #20]
 8004374:	f7ff f920 	bl	80035b8 <get_fat>
 8004378:	e7ed      	b.n	8004356 <f_read+0x66>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	d101      	bne.n	8004382 <f_read+0x92>
 800437e:	2501      	movs	r5, #1
 8004380:	e7ec      	b.n	800435c <f_read+0x6c>
				fp->clust = clst;				/* Update current cluster */
 8004382:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004384:	6826      	ldr	r6, [r4, #0]
 8004386:	6961      	ldr	r1, [r4, #20]
 8004388:	4630      	mov	r0, r6
 800438a:	f7ff f903 	bl	8003594 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800438e:	2800      	cmp	r0, #0
 8004390:	d0e3      	beq.n	800435a <f_read+0x6a>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004392:	f836 8009 	ldrh.w	r8, [r6, r9]
			sect += csect;
 8004396:	9b00      	ldr	r3, [sp, #0]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004398:	fbb7 f8f8 	udiv	r8, r7, r8
			sect += csect;
 800439c:	18c3      	adds	r3, r0, r3
 800439e:	9301      	str	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 80043a0:	f1b8 0f00 	cmp.w	r8, #0
 80043a4:	d037      	beq.n	8004416 <f_read+0x126>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80043a6:	f241 0302 	movw	r3, #4098	; 0x1002
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80043aa:	f241 0001 	movw	r0, #4097	; 0x1001
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80043ae:	9a00      	ldr	r2, [sp, #0]
 80043b0:	5cf3      	ldrb	r3, [r6, r3]
 80043b2:	4442      	add	r2, r8
 80043b4:	429a      	cmp	r2, r3
					cc = fp->fs->csize - csect;
 80043b6:	bf88      	it	hi
 80043b8:	9a00      	ldrhi	r2, [sp, #0]
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80043ba:	4651      	mov	r1, sl
					cc = fp->fs->csize - csect;
 80043bc:	bf88      	it	hi
 80043be:	eba3 0802 	subhi.w	r8, r3, r2
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80043c2:	4643      	mov	r3, r8
 80043c4:	9a01      	ldr	r2, [sp, #4]
 80043c6:	5c30      	ldrb	r0, [r6, r0]
 80043c8:	f7fe fd46 	bl	8002e58 <disk_read>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	d1d6      	bne.n	800437e <f_read+0x8e>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 80043d0:	f241 0304 	movw	r3, #4100	; 0x1004
 80043d4:	6821      	ldr	r1, [r4, #0]
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	b163      	cbz	r3, 80043f4 <f_read+0x104>
 80043da:	f241 032c 	movw	r3, #4140	; 0x102c
 80043de:	58c8      	ldr	r0, [r1, r3]
 80043e0:	9b01      	ldr	r3, [sp, #4]
 80043e2:	1ac0      	subs	r0, r0, r3
 80043e4:	4580      	cmp	r8, r0
 80043e6:	d905      	bls.n	80043f4 <f_read+0x104>
 80043e8:	f831 2009 	ldrh.w	r2, [r1, r9]
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 80043ec:	fb02 a000 	mla	r0, r2, r0, sl
 80043f0:	f7fe fd5a 	bl	8002ea8 <mem_cpy>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	f833 3009 	ldrh.w	r3, [r3, r9]
 80043fa:	fb08 f803 	mul.w	r8, r8, r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	44c2      	add	sl, r8
 8004402:	4443      	add	r3, r8
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	f8db 3000 	ldr.w	r3, [fp]
 800440a:	eba7 0708 	sub.w	r7, r7, r8
 800440e:	4443      	add	r3, r8
 8004410:	f8cb 3000 	str.w	r3, [fp]
 8004414:	e789      	b.n	800432a <f_read+0x3a>
			fp->dsect = sect;
 8004416:	9b01      	ldr	r3, [sp, #4]
 8004418:	61a3      	str	r3, [r4, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800441a:	6820      	ldr	r0, [r4, #0]
 800441c:	68a2      	ldr	r2, [r4, #8]
 800441e:	f830 8009 	ldrh.w	r8, [r0, r9]
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8004422:	69a1      	ldr	r1, [r4, #24]
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8004424:	fbb2 f3f8 	udiv	r3, r2, r8
 8004428:	fb08 2313 	mls	r3, r8, r3, r2
 800442c:	eba8 0803 	sub.w	r8, r8, r3
 8004430:	45b8      	cmp	r8, r7
 8004432:	bf28      	it	cs
 8004434:	46b8      	movcs	r8, r7
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8004436:	f7fe fe86 	bl	8003146 <move_window>
 800443a:	2800      	cmp	r0, #0
 800443c:	d19f      	bne.n	800437e <f_read+0x8e>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800443e:	6821      	ldr	r1, [r4, #0]
 8004440:	68a0      	ldr	r0, [r4, #8]
 8004442:	f831 2009 	ldrh.w	r2, [r1, r9]
 8004446:	fbb0 f3f2 	udiv	r3, r0, r2
 800444a:	fb02 0313 	mls	r3, r2, r3, r0
 800444e:	4642      	mov	r2, r8
 8004450:	4419      	add	r1, r3
 8004452:	4650      	mov	r0, sl
 8004454:	f7fe fd28 	bl	8002ea8 <mem_cpy>
 8004458:	e7d1      	b.n	80043fe <f_read+0x10e>
 800445a:	461d      	mov	r5, r3
 800445c:	e77f      	b.n	800435e <f_read+0x6e>
		LEAVE_FF(fp->fs, FR_DENIED);
 800445e:	2507      	movs	r5, #7
 8004460:	e77d      	b.n	800435e <f_read+0x6e>

08004462 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004462:	b570      	push	{r4, r5, r6, lr}
 8004464:	4605      	mov	r5, r0
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8004466:	f7fe fe0d 	bl	8003084 <validate>
	if (res == FR_OK) {
 800446a:	2800      	cmp	r0, #0
 800446c:	d138      	bne.n	80044e0 <f_sync+0x7e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800446e:	79ab      	ldrb	r3, [r5, #6]
 8004470:	069b      	lsls	r3, r3, #26
 8004472:	d535      	bpl.n	80044e0 <f_sync+0x7e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8004474:	69e9      	ldr	r1, [r5, #28]
 8004476:	6828      	ldr	r0, [r5, #0]
 8004478:	f7fe fe65 	bl	8003146 <move_window>
 800447c:	4606      	mov	r6, r0
			if (res == FR_OK) {
 800447e:	bb78      	cbnz	r0, 80044e0 <f_sync+0x7e>
				dir = fp->dir_ptr;
 8004480:	6a2c      	ldr	r4, [r5, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004482:	7ae3      	ldrb	r3, [r4, #11]
 8004484:	f043 0320 	orr.w	r3, r3, #32
 8004488:	72e3      	strb	r3, [r4, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800448a:	68eb      	ldr	r3, [r5, #12]
 800448c:	7723      	strb	r3, [r4, #28]
 800448e:	89ab      	ldrh	r3, [r5, #12]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	7763      	strb	r3, [r4, #29]
 8004494:	89eb      	ldrh	r3, [r5, #14]
 8004496:	77a3      	strb	r3, [r4, #30]
 8004498:	7beb      	ldrb	r3, [r5, #15]
 800449a:	77e3      	strb	r3, [r4, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800449c:	692b      	ldr	r3, [r5, #16]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800449e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80044a2:	76a3      	strb	r3, [r4, #26]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80044a4:	0c1b      	lsrs	r3, r3, #16
 80044a6:	7523      	strb	r3, [r4, #20]
 80044a8:	0a1b      	lsrs	r3, r3, #8
	ST_WORD(dir + DIR_FstClusLO, cl);
 80044aa:	76e2      	strb	r2, [r4, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80044ac:	7563      	strb	r3, [r4, #21]
				tm = GET_FATTIME();							/* Update updated time */
 80044ae:	f7fe f9af 	bl	8002810 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 80044b2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80044b6:	75a0      	strb	r0, [r4, #22]
 80044b8:	75e3      	strb	r3, [r4, #23]
 80044ba:	0c03      	lsrs	r3, r0, #16
 80044bc:	0e00      	lsrs	r0, r0, #24
 80044be:	7623      	strb	r3, [r4, #24]
 80044c0:	7660      	strb	r0, [r4, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80044c2:	74a6      	strb	r6, [r4, #18]
 80044c4:	74e6      	strb	r6, [r4, #19]
				fp->flag &= ~FA__WRITTEN;
 80044c6:	79ab      	ldrb	r3, [r5, #6]
				fp->fs->wflag = 1;
 80044c8:	2201      	movs	r2, #1
				fp->flag &= ~FA__WRITTEN;
 80044ca:	f023 0320 	bic.w	r3, r3, #32
 80044ce:	71ab      	strb	r3, [r5, #6]
				fp->fs->wflag = 1;
 80044d0:	f241 0304 	movw	r3, #4100	; 0x1004
 80044d4:	6828      	ldr	r0, [r5, #0]
 80044d6:	54c2      	strb	r2, [r0, r3]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80044d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 80044dc:	f7fe bffc 	b.w	80034d8 <sync_fs>
}
 80044e0:	bd70      	pop	{r4, r5, r6, pc}

080044e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80044e2:	b510      	push	{r4, lr}
 80044e4:	4604      	mov	r4, r0
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80044e6:	f7ff ffbc 	bl	8004462 <f_sync>
	if (res == FR_OK)
 80044ea:	b940      	cbnz	r0, 80044fe <f_close+0x1c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7fe fdc9 	bl	8003084 <validate>
		if (res == FR_OK) {
 80044f2:	b920      	cbnz	r0, 80044fe <f_close+0x1c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80044f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044f6:	f7fe fd67 	bl	8002fc8 <dec_lock>
			if (res == FR_OK)
 80044fa:	b900      	cbnz	r0, 80044fe <f_close+0x1c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80044fc:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80044fe:	bd10      	pop	{r4, pc}

08004500 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8004500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	4604      	mov	r4, r0
 8004506:	460d      	mov	r5, r1
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8004508:	f7fe fdbc 	bl	8003084 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800450c:	4606      	mov	r6, r0
 800450e:	b9f0      	cbnz	r0, 800454e <f_lseek+0x4e>
	if (fp->err)						/* Check error */
 8004510:	79e3      	ldrb	r3, [r4, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 80ef 	bne.w	80046f6 <f_lseek+0x1f6>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8004518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800451a:	2b00      	cmp	r3, #0
 800451c:	d068      	beq.n	80045f0 <f_lseek+0xf0>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800451e:	1c6a      	adds	r2, r5, #1
 8004520:	d139      	bne.n	8004596 <f_lseek+0x96>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
			cl = fp->sclust;			/* Top of the chain */
 8004522:	6927      	ldr	r7, [r4, #16]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8004524:	f103 0904 	add.w	r9, r3, #4
 8004528:	f8d3 a000 	ldr.w	sl, [r3]
 800452c:	2502      	movs	r5, #2
			if (cl) {
 800452e:	b34f      	cbz	r7, 8004584 <f_lseek+0x84>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					} while (cl == pcl + 1);
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
						*tbl++ = ncl; *tbl++ = tcl;
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8004530:	f241 0b14 	movw	fp, #4116	; 0x1014
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004534:	f04f 0800 	mov.w	r8, #0
 8004538:	eb07 0108 	add.w	r1, r7, r8
						cl = get_fat(fp->fs, cl);
 800453c:	6820      	ldr	r0, [r4, #0]
 800453e:	f7ff f83b 	bl	80035b8 <get_fat>
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8004542:	2801      	cmp	r0, #1
						cl = get_fat(fp->fs, cl);
 8004544:	f108 0801 	add.w	r8, r8, #1
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8004548:	d806      	bhi.n	8004558 <f_lseek+0x58>
 800454a:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800454c:	71e6      	strb	r6, [r4, #7]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
 800454e:	4630      	mov	r0, r6
 8004550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004554:	4607      	mov	r7, r0
 8004556:	e7ed      	b.n	8004534 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d101      	bne.n	8004560 <f_lseek+0x60>
 800455c:	2601      	movs	r6, #1
 800455e:	e7f5      	b.n	800454c <f_lseek+0x4c>
					} while (cl == pcl + 1);
 8004560:	eb07 0308 	add.w	r3, r7, r8
 8004564:	4298      	cmp	r0, r3
 8004566:	d0e7      	beq.n	8004538 <f_lseek+0x38>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004568:	3502      	adds	r5, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800456a:	45aa      	cmp	sl, r5
						*tbl++ = ncl; *tbl++ = tcl;
 800456c:	bf21      	itttt	cs
 800456e:	464b      	movcs	r3, r9
 8004570:	f843 8b08 	strcs.w	r8, [r3], #8
 8004574:	f8c9 7004 	strcs.w	r7, [r9, #4]
 8004578:	4699      	movcs	r9, r3
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	f853 300b 	ldr.w	r3, [r3, fp]
 8004580:	4283      	cmp	r3, r0
 8004582:	d8e7      	bhi.n	8004554 <f_lseek+0x54>
			*fp->cltbl = ulen;	/* Number of items used */
 8004584:	6a63      	ldr	r3, [r4, #36]	; 0x24
			if (ulen <= tlen)
 8004586:	4555      	cmp	r5, sl
			*fp->cltbl = ulen;	/* Number of items used */
 8004588:	601d      	str	r5, [r3, #0]
			if (ulen <= tlen)
 800458a:	f200 80b6 	bhi.w	80046fa <f_lseek+0x1fa>
				*tbl = 0;		/* Terminate table */
 800458e:	2300      	movs	r3, #0
 8004590:	f8c9 3000 	str.w	r3, [r9]
 8004594:	e7db      	b.n	800454e <f_lseek+0x4e>
 8004596:	68e3      	ldr	r3, [r4, #12]
 8004598:	429d      	cmp	r5, r3
 800459a:	bf28      	it	cs
 800459c:	461d      	movcs	r5, r3
			fp->fptr = ofs;				/* Set file pointer */
 800459e:	60a5      	str	r5, [r4, #8]
			if (ofs) {
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	d0d4      	beq.n	800454e <f_lseek+0x4e>
				fp->clust = clmt_clust(fp, ofs - 1);
 80045a4:	1e6f      	subs	r7, r5, #1
 80045a6:	4639      	mov	r1, r7
 80045a8:	4620      	mov	r0, r4
 80045aa:	f7fe fd2d 	bl	8003008 <clmt_clust>
				dsc = clust2sect(fp->fs, fp->clust);
 80045ae:	f8d4 8000 	ldr.w	r8, [r4]
				fp->clust = clmt_clust(fp, ofs - 1);
 80045b2:	4601      	mov	r1, r0
 80045b4:	6160      	str	r0, [r4, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 80045b6:	4640      	mov	r0, r8
 80045b8:	f7fe ffec 	bl	8003594 <clust2sect>
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 80045bc:	2800      	cmp	r0, #0
 80045be:	d0c4      	beq.n	800454a <f_lseek+0x4a>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80045c0:	f241 030a 	movw	r3, #4106	; 0x100a
 80045c4:	f838 2003 	ldrh.w	r2, [r8, r3]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80045c8:	fbb5 f3f2 	udiv	r3, r5, r2
 80045cc:	fb02 5513 	mls	r5, r2, r3, r5
 80045d0:	2d00      	cmp	r5, #0
 80045d2:	d0bc      	beq.n	800454e <f_lseek+0x4e>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 80045d4:	f241 0302 	movw	r3, #4098	; 0x1002
 80045d8:	fbb7 f7f2 	udiv	r7, r7, r2
 80045dc:	f818 3003 	ldrb.w	r3, [r8, r3]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	403b      	ands	r3, r7
 80045e4:	4418      	add	r0, r3
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 80045e6:	69a3      	ldr	r3, [r4, #24]
 80045e8:	4283      	cmp	r3, r0
 80045ea:	d0b0      	beq.n	800454e <f_lseek+0x4e>
					fp->dsect = dsc;
 80045ec:	61a0      	str	r0, [r4, #24]
 80045ee:	e7ae      	b.n	800454e <f_lseek+0x4e>
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 80045f0:	68e3      	ldr	r3, [r4, #12]
 80045f2:	42ab      	cmp	r3, r5
 80045f4:	d204      	bcs.n	8004600 <f_lseek+0x100>
			 && !(fp->flag & FA_WRITE)
 80045f6:	79a2      	ldrb	r2, [r4, #6]
 80045f8:	f012 0f02 	tst.w	r2, #2
 80045fc:	bf08      	it	eq
 80045fe:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 8004600:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 8004602:	68a3      	ldr	r3, [r4, #8]
		fp->fptr = nsect = 0;
 8004604:	60a2      	str	r2, [r4, #8]
		if (ofs) {
 8004606:	b9cd      	cbnz	r5, 800463c <f_lseek+0x13c>
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8004608:	68e3      	ldr	r3, [r4, #12]
 800460a:	42ab      	cmp	r3, r5
 800460c:	d29f      	bcs.n	800454e <f_lseek+0x4e>
			fp->flag |= FA__WRITTEN;
 800460e:	79a3      	ldrb	r3, [r4, #6]
			fp->fsize = fp->fptr;
 8004610:	60e5      	str	r5, [r4, #12]
			fp->flag |= FA__WRITTEN;
 8004612:	f043 0320 	orr.w	r3, r3, #32
 8004616:	71a3      	strb	r3, [r4, #6]
 8004618:	e799      	b.n	800454e <f_lseek+0x4e>
		fp->fptr = nsect = 0;
 800461a:	2000      	movs	r0, #0
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800461c:	f241 030a 	movw	r3, #4106	; 0x100a
 8004620:	6822      	ldr	r2, [r4, #0]
 8004622:	68a5      	ldr	r5, [r4, #8]
 8004624:	5ad2      	ldrh	r2, [r2, r3]
 8004626:	fbb5 f3f2 	udiv	r3, r5, r2
 800462a:	fb02 5313 	mls	r3, r2, r3, r5
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0ea      	beq.n	8004608 <f_lseek+0x108>
 8004632:	69a3      	ldr	r3, [r4, #24]
 8004634:	4283      	cmp	r3, r0
			fp->dsect = nsect;
 8004636:	bf18      	it	ne
 8004638:	61a0      	strne	r0, [r4, #24]
 800463a:	e7e5      	b.n	8004608 <f_lseek+0x108>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800463c:	f241 0202 	movw	r2, #4098	; 0x1002
 8004640:	f241 010a 	movw	r1, #4106	; 0x100a
 8004644:	6820      	ldr	r0, [r4, #0]
 8004646:	5c82      	ldrb	r2, [r0, r2]
 8004648:	5a47      	ldrh	r7, [r0, r1]
 800464a:	4357      	muls	r7, r2
			if (ifptr > 0 &&
 800464c:	b33b      	cbz	r3, 800469e <f_lseek+0x19e>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800464e:	3b01      	subs	r3, #1
 8004650:	1e6a      	subs	r2, r5, #1
 8004652:	fbb2 f2f7 	udiv	r2, r2, r7
 8004656:	fbb3 f1f7 	udiv	r1, r3, r7
			if (ifptr > 0 &&
 800465a:	428a      	cmp	r2, r1
 800465c:	d31f      	bcc.n	800469e <f_lseek+0x19e>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800465e:	427a      	negs	r2, r7
 8004660:	4013      	ands	r3, r2
				clst = fp->clust;
 8004662:	6961      	ldr	r1, [r4, #20]
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8004664:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
 8004666:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8004668:	2900      	cmp	r1, #0
 800466a:	d0d6      	beq.n	800461a <f_lseek+0x11a>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800466c:	f241 0814 	movw	r8, #4116	; 0x1014
				while (ofs > bcs) {						/* Cluster following loop */
 8004670:	42bd      	cmp	r5, r7
 8004672:	6820      	ldr	r0, [r4, #0]
 8004674:	d821      	bhi.n	80046ba <f_lseek+0x1ba>
				fp->fptr += ofs;
 8004676:	68a3      	ldr	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 8004678:	6820      	ldr	r0, [r4, #0]
				fp->fptr += ofs;
 800467a:	442b      	add	r3, r5
 800467c:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
 800467e:	f241 030a 	movw	r3, #4106	; 0x100a
 8004682:	5ac3      	ldrh	r3, [r0, r3]
 8004684:	fbb5 f7f3 	udiv	r7, r5, r3
 8004688:	fb03 5517 	mls	r5, r3, r7, r5
 800468c:	2d00      	cmp	r5, #0
 800468e:	d0c4      	beq.n	800461a <f_lseek+0x11a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8004690:	f7fe ff80 	bl	8003594 <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8004694:	2800      	cmp	r0, #0
 8004696:	f43f af58 	beq.w	800454a <f_lseek+0x4a>
					nsect += ofs / SS(fp->fs);
 800469a:	4438      	add	r0, r7
 800469c:	e7be      	b.n	800461c <f_lseek+0x11c>
				clst = fp->sclust;						/* start from the first cluster */
 800469e:	6921      	ldr	r1, [r4, #16]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80046a0:	b949      	cbnz	r1, 80046b6 <f_lseek+0x1b6>
					clst = create_chain(fp->fs, 0);
 80046a2:	f7ff f90b 	bl	80038bc <create_chain>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80046a6:	2801      	cmp	r0, #1
					clst = create_chain(fp->fs, 0);
 80046a8:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80046aa:	f43f af4e 	beq.w	800454a <f_lseek+0x4a>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80046ae:	3001      	adds	r0, #1
 80046b0:	f43f af54 	beq.w	800455c <f_lseek+0x5c>
					fp->sclust = clst;
 80046b4:	6121      	str	r1, [r4, #16]
				fp->clust = clst;
 80046b6:	6161      	str	r1, [r4, #20]
 80046b8:	e7d6      	b.n	8004668 <f_lseek+0x168>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80046ba:	79a3      	ldrb	r3, [r4, #6]
 80046bc:	079a      	lsls	r2, r3, #30
 80046be:	d505      	bpl.n	80046cc <f_lseek+0x1cc>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 80046c0:	f7ff f8fc 	bl	80038bc <create_chain>
						if (clst == 0) {				/* When disk gets full, clip file size */
 80046c4:	4601      	mov	r1, r0
 80046c6:	b920      	cbnz	r0, 80046d2 <f_lseek+0x1d2>
 80046c8:	463d      	mov	r5, r7
 80046ca:	e7d4      	b.n	8004676 <f_lseek+0x176>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 80046cc:	f7fe ff74 	bl	80035b8 <get_fat>
 80046d0:	4601      	mov	r1, r0
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80046d2:	1c4b      	adds	r3, r1, #1
 80046d4:	f43f af42 	beq.w	800455c <f_lseek+0x5c>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80046d8:	2901      	cmp	r1, #1
 80046da:	f67f af36 	bls.w	800454a <f_lseek+0x4a>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	f853 3008 	ldr.w	r3, [r3, r8]
 80046e4:	428b      	cmp	r3, r1
 80046e6:	f67f af30 	bls.w	800454a <f_lseek+0x4a>
					fp->fptr += bcs;
 80046ea:	68a3      	ldr	r3, [r4, #8]
					fp->clust = clst;
 80046ec:	6161      	str	r1, [r4, #20]
					fp->fptr += bcs;
 80046ee:	443b      	add	r3, r7
 80046f0:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
 80046f2:	1bed      	subs	r5, r5, r7
 80046f4:	e7bc      	b.n	8004670 <f_lseek+0x170>
 80046f6:	461e      	mov	r6, r3
 80046f8:	e729      	b.n	800454e <f_lseek+0x4e>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80046fa:	2611      	movs	r6, #17
 80046fc:	e727      	b.n	800454e <f_lseek+0x4e>
	...

08004700 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004700:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <FATFS_LinkDriverEx+0x40>)
 8004704:	7a5c      	ldrb	r4, [r3, #9]
 8004706:	2c01      	cmp	r4, #1
 8004708:	d818      	bhi.n	800473c <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800470a:	2400      	movs	r4, #0
 800470c:	7a5d      	ldrb	r5, [r3, #9]
 800470e:	b2ed      	uxtb	r5, r5
 8004710:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8004712:	7a5d      	ldrb	r5, [r3, #9]
 8004714:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004718:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800471a:	7a58      	ldrb	r0, [r3, #9]
 800471c:	4418      	add	r0, r3
 800471e:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004720:	7a5a      	ldrb	r2, [r3, #9]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	1c50      	adds	r0, r2, #1
 8004726:	b2c0      	uxtb	r0, r0
 8004728:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800472a:	233a      	movs	r3, #58	; 0x3a
 800472c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800472e:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8004730:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8004732:	3230      	adds	r2, #48	; 0x30
 8004734:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004736:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004738:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 800473a:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800473c:	2001      	movs	r0, #1
 800473e:	e7fc      	b.n	800473a <FATFS_LinkDriverEx+0x3a>
 8004740:	200002d4 	.word	0x200002d4

08004744 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004744:	2200      	movs	r2, #0
 8004746:	f7ff bfdb 	b.w	8004700 <FATFS_LinkDriverEx>
	...

0800474c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800474c:	287f      	cmp	r0, #127	; 0x7f
{
 800474e:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8004750:	d906      	bls.n	8004760 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8004752:	b131      	cbz	r1, 8004762 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8004754:	28ff      	cmp	r0, #255	; 0xff
 8004756:	d812      	bhi.n	800477e <ff_convert+0x32>
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <ff_convert+0x38>)
 800475a:	3880      	subs	r0, #128	; 0x80
 800475c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8004760:	bd10      	pop	{r4, pc}
				if (chr == Tbl[c]) break;
 8004762:	4a08      	ldr	r2, [pc, #32]	; (8004784 <ff_convert+0x38>)
 8004764:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]
 8004768:	b28b      	uxth	r3, r1
 800476a:	4284      	cmp	r4, r0
 800476c:	d003      	beq.n	8004776 <ff_convert+0x2a>
 800476e:	3101      	adds	r1, #1
			for (c = 0; c < 0x80; c++) {
 8004770:	2980      	cmp	r1, #128	; 0x80
 8004772:	d1f7      	bne.n	8004764 <ff_convert+0x18>
 8004774:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8004776:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800477a:	b2c0      	uxtb	r0, r0
 800477c:	e7f0      	b.n	8004760 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800477e:	2000      	movs	r0, #0
 8004780:	e7ee      	b.n	8004760 <ff_convert+0x14>
 8004782:	bf00      	nop
 8004784:	0800ee50 	.word	0x0800ee50

08004788 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8004788:	2300      	movs	r3, #0
 800478a:	4906      	ldr	r1, [pc, #24]	; (80047a4 <ff_wtoupper+0x1c>)
 800478c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004790:	b122      	cbz	r2, 800479c <ff_wtoupper+0x14>
 8004792:	4282      	cmp	r2, r0
 8004794:	d103      	bne.n	800479e <ff_wtoupper+0x16>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8004796:	4a04      	ldr	r2, [pc, #16]	; (80047a8 <ff_wtoupper+0x20>)
 8004798:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
}
 800479c:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800479e:	3301      	adds	r3, #1
 80047a0:	e7f4      	b.n	800478c <ff_wtoupper+0x4>
 80047a2:	bf00      	nop
 80047a4:	0800ef50 	.word	0x0800ef50
 80047a8:	0800f130 	.word	0x0800f130

080047ac <calloc>:
 80047ac:	4b02      	ldr	r3, [pc, #8]	; (80047b8 <calloc+0xc>)
 80047ae:	460a      	mov	r2, r1
 80047b0:	4601      	mov	r1, r0
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	f000 b844 	b.w	8004840 <_calloc_r>
 80047b8:	20000024 	.word	0x20000024

080047bc <__errno>:
 80047bc:	4b01      	ldr	r3, [pc, #4]	; (80047c4 <__errno+0x8>)
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000024 	.word	0x20000024

080047c8 <__libc_init_array>:
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	2500      	movs	r5, #0
 80047cc:	4e0c      	ldr	r6, [pc, #48]	; (8004800 <__libc_init_array+0x38>)
 80047ce:	4c0d      	ldr	r4, [pc, #52]	; (8004804 <__libc_init_array+0x3c>)
 80047d0:	1ba4      	subs	r4, r4, r6
 80047d2:	10a4      	asrs	r4, r4, #2
 80047d4:	42a5      	cmp	r5, r4
 80047d6:	d109      	bne.n	80047ec <__libc_init_array+0x24>
 80047d8:	f000 f92c 	bl	8004a34 <_init>
 80047dc:	2500      	movs	r5, #0
 80047de:	4e0a      	ldr	r6, [pc, #40]	; (8004808 <__libc_init_array+0x40>)
 80047e0:	4c0a      	ldr	r4, [pc, #40]	; (800480c <__libc_init_array+0x44>)
 80047e2:	1ba4      	subs	r4, r4, r6
 80047e4:	10a4      	asrs	r4, r4, #2
 80047e6:	42a5      	cmp	r5, r4
 80047e8:	d105      	bne.n	80047f6 <__libc_init_array+0x2e>
 80047ea:	bd70      	pop	{r4, r5, r6, pc}
 80047ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047f0:	4798      	blx	r3
 80047f2:	3501      	adds	r5, #1
 80047f4:	e7ee      	b.n	80047d4 <__libc_init_array+0xc>
 80047f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80047fa:	4798      	blx	r3
 80047fc:	3501      	adds	r5, #1
 80047fe:	e7f2      	b.n	80047e6 <__libc_init_array+0x1e>
 8004800:	0800f310 	.word	0x0800f310
 8004804:	0800f310 	.word	0x0800f310
 8004808:	0800f310 	.word	0x0800f310
 800480c:	0800f314 	.word	0x0800f314

08004810 <malloc>:
 8004810:	4b02      	ldr	r3, [pc, #8]	; (800481c <malloc+0xc>)
 8004812:	4601      	mov	r1, r0
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	f000 b86d 	b.w	80048f4 <_malloc_r>
 800481a:	bf00      	nop
 800481c:	20000024 	.word	0x20000024

08004820 <free>:
 8004820:	4b02      	ldr	r3, [pc, #8]	; (800482c <free+0xc>)
 8004822:	4601      	mov	r1, r0
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	f000 b819 	b.w	800485c <_free_r>
 800482a:	bf00      	nop
 800482c:	20000024 	.word	0x20000024

08004830 <memset>:
 8004830:	4603      	mov	r3, r0
 8004832:	4402      	add	r2, r0
 8004834:	4293      	cmp	r3, r2
 8004836:	d100      	bne.n	800483a <memset+0xa>
 8004838:	4770      	bx	lr
 800483a:	f803 1b01 	strb.w	r1, [r3], #1
 800483e:	e7f9      	b.n	8004834 <memset+0x4>

08004840 <_calloc_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	fb02 f401 	mul.w	r4, r2, r1
 8004846:	4621      	mov	r1, r4
 8004848:	f000 f854 	bl	80048f4 <_malloc_r>
 800484c:	4605      	mov	r5, r0
 800484e:	b118      	cbz	r0, 8004858 <_calloc_r+0x18>
 8004850:	4622      	mov	r2, r4
 8004852:	2100      	movs	r1, #0
 8004854:	f7ff ffec 	bl	8004830 <memset>
 8004858:	4628      	mov	r0, r5
 800485a:	bd38      	pop	{r3, r4, r5, pc}

0800485c <_free_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	4605      	mov	r5, r0
 8004860:	2900      	cmp	r1, #0
 8004862:	d043      	beq.n	80048ec <_free_r+0x90>
 8004864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004868:	1f0c      	subs	r4, r1, #4
 800486a:	2b00      	cmp	r3, #0
 800486c:	bfb8      	it	lt
 800486e:	18e4      	addlt	r4, r4, r3
 8004870:	f000 f8de 	bl	8004a30 <__malloc_lock>
 8004874:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <_free_r+0x94>)
 8004876:	6813      	ldr	r3, [r2, #0]
 8004878:	4610      	mov	r0, r2
 800487a:	b933      	cbnz	r3, 800488a <_free_r+0x2e>
 800487c:	6063      	str	r3, [r4, #4]
 800487e:	6014      	str	r4, [r2, #0]
 8004880:	4628      	mov	r0, r5
 8004882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004886:	f000 b8d4 	b.w	8004a32 <__malloc_unlock>
 800488a:	42a3      	cmp	r3, r4
 800488c:	d90b      	bls.n	80048a6 <_free_r+0x4a>
 800488e:	6821      	ldr	r1, [r4, #0]
 8004890:	1862      	adds	r2, r4, r1
 8004892:	4293      	cmp	r3, r2
 8004894:	bf01      	itttt	eq
 8004896:	681a      	ldreq	r2, [r3, #0]
 8004898:	685b      	ldreq	r3, [r3, #4]
 800489a:	1852      	addeq	r2, r2, r1
 800489c:	6022      	streq	r2, [r4, #0]
 800489e:	6063      	str	r3, [r4, #4]
 80048a0:	6004      	str	r4, [r0, #0]
 80048a2:	e7ed      	b.n	8004880 <_free_r+0x24>
 80048a4:	4613      	mov	r3, r2
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	b10a      	cbz	r2, 80048ae <_free_r+0x52>
 80048aa:	42a2      	cmp	r2, r4
 80048ac:	d9fa      	bls.n	80048a4 <_free_r+0x48>
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	1858      	adds	r0, r3, r1
 80048b2:	42a0      	cmp	r0, r4
 80048b4:	d10b      	bne.n	80048ce <_free_r+0x72>
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	4401      	add	r1, r0
 80048ba:	1858      	adds	r0, r3, r1
 80048bc:	4282      	cmp	r2, r0
 80048be:	6019      	str	r1, [r3, #0]
 80048c0:	d1de      	bne.n	8004880 <_free_r+0x24>
 80048c2:	6810      	ldr	r0, [r2, #0]
 80048c4:	6852      	ldr	r2, [r2, #4]
 80048c6:	4401      	add	r1, r0
 80048c8:	6019      	str	r1, [r3, #0]
 80048ca:	605a      	str	r2, [r3, #4]
 80048cc:	e7d8      	b.n	8004880 <_free_r+0x24>
 80048ce:	d902      	bls.n	80048d6 <_free_r+0x7a>
 80048d0:	230c      	movs	r3, #12
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	e7d4      	b.n	8004880 <_free_r+0x24>
 80048d6:	6820      	ldr	r0, [r4, #0]
 80048d8:	1821      	adds	r1, r4, r0
 80048da:	428a      	cmp	r2, r1
 80048dc:	bf01      	itttt	eq
 80048de:	6811      	ldreq	r1, [r2, #0]
 80048e0:	6852      	ldreq	r2, [r2, #4]
 80048e2:	1809      	addeq	r1, r1, r0
 80048e4:	6021      	streq	r1, [r4, #0]
 80048e6:	6062      	str	r2, [r4, #4]
 80048e8:	605c      	str	r4, [r3, #4]
 80048ea:	e7c9      	b.n	8004880 <_free_r+0x24>
 80048ec:	bd38      	pop	{r3, r4, r5, pc}
 80048ee:	bf00      	nop
 80048f0:	200002e0 	.word	0x200002e0

080048f4 <_malloc_r>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	1ccd      	adds	r5, r1, #3
 80048f8:	f025 0503 	bic.w	r5, r5, #3
 80048fc:	3508      	adds	r5, #8
 80048fe:	2d0c      	cmp	r5, #12
 8004900:	bf38      	it	cc
 8004902:	250c      	movcc	r5, #12
 8004904:	2d00      	cmp	r5, #0
 8004906:	4606      	mov	r6, r0
 8004908:	db01      	blt.n	800490e <_malloc_r+0x1a>
 800490a:	42a9      	cmp	r1, r5
 800490c:	d903      	bls.n	8004916 <_malloc_r+0x22>
 800490e:	230c      	movs	r3, #12
 8004910:	6033      	str	r3, [r6, #0]
 8004912:	2000      	movs	r0, #0
 8004914:	bd70      	pop	{r4, r5, r6, pc}
 8004916:	f000 f88b 	bl	8004a30 <__malloc_lock>
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <_malloc_r+0xac>)
 800491c:	6814      	ldr	r4, [r2, #0]
 800491e:	4621      	mov	r1, r4
 8004920:	b991      	cbnz	r1, 8004948 <_malloc_r+0x54>
 8004922:	4c20      	ldr	r4, [pc, #128]	; (80049a4 <_malloc_r+0xb0>)
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	b91b      	cbnz	r3, 8004930 <_malloc_r+0x3c>
 8004928:	4630      	mov	r0, r6
 800492a:	f000 f871 	bl	8004a10 <_sbrk_r>
 800492e:	6020      	str	r0, [r4, #0]
 8004930:	4629      	mov	r1, r5
 8004932:	4630      	mov	r0, r6
 8004934:	f000 f86c 	bl	8004a10 <_sbrk_r>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d124      	bne.n	8004986 <_malloc_r+0x92>
 800493c:	230c      	movs	r3, #12
 800493e:	4630      	mov	r0, r6
 8004940:	6033      	str	r3, [r6, #0]
 8004942:	f000 f876 	bl	8004a32 <__malloc_unlock>
 8004946:	e7e4      	b.n	8004912 <_malloc_r+0x1e>
 8004948:	680b      	ldr	r3, [r1, #0]
 800494a:	1b5b      	subs	r3, r3, r5
 800494c:	d418      	bmi.n	8004980 <_malloc_r+0x8c>
 800494e:	2b0b      	cmp	r3, #11
 8004950:	d90f      	bls.n	8004972 <_malloc_r+0x7e>
 8004952:	600b      	str	r3, [r1, #0]
 8004954:	18cc      	adds	r4, r1, r3
 8004956:	50cd      	str	r5, [r1, r3]
 8004958:	4630      	mov	r0, r6
 800495a:	f000 f86a 	bl	8004a32 <__malloc_unlock>
 800495e:	f104 000b 	add.w	r0, r4, #11
 8004962:	1d23      	adds	r3, r4, #4
 8004964:	f020 0007 	bic.w	r0, r0, #7
 8004968:	1ac3      	subs	r3, r0, r3
 800496a:	d0d3      	beq.n	8004914 <_malloc_r+0x20>
 800496c:	425a      	negs	r2, r3
 800496e:	50e2      	str	r2, [r4, r3]
 8004970:	e7d0      	b.n	8004914 <_malloc_r+0x20>
 8004972:	684b      	ldr	r3, [r1, #4]
 8004974:	428c      	cmp	r4, r1
 8004976:	bf16      	itet	ne
 8004978:	6063      	strne	r3, [r4, #4]
 800497a:	6013      	streq	r3, [r2, #0]
 800497c:	460c      	movne	r4, r1
 800497e:	e7eb      	b.n	8004958 <_malloc_r+0x64>
 8004980:	460c      	mov	r4, r1
 8004982:	6849      	ldr	r1, [r1, #4]
 8004984:	e7cc      	b.n	8004920 <_malloc_r+0x2c>
 8004986:	1cc4      	adds	r4, r0, #3
 8004988:	f024 0403 	bic.w	r4, r4, #3
 800498c:	42a0      	cmp	r0, r4
 800498e:	d005      	beq.n	800499c <_malloc_r+0xa8>
 8004990:	1a21      	subs	r1, r4, r0
 8004992:	4630      	mov	r0, r6
 8004994:	f000 f83c 	bl	8004a10 <_sbrk_r>
 8004998:	3001      	adds	r0, #1
 800499a:	d0cf      	beq.n	800493c <_malloc_r+0x48>
 800499c:	6025      	str	r5, [r4, #0]
 800499e:	e7db      	b.n	8004958 <_malloc_r+0x64>
 80049a0:	200002e0 	.word	0x200002e0
 80049a4:	200002e4 	.word	0x200002e4

080049a8 <rand>:
 80049a8:	b538      	push	{r3, r4, r5, lr}
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <rand+0x50>)
 80049ac:	681c      	ldr	r4, [r3, #0]
 80049ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049b0:	b97b      	cbnz	r3, 80049d2 <rand+0x2a>
 80049b2:	2018      	movs	r0, #24
 80049b4:	f7ff ff2c 	bl	8004810 <malloc>
 80049b8:	4a10      	ldr	r2, [pc, #64]	; (80049fc <rand+0x54>)
 80049ba:	4b11      	ldr	r3, [pc, #68]	; (8004a00 <rand+0x58>)
 80049bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80049be:	e9c0 2300 	strd	r2, r3, [r0]
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <rand+0x5c>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	6083      	str	r3, [r0, #8]
 80049c8:	230b      	movs	r3, #11
 80049ca:	8183      	strh	r3, [r0, #12]
 80049cc:	2300      	movs	r3, #0
 80049ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80049d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80049d4:	480c      	ldr	r0, [pc, #48]	; (8004a08 <rand+0x60>)
 80049d6:	690a      	ldr	r2, [r1, #16]
 80049d8:	694b      	ldr	r3, [r1, #20]
 80049da:	4350      	muls	r0, r2
 80049dc:	4c0b      	ldr	r4, [pc, #44]	; (8004a0c <rand+0x64>)
 80049de:	fb04 0003 	mla	r0, r4, r3, r0
 80049e2:	fba2 2304 	umull	r2, r3, r2, r4
 80049e6:	4403      	add	r3, r0
 80049e8:	1c54      	adds	r4, r2, #1
 80049ea:	f143 0500 	adc.w	r5, r3, #0
 80049ee:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80049f2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20000024 	.word	0x20000024
 80049fc:	abcd330e 	.word	0xabcd330e
 8004a00:	e66d1234 	.word	0xe66d1234
 8004a04:	0005deec 	.word	0x0005deec
 8004a08:	5851f42d 	.word	0x5851f42d
 8004a0c:	4c957f2d 	.word	0x4c957f2d

08004a10 <_sbrk_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	2300      	movs	r3, #0
 8004a14:	4c05      	ldr	r4, [pc, #20]	; (8004a2c <_sbrk_r+0x1c>)
 8004a16:	4605      	mov	r5, r0
 8004a18:	4608      	mov	r0, r1
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	f7fc fac6 	bl	8000fac <_sbrk>
 8004a20:	1c43      	adds	r3, r0, #1
 8004a22:	d102      	bne.n	8004a2a <_sbrk_r+0x1a>
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	b103      	cbz	r3, 8004a2a <_sbrk_r+0x1a>
 8004a28:	602b      	str	r3, [r5, #0]
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	200028bc 	.word	0x200028bc

08004a30 <__malloc_lock>:
 8004a30:	4770      	bx	lr

08004a32 <__malloc_unlock>:
 8004a32:	4770      	bx	lr

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
