
C21_FlappyBird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a860  080028c8  080028c8  000128c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d128  0800d128  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800d128  0800d128  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d128  0800d128  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d128  0800d128  0001d128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d12c  0800d12c  0001d12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800d130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000074  0800d1a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800d1a4  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e1a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027c9  00000000  00000000  00030eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000841e  00000000  00000000  00033680  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b58  00000000  00000000  0003baa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001170  00000000  00000000  0003c5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00013aa0  00000000  00000000  0003d768  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009a64  00000000  00000000  00051208  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00073198  00000000  00000000  0005ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cde04  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000024c4  00000000  00000000  000cde80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080028b0 	.word	0x080028b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080028b0 	.word	0x080028b0

0800014c <print_score>:
}
//
int col_array[3];
int col_pos[3];

void print_score(uint8_t score){
 800014c:	b507      	push	{r0, r1, r2, lr}
	switch(score){
 800014e:	2809      	cmp	r0, #9
 8000150:	d80e      	bhi.n	8000170 <print_score+0x24>
 8000152:	e8df f000 	tbb	[pc, r0]
 8000156:	1005      	.short	0x1005
 8000158:	18161412 	.word	0x18161412
 800015c:	201e1c1a 	.word	0x201e1c1a
	case 0:
		ST7735_DrawImage(10, 58, 8, 8, &zero);
 8000160:	4b0e      	ldr	r3, [pc, #56]	; (800019c <print_score+0x50>)
	break;
	case 8:
		ST7735_DrawImage(10, 58, 8, 8, &eight);
	break;
	case 9:
		ST7735_DrawImage(10, 58, 8, 8, &nine);
 8000162:	9300      	str	r3, [sp, #0]
 8000164:	2308      	movs	r3, #8
 8000166:	213a      	movs	r1, #58	; 0x3a
 8000168:	461a      	mov	r2, r3
 800016a:	200a      	movs	r0, #10
 800016c:	f000 fd81 	bl	8000c72 <ST7735_DrawImage>
	break;
	}
}
 8000170:	b003      	add	sp, #12
 8000172:	f85d fb04 	ldr.w	pc, [sp], #4
		ST7735_DrawImage(10, 58, 8, 8, &one);
 8000176:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <print_score+0x54>)
 8000178:	e7f3      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10, 58, 8, 8, &two);
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <print_score+0x58>)
 800017c:	e7f1      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10, 58, 8, 8, &three);
 800017e:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <print_score+0x5c>)
 8000180:	e7ef      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10, 58, 8, 8, &four);
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <print_score+0x60>)
 8000184:	e7ed      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10, 58, 8, 8, &five);
 8000186:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <print_score+0x64>)
 8000188:	e7eb      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10, 58, 8, 8, &six);
 800018a:	4b0a      	ldr	r3, [pc, #40]	; (80001b4 <print_score+0x68>)
 800018c:	e7e9      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10,58, 8, 8, &seven);
 800018e:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <print_score+0x6c>)
 8000190:	e7e7      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10, 58, 8, 8, &eight);
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <print_score+0x70>)
 8000194:	e7e5      	b.n	8000162 <print_score+0x16>
		ST7735_DrawImage(10, 58, 8, 8, &nine);
 8000196:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <print_score+0x74>)
 8000198:	e7e3      	b.n	8000162 <print_score+0x16>
 800019a:	bf00      	nop
 800019c:	0800d01a 	.word	0x0800d01a
 80001a0:	0800ac9a 	.word	0x0800ac9a
 80001a4:	0800cf9a 	.word	0x0800cf9a
 80001a8:	0800cf1a 	.word	0x0800cf1a
 80001ac:	08002b9a 	.word	0x08002b9a
 80001b0:	08002b1a 	.word	0x08002b1a
 80001b4:	0800ce9a 	.word	0x0800ce9a
 80001b8:	0800ce1a 	.word	0x0800ce1a
 80001bc:	08002a9a 	.word	0x08002a9a
 80001c0:	0800ac1a 	.word	0x0800ac1a

080001c4 <draw_bird>:

void draw_bird(uint16_t x, uint16_t y, const uint16_t* bird){
 80001c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t buffer[15][15];
	if(x<128){
 80001c6:	287f      	cmp	r0, #127	; 0x7f
void draw_bird(uint16_t x, uint16_t y, const uint16_t* bird){
 80001c8:	b0f5      	sub	sp, #468	; 0x1d4
 80001ca:	ac03      	add	r4, sp, #12
	if(x<128){
 80001cc:	d81c      	bhi.n	8000208 <draw_bird+0x44>
 80001ce:	4621      	mov	r1, r4


			}

			if( 6<j || j< 10){
			                            if(buffer[i][j] == 0xFFFF){
 80001d0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <draw_bird+0x58>)
 80001d6:	f502 76e1 	add.w	r6, r2, #450	; 0x1c2
 80001da:	eb03 0040 	add.w	r0, r3, r0, lsl #1
		for(int j = 0; j < 15; j++){
 80001de:	2300      	movs	r3, #0
			buffer[i][j] = bird[i*15 + j] ;
 80001e0:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
			                            if(buffer[i][j] == 0xFFFF){
 80001e4:	42bd      	cmp	r5, r7
			buffer[i][j] = bird[i*15 + j] ;
 80001e6:	f821 5013 	strh.w	r5, [r1, r3, lsl #1]
			                                  buffer[i][j] = ground[i][j+x];
 80001ea:	bf04      	itt	eq
 80001ec:	f830 5013 	ldrheq.w	r5, [r0, r3, lsl #1]
 80001f0:	f821 5013 	strheq.w	r5, [r1, r3, lsl #1]
		for(int j = 0; j < 15; j++){
 80001f4:	3301      	adds	r3, #1
 80001f6:	2b0f      	cmp	r3, #15
 80001f8:	d1f2      	bne.n	80001e0 <draw_bird+0x1c>
 80001fa:	321e      	adds	r2, #30
	for(int i = 0; i < 15; i++){
 80001fc:	42b2      	cmp	r2, r6
 80001fe:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8000202:	f101 011e 	add.w	r1, r1, #30
 8000206:	d1ea      	bne.n	80001de <draw_bird+0x1a>
			            			}

			}
	}
	}
	ST7735_DrawImage(i, 0, 15, 15, &buffer);
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <draw_bird+0x5c>)
 800020a:	2100      	movs	r1, #0
 800020c:	8818      	ldrh	r0, [r3, #0]
 800020e:	230f      	movs	r3, #15
 8000210:	9400      	str	r4, [sp, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	f000 fd2d 	bl	8000c72 <ST7735_DrawImage>
}
 8000218:	b075      	add	sp, #468	; 0x1d4
 800021a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800021c:	08002c1a 	.word	0x08002c1a
 8000220:	20000090 	.word	0x20000090

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	2414      	movs	r4, #20
{
 8000228:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	4622      	mov	r2, r4
 800022c:	2100      	movs	r1, #0
 800022e:	a808      	add	r0, sp, #32
 8000230:	f002 fa3c 	bl	80026ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	4622      	mov	r2, r4
 8000236:	2100      	movs	r1, #0
 8000238:	a801      	add	r0, sp, #4
 800023a:	f002 fa37 	bl	80026ac <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000246:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800024e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000256:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f001 fa98 	bl	800178c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800025e:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000262:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000266:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000268:	4621      	mov	r1, r4
 800026a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000270:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	f001 fc63 	bl	8001b3c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000276:	b010      	add	sp, #64	; 0x40
 8000278:	bd10      	pop	{r4, pc}
	...

0800027c <main>:
{
 800027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000280:	4dcf      	ldr	r5, [pc, #828]	; (80005c0 <main+0x344>)
{
 8000282:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8000284:	f001 f820 	bl	80012c8 <HAL_Init>
  SystemClock_Config();
 8000288:	f7ff ffcc 	bl	8000224 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	2210      	movs	r2, #16
 800028e:	2100      	movs	r1, #0
 8000290:	a80f      	add	r0, sp, #60	; 0x3c
 8000292:	f002 fa0b 	bl	80026ac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029a:	f043 0310 	orr.w	r3, r3, #16
 800029e:	61ab      	str	r3, [r5, #24]
 80002a0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80002a2:	f240 4182 	movw	r1, #1154	; 0x482
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	9305      	str	r3, [sp, #20]
 80002ac:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ae:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80002b0:	48c4      	ldr	r0, [pc, #784]	; (80005c4 <main+0x348>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	61ab      	str	r3, [r5, #24]
 80002b8:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ba:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002bc:	f003 0320 	and.w	r3, r3, #32
 80002c0:	9306      	str	r3, [sp, #24]
 80002c2:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c4:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB1 PB10 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c6:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	61ab      	str	r3, [r5, #24]
 80002ce:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d0:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	f003 0304 	and.w	r3, r3, #4
 80002d6:	9307      	str	r3, [sp, #28]
 80002d8:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002da:	69ab      	ldr	r3, [r5, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002dc:	f04f 090c 	mov.w	r9, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	61ab      	str	r3, [r5, #24]
 80002e6:	69ab      	ldr	r3, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e8:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ec:	f003 0308 	and.w	r3, r3, #8
 80002f0:	9308      	str	r3, [sp, #32]
 80002f2:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80002f4:	f001 fa32 	bl	800175c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80002fe:	48b2      	ldr	r0, [pc, #712]	; (80005c8 <main+0x34c>)
 8000300:	f001 fa2c 	bl	800175c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000304:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000308:	4bb0      	ldr	r3, [pc, #704]	; (80005cc <main+0x350>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800030a:	a90f      	add	r1, sp, #60	; 0x3c
 800030c:	48b0      	ldr	r0, [pc, #704]	; (80005d0 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800030e:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000314:	f001 f93c 	bl	8001590 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	f240 4382 	movw	r3, #1154	; 0x482
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800031c:	a90f      	add	r1, sp, #60	; 0x3c
 800031e:	48a9      	ldr	r0, [pc, #676]	; (80005c4 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000320:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000324:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000328:	f001 f932 	bl	8001590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800032c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	a90f      	add	r1, sp, #60	; 0x3c
 8000332:	48a5      	ldr	r0, [pc, #660]	; (80005c8 <main+0x34c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	e9cd 4611 	strd	r4, r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033c:	f001 f928 	bl	8001590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000340:	4622      	mov	r2, r4
 8000342:	4621      	mov	r1, r4
 8000344:	2028      	movs	r0, #40	; 0x28
 8000346:	f001 f807 	bl	8001358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800034a:	2028      	movs	r0, #40	; 0x28
 800034c:	f001 f838 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000350:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000352:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000354:	433b      	orrs	r3, r7
 8000356:	616b      	str	r3, [r5, #20]
 8000358:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800035a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800035c:	403b      	ands	r3, r7
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800035e:	f44f 7782 	mov.w	r7, #260	; 0x104
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000362:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000364:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000366:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000368:	f000 fff6 	bl	8001358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800036c:	200c      	movs	r0, #12
 800036e:	f001 f827 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000372:	4622      	mov	r2, r4
 8000374:	4621      	mov	r1, r4
 8000376:	200d      	movs	r0, #13
 8000378:	f000 ffee 	bl	8001358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800037c:	200d      	movs	r0, #13
 800037e:	f001 f81f 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000382:	4622      	mov	r2, r4
 8000384:	4621      	mov	r1, r4
 8000386:	200f      	movs	r0, #15
 8000388:	f000 ffe6 	bl	8001358 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800038c:	200f      	movs	r0, #15
 800038e:	f001 f817 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 8000392:	4890      	ldr	r0, [pc, #576]	; (80005d4 <main+0x358>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000394:	4b90      	ldr	r3, [pc, #576]	; (80005d8 <main+0x35c>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000396:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800039a:	e9c0 3700 	strd	r3, r7, [r0]
  hspi1.Init.CRCPolynomial = 10;
 800039e:	250a      	movs	r5, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003a0:	2308      	movs	r3, #8
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003a6:	e9c0 6306 	strd	r6, r3, [r0, #24]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ae:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b2:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003b4:	62c5      	str	r5, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b6:	f001 fcc6 	bl	8001d46 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 80003ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80003be:	4887      	ldr	r0, [pc, #540]	; (80005dc <main+0x360>)
  huart2.Init.BaudRate = 115200;
 80003c0:	4987      	ldr	r1, [pc, #540]	; (80005e0 <main+0x364>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80003c6:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ca:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003cc:	e9c0 9405 	strd	r9, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	f002 f8fb 	bl	80025cc <HAL_UART_Init>
  hspi2.Instance = SPI2;
 80003d6:	4883      	ldr	r0, [pc, #524]	; (80005e4 <main+0x368>)
 80003d8:	4b83      	ldr	r3, [pc, #524]	; (80005e8 <main+0x36c>)
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003da:	e9c0 6406 	strd	r6, r4, [r0, #24]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003de:	e9c0 3700 	strd	r3, r7, [r0]
  hspi2.Init.CRCPolynomial = 10;
 80003e2:	e9c0 450a 	strd	r4, r5, [r0, #40]	; 0x28
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ee:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003f2:	f001 fca8 	bl	8001d46 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f6:	4621      	mov	r1, r4
 80003f8:	2210      	movs	r2, #16
 80003fa:	a80b      	add	r0, sp, #44	; 0x2c
 80003fc:	f002 f956 	bl	80026ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000400:	221c      	movs	r2, #28
 8000402:	4621      	mov	r1, r4
 8000404:	a80f      	add	r0, sp, #60	; 0x3c
  htim2.Init.Prescaler = 71;
 8000406:	2747      	movs	r7, #71	; 0x47
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000408:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800040c:	f002 f94e 	bl	80026ac <memset>
  htim2.Init.Prescaler = 71;
 8000410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8000414:	4d75      	ldr	r5, [pc, #468]	; (80005ec <main+0x370>)
  htim1.Init.Prescaler = 719;
 8000416:	f240 2bcf 	movw	fp, #719	; 0x2cf
  htim2.Init.Prescaler = 71;
 800041a:	e9c5 3700 	strd	r3, r7, [r5]
  htim2.Init.Period = 1632;
 800041e:	f44f 63cc 	mov.w	r3, #1632	; 0x660
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000422:	4628      	mov	r0, r5
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	e9c5 3403 	strd	r3, r4, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000428:	60ac      	str	r4, [r5, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800042c:	f001 fee8 	bl	8002200 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000430:	a90b      	add	r1, sp, #44	; 0x2c
 8000432:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000434:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000438:	f001 ffae 	bl	8002398 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800043c:	4628      	mov	r0, r5
 800043e:	f001 fef9 	bl	8002234 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000442:	a909      	add	r1, sp, #36	; 0x24
 8000444:	4628      	mov	r0, r5
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000446:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800044a:	f002 f865 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044e:	2360      	movs	r3, #96	; 0x60
  htim1.Init.Period = 12500;
 8000450:	f243 0ad4 	movw	sl, #12500	; 0x30d4
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000454:	464a      	mov	r2, r9
 8000456:	a90f      	add	r1, sp, #60	; 0x3c
 8000458:	4628      	mov	r0, r5
  sConfigOC.Pulse = 0;
 800045a:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800045e:	9411      	str	r4, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000460:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000462:	f001 ff2d 	bl	80022c0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8000466:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 8000468:	4e61      	ldr	r6, [pc, #388]	; (80005f0 <main+0x374>)
  HAL_TIM_MspPostInit(&htim2);
 800046a:	f000 fd83 	bl	8000f74 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046e:	2210      	movs	r2, #16
 8000470:	4621      	mov	r1, r4
 8000472:	a80f      	add	r0, sp, #60	; 0x3c
 8000474:	f002 f91a 	bl	80026ac <memset>
  htim1.Init.Prescaler = 719;
 8000478:	4b5e      	ldr	r3, [pc, #376]	; (80005f4 <main+0x378>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800047a:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 719;
 800047c:	e9c6 3b00 	strd	r3, fp, [r6]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	e9c6 a403 	strd	sl, r4, [r6, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000484:	60b4      	str	r4, [r6, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000486:	e9c6 4405 	strd	r4, r4, [r6, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800048a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800048e:	f001 feb7 	bl	8002200 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000492:	a90f      	add	r1, sp, #60	; 0x3c
 8000494:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000496:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800049a:	f001 ff7d 	bl	8002398 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800049e:	a90b      	add	r1, sp, #44	; 0x2c
 80004a0:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004a6:	f002 f837 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	2210      	movs	r2, #16
 80004ac:	4621      	mov	r1, r4
 80004ae:	a80f      	add	r0, sp, #60	; 0x3c
 80004b0:	f002 f8fc 	bl	80026ac <memset>
  htim4.Instance = TIM4;
 80004b4:	4e50      	ldr	r6, [pc, #320]	; (80005f8 <main+0x37c>)
 80004b6:	4b51      	ldr	r3, [pc, #324]	; (80005fc <main+0x380>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004b8:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 71;
 80004ba:	e9c6 3700 	strd	r3, r7, [r6]
  htim4.Init.Period = 2000;
 80004be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c2:	60b4      	str	r4, [r6, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004c4:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c8:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ca:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80004ce:	f001 fe97 	bl	8002200 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004d2:	a90f      	add	r1, sp, #60	; 0x3c
 80004d4:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d6:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80004da:	f001 ff5d 	bl	8002398 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004de:	a90b      	add	r1, sp, #44	; 0x2c
 80004e0:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  htim3.Instance = TIM3;
 80004e6:	4e46      	ldr	r6, [pc, #280]	; (8000600 <main+0x384>)
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80004e8:	f002 f816 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ec:	2210      	movs	r2, #16
 80004ee:	4621      	mov	r1, r4
 80004f0:	a80f      	add	r0, sp, #60	; 0x3c
 80004f2:	f002 f8db 	bl	80026ac <memset>
  htim3.Instance = TIM3;
 80004f6:	4b43      	ldr	r3, [pc, #268]	; (8000604 <main+0x388>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004f8:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 719;
 80004fa:	e9c6 3b00 	strd	r3, fp, [r6]
  htim3.Init.Period = 12500;
 80004fe:	e9c6 4a02 	strd	r4, sl, [r6, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000502:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000506:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800050a:	f001 fe79 	bl	8002200 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800050e:	a90f      	add	r1, sp, #60	; 0x3c
 8000510:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000512:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000516:	f001 ff3f 	bl	8002398 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800051a:	a90b      	add	r1, sp, #44	; 0x2c
 800051c:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000522:	f001 fff9 	bl	8002518 <HAL_TIMEx_MasterConfigSynchronization>
  ST7735_Init();
 8000526:	f000 fb6f 	bl	8000c08 <ST7735_Init>
  ST7735_DrawImage(0, 0, 128, 128, &ground);
 800052a:	2380      	movs	r3, #128	; 0x80
 800052c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8000608 <main+0x38c>
 8000530:	461a      	mov	r2, r3
 8000532:	4621      	mov	r1, r4
 8000534:	4620      	mov	r0, r4
 8000536:	f8cd 8000 	str.w	r8, [sp]
 800053a:	f000 fb9a 	bl	8000c72 <ST7735_DrawImage>
        num = (rand() % (upper - lower + 1)) + lower;
 800053e:	f002 f971 	bl	8002824 <rand>
 8000542:	fb90 f3f7 	sdiv	r3, r0, r7
 8000546:	fb03 0017 	mls	r0, r3, r7, r0
  col_array[0] = printRandoms(30, 100);
 800054a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800060c <main+0x390>
        num = (rand() % (upper - lower + 1)) + lower;
 800054e:	301e      	adds	r0, #30
  col_array[0] = printRandoms(30, 100);
 8000550:	f8ca 0000 	str.w	r0, [sl]
        num = (rand() % (upper - lower + 1)) + lower;
 8000554:	f002 f966 	bl	8002824 <rand>
 8000558:	fb90 f3f7 	sdiv	r3, r0, r7
 800055c:	fb03 0017 	mls	r0, r3, r7, r0
  col_pos[0] = 128;
 8000560:	2780      	movs	r7, #128	; 0x80
 8000562:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8000610 <main+0x394>
        num = (rand() % (upper - lower + 1)) + lower;
 8000566:	301e      	adds	r0, #30
  col_array[1] = printRandoms(30, 100);
 8000568:	f8ca 0004 	str.w	r0, [sl, #4]
  HAL_TIM_Base_Start_IT(&htim3);
 800056c:	4630      	mov	r0, r6
  volatile uint8_t at_the_end = 0;
 800056e:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
  col_pos[1] = 128;
 8000572:	e9cb 7700 	strd	r7, r7, [fp]
  volatile uint8_t score = 0;
 8000576:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  col_pos[2] = 128;
 800057a:	f8cb 7008 	str.w	r7, [fp, #8]
  HAL_TIM_Base_Start_IT(&htim3);
 800057e:	f001 fd3b 	bl	8001ff8 <HAL_TIM_Base_Start_IT>
   HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000582:	4628      	mov	r0, r5
 8000584:	4649      	mov	r1, r9
 8000586:	f001 ffc5 	bl	8002514 <HAL_TIM_PWM_Start>
   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100);
 800058a:	2264      	movs	r2, #100	; 0x64
 800058c:	682b      	ldr	r3, [r5, #0]
   __HAL_TIM_SET_AUTORELOAD(&htim2,0);
 800058e:	60ec      	str	r4, [r5, #12]
   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 100);
 8000590:	641a      	str	r2, [r3, #64]	; 0x40
  uint8_t game_over = 0;
 8000592:	9403      	str	r4, [sp, #12]
   __HAL_TIM_SET_AUTORELOAD(&htim2,0);
 8000594:	62dc      	str	r4, [r3, #44]	; 0x2c
 8000596:	4655      	mov	r5, sl
				  ptr[a*128 + b] = ground[col_pos[0] +a][b];
 8000598:	465e      	mov	r6, fp
 800059a:	465c      	mov	r4, fp
	  while(!game_over){
 800059c:	9b03      	ldr	r3, [sp, #12]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d1fc      	bne.n	800059c <main+0x320>
		  ptr = (uint16_t *) calloc(1280, sizeof(uint16_t));
 80005a2:	2102      	movs	r1, #2
 80005a4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80005a8:	f002 f83e 	bl	8002628 <calloc>
 80005ac:	6832      	ldr	r2, [r6, #0]
 80005ae:	4683      	mov	fp, r0
 80005b0:	4601      	mov	r1, r0
 80005b2:	eb08 2202 	add.w	r2, r8, r2, lsl #8
 80005b6:	f500 6020 	add.w	r0, r0, #2560	; 0xa00
			  for(int b = 0; b < 128; b++){
 80005ba:	2300      	movs	r3, #0
 80005bc:	e02a      	b.n	8000614 <main+0x398>
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	40010800 	.word	0x40010800
 80005cc:	10110000 	.word	0x10110000
 80005d0:	40011000 	.word	0x40011000
 80005d4:	20000398 	.word	0x20000398
 80005d8:	40013000 	.word	0x40013000
 80005dc:	20000430 	.word	0x20000430
 80005e0:	40004400 	.word	0x40004400
 80005e4:	200000a4 	.word	0x200000a4
 80005e8:	40003800 	.word	0x40003800
 80005ec:	200003f0 	.word	0x200003f0
 80005f0:	20000358 	.word	0x20000358
 80005f4:	40012c00 	.word	0x40012c00
 80005f8:	200000fc 	.word	0x200000fc
 80005fc:	40000800 	.word	0x40000800
 8000600:	2000013c 	.word	0x2000013c
 8000604:	40000400 	.word	0x40000400
 8000608:	08002c1a 	.word	0x08002c1a
 800060c:	2000017c 	.word	0x2000017c
 8000610:	2000034c 	.word	0x2000034c
				  ptr[a*128 + b] = ground[col_pos[0] +a][b];
 8000614:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 8000618:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
			  for(int b = 0; b < 128; b++){
 800061c:	3301      	adds	r3, #1
 800061e:	2b80      	cmp	r3, #128	; 0x80
 8000620:	d1f8      	bne.n	8000614 <main+0x398>
 8000622:	f501 7180 	add.w	r1, r1, #256	; 0x100
		  for(int a = 0; a < 10; a++){
 8000626:	4281      	cmp	r1, r0
 8000628:	f502 7280 	add.w	r2, r2, #256	; 0x100
 800062c:	d1c5      	bne.n	80005ba <main+0x33e>
		  ptr1 = (uint16_t *) calloc(1280, sizeof(uint16_t));
 800062e:	2102      	movs	r1, #2
 8000630:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000634:	f001 fff8 	bl	8002628 <calloc>
 8000638:	6862      	ldr	r2, [r4, #4]
 800063a:	4682      	mov	sl, r0
 800063c:	4601      	mov	r1, r0
 800063e:	eb08 2202 	add.w	r2, r8, r2, lsl #8
 8000642:	f500 6020 	add.w	r0, r0, #2560	; 0xa00
					  for(int b = 0; b < 128; b++){
 8000646:	2300      	movs	r3, #0
						  ptr1[a*128 + b] = ground[col_pos[1] +a][b];
 8000648:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 800064c:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
					  for(int b = 0; b < 128; b++){
 8000650:	3301      	adds	r3, #1
 8000652:	2b80      	cmp	r3, #128	; 0x80
 8000654:	d1f8      	bne.n	8000648 <main+0x3cc>
 8000656:	f501 7180 	add.w	r1, r1, #256	; 0x100
				  for(int a = 0; a < 10; a++){
 800065a:	4281      	cmp	r1, r0
 800065c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000660:	d1f1      	bne.n	8000646 <main+0x3ca>
				  ptr2 = (uint16_t *) calloc(1280, sizeof(uint16_t));
 8000662:	2102      	movs	r1, #2
 8000664:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000668:	f001 ffde 	bl	8002628 <calloc>
 800066c:	4602      	mov	r2, r0
 800066e:	68a3      	ldr	r3, [r4, #8]
 8000670:	9002      	str	r0, [sp, #8]
 8000672:	eb08 2303 	add.w	r3, r8, r3, lsl #8
 8000676:	f500 6120 	add.w	r1, r0, #2560	; 0xa00
				 			  for(int b = 0; b < 128; b++){
 800067a:	f04f 0900 	mov.w	r9, #0
				 				  ptr2[a*128 + b] = ground[col_pos[2] +a][b];
 800067e:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 8000682:	f822 0019 	strh.w	r0, [r2, r9, lsl #1]
				 			  for(int b = 0; b < 128; b++){
 8000686:	f109 0901 	add.w	r9, r9, #1
 800068a:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 800068e:	d1f6      	bne.n	800067e <main+0x402>
 8000690:	f502 7280 	add.w	r2, r2, #256	; 0x100
				 		  for(int a = 0; a < 10; a++){
 8000694:	4291      	cmp	r1, r2
 8000696:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800069a:	d1ee      	bne.n	800067a <main+0x3fe>
			  buffer[a][b] = ground[a][b + i];
 800069c:	4ba8      	ldr	r3, [pc, #672]	; (8000940 <main+0x6c4>)
 800069e:	49a9      	ldr	r1, [pc, #676]	; (8000944 <main+0x6c8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f501 7ce1 	add.w	ip, r1, #450	; 0x1c2
 80006a6:	eb08 0043 	add.w	r0, r8, r3, lsl #1
		  for(int b = 0; b < 15; b++){
 80006aa:	2200      	movs	r2, #0
			  buffer[a][b] = ground[a][b + i];
 80006ac:	f830 e012 	ldrh.w	lr, [r0, r2, lsl #1]
 80006b0:	f821 e012 	strh.w	lr, [r1, r2, lsl #1]
		  for(int b = 0; b < 15; b++){
 80006b4:	3201      	adds	r2, #1
 80006b6:	2a0f      	cmp	r2, #15
 80006b8:	d1f8      	bne.n	80006ac <main+0x430>
 80006ba:	311e      	adds	r1, #30
	  for(int a = 0; a < 15; a++){
 80006bc:	4561      	cmp	r1, ip
 80006be:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80006c2:	d1f2      	bne.n	80006aa <main+0x42e>
      if(i < 108){
 80006c4:	2b6b      	cmp	r3, #107	; 0x6b
 80006c6:	dc54      	bgt.n	8000772 <main+0x4f6>
    	  i+=2;
 80006c8:	4a9d      	ldr	r2, [pc, #628]	; (8000940 <main+0x6c4>)
 80006ca:	3302      	adds	r3, #2
 80006cc:	6013      	str	r3, [r2, #0]
      if(col_pos[0] > 0){
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	dd59      	ble.n	8000788 <main+0x50c>
    	  if((col_pos[0] == 128)){
 80006d4:	2b80      	cmp	r3, #128	; 0x80
 80006d6:	d10f      	bne.n	80006f8 <main+0x47c>
    		  if(at_the_end == 1){
 80006d8:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
 80006dc:	b2c9      	uxtb	r1, r1
 80006de:	2901      	cmp	r1, #1
 80006e0:	d10a      	bne.n	80006f8 <main+0x47c>
    		  score++;
 80006e2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80006e6:	3201      	adds	r2, #1
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    		  at_the_end = 0;
 80006ee:	2200      	movs	r2, #0
 80006f0:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    		  sound_on = 1;
 80006f4:	4a94      	ldr	r2, [pc, #592]	; (8000948 <main+0x6cc>)
 80006f6:	7011      	strb	r1, [r2, #0]
    	  col_pos[0]--;
 80006f8:	3b01      	subs	r3, #1
 80006fa:	6023      	str	r3, [r4, #0]
      if(col_pos[1] < 0 ){
 80006fc:	6863      	ldr	r3, [r4, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	da4f      	bge.n	80007a2 <main+0x526>
    	  col_pos[1] = 128;
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	6063      	str	r3, [r4, #4]
        num = (rand() % (upper - lower + 1)) + lower;
 8000706:	f002 f88d 	bl	8002824 <rand>
 800070a:	2365      	movs	r3, #101	; 0x65
 800070c:	fb90 f2f3 	sdiv	r2, r0, r3
 8000710:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[1] = printRandoms(0, 100);
 8000714:	6068      	str	r0, [r5, #4]
      if(col_pos[2] < 0){
 8000716:	68a3      	ldr	r3, [r4, #8]
 8000718:	2b00      	cmp	r3, #0
 800071a:	da5c      	bge.n	80007d6 <main+0x55a>
    	  col_pos[2] = 128;
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	60a3      	str	r3, [r4, #8]
        num = (rand() % (upper - lower + 1)) + lower;
 8000720:	f002 f880 	bl	8002824 <rand>
 8000724:	2365      	movs	r3, #101	; 0x65
 8000726:	fb90 f2f3 	sdiv	r2, r0, r3
 800072a:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[2] = printRandoms(0, 100);
 800072e:	60a8      	str	r0, [r5, #8]
      if(j > 0){
 8000730:	2f00      	cmp	r7, #0
 8000732:	dd6a      	ble.n	800080a <main+0x58e>
    	  j--;
 8000734:	f107 39ff 	add.w	r9, r7, #4294967295
 8000738:	4b81      	ldr	r3, [pc, #516]	; (8000940 <main+0x6c4>)
 800073a:	6818      	ldr	r0, [r3, #0]
          if((col_pos[0] < 15) && (col_pos[0] > 0)){
 800073c:	6823      	ldr	r3, [r4, #0]
 800073e:	3b01      	subs	r3, #1
 8000740:	2b0d      	cmp	r3, #13
 8000742:	d86b      	bhi.n	800081c <main+0x5a0>
        	  if( (col_array[0] > i) || ((col_array[0]+10) < i )){
 8000744:	682b      	ldr	r3, [r5, #0]
 8000746:	4283      	cmp	r3, r0
 8000748:	dd62      	ble.n	8000810 <main+0x594>
        		  ST7735_DrawImage(0, 0, 128, 128, &ground);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	2100      	movs	r1, #0
 800074e:	461a      	mov	r2, r3
 8000750:	4608      	mov	r0, r1
 8000752:	f8cd 8000 	str.w	r8, [sp]
 8000756:	f000 fa8c 	bl	8000c72 <ST7735_DrawImage>
        	      ST7735_DrawImage(50, 0, 33, 128, &over);
 800075a:	4b7c      	ldr	r3, [pc, #496]	; (800094c <main+0x6d0>)
 800075c:	2221      	movs	r2, #33	; 0x21
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2100      	movs	r1, #0
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	2032      	movs	r0, #50	; 0x32
 8000766:	f000 fa84 	bl	8000c72 <ST7735_DrawImage>
        	      game_over = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	9303      	str	r3, [sp, #12]
 800076e:	464f      	mov	r7, r9
 8000770:	e714      	b.n	800059c <main+0x320>
    	  ST7735_DrawImage(50, 0, 33, 128, &over);
 8000772:	4b76      	ldr	r3, [pc, #472]	; (800094c <main+0x6d0>)
 8000774:	2221      	movs	r2, #33	; 0x21
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2100      	movs	r1, #0
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	2032      	movs	r0, #50	; 0x32
 800077e:	f000 fa78 	bl	8000c72 <ST7735_DrawImage>
    	  game_over = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	9303      	str	r3, [sp, #12]
 8000786:	e7a2      	b.n	80006ce <main+0x452>
    	  col_pos[0] = 128;
 8000788:	2780      	movs	r7, #128	; 0x80
        num = (rand() % (upper - lower + 1)) + lower;
 800078a:	f002 f84b 	bl	8002824 <rand>
    	  col_pos[0] = 128;
 800078e:	6027      	str	r7, [r4, #0]
        num = (rand() % (upper - lower + 1)) + lower;
 8000790:	f002 f848 	bl	8002824 <rand>
 8000794:	2365      	movs	r3, #101	; 0x65
 8000796:	fb90 f2f3 	sdiv	r2, r0, r3
 800079a:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[0] = printRandoms(0, 100);
 800079e:	6028      	str	r0, [r5, #0]
 80007a0:	e7ac      	b.n	80006fc <main+0x480>
    	  if(col_pos[1] != 128){
 80007a2:	2b80      	cmp	r3, #128	; 0x80
 80007a4:	d002      	beq.n	80007ac <main+0x530>
     	     col_pos[1] --;
 80007a6:	3b01      	subs	r3, #1
            	 col_pos[1] --;
 80007a8:	6063      	str	r3, [r4, #4]
 80007aa:	e7b4      	b.n	8000716 <main+0x49a>
             	if(at_the_end == 1){
 80007ac:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	2a01      	cmp	r2, #1
 80007b4:	d10a      	bne.n	80007cc <main+0x550>
               		score++;
 80007b6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80007ba:	3301      	adds	r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
               		at_the_end = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
               		sound_on = 1;
 80007c8:	4b5f      	ldr	r3, [pc, #380]	; (8000948 <main+0x6cc>)
 80007ca:	701a      	strb	r2, [r3, #0]
             if(col_pos[0] < 88){
 80007cc:	6823      	ldr	r3, [r4, #0]
 80007ce:	2b57      	cmp	r3, #87	; 0x57
 80007d0:	dca1      	bgt.n	8000716 <main+0x49a>
            	 col_pos[1] --;
 80007d2:	237f      	movs	r3, #127	; 0x7f
 80007d4:	e7e8      	b.n	80007a8 <main+0x52c>
          	  if(col_pos[2] != 128){
 80007d6:	2b80      	cmp	r3, #128	; 0x80
 80007d8:	d002      	beq.n	80007e0 <main+0x564>
          		  col_pos[2] --;
 80007da:	3b01      	subs	r3, #1
          	         col_pos[2] --;
 80007dc:	60a3      	str	r3, [r4, #8]
 80007de:	e7a7      	b.n	8000730 <main+0x4b4>
             	if(at_the_end == 1){
 80007e0:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	2a01      	cmp	r2, #1
 80007e8:	d10a      	bne.n	8000800 <main+0x584>
             		score++;
 80007ea:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80007ee:	3301      	adds	r3, #1
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
             		at_the_end = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
             		sound_on = 1;
 80007fc:	4b52      	ldr	r3, [pc, #328]	; (8000948 <main+0x6cc>)
 80007fe:	701a      	strb	r2, [r3, #0]
          	      if(col_pos[1] < 88){
 8000800:	6863      	ldr	r3, [r4, #4]
 8000802:	2b57      	cmp	r3, #87	; 0x57
 8000804:	dc94      	bgt.n	8000730 <main+0x4b4>
          	         col_pos[2] --;
 8000806:	237f      	movs	r3, #127	; 0x7f
 8000808:	e7e8      	b.n	80007dc <main+0x560>
        num = (rand() % (upper - lower + 1)) + lower;
 800080a:	f002 f80b 	bl	8002824 <rand>
 800080e:	e793      	b.n	8000738 <main+0x4bc>
        	  if( (col_array[0] > i) || ((col_array[0]+10) < i )){
 8000810:	330a      	adds	r3, #10
 8000812:	4283      	cmp	r3, r0
 8000814:	db99      	blt.n	800074a <main+0x4ce>
        	   at_the_end = 1;
 8000816:	2301      	movs	r3, #1
 8000818:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
          if((col_pos[1] < 15) && (col_pos[1] > 0)){
 800081c:	6863      	ldr	r3, [r4, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	2b0d      	cmp	r3, #13
 8000822:	d808      	bhi.n	8000836 <main+0x5ba>
        	  if( (col_array[1] > i) || ((col_array[1]+10) < i )){
 8000824:	686b      	ldr	r3, [r5, #4]
 8000826:	4283      	cmp	r3, r0
 8000828:	dc8f      	bgt.n	800074a <main+0x4ce>
 800082a:	330a      	adds	r3, #10
 800082c:	4283      	cmp	r3, r0
 800082e:	db8c      	blt.n	800074a <main+0x4ce>
             	 at_the_end = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
          if((col_pos[2] < 15) && (col_pos[2] > 0)){
 8000836:	68a3      	ldr	r3, [r4, #8]
 8000838:	3b01      	subs	r3, #1
 800083a:	2b0d      	cmp	r3, #13
 800083c:	d809      	bhi.n	8000852 <main+0x5d6>
                  	  if( (col_array[2] > i) || ((col_array[2]+10) < i )){
 800083e:	68ab      	ldr	r3, [r5, #8]
 8000840:	4283      	cmp	r3, r0
 8000842:	dc82      	bgt.n	800074a <main+0x4ce>
 8000844:	330a      	adds	r3, #10
 8000846:	4283      	cmp	r3, r0
 8000848:	f6ff af7f 	blt.w	800074a <main+0x4ce>
             	 at_the_end = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	  ST7735_FillRectangle(0, col_pos[0], col_array[0] , 10, ST7735_GREEN);
 8000852:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
          draw_bird(i, 0, &bird);
 8000856:	4a3e      	ldr	r2, [pc, #248]	; (8000950 <main+0x6d4>)
 8000858:	2100      	movs	r1, #0
 800085a:	b280      	uxth	r0, r0
 800085c:	f7ff fcb2 	bl	80001c4 <draw_bird>
	  ST7735_FillRectangle(0, col_pos[0], col_array[0] , 10, ST7735_GREEN);
 8000860:	882a      	ldrh	r2, [r5, #0]
 8000862:	8831      	ldrh	r1, [r6, #0]
 8000864:	230a      	movs	r3, #10
 8000866:	2000      	movs	r0, #0
 8000868:	9700      	str	r7, [sp, #0]
 800086a:	f000 f9f5 	bl	8000c58 <ST7735_FillRectangle>
	  ST7735_FillRectangle(col_array[0] + 20,col_pos[0], 88 - col_array[0] , 10, ST7735_GREEN);
 800086e:	8828      	ldrh	r0, [r5, #0]
 8000870:	8831      	ldrh	r1, [r6, #0]
 8000872:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 8000876:	3014      	adds	r0, #20
 8000878:	9700      	str	r7, [sp, #0]
 800087a:	230a      	movs	r3, #10
 800087c:	b292      	uxth	r2, r2
 800087e:	b280      	uxth	r0, r0
 8000880:	f000 f9ea 	bl	8000c58 <ST7735_FillRectangle>
	  if(col_pos[1] < 128){
 8000884:	6871      	ldr	r1, [r6, #4]
 8000886:	297f      	cmp	r1, #127	; 0x7f
 8000888:	dc11      	bgt.n	80008ae <main+0x632>
		  ST7735_FillRectangle(0, col_pos[1], col_array[1] , 10, ST7735_GREEN);
 800088a:	88aa      	ldrh	r2, [r5, #4]
 800088c:	230a      	movs	r3, #10
 800088e:	b289      	uxth	r1, r1
 8000890:	2000      	movs	r0, #0
 8000892:	9700      	str	r7, [sp, #0]
 8000894:	f000 f9e0 	bl	8000c58 <ST7735_FillRectangle>
		  ST7735_FillRectangle(col_array[1] + 20,col_pos[1], 88 - col_array[1] , 10, ST7735_GREEN);
 8000898:	88a8      	ldrh	r0, [r5, #4]
 800089a:	88b1      	ldrh	r1, [r6, #4]
 800089c:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 80008a0:	3014      	adds	r0, #20
 80008a2:	9700      	str	r7, [sp, #0]
 80008a4:	230a      	movs	r3, #10
 80008a6:	b292      	uxth	r2, r2
 80008a8:	b280      	uxth	r0, r0
 80008aa:	f000 f9d5 	bl	8000c58 <ST7735_FillRectangle>
	  if(col_pos[2] < 128){
 80008ae:	68b1      	ldr	r1, [r6, #8]
 80008b0:	297f      	cmp	r1, #127	; 0x7f
 80008b2:	dc13      	bgt.n	80008dc <main+0x660>
	 		  ST7735_FillRectangle(0, col_pos[2], col_array[2] , 10, ST7735_GREEN);
 80008b4:	f44f 67fc 	mov.w	r7, #2016	; 0x7e0
 80008b8:	892a      	ldrh	r2, [r5, #8]
 80008ba:	230a      	movs	r3, #10
 80008bc:	b289      	uxth	r1, r1
 80008be:	2000      	movs	r0, #0
 80008c0:	9700      	str	r7, [sp, #0]
 80008c2:	f000 f9c9 	bl	8000c58 <ST7735_FillRectangle>
	 		  ST7735_FillRectangle(col_array[2] + 20,col_pos[2], 88 - col_array[2] , 10, ST7735_GREEN);
 80008c6:	8928      	ldrh	r0, [r5, #8]
 80008c8:	8931      	ldrh	r1, [r6, #8]
 80008ca:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 80008ce:	3014      	adds	r0, #20
 80008d0:	9700      	str	r7, [sp, #0]
 80008d2:	230a      	movs	r3, #10
 80008d4:	b292      	uxth	r2, r2
 80008d6:	b280      	uxth	r0, r0
 80008d8:	f000 f9be 	bl	8000c58 <ST7735_FillRectangle>
	  HAL_Delay(100);
 80008dc:	2064      	movs	r0, #100	; 0x64
 80008de:	f000 fd17 	bl	8001310 <HAL_Delay>
	  ST7735_DrawImage(i, 0, 15, 15, &buffer);
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <main+0x6c4>)
 80008e4:	2100      	movs	r1, #0
 80008e6:	8818      	ldrh	r0, [r3, #0]
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <main+0x6c8>)
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	230f      	movs	r3, #15
 80008ee:	461a      	mov	r2, r3
 80008f0:	f000 f9bf 	bl	8000c72 <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[0], 128, 10, ptr);
 80008f4:	8821      	ldrh	r1, [r4, #0]
 80008f6:	230a      	movs	r3, #10
 80008f8:	f8cd b000 	str.w	fp, [sp]
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f9b7 	bl	8000c72 <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[1], 128, 10, ptr1);
 8000904:	88a1      	ldrh	r1, [r4, #4]
 8000906:	230a      	movs	r3, #10
 8000908:	f8cd a000 	str.w	sl, [sp]
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f9af 	bl	8000c72 <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[2], 128, 10, ptr2);
 8000914:	9b02      	ldr	r3, [sp, #8]
 8000916:	8921      	ldrh	r1, [r4, #8]
 8000918:	2280      	movs	r2, #128	; 0x80
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2000      	movs	r0, #0
 800091e:	230a      	movs	r3, #10
 8000920:	f000 f9a7 	bl	8000c72 <ST7735_DrawImage>
	  print_score(score);
 8000924:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8000928:	f7ff fc10 	bl	800014c <print_score>
	  free(ptr);
 800092c:	4658      	mov	r0, fp
 800092e:	f001 feb5 	bl	800269c <free>
	  free(ptr1);
 8000932:	4650      	mov	r0, sl
 8000934:	f001 feb2 	bl	800269c <free>
	  free(ptr2);
 8000938:	9802      	ldr	r0, [sp, #8]
 800093a:	f001 feaf 	bl	800269c <free>
 800093e:	e716      	b.n	800076e <main+0x4f2>
 8000940:	20000090 	.word	0x20000090
 8000944:	20000188 	.word	0x20000188
 8000948:	20000095 	.word	0x20000095
 800094c:	0800ad1a 	.word	0x0800ad1a
 8000950:	080028d8 	.word	0x080028d8

08000954 <HAL_TIM_PeriodElapsedCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(pin_selected == 3 ){
 8000956:	4c39      	ldr	r4, [pc, #228]	; (8000a3c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000958:	7823      	ldrb	r3, [r4, #0]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d12a      	bne.n	80009b4 <HAL_TIM_PeriodElapsedCallback+0x60>
  	if(HAL_GPIO_ReadPin(GPIOC, 8192) == GPIO_PIN_SET){
 800095e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000962:	4837      	ldr	r0, [pc, #220]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000964:	f000 fef4 	bl	8001750 <HAL_GPIO_ReadPin>
 8000968:	2801      	cmp	r0, #1
 800096a:	d121      	bne.n	80009b0 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800096c:	4a35      	ldr	r2, [pc, #212]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0xf0>)
//  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
    	  for(int a = 0; a < 15; a++){
    			  for(int b = 0; b < 15; b++){
    				  buffer[a][b] = ground[a][b + i];
 800096e:	4d36      	ldr	r5, [pc, #216]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000970:	4616      	mov	r6, r2
 8000972:	6828      	ldr	r0, [r5, #0]
 8000974:	4935      	ldr	r1, [pc, #212]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000976:	f502 77e1 	add.w	r7, r2, #450	; 0x1c2
 800097a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    			  for(int b = 0; b < 15; b++){
 800097e:	2300      	movs	r3, #0
    				  buffer[a][b] = ground[a][b + i];
 8000980:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
 8000984:	f822 c013 	strh.w	ip, [r2, r3, lsl #1]
    			  for(int b = 0; b < 15; b++){
 8000988:	3301      	adds	r3, #1
 800098a:	2b0f      	cmp	r3, #15
 800098c:	d1f8      	bne.n	8000980 <HAL_TIM_PeriodElapsedCallback+0x2c>
 800098e:	321e      	adds	r2, #30
    	  for(int a = 0; a < 15; a++){
 8000990:	42ba      	cmp	r2, r7
 8000992:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8000996:	d1f2      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x2a>
    			  }
    		  }
    	ST7735_DrawImage(i, 0, 15, 15, &buffer);
 8000998:	461a      	mov	r2, r3
 800099a:	b280      	uxth	r0, r0
 800099c:	9600      	str	r6, [sp, #0]
 800099e:	2100      	movs	r1, #0
 80009a0:	f000 f967 	bl	8000c72 <ST7735_DrawImage>

  		i -= 5;
 80009a4:	682b      	ldr	r3, [r5, #0]


  		HAL_TIM_Base_Stop_IT(&htim4);
 80009a6:	482a      	ldr	r0, [pc, #168]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
  		i -= 5;
 80009a8:	3b05      	subs	r3, #5
 80009aa:	602b      	str	r3, [r5, #0]
  		HAL_TIM_Base_Stop_IT(&htim4);
 80009ac:	f001 fb34 	bl	8002018 <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	7023      	strb	r3, [r4, #0]
    }
    if(pin_selected == 4 ){
 80009b4:	7825      	ldrb	r5, [r4, #0]
 80009b6:	2d04      	cmp	r5, #4
 80009b8:	d12e      	bne.n	8000a18 <HAL_TIM_PeriodElapsedCallback+0xc4>
  	if(HAL_GPIO_ReadPin(GPIOC, 16384) == GPIO_PIN_SET){
 80009ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009be:	4820      	ldr	r0, [pc, #128]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80009c0:	f000 fec6 	bl	8001750 <HAL_GPIO_ReadPin>
 80009c4:	2801      	cmp	r0, #1
 80009c6:	d125      	bne.n	8000a14 <HAL_TIM_PeriodElapsedCallback+0xc0>

  		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 80009c8:	4629      	mov	r1, r5
 80009ca:	4822      	ldr	r0, [pc, #136]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80009cc:	f000 fecb 	bl	8001766 <HAL_GPIO_TogglePin>
 80009d0:	4a1c      	ldr	r2, [pc, #112]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0xf0>)

  	  for(int a = 0; a < 15; a++){
  	    			  for(int b = 0; b < 15; b++){
  	    				  buffer[a][b] = ground[a][b + i];
 80009d2:	4d1d      	ldr	r5, [pc, #116]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80009d4:	4616      	mov	r6, r2
 80009d6:	6828      	ldr	r0, [r5, #0]
 80009d8:	491c      	ldr	r1, [pc, #112]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80009da:	f502 77e1 	add.w	r7, r2, #450	; 0x1c2
 80009de:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  	    			  for(int b = 0; b < 15; b++){
 80009e2:	2300      	movs	r3, #0
  	    				  buffer[a][b] = ground[a][b + i];
 80009e4:	f831 c013 	ldrh.w	ip, [r1, r3, lsl #1]
 80009e8:	f822 c013 	strh.w	ip, [r2, r3, lsl #1]
  	    			  for(int b = 0; b < 15; b++){
 80009ec:	3301      	adds	r3, #1
 80009ee:	2b0f      	cmp	r3, #15
 80009f0:	d1f8      	bne.n	80009e4 <HAL_TIM_PeriodElapsedCallback+0x90>
 80009f2:	321e      	adds	r2, #30
  	  for(int a = 0; a < 15; a++){
 80009f4:	42ba      	cmp	r2, r7
 80009f6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80009fa:	d1f2      	bne.n	80009e2 <HAL_TIM_PeriodElapsedCallback+0x8e>
  	    			  }
  	    		  }
  	    	ST7735_DrawImage(i, 0, 15, 15, &buffer);
 80009fc:	461a      	mov	r2, r3
 80009fe:	b280      	uxth	r0, r0
 8000a00:	9600      	str	r6, [sp, #0]
 8000a02:	2100      	movs	r1, #0
 8000a04:	f000 f935 	bl	8000c72 <ST7735_DrawImage>


  		i -= 10;
 8000a08:	682b      	ldr	r3, [r5, #0]
  		HAL_TIM_Base_Stop_IT(&htim4);
 8000a0a:	4811      	ldr	r0, [pc, #68]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
  		i -= 10;
 8000a0c:	3b0a      	subs	r3, #10
 8000a0e:	602b      	str	r3, [r5, #0]
  		HAL_TIM_Base_Stop_IT(&htim4);
 8000a10:	f001 fb02 	bl	8002018 <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	7023      	strb	r3, [r4, #0]
    }
    if(pin_selected == 4 ){
 8000a18:	7823      	ldrb	r3, [r4, #0]
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d10b      	bne.n	8000a36 <HAL_TIM_PeriodElapsedCallback+0xe2>
  	if(HAL_GPIO_ReadPin(GPIOC,  32768) == GPIO_PIN_SET){
 8000a1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a22:	4807      	ldr	r0, [pc, #28]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000a24:	f000 fe94 	bl	8001750 <HAL_GPIO_ReadPin>
 8000a28:	2801      	cmp	r0, #1
 8000a2a:	d102      	bne.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0xde>

//  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);

  		HAL_TIM_Base_Stop_IT(&htim4);
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000a2e:	f001 faf3 	bl	8002018 <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	7023      	strb	r3, [r4, #0]
    }

}
 8000a36:	b003      	add	sp, #12
 8000a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000097 	.word	0x20000097
 8000a40:	40011000 	.word	0x40011000
 8000a44:	20000188 	.word	0x20000188
 8000a48:	20000090 	.word	0x20000090
 8000a4c:	08002c1a 	.word	0x08002c1a
 8000a50:	200000fc 	.word	0x200000fc
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a58:	4770      	bx	lr
	...

08000a5c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a62:	4801      	ldr	r0, [pc, #4]	; (8000a68 <ST7735_Select+0xc>)
 8000a64:	f000 be7a 	b.w	800175c <HAL_GPIO_WritePin>
 8000a68:	40010800 	.word	0x40010800

08000a6c <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 8000a6c:	b513      	push	{r0, r1, r4, lr}
 8000a6e:	ac02      	add	r4, sp, #8
 8000a70:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	4806      	ldr	r0, [pc, #24]	; (8000a94 <ST7735_WriteCommand+0x28>)
 8000a7c:	f000 fe6e 	bl	800175c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
 8000a84:	2201      	movs	r2, #1
 8000a86:	4621      	mov	r1, r4
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <ST7735_WriteCommand+0x2c>)
 8000a8a:	f001 f997 	bl	8001dbc <HAL_SPI_Transmit>
}
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd10      	pop	{r4, pc}
 8000a92:	bf00      	nop
 8000a94:	40010800 	.word	0x40010800
 8000a98:	200000a4 	.word	0x200000a4

08000a9c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <ST7735_WriteData+0x24>)
 8000aaa:	f000 fe57 	bl	800175c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000aae:	b2aa      	uxth	r2, r5
 8000ab0:	4621      	mov	r1, r4
}
 8000ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <ST7735_WriteData+0x28>)
 8000abc:	f001 b97e 	b.w	8001dbc <HAL_SPI_Transmit>
 8000ac0:	40010800 	.word	0x40010800
 8000ac4:	200000a4 	.word	0x200000a4

08000ac8 <ST7735_ExecuteCommandList>:
static void ST7735_WriteData_16bit(uint8_t* buff, size_t buff_size) {
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
}

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000aca:	7805      	ldrb	r5, [r0, #0]
 8000acc:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 8000ace:	3d01      	subs	r5, #1
 8000ad0:	b2ed      	uxtb	r5, r5
 8000ad2:	2dff      	cmp	r5, #255	; 0xff
 8000ad4:	d100      	bne.n	8000ad8 <ST7735_ExecuteCommandList+0x10>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 8000ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 8000ad8:	4634      	mov	r4, r6
 8000ada:	f814 0b02 	ldrb.w	r0, [r4], #2
 8000ade:	f7ff ffc5 	bl	8000a6c <ST7735_WriteCommand>
        numArgs = *addr++;
 8000ae2:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 8000ae4:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 8000ae8:	d004      	beq.n	8000af4 <ST7735_ExecuteCommandList+0x2c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000aea:	4620      	mov	r0, r4
 8000aec:	4639      	mov	r1, r7
 8000aee:	f7ff ffd5 	bl	8000a9c <ST7735_WriteData>
            addr += numArgs;
 8000af2:	443c      	add	r4, r7
        if(ms) {
 8000af4:	0633      	lsls	r3, r6, #24
 8000af6:	d508      	bpl.n	8000b0a <ST7735_ExecuteCommandList+0x42>
            ms = *addr++;
 8000af8:	7820      	ldrb	r0, [r4, #0]
 8000afa:	1c66      	adds	r6, r4, #1
            if(ms == 255) ms = 500;
 8000afc:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 8000afe:	bf08      	it	eq
 8000b00:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 8000b04:	f000 fc04 	bl	8001310 <HAL_Delay>
            ms = *addr++;
 8000b08:	4634      	mov	r4, r6
 8000b0a:	4626      	mov	r6, r4
 8000b0c:	e7df      	b.n	8000ace <ST7735_ExecuteCommandList+0x6>

08000b0e <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000b10:	4607      	mov	r7, r0
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000b12:	202a      	movs	r0, #42	; 0x2a
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000b14:	4616      	mov	r6, r2
 8000b16:	460d      	mov	r5, r1
 8000b18:	461c      	mov	r4, r3
    ST7735_WriteCommand(ST7735_CASET);
 8000b1a:	f7ff ffa7 	bl	8000a6c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
    ST7735_WriteData(data, sizeof(data));
 8000b1e:	2104      	movs	r1, #4
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000b20:	2300      	movs	r3, #0
    ST7735_WriteData(data, sizeof(data));
 8000b22:	eb0d 0001 	add.w	r0, sp, r1
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000b26:	3702      	adds	r7, #2
 8000b28:	3602      	adds	r6, #2
 8000b2a:	f88d 3004 	strb.w	r3, [sp, #4]
 8000b2e:	f88d 3006 	strb.w	r3, [sp, #6]
 8000b32:	f88d 7005 	strb.w	r7, [sp, #5]
 8000b36:	f88d 6007 	strb.w	r6, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8000b3a:	f7ff ffaf 	bl	8000a9c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000b3e:	202b      	movs	r0, #43	; 0x2b
 8000b40:	f7ff ff94 	bl	8000a6c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
    data[3] = y1 + ST7735_YSTART;
    ST7735_WriteData(data, sizeof(data));
 8000b44:	2104      	movs	r1, #4
    data[1] = y0 + ST7735_YSTART;
 8000b46:	3503      	adds	r5, #3
    ST7735_WriteData(data, sizeof(data));
 8000b48:	eb0d 0001 	add.w	r0, sp, r1
    data[3] = y1 + ST7735_YSTART;
 8000b4c:	3403      	adds	r4, #3
    data[1] = y0 + ST7735_YSTART;
 8000b4e:	f88d 5005 	strb.w	r5, [sp, #5]
    data[3] = y1 + ST7735_YSTART;
 8000b52:	f88d 4007 	strb.w	r4, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8000b56:	f7ff ffa1 	bl	8000a9c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000b5a:	202c      	movs	r0, #44	; 0x2c
 8000b5c:	f7ff ff86 	bl	8000a6c <ST7735_WriteCommand>
}
 8000b60:	b003      	add	sp, #12
 8000b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b64 <ST7735_Unselect>:
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b6a:	4801      	ldr	r0, [pc, #4]	; (8000b70 <ST7735_Unselect+0xc>)
 8000b6c:	f000 bdf6 	b.w	800175c <HAL_GPIO_WritePin>
 8000b70:	40010800 	.word	0x40010800

08000b74 <ST7735_FillRectangle.part.1>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000b78:	461c      	mov	r4, r3
 8000b7a:	4615      	mov	r5, r2
 8000b7c:	460f      	mov	r7, r1
 8000b7e:	4606      	mov	r6, r0
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000b80:	1883      	adds	r3, r0, r2
 8000b82:	2b80      	cmp	r3, #128	; 0x80
 8000b84:	bfc8      	it	gt
 8000b86:	f1c0 0580 	rsbgt	r5, r0, #128	; 0x80
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000b8a:	eb01 0304 	add.w	r3, r1, r4
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000b8e:	bfc8      	it	gt
 8000b90:	b2ad      	uxthgt	r5, r5
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000b92:	2b80      	cmp	r3, #128	; 0x80
 8000b94:	bfc4      	itt	gt
 8000b96:	f1c1 0480 	rsbgt	r4, r1, #128	; 0x80
 8000b9a:	b2a4      	uxthgt	r4, r4
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b9c:	f8bd 8020 	ldrh.w	r8, [sp, #32]

    ST7735_Select();
 8000ba0:	f7ff ff5c 	bl	8000a5c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ba4:	b2f9      	uxtb	r1, r7
 8000ba6:	b2f0      	uxtb	r0, r6
 8000ba8:	1e4b      	subs	r3, r1, #1
 8000baa:	1e42      	subs	r2, r0, #1
 8000bac:	4423      	add	r3, r4
 8000bae:	442a      	add	r2, r5
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	f7ff ffab 	bl	8000b0e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bb8:	ea4f 2318 	mov.w	r3, r8, lsr #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc2:	480f      	ldr	r0, [pc, #60]	; (8000c00 <ST7735_FillRectangle.part.1+0x8c>)
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000bc4:	f88d 3004 	strb.w	r3, [sp, #4]
 8000bc8:	f88d 8005 	strb.w	r8, [sp, #5]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000bcc:	f000 fdc6 	bl	800175c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bd0:	4f0c      	ldr	r7, [pc, #48]	; (8000c04 <ST7735_FillRectangle.part.1+0x90>)
    for(y = h; y > 0; y--) {
 8000bd2:	b994      	cbnz	r4, 8000bfa <ST7735_FillRectangle.part.1+0x86>
        }
    }

    ST7735_Unselect();
 8000bd4:	f7ff ffc6 	bl	8000b64 <ST7735_Unselect>
}
 8000bd8:	b002      	add	sp, #8
 8000bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	2202      	movs	r2, #2
 8000be4:	a901      	add	r1, sp, #4
 8000be6:	4638      	mov	r0, r7
 8000be8:	f001 f8e8 	bl	8001dbc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000bec:	3e01      	subs	r6, #1
 8000bee:	b2b6      	uxth	r6, r6
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d1f4      	bne.n	8000bde <ST7735_FillRectangle.part.1+0x6a>
    for(y = h; y > 0; y--) {
 8000bf4:	3c01      	subs	r4, #1
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	e7eb      	b.n	8000bd2 <ST7735_FillRectangle.part.1+0x5e>
        for(x = w; x > 0; x--) {
 8000bfa:	462e      	mov	r6, r5
 8000bfc:	e7f8      	b.n	8000bf0 <ST7735_FillRectangle.part.1+0x7c>
 8000bfe:	bf00      	nop
 8000c00:	40010800 	.word	0x40010800
 8000c04:	200000a4 	.word	0x200000a4

08000c08 <ST7735_Init>:
void ST7735_Init() {
 8000c08:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000c0a:	4c0f      	ldr	r4, [pc, #60]	; (8000c48 <ST7735_Init+0x40>)
    ST7735_Select();
 8000c0c:	f7ff ff26 	bl	8000a5c <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c16:	4620      	mov	r0, r4
 8000c18:	f000 fda0 	bl	800175c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000c1c:	2005      	movs	r0, #5
 8000c1e:	f000 fb77 	bl	8001310 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f000 fd97 	bl	800175c <HAL_GPIO_WritePin>
    ST7735_ExecuteCommandList(init_cmds1);
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <ST7735_Init+0x44>)
 8000c30:	f7ff ff4a 	bl	8000ac8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <ST7735_Init+0x48>)
 8000c36:	f7ff ff47 	bl	8000ac8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <ST7735_Init+0x4c>)
 8000c3c:	f7ff ff44 	bl	8000ac8 <ST7735_ExecuteCommandList>
}
 8000c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ST7735_Unselect();
 8000c44:	f7ff bf8e 	b.w	8000b64 <ST7735_Unselect>
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	0800d09a 	.word	0x0800d09a
 8000c50:	0800d0d5 	.word	0x0800d0d5
 8000c54:	0800d0e2 	.word	0x0800d0e2

08000c58 <ST7735_FillRectangle>:
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000c58:	b430      	push	{r4, r5}
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c5a:	287f      	cmp	r0, #127	; 0x7f
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000c5c:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c60:	d805      	bhi.n	8000c6e <ST7735_FillRectangle+0x16>
 8000c62:	297f      	cmp	r1, #127	; 0x7f
 8000c64:	d803      	bhi.n	8000c6e <ST7735_FillRectangle+0x16>
 8000c66:	9402      	str	r4, [sp, #8]
}
 8000c68:	bc30      	pop	{r4, r5}
 8000c6a:	f7ff bf83 	b.w	8000b74 <ST7735_FillRectangle.part.1>
 8000c6e:	bc30      	pop	{r4, r5}
 8000c70:	4770      	bx	lr

08000c72 <ST7735_DrawImage>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c76:	287f      	cmp	r0, #127	; 0x7f
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000c78:	4604      	mov	r4, r0
 8000c7a:	460d      	mov	r5, r1
 8000c7c:	4617      	mov	r7, r2
 8000c7e:	461e      	mov	r6, r3
 8000c80:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c84:	d81c      	bhi.n	8000cc0 <ST7735_DrawImage+0x4e>
 8000c86:	297f      	cmp	r1, #127	; 0x7f
 8000c88:	d81a      	bhi.n	8000cc0 <ST7735_DrawImage+0x4e>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000c8a:	1883      	adds	r3, r0, r2
 8000c8c:	2b80      	cmp	r3, #128	; 0x80
 8000c8e:	dc17      	bgt.n	8000cc0 <ST7735_DrawImage+0x4e>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000c90:	198b      	adds	r3, r1, r6
 8000c92:	2b80      	cmp	r3, #128	; 0x80
 8000c94:	dc14      	bgt.n	8000cc0 <ST7735_DrawImage+0x4e>

    ST7735_Select();
 8000c96:	f7ff fee1 	bl	8000a5c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c9a:	b2e0      	uxtb	r0, r4
 8000c9c:	b2e9      	uxtb	r1, r5
 8000c9e:	1e73      	subs	r3, r6, #1
 8000ca0:	1e7a      	subs	r2, r7, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	4402      	add	r2, r0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	f7ff ff30 	bl	8000b0e <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000cae:	0071      	lsls	r1, r6, #1
 8000cb0:	4379      	muls	r1, r7
 8000cb2:	4640      	mov	r0, r8
 8000cb4:	f7ff fef2 	bl	8000a9c <ST7735_WriteData>
    ST7735_Unselect();
}
 8000cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ST7735_Unselect();
 8000cbc:	f7ff bf52 	b.w	8000b64 <ST7735_Unselect>
}
 8000cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000cc4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_MspInit+0x3c>)
{
 8000cc6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc8:	699a      	ldr	r2, [r3, #24]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	619a      	str	r2, [r3, #24]
 8000cd0:	699a      	ldr	r2, [r3, #24]
 8000cd2:	f002 0201 	and.w	r2, r2, #1
 8000cd6:	9200      	str	r2, [sp, #0]
 8000cd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	69da      	ldr	r2, [r3, #28]
 8000cdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ce0:	61da      	str	r2, [r3, #28]
 8000ce2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cee:	6853      	ldr	r3, [r2, #4]
 8000cf0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	b002      	add	sp, #8
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000

08000d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d08:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	2710      	movs	r7, #16
{
 8000d0c:	4605      	mov	r5, r0
 8000d0e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	463a      	mov	r2, r7
 8000d12:	2100      	movs	r1, #0
 8000d14:	eb0d 0007 	add.w	r0, sp, r7
 8000d18:	f001 fcc8 	bl	80026ac <memset>
  if(hspi->Instance==SPI1)
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	4a4b      	ldr	r2, [pc, #300]	; (8000e4c <HAL_SPI_MspInit+0x144>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d15c      	bne.n	8000dde <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d24:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <HAL_SPI_MspInit+0x148>)
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2028      	movs	r0, #40	; 0x28
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d28:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2a:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d30:	619a      	str	r2, [r3, #24]
 8000d32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d38:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000d3c:	9200      	str	r2, [sp, #0]
 8000d3e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	699a      	ldr	r2, [r3, #24]

    __HAL_AFIO_REMAP_SPI1_ENABLE();

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000d42:	4c44      	ldr	r4, [pc, #272]	; (8000e54 <HAL_SPI_MspInit+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	f042 0208 	orr.w	r2, r2, #8
 8000d48:	619a      	str	r2, [r3, #24]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	483e      	ldr	r0, [pc, #248]	; (8000e58 <HAL_SPI_MspInit+0x150>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f000 fc16 	bl	8001590 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	483c      	ldr	r0, [pc, #240]	; (8000e58 <HAL_SPI_MspInit+0x150>)
 8000d66:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d6a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f000 fc0e 	bl	8001590 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000d74:	4a39      	ldr	r2, [pc, #228]	; (8000e5c <HAL_SPI_MspInit+0x154>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d76:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000d78:	6853      	ldr	r3, [r2, #4]
 8000d7a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6053      	str	r3, [r2, #4]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000d84:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <HAL_SPI_MspInit+0x158>)
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d86:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d88:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d8c:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d8e:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d96:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d9a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d9c:	f000 fb34 	bl	8001408 <HAL_DMA_Init>
 8000da0:	b108      	cbz	r0, 8000da6 <HAL_SPI_MspInit+0x9e>
    {
      Error_Handler();
 8000da2:	f7ff fe59 	bl	8000a58 <Error_Handler>

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da6:	2310      	movs	r3, #16
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000da8:	64ec      	str	r4, [r5, #76]	; 0x4c
 8000daa:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dac:	492d      	ldr	r1, [pc, #180]	; (8000e64 <HAL_SPI_MspInit+0x15c>)
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000dae:	4c2e      	ldr	r4, [pc, #184]	; (8000e68 <HAL_SPI_MspInit+0x160>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db0:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000db2:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dbc:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dc8:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dca:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dcc:	f000 fb1c 	bl	8001408 <HAL_DMA_Init>
 8000dd0:	b108      	cbz	r0, 8000dd6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000dd2:	f7ff fe41 	bl	8000a58 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000dd6:	64ac      	str	r4, [r5, #72]	; 0x48
 8000dd8:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dda:	b009      	add	sp, #36	; 0x24
 8000ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hspi->Instance==SPI2)
 8000dde:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <HAL_SPI_MspInit+0x164>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d1fa      	bne.n	8000dda <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_SPI_MspInit+0x148>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000de8:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	481b      	ldr	r0, [pc, #108]	; (8000e58 <HAL_SPI_MspInit+0x150>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000df0:	61da      	str	r2, [r3, #28]
 8000df2:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2600      	movs	r6, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000dfa:	9202      	str	r2, [sp, #8]
 8000dfc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	699a      	ldr	r2, [r3, #24]
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000e00:	4c1b      	ldr	r4, [pc, #108]	; (8000e70 <HAL_SPI_MspInit+0x168>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e02:	f042 0208 	orr.w	r2, r2, #8
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	9303      	str	r3, [sp, #12]
 8000e14:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f000 fbb6 	bl	8001590 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	a904      	add	r1, sp, #16
 8000e2a:	480b      	ldr	r0, [pc, #44]	; (8000e58 <HAL_SPI_MspInit+0x150>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f000 fbad 	bl	8001590 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_SPI_MspInit+0x16c>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e38:	60a6      	str	r6, [r4, #8]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e3a:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e3e:	2380      	movs	r3, #128	; 0x80
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000e40:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e44:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8000e48:	e7bc      	b.n	8000dc4 <HAL_SPI_MspInit+0xbc>
 8000e4a:	bf00      	nop
 8000e4c:	40013000 	.word	0x40013000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	20000470 	.word	0x20000470
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	40010000 	.word	0x40010000
 8000e60:	4002001c 	.word	0x4002001c
 8000e64:	40020030 	.word	0x40020030
 8000e68:	200004f8 	.word	0x200004f8
 8000e6c:	40003800 	.word	0x40003800
 8000e70:	200004b4 	.word	0x200004b4
 8000e74:	40020058 	.word	0x40020058

08000e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e78:	b510      	push	{r4, lr}
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	2210      	movs	r2, #16
 8000e80:	2100      	movs	r1, #0
 8000e82:	a806      	add	r0, sp, #24
 8000e84:	f001 fc12 	bl	80026ac <memset>
  if(htim_base->Instance==TIM1)
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	4a34      	ldr	r2, [pc, #208]	; (8000f5c <HAL_TIM_Base_MspInit+0xe4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d112      	bne.n	8000eb6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e90:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <HAL_TIM_Base_MspInit+0xe8>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e92:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e94:	699a      	ldr	r2, [r3, #24]
 8000e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e9a:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e9e:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000ea0:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000eaa:	f000 fa55 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000eae:	2019      	movs	r0, #25
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000eb0:	f000 fa86 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000eb4:	e027      	b.n	8000f06 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8000eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eba:	d126      	bne.n	8000f0a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000ec0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	a906      	add	r1, sp, #24
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec4:	f042 0201 	orr.w	r2, r2, #1
 8000ec8:	61da      	str	r2, [r3, #28]
 8000eca:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	4825      	ldr	r0, [pc, #148]	; (8000f64 <HAL_TIM_Base_MspInit+0xec>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ece:	f002 0201 	and.w	r2, r2, #1
 8000ed2:	9202      	str	r2, [sp, #8]
 8000ed4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	f042 0204 	orr.w	r2, r2, #4
 8000edc:	619a      	str	r2, [r3, #24]
 8000ede:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	9303      	str	r3, [sp, #12]
 8000eea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f000 fb4c 	bl	8001590 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <HAL_TIM_Base_MspInit+0xf0>)
 8000efa:	6853      	ldr	r3, [r2, #4]
 8000efc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000f00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000f04:	6053      	str	r3, [r2, #4]
}
 8000f06:	b00a      	add	sp, #40	; 0x28
 8000f08:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <HAL_TIM_Base_MspInit+0xf4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d110      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_TIM_Base_MspInit+0xe8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f12:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f14:	69da      	ldr	r2, [r3, #28]
 8000f16:	f042 0202 	orr.w	r2, r2, #2
 8000f1a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f20:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	9304      	str	r3, [sp, #16]
 8000f28:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f2a:	f000 fa15 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f2e:	201d      	movs	r0, #29
 8000f30:	e7be      	b.n	8000eb0 <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM4)
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <HAL_TIM_Base_MspInit+0xf8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d1e6      	bne.n	8000f06 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_TIM_Base_MspInit+0xe8>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f3a:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f3c:	69da      	ldr	r2, [r3, #28]
 8000f3e:	f042 0204 	orr.w	r2, r2, #4
 8000f42:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f46:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f48:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	9305      	str	r3, [sp, #20]
 8000f50:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f52:	f000 fa01 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f56:	201e      	movs	r0, #30
 8000f58:	e7aa      	b.n	8000eb0 <HAL_TIM_Base_MspInit+0x38>
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010800 	.word	0x40010800
 8000f68:	40010000 	.word	0x40010000
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40000800 	.word	0x40000800

08000f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f74:	b510      	push	{r4, lr}
 8000f76:	4604      	mov	r4, r0
 8000f78:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7a:	2210      	movs	r2, #16
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	a802      	add	r0, sp, #8
 8000f80:	f001 fb94 	bl	80026ac <memset>
  if(htim->Instance==TIM2)
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8a:	d11b      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000f90:	699a      	ldr	r2, [r3, #24]
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	f042 0208 	orr.w	r2, r2, #8
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <HAL_TIM_MspPostInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f000 faed 	bl	8001590 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <HAL_TIM_MspPostInit+0x58>)
 8000fb8:	6853      	ldr	r3, [r2, #4]
 8000fba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000fbe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000fc2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fc4:	b006      	add	sp, #24
 8000fc6:	bd10      	pop	{r4, pc}
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40010000 	.word	0x40010000

08000fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	2100      	movs	r1, #0
 8000fda:	a802      	add	r0, sp, #8
 8000fdc:	f001 fb66 	bl	80026ac <memset>
  if(huart->Instance==USART2)
 8000fe0:	6822      	ldr	r2, [r4, #0]
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_UART_MspInit+0x6c>)
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d126      	bne.n	8001036 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000fec:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ff4:	61da      	str	r2, [r3, #28]
 8000ff6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	4811      	ldr	r0, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000ffe:	9200      	str	r2, [sp, #0]
 8001000:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	699a      	ldr	r2, [r3, #24]
 8001004:	f042 0204 	orr.w	r2, r2, #4
 8001008:	619a      	str	r2, [r3, #24]
 800100a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f000 fab6 	bl	8001590 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001024:	2108      	movs	r1, #8
 8001026:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f000 faad 	bl	8001590 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001036:	b006      	add	sp, #24
 8001038:	bd10      	pop	{r4, pc}
 800103a:	bf00      	nop
 800103c:	40004400 	.word	0x40004400
 8001040:	40010800 	.word	0x40010800

08001044 <SDTimer_Handler>:
volatile uint8_t Timer1, Timer2;


void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <SDTimer_Handler+0x20>)
 8001046:	7813      	ldrb	r3, [r2, #0]
 8001048:	b11b      	cbz	r3, 8001052 <SDTimer_Handler+0xe>
    Timer1--;
 800104a:	7813      	ldrb	r3, [r2, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SDTimer_Handler+0x24>)
 8001054:	7813      	ldrb	r3, [r2, #0]
 8001056:	b11b      	cbz	r3, 8001060 <SDTimer_Handler+0x1c>
    Timer2--;
 8001058:	7813      	ldrb	r3, [r2, #0]
 800105a:	3b01      	subs	r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	7013      	strb	r3, [r2, #0]
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000053d 	.word	0x2000053d
 8001068:	2000053c 	.word	0x2000053c

0800106c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800106c:	4770      	bx	lr

0800106e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106e:	e7fe      	b.n	800106e <HardFault_Handler>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler>

08001076 <SVC_Handler>:
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <SysTick_Handler+0x24>)
 8001080:	7813      	ldrb	r3, [r2, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	7013      	strb	r3, [r2, #0]
  if(FatFsCnt >= 10)
 8001088:	7813      	ldrb	r3, [r2, #0]
 800108a:	2b09      	cmp	r3, #9
 800108c:	d903      	bls.n	8001096 <SysTick_Handler+0x1a>
  {
    FatFsCnt = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	7013      	strb	r3, [r2, #0]
    SDTimer_Handler();
 8001092:	f7ff ffd7 	bl	8001044 <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 800109a:	f000 b927 	b.w	80012ec <HAL_IncTick>
 800109e:	bf00      	nop
 80010a0:	20000096 	.word	0x20000096

080010a4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80010a4:	4801      	ldr	r0, [pc, #4]	; (80010ac <DMA1_Channel2_IRQHandler+0x8>)
 80010a6:	f000 b9df 	b.w	8001468 <HAL_DMA_IRQHandler>
 80010aa:	bf00      	nop
 80010ac:	20000470 	.word	0x20000470

080010b0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80010b0:	4801      	ldr	r0, [pc, #4]	; (80010b8 <DMA1_Channel3_IRQHandler+0x8>)
 80010b2:	f000 b9d9 	b.w	8001468 <HAL_DMA_IRQHandler>
 80010b6:	bf00      	nop
 80010b8:	200004f8 	.word	0x200004f8

080010bc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80010bc:	4801      	ldr	r0, [pc, #4]	; (80010c4 <DMA1_Channel5_IRQHandler+0x8>)
 80010be:	f000 b9d3 	b.w	8001468 <HAL_DMA_IRQHandler>
 80010c2:	bf00      	nop
 80010c4:	200004b4 	.word	0x200004b4

080010c8 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c8:	4801      	ldr	r0, [pc, #4]	; (80010d0 <TIM1_UP_IRQHandler+0x8>)
 80010ca:	f000 bfbf 	b.w	800204c <HAL_TIM_IRQHandler>
 80010ce:	bf00      	nop
 80010d0:	20000358 	.word	0x20000358

080010d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010d4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if(sound_on == 1){
 80010d6:	4c13      	ldr	r4, [pc, #76]	; (8001124 <TIM3_IRQHandler+0x50>)
  HAL_TIM_IRQHandler(&htim3);
 80010d8:	4813      	ldr	r0, [pc, #76]	; (8001128 <TIM3_IRQHandler+0x54>)
 80010da:	f000 ffb7 	bl	800204c <HAL_TIM_IRQHandler>
  if(sound_on == 1){
 80010de:	7821      	ldrb	r1, [r4, #0]
 80010e0:	2901      	cmp	r1, #1
 80010e2:	d113      	bne.n	800110c <TIM3_IRQHandler+0x38>
 	 if(sound < 1){
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <TIM3_IRQHandler+0x58>)
 80010e6:	781a      	ldrb	r2, [r3, #0]
 80010e8:	b98a      	cbnz	r2, 800110e <TIM3_IRQHandler+0x3a>
 		 __HAL_TIM_SET_AUTORELOAD(&htim2,coin_effect[0]);
 80010ea:	4a11      	ldr	r2, [pc, #68]	; (8001130 <TIM3_IRQHandler+0x5c>)
 80010ec:	4811      	ldr	r0, [pc, #68]	; (8001134 <TIM3_IRQHandler+0x60>)
 80010ee:	6815      	ldr	r5, [r2, #0]
 80010f0:	8800      	ldrh	r0, [r0, #0]
 		 sound++;
 80010f2:	7019      	strb	r1, [r3, #0]
 		 __HAL_TIM_SET_AUTORELOAD(&htim2,coin_effect[0]);
 80010f4:	62e8      	str	r0, [r5, #44]	; 0x2c
 80010f6:	60d0      	str	r0, [r2, #12]
 	 if(sound < 4){
 		 __HAL_TIM_SET_AUTORELOAD(&htim2,coin_effect[1]);
 	 }
 	 sound++;
 	 }
 	 if(sound > 4){
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	2a04      	cmp	r2, #4
 80010fc:	d906      	bls.n	800110c <TIM3_IRQHandler+0x38>
 		 sound_on = 0;
 80010fe:	2200      	movs	r2, #0
 		 sound = 0;
 8001100:	701a      	strb	r2, [r3, #0]
 		 __HAL_TIM_SET_AUTORELOAD(&htim2,0);
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <TIM3_IRQHandler+0x5c>)
 		 sound_on = 0;
 8001104:	7022      	strb	r2, [r4, #0]
 		 __HAL_TIM_SET_AUTORELOAD(&htim2,0);
 8001106:	6819      	ldr	r1, [r3, #0]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	62ca      	str	r2, [r1, #44]	; 0x2c
 	 }
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 800110c:	bd38      	pop	{r3, r4, r5, pc}
 	 if(sound < 4){
 800110e:	2a03      	cmp	r2, #3
 8001110:	d805      	bhi.n	800111e <TIM3_IRQHandler+0x4a>
 		 __HAL_TIM_SET_AUTORELOAD(&htim2,coin_effect[1]);
 8001112:	4907      	ldr	r1, [pc, #28]	; (8001130 <TIM3_IRQHandler+0x5c>)
 8001114:	4807      	ldr	r0, [pc, #28]	; (8001134 <TIM3_IRQHandler+0x60>)
 8001116:	680d      	ldr	r5, [r1, #0]
 8001118:	8840      	ldrh	r0, [r0, #2]
 800111a:	62e8      	str	r0, [r5, #44]	; 0x2c
 800111c:	60c8      	str	r0, [r1, #12]
 	 sound++;
 800111e:	3201      	adds	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e7e9      	b.n	80010f8 <TIM3_IRQHandler+0x24>
 8001124:	20000095 	.word	0x20000095
 8001128:	2000013c 	.word	0x2000013c
 800112c:	20000094 	.word	0x20000094
 8001130:	200003f0 	.word	0x200003f0
 8001134:	20000000 	.word	0x20000000

08001138 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001138:	4801      	ldr	r0, [pc, #4]	; (8001140 <TIM4_IRQHandler+0x8>)
 800113a:	f000 bf87 	b.w	800204c <HAL_TIM_IRQHandler>
 800113e:	bf00      	nop
 8001140:	200000fc 	.word	0x200000fc

08001144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001144:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001146:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800114a:	f000 fb13 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800114e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001152:	f000 fb0f 	bl	8001774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800115a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800115e:	f000 bb09 	b.w	8001774 <HAL_GPIO_EXTI_IRQHandler>
	...

08001164 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	  if ( GPIO_Pin == GPIO_PIN_13)
 8001164:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 8001168:	b508      	push	{r3, lr}
	  if ( GPIO_Pin == GPIO_PIN_13)
 800116a:	d106      	bne.n	800117a <HAL_GPIO_EXTI_Callback+0x16>
	      {
	          // Write your code here
	      	HAL_TIM_Base_Start_IT(&htim4);
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800116e:	f000 ff43 	bl	8001ff8 <HAL_TIM_Base_Start_IT>

	      	pin_selected = 3;
 8001172:	2203      	movs	r2, #3
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x40>)
	           {
	               // Write your code here

	       	HAL_TIM_Base_Start_IT(&htim4);

	       	pin_selected = 5;
 8001176:	701a      	strb	r2, [r3, #0]

	   //   	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	           }

}
 8001178:	bd08      	pop	{r3, pc}
	      if ( GPIO_Pin == GPIO_PIN_14)
 800117a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800117e:	d105      	bne.n	800118c <HAL_GPIO_EXTI_Callback+0x28>
	      	HAL_TIM_Base_Start_IT(&htim4);
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001182:	f000 ff39 	bl	8001ff8 <HAL_TIM_Base_Start_IT>
	      	pin_selected = 4;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x40>)
 8001188:	2204      	movs	r2, #4
 800118a:	e7f4      	b.n	8001176 <HAL_GPIO_EXTI_Callback+0x12>
	      if ( GPIO_Pin == GPIO_PIN_15)
 800118c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8001190:	d1f2      	bne.n	8001178 <HAL_GPIO_EXTI_Callback+0x14>
	       	HAL_TIM_Base_Start_IT(&htim4);
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001194:	f000 ff30 	bl	8001ff8 <HAL_TIM_Base_Start_IT>
	       	pin_selected = 5;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_GPIO_EXTI_Callback+0x40>)
 800119a:	2205      	movs	r2, #5
 800119c:	e7eb      	b.n	8001176 <HAL_GPIO_EXTI_Callback+0x12>
 800119e:	bf00      	nop
 80011a0:	200000fc 	.word	0x200000fc
 80011a4:	20000097 	.word	0x20000097

080011a8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <_sbrk+0x30>)
{
 80011aa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80011ac:	6819      	ldr	r1, [r3, #0]
{
 80011ae:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80011b0:	b909      	cbnz	r1, 80011b6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80011b2:	490a      	ldr	r1, [pc, #40]	; (80011dc <_sbrk+0x34>)
 80011b4:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	4909      	ldr	r1, [pc, #36]	; (80011e0 <_sbrk+0x38>)
 80011ba:	4c0a      	ldr	r4, [pc, #40]	; (80011e4 <_sbrk+0x3c>)
 80011bc:	4402      	add	r2, r0
 80011be:	1b09      	subs	r1, r1, r4
 80011c0:	428a      	cmp	r2, r1
 80011c2:	d906      	bls.n	80011d2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80011c4:	f001 fa38 	bl	8002638 <__errno>
 80011c8:	230c      	movs	r3, #12
 80011ca:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80011d0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80011d2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80011d4:	e7fc      	b.n	80011d0 <_sbrk+0x28>
 80011d6:	bf00      	nop
 80011d8:	20000098 	.word	0x20000098
 80011dc:	20000548 	.word	0x20000548
 80011e0:	20005000 	.word	0x20005000
 80011e4:	00000400 	.word	0x00000400

080011e8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <SystemInit+0x40>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	f042 0201 	orr.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80011f2:	6859      	ldr	r1, [r3, #4]
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <SystemInit+0x44>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001200:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001204:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800120c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001214:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001216:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800121a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800121c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <SystemInit+0x48>)
 8001222:	609a      	str	r2, [r3, #8]
#endif 
}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	f8ff0000 	.word	0xf8ff0000
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001234:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001236:	e003      	b.n	8001240 <LoopCopyDataInit>

08001238 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800123a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800123c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800123e:	3104      	adds	r1, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001244:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001246:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001248:	d3f6      	bcc.n	8001238 <CopyDataInit>
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800124c:	e002      	b.n	8001254 <LoopFillZerobss>

0800124e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001250:	f842 3b04 	str.w	r3, [r2], #4

08001254 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001256:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001258:	d3f9      	bcc.n	800124e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800125a:	f7ff ffc5 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f001 f9f1 	bl	8002644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001262:	f7ff f80b 	bl	800027c <main>
  bx lr
 8001266:	4770      	bx	lr
  ldr r3, =_sidata
 8001268:	0800d130 	.word	0x0800d130
  ldr r0, =_sdata
 800126c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001270:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001274:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001278:	20000548 	.word	0x20000548

0800127c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_2_IRQHandler>
	...

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_InitTick+0x3c>)
{
 8001284:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001286:	7818      	ldrb	r0, [r3, #0]
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_InitTick+0x40>)
 8001292:	6810      	ldr	r0, [r2, #0]
 8001294:	fbb0 f0f3 	udiv	r0, r0, r3
 8001298:	f000 f8a0 	bl	80013dc <HAL_SYSTICK_Config>
 800129c:	4604      	mov	r4, r0
 800129e:	b958      	cbnz	r0, 80012b8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	2d0f      	cmp	r5, #15
 80012a2:	d809      	bhi.n	80012b8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	4602      	mov	r2, r0
 80012a6:	4629      	mov	r1, r5
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 f854 	bl	8001358 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4620      	mov	r0, r4
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_InitTick+0x44>)
 80012b4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
 80012ba:	e7fc      	b.n	80012b6 <HAL_InitTick+0x36>
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <HAL_Init+0x20>)
{
 80012ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ce:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d6:	f000 f82d 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	2000      	movs	r0, #0
 80012dc:	f7ff ffd0 	bl	8001280 <HAL_InitTick>
  HAL_MspInit();
 80012e0:	f7ff fcf0 	bl	8000cc4 <HAL_MspInit>
}
 80012e4:	2000      	movs	r0, #0
 80012e6:	bd08      	pop	{r3, pc}
 80012e8:	40022000 	.word	0x40022000

080012ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012ec:	4a03      	ldr	r2, [pc, #12]	; (80012fc <HAL_IncTick+0x10>)
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_IncTick+0x14>)
 80012f0:	6811      	ldr	r1, [r2, #0]
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	440b      	add	r3, r1
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000540 	.word	0x20000540
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001304:	4b01      	ldr	r3, [pc, #4]	; (800130c <HAL_GetTick+0x8>)
 8001306:	6818      	ldr	r0, [r3, #0]
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000540 	.word	0x20000540

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b538      	push	{r3, r4, r5, lr}
 8001312:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff fff6 	bl	8001304 <HAL_GetTick>
 8001318:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800131c:	bf1e      	ittt	ne
 800131e:	4b04      	ldrne	r3, [pc, #16]	; (8001330 <HAL_Delay+0x20>)
 8001320:	781b      	ldrbne	r3, [r3, #0]
 8001322:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001324:	f7ff ffee 	bl	8001304 <HAL_GetTick>
 8001328:	1b40      	subs	r0, r0, r5
 800132a:	42a0      	cmp	r0, r4
 800132c:	d3fa      	bcc.n	8001324 <HAL_Delay+0x14>
  {
  }
}
 800132e:	bd38      	pop	{r3, r4, r5, pc}
 8001330:	20000008 	.word	0x20000008

08001334 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001336:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800133a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001342:	041b      	lsls	r3, r3, #16
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800134e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001350:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b570      	push	{r4, r5, r6, lr}
 800135c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001362:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001366:	f1c4 0507 	rsb	r5, r4, #7
 800136a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	bf28      	it	cs
 8001372:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001374:	2b06      	cmp	r3, #6
 8001376:	bf98      	it	ls
 8001378:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	bf88      	it	hi
 8001380:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001382:	ea21 0303 	bic.w	r3, r1, r3
 8001386:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001388:	fa06 f404 	lsl.w	r4, r6, r4
 800138c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001390:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001392:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001396:	bfa8      	it	ge
 8001398:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800139c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	bfb8      	it	lt
 80013a2:	4a06      	ldrlt	r2, [pc, #24]	; (80013bc <HAL_NVIC_SetPriority+0x64>)
 80013a4:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	bfab      	itete	ge
 80013a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80013b6:	bd70      	pop	{r4, r5, r6, pc}
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	e000ed14 	.word	0xe000ed14

080013c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80013c0:	2800      	cmp	r0, #0
 80013c2:	db08      	blt.n	80013d6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c4:	2301      	movs	r3, #1
 80013c6:	0942      	lsrs	r2, r0, #5
 80013c8:	f000 001f 	and.w	r0, r0, #31
 80013cc:	fa03 f000 	lsl.w	r0, r3, r0
 80013d0:	4b01      	ldr	r3, [pc, #4]	; (80013d8 <HAL_NVIC_EnableIRQ+0x18>)
 80013d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100

080013dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	3801      	subs	r0, #1
 80013de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80013e2:	d20a      	bcs.n	80013fa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	4a06      	ldr	r2, [pc, #24]	; (8001404 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001408:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800140a:	b330      	cbz	r0, 800145a <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800140c:	2214      	movs	r2, #20
 800140e:	6801      	ldr	r1, [r0, #0]
 8001410:	4b13      	ldr	r3, [pc, #76]	; (8001460 <HAL_DMA_Init+0x58>)
 8001412:	440b      	add	r3, r1
 8001414:	fbb3 f3f2 	udiv	r3, r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800141e:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001420:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001422:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001426:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001428:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800142a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	4323      	orrs	r3, r4
 8001430:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001432:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001436:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	6944      	ldr	r4, [r0, #20]
 800143a:	4323      	orrs	r3, r4
 800143c:	6984      	ldr	r4, [r0, #24]
 800143e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001440:	69c4      	ldr	r4, [r0, #28]
 8001442:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001444:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001446:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001448:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 800144c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001450:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001452:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001456:	4618      	mov	r0, r3
}
 8001458:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e7fc      	b.n	8001458 <HAL_DMA_Init+0x50>
 800145e:	bf00      	nop
 8001460:	bffdfff8 	.word	0xbffdfff8
 8001464:	40020000 	.word	0x40020000

08001468 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001468:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800146a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800146c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800146e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001470:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001472:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001474:	4095      	lsls	r5, r2
 8001476:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001478:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800147a:	d032      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x7a>
 800147c:	074d      	lsls	r5, r1, #29
 800147e:	d530      	bpl.n	80014e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001484:	bf5e      	ittt	pl
 8001486:	681a      	ldrpl	r2, [r3, #0]
 8001488:	f022 0204 	bicpl.w	r2, r2, #4
 800148c:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800148e:	4a3e      	ldr	r2, [pc, #248]	; (8001588 <HAL_DMA_IRQHandler+0x120>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d019      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x60>
 8001494:	3214      	adds	r2, #20
 8001496:	4293      	cmp	r3, r2
 8001498:	d018      	beq.n	80014cc <HAL_DMA_IRQHandler+0x64>
 800149a:	3214      	adds	r2, #20
 800149c:	4293      	cmp	r3, r2
 800149e:	d017      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x68>
 80014a0:	3214      	adds	r2, #20
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d017      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x6e>
 80014a6:	3214      	adds	r2, #20
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d017      	beq.n	80014dc <HAL_DMA_IRQHandler+0x74>
 80014ac:	3214      	adds	r2, #20
 80014ae:	4293      	cmp	r3, r2
 80014b0:	bf0c      	ite	eq
 80014b2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80014b6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80014ba:	4a34      	ldr	r2, [pc, #208]	; (800158c <HAL_DMA_IRQHandler+0x124>)
 80014bc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d05e      	beq.n	8001582 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80014c4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80014c6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014c8:	2304      	movs	r3, #4
 80014ca:	e7f6      	b.n	80014ba <HAL_DMA_IRQHandler+0x52>
 80014cc:	2340      	movs	r3, #64	; 0x40
 80014ce:	e7f4      	b.n	80014ba <HAL_DMA_IRQHandler+0x52>
 80014d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d4:	e7f1      	b.n	80014ba <HAL_DMA_IRQHandler+0x52>
 80014d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014da:	e7ee      	b.n	80014ba <HAL_DMA_IRQHandler+0x52>
 80014dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014e0:	e7eb      	b.n	80014ba <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014e2:	2502      	movs	r5, #2
 80014e4:	4095      	lsls	r5, r2
 80014e6:	4225      	tst	r5, r4
 80014e8:	d035      	beq.n	8001556 <HAL_DMA_IRQHandler+0xee>
 80014ea:	078d      	lsls	r5, r1, #30
 80014ec:	d533      	bpl.n	8001556 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	0694      	lsls	r4, r2, #26
 80014f2:	d406      	bmi.n	8001502 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	f022 020a 	bic.w	r2, r2, #10
 80014fa:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80014fc:	2201      	movs	r2, #1
 80014fe:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001502:	4a21      	ldr	r2, [pc, #132]	; (8001588 <HAL_DMA_IRQHandler+0x120>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d019      	beq.n	800153c <HAL_DMA_IRQHandler+0xd4>
 8001508:	3214      	adds	r2, #20
 800150a:	4293      	cmp	r3, r2
 800150c:	d018      	beq.n	8001540 <HAL_DMA_IRQHandler+0xd8>
 800150e:	3214      	adds	r2, #20
 8001510:	4293      	cmp	r3, r2
 8001512:	d017      	beq.n	8001544 <HAL_DMA_IRQHandler+0xdc>
 8001514:	3214      	adds	r2, #20
 8001516:	4293      	cmp	r3, r2
 8001518:	d017      	beq.n	800154a <HAL_DMA_IRQHandler+0xe2>
 800151a:	3214      	adds	r2, #20
 800151c:	4293      	cmp	r3, r2
 800151e:	d017      	beq.n	8001550 <HAL_DMA_IRQHandler+0xe8>
 8001520:	3214      	adds	r2, #20
 8001522:	4293      	cmp	r3, r2
 8001524:	bf0c      	ite	eq
 8001526:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800152a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800152e:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_DMA_IRQHandler+0x124>)
 8001530:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001532:	2300      	movs	r3, #0
 8001534:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001538:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800153a:	e7c1      	b.n	80014c0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800153c:	2302      	movs	r3, #2
 800153e:	e7f6      	b.n	800152e <HAL_DMA_IRQHandler+0xc6>
 8001540:	2320      	movs	r3, #32
 8001542:	e7f4      	b.n	800152e <HAL_DMA_IRQHandler+0xc6>
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	e7f1      	b.n	800152e <HAL_DMA_IRQHandler+0xc6>
 800154a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154e:	e7ee      	b.n	800152e <HAL_DMA_IRQHandler+0xc6>
 8001550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001554:	e7eb      	b.n	800152e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001556:	2508      	movs	r5, #8
 8001558:	4095      	lsls	r5, r2
 800155a:	4225      	tst	r5, r4
 800155c:	d011      	beq.n	8001582 <HAL_DMA_IRQHandler+0x11a>
 800155e:	0709      	lsls	r1, r1, #28
 8001560:	d50f      	bpl.n	8001582 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001562:	6819      	ldr	r1, [r3, #0]
 8001564:	f021 010e 	bic.w	r1, r1, #14
 8001568:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800156a:	2301      	movs	r3, #1
 800156c:	fa03 f202 	lsl.w	r2, r3, r2
 8001570:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001572:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001574:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001578:	2300      	movs	r3, #0
 800157a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800157e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001580:	e79e      	b.n	80014c0 <HAL_DMA_IRQHandler+0x58>
}
 8001582:	bc70      	pop	{r4, r5, r6}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40020008 	.word	0x40020008
 800158c:	40020000 	.word	0x40020000

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001594:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001596:	4626      	mov	r6, r4
 8001598:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001740 <HAL_GPIO_Init+0x1b0>
 800159e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001744 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a2:	680a      	ldr	r2, [r1, #0]
 80015a4:	fa32 f506 	lsrs.w	r5, r2, r6
 80015a8:	d102      	bne.n	80015b0 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80015aa:	b003      	add	sp, #12
 80015ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80015b0:	f04f 0801 	mov.w	r8, #1
 80015b4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b8:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 80015bc:	4590      	cmp	r8, r2
 80015be:	d17e      	bne.n	80016be <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 80015c0:	684d      	ldr	r5, [r1, #4]
 80015c2:	2d12      	cmp	r5, #18
 80015c4:	f000 80a9 	beq.w	800171a <HAL_GPIO_Init+0x18a>
 80015c8:	f200 8082 	bhi.w	80016d0 <HAL_GPIO_Init+0x140>
 80015cc:	2d02      	cmp	r5, #2
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_GPIO_Init+0x184>
 80015d2:	d876      	bhi.n	80016c2 <HAL_GPIO_Init+0x132>
 80015d4:	2d00      	cmp	r5, #0
 80015d6:	f000 8088 	beq.w	80016ea <HAL_GPIO_Init+0x15a>
 80015da:	2d01      	cmp	r5, #1
 80015dc:	f000 8098 	beq.w	8001710 <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015e0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015e4:	2aff      	cmp	r2, #255	; 0xff
 80015e6:	bf93      	iteet	ls
 80015e8:	4682      	movls	sl, r0
 80015ea:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80015ee:	3d08      	subhi	r5, #8
 80015f0:	f8d0 b000 	ldrls.w	fp, [r0]
 80015f4:	bf92      	itee	ls
 80015f6:	00b5      	lslls	r5, r6, #2
 80015f8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80015fc:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fe:	fa09 f805 	lsl.w	r8, r9, r5
 8001602:	ea2b 0808 	bic.w	r8, fp, r8
 8001606:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800160a:	bf88      	it	hi
 800160c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001610:	ea48 0505 	orr.w	r5, r8, r5
 8001614:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001618:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800161c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001620:	d04d      	beq.n	80016be <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001622:	4f44      	ldr	r7, [pc, #272]	; (8001734 <HAL_GPIO_Init+0x1a4>)
 8001624:	f026 0803 	bic.w	r8, r6, #3
 8001628:	69bd      	ldr	r5, [r7, #24]
 800162a:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800162e:	f045 0501 	orr.w	r5, r5, #1
 8001632:	61bd      	str	r5, [r7, #24]
 8001634:	69bd      	ldr	r5, [r7, #24]
 8001636:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800163a:	f005 0501 	and.w	r5, r5, #1
 800163e:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001640:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001644:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001646:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800164a:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800164e:	fa09 f90b 	lsl.w	r9, r9, fp
 8001652:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001656:	4d38      	ldr	r5, [pc, #224]	; (8001738 <HAL_GPIO_Init+0x1a8>)
 8001658:	42a8      	cmp	r0, r5
 800165a:	d063      	beq.n	8001724 <HAL_GPIO_Init+0x194>
 800165c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001660:	42a8      	cmp	r0, r5
 8001662:	d061      	beq.n	8001728 <HAL_GPIO_Init+0x198>
 8001664:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001668:	42a8      	cmp	r0, r5
 800166a:	d05f      	beq.n	800172c <HAL_GPIO_Init+0x19c>
 800166c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001670:	42a8      	cmp	r0, r5
 8001672:	bf0c      	ite	eq
 8001674:	2503      	moveq	r5, #3
 8001676:	2504      	movne	r5, #4
 8001678:	fa05 f50b 	lsl.w	r5, r5, fp
 800167c:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001680:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001684:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001686:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800168a:	bf14      	ite	ne
 800168c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168e:	4395      	biceq	r5, r2
 8001690:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001692:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001694:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001698:	bf14      	ite	ne
 800169a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169c:	4395      	biceq	r5, r2
 800169e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a0:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a2:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a6:	bf14      	ite	ne
 80016a8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016aa:	4395      	biceq	r5, r2
 80016ac:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ae:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80016b4:	bf14      	ite	ne
 80016b6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016b8:	ea25 0202 	biceq.w	r2, r5, r2
 80016bc:	60da      	str	r2, [r3, #12]
	position++;
 80016be:	3601      	adds	r6, #1
 80016c0:	e76f      	b.n	80015a2 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80016c2:	2d03      	cmp	r5, #3
 80016c4:	d022      	beq.n	800170c <HAL_GPIO_Init+0x17c>
 80016c6:	2d11      	cmp	r5, #17
 80016c8:	d18a      	bne.n	80015e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016ca:	68cc      	ldr	r4, [r1, #12]
 80016cc:	3404      	adds	r4, #4
          break;
 80016ce:	e787      	b.n	80015e0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80016d0:	4f1a      	ldr	r7, [pc, #104]	; (800173c <HAL_GPIO_Init+0x1ac>)
 80016d2:	42bd      	cmp	r5, r7
 80016d4:	d009      	beq.n	80016ea <HAL_GPIO_Init+0x15a>
 80016d6:	d812      	bhi.n	80016fe <HAL_GPIO_Init+0x16e>
 80016d8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001748 <HAL_GPIO_Init+0x1b8>
 80016dc:	454d      	cmp	r5, r9
 80016de:	d004      	beq.n	80016ea <HAL_GPIO_Init+0x15a>
 80016e0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80016e4:	454d      	cmp	r5, r9
 80016e6:	f47f af7b 	bne.w	80015e0 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016ea:	688c      	ldr	r4, [r1, #8]
 80016ec:	b1c4      	cbz	r4, 8001720 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016ee:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80016f0:	bf0c      	ite	eq
 80016f2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80016f6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016fa:	2408      	movs	r4, #8
 80016fc:	e770      	b.n	80015e0 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80016fe:	4565      	cmp	r5, ip
 8001700:	d0f3      	beq.n	80016ea <HAL_GPIO_Init+0x15a>
 8001702:	4575      	cmp	r5, lr
 8001704:	d0f1      	beq.n	80016ea <HAL_GPIO_Init+0x15a>
 8001706:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800174c <HAL_GPIO_Init+0x1bc>
 800170a:	e7eb      	b.n	80016e4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800170c:	2400      	movs	r4, #0
 800170e:	e767      	b.n	80015e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001710:	68cc      	ldr	r4, [r1, #12]
          break;
 8001712:	e765      	b.n	80015e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001714:	68cc      	ldr	r4, [r1, #12]
 8001716:	3408      	adds	r4, #8
          break;
 8001718:	e762      	b.n	80015e0 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171a:	68cc      	ldr	r4, [r1, #12]
 800171c:	340c      	adds	r4, #12
          break;
 800171e:	e75f      	b.n	80015e0 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001720:	2404      	movs	r4, #4
 8001722:	e75d      	b.n	80015e0 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001724:	2500      	movs	r5, #0
 8001726:	e7a7      	b.n	8001678 <HAL_GPIO_Init+0xe8>
 8001728:	2501      	movs	r5, #1
 800172a:	e7a5      	b.n	8001678 <HAL_GPIO_Init+0xe8>
 800172c:	2502      	movs	r5, #2
 800172e:	e7a3      	b.n	8001678 <HAL_GPIO_Init+0xe8>
 8001730:	40010400 	.word	0x40010400
 8001734:	40021000 	.word	0x40021000
 8001738:	40010800 	.word	0x40010800
 800173c:	10210000 	.word	0x10210000
 8001740:	10310000 	.word	0x10310000
 8001744:	10320000 	.word	0x10320000
 8001748:	10110000 	.word	0x10110000
 800174c:	10220000 	.word	0x10220000

08001750 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001750:	6883      	ldr	r3, [r0, #8]
 8001752:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001754:	bf14      	ite	ne
 8001756:	2001      	movne	r0, #1
 8001758:	2000      	moveq	r0, #0
 800175a:	4770      	bx	lr

0800175c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800175c:	b10a      	cbz	r2, 8001762 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175e:	6101      	str	r1, [r0, #16]
  }
}
 8001760:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001762:	0409      	lsls	r1, r1, #16
 8001764:	e7fb      	b.n	800175e <HAL_GPIO_WritePin+0x2>

08001766 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001766:	68c3      	ldr	r3, [r0, #12]
 8001768:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800176a:	bf14      	ite	ne
 800176c:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800176e:	6101      	streq	r1, [r0, #16]
  }
}
 8001770:	4770      	bx	lr
	...

08001774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001774:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001778:	6959      	ldr	r1, [r3, #20]
 800177a:	4201      	tst	r1, r0
 800177c:	d002      	beq.n	8001784 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800177e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001780:	f7ff fcf0 	bl	8001164 <HAL_GPIO_EXTI_Callback>
  }
}
 8001784:	bd08      	pop	{r3, pc}
 8001786:	bf00      	nop
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001790:	4605      	mov	r5, r0
 8001792:	b908      	cbnz	r0, 8001798 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001794:	2001      	movs	r0, #1
 8001796:	e03c      	b.n	8001812 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001798:	6803      	ldr	r3, [r0, #0]
 800179a:	07db      	lsls	r3, r3, #31
 800179c:	d410      	bmi.n	80017c0 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	682b      	ldr	r3, [r5, #0]
 80017a0:	079f      	lsls	r7, r3, #30
 80017a2:	d45d      	bmi.n	8001860 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	0719      	lsls	r1, r3, #28
 80017a8:	f100 8094 	bmi.w	80018d4 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	075a      	lsls	r2, r3, #29
 80017b0:	f100 80be 	bmi.w	8001930 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b4:	69e8      	ldr	r0, [r5, #28]
 80017b6:	2800      	cmp	r0, #0
 80017b8:	f040 812c 	bne.w	8001a14 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80017bc:	2000      	movs	r0, #0
 80017be:	e028      	b.n	8001812 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4c8f      	ldr	r4, [pc, #572]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80017c2:	6863      	ldr	r3, [r4, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d007      	beq.n	80017dc <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017cc:	6863      	ldr	r3, [r4, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_OscConfig+0x5e>
 80017d6:	6863      	ldr	r3, [r4, #4]
 80017d8:	03de      	lsls	r6, r3, #15
 80017da:	d506      	bpl.n	80017ea <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	039c      	lsls	r4, r3, #14
 80017e0:	d5dd      	bpl.n	800179e <HAL_RCC_OscConfig+0x12>
 80017e2:	686b      	ldr	r3, [r5, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1da      	bne.n	800179e <HAL_RCC_OscConfig+0x12>
 80017e8:	e7d4      	b.n	8001794 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	686b      	ldr	r3, [r5, #4]
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f0:	d112      	bne.n	8001818 <HAL_RCC_OscConfig+0x8c>
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017fa:	f7ff fd83 	bl	8001304 <HAL_GetTick>
 80017fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	0398      	lsls	r0, r3, #14
 8001804:	d4cb      	bmi.n	800179e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001806:	f7ff fd7d 	bl	8001304 <HAL_GetTick>
 800180a:	1b80      	subs	r0, r0, r6
 800180c:	2864      	cmp	r0, #100	; 0x64
 800180e:	d9f7      	bls.n	8001800 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001810:	2003      	movs	r0, #3
}
 8001812:	b002      	add	sp, #8
 8001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	b99b      	cbnz	r3, 8001842 <HAL_RCC_OscConfig+0xb6>
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001820:	6023      	str	r3, [r4, #0]
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001828:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800182a:	f7ff fd6b 	bl	8001304 <HAL_GetTick>
 800182e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	0399      	lsls	r1, r3, #14
 8001834:	d5b3      	bpl.n	800179e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001836:	f7ff fd65 	bl	8001304 <HAL_GetTick>
 800183a:	1b80      	subs	r0, r0, r6
 800183c:	2864      	cmp	r0, #100	; 0x64
 800183e:	d9f7      	bls.n	8001830 <HAL_RCC_OscConfig+0xa4>
 8001840:	e7e6      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	d103      	bne.n	8001852 <HAL_RCC_OscConfig+0xc6>
 800184a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184e:	6023      	str	r3, [r4, #0]
 8001850:	e7cf      	b.n	80017f2 <HAL_RCC_OscConfig+0x66>
 8001852:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001856:	6023      	str	r3, [r4, #0]
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185e:	e7cb      	b.n	80017f8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001860:	4c67      	ldr	r4, [pc, #412]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	f013 0f0c 	tst.w	r3, #12
 8001868:	d007      	beq.n	800187a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800186a:	6863      	ldr	r3, [r4, #4]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d110      	bne.n	8001896 <HAL_RCC_OscConfig+0x10a>
 8001874:	6863      	ldr	r3, [r4, #4]
 8001876:	03da      	lsls	r2, r3, #15
 8001878:	d40d      	bmi.n	8001896 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	079b      	lsls	r3, r3, #30
 800187e:	d502      	bpl.n	8001886 <HAL_RCC_OscConfig+0xfa>
 8001880:	692b      	ldr	r3, [r5, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d186      	bne.n	8001794 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	696a      	ldr	r2, [r5, #20]
 800188a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800188e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001892:	6023      	str	r3, [r4, #0]
 8001894:	e786      	b.n	80017a4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	692a      	ldr	r2, [r5, #16]
 8001898:	4b5a      	ldr	r3, [pc, #360]	; (8001a04 <HAL_RCC_OscConfig+0x278>)
 800189a:	b16a      	cbz	r2, 80018b8 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018a0:	f7ff fd30 	bl	8001304 <HAL_GetTick>
 80018a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	079f      	lsls	r7, r3, #30
 80018aa:	d4ec      	bmi.n	8001886 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fd2a 	bl	8001304 <HAL_GetTick>
 80018b0:	1b80      	subs	r0, r0, r6
 80018b2:	2802      	cmp	r0, #2
 80018b4:	d9f7      	bls.n	80018a6 <HAL_RCC_OscConfig+0x11a>
 80018b6:	e7ab      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80018b8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018ba:	f7ff fd23 	bl	8001304 <HAL_GetTick>
 80018be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	0798      	lsls	r0, r3, #30
 80018c4:	f57f af6e 	bpl.w	80017a4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c8:	f7ff fd1c 	bl	8001304 <HAL_GetTick>
 80018cc:	1b80      	subs	r0, r0, r6
 80018ce:	2802      	cmp	r0, #2
 80018d0:	d9f6      	bls.n	80018c0 <HAL_RCC_OscConfig+0x134>
 80018d2:	e79d      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d4:	69aa      	ldr	r2, [r5, #24]
 80018d6:	4c4a      	ldr	r4, [pc, #296]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_RCC_OscConfig+0x27c>)
 80018da:	b1da      	cbz	r2, 8001914 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80018e0:	f7ff fd10 	bl	8001304 <HAL_GetTick>
 80018e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018e8:	079b      	lsls	r3, r3, #30
 80018ea:	d50d      	bpl.n	8001908 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018ec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80018f0:	4b46      	ldr	r3, [pc, #280]	; (8001a0c <HAL_RCC_OscConfig+0x280>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80018f8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80018fa:	bf00      	nop
  }
  while (Delay --);
 80018fc:	9b01      	ldr	r3, [sp, #4]
 80018fe:	1e5a      	subs	r2, r3, #1
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <HAL_RCC_OscConfig+0x16e>
 8001906:	e751      	b.n	80017ac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fcfc 	bl	8001304 <HAL_GetTick>
 800190c:	1b80      	subs	r0, r0, r6
 800190e:	2802      	cmp	r0, #2
 8001910:	d9e9      	bls.n	80018e6 <HAL_RCC_OscConfig+0x15a>
 8001912:	e77d      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001914:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001916:	f7ff fcf5 	bl	8001304 <HAL_GetTick>
 800191a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800191e:	079f      	lsls	r7, r3, #30
 8001920:	f57f af44 	bpl.w	80017ac <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fcee 	bl	8001304 <HAL_GetTick>
 8001928:	1b80      	subs	r0, r0, r6
 800192a:	2802      	cmp	r0, #2
 800192c:	d9f6      	bls.n	800191c <HAL_RCC_OscConfig+0x190>
 800192e:	e76f      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001930:	4c33      	ldr	r4, [pc, #204]	; (8001a00 <HAL_RCC_OscConfig+0x274>)
 8001932:	69e3      	ldr	r3, [r4, #28]
 8001934:	00d8      	lsls	r0, r3, #3
 8001936:	d424      	bmi.n	8001982 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001938:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	69e3      	ldr	r3, [r4, #28]
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61e3      	str	r3, [r4, #28]
 8001942:	69e3      	ldr	r3, [r4, #28]
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4e30      	ldr	r6, [pc, #192]	; (8001a10 <HAL_RCC_OscConfig+0x284>)
 800194e:	6833      	ldr	r3, [r6, #0]
 8001950:	05d9      	lsls	r1, r3, #23
 8001952:	d518      	bpl.n	8001986 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	68eb      	ldr	r3, [r5, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d126      	bne.n	80019a8 <HAL_RCC_OscConfig+0x21c>
 800195a:	6a23      	ldr	r3, [r4, #32]
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001962:	f7ff fccf 	bl	8001304 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800196a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	6a23      	ldr	r3, [r4, #32]
 800196e:	079b      	lsls	r3, r3, #30
 8001970:	d53f      	bpl.n	80019f2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001972:	2f00      	cmp	r7, #0
 8001974:	f43f af1e 	beq.w	80017b4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	69e3      	ldr	r3, [r4, #28]
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197e:	61e3      	str	r3, [r4, #28]
 8001980:	e718      	b.n	80017b4 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001982:	2700      	movs	r7, #0
 8001984:	e7e2      	b.n	800194c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001986:	6833      	ldr	r3, [r6, #0]
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800198e:	f7ff fcb9 	bl	8001304 <HAL_GetTick>
 8001992:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	6833      	ldr	r3, [r6, #0]
 8001996:	05da      	lsls	r2, r3, #23
 8001998:	d4dc      	bmi.n	8001954 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199a:	f7ff fcb3 	bl	8001304 <HAL_GetTick>
 800199e:	eba0 0008 	sub.w	r0, r0, r8
 80019a2:	2864      	cmp	r0, #100	; 0x64
 80019a4:	d9f6      	bls.n	8001994 <HAL_RCC_OscConfig+0x208>
 80019a6:	e733      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	b9ab      	cbnz	r3, 80019d6 <HAL_RCC_OscConfig+0x24a>
 80019aa:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6223      	str	r3, [r4, #32]
 80019b6:	6a23      	ldr	r3, [r4, #32]
 80019b8:	f023 0304 	bic.w	r3, r3, #4
 80019bc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019be:	f7ff fca1 	bl	8001304 <HAL_GetTick>
 80019c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	6a23      	ldr	r3, [r4, #32]
 80019c6:	0798      	lsls	r0, r3, #30
 80019c8:	d5d3      	bpl.n	8001972 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff fc9b 	bl	8001304 <HAL_GetTick>
 80019ce:	1b80      	subs	r0, r0, r6
 80019d0:	4540      	cmp	r0, r8
 80019d2:	d9f7      	bls.n	80019c4 <HAL_RCC_OscConfig+0x238>
 80019d4:	e71c      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d6:	2b05      	cmp	r3, #5
 80019d8:	6a23      	ldr	r3, [r4, #32]
 80019da:	d103      	bne.n	80019e4 <HAL_RCC_OscConfig+0x258>
 80019dc:	f043 0304 	orr.w	r3, r3, #4
 80019e0:	6223      	str	r3, [r4, #32]
 80019e2:	e7ba      	b.n	800195a <HAL_RCC_OscConfig+0x1ce>
 80019e4:	f023 0301 	bic.w	r3, r3, #1
 80019e8:	6223      	str	r3, [r4, #32]
 80019ea:	6a23      	ldr	r3, [r4, #32]
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	e7b6      	b.n	8001960 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fc87 	bl	8001304 <HAL_GetTick>
 80019f6:	eba0 0008 	sub.w	r0, r0, r8
 80019fa:	42b0      	cmp	r0, r6
 80019fc:	d9b6      	bls.n	800196c <HAL_RCC_OscConfig+0x1e0>
 80019fe:	e707      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
 8001a00:	40021000 	.word	0x40021000
 8001a04:	42420000 	.word	0x42420000
 8001a08:	42420480 	.word	0x42420480
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x334>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	461c      	mov	r4, r3
 8001a1a:	f002 020c 	and.w	r2, r2, #12
 8001a1e:	2a08      	cmp	r2, #8
 8001a20:	d03d      	beq.n	8001a9e <HAL_RCC_OscConfig+0x312>
 8001a22:	2300      	movs	r3, #0
 8001a24:	4e27      	ldr	r6, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a26:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a28:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2a:	d12b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fc6a 	bl	8001304 <HAL_GetTick>
 8001a30:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	0199      	lsls	r1, r3, #6
 8001a36:	d41f      	bmi.n	8001a78 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a38:	6a2b      	ldr	r3, [r5, #32]
 8001a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3e:	d105      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a40:	6862      	ldr	r2, [r4, #4]
 8001a42:	68a9      	ldr	r1, [r5, #8]
 8001a44:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001a4e:	6862      	ldr	r2, [r4, #4]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001a56:	4313      	orrs	r3, r2
 8001a58:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fc51 	bl	8001304 <HAL_GetTick>
 8001a62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	019a      	lsls	r2, r3, #6
 8001a68:	f53f aea8 	bmi.w	80017bc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff fc4a 	bl	8001304 <HAL_GetTick>
 8001a70:	1b40      	subs	r0, r0, r5
 8001a72:	2802      	cmp	r0, #2
 8001a74:	d9f6      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2d8>
 8001a76:	e6cb      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7ff fc44 	bl	8001304 <HAL_GetTick>
 8001a7c:	1bc0      	subs	r0, r0, r7
 8001a7e:	2802      	cmp	r0, #2
 8001a80:	d9d7      	bls.n	8001a32 <HAL_RCC_OscConfig+0x2a6>
 8001a82:	e6c5      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc3e 	bl	8001304 <HAL_GetTick>
 8001a88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	6823      	ldr	r3, [r4, #0]
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	f57f ae95 	bpl.w	80017bc <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff fc37 	bl	8001304 <HAL_GetTick>
 8001a96:	1b40      	subs	r0, r0, r5
 8001a98:	2802      	cmp	r0, #2
 8001a9a:	d9f6      	bls.n	8001a8a <HAL_RCC_OscConfig+0x2fe>
 8001a9c:	e6b8      	b.n	8001810 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9e:	2801      	cmp	r0, #1
 8001aa0:	f43f aeb7 	beq.w	8001812 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001aa4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	6a2b      	ldr	r3, [r5, #32]
 8001aa8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f47f ae71 	bne.w	8001794 <HAL_RCC_OscConfig+0x8>
 8001ab2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab4:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001ab8:	1ac0      	subs	r0, r0, r3
 8001aba:	bf18      	it	ne
 8001abc:	2001      	movne	r0, #1
 8001abe:	e6a8      	b.n	8001812 <HAL_RCC_OscConfig+0x86>
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	42420060 	.word	0x42420060

08001ac8 <HAL_RCC_GetSysClockFreq>:
{
 8001ac8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001acc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ace:	ac02      	add	r4, sp, #8
 8001ad0:	f103 0510 	add.w	r5, r3, #16
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	6859      	ldr	r1, [r3, #4]
 8001ada:	3308      	adds	r3, #8
 8001adc:	c203      	stmia	r2!, {r0, r1}
 8001ade:	42ab      	cmp	r3, r5
 8001ae0:	4614      	mov	r4, r2
 8001ae2:	d1f7      	bne.n	8001ad4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001ae8:	4911      	ldr	r1, [pc, #68]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aea:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001aee:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001af0:	f003 020c 	and.w	r2, r3, #12
 8001af4:	2a08      	cmp	r2, #8
 8001af6:	d117      	bne.n	8001b28 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001af8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001afc:	a806      	add	r0, sp, #24
 8001afe:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b00:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b02:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b06:	d50c      	bpl.n	8001b22 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b08:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0a:	480a      	ldr	r0, [pc, #40]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b0c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b10:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b12:	aa06      	add	r2, sp, #24
 8001b14:	4413      	add	r3, r2
 8001b16:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b1a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b1e:	b007      	add	sp, #28
 8001b20:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b22:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x70>)
 8001b24:	4350      	muls	r0, r2
 8001b26:	e7fa      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8001b2a:	e7f8      	b.n	8001b1e <HAL_RCC_GetSysClockFreq+0x56>
 8001b2c:	080028c8 	.word	0x080028c8
 8001b30:	40021000 	.word	0x40021000
 8001b34:	007a1200 	.word	0x007a1200
 8001b38:	003d0900 	.word	0x003d0900

08001b3c <HAL_RCC_ClockConfig>:
{
 8001b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b40:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b42:	4604      	mov	r4, r0
 8001b44:	b910      	cbnz	r0, 8001b4c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b46:	2001      	movs	r0, #1
}
 8001b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b4c:	4a44      	ldr	r2, [pc, #272]	; (8001c60 <HAL_RCC_ClockConfig+0x124>)
 8001b4e:	6813      	ldr	r3, [r2, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	428b      	cmp	r3, r1
 8001b56:	d328      	bcc.n	8001baa <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	6821      	ldr	r1, [r4, #0]
 8001b5a:	078e      	lsls	r6, r1, #30
 8001b5c:	d430      	bmi.n	8001bc0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5e:	07ca      	lsls	r2, r1, #31
 8001b60:	d443      	bmi.n	8001bea <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b62:	4a3f      	ldr	r2, [pc, #252]	; (8001c60 <HAL_RCC_ClockConfig+0x124>)
 8001b64:	6813      	ldr	r3, [r2, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	42ab      	cmp	r3, r5
 8001b6c:	d865      	bhi.n	8001c3a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	4d3c      	ldr	r5, [pc, #240]	; (8001c64 <HAL_RCC_ClockConfig+0x128>)
 8001b72:	f012 0f04 	tst.w	r2, #4
 8001b76:	d16c      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	0713      	lsls	r3, r2, #28
 8001b7a:	d506      	bpl.n	8001b8a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7c:	686b      	ldr	r3, [r5, #4]
 8001b7e:	6922      	ldr	r2, [r4, #16]
 8001b80:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b88:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8a:	f7ff ff9d 	bl	8001ac8 <HAL_RCC_GetSysClockFreq>
 8001b8e:	686b      	ldr	r3, [r5, #4]
 8001b90:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <HAL_RCC_ClockConfig+0x12c>)
 8001b92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b96:	5cd3      	ldrb	r3, [r2, r3]
 8001b98:	40d8      	lsrs	r0, r3
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_RCC_ClockConfig+0x130>)
 8001b9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_ClockConfig+0x134>)
 8001ba0:	6818      	ldr	r0, [r3, #0]
 8001ba2:	f7ff fb6d 	bl	8001280 <HAL_InitTick>
  return HAL_OK;
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	e7ce      	b.n	8001b48 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f023 0307 	bic.w	r3, r3, #7
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb4:	6813      	ldr	r3, [r2, #0]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	428b      	cmp	r3, r1
 8001bbc:	d1c3      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xa>
 8001bbe:	e7cb      	b.n	8001b58 <HAL_RCC_ClockConfig+0x1c>
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc6:	bf1e      	ittt	ne
 8001bc8:	685a      	ldrne	r2, [r3, #4]
 8001bca:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001bce:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd2:	bf42      	ittt	mi
 8001bd4:	685a      	ldrmi	r2, [r3, #4]
 8001bd6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001bda:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	68a0      	ldr	r0, [r4, #8]
 8001be0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001be4:	4302      	orrs	r2, r0
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	e7b9      	b.n	8001b5e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	6862      	ldr	r2, [r4, #4]
 8001bec:	4e1d      	ldr	r6, [pc, #116]	; (8001c64 <HAL_RCC_ClockConfig+0x128>)
 8001bee:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf2:	d11a      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	d0a5      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c00:	f023 0303 	bic.w	r3, r3, #3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c08:	f7ff fb7c 	bl	8001304 <HAL_GetTick>
 8001c0c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	6873      	ldr	r3, [r6, #4]
 8001c10:	6862      	ldr	r2, [r4, #4]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c1a:	d0a2      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff fb72 	bl	8001304 <HAL_GetTick>
 8001c20:	1bc0      	subs	r0, r0, r7
 8001c22:	4540      	cmp	r0, r8
 8001c24:	d9f3      	bls.n	8001c0e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001c26:	2003      	movs	r0, #3
 8001c28:	e78e      	b.n	8001b48 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	2a02      	cmp	r2, #2
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c32:	e7e1      	b.n	8001bf8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	f013 0f02 	tst.w	r3, #2
 8001c38:	e7de      	b.n	8001bf8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	f023 0307 	bic.w	r3, r3, #7
 8001c40:	432b      	orrs	r3, r5
 8001c42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c44:	6813      	ldr	r3, [r2, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	42ab      	cmp	r3, r5
 8001c4c:	f47f af7b 	bne.w	8001b46 <HAL_RCC_ClockConfig+0xa>
 8001c50:	e78d      	b.n	8001b6e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c52:	686b      	ldr	r3, [r5, #4]
 8001c54:	68e1      	ldr	r1, [r4, #12]
 8001c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	606b      	str	r3, [r5, #4]
 8001c5e:	e78b      	b.n	8001b78 <HAL_RCC_ClockConfig+0x3c>
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	0800d10d 	.word	0x0800d10d
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	2000000c 	.word	0x2000000c

08001c74 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c82:	6810      	ldr	r0, [r2, #0]
}
 8001c84:	40d8      	lsrs	r0, r3
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	0800d11d 	.word	0x0800d11d
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ca2:	6810      	ldr	r0, [r2, #0]
}
 8001ca4:	40d8      	lsrs	r0, r3
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	0800d11d 	.word	0x0800d11d
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	460e      	mov	r6, r1
 8001cba:	4615      	mov	r5, r2
 8001cbc:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cbe:	6821      	ldr	r1, [r4, #0]
 8001cc0:	688a      	ldr	r2, [r1, #8]
 8001cc2:	ea36 0302 	bics.w	r3, r6, r2
 8001cc6:	d001      	beq.n	8001ccc <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001cc8:	2000      	movs	r0, #0
 8001cca:	e02d      	b.n	8001d28 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8001ccc:	1c6b      	adds	r3, r5, #1
 8001cce:	d0f7      	beq.n	8001cc0 <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001cd0:	f7ff fb18 	bl	8001304 <HAL_GetTick>
 8001cd4:	1bc0      	subs	r0, r0, r7
 8001cd6:	4285      	cmp	r5, r0
 8001cd8:	d8f1      	bhi.n	8001cbe <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ce2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ce4:	6862      	ldr	r2, [r4, #4]
 8001ce6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001cea:	d10a      	bne.n	8001d02 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8001cec:	68a2      	ldr	r2, [r4, #8]
 8001cee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cf2:	d002      	beq.n	8001cfa <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cf4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001cf8:	d103      	bne.n	8001d02 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d00:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d04:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001d08:	d107      	bne.n	8001d1a <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d18:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001d20:	2300      	movs	r3, #0
 8001d22:	2003      	movs	r0, #3
 8001d24:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001d2a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2a:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	460a      	mov	r2, r1
 8001d30:	2180      	movs	r1, #128	; 0x80
{
 8001d32:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d34:	f7ff ffbe 	bl	8001cb4 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001d38:	b120      	cbz	r0, 8001d44 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001d3a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d3e:	f043 0320 	orr.w	r3, r3, #32
 8001d42:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001d44:	bd10      	pop	{r4, pc}

08001d46 <HAL_SPI_Init>:
{
 8001d46:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001d48:	4604      	mov	r4, r0
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d034      	beq.n	8001db8 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d52:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d5a:	b91b      	cbnz	r3, 8001d64 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001d5c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001d60:	f7fe ffd2 	bl	8000d08 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d64:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001d66:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d68:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001d6c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d6e:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d74:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d76:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001d7a:	4303      	orrs	r3, r0
 8001d7c:	68e0      	ldr	r0, [r4, #12]
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	6920      	ldr	r0, [r4, #16]
 8001d82:	4303      	orrs	r3, r0
 8001d84:	6960      	ldr	r0, [r4, #20]
 8001d86:	4303      	orrs	r3, r0
 8001d88:	69e0      	ldr	r0, [r4, #28]
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	6a20      	ldr	r0, [r4, #32]
 8001d8e:	4303      	orrs	r3, r0
 8001d90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d92:	4303      	orrs	r3, r0
 8001d94:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d98:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d9a:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d9c:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001da0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001da2:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001da4:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001da6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dac:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001dae:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001db2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001db6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001db8:	2001      	movs	r0, #1
 8001dba:	e7fc      	b.n	8001db6 <HAL_SPI_Init+0x70>

08001dbc <HAL_SPI_Transmit>:
{
 8001dbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dc0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001dc2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001dc6:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001dc8:	2b01      	cmp	r3, #1
{
 8001dca:	460d      	mov	r5, r1
 8001dcc:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001dce:	f000 809c 	beq.w	8001f0a <HAL_SPI_Transmit+0x14e>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001dd8:	f7ff fa94 	bl	8001304 <HAL_GetTick>
 8001ddc:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001dde:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001de2:	b2c0      	uxtb	r0, r0
 8001de4:	2801      	cmp	r0, #1
 8001de6:	f040 808e 	bne.w	8001f06 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001dea:	2d00      	cmp	r5, #0
 8001dec:	d05e      	beq.n	8001eac <HAL_SPI_Transmit+0xf0>
 8001dee:	f1b8 0f00 	cmp.w	r8, #0
 8001df2:	d05b      	beq.n	8001eac <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001df4:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001df6:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001df8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dfc:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dfe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e00:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001e02:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001e06:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e08:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001e0a:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8001e0e:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001e14:	bf08      	it	eq
 8001e16:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e18:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8001e1a:	bf08      	it	eq
 8001e1c:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8001e20:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001e24:	bf08      	it	eq
 8001e26:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e28:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e2a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001e2e:	bf5e      	ittt	pl
 8001e30:	6803      	ldrpl	r3, [r0, #0]
 8001e32:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001e36:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e38:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001e3c:	6863      	ldr	r3, [r4, #4]
 8001e3e:	d13e      	bne.n	8001ebe <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e40:	b113      	cbz	r3, 8001e48 <HAL_SPI_Transmit+0x8c>
 8001e42:	f1b8 0f01 	cmp.w	r8, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e48:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001e4c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e4e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b9a3      	cbnz	r3, 8001e88 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e5e:	463a      	mov	r2, r7
 8001e60:	4631      	mov	r1, r6
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff ff61 	bl	8001d2a <SPI_EndRxTxTransaction>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d149      	bne.n	8001f00 <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e6c:	68a3      	ldr	r3, [r4, #8]
 8001e6e:	b933      	cbnz	r3, 8001e7e <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	9201      	str	r2, [sp, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001e80:	3000      	adds	r0, #0
 8001e82:	bf18      	it	ne
 8001e84:	2001      	movne	r0, #1
error:
 8001e86:	e011      	b.n	8001eac <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	6893      	ldr	r3, [r2, #8]
 8001e8c:	0798      	lsls	r0, r3, #30
 8001e8e:	d505      	bpl.n	8001e9c <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e92:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001e96:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e98:	6323      	str	r3, [r4, #48]	; 0x30
 8001e9a:	e7d9      	b.n	8001e50 <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e9c:	f7ff fa32 	bl	8001304 <HAL_GetTick>
 8001ea0:	1bc0      	subs	r0, r0, r7
 8001ea2:	42b0      	cmp	r0, r6
 8001ea4:	d3d8      	bcc.n	8001e58 <HAL_SPI_Transmit+0x9c>
 8001ea6:	1c71      	adds	r1, r6, #1
 8001ea8:	d0d6      	beq.n	8001e58 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8001eaa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001eb8:	b002      	add	sp, #8
 8001eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ebe:	b113      	cbz	r3, 8001ec6 <HAL_SPI_Transmit+0x10a>
 8001ec0:	f1b8 0f01 	cmp.w	r8, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ec6:	782b      	ldrb	r3, [r5, #0]
 8001ec8:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001eca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ecc:	3301      	adds	r3, #1
 8001ece:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ed0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001ed8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0be      	beq.n	8001e5e <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ee0:	6823      	ldr	r3, [r4, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	0792      	lsls	r2, r2, #30
 8001ee6:	d503      	bpl.n	8001ef0 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ee8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001eea:	7812      	ldrb	r2, [r2, #0]
 8001eec:	731a      	strb	r2, [r3, #12]
 8001eee:	e7ec      	b.n	8001eca <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef0:	f7ff fa08 	bl	8001304 <HAL_GetTick>
 8001ef4:	1bc0      	subs	r0, r0, r7
 8001ef6:	42b0      	cmp	r0, r6
 8001ef8:	d3ee      	bcc.n	8001ed8 <HAL_SPI_Transmit+0x11c>
 8001efa:	1c73      	adds	r3, r6, #1
 8001efc:	d0ec      	beq.n	8001ed8 <HAL_SPI_Transmit+0x11c>
 8001efe:	e7d4      	b.n	8001eaa <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f00:	2320      	movs	r3, #32
 8001f02:	6563      	str	r3, [r4, #84]	; 0x54
 8001f04:	e7b2      	b.n	8001e6c <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8001f06:	2002      	movs	r0, #2
 8001f08:	e7d0      	b.n	8001eac <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8001f0a:	2002      	movs	r0, #2
 8001f0c:	e7d4      	b.n	8001eb8 <HAL_SPI_Transmit+0xfc>
	...

08001f10 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f10:	6a03      	ldr	r3, [r0, #32]
{
 8001f12:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f1a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f1c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f1e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f22:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001f2a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001f2e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f30:	4d0a      	ldr	r5, [pc, #40]	; (8001f5c <TIM_OC1_SetConfig+0x4c>)
 8001f32:	42a8      	cmp	r0, r5
 8001f34:	d10b      	bne.n	8001f4e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f36:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f38:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001f3c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f3e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f42:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001f46:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f48:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f4c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f4e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f50:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f52:	684a      	ldr	r2, [r1, #4]
 8001f54:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f56:	6203      	str	r3, [r0, #32]
}
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40012c00 	.word	0x40012c00

08001f60 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f60:	6a03      	ldr	r3, [r0, #32]
{
 8001f62:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f6e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f72:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001f76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001f7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f7e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f82:	4d0b      	ldr	r5, [pc, #44]	; (8001fb0 <TIM_OC3_SetConfig+0x50>)
 8001f84:	42a8      	cmp	r0, r5
 8001f86:	d10d      	bne.n	8001fa4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f88:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f8e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f92:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f96:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001f9a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001fa0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fa4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fa6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001fa8:	684a      	ldr	r2, [r1, #4]
 8001faa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fac:	6203      	str	r3, [r0, #32]
}
 8001fae:	bd70      	pop	{r4, r5, r6, pc}
 8001fb0:	40012c00 	.word	0x40012c00

08001fb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fb4:	6a03      	ldr	r3, [r0, #32]
{
 8001fb6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fbc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fbe:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fc2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fc6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fd4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd8:	4d06      	ldr	r5, [pc, #24]	; (8001ff4 <TIM_OC4_SetConfig+0x40>)
 8001fda:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fdc:	bf02      	ittt	eq
 8001fde:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fe0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fe4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fe8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fec:	684a      	ldr	r2, [r1, #4]
 8001fee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ff0:	6203      	str	r3, [r0, #32]
}
 8001ff2:	bd30      	pop	{r4, r5, pc}
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff8:	6803      	ldr	r3, [r0, #0]
}
 8001ffa:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800200a:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 800200c:	bf1e      	ittt	ne
 800200e:	681a      	ldrne	r2, [r3, #0]
 8002010:	f042 0201 	orrne.w	r2, r2, #1
 8002014:	601a      	strne	r2, [r3, #0]
}
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002018:	6803      	ldr	r3, [r0, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	f022 0201 	bic.w	r2, r2, #1
 8002020:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8002022:	f241 1211 	movw	r2, #4369	; 0x1111
 8002026:	6a19      	ldr	r1, [r3, #32]
 8002028:	4211      	tst	r1, r2
 800202a:	d108      	bne.n	800203e <HAL_TIM_Base_Stop_IT+0x26>
 800202c:	f240 4244 	movw	r2, #1092	; 0x444
 8002030:	6a19      	ldr	r1, [r3, #32]
 8002032:	4211      	tst	r1, r2
 8002034:	bf02      	ittt	eq
 8002036:	681a      	ldreq	r2, [r3, #0]
 8002038:	f022 0201 	biceq.w	r2, r2, #1
 800203c:	601a      	streq	r2, [r3, #0]
}
 800203e:	2000      	movs	r0, #0
 8002040:	4770      	bx	lr

08002042 <HAL_TIM_PWM_MspInit>:
 8002042:	4770      	bx	lr

08002044 <HAL_TIM_OC_DelayElapsedCallback>:
 8002044:	4770      	bx	lr

08002046 <HAL_TIM_IC_CaptureCallback>:
 8002046:	4770      	bx	lr

08002048 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002048:	4770      	bx	lr

0800204a <HAL_TIM_TriggerCallback>:
 800204a:	4770      	bx	lr

0800204c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204c:	6803      	ldr	r3, [r0, #0]
{
 800204e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002050:	691a      	ldr	r2, [r3, #16]
{
 8002052:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002054:	0791      	lsls	r1, r2, #30
 8002056:	d50e      	bpl.n	8002076 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	0792      	lsls	r2, r2, #30
 800205c:	d50b      	bpl.n	8002076 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800205e:	f06f 0202 	mvn.w	r2, #2
 8002062:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002064:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002066:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002068:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800206a:	079b      	lsls	r3, r3, #30
 800206c:	d077      	beq.n	800215e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800206e:	f7ff ffea 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	2300      	movs	r3, #0
 8002074:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	0750      	lsls	r0, r2, #29
 800207c:	d510      	bpl.n	80020a0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	0751      	lsls	r1, r2, #29
 8002082:	d50d      	bpl.n	80020a0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002084:	f06f 0204 	mvn.w	r2, #4
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800208c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002090:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002094:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002096:	d068      	beq.n	800216a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002098:	f7ff ffd5 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209c:	2300      	movs	r3, #0
 800209e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	0712      	lsls	r2, r2, #28
 80020a6:	d50f      	bpl.n	80020c8 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	0710      	lsls	r0, r2, #28
 80020ac:	d50c      	bpl.n	80020c8 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ae:	f06f 0208 	mvn.w	r2, #8
 80020b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b4:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ba:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80020bc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020be:	d05a      	beq.n	8002176 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020c0:	f7ff ffc1 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c4:	2300      	movs	r3, #0
 80020c6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	691a      	ldr	r2, [r3, #16]
 80020cc:	06d2      	lsls	r2, r2, #27
 80020ce:	d510      	bpl.n	80020f2 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	06d0      	lsls	r0, r2, #27
 80020d4:	d50d      	bpl.n	80020f2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d6:	f06f 0210 	mvn.w	r2, #16
 80020da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020dc:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020de:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020e0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e2:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e8:	d04b      	beq.n	8002182 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	f7ff ffac 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	2300      	movs	r3, #0
 80020f0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	07d1      	lsls	r1, r2, #31
 80020f8:	d508      	bpl.n	800210c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	07d2      	lsls	r2, r2, #31
 80020fe:	d505      	bpl.n	800210c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002100:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002104:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002106:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002108:	f7fe fc24 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	0610      	lsls	r0, r2, #24
 8002112:	d508      	bpl.n	8002126 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	0611      	lsls	r1, r2, #24
 8002118:	d505      	bpl.n	8002126 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800211e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002120:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002122:	f000 fa18 	bl	8002556 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	0652      	lsls	r2, r2, #25
 800212c:	d508      	bpl.n	8002140 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	0650      	lsls	r0, r2, #25
 8002132:	d505      	bpl.n	8002140 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002134:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002138:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800213a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800213c:	f7ff ff85 	bl	800204a <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	0691      	lsls	r1, r2, #26
 8002146:	d522      	bpl.n	800218e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	0692      	lsls	r2, r2, #26
 800214c:	d51f      	bpl.n	800218e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002152:	4620      	mov	r0, r4
}
 8002154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002158:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800215a:	f000 b9fb 	b.w	8002554 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800215e:	f7ff ff71 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002162:	4620      	mov	r0, r4
 8002164:	f7ff ff70 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
 8002168:	e783      	b.n	8002072 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216a:	f7ff ff6b 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216e:	4620      	mov	r0, r4
 8002170:	f7ff ff6a 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
 8002174:	e792      	b.n	800209c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	f7ff ff65 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217a:	4620      	mov	r0, r4
 800217c:	f7ff ff64 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
 8002180:	e7a0      	b.n	80020c4 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	f7ff ff5f 	bl	8002044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002186:	4620      	mov	r0, r4
 8002188:	f7ff ff5e 	bl	8002048 <HAL_TIM_PWM_PulseFinishedCallback>
 800218c:	e7af      	b.n	80020ee <HAL_TIM_IRQHandler+0xa2>
}
 800218e:	bd10      	pop	{r4, pc}

08002190 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002192:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002194:	4290      	cmp	r0, r2
 8002196:	d00a      	beq.n	80021ae <TIM_Base_SetConfig+0x1e>
 8002198:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800219c:	d007      	beq.n	80021ae <TIM_Base_SetConfig+0x1e>
 800219e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d003      	beq.n	80021ae <TIM_Base_SetConfig+0x1e>
 80021a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d115      	bne.n	80021da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80021ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	4a11      	ldr	r2, [pc, #68]	; (80021fc <TIM_Base_SetConfig+0x6c>)
 80021b8:	4290      	cmp	r0, r2
 80021ba:	d00a      	beq.n	80021d2 <TIM_Base_SetConfig+0x42>
 80021bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0x42>
 80021c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80021c6:	4290      	cmp	r0, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0x42>
 80021ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ce:	4290      	cmp	r0, r2
 80021d0:	d103      	bne.n	80021da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021da:	694a      	ldr	r2, [r1, #20]
 80021dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80021e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e4:	688b      	ldr	r3, [r1, #8]
 80021e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021e8:	680b      	ldr	r3, [r1, #0]
 80021ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <TIM_Base_SetConfig+0x6c>)
 80021ee:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80021f0:	bf04      	itt	eq
 80021f2:	690b      	ldreq	r3, [r1, #16]
 80021f4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80021f6:	2301      	movs	r3, #1
 80021f8:	6143      	str	r3, [r0, #20]
}
 80021fa:	4770      	bx	lr
 80021fc:	40012c00 	.word	0x40012c00

08002200 <HAL_TIM_Base_Init>:
{
 8002200:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002202:	4604      	mov	r4, r0
 8002204:	b1a0      	cbz	r0, 8002230 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800220a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800220e:	b91b      	cbnz	r3, 8002218 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002210:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002214:	f7fe fe30 	bl	8000e78 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800221a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800221c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002220:	1d21      	adds	r1, r4, #4
 8002222:	f7ff ffb5 	bl	8002190 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002226:	2301      	movs	r3, #1
  return HAL_OK;
 8002228:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800222a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800222e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
 8002232:	e7fc      	b.n	800222e <HAL_TIM_Base_Init+0x2e>

08002234 <HAL_TIM_PWM_Init>:
{
 8002234:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002236:	4604      	mov	r4, r0
 8002238:	b1a0      	cbz	r0, 8002264 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800223a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800223e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002242:	b91b      	cbnz	r3, 800224c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002244:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002248:	f7ff fefb 	bl	8002042 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800224e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	1d21      	adds	r1, r4, #4
 8002256:	f7ff ff9b 	bl	8002190 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800225a:	2301      	movs	r3, #1
  return HAL_OK;
 800225c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800225e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002262:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002264:	2001      	movs	r0, #1
 8002266:	e7fc      	b.n	8002262 <HAL_TIM_PWM_Init+0x2e>

08002268 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002268:	6a03      	ldr	r3, [r0, #32]
{
 800226a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800226c:	f023 0310 	bic.w	r3, r3, #16
 8002270:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002272:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002274:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002276:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002278:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800227a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002282:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002284:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002288:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800228c:	4d0b      	ldr	r5, [pc, #44]	; (80022bc <TIM_OC2_SetConfig+0x54>)
 800228e:	42a8      	cmp	r0, r5
 8002290:	d10d      	bne.n	80022ae <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002292:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002298:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800229c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022a0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80022a4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80022a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80022ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022b0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80022b2:	684a      	ldr	r2, [r1, #4]
 80022b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022b6:	6203      	str	r3, [r0, #32]
}
 80022b8:	bd70      	pop	{r4, r5, r6, pc}
 80022ba:	bf00      	nop
 80022bc:	40012c00 	.word	0x40012c00

080022c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80022c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80022c6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	f04f 0002 	mov.w	r0, #2
 80022ce:	d025      	beq.n	800231c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80022d0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022d2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80022da:	2a0c      	cmp	r2, #12
 80022dc:	d818      	bhi.n	8002310 <HAL_TIM_PWM_ConfigChannel+0x50>
 80022de:	e8df f002 	tbb	[pc, r2]
 80022e2:	1707      	.short	0x1707
 80022e4:	171e1717 	.word	0x171e1717
 80022e8:	172f1717 	.word	0x172f1717
 80022ec:	1717      	.short	0x1717
 80022ee:	40          	.byte	0x40
 80022ef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022f0:	6820      	ldr	r0, [r4, #0]
 80022f2:	f7ff fe0d 	bl	8001f10 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022f6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022f8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	f042 0208 	orr.w	r2, r2, #8
 8002300:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	f022 0204 	bic.w	r2, r2, #4
 8002308:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800230a:	699a      	ldr	r2, [r3, #24]
 800230c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800230e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002310:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002312:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002314:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002318:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800231c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800231e:	6820      	ldr	r0, [r4, #0]
 8002320:	f7ff ffa2 	bl	8002268 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002324:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002326:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002338:	699a      	ldr	r2, [r3, #24]
 800233a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800233e:	e7e6      	b.n	800230e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002340:	6820      	ldr	r0, [r4, #0]
 8002342:	f7ff fe0d 	bl	8001f60 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002346:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002348:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	f042 0208 	orr.w	r2, r2, #8
 8002350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	f022 0204 	bic.w	r2, r2, #4
 8002358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800235e:	61da      	str	r2, [r3, #28]
      break;
 8002360:	e7d6      	b.n	8002310 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002362:	6820      	ldr	r0, [r4, #0]
 8002364:	f7ff fe26 	bl	8001fb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002368:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800236a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002372:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002374:	69da      	ldr	r2, [r3, #28]
 8002376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800237a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002382:	e7ec      	b.n	800235e <HAL_TIM_PWM_ConfigChannel+0x9e>

08002384 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002384:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002386:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002388:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800238a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800238e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002392:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002394:	6083      	str	r3, [r0, #8]
}
 8002396:	bd10      	pop	{r4, pc}

08002398 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002398:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800239c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800239e:	2b01      	cmp	r3, #1
{
 80023a0:	4604      	mov	r4, r0
 80023a2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80023a6:	d019      	beq.n	80023dc <HAL_TIM_ConfigClockSource+0x44>
 80023a8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80023aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80023ae:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80023b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80023b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80023be:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80023c0:	680b      	ldr	r3, [r1, #0]
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d065      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0xfa>
 80023c6:	d815      	bhi.n	80023f4 <HAL_TIM_ConfigClockSource+0x5c>
 80023c8:	2b10      	cmp	r3, #16
 80023ca:	d00c      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0x4e>
 80023cc:	d807      	bhi.n	80023de <HAL_TIM_ConfigClockSource+0x46>
 80023ce:	b153      	cbz	r3, 80023e6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80023d8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80023dc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d001      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0x4e>
 80023e2:	2b30      	cmp	r3, #48	; 0x30
 80023e4:	d1f4      	bne.n	80023d0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80023e6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023e8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80023ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023f0:	4313      	orrs	r3, r2
 80023f2:	e01a      	b.n	800242a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80023f4:	2b60      	cmp	r3, #96	; 0x60
 80023f6:	d034      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0xca>
 80023f8:	d819      	bhi.n	800242e <HAL_TIM_ConfigClockSource+0x96>
 80023fa:	2b50      	cmp	r3, #80	; 0x50
 80023fc:	d1e8      	bne.n	80023d0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fe:	684a      	ldr	r2, [r1, #4]
 8002400:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002402:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002404:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002406:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240a:	f025 0501 	bic.w	r5, r5, #1
 800240e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002410:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002412:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002418:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800241c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800241e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002420:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002426:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800242a:	6083      	str	r3, [r0, #8]
 800242c:	e7d0      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800242e:	2b70      	cmp	r3, #112	; 0x70
 8002430:	d00c      	beq.n	800244c <HAL_TIM_ConfigClockSource+0xb4>
 8002432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002436:	d1cb      	bne.n	80023d0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	68cb      	ldr	r3, [r1, #12]
 800243a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800243e:	f7ff ffa1 	bl	8002384 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002442:	6822      	ldr	r2, [r4, #0]
 8002444:	6893      	ldr	r3, [r2, #8]
 8002446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244a:	e008      	b.n	800245e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800244c:	68cb      	ldr	r3, [r1, #12]
 800244e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002452:	f7ff ff97 	bl	8002384 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002456:	6822      	ldr	r2, [r4, #0]
 8002458:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800245a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800245e:	6093      	str	r3, [r2, #8]
      break;
 8002460:	e7b6      	b.n	80023d0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002462:	684d      	ldr	r5, [r1, #4]
 8002464:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002466:	6a01      	ldr	r1, [r0, #32]
 8002468:	f021 0110 	bic.w	r1, r1, #16
 800246c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800246e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002470:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002472:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002476:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800247a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800247e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002482:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002484:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002486:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800248c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002490:	e7cb      	b.n	800242a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002492:	684a      	ldr	r2, [r1, #4]
 8002494:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002496:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002498:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800249a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800249e:	f025 0501 	bic.w	r5, r5, #1
 80024a2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80024a6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ac:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80024b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80024b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80024b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80024be:	e7b4      	b.n	800242a <HAL_TIM_ConfigClockSource+0x92>

080024c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024c2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024c4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024c6:	f001 011f 	and.w	r1, r1, #31
 80024ca:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80024cc:	ea23 0304 	bic.w	r3, r3, r4
 80024d0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024d2:	6a03      	ldr	r3, [r0, #32]
 80024d4:	408a      	lsls	r2, r1
 80024d6:	431a      	orrs	r2, r3
 80024d8:	6202      	str	r2, [r0, #32]
}
 80024da:	bd10      	pop	{r4, pc}

080024dc <HAL_TIM_OC_Start>:
{
 80024dc:	b510      	push	{r4, lr}
 80024de:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024e0:	2201      	movs	r2, #1
 80024e2:	6800      	ldr	r0, [r0, #0]
 80024e4:	f7ff ffec 	bl	80024c0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_TIM_OC_Start+0x34>)
}
 80024ec:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024ee:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80024f0:	bf02      	ittt	eq
 80024f2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80024f4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80024f8:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8002502:	bf1e      	ittt	ne
 8002504:	681a      	ldrne	r2, [r3, #0]
 8002506:	f042 0201 	orrne.w	r2, r2, #1
 800250a:	601a      	strne	r2, [r3, #0]
}
 800250c:	bd10      	pop	{r4, pc}
 800250e:	bf00      	nop
 8002510:	40012c00 	.word	0x40012c00

08002514 <HAL_TIM_PWM_Start>:
 8002514:	f7ff bfe2 	b.w	80024dc <HAL_TIM_OC_Start>

08002518 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002518:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800251c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800251e:	2b01      	cmp	r3, #1
 8002520:	f04f 0302 	mov.w	r3, #2
 8002524:	d014      	beq.n	8002550 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002526:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800252c:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800252e:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002530:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002532:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002534:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800253c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800253e:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002540:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002542:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002544:	2301      	movs	r3, #1
 8002546:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800254a:	2300      	movs	r3, #0
 800254c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002550:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002552:	bd30      	pop	{r4, r5, pc}

08002554 <HAL_TIMEx_CommutCallback>:
 8002554:	4770      	bx	lr

08002556 <HAL_TIMEx_BreakCallback>:
 8002556:	4770      	bx	lr

08002558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002558:	b538      	push	{r3, r4, r5, lr}
 800255a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255c:	6803      	ldr	r3, [r0, #0]
 800255e:	68c1      	ldr	r1, [r0, #12]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	2419      	movs	r4, #25
 8002564:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002568:	430a      	orrs	r2, r1
 800256a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800256c:	6882      	ldr	r2, [r0, #8]
 800256e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002570:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002572:	4302      	orrs	r2, r0
 8002574:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002576:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800257a:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800257e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002584:	695a      	ldr	r2, [r3, #20]
 8002586:	69a9      	ldr	r1, [r5, #24]
 8002588:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800258c:	430a      	orrs	r2, r1
 800258e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <UART_SetConfig+0x70>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d114      	bne.n	80025c0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002596:	f7ff fb7d 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800259a:	4360      	muls	r0, r4
 800259c:	686c      	ldr	r4, [r5, #4]
 800259e:	2264      	movs	r2, #100	; 0x64
 80025a0:	00a4      	lsls	r4, r4, #2
 80025a2:	fbb0 f0f4 	udiv	r0, r0, r4
 80025a6:	fbb0 f1f2 	udiv	r1, r0, r2
 80025aa:	fb02 0311 	mls	r3, r2, r1, r0
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3332      	adds	r3, #50	; 0x32
 80025b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80025b6:	682c      	ldr	r4, [r5, #0]
 80025b8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80025bc:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80025be:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80025c0:	f7ff fb58 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>
 80025c4:	e7e9      	b.n	800259a <UART_SetConfig+0x42>
 80025c6:	bf00      	nop
 80025c8:	40013800 	.word	0x40013800

080025cc <HAL_UART_Init>:
{
 80025cc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80025ce:	4604      	mov	r4, r0
 80025d0:	b340      	cbz	r0, 8002624 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80025d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025da:	b91b      	cbnz	r3, 80025e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80025dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80025e0:	f7fe fcf6 	bl	8000fd0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80025e4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80025e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80025e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80025ec:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80025ee:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80025f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025f4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80025f6:	f7ff ffaf 	bl	8002558 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800260c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002614:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002616:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002618:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800261a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800261e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002622:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e7fc      	b.n	8002622 <HAL_UART_Init+0x56>

08002628 <calloc>:
 8002628:	4b02      	ldr	r3, [pc, #8]	; (8002634 <calloc+0xc>)
 800262a:	460a      	mov	r2, r1
 800262c:	4601      	mov	r1, r0
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	f000 b844 	b.w	80026bc <_calloc_r>
 8002634:	20000010 	.word	0x20000010

08002638 <__errno>:
 8002638:	4b01      	ldr	r3, [pc, #4]	; (8002640 <__errno+0x8>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000010 	.word	0x20000010

08002644 <__libc_init_array>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2500      	movs	r5, #0
 8002648:	4e0c      	ldr	r6, [pc, #48]	; (800267c <__libc_init_array+0x38>)
 800264a:	4c0d      	ldr	r4, [pc, #52]	; (8002680 <__libc_init_array+0x3c>)
 800264c:	1ba4      	subs	r4, r4, r6
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	42a5      	cmp	r5, r4
 8002652:	d109      	bne.n	8002668 <__libc_init_array+0x24>
 8002654:	f000 f92c 	bl	80028b0 <_init>
 8002658:	2500      	movs	r5, #0
 800265a:	4e0a      	ldr	r6, [pc, #40]	; (8002684 <__libc_init_array+0x40>)
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <__libc_init_array+0x44>)
 800265e:	1ba4      	subs	r4, r4, r6
 8002660:	10a4      	asrs	r4, r4, #2
 8002662:	42a5      	cmp	r5, r4
 8002664:	d105      	bne.n	8002672 <__libc_init_array+0x2e>
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266c:	4798      	blx	r3
 800266e:	3501      	adds	r5, #1
 8002670:	e7ee      	b.n	8002650 <__libc_init_array+0xc>
 8002672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002676:	4798      	blx	r3
 8002678:	3501      	adds	r5, #1
 800267a:	e7f2      	b.n	8002662 <__libc_init_array+0x1e>
 800267c:	0800d128 	.word	0x0800d128
 8002680:	0800d128 	.word	0x0800d128
 8002684:	0800d128 	.word	0x0800d128
 8002688:	0800d12c 	.word	0x0800d12c

0800268c <malloc>:
 800268c:	4b02      	ldr	r3, [pc, #8]	; (8002698 <malloc+0xc>)
 800268e:	4601      	mov	r1, r0
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	f000 b86d 	b.w	8002770 <_malloc_r>
 8002696:	bf00      	nop
 8002698:	20000010 	.word	0x20000010

0800269c <free>:
 800269c:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <free+0xc>)
 800269e:	4601      	mov	r1, r0
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	f000 b819 	b.w	80026d8 <_free_r>
 80026a6:	bf00      	nop
 80026a8:	20000010 	.word	0x20000010

080026ac <memset>:
 80026ac:	4603      	mov	r3, r0
 80026ae:	4402      	add	r2, r0
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d100      	bne.n	80026b6 <memset+0xa>
 80026b4:	4770      	bx	lr
 80026b6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ba:	e7f9      	b.n	80026b0 <memset+0x4>

080026bc <_calloc_r>:
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	fb02 f401 	mul.w	r4, r2, r1
 80026c2:	4621      	mov	r1, r4
 80026c4:	f000 f854 	bl	8002770 <_malloc_r>
 80026c8:	4605      	mov	r5, r0
 80026ca:	b118      	cbz	r0, 80026d4 <_calloc_r+0x18>
 80026cc:	4622      	mov	r2, r4
 80026ce:	2100      	movs	r1, #0
 80026d0:	f7ff ffec 	bl	80026ac <memset>
 80026d4:	4628      	mov	r0, r5
 80026d6:	bd38      	pop	{r3, r4, r5, pc}

080026d8 <_free_r>:
 80026d8:	b538      	push	{r3, r4, r5, lr}
 80026da:	4605      	mov	r5, r0
 80026dc:	2900      	cmp	r1, #0
 80026de:	d043      	beq.n	8002768 <_free_r+0x90>
 80026e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026e4:	1f0c      	subs	r4, r1, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	bfb8      	it	lt
 80026ea:	18e4      	addlt	r4, r4, r3
 80026ec:	f000 f8de 	bl	80028ac <__malloc_lock>
 80026f0:	4a1e      	ldr	r2, [pc, #120]	; (800276c <_free_r+0x94>)
 80026f2:	6813      	ldr	r3, [r2, #0]
 80026f4:	4610      	mov	r0, r2
 80026f6:	b933      	cbnz	r3, 8002706 <_free_r+0x2e>
 80026f8:	6063      	str	r3, [r4, #4]
 80026fa:	6014      	str	r4, [r2, #0]
 80026fc:	4628      	mov	r0, r5
 80026fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002702:	f000 b8d4 	b.w	80028ae <__malloc_unlock>
 8002706:	42a3      	cmp	r3, r4
 8002708:	d90b      	bls.n	8002722 <_free_r+0x4a>
 800270a:	6821      	ldr	r1, [r4, #0]
 800270c:	1862      	adds	r2, r4, r1
 800270e:	4293      	cmp	r3, r2
 8002710:	bf01      	itttt	eq
 8002712:	681a      	ldreq	r2, [r3, #0]
 8002714:	685b      	ldreq	r3, [r3, #4]
 8002716:	1852      	addeq	r2, r2, r1
 8002718:	6022      	streq	r2, [r4, #0]
 800271a:	6063      	str	r3, [r4, #4]
 800271c:	6004      	str	r4, [r0, #0]
 800271e:	e7ed      	b.n	80026fc <_free_r+0x24>
 8002720:	4613      	mov	r3, r2
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	b10a      	cbz	r2, 800272a <_free_r+0x52>
 8002726:	42a2      	cmp	r2, r4
 8002728:	d9fa      	bls.n	8002720 <_free_r+0x48>
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	1858      	adds	r0, r3, r1
 800272e:	42a0      	cmp	r0, r4
 8002730:	d10b      	bne.n	800274a <_free_r+0x72>
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	4401      	add	r1, r0
 8002736:	1858      	adds	r0, r3, r1
 8002738:	4282      	cmp	r2, r0
 800273a:	6019      	str	r1, [r3, #0]
 800273c:	d1de      	bne.n	80026fc <_free_r+0x24>
 800273e:	6810      	ldr	r0, [r2, #0]
 8002740:	6852      	ldr	r2, [r2, #4]
 8002742:	4401      	add	r1, r0
 8002744:	6019      	str	r1, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	e7d8      	b.n	80026fc <_free_r+0x24>
 800274a:	d902      	bls.n	8002752 <_free_r+0x7a>
 800274c:	230c      	movs	r3, #12
 800274e:	602b      	str	r3, [r5, #0]
 8002750:	e7d4      	b.n	80026fc <_free_r+0x24>
 8002752:	6820      	ldr	r0, [r4, #0]
 8002754:	1821      	adds	r1, r4, r0
 8002756:	428a      	cmp	r2, r1
 8002758:	bf01      	itttt	eq
 800275a:	6811      	ldreq	r1, [r2, #0]
 800275c:	6852      	ldreq	r2, [r2, #4]
 800275e:	1809      	addeq	r1, r1, r0
 8002760:	6021      	streq	r1, [r4, #0]
 8002762:	6062      	str	r2, [r4, #4]
 8002764:	605c      	str	r4, [r3, #4]
 8002766:	e7c9      	b.n	80026fc <_free_r+0x24>
 8002768:	bd38      	pop	{r3, r4, r5, pc}
 800276a:	bf00      	nop
 800276c:	2000009c 	.word	0x2000009c

08002770 <_malloc_r>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	1ccd      	adds	r5, r1, #3
 8002774:	f025 0503 	bic.w	r5, r5, #3
 8002778:	3508      	adds	r5, #8
 800277a:	2d0c      	cmp	r5, #12
 800277c:	bf38      	it	cc
 800277e:	250c      	movcc	r5, #12
 8002780:	2d00      	cmp	r5, #0
 8002782:	4606      	mov	r6, r0
 8002784:	db01      	blt.n	800278a <_malloc_r+0x1a>
 8002786:	42a9      	cmp	r1, r5
 8002788:	d903      	bls.n	8002792 <_malloc_r+0x22>
 800278a:	230c      	movs	r3, #12
 800278c:	6033      	str	r3, [r6, #0]
 800278e:	2000      	movs	r0, #0
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	f000 f88b 	bl	80028ac <__malloc_lock>
 8002796:	4a21      	ldr	r2, [pc, #132]	; (800281c <_malloc_r+0xac>)
 8002798:	6814      	ldr	r4, [r2, #0]
 800279a:	4621      	mov	r1, r4
 800279c:	b991      	cbnz	r1, 80027c4 <_malloc_r+0x54>
 800279e:	4c20      	ldr	r4, [pc, #128]	; (8002820 <_malloc_r+0xb0>)
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	b91b      	cbnz	r3, 80027ac <_malloc_r+0x3c>
 80027a4:	4630      	mov	r0, r6
 80027a6:	f000 f871 	bl	800288c <_sbrk_r>
 80027aa:	6020      	str	r0, [r4, #0]
 80027ac:	4629      	mov	r1, r5
 80027ae:	4630      	mov	r0, r6
 80027b0:	f000 f86c 	bl	800288c <_sbrk_r>
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	d124      	bne.n	8002802 <_malloc_r+0x92>
 80027b8:	230c      	movs	r3, #12
 80027ba:	4630      	mov	r0, r6
 80027bc:	6033      	str	r3, [r6, #0]
 80027be:	f000 f876 	bl	80028ae <__malloc_unlock>
 80027c2:	e7e4      	b.n	800278e <_malloc_r+0x1e>
 80027c4:	680b      	ldr	r3, [r1, #0]
 80027c6:	1b5b      	subs	r3, r3, r5
 80027c8:	d418      	bmi.n	80027fc <_malloc_r+0x8c>
 80027ca:	2b0b      	cmp	r3, #11
 80027cc:	d90f      	bls.n	80027ee <_malloc_r+0x7e>
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	18cc      	adds	r4, r1, r3
 80027d2:	50cd      	str	r5, [r1, r3]
 80027d4:	4630      	mov	r0, r6
 80027d6:	f000 f86a 	bl	80028ae <__malloc_unlock>
 80027da:	f104 000b 	add.w	r0, r4, #11
 80027de:	1d23      	adds	r3, r4, #4
 80027e0:	f020 0007 	bic.w	r0, r0, #7
 80027e4:	1ac3      	subs	r3, r0, r3
 80027e6:	d0d3      	beq.n	8002790 <_malloc_r+0x20>
 80027e8:	425a      	negs	r2, r3
 80027ea:	50e2      	str	r2, [r4, r3]
 80027ec:	e7d0      	b.n	8002790 <_malloc_r+0x20>
 80027ee:	684b      	ldr	r3, [r1, #4]
 80027f0:	428c      	cmp	r4, r1
 80027f2:	bf16      	itet	ne
 80027f4:	6063      	strne	r3, [r4, #4]
 80027f6:	6013      	streq	r3, [r2, #0]
 80027f8:	460c      	movne	r4, r1
 80027fa:	e7eb      	b.n	80027d4 <_malloc_r+0x64>
 80027fc:	460c      	mov	r4, r1
 80027fe:	6849      	ldr	r1, [r1, #4]
 8002800:	e7cc      	b.n	800279c <_malloc_r+0x2c>
 8002802:	1cc4      	adds	r4, r0, #3
 8002804:	f024 0403 	bic.w	r4, r4, #3
 8002808:	42a0      	cmp	r0, r4
 800280a:	d005      	beq.n	8002818 <_malloc_r+0xa8>
 800280c:	1a21      	subs	r1, r4, r0
 800280e:	4630      	mov	r0, r6
 8002810:	f000 f83c 	bl	800288c <_sbrk_r>
 8002814:	3001      	adds	r0, #1
 8002816:	d0cf      	beq.n	80027b8 <_malloc_r+0x48>
 8002818:	6025      	str	r5, [r4, #0]
 800281a:	e7db      	b.n	80027d4 <_malloc_r+0x64>
 800281c:	2000009c 	.word	0x2000009c
 8002820:	200000a0 	.word	0x200000a0

08002824 <rand>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <rand+0x50>)
 8002828:	681c      	ldr	r4, [r3, #0]
 800282a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800282c:	b97b      	cbnz	r3, 800284e <rand+0x2a>
 800282e:	2018      	movs	r0, #24
 8002830:	f7ff ff2c 	bl	800268c <malloc>
 8002834:	4a10      	ldr	r2, [pc, #64]	; (8002878 <rand+0x54>)
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <rand+0x58>)
 8002838:	63a0      	str	r0, [r4, #56]	; 0x38
 800283a:	e9c0 2300 	strd	r2, r3, [r0]
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <rand+0x5c>)
 8002840:	2201      	movs	r2, #1
 8002842:	6083      	str	r3, [r0, #8]
 8002844:	230b      	movs	r3, #11
 8002846:	8183      	strh	r3, [r0, #12]
 8002848:	2300      	movs	r3, #0
 800284a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800284e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <rand+0x60>)
 8002852:	690a      	ldr	r2, [r1, #16]
 8002854:	694b      	ldr	r3, [r1, #20]
 8002856:	4350      	muls	r0, r2
 8002858:	4c0b      	ldr	r4, [pc, #44]	; (8002888 <rand+0x64>)
 800285a:	fb04 0003 	mla	r0, r4, r3, r0
 800285e:	fba2 2304 	umull	r2, r3, r2, r4
 8002862:	4403      	add	r3, r0
 8002864:	1c54      	adds	r4, r2, #1
 8002866:	f143 0500 	adc.w	r5, r3, #0
 800286a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800286e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002872:	bd38      	pop	{r3, r4, r5, pc}
 8002874:	20000010 	.word	0x20000010
 8002878:	abcd330e 	.word	0xabcd330e
 800287c:	e66d1234 	.word	0xe66d1234
 8002880:	0005deec 	.word	0x0005deec
 8002884:	5851f42d 	.word	0x5851f42d
 8002888:	4c957f2d 	.word	0x4c957f2d

0800288c <_sbrk_r>:
 800288c:	b538      	push	{r3, r4, r5, lr}
 800288e:	2300      	movs	r3, #0
 8002890:	4c05      	ldr	r4, [pc, #20]	; (80028a8 <_sbrk_r+0x1c>)
 8002892:	4605      	mov	r5, r0
 8002894:	4608      	mov	r0, r1
 8002896:	6023      	str	r3, [r4, #0]
 8002898:	f7fe fc86 	bl	80011a8 <_sbrk>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d102      	bne.n	80028a6 <_sbrk_r+0x1a>
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	b103      	cbz	r3, 80028a6 <_sbrk_r+0x1a>
 80028a4:	602b      	str	r3, [r5, #0]
 80028a6:	bd38      	pop	{r3, r4, r5, pc}
 80028a8:	20000544 	.word	0x20000544

080028ac <__malloc_lock>:
 80028ac:	4770      	bx	lr

080028ae <__malloc_unlock>:
 80028ae:	4770      	bx	lr

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	bf00      	nop
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
