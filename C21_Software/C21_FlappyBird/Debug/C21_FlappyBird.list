
C21_FlappyBird.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b0c4  080026ec  080026ec  000126ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b0  0800d7b0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800d7b0  0800d7b0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d7b0  0800d7b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7b0  0800d7b0  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d7b4  0800d7b4  0001d7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800d7b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000078  0800d830  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  0800d830  00020348  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c06  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002826  00000000  00000000  00030ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  000334d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000149a2  00000000  00000000  00034028  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009cd0  00000000  00000000  000489ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0007315f  00000000  00000000  0005269a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c57f9  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00008309  00000000  00000000  000c5874  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00001060  00000000  00000000  000cdb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  0000244c  00000000  00000000  000cebe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	080026d4 	.word	0x080026d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	080026d4 	.word	0x080026d4

0800014c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800014c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800014e:	2414      	movs	r4, #20
{
 8000150:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000152:	4622      	mov	r2, r4
 8000154:	2100      	movs	r1, #0
 8000156:	a808      	add	r0, sp, #32
 8000158:	f002 f9ba 	bl	80024d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800015c:	4622      	mov	r2, r4
 800015e:	2100      	movs	r1, #0
 8000160:	a801      	add	r0, sp, #4
 8000162:	f002 f9b5 	bl	80024d0 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000166:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800016e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000172:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000176:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800017a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800017c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800017e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000180:	f001 fa42 	bl	8001608 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000184:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000186:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800018a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800018e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000190:	4621      	mov	r1, r4
 8000192:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000194:	e9cd 3203 	strd	r3, r2, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000198:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800019a:	f001 fc0d 	bl	80019b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800019e:	b010      	add	sp, #64	; 0x40
 80001a0:	bd10      	pop	{r4, pc}
	...

080001a4 <main>:
{
 80001a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001a8:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ac:	ad13      	add	r5, sp, #76	; 0x4c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ae:	4ec9      	ldr	r6, [pc, #804]	; (80004d4 <main+0x330>)
  HAL_Init();
 80001b0:	f000 ffc8 	bl	8001144 <HAL_Init>
  SystemClock_Config();
 80001b4:	f7ff ffca 	bl	800014c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001b8:	2210      	movs	r2, #16
 80001ba:	2100      	movs	r1, #0
 80001bc:	4628      	mov	r0, r5
 80001be:	f002 f987 	bl	80024d0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c2:	69b3      	ldr	r3, [r6, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001c4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001c6:	f043 0310 	orr.w	r3, r3, #16
 80001ca:	61b3      	str	r3, [r6, #24]
 80001cc:	69b3      	ldr	r3, [r6, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001ce:	f240 4182 	movw	r1, #1154	; 0x482
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d2:	f003 0310 	and.w	r3, r3, #16
 80001d6:	9309      	str	r3, [sp, #36]	; 0x24
 80001d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001da:	69b3      	ldr	r3, [r6, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 80001dc:	48be      	ldr	r0, [pc, #760]	; (80004d8 <main+0x334>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001de:	f043 0320 	orr.w	r3, r3, #32
 80001e2:	61b3      	str	r3, [r6, #24]
 80001e4:	69b3      	ldr	r3, [r6, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001e8:	f003 0320 	and.w	r3, r3, #32
 80001ec:	930a      	str	r3, [sp, #40]	; 0x28
 80001ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f0:	69b3      	ldr	r3, [r6, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB1 PB10 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001f2:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	61b3      	str	r3, [r6, #24]
 80001fa:	69b3      	ldr	r3, [r6, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001fc:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000200:	f003 0304 	and.w	r3, r3, #4
 8000204:	930b      	str	r3, [sp, #44]	; 0x2c
 8000206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000208:	69b3      	ldr	r3, [r6, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800020a:	f44f 7982 	mov.w	r9, #260	; 0x104
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800020e:	f043 0308 	orr.w	r3, r3, #8
 8000212:	61b3      	str	r3, [r6, #24]
 8000214:	69b3      	ldr	r3, [r6, #24]
 8000216:	f003 0308 	and.w	r3, r3, #8
 800021a:	930c      	str	r3, [sp, #48]	; 0x30
 800021c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|SD_CS_Pin, GPIO_PIN_RESET);
 800021e:	f001 f9db 	bl	80015d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000228:	48ac      	ldr	r0, [pc, #688]	; (80004dc <main+0x338>)
 800022a:	f001 f9d5 	bl	80015d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800022e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000232:	4bab      	ldr	r3, [pc, #684]	; (80004e0 <main+0x33c>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000234:	4629      	mov	r1, r5
 8000236:	48ab      	ldr	r0, [pc, #684]	; (80004e4 <main+0x340>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000238:	e9c5 2300 	strd	r2, r3, [r5]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023c:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800023e:	f001 f8e5 	bl	800140c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000242:	f240 4382 	movw	r3, #1154	; 0x482
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000246:	4629      	mov	r1, r5
 8000248:	48a3      	ldr	r0, [pc, #652]	; (80004d8 <main+0x334>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024a:	e9c5 3700 	strd	r3, r7, [r5]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024e:	f8c5 800c 	str.w	r8, [r5, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000252:	60ac      	str	r4, [r5, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000254:	f001 f8da 	bl	800140c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000258:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800025c:	4629      	mov	r1, r5
 800025e:	489f      	ldr	r0, [pc, #636]	; (80004dc <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000260:	e9c5 3700 	strd	r3, r7, [r5]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000264:	e9c5 4802 	strd	r4, r8, [r5, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000268:	f001 f8d0 	bl	800140c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800026c:	4622      	mov	r2, r4
 800026e:	4621      	mov	r1, r4
 8000270:	2028      	movs	r0, #40	; 0x28
 8000272:	f000 ffaf 	bl	80011d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000276:	2028      	movs	r0, #40	; 0x28
 8000278:	f000 ffe0 	bl	800123c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800027c:	6973      	ldr	r3, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800027e:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000280:	433b      	orrs	r3, r7
 8000282:	6173      	str	r3, [r6, #20]
 8000284:	6973      	ldr	r3, [r6, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000286:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000288:	403b      	ands	r3, r7
 800028a:	9308      	str	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800028c:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800028e:	9b08      	ldr	r3, [sp, #32]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000290:	f000 ffa0 	bl	80011d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000294:	200c      	movs	r0, #12
 8000296:	f000 ffd1 	bl	800123c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800029a:	4622      	mov	r2, r4
 800029c:	4621      	mov	r1, r4
 800029e:	200d      	movs	r0, #13
 80002a0:	f000 ff98 	bl	80011d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002a4:	200d      	movs	r0, #13
 80002a6:	f000 ffc9 	bl	800123c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80002aa:	4622      	mov	r2, r4
 80002ac:	4621      	mov	r1, r4
 80002ae:	200f      	movs	r0, #15
 80002b0:	f000 ff90 	bl	80011d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80002b4:	200f      	movs	r0, #15
 80002b6:	f000 ffc1 	bl	800123c <HAL_NVIC_EnableIRQ>
  hspi1.Instance = SPI1;
 80002ba:	488b      	ldr	r0, [pc, #556]	; (80004e8 <main+0x344>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002bc:	4b8b      	ldr	r3, [pc, #556]	; (80004ec <main+0x348>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002be:	f44f 7800 	mov.w	r8, #512	; 0x200
  hspi1.Init.CRCPolynomial = 10;
 80002c2:	260a      	movs	r6, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002c4:	e9c0 3900 	strd	r3, r9, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002c8:	2308      	movs	r3, #8
  hspi1.Init.CRCPolynomial = 10;
 80002ca:	62c6      	str	r6, [r0, #44]	; 0x2c
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80002cc:	e9c0 8306 	strd	r8, r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002d0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002d4:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002d8:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002dc:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002de:	f001 fc70 	bl	8001bc2 <HAL_SPI_Init>
  huart2.Init.BaudRate = 115200;
 80002e2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80002e6:	4882      	ldr	r0, [pc, #520]	; (80004f0 <main+0x34c>)
  huart2.Init.BaudRate = 115200;
 80002e8:	4982      	ldr	r1, [pc, #520]	; (80004f4 <main+0x350>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80002ee:	e9c0 1300 	strd	r1, r3, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002f2:	230c      	movs	r3, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 80002f4:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f6:	e9c0 3405 	strd	r3, r4, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002fa:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002fc:	f002 f878 	bl	80023f0 <HAL_UART_Init>
  hspi2.Instance = SPI2;
 8000300:	487d      	ldr	r0, [pc, #500]	; (80004f8 <main+0x354>)
 8000302:	4b7e      	ldr	r3, [pc, #504]	; (80004fc <main+0x358>)
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000304:	e9c0 8406 	strd	r8, r4, [r0, #24]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000308:	e9c0 3900 	strd	r3, r9, [r0]
  hspi2.Init.CRCPolynomial = 10;
 800030c:	e9c0 460a 	strd	r4, r6, [r0, #40]	; 0x28
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000310:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000314:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000318:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800031c:	f001 fc51 	bl	8001bc2 <HAL_SPI_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000320:	2210      	movs	r2, #16
 8000322:	4621      	mov	r1, r4
 8000324:	a80f      	add	r0, sp, #60	; 0x3c
 8000326:	f002 f8d3 	bl	80024d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800032a:	221c      	movs	r2, #28
 800032c:	4621      	mov	r1, r4
 800032e:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000334:	f002 f8cc 	bl	80024d0 <memset>
  htim2.Instance = TIM2;
 8000338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033c:	4e70      	ldr	r6, [pc, #448]	; (8000500 <main+0x35c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033e:	f44f 5880 	mov.w	r8, #4096	; 0x1000
  htim2.Init.Prescaler = 1;
 8000342:	e9c6 3700 	strd	r3, r7, [r6]
  htim2.Init.Period = 1632;
 8000346:	f44f 63cc 	mov.w	r3, #1632	; 0x660
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800034a:	4630      	mov	r0, r6
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034c:	e9c6 3403 	strd	r3, r4, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000350:	60b4      	str	r4, [r6, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000352:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000354:	f001 fe92 	bl	800207c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000358:	a90f      	add	r1, sp, #60	; 0x3c
 800035a:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800035c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000360:	f001 ff58 	bl	8002214 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000364:	4630      	mov	r0, r6
 8000366:	f001 fea3 	bl	80020b0 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036a:	a90d      	add	r1, sp, #52	; 0x34
 800036c:	4630      	mov	r0, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800036e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000372:	f001 ffe3 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000376:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000378:	4622      	mov	r2, r4
 800037a:	4629      	mov	r1, r5
 800037c:	4630      	mov	r0, r6
  sConfigOC.Pulse = 0;
 800037e:	e9c5 3400 	strd	r3, r4, [r5]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000382:	60ac      	str	r4, [r5, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000384:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000386:	f001 fed9 	bl	800213c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 800038a:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 71;
 800038c:	2647      	movs	r6, #71	; 0x47
  HAL_TIM_MspPostInit(&htim2);
 800038e:	f000 fd1d 	bl	8000dcc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	2210      	movs	r2, #16
 8000394:	4621      	mov	r1, r4
 8000396:	4628      	mov	r0, r5
 8000398:	f002 f89a 	bl	80024d0 <memset>
  htim1.Instance = TIM1;
 800039c:	4f59      	ldr	r7, [pc, #356]	; (8000504 <main+0x360>)
  htim1.Init.Prescaler = 71;
 800039e:	4b5a      	ldr	r3, [pc, #360]	; (8000508 <main+0x364>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003a0:	4638      	mov	r0, r7
  htim1.Init.Prescaler = 71;
 80003a2:	e9c7 3600 	strd	r3, r6, [r7]
  htim1.Init.Period = 1000;
 80003a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	60bc      	str	r4, [r7, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ac:	e9c7 3403 	strd	r3, r4, [r7, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003b0:	e9c7 4405 	strd	r4, r4, [r7, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003b8:	f001 fe60 	bl	800207c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003bc:	4629      	mov	r1, r5
 80003be:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003c0:	f8c5 8000 	str.w	r8, [r5]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003c4:	f001 ff26 	bl	8002214 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003c8:	a90f      	add	r1, sp, #60	; 0x3c
 80003ca:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003cc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003d0:	f001 ffb4 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d4:	2210      	movs	r2, #16
 80003d6:	4621      	mov	r1, r4
 80003d8:	4628      	mov	r0, r5
 80003da:	f002 f879 	bl	80024d0 <memset>
  htim4.Instance = TIM4;
 80003de:	4f4b      	ldr	r7, [pc, #300]	; (800050c <main+0x368>)
 80003e0:	4b4b      	ldr	r3, [pc, #300]	; (8000510 <main+0x36c>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003e2:	4638      	mov	r0, r7
  htim4.Init.Prescaler = 71;
 80003e4:	e9c7 3600 	strd	r3, r6, [r7]
  htim4.Init.Period = 2000;
 80003e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ec:	60bc      	str	r4, [r7, #8]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	e9c7 3403 	strd	r3, r4, [r7, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f2:	61bc      	str	r4, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003f8:	f001 fe40 	bl	800207c <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003fc:	4629      	mov	r1, r5
 80003fe:	4638      	mov	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000400:	f8c5 8000 	str.w	r8, [r5]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000404:	f001 ff06 	bl	8002214 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000408:	a90f      	add	r1, sp, #60	; 0x3c
 800040a:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000410:	f001 ff94 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
  ST7735_Init();
 8000414:	f000 faf0 	bl	80009f8 <ST7735_Init>
  ST7735_DrawImage(0, 0, 128, 128, &ground);
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	4f3e      	ldr	r7, [pc, #248]	; (8000514 <main+0x370>)
 800041c:	461a      	mov	r2, r3
 800041e:	4621      	mov	r1, r4
 8000420:	9700      	str	r7, [sp, #0]
 8000422:	4620      	mov	r0, r4
 8000424:	f000 fb89 	bl	8000b3a <ST7735_DrawImage>
        num = (rand() % (upper - lower + 1)) + lower;
 8000428:	f002 f90e 	bl	8002648 <rand>
 800042c:	fb90 f3f6 	sdiv	r3, r0, r6
 8000430:	fb03 0016 	mls	r0, r3, r6, r0
  col_array[0] = printRandoms(30, 100);
 8000434:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8000524 <main+0x380>
        num = (rand() % (upper - lower + 1)) + lower;
 8000438:	301e      	adds	r0, #30
  col_array[0] = printRandoms(30, 100);
 800043a:	f8c8 0000 	str.w	r0, [r8]
        num = (rand() % (upper - lower + 1)) + lower;
 800043e:	f002 f903 	bl	8002648 <rand>
 8000442:	fb90 f3f6 	sdiv	r3, r0, r6
  col_pos[0] = 128;
 8000446:	2280      	movs	r2, #128	; 0x80
        num = (rand() % (upper - lower + 1)) + lower;
 8000448:	fb03 0016 	mls	r0, r3, r6, r0
  col_pos[0] = 128;
 800044c:	4b32      	ldr	r3, [pc, #200]	; (8000518 <main+0x374>)
        num = (rand() % (upper - lower + 1)) + lower;
 800044e:	301e      	adds	r0, #30
  col_array[1] = printRandoms(30, 100);
 8000450:	f8c8 0004 	str.w	r0, [r8, #4]
 8000454:	9704      	str	r7, [sp, #16]
  int j = 128;
 8000456:	4690      	mov	r8, r2
				  ptr[a*128 + b] = ground[col_pos[0] +a][b];
 8000458:	461f      	mov	r7, r3
 800045a:	461e      	mov	r6, r3
  col_pos[1] = 128;
 800045c:	e9c3 2200 	strd	r2, r2, [r3]
  col_pos[2] = 128;
 8000460:	609a      	str	r2, [r3, #8]
	  while(!game_over){
 8000462:	2c00      	cmp	r4, #0
 8000464:	d1fd      	bne.n	8000462 <main+0x2be>
	   ST7735_WriteString(0, 0, "Score:", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 8000466:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800046a:	4a2c      	ldr	r2, [pc, #176]	; (800051c <main+0x378>)
 800046c:	9402      	str	r4, [sp, #8]
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	6853      	ldr	r3, [r2, #4]
 8000472:	4621      	mov	r1, r4
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	6813      	ldr	r3, [r2, #0]
 8000478:	4620      	mov	r0, r4
 800047a:	4a29      	ldr	r2, [pc, #164]	; (8000520 <main+0x37c>)
 800047c:	f000 fae4 	bl	8000a48 <ST7735_WriteString>
		  ptr = (uint16_t *) calloc(1280, sizeof(uint16_t));
 8000480:	2102      	movs	r1, #2
 8000482:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000486:	f001 ffe1 	bl	800244c <calloc>
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	9b04      	ldr	r3, [sp, #16]
 800048e:	9005      	str	r0, [sp, #20]
 8000490:	4601      	mov	r1, r0
 8000492:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8000496:	f500 6020 	add.w	r0, r0, #2560	; 0xa00
			  for(int b = 0; b < 128; b++){
 800049a:	2300      	movs	r3, #0
				  ptr[a*128 + b] = ground[col_pos[0] +a][b];
 800049c:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 80004a0:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
			  for(int b = 0; b < 128; b++){
 80004a4:	3301      	adds	r3, #1
 80004a6:	2b80      	cmp	r3, #128	; 0x80
 80004a8:	d1f8      	bne.n	800049c <main+0x2f8>
 80004aa:	f501 7180 	add.w	r1, r1, #256	; 0x100
		  for(int a = 0; a < 10; a++){
 80004ae:	4281      	cmp	r1, r0
 80004b0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80004b4:	d1f1      	bne.n	800049a <main+0x2f6>
		  ptr1 = (uint16_t *) calloc(1280, sizeof(uint16_t));
 80004b6:	2102      	movs	r1, #2
 80004b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80004bc:	f001 ffc6 	bl	800244c <calloc>
 80004c0:	6872      	ldr	r2, [r6, #4]
 80004c2:	9b04      	ldr	r3, [sp, #16]
 80004c4:	9006      	str	r0, [sp, #24]
 80004c6:	4601      	mov	r1, r0
 80004c8:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 80004cc:	f500 6020 	add.w	r0, r0, #2560	; 0xa00
					  for(int b = 0; b < 128; b++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	e029      	b.n	8000528 <main+0x384>
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	40010800 	.word	0x40010800
 80004e0:	10110000 	.word	0x10110000
 80004e4:	40011000 	.word	0x40011000
 80004e8:	20000198 	.word	0x20000198
 80004ec:	40013000 	.word	0x40013000
 80004f0:	20000230 	.word	0x20000230
 80004f4:	40004400 	.word	0x40004400
 80004f8:	200000a8 	.word	0x200000a8
 80004fc:	40003800 	.word	0x40003800
 8000500:	200001f0 	.word	0x200001f0
 8000504:	20000158 	.word	0x20000158
 8000508:	40012c00 	.word	0x40012c00
 800050c:	20000100 	.word	0x20000100
 8000510:	40000800 	.word	0x40000800
 8000514:	0800361a 	.word	0x0800361a
 8000518:	2000014c 	.word	0x2000014c
 800051c:	20000000 	.word	0x20000000
 8000520:	0800b61a 	.word	0x0800b61a
 8000524:	20000140 	.word	0x20000140
						  ptr1[a*128 + b] = ground[col_pos[1] +a][b];
 8000528:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
 800052c:	f821 c013 	strh.w	ip, [r1, r3, lsl #1]
					  for(int b = 0; b < 128; b++){
 8000530:	3301      	adds	r3, #1
 8000532:	2b80      	cmp	r3, #128	; 0x80
 8000534:	d1f8      	bne.n	8000528 <main+0x384>
 8000536:	f501 7180 	add.w	r1, r1, #256	; 0x100
				  for(int a = 0; a < 10; a++){
 800053a:	4281      	cmp	r1, r0
 800053c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8000540:	d1c6      	bne.n	80004d0 <main+0x32c>
				  ptr2 = (uint16_t *) calloc(1280, sizeof(uint16_t));
 8000542:	2102      	movs	r1, #2
 8000544:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000548:	f001 ff80 	bl	800244c <calloc>
 800054c:	9a04      	ldr	r2, [sp, #16]
 800054e:	68b3      	ldr	r3, [r6, #8]
 8000550:	9007      	str	r0, [sp, #28]
 8000552:	eb02 2303 	add.w	r3, r2, r3, lsl #8
 8000556:	4602      	mov	r2, r0
 8000558:	f500 6120 	add.w	r1, r0, #2560	; 0xa00
				 			  for(int b = 0; b < 128; b++){
 800055c:	f04f 0900 	mov.w	r9, #0
				 				  ptr2[a*128 + b] = ground[col_pos[2] +a][b];
 8000560:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
 8000564:	f822 0019 	strh.w	r0, [r2, r9, lsl #1]
				 			  for(int b = 0; b < 128; b++){
 8000568:	f109 0901 	add.w	r9, r9, #1
 800056c:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8000570:	d1f6      	bne.n	8000560 <main+0x3bc>
 8000572:	f502 7280 	add.w	r2, r2, #256	; 0x100
				 		  for(int a = 0; a < 10; a++){
 8000576:	4291      	cmp	r1, r2
 8000578:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800057c:	d1ee      	bne.n	800055c <main+0x3b8>
 800057e:	4629      	mov	r1, r5
			  buffer[a][b] = ground[a][b + i];
 8000580:	f8df a2bc 	ldr.w	sl, [pc, #700]	; 8000840 <main+0x69c>
 8000584:	9a04      	ldr	r2, [sp, #16]
 8000586:	f8da 3000 	ldr.w	r3, [sl]
 800058a:	f20d 2c0e 	addw	ip, sp, #526	; 0x20e
 800058e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
		  for(int b = 0; b < 15; b++){
 8000592:	2200      	movs	r2, #0
			  buffer[a][b] = ground[a][b + i];
 8000594:	f830 e012 	ldrh.w	lr, [r0, r2, lsl #1]
 8000598:	f821 e012 	strh.w	lr, [r1, r2, lsl #1]
		  for(int b = 0; b < 15; b++){
 800059c:	3201      	adds	r2, #1
 800059e:	2a0f      	cmp	r2, #15
 80005a0:	d1f8      	bne.n	8000594 <main+0x3f0>
 80005a2:	311e      	adds	r1, #30
	  for(int a = 0; a < 15; a++){
 80005a4:	4561      	cmp	r1, ip
 80005a6:	f500 7080 	add.w	r0, r0, #256	; 0x100
 80005aa:	d1f2      	bne.n	8000592 <main+0x3ee>
      if(i < 128){
 80005ac:	2b7f      	cmp	r3, #127	; 0x7f
 80005ae:	f300 8110 	bgt.w	80007d2 <main+0x62e>
    	  i+=2;
 80005b2:	3302      	adds	r3, #2
 80005b4:	f8ca 3000 	str.w	r3, [sl]
      if(col_pos[0] > 0){
 80005b8:	6833      	ldr	r3, [r6, #0]
 80005ba:	f8df b288 	ldr.w	fp, [pc, #648]	; 8000844 <main+0x6a0>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f340 8111 	ble.w	80007e6 <main+0x642>
    	  col_pos[0]--;
 80005c4:	3b01      	subs	r3, #1
 80005c6:	6033      	str	r3, [r6, #0]
      if(col_pos[1] < 0 ){
 80005c8:	6873      	ldr	r3, [r6, #4]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	f280 811b 	bge.w	8000806 <main+0x662>
    	  col_pos[1] = 128;
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	6073      	str	r3, [r6, #4]
        num = (rand() % (upper - lower + 1)) + lower;
 80005d4:	f002 f838 	bl	8002648 <rand>
 80005d8:	2365      	movs	r3, #101	; 0x65
 80005da:	fb90 f2f3 	sdiv	r2, r0, r3
 80005de:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[1] = printRandoms(0, 100);
 80005e2:	f8cb 0004 	str.w	r0, [fp, #4]
      if(col_pos[2] < 0){
 80005e6:	68b3      	ldr	r3, [r6, #8]
 80005e8:	f8df b258 	ldr.w	fp, [pc, #600]	; 8000844 <main+0x6a0>
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	f280 8115 	bge.w	800081c <main+0x678>
    	  col_pos[2] = 128;
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	60b3      	str	r3, [r6, #8]
        num = (rand() % (upper - lower + 1)) + lower;
 80005f6:	f002 f827 	bl	8002648 <rand>
 80005fa:	2365      	movs	r3, #101	; 0x65
 80005fc:	fb90 f2f3 	sdiv	r2, r0, r3
 8000600:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[2] = printRandoms(0, 100);
 8000604:	f8cb 0008 	str.w	r0, [fp, #8]
      if(j > 0){
 8000608:	f1b8 0f00 	cmp.w	r8, #0
 800060c:	f340 8111 	ble.w	8000832 <main+0x68e>
    	  j--;
 8000610:	f108 39ff 	add.w	r9, r8, #4294967295
          if((col_pos[0] < 10) && (col_pos[0] > 0)){
 8000614:	6833      	ldr	r3, [r6, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	2b08      	cmp	r3, #8
 800061a:	d819      	bhi.n	8000650 <main+0x4ac>
 800061c:	f8da 2000 	ldr.w	r2, [sl]
        	  if( (col_array[0] < i) || (col_array[0] - 20 > i )){
 8000620:	f8db 3000 	ldr.w	r3, [fp]
 8000624:	4293      	cmp	r3, r2
 8000626:	db02      	blt.n	800062e <main+0x48a>
 8000628:	3b14      	subs	r3, #20
 800062a:	4293      	cmp	r3, r2
 800062c:	dd10      	ble.n	8000650 <main+0x4ac>
        		  ST7735_DrawImage(0, 0, 128, 128, &ground);
 800062e:	9b04      	ldr	r3, [sp, #16]
 8000630:	2100      	movs	r1, #0
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	4608      	mov	r0, r1
 8000638:	461a      	mov	r2, r3
 800063a:	f000 fa7e 	bl	8000b3a <ST7735_DrawImage>
        	      ST7735_DrawImage(50, 0, 33, 128, &over);
 800063e:	4b7e      	ldr	r3, [pc, #504]	; (8000838 <main+0x694>)
 8000640:	2221      	movs	r2, #33	; 0x21
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2100      	movs	r1, #0
 8000646:	2380      	movs	r3, #128	; 0x80
 8000648:	2032      	movs	r0, #50	; 0x32
 800064a:	f000 fa76 	bl	8000b3a <ST7735_DrawImage>
        	      game_over = 1;
 800064e:	2401      	movs	r4, #1
          if(col_pos[1] < 10){
 8000650:	6873      	ldr	r3, [r6, #4]
 8000652:	2b09      	cmp	r3, #9
 8000654:	dc19      	bgt.n	800068a <main+0x4e6>
 8000656:	f8da 2000 	ldr.w	r2, [sl]
             	  if( (col_array[1] < i) || (col_array[1] - 20 > i )){
 800065a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800065e:	4293      	cmp	r3, r2
 8000660:	db02      	blt.n	8000668 <main+0x4c4>
 8000662:	3b14      	subs	r3, #20
 8000664:	4293      	cmp	r3, r2
 8000666:	dd10      	ble.n	800068a <main+0x4e6>
             		 ST7735_DrawImage(0, 0, 128, 128, &ground);
 8000668:	9b04      	ldr	r3, [sp, #16]
 800066a:	2100      	movs	r1, #0
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	4608      	mov	r0, r1
 8000672:	461a      	mov	r2, r3
 8000674:	f000 fa61 	bl	8000b3a <ST7735_DrawImage>
             	     ST7735_DrawImage(50, 0, 33, 128, &over);
 8000678:	4b6f      	ldr	r3, [pc, #444]	; (8000838 <main+0x694>)
 800067a:	2221      	movs	r2, #33	; 0x21
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2100      	movs	r1, #0
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	2032      	movs	r0, #50	; 0x32
 8000684:	f000 fa59 	bl	8000b3a <ST7735_DrawImage>
             	    game_over = 1;
 8000688:	2401      	movs	r4, #1
          if(col_pos[2] < 10){
 800068a:	68b3      	ldr	r3, [r6, #8]
 800068c:	2b09      	cmp	r3, #9
 800068e:	dc19      	bgt.n	80006c4 <main+0x520>
 8000690:	f8da 2000 	ldr.w	r2, [sl]
             	  if( (col_array[2] < i) || (col_array[2] - 20 > i )){
 8000694:	f8db 3008 	ldr.w	r3, [fp, #8]
 8000698:	4293      	cmp	r3, r2
 800069a:	db02      	blt.n	80006a2 <main+0x4fe>
 800069c:	3b14      	subs	r3, #20
 800069e:	4293      	cmp	r3, r2
 80006a0:	dd10      	ble.n	80006c4 <main+0x520>
             		 ST7735_DrawImage(0, 0, 128, 128, &ground);
 80006a2:	9b04      	ldr	r3, [sp, #16]
 80006a4:	2100      	movs	r1, #0
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	4608      	mov	r0, r1
 80006ac:	461a      	mov	r2, r3
 80006ae:	f000 fa44 	bl	8000b3a <ST7735_DrawImage>
             	     ST7735_DrawImage(50, 0, 33, 128, &over);
 80006b2:	4b61      	ldr	r3, [pc, #388]	; (8000838 <main+0x694>)
 80006b4:	2221      	movs	r2, #33	; 0x21
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2100      	movs	r1, #0
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	2032      	movs	r0, #50	; 0x32
 80006be:	f000 fa3c 	bl	8000b3a <ST7735_DrawImage>
             	    game_over = 1;
 80006c2:	2401      	movs	r4, #1
	  ST7735_DrawImage(i, 0, 15, 15, &bird);
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <main+0x698>)
	  ST7735_FillRectangle(0, col_pos[0], col_array[0] , 10, ST7735_GREEN);
 80006c6:	f44f 68fc 	mov.w	r8, #2016	; 0x7e0
	  ST7735_DrawImage(i, 0, 15, 15, &bird);
 80006ca:	9300      	str	r3, [sp, #0]
 80006cc:	230f      	movs	r3, #15
	  ST7735_FillRectangle(0, col_pos[0], col_array[0] , 10, ST7735_GREEN);
 80006ce:	f8df b174 	ldr.w	fp, [pc, #372]	; 8000844 <main+0x6a0>
	  ST7735_DrawImage(i, 0, 15, 15, &bird);
 80006d2:	461a      	mov	r2, r3
 80006d4:	f8ba 0000 	ldrh.w	r0, [sl]
 80006d8:	2100      	movs	r1, #0
 80006da:	f000 fa2e 	bl	8000b3a <ST7735_DrawImage>
	  ST7735_FillRectangle(0, col_pos[0], col_array[0] , 10, ST7735_GREEN);
 80006de:	8839      	ldrh	r1, [r7, #0]
 80006e0:	f8bb 2000 	ldrh.w	r2, [fp]
 80006e4:	230a      	movs	r3, #10
 80006e6:	2000      	movs	r0, #0
 80006e8:	f8cd 8000 	str.w	r8, [sp]
 80006ec:	f000 fa18 	bl	8000b20 <ST7735_FillRectangle>
	  ST7735_FillRectangle(col_array[0] + 20,col_pos[0], 88 - col_array[0] , 10, ST7735_GREEN);
 80006f0:	f8bb 0000 	ldrh.w	r0, [fp]
 80006f4:	8839      	ldrh	r1, [r7, #0]
 80006f6:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 80006fa:	3014      	adds	r0, #20
 80006fc:	f8cd 8000 	str.w	r8, [sp]
 8000700:	230a      	movs	r3, #10
 8000702:	b292      	uxth	r2, r2
 8000704:	b280      	uxth	r0, r0
 8000706:	f000 fa0b 	bl	8000b20 <ST7735_FillRectangle>
	  if(col_pos[1] < 128){
 800070a:	6879      	ldr	r1, [r7, #4]
 800070c:	297f      	cmp	r1, #127	; 0x7f
 800070e:	dc15      	bgt.n	800073c <main+0x598>
		  ST7735_FillRectangle(0, col_pos[1], col_array[1] , 10, ST7735_GREEN);
 8000710:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8000714:	230a      	movs	r3, #10
 8000716:	b289      	uxth	r1, r1
 8000718:	2000      	movs	r0, #0
 800071a:	f8cd 8000 	str.w	r8, [sp]
 800071e:	f000 f9ff 	bl	8000b20 <ST7735_FillRectangle>
		  ST7735_FillRectangle(col_array[1] + 20,col_pos[1], 88 - col_array[1] , 10, ST7735_GREEN);
 8000722:	f8bb 0004 	ldrh.w	r0, [fp, #4]
 8000726:	88b9      	ldrh	r1, [r7, #4]
 8000728:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 800072c:	3014      	adds	r0, #20
 800072e:	f8cd 8000 	str.w	r8, [sp]
 8000732:	230a      	movs	r3, #10
 8000734:	b292      	uxth	r2, r2
 8000736:	b280      	uxth	r0, r0
 8000738:	f000 f9f2 	bl	8000b20 <ST7735_FillRectangle>
	  if(col_pos[2] < 128){
 800073c:	68b9      	ldr	r1, [r7, #8]
 800073e:	297f      	cmp	r1, #127	; 0x7f
 8000740:	dc19      	bgt.n	8000776 <main+0x5d2>
	 		  ST7735_FillRectangle(0, col_pos[2], col_array[2] , 10, ST7735_GREEN);
 8000742:	f44f 68fc 	mov.w	r8, #2016	; 0x7e0
 8000746:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8000844 <main+0x6a0>
 800074a:	230a      	movs	r3, #10
 800074c:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8000750:	b289      	uxth	r1, r1
 8000752:	2000      	movs	r0, #0
 8000754:	f8cd 8000 	str.w	r8, [sp]
 8000758:	f000 f9e2 	bl	8000b20 <ST7735_FillRectangle>
	 		  ST7735_FillRectangle(col_array[2] + 20,col_pos[2], 88 - col_array[2] , 10, ST7735_GREEN);
 800075c:	f8bb 0008 	ldrh.w	r0, [fp, #8]
 8000760:	8939      	ldrh	r1, [r7, #8]
 8000762:	f1c0 0258 	rsb	r2, r0, #88	; 0x58
 8000766:	3014      	adds	r0, #20
 8000768:	f8cd 8000 	str.w	r8, [sp]
 800076c:	230a      	movs	r3, #10
 800076e:	b292      	uxth	r2, r2
 8000770:	b280      	uxth	r0, r0
 8000772:	f000 f9d5 	bl	8000b20 <ST7735_FillRectangle>
	  HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f000 fd08 	bl	800118c <HAL_Delay>
	  ST7735_DrawImage(i, 0, 15, 15, &buffer);
 800077c:	230f      	movs	r3, #15
 800077e:	f8ba 0000 	ldrh.w	r0, [sl]
 8000782:	461a      	mov	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	9500      	str	r5, [sp, #0]
 8000788:	f000 f9d7 	bl	8000b3a <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[0], 128, 10, ptr);
 800078c:	9b05      	ldr	r3, [sp, #20]
 800078e:	8831      	ldrh	r1, [r6, #0]
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2000      	movs	r0, #0
 8000796:	230a      	movs	r3, #10
 8000798:	f000 f9cf 	bl	8000b3a <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[1], 128, 10, ptr1);
 800079c:	9b06      	ldr	r3, [sp, #24]
 800079e:	88b1      	ldrh	r1, [r6, #4]
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	2000      	movs	r0, #0
 80007a6:	230a      	movs	r3, #10
 80007a8:	f000 f9c7 	bl	8000b3a <ST7735_DrawImage>
	  ST7735_DrawImage(0, col_pos[2], 128, 10, ptr2);
 80007ac:	9b07      	ldr	r3, [sp, #28]
 80007ae:	8931      	ldrh	r1, [r6, #8]
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2000      	movs	r0, #0
 80007b6:	230a      	movs	r3, #10
 80007b8:	f000 f9bf 	bl	8000b3a <ST7735_DrawImage>
	  free(ptr);
 80007bc:	9805      	ldr	r0, [sp, #20]
 80007be:	f001 fe7f 	bl	80024c0 <free>
	  free(ptr1);
 80007c2:	9806      	ldr	r0, [sp, #24]
 80007c4:	f001 fe7c 	bl	80024c0 <free>
	  free(ptr2);
 80007c8:	9807      	ldr	r0, [sp, #28]
 80007ca:	f001 fe79 	bl	80024c0 <free>
 80007ce:	46c8      	mov	r8, r9
 80007d0:	e647      	b.n	8000462 <main+0x2be>
    	  ST7735_DrawImage(50, 0, 33, 128, &over);
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <main+0x694>)
 80007d4:	2221      	movs	r2, #33	; 0x21
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2100      	movs	r1, #0
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	2032      	movs	r0, #50	; 0x32
 80007de:	f000 f9ac 	bl	8000b3a <ST7735_DrawImage>
    	  game_over = 1;
 80007e2:	2401      	movs	r4, #1
 80007e4:	e6e8      	b.n	80005b8 <main+0x414>
    	  col_pos[0] = 128;
 80007e6:	f04f 0880 	mov.w	r8, #128	; 0x80
        num = (rand() % (upper - lower + 1)) + lower;
 80007ea:	f001 ff2d 	bl	8002648 <rand>
    	  col_pos[0] = 128;
 80007ee:	f8c6 8000 	str.w	r8, [r6]
        num = (rand() % (upper - lower + 1)) + lower;
 80007f2:	f001 ff29 	bl	8002648 <rand>
 80007f6:	2365      	movs	r3, #101	; 0x65
 80007f8:	fb90 f2f3 	sdiv	r2, r0, r3
 80007fc:	fb02 0013 	mls	r0, r2, r3, r0
    	  col_array[0] = printRandoms(0, 100);
 8000800:	f8cb 0000 	str.w	r0, [fp]
 8000804:	e6e0      	b.n	80005c8 <main+0x424>
    	  if(col_pos[1] != 128){
 8000806:	2b80      	cmp	r3, #128	; 0x80
 8000808:	d002      	beq.n	8000810 <main+0x66c>
     	     col_pos[1] --;
 800080a:	3b01      	subs	r3, #1
            	 col_pos[1] --;
 800080c:	6073      	str	r3, [r6, #4]
 800080e:	e6ea      	b.n	80005e6 <main+0x442>
             if(col_pos[0] < 88){
 8000810:	6833      	ldr	r3, [r6, #0]
 8000812:	2b57      	cmp	r3, #87	; 0x57
 8000814:	f73f aee7 	bgt.w	80005e6 <main+0x442>
            	 col_pos[1] --;
 8000818:	237f      	movs	r3, #127	; 0x7f
 800081a:	e7f7      	b.n	800080c <main+0x668>
          	  if(col_pos[2] != 128){
 800081c:	2b80      	cmp	r3, #128	; 0x80
 800081e:	d002      	beq.n	8000826 <main+0x682>
          		  col_pos[2] --;
 8000820:	3b01      	subs	r3, #1
          	         col_pos[2] --;
 8000822:	60b3      	str	r3, [r6, #8]
 8000824:	e6f0      	b.n	8000608 <main+0x464>
          	      if(col_pos[1] < 88){
 8000826:	6873      	ldr	r3, [r6, #4]
 8000828:	2b57      	cmp	r3, #87	; 0x57
 800082a:	f73f aeed 	bgt.w	8000608 <main+0x464>
          	         col_pos[2] --;
 800082e:	237f      	movs	r3, #127	; 0x7f
 8000830:	e7f7      	b.n	8000822 <main+0x67e>
        num = (rand() % (upper - lower + 1)) + lower;
 8000832:	f001 ff09 	bl	8002648 <rand>
 8000836:	e6ed      	b.n	8000614 <main+0x470>
 8000838:	0800b622 	.word	0x0800b622
 800083c:	08003458 	.word	0x08003458
 8000840:	20000094 	.word	0x20000094
 8000844:	20000140 	.word	0x20000140

08000848 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000848:	4770      	bx	lr
	...

0800084c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000852:	4801      	ldr	r0, [pc, #4]	; (8000858 <ST7735_Select+0xc>)
 8000854:	f000 bec0 	b.w	80015d8 <HAL_GPIO_WritePin>
 8000858:	40010800 	.word	0x40010800

0800085c <ST7735_WriteCommand>:
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
    HAL_Delay(5);
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
}

static void ST7735_WriteCommand(uint8_t cmd) {
 800085c:	b513      	push	{r0, r1, r4, lr}
 800085e:	ac02      	add	r4, sp, #8
 8000860:	f804 0d01 	strb.w	r0, [r4, #-1]!
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <ST7735_WriteCommand+0x28>)
 800086c:	f000 feb4 	bl	80015d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2201      	movs	r2, #1
 8000876:	4621      	mov	r1, r4
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <ST7735_WriteCommand+0x2c>)
 800087a:	f001 f9dd 	bl	8001c38 <HAL_SPI_Transmit>
}
 800087e:	b002      	add	sp, #8
 8000880:	bd10      	pop	{r4, pc}
 8000882:	bf00      	nop
 8000884:	40010800 	.word	0x40010800
 8000888:	200000a8 	.word	0x200000a8

0800088c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	4604      	mov	r4, r0
 8000890:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <ST7735_WriteData+0x24>)
 800089a:	f000 fe9d 	bl	80015d8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800089e:	b2aa      	uxth	r2, r5
 80008a0:	4621      	mov	r1, r4
}
 80008a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	4802      	ldr	r0, [pc, #8]	; (80008b4 <ST7735_WriteData+0x28>)
 80008ac:	f001 b9c4 	b.w	8001c38 <HAL_SPI_Transmit>
 80008b0:	40010800 	.word	0x40010800
 80008b4:	200000a8 	.word	0x200000a8

080008b8 <ST7735_ExecuteCommandList>:
static void ST7735_WriteData_16bit(uint8_t* buff, size_t buff_size) {
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
}

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80008b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80008ba:	7805      	ldrb	r5, [r0, #0]
 80008bc:	1c46      	adds	r6, r0, #1
    while(numCommands--) {
 80008be:	3d01      	subs	r5, #1
 80008c0:	b2ed      	uxtb	r5, r5
 80008c2:	2dff      	cmp	r5, #255	; 0xff
 80008c4:	d100      	bne.n	80008c8 <ST7735_ExecuteCommandList+0x10>
            ms = *addr++;
            if(ms == 255) ms = 500;
            HAL_Delay(ms);
        }
    }
}
 80008c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ST7735_WriteCommand(cmd);
 80008c8:	4634      	mov	r4, r6
 80008ca:	f814 0b02 	ldrb.w	r0, [r4], #2
 80008ce:	f7ff ffc5 	bl	800085c <ST7735_WriteCommand>
        numArgs = *addr++;
 80008d2:	7876      	ldrb	r6, [r6, #1]
        if(numArgs) {
 80008d4:	f016 077f 	ands.w	r7, r6, #127	; 0x7f
 80008d8:	d004      	beq.n	80008e4 <ST7735_ExecuteCommandList+0x2c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80008da:	4620      	mov	r0, r4
 80008dc:	4639      	mov	r1, r7
 80008de:	f7ff ffd5 	bl	800088c <ST7735_WriteData>
            addr += numArgs;
 80008e2:	443c      	add	r4, r7
        if(ms) {
 80008e4:	0633      	lsls	r3, r6, #24
 80008e6:	d508      	bpl.n	80008fa <ST7735_ExecuteCommandList+0x42>
            ms = *addr++;
 80008e8:	7820      	ldrb	r0, [r4, #0]
 80008ea:	1c66      	adds	r6, r4, #1
            if(ms == 255) ms = 500;
 80008ec:	28ff      	cmp	r0, #255	; 0xff
            HAL_Delay(ms);
 80008ee:	bf08      	it	eq
 80008f0:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80008f4:	f000 fc4a 	bl	800118c <HAL_Delay>
            ms = *addr++;
 80008f8:	4634      	mov	r4, r6
 80008fa:	4626      	mov	r6, r4
 80008fc:	e7df      	b.n	80008be <ST7735_ExecuteCommandList+0x6>

080008fe <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80008fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000900:	4607      	mov	r7, r0
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000902:	202a      	movs	r0, #42	; 0x2a
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000904:	4616      	mov	r6, r2
 8000906:	460d      	mov	r5, r1
 8000908:	461c      	mov	r4, r3
    ST7735_WriteCommand(ST7735_CASET);
 800090a:	f7ff ffa7 	bl	800085c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
    ST7735_WriteData(data, sizeof(data));
 800090e:	2104      	movs	r1, #4
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000910:	2300      	movs	r3, #0
    ST7735_WriteData(data, sizeof(data));
 8000912:	eb0d 0001 	add.w	r0, sp, r1
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000916:	3702      	adds	r7, #2
 8000918:	3602      	adds	r6, #2
 800091a:	f88d 3004 	strb.w	r3, [sp, #4]
 800091e:	f88d 3006 	strb.w	r3, [sp, #6]
 8000922:	f88d 7005 	strb.w	r7, [sp, #5]
 8000926:	f88d 6007 	strb.w	r6, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 800092a:	f7ff ffaf 	bl	800088c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800092e:	202b      	movs	r0, #43	; 0x2b
 8000930:	f7ff ff94 	bl	800085c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
    data[3] = y1 + ST7735_YSTART;
    ST7735_WriteData(data, sizeof(data));
 8000934:	2104      	movs	r1, #4
    data[1] = y0 + ST7735_YSTART;
 8000936:	3503      	adds	r5, #3
    ST7735_WriteData(data, sizeof(data));
 8000938:	eb0d 0001 	add.w	r0, sp, r1
    data[3] = y1 + ST7735_YSTART;
 800093c:	3403      	adds	r4, #3
    data[1] = y0 + ST7735_YSTART;
 800093e:	f88d 5005 	strb.w	r5, [sp, #5]
    data[3] = y1 + ST7735_YSTART;
 8000942:	f88d 4007 	strb.w	r4, [sp, #7]
    ST7735_WriteData(data, sizeof(data));
 8000946:	f7ff ffa1 	bl	800088c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800094a:	202c      	movs	r0, #44	; 0x2c
 800094c:	f7ff ff86 	bl	800085c <ST7735_WriteCommand>
}
 8000950:	b003      	add	sp, #12
 8000952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000954 <ST7735_Unselect>:
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800095a:	4801      	ldr	r0, [pc, #4]	; (8000960 <ST7735_Unselect+0xc>)
 800095c:	f000 be3c 	b.w	80015d8 <HAL_GPIO_WritePin>
 8000960:	40010800 	.word	0x40010800

08000964 <ST7735_FillRectangle.part.1>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000968:	461c      	mov	r4, r3
 800096a:	4615      	mov	r5, r2
 800096c:	460f      	mov	r7, r1
 800096e:	4606      	mov	r6, r0
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000970:	1883      	adds	r3, r0, r2
 8000972:	2b80      	cmp	r3, #128	; 0x80
 8000974:	bfc8      	it	gt
 8000976:	f1c0 0580 	rsbgt	r5, r0, #128	; 0x80
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800097a:	eb01 0304 	add.w	r3, r1, r4
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800097e:	bfc8      	it	gt
 8000980:	b2ad      	uxthgt	r5, r5
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000982:	2b80      	cmp	r3, #128	; 0x80
 8000984:	bfc4      	itt	gt
 8000986:	f1c1 0480 	rsbgt	r4, r1, #128	; 0x80
 800098a:	b2a4      	uxthgt	r4, r4
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800098c:	f8bd 8020 	ldrh.w	r8, [sp, #32]

    ST7735_Select();
 8000990:	f7ff ff5c 	bl	800084c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000994:	b2f9      	uxtb	r1, r7
 8000996:	b2f0      	uxtb	r0, r6
 8000998:	1e4b      	subs	r3, r1, #1
 800099a:	1e42      	subs	r2, r0, #1
 800099c:	4423      	add	r3, r4
 800099e:	442a      	add	r2, r5
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	f7ff ffab 	bl	80008fe <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80009a8:	ea4f 2318 	mov.w	r3, r8, lsr #8
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b2:	480f      	ldr	r0, [pc, #60]	; (80009f0 <ST7735_FillRectangle.part.1+0x8c>)
    uint8_t data[] = { color >> 8, color & 0xFF };
 80009b4:	f88d 3004 	strb.w	r3, [sp, #4]
 80009b8:	f88d 8005 	strb.w	r8, [sp, #5]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80009bc:	f000 fe0c 	bl	80015d8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
        for(x = w; x > 0; x--) {
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80009c0:	4f0c      	ldr	r7, [pc, #48]	; (80009f4 <ST7735_FillRectangle.part.1+0x90>)
    for(y = h; y > 0; y--) {
 80009c2:	b994      	cbnz	r4, 80009ea <ST7735_FillRectangle.part.1+0x86>
        }
    }

    ST7735_Unselect();
 80009c4:	f7ff ffc6 	bl	8000954 <ST7735_Unselect>
}
 80009c8:	b002      	add	sp, #8
 80009ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	2202      	movs	r2, #2
 80009d4:	a901      	add	r1, sp, #4
 80009d6:	4638      	mov	r0, r7
 80009d8:	f001 f92e 	bl	8001c38 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80009dc:	3e01      	subs	r6, #1
 80009de:	b2b6      	uxth	r6, r6
 80009e0:	2e00      	cmp	r6, #0
 80009e2:	d1f4      	bne.n	80009ce <ST7735_FillRectangle.part.1+0x6a>
    for(y = h; y > 0; y--) {
 80009e4:	3c01      	subs	r4, #1
 80009e6:	b2a4      	uxth	r4, r4
 80009e8:	e7eb      	b.n	80009c2 <ST7735_FillRectangle.part.1+0x5e>
        for(x = w; x > 0; x--) {
 80009ea:	462e      	mov	r6, r5
 80009ec:	e7f8      	b.n	80009e0 <ST7735_FillRectangle.part.1+0x7c>
 80009ee:	bf00      	nop
 80009f0:	40010800 	.word	0x40010800
 80009f4:	200000a8 	.word	0x200000a8

080009f8 <ST7735_Init>:
void ST7735_Init() {
 80009f8:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80009fa:	4c0f      	ldr	r4, [pc, #60]	; (8000a38 <ST7735_Init+0x40>)
    ST7735_Select();
 80009fc:	f7ff ff26 	bl	800084c <ST7735_Select>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a06:	4620      	mov	r0, r4
 8000a08:	f000 fde6 	bl	80015d8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a0c:	2005      	movs	r0, #5
 8000a0e:	f000 fbbd 	bl	800118c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f000 fddd 	bl	80015d8 <HAL_GPIO_WritePin>
    ST7735_ExecuteCommandList(init_cmds1);
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <ST7735_Init+0x44>)
 8000a20:	f7ff ff4a 	bl	80008b8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <ST7735_Init+0x48>)
 8000a26:	f7ff ff47 	bl	80008b8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <ST7735_Init+0x4c>)
 8000a2c:	f7ff ff44 	bl	80008b8 <ST7735_ExecuteCommandList>
}
 8000a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ST7735_Unselect();
 8000a34:	f7ff bf8e 	b.w	8000954 <ST7735_Unselect>
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	0800d722 	.word	0x0800d722
 8000a40:	0800d75d 	.word	0x0800d75d
 8000a44:	0800d76a 	.word	0x0800d76a

08000a48 <ST7735_WriteString>:
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a48:	b082      	sub	sp, #8
 8000a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4e:	4617      	mov	r7, r2
 8000a50:	b089      	sub	sp, #36	; 0x24
 8000a52:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
 8000a56:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 8000a5a:	9313      	str	r3, [sp, #76]	; 0x4c
 8000a5c:	fa5f f883 	uxtb.w	r8, r3
 8000a60:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8000a64:	4604      	mov	r4, r0
 8000a66:	460d      	mov	r5, r1
    ST7735_Select();
 8000a68:	f7ff fef0 	bl	800084c <ST7735_Select>
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000a6c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8000a70:	9305      	str	r3, [sp, #20]
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a72:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8000a76:	9304      	str	r3, [sp, #16]
 8000a78:	9701      	str	r7, [sp, #4]
    while(*str) {
 8000a7a:	9b01      	ldr	r3, [sp, #4]
 8000a7c:	f813 7b01 	ldrb.w	r7, [r3], #1
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	b937      	cbnz	r7, 8000a92 <ST7735_WriteString+0x4a>
    ST7735_Unselect();
 8000a84:	f7ff ff66 	bl	8000954 <ST7735_Unselect>
}
 8000a88:	b009      	add	sp, #36	; 0x24
 8000a8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a8e:	b002      	add	sp, #8
 8000a90:	4770      	bx	lr
        if(x + font.width >= ST7735_WIDTH) {
 8000a92:	eb04 0308 	add.w	r3, r4, r8
 8000a96:	2b7f      	cmp	r3, #127	; 0x7f
 8000a98:	dd08      	ble.n	8000aac <ST7735_WriteString+0x64>
            y += font.height;
 8000a9a:	4435      	add	r5, r6
 8000a9c:	b2ad      	uxth	r5, r5
            if(y + font.height >= ST7735_HEIGHT) {
 8000a9e:	19ab      	adds	r3, r5, r6
 8000aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa2:	dcef      	bgt.n	8000a84 <ST7735_WriteString+0x3c>
            if(*str == ' ') {
 8000aa4:	2f20      	cmp	r7, #32
            x = 0;
 8000aa6:	f04f 0400 	mov.w	r4, #0
            if(*str == ' ') {
 8000aaa:	d0e6      	beq.n	8000a7a <ST7735_WriteString+0x32>
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000aac:	b2e0      	uxtb	r0, r4
 8000aae:	b2e9      	uxtb	r1, r5
 8000ab0:	1e73      	subs	r3, r6, #1
 8000ab2:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ab6:	440b      	add	r3, r1
 8000ab8:	4402      	add	r2, r0
        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000aba:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	b2d2      	uxtb	r2, r2
 8000ac2:	f7ff ff1c 	bl	80008fe <ST7735_SetAddressWindow>
        b = font.data[(ch - 32) * font.height + i];
 8000ac6:	3f20      	subs	r7, #32
 8000ac8:	0073      	lsls	r3, r6, #1
 8000aca:	fb07 b303 	mla	r3, r7, r3, fp
    for(i = 0; i < font.height; i++) {
 8000ace:	f04f 0b00 	mov.w	fp, #0
 8000ad2:	9302      	str	r3, [sp, #8]
 8000ad4:	45b3      	cmp	fp, r6
 8000ad6:	d302      	bcc.n	8000ade <ST7735_WriteString+0x96>
        x += font.width;
 8000ad8:	4444      	add	r4, r8
 8000ada:	b2a4      	uxth	r4, r4
 8000adc:	e7cd      	b.n	8000a7a <ST7735_WriteString+0x32>
        for(j = 0; j < font.width; j++) {
 8000ade:	2700      	movs	r7, #0
        b = font.data[(ch - 32) * font.height + i];
 8000ae0:	9b02      	ldr	r3, [sp, #8]
 8000ae2:	f833 301b 	ldrh.w	r3, [r3, fp, lsl #1]
 8000ae6:	9303      	str	r3, [sp, #12]
        for(j = 0; j < font.width; j++) {
 8000ae8:	4547      	cmp	r7, r8
 8000aea:	d302      	bcc.n	8000af2 <ST7735_WriteString+0xaa>
    for(i = 0; i < font.height; i++) {
 8000aec:	f10b 0b01 	add.w	fp, fp, #1
 8000af0:	e7f0      	b.n	8000ad4 <ST7735_WriteString+0x8c>
            if((b << j) & 0x8000)  {
 8000af2:	9b03      	ldr	r3, [sp, #12]
                ST7735_WriteData(data, sizeof(data));
 8000af4:	a807      	add	r0, sp, #28
            if((b << j) & 0x8000)  {
 8000af6:	fa03 f107 	lsl.w	r1, r3, r7
 8000afa:	040b      	lsls	r3, r1, #16
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000afc:	bf4c      	ite	mi
 8000afe:	9b04      	ldrmi	r3, [sp, #16]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b00:	9b05      	ldrpl	r3, [sp, #20]
                ST7735_WriteData(data, sizeof(data));
 8000b02:	f04f 0102 	mov.w	r1, #2
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b06:	bf47      	ittee	mi
 8000b08:	f88d 301c 	strbmi.w	r3, [sp, #28]
 8000b0c:	f88d 901d 	strbmi.w	r9, [sp, #29]
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b10:	f88d 301c 	strbpl.w	r3, [sp, #28]
 8000b14:	f88d a01d 	strbpl.w	sl, [sp, #29]
        for(j = 0; j < font.width; j++) {
 8000b18:	3701      	adds	r7, #1
                ST7735_WriteData(data, sizeof(data));
 8000b1a:	f7ff feb7 	bl	800088c <ST7735_WriteData>
 8000b1e:	e7e3      	b.n	8000ae8 <ST7735_WriteString+0xa0>

08000b20 <ST7735_FillRectangle>:
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b20:	b430      	push	{r4, r5}
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b22:	287f      	cmp	r0, #127	; 0x7f
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000b24:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b28:	d805      	bhi.n	8000b36 <ST7735_FillRectangle+0x16>
 8000b2a:	297f      	cmp	r1, #127	; 0x7f
 8000b2c:	d803      	bhi.n	8000b36 <ST7735_FillRectangle+0x16>
 8000b2e:	9402      	str	r4, [sp, #8]
}
 8000b30:	bc30      	pop	{r4, r5}
 8000b32:	f7ff bf17 	b.w	8000964 <ST7735_FillRectangle.part.1>
 8000b36:	bc30      	pop	{r4, r5}
 8000b38:	4770      	bx	lr

08000b3a <ST7735_DrawImage>:

void ST7735_FillScreen(uint16_t color) {
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b3e:	287f      	cmp	r0, #127	; 0x7f
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000b40:	4604      	mov	r4, r0
 8000b42:	460d      	mov	r5, r1
 8000b44:	4617      	mov	r7, r2
 8000b46:	461e      	mov	r6, r3
 8000b48:	f8dd 8018 	ldr.w	r8, [sp, #24]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b4c:	d81c      	bhi.n	8000b88 <ST7735_DrawImage+0x4e>
 8000b4e:	297f      	cmp	r1, #127	; 0x7f
 8000b50:	d81a      	bhi.n	8000b88 <ST7735_DrawImage+0x4e>
    if((x + w - 1) >= ST7735_WIDTH) return;
 8000b52:	1883      	adds	r3, r0, r2
 8000b54:	2b80      	cmp	r3, #128	; 0x80
 8000b56:	dc17      	bgt.n	8000b88 <ST7735_DrawImage+0x4e>
    if((y + h - 1) >= ST7735_HEIGHT) return;
 8000b58:	198b      	adds	r3, r1, r6
 8000b5a:	2b80      	cmp	r3, #128	; 0x80
 8000b5c:	dc14      	bgt.n	8000b88 <ST7735_DrawImage+0x4e>

    ST7735_Select();
 8000b5e:	f7ff fe75 	bl	800084c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b62:	b2e0      	uxtb	r0, r4
 8000b64:	b2e9      	uxtb	r1, r5
 8000b66:	1e73      	subs	r3, r6, #1
 8000b68:	1e7a      	subs	r2, r7, #1
 8000b6a:	440b      	add	r3, r1
 8000b6c:	4402      	add	r2, r0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	f7ff fec4 	bl	80008fe <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000b76:	0071      	lsls	r1, r6, #1
 8000b78:	4379      	muls	r1, r7
 8000b7a:	4640      	mov	r0, r8
 8000b7c:	f7ff fe86 	bl	800088c <ST7735_WriteData>
    ST7735_Unselect();
}
 8000b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ST7735_Unselect();
 8000b84:	f7ff bee6 	b.w	8000954 <ST7735_Unselect>
}
 8000b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_MspInit+0x3c>)
{
 8000b8e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b90:	699a      	ldr	r2, [r3, #24]
 8000b92:	f042 0201 	orr.w	r2, r2, #1
 8000b96:	619a      	str	r2, [r3, #24]
 8000b98:	699a      	ldr	r2, [r3, #24]
 8000b9a:	f002 0201 	and.w	r2, r2, #1
 8000b9e:	9200      	str	r2, [sp, #0]
 8000ba0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	69da      	ldr	r2, [r3, #28]
 8000ba4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ba8:	61da      	str	r2, [r3, #28]
 8000baa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bac:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bb6:	6853      	ldr	r3, [r2, #4]
 8000bb8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	b002      	add	sp, #8
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd2:	2710      	movs	r7, #16
{
 8000bd4:	4605      	mov	r5, r0
 8000bd6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	463a      	mov	r2, r7
 8000bda:	2100      	movs	r1, #0
 8000bdc:	eb0d 0007 	add.w	r0, sp, r7
 8000be0:	f001 fc76 	bl	80024d0 <memset>
  if(hspi->Instance==SPI1)
 8000be4:	682b      	ldr	r3, [r5, #0]
 8000be6:	4a4b      	ldr	r2, [pc, #300]	; (8000d14 <HAL_SPI_MspInit+0x144>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d15c      	bne.n	8000ca6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bec:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <HAL_SPI_MspInit+0x148>)
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2028      	movs	r0, #40	; 0x28
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000bf8:	619a      	str	r2, [r3, #24]
 8000bfa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	eb0d 0107 	add.w	r1, sp, r7
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	699a      	ldr	r2, [r3, #24]

    __HAL_AFIO_REMAP_SPI1_ENABLE();

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c0a:	4c44      	ldr	r4, [pc, #272]	; (8000d1c <HAL_SPI_MspInit+0x14c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0c:	f042 0208 	orr.w	r2, r2, #8
 8000c10:	619a      	str	r2, [r3, #24]
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	483e      	ldr	r0, [pc, #248]	; (8000d20 <HAL_SPI_MspInit+0x150>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c26:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	f000 fbf0 	bl	800140c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	483c      	ldr	r0, [pc, #240]	; (8000d20 <HAL_SPI_MspInit+0x150>)
 8000c2e:	eb0d 0107 	add.w	r1, sp, r7
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c32:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	e9cd 6605 	strd	r6, r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	f000 fbe8 	bl	800140c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000c3c:	4a39      	ldr	r2, [pc, #228]	; (8000d24 <HAL_SPI_MspInit+0x154>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c3e:	4620      	mov	r0, r4
    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000c40:	6853      	ldr	r3, [r2, #4]
 8000c42:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6053      	str	r3, [r2, #4]
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <HAL_SPI_MspInit+0x158>)
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c4e:	60a6      	str	r6, [r4, #8]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c50:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c54:	2380      	movs	r3, #128	; 0x80
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c56:	e9c4 3603 	strd	r3, r6, [r4, #12]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000c5e:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c62:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000c64:	f000 fb0e 	bl	8001284 <HAL_DMA_Init>
 8000c68:	b108      	cbz	r0, 8000c6e <HAL_SPI_MspInit+0x9e>
    {
      Error_Handler();
 8000c6a:	f7ff fded 	bl	8000848 <Error_Handler>

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c6e:	2310      	movs	r3, #16
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000c70:	64ec      	str	r4, [r5, #76]	; 0x4c
 8000c72:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c74:	492d      	ldr	r1, [pc, #180]	; (8000d2c <HAL_SPI_MspInit+0x15c>)
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000c76:	4c2e      	ldr	r4, [pc, #184]	; (8000d30 <HAL_SPI_MspInit+0x160>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c78:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c7a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c84:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c90:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000c92:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000c94:	f000 faf6 	bl	8001284 <HAL_DMA_Init>
 8000c98:	b108      	cbz	r0, 8000c9e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000c9a:	f7ff fdd5 	bl	8000848 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000c9e:	64ac      	str	r4, [r5, #72]	; 0x48
 8000ca0:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ca2:	b009      	add	sp, #36	; 0x24
 8000ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hspi->Instance==SPI2)
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <HAL_SPI_MspInit+0x164>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d1fa      	bne.n	8000ca2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_SPI_MspInit+0x148>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb2:	481b      	ldr	r0, [pc, #108]	; (8000d20 <HAL_SPI_MspInit+0x150>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cb8:	61da      	str	r2, [r3, #28]
 8000cba:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2600      	movs	r6, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cbe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cc2:	9202      	str	r2, [sp, #8]
 8000cc4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	699a      	ldr	r2, [r3, #24]
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000cc8:	4c1b      	ldr	r4, [pc, #108]	; (8000d38 <HAL_SPI_MspInit+0x168>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	f042 0208 	orr.w	r2, r2, #8
 8000cce:	619a      	str	r2, [r3, #24]
 8000cd0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	9303      	str	r3, [sp, #12]
 8000cdc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f000 fb90 	bl	800140c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	a904      	add	r1, sp, #16
 8000cf2:	480b      	ldr	r0, [pc, #44]	; (8000d20 <HAL_SPI_MspInit+0x150>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	e9cd 3604 	strd	r3, r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f000 fb87 	bl	800140c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_SPI_MspInit+0x16c>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	60a6      	str	r6, [r4, #8]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d02:	e9c4 3700 	strd	r3, r7, [r4]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	2380      	movs	r3, #128	; 0x80
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d08:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0c:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8000d10:	e7bc      	b.n	8000c8c <HAL_SPI_MspInit+0xbc>
 8000d12:	bf00      	nop
 8000d14:	40013000 	.word	0x40013000
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	20000270 	.word	0x20000270
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40010000 	.word	0x40010000
 8000d28:	4002001c 	.word	0x4002001c
 8000d2c:	40020030 	.word	0x40020030
 8000d30:	200002f8 	.word	0x200002f8
 8000d34:	40003800 	.word	0x40003800
 8000d38:	200002b4 	.word	0x200002b4
 8000d3c:	40020058 	.word	0x40020058

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if(htim_base->Instance==TIM1)
 8000d42:	6803      	ldr	r3, [r0, #0]
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <HAL_TIM_Base_MspInit+0x80>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d114      	bne.n	8000d74 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d4c:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d54:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d56:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d58:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d5a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d60:	9301      	str	r3, [sp, #4]
 8000d62:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d64:	f000 fa36 	bl	80011d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d68:	2019      	movs	r0, #25
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d6a:	b005      	add	sp, #20
 8000d6c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d70:	f000 ba64 	b.w	800123c <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM2)
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d78:	d10d      	bne.n	8000d96 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d7a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000d7e:	69da      	ldr	r2, [r3, #28]
 8000d80:	f042 0201 	orr.w	r2, r2, #1
 8000d84:	61da      	str	r2, [r3, #28]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	9b02      	ldr	r3, [sp, #8]
}
 8000d90:	b005      	add	sp, #20
 8000d92:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM4)
 8000d96:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <HAL_TIM_Base_MspInit+0x88>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d1f9      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_TIM_Base_MspInit+0x84>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d9e:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000da0:	69da      	ldr	r2, [r3, #28]
 8000da2:	f042 0204 	orr.w	r2, r2, #4
 8000da6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000da8:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000daa:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dac:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	9303      	str	r3, [sp, #12]
 8000db4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000db6:	f000 fa0d 	bl	80011d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000dba:	201e      	movs	r0, #30
 8000dbc:	e7d5      	b.n	8000d6a <HAL_TIM_Base_MspInit+0x2a>
 8000dbe:	bf00      	nop
 8000dc0:	40012c00 	.word	0x40012c00
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40000800 	.word	0x40000800

08000dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dcc:	b510      	push	{r4, lr}
 8000dce:	4604      	mov	r4, r0
 8000dd0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	a802      	add	r0, sp, #8
 8000dd8:	f001 fb7a 	bl	80024d0 <memset>
  if(htim->Instance==TIM2)
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de2:	d11d      	bne.n	8000e20 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000de8:	699a      	ldr	r2, [r3, #24]
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	f042 0204 	orr.w	r2, r2, #4
 8000df0:	619a      	str	r2, [r3, #24]
 8000df2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <HAL_TIM_MspPostInit+0x58>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f000 faff 	bl	800140c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000e0e:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_TIM_MspPostInit+0x5c>)
 8000e10:	6853      	ldr	r3, [r2, #4]
 8000e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e20:	b006      	add	sp, #24
 8000e22:	bd10      	pop	{r4, pc}
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010000 	.word	0x40010000

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b510      	push	{r4, lr}
 8000e2e:	4604      	mov	r4, r0
 8000e30:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	2210      	movs	r2, #16
 8000e34:	2100      	movs	r1, #0
 8000e36:	a802      	add	r0, sp, #8
 8000e38:	f001 fb4a 	bl	80024d0 <memset>
  if(huart->Instance==USART2)
 8000e3c:	6822      	ldr	r2, [r4, #0]
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_UART_MspInit+0x6c>)
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d126      	bne.n	8000e92 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e44:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000e48:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e50:	61da      	str	r2, [r3, #28]
 8000e52:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e56:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e5a:	9200      	str	r2, [sp, #0]
 8000e5c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	699a      	ldr	r2, [r3, #24]
 8000e60:	f042 0204 	orr.w	r2, r2, #4
 8000e64:	619a      	str	r2, [r3, #24]
 8000e66:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f000 fac6 	bl	800140c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e80:	2108      	movs	r1, #8
 8000e82:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f000 fabd 	bl	800140c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e92:	b006      	add	sp, #24
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	40010800 	.word	0x40010800

08000ea0 <SDTimer_Handler>:
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
  if(Timer1 > 0)
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SDTimer_Handler+0x20>)
 8000ea2:	7813      	ldrb	r3, [r2, #0]
 8000ea4:	b11b      	cbz	r3, 8000eae <SDTimer_Handler+0xe>
    Timer1--;
 8000ea6:	7813      	ldrb	r3, [r2, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	7013      	strb	r3, [r2, #0]

  if(Timer2 > 0)
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SDTimer_Handler+0x24>)
 8000eb0:	7813      	ldrb	r3, [r2, #0]
 8000eb2:	b11b      	cbz	r3, 8000ebc <SDTimer_Handler+0x1c>
    Timer2--;
 8000eb4:	7813      	ldrb	r3, [r2, #0]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	7013      	strb	r3, [r2, #0]
}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000033d 	.word	0x2000033d
 8000ec4:	2000033c 	.word	0x2000033c

08000ec8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec8:	4770      	bx	lr

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler>

08000ed2 <SVC_Handler>:
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:
 8000ed4:	4770      	bx	lr

08000ed6 <PendSV_Handler>:
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <SysTick_Handler+0x24>)
 8000edc:	7813      	ldrb	r3, [r2, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	7013      	strb	r3, [r2, #0]
  if(FatFsCnt >= 10)
 8000ee4:	7813      	ldrb	r3, [r2, #0]
 8000ee6:	2b09      	cmp	r3, #9
 8000ee8:	d903      	bls.n	8000ef2 <SysTick_Handler+0x1a>
  {
    FatFsCnt = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	7013      	strb	r3, [r2, #0]
    SDTimer_Handler();
 8000eee:	f7ff ffd7 	bl	8000ea0 <SDTimer_Handler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_IncTick();
 8000ef6:	f000 b937 	b.w	8001168 <HAL_IncTick>
 8000efa:	bf00      	nop
 8000efc:	20000098 	.word	0x20000098

08000f00 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <DMA1_Channel2_IRQHandler+0x8>)
 8000f02:	f000 b9ef 	b.w	80012e4 <HAL_DMA_IRQHandler>
 8000f06:	bf00      	nop
 8000f08:	20000270 	.word	0x20000270

08000f0c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f0c:	4801      	ldr	r0, [pc, #4]	; (8000f14 <DMA1_Channel3_IRQHandler+0x8>)
 8000f0e:	f000 b9e9 	b.w	80012e4 <HAL_DMA_IRQHandler>
 8000f12:	bf00      	nop
 8000f14:	200002f8 	.word	0x200002f8

08000f18 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f18:	4801      	ldr	r0, [pc, #4]	; (8000f20 <DMA1_Channel5_IRQHandler+0x8>)
 8000f1a:	f000 b9e3 	b.w	80012e4 <HAL_DMA_IRQHandler>
 8000f1e:	bf00      	nop
 8000f20:	200002b4 	.word	0x200002b4

08000f24 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f24:	4801      	ldr	r0, [pc, #4]	; (8000f2c <TIM1_UP_IRQHandler+0x8>)
 8000f26:	f000 bfcf 	b.w	8001ec8 <HAL_TIM_IRQHandler>
 8000f2a:	bf00      	nop
 8000f2c:	20000158 	.word	0x20000158

08000f30 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f30:	4801      	ldr	r0, [pc, #4]	; (8000f38 <TIM4_IRQHandler+0x8>)
 8000f32:	f000 bfc9 	b.w	8001ec8 <HAL_TIM_IRQHandler>
 8000f36:	bf00      	nop
 8000f38:	20000100 	.word	0x20000100

08000f3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f42:	f000 fb55 	bl	80015f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000f46:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f4a:	f000 fb51 	bl	80015f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f56:	f000 bb4b 	b.w	80015f0 <HAL_GPIO_EXTI_IRQHandler>
	...

08000f5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	  if ( GPIO_Pin == GPIO_PIN_13)
 8000f5c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 8000f60:	b508      	push	{r3, lr}
	  if ( GPIO_Pin == GPIO_PIN_13)
 8000f62:	d106      	bne.n	8000f72 <HAL_GPIO_EXTI_Callback+0x16>
	      {
	          // Write your code here
	      	HAL_TIM_Base_Start_IT(&htim4);
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f66:	f000 ff85 	bl	8001e74 <HAL_TIM_Base_Start_IT>

	      	pin_selected = 3;
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x40>)
	           {
	               // Write your code here

	       	HAL_TIM_Base_Start_IT(&htim4);

	       	pin_selected = 5;
 8000f6e:	701a      	strb	r2, [r3, #0]

	   //   	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
	           }

}
 8000f70:	bd08      	pop	{r3, pc}
	      if ( GPIO_Pin == GPIO_PIN_14)
 8000f72:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8000f76:	d105      	bne.n	8000f84 <HAL_GPIO_EXTI_Callback+0x28>
	      	HAL_TIM_Base_Start_IT(&htim4);
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f7a:	f000 ff7b 	bl	8001e74 <HAL_TIM_Base_Start_IT>
	      	pin_selected = 4;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x40>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	e7f4      	b.n	8000f6e <HAL_GPIO_EXTI_Callback+0x12>
	      if ( GPIO_Pin == GPIO_PIN_15)
 8000f84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000f88:	d1f2      	bne.n	8000f70 <HAL_GPIO_EXTI_Callback+0x14>
	       	HAL_TIM_Base_Start_IT(&htim4);
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000f8c:	f000 ff72 	bl	8001e74 <HAL_TIM_Base_Start_IT>
	       	pin_selected = 5;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x40>)
 8000f92:	2205      	movs	r2, #5
 8000f94:	e7eb      	b.n	8000f6e <HAL_GPIO_EXTI_Callback+0x12>
 8000f96:	bf00      	nop
 8000f98:	20000100 	.word	0x20000100
 8000f9c:	20000099 	.word	0x20000099

08000fa0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fa0:	b538      	push	{r3, r4, r5, lr}
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  if(pin_selected == 3 ){
 8000fa2:	4c1b      	ldr	r4, [pc, #108]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000fa4:	7823      	ldrb	r3, [r4, #0]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d10f      	bne.n	8000fca <HAL_TIM_PeriodElapsedCallback+0x2a>
  	if(HAL_GPIO_ReadPin(GPIOC, 8192) == GPIO_PIN_SET){
 8000faa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fae:	4819      	ldr	r0, [pc, #100]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fb0:	f000 fb0c 	bl	80015cc <HAL_GPIO_ReadPin>
 8000fb4:	2801      	cmp	r0, #1
 8000fb6:	d106      	bne.n	8000fc6 <HAL_TIM_PeriodElapsedCallback+0x26>
//  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
  		i -= 5;
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x78>)
  		HAL_TIM_Base_Stop_IT(&htim4);
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x7c>)
  		i -= 5;
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	3b05      	subs	r3, #5
 8000fc0:	6013      	str	r3, [r2, #0]
  		HAL_TIM_Base_Stop_IT(&htim4);
 8000fc2:	f000 ff67 	bl	8001e94 <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	7023      	strb	r3, [r4, #0]
    }
    if(pin_selected == 4 ){
 8000fca:	7825      	ldrb	r5, [r4, #0]
 8000fcc:	2d04      	cmp	r5, #4
 8000fce:	d10f      	bne.n	8000ff0 <HAL_TIM_PeriodElapsedCallback+0x50>
  	if(HAL_GPIO_ReadPin(GPIOC, 16384) == GPIO_PIN_SET){
 8000fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000fd6:	f000 faf9 	bl	80015cc <HAL_GPIO_ReadPin>
 8000fda:	2801      	cmp	r0, #1
 8000fdc:	d106      	bne.n	8000fec <HAL_TIM_PeriodElapsedCallback+0x4c>

  		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8000fde:	4810      	ldr	r0, [pc, #64]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f000 fafe 	bl	80015e2 <HAL_GPIO_TogglePin>

  		HAL_TIM_Base_Stop_IT(&htim4);
 8000fe6:	480d      	ldr	r0, [pc, #52]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000fe8:	f000 ff54 	bl	8001e94 <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	7023      	strb	r3, [r4, #0]
    }
    if(pin_selected == 4 ){
 8000ff0:	7823      	ldrb	r3, [r4, #0]
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	d10b      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x6e>
  	if(HAL_GPIO_ReadPin(GPIOC,  32768) == GPIO_PIN_SET){
 8000ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ffc:	f000 fae6 	bl	80015cc <HAL_GPIO_ReadPin>
 8001000:	2801      	cmp	r0, #1
 8001002:	d102      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x6a>

//  		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);

  		HAL_TIM_Base_Stop_IT(&htim4);
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001006:	f000 ff45 	bl	8001e94 <HAL_TIM_Base_Stop_IT>
  	}

  	pin_selected = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	7023      	strb	r3, [r4, #0]
    }

}
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	20000099 	.word	0x20000099
 8001014:	40011000 	.word	0x40011000
 8001018:	20000094 	.word	0x20000094
 800101c:	20000100 	.word	0x20000100
 8001020:	40010c00 	.word	0x40010c00

08001024 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <_sbrk+0x30>)
{
 8001026:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001028:	6819      	ldr	r1, [r3, #0]
{
 800102a:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 800102c:	b909      	cbnz	r1, 8001032 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800102e:	490a      	ldr	r1, [pc, #40]	; (8001058 <_sbrk+0x34>)
 8001030:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	4909      	ldr	r1, [pc, #36]	; (800105c <_sbrk+0x38>)
 8001036:	4c0a      	ldr	r4, [pc, #40]	; (8001060 <_sbrk+0x3c>)
 8001038:	4402      	add	r2, r0
 800103a:	1b09      	subs	r1, r1, r4
 800103c:	428a      	cmp	r2, r1
 800103e:	d906      	bls.n	800104e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001040:	f001 fa0c 	bl	800245c <__errno>
 8001044:	230c      	movs	r3, #12
 8001046:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001048:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800104c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800104e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001050:	e7fc      	b.n	800104c <_sbrk+0x28>
 8001052:	bf00      	nop
 8001054:	2000009c 	.word	0x2000009c
 8001058:	20000348 	.word	0x20000348
 800105c:	20005000 	.word	0x20005000
 8001060:	00000400 	.word	0x00000400

08001064 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <SystemInit+0x40>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	f042 0201 	orr.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800106e:	6859      	ldr	r1, [r3, #4]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <SystemInit+0x44>)
 8001072:	400a      	ands	r2, r1
 8001074:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800107c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001080:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001088:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001090:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001092:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001096:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <SystemInit+0x48>)
 800109e:	609a      	str	r2, [r3, #8]
#endif 
}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	f8ff0000 	.word	0xf8ff0000
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010b2:	e003      	b.n	80010bc <LoopCopyDataInit>

080010b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010ba:	3104      	adds	r1, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010bc:	480a      	ldr	r0, [pc, #40]	; (80010e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010c4:	d3f6      	bcc.n	80010b4 <CopyDataInit>
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010c8:	e002      	b.n	80010d0 <LoopFillZerobss>

080010ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010cc:	f842 3b04 	str.w	r3, [r2], #4

080010d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010d4:	d3f9      	bcc.n	80010ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010d6:	f7ff ffc5 	bl	8001064 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010da:	f001 f9c5 	bl	8002468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010de:	f7ff f861 	bl	80001a4 <main>
  bx lr
 80010e2:	4770      	bx	lr
  ldr r3, =_sidata
 80010e4:	0800d7b8 	.word	0x0800d7b8
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010ec:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 80010f0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 80010f4:	20000348 	.word	0x20000348

080010f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_2_IRQHandler>
	...

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_InitTick+0x3c>)
{
 8001100:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001102:	7818      	ldrb	r0, [r3, #0]
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	fbb3 f3f0 	udiv	r3, r3, r0
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_InitTick+0x40>)
 800110e:	6810      	ldr	r0, [r2, #0]
 8001110:	fbb0 f0f3 	udiv	r0, r0, r3
 8001114:	f000 f8a0 	bl	8001258 <HAL_SYSTICK_Config>
 8001118:	4604      	mov	r4, r0
 800111a:	b958      	cbnz	r0, 8001134 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111c:	2d0f      	cmp	r5, #15
 800111e:	d809      	bhi.n	8001134 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001120:	4602      	mov	r2, r0
 8001122:	4629      	mov	r1, r5
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	f000 f854 	bl	80011d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800112c:	4620      	mov	r0, r4
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_InitTick+0x44>)
 8001130:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001132:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001134:	2001      	movs	r0, #1
 8001136:	e7fc      	b.n	8001132 <HAL_InitTick+0x36>
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000008 	.word	0x20000008
 8001140:	20000010 	.word	0x20000010

08001144 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <HAL_Init+0x20>)
{
 8001146:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800114a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	f043 0310 	orr.w	r3, r3, #16
 8001150:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001152:	f000 f82d 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff ffd0 	bl	80010fc <HAL_InitTick>
  HAL_MspInit();
 800115c:	f7ff fd16 	bl	8000b8c <HAL_MspInit>
}
 8001160:	2000      	movs	r0, #0
 8001162:	bd08      	pop	{r3, pc}
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <HAL_IncTick+0x10>)
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_IncTick+0x14>)
 800116c:	6811      	ldr	r1, [r2, #0]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	440b      	add	r3, r1
 8001172:	6013      	str	r3, [r2, #0]
}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000340 	.word	0x20000340
 800117c:	2000000c 	.word	0x2000000c

08001180 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001180:	4b01      	ldr	r3, [pc, #4]	; (8001188 <HAL_GetTick+0x8>)
 8001182:	6818      	ldr	r0, [r3, #0]
}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000340 	.word	0x20000340

0800118c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff fff6 	bl	8001180 <HAL_GetTick>
 8001194:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001198:	bf1e      	ittt	ne
 800119a:	4b04      	ldrne	r3, [pc, #16]	; (80011ac <HAL_Delay+0x20>)
 800119c:	781b      	ldrbne	r3, [r3, #0]
 800119e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	1b40      	subs	r0, r0, r5
 80011a6:	42a0      	cmp	r0, r4
 80011a8:	d3fa      	bcc.n	80011a0 <HAL_Delay+0x14>
  {
  }
}
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	2000000c 	.word	0x2000000c

080011b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011be:	041b      	lsls	r3, r3, #16
 80011c0:	0c1b      	lsrs	r3, r3, #16
 80011c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80011ca:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011cc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b570      	push	{r4, r5, r6, lr}
 80011d8:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011da:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011de:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e2:	f1c4 0507 	rsb	r5, r4, #7
 80011e6:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e8:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ec:	bf28      	it	cs
 80011ee:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f0:	2b06      	cmp	r3, #6
 80011f2:	bf98      	it	ls
 80011f4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f6:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fa:	bf88      	it	hi
 80011fc:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fe:	ea21 0303 	bic.w	r3, r1, r3
 8001202:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	fa06 f404 	lsl.w	r4, r6, r4
 8001208:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800120c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120e:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	bfa8      	it	ge
 8001214:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001218:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121c:	bfb8      	it	lt
 800121e:	4a06      	ldrlt	r2, [pc, #24]	; (8001238 <HAL_NVIC_SetPriority+0x64>)
 8001220:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	bfab      	itete	ge
 8001224:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001228:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001232:	bd70      	pop	{r4, r5, r6, pc}
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	e000ed14 	.word	0xe000ed14

0800123c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800123c:	2800      	cmp	r0, #0
 800123e:	db08      	blt.n	8001252 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001240:	2301      	movs	r3, #1
 8001242:	0942      	lsrs	r2, r0, #5
 8001244:	f000 001f 	and.w	r0, r0, #31
 8001248:	fa03 f000 	lsl.w	r0, r3, r0
 800124c:	4b01      	ldr	r3, [pc, #4]	; (8001254 <HAL_NVIC_EnableIRQ+0x18>)
 800124e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001252:	4770      	bx	lr
 8001254:	e000e100 	.word	0xe000e100

08001258 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	3801      	subs	r0, #1
 800125a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800125e:	d20a      	bcs.n	8001276 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	4a06      	ldr	r2, [pc, #24]	; (8001280 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e010 	.word	0xe000e010
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001284:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001286:	b330      	cbz	r0, 80012d6 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001288:	2214      	movs	r2, #20
 800128a:	6801      	ldr	r1, [r0, #0]
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_DMA_Init+0x58>)
 800128e:	440b      	add	r3, r1
 8001290:	fbb3 f3f2 	udiv	r3, r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800129a:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800129c:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800129e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80012a2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012a6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012aa:	4323      	orrs	r3, r4
 80012ac:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012ae:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b4:	6944      	ldr	r4, [r0, #20]
 80012b6:	4323      	orrs	r3, r4
 80012b8:	6984      	ldr	r4, [r0, #24]
 80012ba:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80012bc:	69c4      	ldr	r4, [r0, #28]
 80012be:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80012c0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012c2:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012c4:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c6:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80012c8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012cc:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ce:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 80012d2:	4618      	mov	r0, r3
}
 80012d4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012d6:	2001      	movs	r0, #1
 80012d8:	e7fc      	b.n	80012d4 <HAL_DMA_Init+0x50>
 80012da:	bf00      	nop
 80012dc:	bffdfff8 	.word	0xbffdfff8
 80012e0:	40020000 	.word	0x40020000

080012e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012e4:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012e6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012e8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012ea:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012ec:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80012ee:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012f0:	4095      	lsls	r5, r2
 80012f2:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80012f4:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012f6:	d032      	beq.n	800135e <HAL_DMA_IRQHandler+0x7a>
 80012f8:	074d      	lsls	r5, r1, #29
 80012fa:	d530      	bpl.n	800135e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001300:	bf5e      	ittt	pl
 8001302:	681a      	ldrpl	r2, [r3, #0]
 8001304:	f022 0204 	bicpl.w	r2, r2, #4
 8001308:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800130a:	4a3e      	ldr	r2, [pc, #248]	; (8001404 <HAL_DMA_IRQHandler+0x120>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d019      	beq.n	8001344 <HAL_DMA_IRQHandler+0x60>
 8001310:	3214      	adds	r2, #20
 8001312:	4293      	cmp	r3, r2
 8001314:	d018      	beq.n	8001348 <HAL_DMA_IRQHandler+0x64>
 8001316:	3214      	adds	r2, #20
 8001318:	4293      	cmp	r3, r2
 800131a:	d017      	beq.n	800134c <HAL_DMA_IRQHandler+0x68>
 800131c:	3214      	adds	r2, #20
 800131e:	4293      	cmp	r3, r2
 8001320:	d017      	beq.n	8001352 <HAL_DMA_IRQHandler+0x6e>
 8001322:	3214      	adds	r2, #20
 8001324:	4293      	cmp	r3, r2
 8001326:	d017      	beq.n	8001358 <HAL_DMA_IRQHandler+0x74>
 8001328:	3214      	adds	r2, #20
 800132a:	4293      	cmp	r3, r2
 800132c:	bf0c      	ite	eq
 800132e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001332:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001336:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_DMA_IRQHandler+0x124>)
 8001338:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800133a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 800133c:	2b00      	cmp	r3, #0
 800133e:	d05e      	beq.n	80013fe <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8001340:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001342:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001344:	2304      	movs	r3, #4
 8001346:	e7f6      	b.n	8001336 <HAL_DMA_IRQHandler+0x52>
 8001348:	2340      	movs	r3, #64	; 0x40
 800134a:	e7f4      	b.n	8001336 <HAL_DMA_IRQHandler+0x52>
 800134c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001350:	e7f1      	b.n	8001336 <HAL_DMA_IRQHandler+0x52>
 8001352:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001356:	e7ee      	b.n	8001336 <HAL_DMA_IRQHandler+0x52>
 8001358:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800135c:	e7eb      	b.n	8001336 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800135e:	2502      	movs	r5, #2
 8001360:	4095      	lsls	r5, r2
 8001362:	4225      	tst	r5, r4
 8001364:	d035      	beq.n	80013d2 <HAL_DMA_IRQHandler+0xee>
 8001366:	078d      	lsls	r5, r1, #30
 8001368:	d533      	bpl.n	80013d2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	0694      	lsls	r4, r2, #26
 800136e:	d406      	bmi.n	800137e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	f022 020a 	bic.w	r2, r2, #10
 8001376:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001378:	2201      	movs	r2, #1
 800137a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800137e:	4a21      	ldr	r2, [pc, #132]	; (8001404 <HAL_DMA_IRQHandler+0x120>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d019      	beq.n	80013b8 <HAL_DMA_IRQHandler+0xd4>
 8001384:	3214      	adds	r2, #20
 8001386:	4293      	cmp	r3, r2
 8001388:	d018      	beq.n	80013bc <HAL_DMA_IRQHandler+0xd8>
 800138a:	3214      	adds	r2, #20
 800138c:	4293      	cmp	r3, r2
 800138e:	d017      	beq.n	80013c0 <HAL_DMA_IRQHandler+0xdc>
 8001390:	3214      	adds	r2, #20
 8001392:	4293      	cmp	r3, r2
 8001394:	d017      	beq.n	80013c6 <HAL_DMA_IRQHandler+0xe2>
 8001396:	3214      	adds	r2, #20
 8001398:	4293      	cmp	r3, r2
 800139a:	d017      	beq.n	80013cc <HAL_DMA_IRQHandler+0xe8>
 800139c:	3214      	adds	r2, #20
 800139e:	4293      	cmp	r3, r2
 80013a0:	bf0c      	ite	eq
 80013a2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80013a6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_DMA_IRQHandler+0x124>)
 80013ac:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80013ae:	2300      	movs	r3, #0
 80013b0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80013b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013b6:	e7c1      	b.n	800133c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013b8:	2302      	movs	r3, #2
 80013ba:	e7f6      	b.n	80013aa <HAL_DMA_IRQHandler+0xc6>
 80013bc:	2320      	movs	r3, #32
 80013be:	e7f4      	b.n	80013aa <HAL_DMA_IRQHandler+0xc6>
 80013c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c4:	e7f1      	b.n	80013aa <HAL_DMA_IRQHandler+0xc6>
 80013c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ca:	e7ee      	b.n	80013aa <HAL_DMA_IRQHandler+0xc6>
 80013cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d0:	e7eb      	b.n	80013aa <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013d2:	2508      	movs	r5, #8
 80013d4:	4095      	lsls	r5, r2
 80013d6:	4225      	tst	r5, r4
 80013d8:	d011      	beq.n	80013fe <HAL_DMA_IRQHandler+0x11a>
 80013da:	0709      	lsls	r1, r1, #28
 80013dc:	d50f      	bpl.n	80013fe <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013de:	6819      	ldr	r1, [r3, #0]
 80013e0:	f021 010e 	bic.w	r1, r1, #14
 80013e4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013e6:	2301      	movs	r3, #1
 80013e8:	fa03 f202 	lsl.w	r2, r3, r2
 80013ec:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013ee:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80013f0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80013f4:	2300      	movs	r3, #0
 80013f6:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80013fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80013fc:	e79e      	b.n	800133c <HAL_DMA_IRQHandler+0x58>
}
 80013fe:	bc70      	pop	{r4, r5, r6}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40020008 	.word	0x40020008
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800140c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001410:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001412:	4626      	mov	r6, r4
 8001414:	4b65      	ldr	r3, [pc, #404]	; (80015ac <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001416:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80015bc <HAL_GPIO_Init+0x1b0>
 800141a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80015c0 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	680a      	ldr	r2, [r1, #0]
 8001420:	fa32 f506 	lsrs.w	r5, r2, r6
 8001424:	d102      	bne.n	800142c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001426:	b003      	add	sp, #12
 8001428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800142c:	f04f 0801 	mov.w	r8, #1
 8001430:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001434:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001438:	4590      	cmp	r8, r2
 800143a:	d17e      	bne.n	800153a <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 800143c:	684d      	ldr	r5, [r1, #4]
 800143e:	2d12      	cmp	r5, #18
 8001440:	f000 80a9 	beq.w	8001596 <HAL_GPIO_Init+0x18a>
 8001444:	f200 8082 	bhi.w	800154c <HAL_GPIO_Init+0x140>
 8001448:	2d02      	cmp	r5, #2
 800144a:	f000 80a1 	beq.w	8001590 <HAL_GPIO_Init+0x184>
 800144e:	d876      	bhi.n	800153e <HAL_GPIO_Init+0x132>
 8001450:	2d00      	cmp	r5, #0
 8001452:	f000 8088 	beq.w	8001566 <HAL_GPIO_Init+0x15a>
 8001456:	2d01      	cmp	r5, #1
 8001458:	f000 8098 	beq.w	800158c <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800145c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001460:	2aff      	cmp	r2, #255	; 0xff
 8001462:	bf93      	iteet	ls
 8001464:	4682      	movls	sl, r0
 8001466:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800146a:	3d08      	subhi	r5, #8
 800146c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001470:	bf92      	itee	ls
 8001472:	00b5      	lslls	r5, r6, #2
 8001474:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001478:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800147a:	fa09 f805 	lsl.w	r8, r9, r5
 800147e:	ea2b 0808 	bic.w	r8, fp, r8
 8001482:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001486:	bf88      	it	hi
 8001488:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800148c:	ea48 0505 	orr.w	r5, r8, r5
 8001490:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001494:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001498:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800149c:	d04d      	beq.n	800153a <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800149e:	4f44      	ldr	r7, [pc, #272]	; (80015b0 <HAL_GPIO_Init+0x1a4>)
 80014a0:	f026 0803 	bic.w	r8, r6, #3
 80014a4:	69bd      	ldr	r5, [r7, #24]
 80014a6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80014aa:	f045 0501 	orr.w	r5, r5, #1
 80014ae:	61bd      	str	r5, [r7, #24]
 80014b0:	69bd      	ldr	r5, [r7, #24]
 80014b2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80014b6:	f005 0501 	and.w	r5, r5, #1
 80014ba:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014bc:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014c0:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80014c6:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ca:	fa09 f90b 	lsl.w	r9, r9, fp
 80014ce:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d2:	4d38      	ldr	r5, [pc, #224]	; (80015b4 <HAL_GPIO_Init+0x1a8>)
 80014d4:	42a8      	cmp	r0, r5
 80014d6:	d063      	beq.n	80015a0 <HAL_GPIO_Init+0x194>
 80014d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014dc:	42a8      	cmp	r0, r5
 80014de:	d061      	beq.n	80015a4 <HAL_GPIO_Init+0x198>
 80014e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014e4:	42a8      	cmp	r0, r5
 80014e6:	d05f      	beq.n	80015a8 <HAL_GPIO_Init+0x19c>
 80014e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014ec:	42a8      	cmp	r0, r5
 80014ee:	bf0c      	ite	eq
 80014f0:	2503      	moveq	r5, #3
 80014f2:	2504      	movne	r5, #4
 80014f4:	fa05 f50b 	lsl.w	r5, r5, fp
 80014f8:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80014fc:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001500:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001502:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001506:	bf14      	ite	ne
 8001508:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800150a:	4395      	biceq	r5, r2
 800150c:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800150e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001510:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001514:	bf14      	ite	ne
 8001516:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001518:	4395      	biceq	r5, r2
 800151a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800151c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001522:	bf14      	ite	ne
 8001524:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001526:	4395      	biceq	r5, r2
 8001528:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800152a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800152c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001530:	bf14      	ite	ne
 8001532:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001534:	ea25 0202 	biceq.w	r2, r5, r2
 8001538:	60da      	str	r2, [r3, #12]
	position++;
 800153a:	3601      	adds	r6, #1
 800153c:	e76f      	b.n	800141e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 800153e:	2d03      	cmp	r5, #3
 8001540:	d022      	beq.n	8001588 <HAL_GPIO_Init+0x17c>
 8001542:	2d11      	cmp	r5, #17
 8001544:	d18a      	bne.n	800145c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001546:	68cc      	ldr	r4, [r1, #12]
 8001548:	3404      	adds	r4, #4
          break;
 800154a:	e787      	b.n	800145c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800154c:	4f1a      	ldr	r7, [pc, #104]	; (80015b8 <HAL_GPIO_Init+0x1ac>)
 800154e:	42bd      	cmp	r5, r7
 8001550:	d009      	beq.n	8001566 <HAL_GPIO_Init+0x15a>
 8001552:	d812      	bhi.n	800157a <HAL_GPIO_Init+0x16e>
 8001554:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80015c4 <HAL_GPIO_Init+0x1b8>
 8001558:	454d      	cmp	r5, r9
 800155a:	d004      	beq.n	8001566 <HAL_GPIO_Init+0x15a>
 800155c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001560:	454d      	cmp	r5, r9
 8001562:	f47f af7b 	bne.w	800145c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001566:	688c      	ldr	r4, [r1, #8]
 8001568:	b1c4      	cbz	r4, 800159c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800156a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800156c:	bf0c      	ite	eq
 800156e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001572:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001576:	2408      	movs	r4, #8
 8001578:	e770      	b.n	800145c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800157a:	4565      	cmp	r5, ip
 800157c:	d0f3      	beq.n	8001566 <HAL_GPIO_Init+0x15a>
 800157e:	4575      	cmp	r5, lr
 8001580:	d0f1      	beq.n	8001566 <HAL_GPIO_Init+0x15a>
 8001582:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80015c8 <HAL_GPIO_Init+0x1bc>
 8001586:	e7eb      	b.n	8001560 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001588:	2400      	movs	r4, #0
 800158a:	e767      	b.n	800145c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800158c:	68cc      	ldr	r4, [r1, #12]
          break;
 800158e:	e765      	b.n	800145c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001590:	68cc      	ldr	r4, [r1, #12]
 8001592:	3408      	adds	r4, #8
          break;
 8001594:	e762      	b.n	800145c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001596:	68cc      	ldr	r4, [r1, #12]
 8001598:	340c      	adds	r4, #12
          break;
 800159a:	e75f      	b.n	800145c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159c:	2404      	movs	r4, #4
 800159e:	e75d      	b.n	800145c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a0:	2500      	movs	r5, #0
 80015a2:	e7a7      	b.n	80014f4 <HAL_GPIO_Init+0xe8>
 80015a4:	2501      	movs	r5, #1
 80015a6:	e7a5      	b.n	80014f4 <HAL_GPIO_Init+0xe8>
 80015a8:	2502      	movs	r5, #2
 80015aa:	e7a3      	b.n	80014f4 <HAL_GPIO_Init+0xe8>
 80015ac:	40010400 	.word	0x40010400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010800 	.word	0x40010800
 80015b8:	10210000 	.word	0x10210000
 80015bc:	10310000 	.word	0x10310000
 80015c0:	10320000 	.word	0x10320000
 80015c4:	10110000 	.word	0x10110000
 80015c8:	10220000 	.word	0x10220000

080015cc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015cc:	6883      	ldr	r3, [r0, #8]
 80015ce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80015d0:	bf14      	ite	ne
 80015d2:	2001      	movne	r0, #1
 80015d4:	2000      	moveq	r0, #0
 80015d6:	4770      	bx	lr

080015d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d8:	b10a      	cbz	r2, 80015de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015da:	6101      	str	r1, [r0, #16]
  }
}
 80015dc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015de:	0409      	lsls	r1, r1, #16
 80015e0:	e7fb      	b.n	80015da <HAL_GPIO_WritePin+0x2>

080015e2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80015e2:	68c3      	ldr	r3, [r0, #12]
 80015e4:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015e6:	bf14      	ite	ne
 80015e8:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ea:	6101      	streq	r1, [r0, #16]
  }
}
 80015ec:	4770      	bx	lr
	...

080015f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80015f4:	6959      	ldr	r1, [r3, #20]
 80015f6:	4201      	tst	r1, r0
 80015f8:	d002      	beq.n	8001600 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015fa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015fc:	f7ff fcae 	bl	8000f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001600:	bd08      	pop	{r3, pc}
 8001602:	bf00      	nop
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800160c:	4605      	mov	r5, r0
 800160e:	b908      	cbnz	r0, 8001614 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001610:	2001      	movs	r0, #1
 8001612:	e03c      	b.n	800168e <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001614:	6803      	ldr	r3, [r0, #0]
 8001616:	07db      	lsls	r3, r3, #31
 8001618:	d410      	bmi.n	800163c <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	682b      	ldr	r3, [r5, #0]
 800161c:	079f      	lsls	r7, r3, #30
 800161e:	d45d      	bmi.n	80016dc <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001620:	682b      	ldr	r3, [r5, #0]
 8001622:	0719      	lsls	r1, r3, #28
 8001624:	f100 8094 	bmi.w	8001750 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	075a      	lsls	r2, r3, #29
 800162c:	f100 80be 	bmi.w	80017ac <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001630:	69e8      	ldr	r0, [r5, #28]
 8001632:	2800      	cmp	r0, #0
 8001634:	f040 812c 	bne.w	8001890 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001638:	2000      	movs	r0, #0
 800163a:	e028      	b.n	800168e <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800163c:	4c8f      	ldr	r4, [pc, #572]	; (800187c <HAL_RCC_OscConfig+0x274>)
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b04      	cmp	r3, #4
 8001646:	d007      	beq.n	8001658 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001648:	6863      	ldr	r3, [r4, #4]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d109      	bne.n	8001666 <HAL_RCC_OscConfig+0x5e>
 8001652:	6863      	ldr	r3, [r4, #4]
 8001654:	03de      	lsls	r6, r3, #15
 8001656:	d506      	bpl.n	8001666 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	039c      	lsls	r4, r3, #14
 800165c:	d5dd      	bpl.n	800161a <HAL_RCC_OscConfig+0x12>
 800165e:	686b      	ldr	r3, [r5, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1da      	bne.n	800161a <HAL_RCC_OscConfig+0x12>
 8001664:	e7d4      	b.n	8001610 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	686b      	ldr	r3, [r5, #4]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d112      	bne.n	8001694 <HAL_RCC_OscConfig+0x8c>
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001676:	f7ff fd83 	bl	8001180 <HAL_GetTick>
 800167a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167c:	6823      	ldr	r3, [r4, #0]
 800167e:	0398      	lsls	r0, r3, #14
 8001680:	d4cb      	bmi.n	800161a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001682:	f7ff fd7d 	bl	8001180 <HAL_GetTick>
 8001686:	1b80      	subs	r0, r0, r6
 8001688:	2864      	cmp	r0, #100	; 0x64
 800168a:	d9f7      	bls.n	800167c <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 800168c:	2003      	movs	r0, #3
}
 800168e:	b002      	add	sp, #8
 8001690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	b99b      	cbnz	r3, 80016be <HAL_RCC_OscConfig+0xb6>
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169c:	6023      	str	r3, [r4, #0]
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016a6:	f7ff fd6b 	bl	8001180 <HAL_GetTick>
 80016aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	0399      	lsls	r1, r3, #14
 80016b0:	d5b3      	bpl.n	800161a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b2:	f7ff fd65 	bl	8001180 <HAL_GetTick>
 80016b6:	1b80      	subs	r0, r0, r6
 80016b8:	2864      	cmp	r0, #100	; 0x64
 80016ba:	d9f7      	bls.n	80016ac <HAL_RCC_OscConfig+0xa4>
 80016bc:	e7e6      	b.n	800168c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	d103      	bne.n	80016ce <HAL_RCC_OscConfig+0xc6>
 80016c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ca:	6023      	str	r3, [r4, #0]
 80016cc:	e7cf      	b.n	800166e <HAL_RCC_OscConfig+0x66>
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d2:	6023      	str	r3, [r4, #0]
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	e7cb      	b.n	8001674 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016dc:	4c67      	ldr	r4, [pc, #412]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80016de:	6863      	ldr	r3, [r4, #4]
 80016e0:	f013 0f0c 	tst.w	r3, #12
 80016e4:	d007      	beq.n	80016f6 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d110      	bne.n	8001712 <HAL_RCC_OscConfig+0x10a>
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	03da      	lsls	r2, r3, #15
 80016f4:	d40d      	bmi.n	8001712 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	079b      	lsls	r3, r3, #30
 80016fa:	d502      	bpl.n	8001702 <HAL_RCC_OscConfig+0xfa>
 80016fc:	692b      	ldr	r3, [r5, #16]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d186      	bne.n	8001610 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	696a      	ldr	r2, [r5, #20]
 8001706:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800170a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800170e:	6023      	str	r3, [r4, #0]
 8001710:	e786      	b.n	8001620 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001712:	692a      	ldr	r2, [r5, #16]
 8001714:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x278>)
 8001716:	b16a      	cbz	r2, 8001734 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800171c:	f7ff fd30 	bl	8001180 <HAL_GetTick>
 8001720:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	079f      	lsls	r7, r3, #30
 8001726:	d4ec      	bmi.n	8001702 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001728:	f7ff fd2a 	bl	8001180 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2802      	cmp	r0, #2
 8001730:	d9f7      	bls.n	8001722 <HAL_RCC_OscConfig+0x11a>
 8001732:	e7ab      	b.n	800168c <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001734:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001736:	f7ff fd23 	bl	8001180 <HAL_GetTick>
 800173a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800173c:	6823      	ldr	r3, [r4, #0]
 800173e:	0798      	lsls	r0, r3, #30
 8001740:	f57f af6e 	bpl.w	8001620 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fd1c 	bl	8001180 <HAL_GetTick>
 8001748:	1b80      	subs	r0, r0, r6
 800174a:	2802      	cmp	r0, #2
 800174c:	d9f6      	bls.n	800173c <HAL_RCC_OscConfig+0x134>
 800174e:	e79d      	b.n	800168c <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001750:	69aa      	ldr	r2, [r5, #24]
 8001752:	4c4a      	ldr	r4, [pc, #296]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_RCC_OscConfig+0x27c>)
 8001756:	b1da      	cbz	r2, 8001790 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800175c:	f7ff fd10 	bl	8001180 <HAL_GetTick>
 8001760:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001764:	079b      	lsls	r3, r3, #30
 8001766:	d50d      	bpl.n	8001784 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001768:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800176c:	4b46      	ldr	r3, [pc, #280]	; (8001888 <HAL_RCC_OscConfig+0x280>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	fbb3 f3f2 	udiv	r3, r3, r2
 8001774:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001776:	bf00      	nop
  }
  while (Delay --);
 8001778:	9b01      	ldr	r3, [sp, #4]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	9201      	str	r2, [sp, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <HAL_RCC_OscConfig+0x16e>
 8001782:	e751      	b.n	8001628 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fcfc 	bl	8001180 <HAL_GetTick>
 8001788:	1b80      	subs	r0, r0, r6
 800178a:	2802      	cmp	r0, #2
 800178c:	d9e9      	bls.n	8001762 <HAL_RCC_OscConfig+0x15a>
 800178e:	e77d      	b.n	800168c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001790:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001792:	f7ff fcf5 	bl	8001180 <HAL_GetTick>
 8001796:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800179a:	079f      	lsls	r7, r3, #30
 800179c:	f57f af44 	bpl.w	8001628 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fcee 	bl	8001180 <HAL_GetTick>
 80017a4:	1b80      	subs	r0, r0, r6
 80017a6:	2802      	cmp	r0, #2
 80017a8:	d9f6      	bls.n	8001798 <HAL_RCC_OscConfig+0x190>
 80017aa:	e76f      	b.n	800168c <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ac:	4c33      	ldr	r4, [pc, #204]	; (800187c <HAL_RCC_OscConfig+0x274>)
 80017ae:	69e3      	ldr	r3, [r4, #28]
 80017b0:	00d8      	lsls	r0, r3, #3
 80017b2:	d424      	bmi.n	80017fe <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80017b4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	69e3      	ldr	r3, [r4, #28]
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	61e3      	str	r3, [r4, #28]
 80017be:	69e3      	ldr	r3, [r4, #28]
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	4e30      	ldr	r6, [pc, #192]	; (800188c <HAL_RCC_OscConfig+0x284>)
 80017ca:	6833      	ldr	r3, [r6, #0]
 80017cc:	05d9      	lsls	r1, r3, #23
 80017ce:	d518      	bpl.n	8001802 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	68eb      	ldr	r3, [r5, #12]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d126      	bne.n	8001824 <HAL_RCC_OscConfig+0x21c>
 80017d6:	6a23      	ldr	r3, [r4, #32]
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017de:	f7ff fccf 	bl	8001180 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017e6:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e8:	6a23      	ldr	r3, [r4, #32]
 80017ea:	079b      	lsls	r3, r3, #30
 80017ec:	d53f      	bpl.n	800186e <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80017ee:	2f00      	cmp	r7, #0
 80017f0:	f43f af1e 	beq.w	8001630 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f4:	69e3      	ldr	r3, [r4, #28]
 80017f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fa:	61e3      	str	r3, [r4, #28]
 80017fc:	e718      	b.n	8001630 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80017fe:	2700      	movs	r7, #0
 8001800:	e7e2      	b.n	80017c8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001802:	6833      	ldr	r3, [r6, #0]
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800180a:	f7ff fcb9 	bl	8001180 <HAL_GetTick>
 800180e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	6833      	ldr	r3, [r6, #0]
 8001812:	05da      	lsls	r2, r3, #23
 8001814:	d4dc      	bmi.n	80017d0 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001816:	f7ff fcb3 	bl	8001180 <HAL_GetTick>
 800181a:	eba0 0008 	sub.w	r0, r0, r8
 800181e:	2864      	cmp	r0, #100	; 0x64
 8001820:	d9f6      	bls.n	8001810 <HAL_RCC_OscConfig+0x208>
 8001822:	e733      	b.n	800168c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	b9ab      	cbnz	r3, 8001852 <HAL_RCC_OscConfig+0x24a>
 8001826:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6223      	str	r3, [r4, #32]
 8001832:	6a23      	ldr	r3, [r4, #32]
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800183a:	f7ff fca1 	bl	8001180 <HAL_GetTick>
 800183e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001840:	6a23      	ldr	r3, [r4, #32]
 8001842:	0798      	lsls	r0, r3, #30
 8001844:	d5d3      	bpl.n	80017ee <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff fc9b 	bl	8001180 <HAL_GetTick>
 800184a:	1b80      	subs	r0, r0, r6
 800184c:	4540      	cmp	r0, r8
 800184e:	d9f7      	bls.n	8001840 <HAL_RCC_OscConfig+0x238>
 8001850:	e71c      	b.n	800168c <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001852:	2b05      	cmp	r3, #5
 8001854:	6a23      	ldr	r3, [r4, #32]
 8001856:	d103      	bne.n	8001860 <HAL_RCC_OscConfig+0x258>
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6223      	str	r3, [r4, #32]
 800185e:	e7ba      	b.n	80017d6 <HAL_RCC_OscConfig+0x1ce>
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6223      	str	r3, [r4, #32]
 8001866:	6a23      	ldr	r3, [r4, #32]
 8001868:	f023 0304 	bic.w	r3, r3, #4
 800186c:	e7b6      	b.n	80017dc <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fc87 	bl	8001180 <HAL_GetTick>
 8001872:	eba0 0008 	sub.w	r0, r0, r8
 8001876:	42b0      	cmp	r0, r6
 8001878:	d9b6      	bls.n	80017e8 <HAL_RCC_OscConfig+0x1e0>
 800187a:	e707      	b.n	800168c <HAL_RCC_OscConfig+0x84>
 800187c:	40021000 	.word	0x40021000
 8001880:	42420000 	.word	0x42420000
 8001884:	42420480 	.word	0x42420480
 8001888:	20000008 	.word	0x20000008
 800188c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x334>)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	461c      	mov	r4, r3
 8001896:	f002 020c 	and.w	r2, r2, #12
 800189a:	2a08      	cmp	r2, #8
 800189c:	d03d      	beq.n	800191a <HAL_RCC_OscConfig+0x312>
 800189e:	2300      	movs	r3, #0
 80018a0:	4e27      	ldr	r6, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80018a4:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a6:	d12b      	bne.n	8001900 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80018a8:	f7ff fc6a 	bl	8001180 <HAL_GetTick>
 80018ac:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	0199      	lsls	r1, r3, #6
 80018b2:	d41f      	bmi.n	80018f4 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b4:	6a2b      	ldr	r3, [r5, #32]
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ba:	d105      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018bc:	6862      	ldr	r2, [r4, #4]
 80018be:	68a9      	ldr	r1, [r5, #8]
 80018c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018c4:	430a      	orrs	r2, r1
 80018c6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80018ca:	6862      	ldr	r2, [r4, #4]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80018d2:	4313      	orrs	r3, r2
 80018d4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80018d6:	2301      	movs	r3, #1
 80018d8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018da:	f7ff fc51 	bl	8001180 <HAL_GetTick>
 80018de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e0:	6823      	ldr	r3, [r4, #0]
 80018e2:	019a      	lsls	r2, r3, #6
 80018e4:	f53f aea8 	bmi.w	8001638 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fc4a 	bl	8001180 <HAL_GetTick>
 80018ec:	1b40      	subs	r0, r0, r5
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d9f6      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2d8>
 80018f2:	e6cb      	b.n	800168c <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fc44 	bl	8001180 <HAL_GetTick>
 80018f8:	1bc0      	subs	r0, r0, r7
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9d7      	bls.n	80018ae <HAL_RCC_OscConfig+0x2a6>
 80018fe:	e6c5      	b.n	800168c <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001900:	f7ff fc3e 	bl	8001180 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	f57f ae95 	bpl.w	8001638 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fc37 	bl	8001180 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <HAL_RCC_OscConfig+0x2fe>
 8001918:	e6b8      	b.n	800168c <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191a:	2801      	cmp	r0, #1
 800191c:	f43f aeb7 	beq.w	800168e <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001920:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	6a2b      	ldr	r3, [r5, #32]
 8001924:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001928:	429a      	cmp	r2, r3
 800192a:	f47f ae71 	bne.w	8001610 <HAL_RCC_OscConfig+0x8>
 800192e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001930:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001934:	1ac0      	subs	r0, r0, r3
 8001936:	bf18      	it	ne
 8001938:	2001      	movne	r0, #1
 800193a:	e6a8      	b.n	800168e <HAL_RCC_OscConfig+0x86>
 800193c:	40021000 	.word	0x40021000
 8001940:	42420060 	.word	0x42420060

08001944 <HAL_RCC_GetSysClockFreq>:
{
 8001944:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001948:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800194a:	ac02      	add	r4, sp, #8
 800194c:	f103 0510 	add.w	r5, r3, #16
 8001950:	4622      	mov	r2, r4
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	3308      	adds	r3, #8
 8001958:	c203      	stmia	r2!, {r0, r1}
 800195a:	42ab      	cmp	r3, r5
 800195c:	4614      	mov	r4, r2
 800195e:	d1f7      	bne.n	8001950 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001960:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8001964:	4911      	ldr	r1, [pc, #68]	; (80019ac <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001966:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800196a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	f003 020c 	and.w	r2, r3, #12
 8001970:	2a08      	cmp	r2, #8
 8001972:	d117      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001974:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001978:	a806      	add	r0, sp, #24
 800197a:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800197c:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800197e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001982:	d50c      	bpl.n	800199e <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001984:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001986:	480a      	ldr	r0, [pc, #40]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001988:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800198c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198e:	aa06      	add	r2, sp, #24
 8001990:	4413      	add	r3, r2
 8001992:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001996:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800199a:	b007      	add	sp, #28
 800199c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x70>)
 80019a0:	4350      	muls	r0, r2
 80019a2:	e7fa      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80019a6:	e7f8      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x56>
 80019a8:	080026ec 	.word	0x080026ec
 80019ac:	40021000 	.word	0x40021000
 80019b0:	007a1200 	.word	0x007a1200
 80019b4:	003d0900 	.word	0x003d0900

080019b8 <HAL_RCC_ClockConfig>:
{
 80019b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019bc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80019be:	4604      	mov	r4, r0
 80019c0:	b910      	cbnz	r0, 80019c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019c2:	2001      	movs	r0, #1
}
 80019c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c8:	4a44      	ldr	r2, [pc, #272]	; (8001adc <HAL_RCC_ClockConfig+0x124>)
 80019ca:	6813      	ldr	r3, [r2, #0]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	428b      	cmp	r3, r1
 80019d2:	d328      	bcc.n	8001a26 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d4:	6821      	ldr	r1, [r4, #0]
 80019d6:	078e      	lsls	r6, r1, #30
 80019d8:	d430      	bmi.n	8001a3c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	07ca      	lsls	r2, r1, #31
 80019dc:	d443      	bmi.n	8001a66 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019de:	4a3f      	ldr	r2, [pc, #252]	; (8001adc <HAL_RCC_ClockConfig+0x124>)
 80019e0:	6813      	ldr	r3, [r2, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	42ab      	cmp	r3, r5
 80019e8:	d865      	bhi.n	8001ab6 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	4d3c      	ldr	r5, [pc, #240]	; (8001ae0 <HAL_RCC_ClockConfig+0x128>)
 80019ee:	f012 0f04 	tst.w	r2, #4
 80019f2:	d16c      	bne.n	8001ace <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f4:	0713      	lsls	r3, r2, #28
 80019f6:	d506      	bpl.n	8001a06 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f8:	686b      	ldr	r3, [r5, #4]
 80019fa:	6922      	ldr	r2, [r4, #16]
 80019fc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a00:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a04:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a06:	f7ff ff9d 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001a0a:	686b      	ldr	r3, [r5, #4]
 8001a0c:	4a35      	ldr	r2, [pc, #212]	; (8001ae4 <HAL_RCC_ClockConfig+0x12c>)
 8001a0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	40d8      	lsrs	r0, r3
 8001a16:	4b34      	ldr	r3, [pc, #208]	; (8001ae8 <HAL_RCC_ClockConfig+0x130>)
 8001a18:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <HAL_RCC_ClockConfig+0x134>)
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f7ff fb6d 	bl	80010fc <HAL_InitTick>
  return HAL_OK;
 8001a22:	2000      	movs	r0, #0
 8001a24:	e7ce      	b.n	80019c4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	6813      	ldr	r3, [r2, #0]
 8001a28:	f023 0307 	bic.w	r3, r3, #7
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a30:	6813      	ldr	r3, [r2, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	428b      	cmp	r3, r1
 8001a38:	d1c3      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xa>
 8001a3a:	e7cb      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1c>
 8001a3c:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a42:	bf1e      	ittt	ne
 8001a44:	685a      	ldrne	r2, [r3, #4]
 8001a46:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a4a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4e:	bf42      	ittt	mi
 8001a50:	685a      	ldrmi	r2, [r3, #4]
 8001a52:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a56:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	68a0      	ldr	r0, [r4, #8]
 8001a5c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a60:	4302      	orrs	r2, r0
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	e7b9      	b.n	80019da <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	6862      	ldr	r2, [r4, #4]
 8001a68:	4e1d      	ldr	r6, [pc, #116]	; (8001ae0 <HAL_RCC_ClockConfig+0x128>)
 8001a6a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6e:	d11a      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	d0a5      	beq.n	80019c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a76:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7c:	f023 0303 	bic.w	r3, r3, #3
 8001a80:	4313      	orrs	r3, r2
 8001a82:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a84:	f7ff fb7c 	bl	8001180 <HAL_GetTick>
 8001a88:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	6873      	ldr	r3, [r6, #4]
 8001a8c:	6862      	ldr	r2, [r4, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a96:	d0a2      	beq.n	80019de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a98:	f7ff fb72 	bl	8001180 <HAL_GetTick>
 8001a9c:	1bc0      	subs	r0, r0, r7
 8001a9e:	4540      	cmp	r0, r8
 8001aa0:	d9f3      	bls.n	8001a8a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	e78e      	b.n	80019c4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa6:	2a02      	cmp	r2, #2
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aae:	e7e1      	b.n	8001a74 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	f013 0f02 	tst.w	r3, #2
 8001ab4:	e7de      	b.n	8001a74 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	f023 0307 	bic.w	r3, r3, #7
 8001abc:	432b      	orrs	r3, r5
 8001abe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac0:	6813      	ldr	r3, [r2, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	42ab      	cmp	r3, r5
 8001ac8:	f47f af7b 	bne.w	80019c2 <HAL_RCC_ClockConfig+0xa>
 8001acc:	e78d      	b.n	80019ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ace:	686b      	ldr	r3, [r5, #4]
 8001ad0:	68e1      	ldr	r1, [r4, #12]
 8001ad2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad6:	430b      	orrs	r3, r1
 8001ad8:	606b      	str	r3, [r5, #4]
 8001ada:	e78b      	b.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	0800d795 	.word	0x0800d795
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	20000010 	.word	0x20000010

08001af0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001afe:	6810      	ldr	r0, [r2, #0]
}
 8001b00:	40d8      	lsrs	r0, r3
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000
 8001b08:	0800d7a5 	.word	0x0800d7a5
 8001b0c:	20000008 	.word	0x20000008

08001b10 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	4a03      	ldr	r2, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b1e:	6810      	ldr	r0, [r2, #0]
}
 8001b20:	40d8      	lsrs	r0, r3
 8001b22:	4770      	bx	lr
 8001b24:	40021000 	.word	0x40021000
 8001b28:	0800d7a5 	.word	0x0800d7a5
 8001b2c:	20000008 	.word	0x20000008

08001b30 <SPI_WaitFlagStateUntilTimeout.constprop.6>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b32:	4604      	mov	r4, r0
 8001b34:	460e      	mov	r6, r1
 8001b36:	4615      	mov	r5, r2
 8001b38:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b3a:	6821      	ldr	r1, [r4, #0]
 8001b3c:	688a      	ldr	r2, [r1, #8]
 8001b3e:	ea36 0302 	bics.w	r3, r6, r2
 8001b42:	d001      	beq.n	8001b48 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001b44:	2000      	movs	r0, #0
 8001b46:	e02d      	b.n	8001ba4 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8001b48:	1c6b      	adds	r3, r5, #1
 8001b4a:	d0f7      	beq.n	8001b3c <SPI_WaitFlagStateUntilTimeout.constprop.6+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001b4c:	f7ff fb18 	bl	8001180 <HAL_GetTick>
 8001b50:	1bc0      	subs	r0, r0, r7
 8001b52:	4285      	cmp	r5, r0
 8001b54:	d8f1      	bhi.n	8001b3a <SPI_WaitFlagStateUntilTimeout.constprop.6+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b5e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b60:	6862      	ldr	r2, [r4, #4]
 8001b62:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001b66:	d10a      	bne.n	8001b7e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
 8001b68:	68a2      	ldr	r2, [r4, #8]
 8001b6a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b6e:	d002      	beq.n	8001b76 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b70:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001b74:	d103      	bne.n	8001b7e <SPI_WaitFlagStateUntilTimeout.constprop.6+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b7c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b80:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001b84:	d107      	bne.n	8001b96 <SPI_WaitFlagStateUntilTimeout.constprop.6+0x66>
          SPI_RESET_CRC(hspi);
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b94:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2003      	movs	r0, #3
 8001ba0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ba6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba6:	b510      	push	{r4, lr}
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba8:	4613      	mov	r3, r2
 8001baa:	460a      	mov	r2, r1
 8001bac:	2180      	movs	r1, #128	; 0x80
{
 8001bae:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001bb0:	f7ff ffbe 	bl	8001b30 <SPI_WaitFlagStateUntilTimeout.constprop.6>
 8001bb4:	b120      	cbz	r0, 8001bc0 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8001bb6:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001bb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bba:	f043 0320 	orr.w	r3, r3, #32
 8001bbe:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8001bc0:	bd10      	pop	{r4, pc}

08001bc2 <HAL_SPI_Init>:
{
 8001bc2:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	2800      	cmp	r0, #0
 8001bc8:	d034      	beq.n	8001c34 <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bce:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001bd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bd6:	b91b      	cbnz	r3, 8001be0 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001bd8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001bdc:	f7fe fff8 	bl	8000bd0 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001be0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001be2:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001be4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001be8:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bea:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bf0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001bf2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001bf6:	4303      	orrs	r3, r0
 8001bf8:	68e0      	ldr	r0, [r4, #12]
 8001bfa:	4303      	orrs	r3, r0
 8001bfc:	6920      	ldr	r0, [r4, #16]
 8001bfe:	4303      	orrs	r3, r0
 8001c00:	6960      	ldr	r0, [r4, #20]
 8001c02:	4303      	orrs	r3, r0
 8001c04:	69e0      	ldr	r0, [r4, #28]
 8001c06:	4303      	orrs	r3, r0
 8001c08:	6a20      	ldr	r0, [r4, #32]
 8001c0a:	4303      	orrs	r3, r0
 8001c0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001c0e:	4303      	orrs	r3, r0
 8001c10:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c14:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c16:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c18:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c1c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c1e:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c20:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c22:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c28:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001c2a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c2c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001c32:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
 8001c36:	e7fc      	b.n	8001c32 <HAL_SPI_Init+0x70>

08001c38 <HAL_SPI_Transmit>:
{
 8001c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001c3c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001c3e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001c42:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8001c44:	2b01      	cmp	r3, #1
{
 8001c46:	460d      	mov	r5, r1
 8001c48:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001c4a:	f000 809c 	beq.w	8001d86 <HAL_SPI_Transmit+0x14e>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001c54:	f7ff fa94 	bl	8001180 <HAL_GetTick>
 8001c58:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c5a:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001c5e:	b2c0      	uxtb	r0, r0
 8001c60:	2801      	cmp	r0, #1
 8001c62:	f040 808e 	bne.w	8001d82 <HAL_SPI_Transmit+0x14a>
  if ((pData == NULL) || (Size == 0U))
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	d05e      	beq.n	8001d28 <HAL_SPI_Transmit+0xf0>
 8001c6a:	f1b8 0f00 	cmp.w	r8, #0
 8001c6e:	d05b      	beq.n	8001d28 <HAL_SPI_Transmit+0xf0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c70:	2303      	movs	r3, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c72:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c74:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c78:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c7a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c7c:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001c7e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001c82:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c84:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001c86:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
 8001c8a:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8001c90:	bf08      	it	eq
 8001c92:	6803      	ldreq	r3, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c94:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8001c96:	bf08      	it	eq
 8001c98:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8001c9c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8001ca0:	bf08      	it	eq
 8001ca2:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ca4:	6803      	ldr	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ca6:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ca8:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001caa:	bf5e      	ittt	pl
 8001cac:	6803      	ldrpl	r3, [r0, #0]
 8001cae:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001cb2:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cb4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001cb8:	6863      	ldr	r3, [r4, #4]
 8001cba:	d13e      	bne.n	8001d3a <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cbc:	b113      	cbz	r3, 8001cc4 <HAL_SPI_Transmit+0x8c>
 8001cbe:	f1b8 0f01 	cmp.w	r8, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_SPI_Transmit+0x9c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cc4:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001cc8:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cca:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ccc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001cd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	b9a3      	cbnz	r3, 8001d04 <HAL_SPI_Transmit+0xcc>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cda:	463a      	mov	r2, r7
 8001cdc:	4631      	mov	r1, r6
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff ff61 	bl	8001ba6 <SPI_EndRxTxTransaction>
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	d149      	bne.n	8001d7c <HAL_SPI_Transmit+0x144>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ce8:	68a3      	ldr	r3, [r4, #8]
 8001cea:	b933      	cbnz	r3, 8001cfa <HAL_SPI_Transmit+0xc2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	9201      	str	r2, [sp, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001cfc:	3000      	adds	r0, #0
 8001cfe:	bf18      	it	ne
 8001d00:	2001      	movne	r0, #1
error:
 8001d02:	e011      	b.n	8001d28 <HAL_SPI_Transmit+0xf0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	6893      	ldr	r3, [r2, #8]
 8001d08:	0798      	lsls	r0, r3, #30
 8001d0a:	d505      	bpl.n	8001d18 <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d0e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001d12:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d14:	6323      	str	r3, [r4, #48]	; 0x30
 8001d16:	e7d9      	b.n	8001ccc <HAL_SPI_Transmit+0x94>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d18:	f7ff fa32 	bl	8001180 <HAL_GetTick>
 8001d1c:	1bc0      	subs	r0, r0, r7
 8001d1e:	42b0      	cmp	r0, r6
 8001d20:	d3d8      	bcc.n	8001cd4 <HAL_SPI_Transmit+0x9c>
 8001d22:	1c71      	adds	r1, r6, #1
 8001d24:	d0d6      	beq.n	8001cd4 <HAL_SPI_Transmit+0x9c>
          errorcode = HAL_TIMEOUT;
 8001d26:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001d34:	b002      	add	sp, #8
 8001d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d3a:	b113      	cbz	r3, 8001d42 <HAL_SPI_Transmit+0x10a>
 8001d3c:	f1b8 0f01 	cmp.w	r8, #1
 8001d40:	d108      	bne.n	8001d54 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d42:	782b      	ldrb	r3, [r5, #0]
 8001d44:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d48:	3301      	adds	r3, #1
 8001d4a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0be      	beq.n	8001cda <HAL_SPI_Transmit+0xa2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	0792      	lsls	r2, r2, #30
 8001d62:	d503      	bpl.n	8001d6c <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d66:	7812      	ldrb	r2, [r2, #0]
 8001d68:	731a      	strb	r2, [r3, #12]
 8001d6a:	e7ec      	b.n	8001d46 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d6c:	f7ff fa08 	bl	8001180 <HAL_GetTick>
 8001d70:	1bc0      	subs	r0, r0, r7
 8001d72:	42b0      	cmp	r0, r6
 8001d74:	d3ee      	bcc.n	8001d54 <HAL_SPI_Transmit+0x11c>
 8001d76:	1c73      	adds	r3, r6, #1
 8001d78:	d0ec      	beq.n	8001d54 <HAL_SPI_Transmit+0x11c>
 8001d7a:	e7d4      	b.n	8001d26 <HAL_SPI_Transmit+0xee>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	6563      	str	r3, [r4, #84]	; 0x54
 8001d80:	e7b2      	b.n	8001ce8 <HAL_SPI_Transmit+0xb0>
    errorcode = HAL_BUSY;
 8001d82:	2002      	movs	r0, #2
 8001d84:	e7d0      	b.n	8001d28 <HAL_SPI_Transmit+0xf0>
  __HAL_LOCK(hspi);
 8001d86:	2002      	movs	r0, #2
 8001d88:	e7d4      	b.n	8001d34 <HAL_SPI_Transmit+0xfc>
	...

08001d8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d8c:	6a03      	ldr	r3, [r0, #32]
{
 8001d8e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d9a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d9e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001da2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001da4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001da6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001daa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001dac:	4d0a      	ldr	r5, [pc, #40]	; (8001dd8 <TIM_OC1_SetConfig+0x4c>)
 8001dae:	42a8      	cmp	r0, r5
 8001db0:	d10b      	bne.n	8001dca <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001db2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001db4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001db8:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dbe:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001dc2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dc4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dc8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dcc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dce:	684a      	ldr	r2, [r1, #4]
 8001dd0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dd2:	6203      	str	r3, [r0, #32]
}
 8001dd4:	bd70      	pop	{r4, r5, r6, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40012c00 	.word	0x40012c00

08001ddc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ddc:	6a03      	ldr	r3, [r0, #32]
{
 8001dde:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001de4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001de6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001de8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001dee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001df2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001df4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001df6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001dfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001dfe:	4d0b      	ldr	r5, [pc, #44]	; (8001e2c <TIM_OC3_SetConfig+0x50>)
 8001e00:	42a8      	cmp	r0, r5
 8001e02:	d10d      	bne.n	8001e20 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e04:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e0e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e12:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001e16:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e1c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e24:	684a      	ldr	r2, [r1, #4]
 8001e26:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e28:	6203      	str	r3, [r0, #32]
}
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	40012c00 	.word	0x40012c00

08001e30 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e30:	6a03      	ldr	r3, [r0, #32]
{
 8001e32:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e3a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e3e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001e42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001e4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001e50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e54:	4d06      	ldr	r5, [pc, #24]	; (8001e70 <TIM_OC4_SetConfig+0x40>)
 8001e56:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e58:	bf02      	ittt	eq
 8001e5a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e5c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e60:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e66:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e68:	684a      	ldr	r2, [r1, #4]
 8001e6a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e6c:	6203      	str	r3, [r0, #32]
}
 8001e6e:	bd30      	pop	{r4, r5, pc}
 8001e70:	40012c00 	.word	0x40012c00

08001e74 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e74:	6803      	ldr	r3, [r0, #0]
}
 8001e76:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001e88:	bf1e      	ittt	ne
 8001e8a:	681a      	ldrne	r2, [r3, #0]
 8001e8c:	f042 0201 	orrne.w	r2, r2, #1
 8001e90:	601a      	strne	r2, [r3, #0]
}
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001e94:	6803      	ldr	r3, [r0, #0]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 8001e9e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001ea2:	6a19      	ldr	r1, [r3, #32]
 8001ea4:	4211      	tst	r1, r2
 8001ea6:	d108      	bne.n	8001eba <HAL_TIM_Base_Stop_IT+0x26>
 8001ea8:	f240 4244 	movw	r2, #1092	; 0x444
 8001eac:	6a19      	ldr	r1, [r3, #32]
 8001eae:	4211      	tst	r1, r2
 8001eb0:	bf02      	ittt	eq
 8001eb2:	681a      	ldreq	r2, [r3, #0]
 8001eb4:	f022 0201 	biceq.w	r2, r2, #1
 8001eb8:	601a      	streq	r2, [r3, #0]
}
 8001eba:	2000      	movs	r0, #0
 8001ebc:	4770      	bx	lr

08001ebe <HAL_TIM_PWM_MspInit>:
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_TIM_IC_CaptureCallback>:
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_TriggerCallback>:
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ec8:	6803      	ldr	r3, [r0, #0]
{
 8001eca:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ecc:	691a      	ldr	r2, [r3, #16]
{
 8001ece:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed0:	0791      	lsls	r1, r2, #30
 8001ed2:	d50e      	bpl.n	8001ef2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	0792      	lsls	r2, r2, #30
 8001ed8:	d50b      	bpl.n	8001ef2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eda:	f06f 0202 	mvn.w	r2, #2
 8001ede:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee6:	079b      	lsls	r3, r3, #30
 8001ee8:	d077      	beq.n	8001fda <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	f7ff ffea 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	691a      	ldr	r2, [r3, #16]
 8001ef6:	0750      	lsls	r0, r2, #29
 8001ef8:	d510      	bpl.n	8001f1c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	0751      	lsls	r1, r2, #29
 8001efe:	d50d      	bpl.n	8001f1c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f00:	f06f 0204 	mvn.w	r2, #4
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f06:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f08:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f10:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f12:	d068      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f14:	f7ff ffd5 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	0712      	lsls	r2, r2, #28
 8001f22:	d50f      	bpl.n	8001f44 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	0710      	lsls	r0, r2, #28
 8001f28:	d50c      	bpl.n	8001f44 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f2a:	f06f 0208 	mvn.w	r2, #8
 8001f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f30:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f32:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f34:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f36:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001f38:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3a:	d05a      	beq.n	8001ff2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3c:	f7ff ffc1 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f40:	2300      	movs	r3, #0
 8001f42:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f44:	6823      	ldr	r3, [r4, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	06d2      	lsls	r2, r2, #27
 8001f4a:	d510      	bpl.n	8001f6e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	06d0      	lsls	r0, r2, #27
 8001f50:	d50d      	bpl.n	8001f6e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f52:	f06f 0210 	mvn.w	r2, #16
 8001f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f58:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f5a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f5e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f64:	d04b      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	f7ff ffac 	bl	8001ec2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	691a      	ldr	r2, [r3, #16]
 8001f72:	07d1      	lsls	r1, r2, #31
 8001f74:	d508      	bpl.n	8001f88 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	07d2      	lsls	r2, r2, #31
 8001f7a:	d505      	bpl.n	8001f88 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f7c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f80:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f82:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f84:	f7ff f80c 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	0610      	lsls	r0, r2, #24
 8001f8e:	d508      	bpl.n	8001fa2 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	0611      	lsls	r1, r2, #24
 8001f94:	d505      	bpl.n	8001fa2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f96:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f9c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f9e:	f000 f9ec 	bl	800237a <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	691a      	ldr	r2, [r3, #16]
 8001fa6:	0652      	lsls	r2, r2, #25
 8001fa8:	d508      	bpl.n	8001fbc <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	0650      	lsls	r0, r2, #25
 8001fae:	d505      	bpl.n	8001fbc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001fb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001fb8:	f7ff ff85 	bl	8001ec6 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	0691      	lsls	r1, r2, #26
 8001fc2:	d522      	bpl.n	800200a <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	0692      	lsls	r2, r2, #26
 8001fc8:	d51f      	bpl.n	800200a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fca:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8001fce:	4620      	mov	r0, r4
}
 8001fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001fd6:	f000 b9cf 	b.w	8002378 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fda:	f7ff ff71 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff ff70 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fe4:	e783      	b.n	8001eee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	f7ff ff6b 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff ff6a 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ff0:	e792      	b.n	8001f18 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff2:	f7ff ff65 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff ff64 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ffc:	e7a0      	b.n	8001f40 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	f7ff ff5f 	bl	8001ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff ff5e 	bl	8001ec4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002008:	e7af      	b.n	8001f6a <HAL_TIM_IRQHandler+0xa2>
}
 800200a:	bd10      	pop	{r4, pc}

0800200c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800200e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	4290      	cmp	r0, r2
 8002012:	d00a      	beq.n	800202a <TIM_Base_SetConfig+0x1e>
 8002014:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0x1e>
 800201a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800201e:	4290      	cmp	r0, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x1e>
 8002022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002026:	4290      	cmp	r0, r2
 8002028:	d115      	bne.n	8002056 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800202a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002030:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <TIM_Base_SetConfig+0x6c>)
 8002034:	4290      	cmp	r0, r2
 8002036:	d00a      	beq.n	800204e <TIM_Base_SetConfig+0x42>
 8002038:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0x42>
 800203e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002042:	4290      	cmp	r0, r2
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0x42>
 8002046:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800204a:	4290      	cmp	r0, r2
 800204c:	d103      	bne.n	8002056 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002054:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002056:	694a      	ldr	r2, [r1, #20]
 8002058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800205c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800205e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002060:	688b      	ldr	r3, [r1, #8]
 8002062:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002064:	680b      	ldr	r3, [r1, #0]
 8002066:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <TIM_Base_SetConfig+0x6c>)
 800206a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800206c:	bf04      	itt	eq
 800206e:	690b      	ldreq	r3, [r1, #16]
 8002070:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002072:	2301      	movs	r3, #1
 8002074:	6143      	str	r3, [r0, #20]
}
 8002076:	4770      	bx	lr
 8002078:	40012c00 	.word	0x40012c00

0800207c <HAL_TIM_Base_Init>:
{
 800207c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800207e:	4604      	mov	r4, r0
 8002080:	b1a0      	cbz	r0, 80020ac <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002082:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002086:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800208a:	b91b      	cbnz	r3, 8002094 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800208c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002090:	f7fe fe56 	bl	8000d40 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002094:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002096:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002098:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209c:	1d21      	adds	r1, r4, #4
 800209e:	f7ff ffb5 	bl	800200c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020a2:	2301      	movs	r3, #1
  return HAL_OK;
 80020a4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80020a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80020aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020ac:	2001      	movs	r0, #1
 80020ae:	e7fc      	b.n	80020aa <HAL_TIM_Base_Init+0x2e>

080020b0 <HAL_TIM_PWM_Init>:
{
 80020b0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020b2:	4604      	mov	r4, r0
 80020b4:	b1a0      	cbz	r0, 80020e0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020be:	b91b      	cbnz	r3, 80020c8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80020c4:	f7ff fefb 	bl	8001ebe <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ca:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d0:	1d21      	adds	r1, r4, #4
 80020d2:	f7ff ff9b 	bl	800200c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80020d6:	2301      	movs	r3, #1
  return HAL_OK;
 80020d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80020da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80020de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e7fc      	b.n	80020de <HAL_TIM_PWM_Init+0x2e>

080020e4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e4:	6a03      	ldr	r3, [r0, #32]
{
 80020e6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e8:	f023 0310 	bic.w	r3, r3, #16
 80020ec:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020ee:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80020f0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80020f2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020f4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020f6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002100:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002104:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002108:	4d0b      	ldr	r5, [pc, #44]	; (8002138 <TIM_OC2_SetConfig+0x54>)
 800210a:	42a8      	cmp	r0, r5
 800210c:	d10d      	bne.n	800212a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800210e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002110:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002114:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002118:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800211c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002120:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002126:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800212a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800212c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800212e:	684a      	ldr	r2, [r1, #4]
 8002130:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002132:	6203      	str	r3, [r0, #32]
}
 8002134:	bd70      	pop	{r4, r5, r6, pc}
 8002136:	bf00      	nop
 8002138:	40012c00 	.word	0x40012c00

0800213c <HAL_TIM_PWM_ConfigChannel>:
{
 800213c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800213e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002142:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002144:	2b01      	cmp	r3, #1
 8002146:	f04f 0002 	mov.w	r0, #2
 800214a:	d025      	beq.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800214c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800214e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002152:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002156:	2a0c      	cmp	r2, #12
 8002158:	d818      	bhi.n	800218c <HAL_TIM_PWM_ConfigChannel+0x50>
 800215a:	e8df f002 	tbb	[pc, r2]
 800215e:	1707      	.short	0x1707
 8002160:	171e1717 	.word	0x171e1717
 8002164:	172f1717 	.word	0x172f1717
 8002168:	1717      	.short	0x1717
 800216a:	40          	.byte	0x40
 800216b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800216c:	6820      	ldr	r0, [r4, #0]
 800216e:	f7ff fe0d 	bl	8001d8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002172:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002174:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	f042 0208 	orr.w	r2, r2, #8
 800217c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	f022 0204 	bic.w	r2, r2, #4
 8002184:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002186:	699a      	ldr	r2, [r3, #24]
 8002188:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800218a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800218c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800218e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002190:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002194:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002198:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800219a:	6820      	ldr	r0, [r4, #0]
 800219c:	f7ff ffa2 	bl	80020e4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b4:	699a      	ldr	r2, [r3, #24]
 80021b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021ba:	e7e6      	b.n	800218a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021bc:	6820      	ldr	r0, [r4, #0]
 80021be:	f7ff fe0d 	bl	8001ddc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021c4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	f042 0208 	orr.w	r2, r2, #8
 80021cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	f022 0204 	bic.w	r2, r2, #4
 80021d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021da:	61da      	str	r2, [r3, #28]
      break;
 80021dc:	e7d6      	b.n	800218c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021de:	6820      	ldr	r0, [r4, #0]
 80021e0:	f7ff fe26 	bl	8001e30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021e4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021e6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021f8:	69da      	ldr	r2, [r3, #28]
 80021fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021fe:	e7ec      	b.n	80021da <HAL_TIM_PWM_ConfigChannel+0x9e>

08002200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002200:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002202:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002204:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002206:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800220a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800220e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002210:	6083      	str	r3, [r0, #8]
}
 8002212:	bd10      	pop	{r4, pc}

08002214 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002214:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002218:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800221a:	2b01      	cmp	r3, #1
{
 800221c:	4604      	mov	r4, r0
 800221e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002222:	d019      	beq.n	8002258 <HAL_TIM_ConfigClockSource+0x44>
 8002224:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002226:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800222a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800222c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002230:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800223a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800223c:	680b      	ldr	r3, [r1, #0]
 800223e:	2b40      	cmp	r3, #64	; 0x40
 8002240:	d065      	beq.n	800230e <HAL_TIM_ConfigClockSource+0xfa>
 8002242:	d815      	bhi.n	8002270 <HAL_TIM_ConfigClockSource+0x5c>
 8002244:	2b10      	cmp	r3, #16
 8002246:	d00c      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x4e>
 8002248:	d807      	bhi.n	800225a <HAL_TIM_ConfigClockSource+0x46>
 800224a:	b153      	cbz	r3, 8002262 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800224c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800224e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002250:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002254:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002258:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800225a:	2b20      	cmp	r3, #32
 800225c:	d001      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x4e>
 800225e:	2b30      	cmp	r3, #48	; 0x30
 8002260:	d1f4      	bne.n	800224c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002262:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002264:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002268:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800226c:	4313      	orrs	r3, r2
 800226e:	e01a      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002270:	2b60      	cmp	r3, #96	; 0x60
 8002272:	d034      	beq.n	80022de <HAL_TIM_ConfigClockSource+0xca>
 8002274:	d819      	bhi.n	80022aa <HAL_TIM_ConfigClockSource+0x96>
 8002276:	2b50      	cmp	r3, #80	; 0x50
 8002278:	d1e8      	bne.n	800224c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800227a:	684a      	ldr	r2, [r1, #4]
 800227c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800227e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002280:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002282:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002286:	f025 0501 	bic.w	r5, r5, #1
 800228a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800228e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002294:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002298:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800229a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800229c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022a2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80022a6:	6083      	str	r3, [r0, #8]
 80022a8:	e7d0      	b.n	800224c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80022aa:	2b70      	cmp	r3, #112	; 0x70
 80022ac:	d00c      	beq.n	80022c8 <HAL_TIM_ConfigClockSource+0xb4>
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	d1cb      	bne.n	800224c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80022b4:	68cb      	ldr	r3, [r1, #12]
 80022b6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80022ba:	f7ff ffa1 	bl	8002200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	6893      	ldr	r3, [r2, #8]
 80022c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c6:	e008      	b.n	80022da <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80022c8:	68cb      	ldr	r3, [r1, #12]
 80022ca:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80022ce:	f7ff ff97 	bl	8002200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022d2:	6822      	ldr	r2, [r4, #0]
 80022d4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022da:	6093      	str	r3, [r2, #8]
      break;
 80022dc:	e7b6      	b.n	800224c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022de:	684d      	ldr	r5, [r1, #4]
 80022e0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e2:	6a01      	ldr	r1, [r0, #32]
 80022e4:	f021 0110 	bic.w	r1, r1, #16
 80022e8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ea:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80022ec:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ee:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80022f6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022fa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80022fe:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002300:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002302:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002308:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800230c:	e7cb      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800230e:	684a      	ldr	r2, [r1, #4]
 8002310:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002312:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002314:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002316:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800231a:	f025 0501 	bic.w	r5, r5, #1
 800231e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002320:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002322:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002328:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800232c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800232e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002330:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002336:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800233a:	e7b4      	b.n	80022a6 <HAL_TIM_ConfigClockSource+0x92>

0800233c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800233c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002340:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002342:	2b01      	cmp	r3, #1
 8002344:	f04f 0302 	mov.w	r3, #2
 8002348:	d014      	beq.n	8002374 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800234a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002350:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002352:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002354:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002356:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002358:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800235c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002360:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002362:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002364:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002366:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002368:	2301      	movs	r3, #1
 800236a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800236e:	2300      	movs	r3, #0
 8002370:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002374:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002376:	bd30      	pop	{r4, r5, pc}

08002378 <HAL_TIMEx_CommutCallback>:
 8002378:	4770      	bx	lr

0800237a <HAL_TIMEx_BreakCallback>:
 800237a:	4770      	bx	lr

0800237c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002380:	6803      	ldr	r3, [r0, #0]
 8002382:	68c1      	ldr	r1, [r0, #12]
 8002384:	691a      	ldr	r2, [r3, #16]
 8002386:	2419      	movs	r4, #25
 8002388:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800238c:	430a      	orrs	r2, r1
 800238e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002390:	6882      	ldr	r2, [r0, #8]
 8002392:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002394:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002396:	4302      	orrs	r2, r0
 8002398:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 800239a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800239e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023a2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	69a9      	ldr	r1, [r5, #24]
 80023ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023b0:	430a      	orrs	r2, r1
 80023b2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <UART_SetConfig+0x70>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d114      	bne.n	80023e4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023ba:	f7ff fba9 	bl	8001b10 <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023be:	4360      	muls	r0, r4
 80023c0:	686c      	ldr	r4, [r5, #4]
 80023c2:	2264      	movs	r2, #100	; 0x64
 80023c4:	00a4      	lsls	r4, r4, #2
 80023c6:	fbb0 f0f4 	udiv	r0, r0, r4
 80023ca:	fbb0 f1f2 	udiv	r1, r0, r2
 80023ce:	fb02 0311 	mls	r3, r2, r1, r0
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	3332      	adds	r3, #50	; 0x32
 80023d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80023da:	682c      	ldr	r4, [r5, #0]
 80023dc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80023e0:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80023e4:	f7ff fb84 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 80023e8:	e7e9      	b.n	80023be <UART_SetConfig+0x42>
 80023ea:	bf00      	nop
 80023ec:	40013800 	.word	0x40013800

080023f0 <HAL_UART_Init>:
{
 80023f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023f2:	4604      	mov	r4, r0
 80023f4:	b340      	cbz	r0, 8002448 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023fe:	b91b      	cbnz	r3, 8002408 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002400:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002404:	f7fe fd12 	bl	8000e2c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002408:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800240a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800240c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002410:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002412:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002418:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800241a:	f7ff ffaf 	bl	800237c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002420:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002430:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002438:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800243a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800243e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002442:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002446:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002448:	2001      	movs	r0, #1
 800244a:	e7fc      	b.n	8002446 <HAL_UART_Init+0x56>

0800244c <calloc>:
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <calloc+0xc>)
 800244e:	460a      	mov	r2, r1
 8002450:	4601      	mov	r1, r0
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	f000 b844 	b.w	80024e0 <_calloc_r>
 8002458:	20000014 	.word	0x20000014

0800245c <__errno>:
 800245c:	4b01      	ldr	r3, [pc, #4]	; (8002464 <__errno+0x8>)
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	20000014 	.word	0x20000014

08002468 <__libc_init_array>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	2500      	movs	r5, #0
 800246c:	4e0c      	ldr	r6, [pc, #48]	; (80024a0 <__libc_init_array+0x38>)
 800246e:	4c0d      	ldr	r4, [pc, #52]	; (80024a4 <__libc_init_array+0x3c>)
 8002470:	1ba4      	subs	r4, r4, r6
 8002472:	10a4      	asrs	r4, r4, #2
 8002474:	42a5      	cmp	r5, r4
 8002476:	d109      	bne.n	800248c <__libc_init_array+0x24>
 8002478:	f000 f92c 	bl	80026d4 <_init>
 800247c:	2500      	movs	r5, #0
 800247e:	4e0a      	ldr	r6, [pc, #40]	; (80024a8 <__libc_init_array+0x40>)
 8002480:	4c0a      	ldr	r4, [pc, #40]	; (80024ac <__libc_init_array+0x44>)
 8002482:	1ba4      	subs	r4, r4, r6
 8002484:	10a4      	asrs	r4, r4, #2
 8002486:	42a5      	cmp	r5, r4
 8002488:	d105      	bne.n	8002496 <__libc_init_array+0x2e>
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002490:	4798      	blx	r3
 8002492:	3501      	adds	r5, #1
 8002494:	e7ee      	b.n	8002474 <__libc_init_array+0xc>
 8002496:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800249a:	4798      	blx	r3
 800249c:	3501      	adds	r5, #1
 800249e:	e7f2      	b.n	8002486 <__libc_init_array+0x1e>
 80024a0:	0800d7b0 	.word	0x0800d7b0
 80024a4:	0800d7b0 	.word	0x0800d7b0
 80024a8:	0800d7b0 	.word	0x0800d7b0
 80024ac:	0800d7b4 	.word	0x0800d7b4

080024b0 <malloc>:
 80024b0:	4b02      	ldr	r3, [pc, #8]	; (80024bc <malloc+0xc>)
 80024b2:	4601      	mov	r1, r0
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	f000 b86d 	b.w	8002594 <_malloc_r>
 80024ba:	bf00      	nop
 80024bc:	20000014 	.word	0x20000014

080024c0 <free>:
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <free+0xc>)
 80024c2:	4601      	mov	r1, r0
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f000 b819 	b.w	80024fc <_free_r>
 80024ca:	bf00      	nop
 80024cc:	20000014 	.word	0x20000014

080024d0 <memset>:
 80024d0:	4603      	mov	r3, r0
 80024d2:	4402      	add	r2, r0
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d100      	bne.n	80024da <memset+0xa>
 80024d8:	4770      	bx	lr
 80024da:	f803 1b01 	strb.w	r1, [r3], #1
 80024de:	e7f9      	b.n	80024d4 <memset+0x4>

080024e0 <_calloc_r>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	fb02 f401 	mul.w	r4, r2, r1
 80024e6:	4621      	mov	r1, r4
 80024e8:	f000 f854 	bl	8002594 <_malloc_r>
 80024ec:	4605      	mov	r5, r0
 80024ee:	b118      	cbz	r0, 80024f8 <_calloc_r+0x18>
 80024f0:	4622      	mov	r2, r4
 80024f2:	2100      	movs	r1, #0
 80024f4:	f7ff ffec 	bl	80024d0 <memset>
 80024f8:	4628      	mov	r0, r5
 80024fa:	bd38      	pop	{r3, r4, r5, pc}

080024fc <_free_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	4605      	mov	r5, r0
 8002500:	2900      	cmp	r1, #0
 8002502:	d043      	beq.n	800258c <_free_r+0x90>
 8002504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002508:	1f0c      	subs	r4, r1, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	bfb8      	it	lt
 800250e:	18e4      	addlt	r4, r4, r3
 8002510:	f000 f8de 	bl	80026d0 <__malloc_lock>
 8002514:	4a1e      	ldr	r2, [pc, #120]	; (8002590 <_free_r+0x94>)
 8002516:	6813      	ldr	r3, [r2, #0]
 8002518:	4610      	mov	r0, r2
 800251a:	b933      	cbnz	r3, 800252a <_free_r+0x2e>
 800251c:	6063      	str	r3, [r4, #4]
 800251e:	6014      	str	r4, [r2, #0]
 8002520:	4628      	mov	r0, r5
 8002522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002526:	f000 b8d4 	b.w	80026d2 <__malloc_unlock>
 800252a:	42a3      	cmp	r3, r4
 800252c:	d90b      	bls.n	8002546 <_free_r+0x4a>
 800252e:	6821      	ldr	r1, [r4, #0]
 8002530:	1862      	adds	r2, r4, r1
 8002532:	4293      	cmp	r3, r2
 8002534:	bf01      	itttt	eq
 8002536:	681a      	ldreq	r2, [r3, #0]
 8002538:	685b      	ldreq	r3, [r3, #4]
 800253a:	1852      	addeq	r2, r2, r1
 800253c:	6022      	streq	r2, [r4, #0]
 800253e:	6063      	str	r3, [r4, #4]
 8002540:	6004      	str	r4, [r0, #0]
 8002542:	e7ed      	b.n	8002520 <_free_r+0x24>
 8002544:	4613      	mov	r3, r2
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	b10a      	cbz	r2, 800254e <_free_r+0x52>
 800254a:	42a2      	cmp	r2, r4
 800254c:	d9fa      	bls.n	8002544 <_free_r+0x48>
 800254e:	6819      	ldr	r1, [r3, #0]
 8002550:	1858      	adds	r0, r3, r1
 8002552:	42a0      	cmp	r0, r4
 8002554:	d10b      	bne.n	800256e <_free_r+0x72>
 8002556:	6820      	ldr	r0, [r4, #0]
 8002558:	4401      	add	r1, r0
 800255a:	1858      	adds	r0, r3, r1
 800255c:	4282      	cmp	r2, r0
 800255e:	6019      	str	r1, [r3, #0]
 8002560:	d1de      	bne.n	8002520 <_free_r+0x24>
 8002562:	6810      	ldr	r0, [r2, #0]
 8002564:	6852      	ldr	r2, [r2, #4]
 8002566:	4401      	add	r1, r0
 8002568:	6019      	str	r1, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]
 800256c:	e7d8      	b.n	8002520 <_free_r+0x24>
 800256e:	d902      	bls.n	8002576 <_free_r+0x7a>
 8002570:	230c      	movs	r3, #12
 8002572:	602b      	str	r3, [r5, #0]
 8002574:	e7d4      	b.n	8002520 <_free_r+0x24>
 8002576:	6820      	ldr	r0, [r4, #0]
 8002578:	1821      	adds	r1, r4, r0
 800257a:	428a      	cmp	r2, r1
 800257c:	bf01      	itttt	eq
 800257e:	6811      	ldreq	r1, [r2, #0]
 8002580:	6852      	ldreq	r2, [r2, #4]
 8002582:	1809      	addeq	r1, r1, r0
 8002584:	6021      	streq	r1, [r4, #0]
 8002586:	6062      	str	r2, [r4, #4]
 8002588:	605c      	str	r4, [r3, #4]
 800258a:	e7c9      	b.n	8002520 <_free_r+0x24>
 800258c:	bd38      	pop	{r3, r4, r5, pc}
 800258e:	bf00      	nop
 8002590:	200000a0 	.word	0x200000a0

08002594 <_malloc_r>:
 8002594:	b570      	push	{r4, r5, r6, lr}
 8002596:	1ccd      	adds	r5, r1, #3
 8002598:	f025 0503 	bic.w	r5, r5, #3
 800259c:	3508      	adds	r5, #8
 800259e:	2d0c      	cmp	r5, #12
 80025a0:	bf38      	it	cc
 80025a2:	250c      	movcc	r5, #12
 80025a4:	2d00      	cmp	r5, #0
 80025a6:	4606      	mov	r6, r0
 80025a8:	db01      	blt.n	80025ae <_malloc_r+0x1a>
 80025aa:	42a9      	cmp	r1, r5
 80025ac:	d903      	bls.n	80025b6 <_malloc_r+0x22>
 80025ae:	230c      	movs	r3, #12
 80025b0:	6033      	str	r3, [r6, #0]
 80025b2:	2000      	movs	r0, #0
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
 80025b6:	f000 f88b 	bl	80026d0 <__malloc_lock>
 80025ba:	4a21      	ldr	r2, [pc, #132]	; (8002640 <_malloc_r+0xac>)
 80025bc:	6814      	ldr	r4, [r2, #0]
 80025be:	4621      	mov	r1, r4
 80025c0:	b991      	cbnz	r1, 80025e8 <_malloc_r+0x54>
 80025c2:	4c20      	ldr	r4, [pc, #128]	; (8002644 <_malloc_r+0xb0>)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	b91b      	cbnz	r3, 80025d0 <_malloc_r+0x3c>
 80025c8:	4630      	mov	r0, r6
 80025ca:	f000 f871 	bl	80026b0 <_sbrk_r>
 80025ce:	6020      	str	r0, [r4, #0]
 80025d0:	4629      	mov	r1, r5
 80025d2:	4630      	mov	r0, r6
 80025d4:	f000 f86c 	bl	80026b0 <_sbrk_r>
 80025d8:	1c43      	adds	r3, r0, #1
 80025da:	d124      	bne.n	8002626 <_malloc_r+0x92>
 80025dc:	230c      	movs	r3, #12
 80025de:	4630      	mov	r0, r6
 80025e0:	6033      	str	r3, [r6, #0]
 80025e2:	f000 f876 	bl	80026d2 <__malloc_unlock>
 80025e6:	e7e4      	b.n	80025b2 <_malloc_r+0x1e>
 80025e8:	680b      	ldr	r3, [r1, #0]
 80025ea:	1b5b      	subs	r3, r3, r5
 80025ec:	d418      	bmi.n	8002620 <_malloc_r+0x8c>
 80025ee:	2b0b      	cmp	r3, #11
 80025f0:	d90f      	bls.n	8002612 <_malloc_r+0x7e>
 80025f2:	600b      	str	r3, [r1, #0]
 80025f4:	18cc      	adds	r4, r1, r3
 80025f6:	50cd      	str	r5, [r1, r3]
 80025f8:	4630      	mov	r0, r6
 80025fa:	f000 f86a 	bl	80026d2 <__malloc_unlock>
 80025fe:	f104 000b 	add.w	r0, r4, #11
 8002602:	1d23      	adds	r3, r4, #4
 8002604:	f020 0007 	bic.w	r0, r0, #7
 8002608:	1ac3      	subs	r3, r0, r3
 800260a:	d0d3      	beq.n	80025b4 <_malloc_r+0x20>
 800260c:	425a      	negs	r2, r3
 800260e:	50e2      	str	r2, [r4, r3]
 8002610:	e7d0      	b.n	80025b4 <_malloc_r+0x20>
 8002612:	684b      	ldr	r3, [r1, #4]
 8002614:	428c      	cmp	r4, r1
 8002616:	bf16      	itet	ne
 8002618:	6063      	strne	r3, [r4, #4]
 800261a:	6013      	streq	r3, [r2, #0]
 800261c:	460c      	movne	r4, r1
 800261e:	e7eb      	b.n	80025f8 <_malloc_r+0x64>
 8002620:	460c      	mov	r4, r1
 8002622:	6849      	ldr	r1, [r1, #4]
 8002624:	e7cc      	b.n	80025c0 <_malloc_r+0x2c>
 8002626:	1cc4      	adds	r4, r0, #3
 8002628:	f024 0403 	bic.w	r4, r4, #3
 800262c:	42a0      	cmp	r0, r4
 800262e:	d005      	beq.n	800263c <_malloc_r+0xa8>
 8002630:	1a21      	subs	r1, r4, r0
 8002632:	4630      	mov	r0, r6
 8002634:	f000 f83c 	bl	80026b0 <_sbrk_r>
 8002638:	3001      	adds	r0, #1
 800263a:	d0cf      	beq.n	80025dc <_malloc_r+0x48>
 800263c:	6025      	str	r5, [r4, #0]
 800263e:	e7db      	b.n	80025f8 <_malloc_r+0x64>
 8002640:	200000a0 	.word	0x200000a0
 8002644:	200000a4 	.word	0x200000a4

08002648 <rand>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <rand+0x50>)
 800264c:	681c      	ldr	r4, [r3, #0]
 800264e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002650:	b97b      	cbnz	r3, 8002672 <rand+0x2a>
 8002652:	2018      	movs	r0, #24
 8002654:	f7ff ff2c 	bl	80024b0 <malloc>
 8002658:	4a10      	ldr	r2, [pc, #64]	; (800269c <rand+0x54>)
 800265a:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <rand+0x58>)
 800265c:	63a0      	str	r0, [r4, #56]	; 0x38
 800265e:	e9c0 2300 	strd	r2, r3, [r0]
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <rand+0x5c>)
 8002664:	2201      	movs	r2, #1
 8002666:	6083      	str	r3, [r0, #8]
 8002668:	230b      	movs	r3, #11
 800266a:	8183      	strh	r3, [r0, #12]
 800266c:	2300      	movs	r3, #0
 800266e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8002672:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002674:	480c      	ldr	r0, [pc, #48]	; (80026a8 <rand+0x60>)
 8002676:	690a      	ldr	r2, [r1, #16]
 8002678:	694b      	ldr	r3, [r1, #20]
 800267a:	4350      	muls	r0, r2
 800267c:	4c0b      	ldr	r4, [pc, #44]	; (80026ac <rand+0x64>)
 800267e:	fb04 0003 	mla	r0, r4, r3, r0
 8002682:	fba2 2304 	umull	r2, r3, r2, r4
 8002686:	4403      	add	r3, r0
 8002688:	1c54      	adds	r4, r2, #1
 800268a:	f143 0500 	adc.w	r5, r3, #0
 800268e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8002692:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8002696:	bd38      	pop	{r3, r4, r5, pc}
 8002698:	20000014 	.word	0x20000014
 800269c:	abcd330e 	.word	0xabcd330e
 80026a0:	e66d1234 	.word	0xe66d1234
 80026a4:	0005deec 	.word	0x0005deec
 80026a8:	5851f42d 	.word	0x5851f42d
 80026ac:	4c957f2d 	.word	0x4c957f2d

080026b0 <_sbrk_r>:
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	2300      	movs	r3, #0
 80026b4:	4c05      	ldr	r4, [pc, #20]	; (80026cc <_sbrk_r+0x1c>)
 80026b6:	4605      	mov	r5, r0
 80026b8:	4608      	mov	r0, r1
 80026ba:	6023      	str	r3, [r4, #0]
 80026bc:	f7fe fcb2 	bl	8001024 <_sbrk>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d102      	bne.n	80026ca <_sbrk_r+0x1a>
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	b103      	cbz	r3, 80026ca <_sbrk_r+0x1a>
 80026c8:	602b      	str	r3, [r5, #0]
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	20000344 	.word	0x20000344

080026d0 <__malloc_lock>:
 80026d0:	4770      	bx	lr

080026d2 <__malloc_unlock>:
 80026d2:	4770      	bx	lr

080026d4 <_init>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr

080026e0 <_fini>:
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	bf00      	nop
 80026e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e6:	bc08      	pop	{r3}
 80026e8:	469e      	mov	lr, r3
 80026ea:	4770      	bx	lr
