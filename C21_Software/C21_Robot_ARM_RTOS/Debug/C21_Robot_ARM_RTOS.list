
C21_Robot_ARM_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800cf80  0800cf80  0001cf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0cc  0800d0cc  00020194  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0cc  0800d0cc  00020194  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0cc  0800d0cc  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0cc  0800d0cc  0001d0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0d0  0800d0d0  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  0800d0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000290c  20000194  0800d268  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002aa0  0800d268  00022aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003af94  00000000  00000000  000201bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006892  00000000  00000000  0005b151  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024e0  00000000  00000000  000619e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002238  00000000  00000000  00063ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b3f5  00000000  00000000  00066100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ed0f  00000000  00000000  000814f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008840e  00000000  00000000  000a0204  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ad0  00000000  00000000  00128690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000194 	.word	0x20000194
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cf68 	.word	0x0800cf68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000198 	.word	0x20000198
 800014c:	0800cf68 	.word	0x0800cf68

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fmul>:
 8000a9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aa0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000aa4:	bf1e      	ittt	ne
 8000aa6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aaa:	ea92 0f0c 	teqne	r2, ip
 8000aae:	ea93 0f0c 	teqne	r3, ip
 8000ab2:	d06f      	beq.n	8000b94 <__aeabi_fmul+0xf8>
 8000ab4:	441a      	add	r2, r3
 8000ab6:	ea80 0c01 	eor.w	ip, r0, r1
 8000aba:	0240      	lsls	r0, r0, #9
 8000abc:	bf18      	it	ne
 8000abe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ac2:	d01e      	beq.n	8000b02 <__aeabi_fmul+0x66>
 8000ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ac8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000acc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ad0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ad4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ad8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000adc:	bf3e      	ittt	cc
 8000ade:	0049      	lslcc	r1, r1, #1
 8000ae0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ae4:	005b      	lslcc	r3, r3, #1
 8000ae6:	ea40 0001 	orr.w	r0, r0, r1
 8000aea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aee:	2afd      	cmp	r2, #253	; 0xfd
 8000af0:	d81d      	bhi.n	8000b2e <__aeabi_fmul+0x92>
 8000af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	4770      	bx	lr
 8000b02:	f090 0f00 	teq	r0, #0
 8000b06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b0a:	bf08      	it	eq
 8000b0c:	0249      	lsleq	r1, r1, #9
 8000b0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b16:	3a7f      	subs	r2, #127	; 0x7f
 8000b18:	bfc2      	ittt	gt
 8000b1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b22:	4770      	bxgt	lr
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	dc5d      	bgt.n	8000bec <__aeabi_fmul+0x150>
 8000b30:	f112 0f19 	cmn.w	r2, #25
 8000b34:	bfdc      	itt	le
 8000b36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b3a:	4770      	bxle	lr
 8000b3c:	f1c2 0200 	rsb	r2, r2, #0
 8000b40:	0041      	lsls	r1, r0, #1
 8000b42:	fa21 f102 	lsr.w	r1, r1, r2
 8000b46:	f1c2 0220 	rsb	r2, r2, #32
 8000b4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b52:	f140 0000 	adc.w	r0, r0, #0
 8000b56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b5a:	bf08      	it	eq
 8000b5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b60:	4770      	bx	lr
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b6a:	bf02      	ittt	eq
 8000b6c:	0040      	lsleq	r0, r0, #1
 8000b6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b72:	3a01      	subeq	r2, #1
 8000b74:	d0f9      	beq.n	8000b6a <__aeabi_fmul+0xce>
 8000b76:	ea40 000c 	orr.w	r0, r0, ip
 8000b7a:	f093 0f00 	teq	r3, #0
 8000b7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b82:	bf02      	ittt	eq
 8000b84:	0049      	lsleq	r1, r1, #1
 8000b86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b8a:	3b01      	subeq	r3, #1
 8000b8c:	d0f9      	beq.n	8000b82 <__aeabi_fmul+0xe6>
 8000b8e:	ea41 010c 	orr.w	r1, r1, ip
 8000b92:	e78f      	b.n	8000ab4 <__aeabi_fmul+0x18>
 8000b94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b98:	ea92 0f0c 	teq	r2, ip
 8000b9c:	bf18      	it	ne
 8000b9e:	ea93 0f0c 	teqne	r3, ip
 8000ba2:	d00a      	beq.n	8000bba <__aeabi_fmul+0x11e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	d1d8      	bne.n	8000b62 <__aeabi_fmul+0xc6>
 8000bb0:	ea80 0001 	eor.w	r0, r0, r1
 8000bb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	bf17      	itett	ne
 8000bc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000bc4:	4608      	moveq	r0, r1
 8000bc6:	f091 0f00 	teqne	r1, #0
 8000bca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000bce:	d014      	beq.n	8000bfa <__aeabi_fmul+0x15e>
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d101      	bne.n	8000bda <__aeabi_fmul+0x13e>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	d10f      	bne.n	8000bfa <__aeabi_fmul+0x15e>
 8000bda:	ea93 0f0c 	teq	r3, ip
 8000bde:	d103      	bne.n	8000be8 <__aeabi_fmul+0x14c>
 8000be0:	024b      	lsls	r3, r1, #9
 8000be2:	bf18      	it	ne
 8000be4:	4608      	movne	r0, r1
 8000be6:	d108      	bne.n	8000bfa <__aeabi_fmul+0x15e>
 8000be8:	ea80 0001 	eor.w	r0, r0, r1
 8000bec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_fdiv>:
 8000c04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c12:	ea92 0f0c 	teqne	r2, ip
 8000c16:	ea93 0f0c 	teqne	r3, ip
 8000c1a:	d069      	beq.n	8000cf0 <__aeabi_fdiv+0xec>
 8000c1c:	eba2 0203 	sub.w	r2, r2, r3
 8000c20:	ea80 0c01 	eor.w	ip, r0, r1
 8000c24:	0249      	lsls	r1, r1, #9
 8000c26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c2a:	d037      	beq.n	8000c9c <__aeabi_fdiv+0x98>
 8000c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	bf38      	it	cc
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	bf24      	itt	cs
 8000c4e:	1a5b      	subcs	r3, r3, r1
 8000c50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c58:	bf24      	itt	cs
 8000c5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c66:	bf24      	itt	cs
 8000c68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c74:	bf24      	itt	cs
 8000c76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	bf18      	it	ne
 8000c82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c86:	d1e0      	bne.n	8000c4a <__aeabi_fdiv+0x46>
 8000c88:	2afd      	cmp	r2, #253	; 0xfd
 8000c8a:	f63f af50 	bhi.w	8000b2e <__aeabi_fmul+0x92>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c94:	bf08      	it	eq
 8000c96:	f020 0001 	biceq.w	r0, r0, #1
 8000c9a:	4770      	bx	lr
 8000c9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca4:	327f      	adds	r2, #127	; 0x7f
 8000ca6:	bfc2      	ittt	gt
 8000ca8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cb0:	4770      	bxgt	lr
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	3a01      	subs	r2, #1
 8000cbc:	e737      	b.n	8000b2e <__aeabi_fmul+0x92>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fdiv+0xc2>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fdiv+0xda>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e795      	b.n	8000c1c <__aeabi_fdiv+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	d108      	bne.n	8000d0c <__aeabi_fdiv+0x108>
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	f47f af7d 	bne.w	8000bfa <__aeabi_fmul+0x15e>
 8000d00:	ea93 0f0c 	teq	r3, ip
 8000d04:	f47f af70 	bne.w	8000be8 <__aeabi_fmul+0x14c>
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e776      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d0c:	ea93 0f0c 	teq	r3, ip
 8000d10:	d104      	bne.n	8000d1c <__aeabi_fdiv+0x118>
 8000d12:	024b      	lsls	r3, r1, #9
 8000d14:	f43f af4c 	beq.w	8000bb0 <__aeabi_fmul+0x114>
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e76e      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d20:	bf18      	it	ne
 8000d22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d26:	d1ca      	bne.n	8000cbe <__aeabi_fdiv+0xba>
 8000d28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d2c:	f47f af5c 	bne.w	8000be8 <__aeabi_fmul+0x14c>
 8000d30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	f47f af3c 	bne.w	8000bb0 <__aeabi_fmul+0x114>
 8000d38:	e75f      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_f2uiz>:
 8000d3c:	0042      	lsls	r2, r0, #1
 8000d3e:	d20e      	bcs.n	8000d5e <__aeabi_f2uiz+0x22>
 8000d40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d44:	d30b      	bcc.n	8000d5e <__aeabi_f2uiz+0x22>
 8000d46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d4e:	d409      	bmi.n	8000d64 <__aeabi_f2uiz+0x28>
 8000d50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d58:	fa23 f002 	lsr.w	r0, r3, r2
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr
 8000d64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d68:	d101      	bne.n	8000d6e <__aeabi_f2uiz+0x32>
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	d102      	bne.n	8000d74 <__aeabi_f2uiz+0x38>
 8000d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d72:	4770      	bx	lr
 8000d74:	f04f 0000 	mov.w	r0, #0
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <vApplicationGetIdleTaskMemory+0x28>)
 8000d8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2280      	movs	r2, #128	; 0x80
 8000d98:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	200001b0 	.word	0x200001b0
 8000da8:	20000204 	.word	0x20000204

08000dac <MX_ADC1_Init>:
#define rst_GPIO_Port GPIOA
#define SD_CS_Pin GPIO_PIN_7
#define SD_CS_GPIO_Port GPIOB

static void MX_ADC1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <MX_ADC1_Init+0xd0>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dca:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd0:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd6:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000dd8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ddc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dde:	4b26      	ldr	r3, [pc, #152]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000de6:	2204      	movs	r2, #4
 8000de8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dea:	4823      	ldr	r0, [pc, #140]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000dec:	f001 f9c8 	bl	8002180 <HAL_ADC_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000df6:	f000 fc7b 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e02:	2307      	movs	r3, #7
 8000e04:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481b      	ldr	r0, [pc, #108]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000e0c:	f001 fb8a 	bl	8002524 <HAL_ADC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f000 fc6b 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000e28:	f001 fb7c 	bl	8002524 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e32:	f000 fc5d 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e36:	2304      	movs	r3, #4
 8000e38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000e44:	f001 fb6e 	bl	8002524 <HAL_ADC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e4e:	f000 fc4f 	bl	80016f0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e52:	2305      	movs	r3, #5
 8000e54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <MX_ADC1_Init+0xcc>)
 8000e60:	f001 fb60 	bl	8002524 <HAL_ADC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000e6a:	f000 fc41 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20001438 	.word	0x20001438
 8000e7c:	40012400 	.word	0x40012400

08000e80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <MX_SPI1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <MX_SPI1_Init+0x64>)
 8000ed2:	f003 fd35 	bl	8004940 <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 fc08 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000152c 	.word	0x2000152c
 8000ee8:	40013000 	.word	0x40013000

08000eec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000ef2:	4a18      	ldr	r2, [pc, #96]	; (8000f54 <MX_SPI2_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000ef8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000efc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_SPI2_Init+0x64>)
 8000f3e:	f003 fcff 	bl	8004940 <HAL_SPI_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f48:	f000 fbd2 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200013a0 	.word	0x200013a0
 8000f54:	40003800 	.word	0x40003800

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000f76:	4a1f      	ldr	r2, [pc, #124]	; (8000ff4 <MX_TIM1_Init+0x9c>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fa0:	4813      	ldr	r0, [pc, #76]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000fa2:	f004 f899 	bl	80050d8 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fac:	f000 fba0 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000fbe:	f004 fad3 	bl	8005568 <HAL_TIM_ConfigClockSource>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fc8:	f000 fb92 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_TIM1_Init+0x98>)
 8000fda:	f004 fe21 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fe4:	f000 fb84 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200014ec 	.word	0x200014ec
 8000ff4:	40012c00 	.word	0x40012c00

08000ff8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MX_TIM2_Init+0xc4>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MX_TIM2_Init+0xc4>)
 8001024:	2247      	movs	r2, #71	; 0x47
 8001026:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <MX_TIM2_Init+0xc4>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_TIM2_Init+0xc4>)
 8001030:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_TIM2_Init+0xc4>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_TIM2_Init+0xc4>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001042:	481e      	ldr	r0, [pc, #120]	; (80010bc <MX_TIM2_Init+0xc4>)
 8001044:	f004 f896 	bl	8005174 <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800104e:	f000 fb4f 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	4619      	mov	r1, r3
 8001060:	4816      	ldr	r0, [pc, #88]	; (80010bc <MX_TIM2_Init+0xc4>)
 8001062:	f004 fddd 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800106c:	f000 fb40 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001070:	2360      	movs	r3, #96	; 0x60
 8001072:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2208      	movs	r2, #8
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_TIM2_Init+0xc4>)
 8001088:	f004 f9a8 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001092:	f000 fb2d 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	220c      	movs	r2, #12
 800109a:	4619      	mov	r1, r3
 800109c:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_TIM2_Init+0xc4>)
 800109e:	f004 f99d 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010a8:	f000 fb22 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <MX_TIM2_Init+0xc4>)
 80010ae:	f000 fe2b 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20001584 	.word	0x20001584

080010c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08e      	sub	sp, #56	; 0x38
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	615a      	str	r2, [r3, #20]
 80010ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010f0:	4b3d      	ldr	r3, [pc, #244]	; (80011e8 <MX_TIM3_Init+0x128>)
 80010f2:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <MX_TIM3_Init+0x12c>)
 80010f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80010f6:	4b3c      	ldr	r3, [pc, #240]	; (80011e8 <MX_TIM3_Init+0x128>)
 80010f8:	2247      	movs	r2, #71	; 0x47
 80010fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fc:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_TIM3_Init+0x128>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <MX_TIM3_Init+0x128>)
 8001104:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001108:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_TIM3_Init+0x128>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <MX_TIM3_Init+0x128>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001116:	4834      	ldr	r0, [pc, #208]	; (80011e8 <MX_TIM3_Init+0x128>)
 8001118:	f003 ffde 	bl	80050d8 <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001122:	f000 fae5 	bl	80016f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800112c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001130:	4619      	mov	r1, r3
 8001132:	482d      	ldr	r0, [pc, #180]	; (80011e8 <MX_TIM3_Init+0x128>)
 8001134:	f004 fa18 	bl	8005568 <HAL_TIM_ConfigClockSource>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800113e:	f000 fad7 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001142:	4829      	ldr	r0, [pc, #164]	; (80011e8 <MX_TIM3_Init+0x128>)
 8001144:	f004 f816 	bl	8005174 <HAL_TIM_PWM_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800114e:	f000 facf 	bl	80016f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	4619      	mov	r1, r3
 8001160:	4821      	ldr	r0, [pc, #132]	; (80011e8 <MX_TIM3_Init+0x128>)
 8001162:	f004 fd5d 	bl	8005c20 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800116c:	f000 fac0 	bl	80016f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001170:	2360      	movs	r3, #96	; 0x60
 8001172:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <MX_TIM3_Init+0x128>)
 8001188:	f004 f928 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001192:	f000 faad 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2204      	movs	r2, #4
 800119a:	4619      	mov	r1, r3
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <MX_TIM3_Init+0x128>)
 800119e:	f004 f91d 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80011a8:	f000 faa2 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2208      	movs	r2, #8
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_TIM3_Init+0x128>)
 80011b4:	f004 f912 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80011be:	f000 fa97 	bl	80016f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	220c      	movs	r2, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM3_Init+0x128>)
 80011ca:	f004 f907 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 80011d4:	f000 fa8c 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011d8:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM3_Init+0x128>)
 80011da:	f000 fd95 	bl	8001d08 <HAL_TIM_MspPostInit>

}
 80011de:	bf00      	nop
 80011e0:	3738      	adds	r7, #56	; 0x38
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200013f8 	.word	0x200013f8
 80011ec:	40000400 	.word	0x40000400

080011f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART1_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_USART1_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_USART1_UART_Init+0x4c>)
 80011fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART1_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART1_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART1_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART1_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART1_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART1_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART1_UART_Init+0x4c>)
 8001228:	f004 fd50 	bl	8005ccc <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 fa5d 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20001468 	.word	0x20001468
 8001240:	40013800 	.word	0x40013800

08001244 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_DMA_Init+0x38>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_DMA_Init+0x38>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_DMA_Init+0x38>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	200b      	movs	r0, #11
 8001268:	f001 fbfb 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800126c:	200b      	movs	r0, #11
 800126e:	f001 fc14 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <MX_GPIO_Init+0xec>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a34      	ldr	r2, [pc, #208]	; (800136c <MX_GPIO_Init+0xec>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <MX_GPIO_Init+0xec>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ac:	4b2f      	ldr	r3, [pc, #188]	; (800136c <MX_GPIO_Init+0xec>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a2e      	ldr	r2, [pc, #184]	; (800136c <MX_GPIO_Init+0xec>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b2c      	ldr	r3, [pc, #176]	; (800136c <MX_GPIO_Init+0xec>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <MX_GPIO_Init+0xec>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a28      	ldr	r2, [pc, #160]	; (800136c <MX_GPIO_Init+0xec>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_GPIO_Init+0xec>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <MX_GPIO_Init+0xec>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a22      	ldr	r2, [pc, #136]	; (800136c <MX_GPIO_Init+0xec>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <MX_GPIO_Init+0xec>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_7, GPIO_PIN_RESET);
 80012f4:	2200      	movs	r2, #0
 80012f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 80012fa:	481d      	ldr	r0, [pc, #116]	; (8001370 <MX_GPIO_Init+0xf0>)
 80012fc:	f001 ff24 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001306:	481b      	ldr	r0, [pc, #108]	; (8001374 <MX_GPIO_Init+0xf4>)
 8001308:	f001 ff1e 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800130c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_GPIO_Init+0xf8>)
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	4816      	ldr	r0, [pc, #88]	; (800137c <MX_GPIO_Init+0xfc>)
 8001322:	f001 fdb7 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_7;
 8001326:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800132a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132c:	2301      	movs	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2302      	movs	r3, #2
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	4619      	mov	r1, r3
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <MX_GPIO_Init+0xf0>)
 8001340:	f001 fda8 	bl	8002e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2302      	movs	r3, #2
 8001354:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_GPIO_Init+0xf4>)
 800135e:	f001 fd99 	bl	8002e94 <HAL_GPIO_Init>

}
 8001362:	bf00      	nop
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40010c00 	.word	0x40010c00
 8001374:	40010800 	.word	0x40010800
 8001378:	10110000 	.word	0x10110000
 800137c:	40011000 	.word	0x40011000

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	b092      	sub	sp, #72	; 0x48
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f000 fea7 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f8ff 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f7ff ff77 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 8001392:	f7ff ff57 	bl	8001244 <MX_DMA_Init>
  MX_ADC1_Init();
 8001396:	f7ff fd09 	bl	8000dac <MX_ADC1_Init>
  MX_SPI2_Init();
 800139a:	f7ff fda7 	bl	8000eec <MX_SPI2_Init>
  MX_TIM1_Init();
 800139e:	f7ff fddb 	bl	8000f58 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013a2:	f7ff fe29 	bl	8000ff8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013a6:	f7ff fe8b 	bl	80010c0 <MX_TIM3_Init>
  MX_FATFS_Init();
 80013aa:	f005 ff11 	bl	80071d0 <MX_FATFS_Init>
  MX_SPI1_Init();
 80013ae:	f7ff fd67 	bl	8000e80 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013b2:	f7ff ff1d 	bl	80011f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   ST7735_Init();
 80013b6:	f000 fa89 	bl	80018cc <ST7735_Init>
   ST7735_FillScreen(ST7735_WHITE);
 80013ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013be:	f000 fb15 	bl	80019ec <ST7735_FillScreen>
   int i = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38

   fres = f_mount ( &fs ,  "" ,   1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	4963      	ldr	r1, [pc, #396]	; (8001558 <main+0x1d8>)
 80013ca:	4864      	ldr	r0, [pc, #400]	; (800155c <main+0x1dc>)
 80013cc:	f008 fc32 	bl	8009c34 <f_mount>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b62      	ldr	r3, [pc, #392]	; (8001560 <main+0x1e0>)
 80013d6:	701a      	strb	r2, [r3, #0]
      while ( fres !=  FR_OK ){
 80013d8:	e00b      	b.n	80013f2 <main+0x72>
    	  fres = f_mount ( &fs ,  "" ,   1);
 80013da:	2201      	movs	r2, #1
 80013dc:	495e      	ldr	r1, [pc, #376]	; (8001558 <main+0x1d8>)
 80013de:	485f      	ldr	r0, [pc, #380]	; (800155c <main+0x1dc>)
 80013e0:	f008 fc28 	bl	8009c34 <f_mount>
 80013e4:	4603      	mov	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b5d      	ldr	r3, [pc, #372]	; (8001560 <main+0x1e0>)
 80013ea:	701a      	strb	r2, [r3, #0]
    	  HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	; 0x64
 80013ee:	f000 fea5 	bl	800213c <HAL_Delay>
      while ( fres !=  FR_OK ){
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <main+0x1e0>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ef      	bne.n	80013da <main+0x5a>
      }

      HAL_ADC_Start_DMA(&hadc1,joystick_value,4);
 80013fa:	2204      	movs	r2, #4
 80013fc:	4959      	ldr	r1, [pc, #356]	; (8001564 <main+0x1e4>)
 80013fe:	485a      	ldr	r0, [pc, #360]	; (8001568 <main+0x1e8>)
 8001400:	f000 ff96 	bl	8002330 <HAL_ADC_Start_DMA>
         float temp1,temp2;
         for(int i = 0 ; i < 100; i++){
 8001404:	2300      	movs	r3, #0
 8001406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001408:	e05d      	b.n	80014c6 <main+0x146>
             temp1 += floor(joystick_value[1]/4096.0*255);
 800140a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800140c:	f7ff f804 	bl	8000418 <__aeabi_f2d>
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	4b53      	ldr	r3, [pc, #332]	; (8001564 <main+0x1e4>)
 8001416:	885b      	ldrh	r3, [r3, #2]
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe ffeb 	bl	80003f4 <__aeabi_i2d>
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	4b52      	ldr	r3, [pc, #328]	; (800156c <main+0x1ec>)
 8001424:	f7ff f97a 	bl	800071c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a347      	add	r3, pc, #284	; (adr r3, 8001550 <main+0x1d0>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f847 	bl	80004c8 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f00b fd0d 	bl	800ce60 <floor>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4620      	mov	r0, r4
 800144c:	4629      	mov	r1, r5
 800144e:	f7fe fe85 	bl	800015c <__adddf3>
 8001452:	4603      	mov	r3, r0
 8001454:	460c      	mov	r4, r1
 8001456:	4618      	mov	r0, r3
 8001458:	4621      	mov	r1, r4
 800145a:	f7ff facf 	bl	80009fc <__aeabi_d2f>
 800145e:	4603      	mov	r3, r0
 8001460:	647b      	str	r3, [r7, #68]	; 0x44
             temp2 += floor(joystick_value[2]/4096.0*255);
 8001462:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001464:	f7fe ffd8 	bl	8000418 <__aeabi_f2d>
 8001468:	4604      	mov	r4, r0
 800146a:	460d      	mov	r5, r1
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <main+0x1e4>)
 800146e:	889b      	ldrh	r3, [r3, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	f7fe ffbf 	bl	80003f4 <__aeabi_i2d>
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b3c      	ldr	r3, [pc, #240]	; (800156c <main+0x1ec>)
 800147c:	f7ff f94e 	bl	800071c <__aeabi_ddiv>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	a331      	add	r3, pc, #196	; (adr r3, 8001550 <main+0x1d0>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f81b 	bl	80004c8 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f00b fce1 	bl	800ce60 <floor>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7fe fe59 	bl	800015c <__adddf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	4618      	mov	r0, r3
 80014b0:	4621      	mov	r1, r4
 80014b2:	f7ff faa3 	bl	80009fc <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	643b      	str	r3, [r7, #64]	; 0x40
             HAL_Delay(2);
 80014ba:	2002      	movs	r0, #2
 80014bc:	f000 fe3e 	bl	800213c <HAL_Delay>
         for(int i = 0 ; i < 100; i++){
 80014c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c2:	3301      	adds	r3, #1
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014c8:	2b63      	cmp	r3, #99	; 0x63
 80014ca:	dd9e      	ble.n	800140a <main+0x8a>
         }
         temp1/=100;
 80014cc:	4928      	ldr	r1, [pc, #160]	; (8001570 <main+0x1f0>)
 80014ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014d0:	f7ff fb98 	bl	8000c04 <__aeabi_fdiv>
 80014d4:	4603      	mov	r3, r0
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
         temp2/=100;
 80014d8:	4925      	ldr	r1, [pc, #148]	; (8001570 <main+0x1f0>)
 80014da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80014dc:	f7ff fb92 	bl	8000c04 <__aeabi_fdiv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	643b      	str	r3, [r7, #64]	; 0x40

         calib1 = (uint8_t) temp1;
 80014e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80014e6:	f7ff fc29 	bl	8000d3c <__aeabi_f2uiz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <main+0x1f4>)
 80014f0:	701a      	strb	r2, [r3, #0]
         calib2 = (uint8_t) temp2;
 80014f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80014f4:	f7ff fc22 	bl	8000d3c <__aeabi_f2uiz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <main+0x1f8>)
 80014fe:	701a      	strb	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of control_servo */
  osThreadDef(control_servo, StartDefaultTask, osPriorityRealtime, 0, 128);
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <main+0x1fc>)
 8001502:	f107 041c 	add.w	r4, r7, #28
 8001506:	461d      	mov	r5, r3
 8001508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  control_servoHandle = osThreadCreate(osThread(control_servo), NULL);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f008 fcc6 	bl	8009eac <osThreadCreate>
 8001520:	4602      	mov	r2, r0
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <main+0x200>)
 8001524:	601a      	str	r2, [r3, #0]

  /* definition and creation of update_lcd */
  osThreadDef(update_lcd, update_state, osPriorityNormal, 0, 128);
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <main+0x204>)
 8001528:	463c      	mov	r4, r7
 800152a:	461d      	mov	r5, r3
 800152c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001530:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  update_lcdHandle = osThreadCreate(osThread(update_lcd), NULL);
 8001538:	463b      	mov	r3, r7
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f008 fcb5 	bl	8009eac <osThreadCreate>
 8001542:	4602      	mov	r2, r0
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <main+0x208>)
 8001546:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001548:	f008 fca9 	bl	8009e9e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800154c:	e7fe      	b.n	800154c <main+0x1cc>
 800154e:	bf00      	nop
 8001550:	00000000 	.word	0x00000000
 8001554:	406fe000 	.word	0x406fe000
 8001558:	0800cf80 	.word	0x0800cf80
 800155c:	200015cc 	.word	0x200015cc
 8001560:	20001874 	.word	0x20001874
 8001564:	200018a4 	.word	0x200018a4
 8001568:	20001438 	.word	0x20001438
 800156c:	40b00000 	.word	0x40b00000
 8001570:	42c80000 	.word	0x42c80000
 8001574:	20001868 	.word	0x20001868
 8001578:	200015c8 	.word	0x200015c8
 800157c:	0800cf94 	.word	0x0800cf94
 8001580:	20001870 	.word	0x20001870
 8001584:	0800cfbc 	.word	0x0800cfbc
 8001588:	20001864 	.word	0x20001864

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001596:	2228      	movs	r2, #40	; 0x28
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f00b fc57 	bl	800ce4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ca:	2301      	movs	r3, #1
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ce:	2302      	movs	r3, #2
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fcaa 	bl	8003f3c <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015ee:	f000 f87f 	bl	80016f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001602:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2102      	movs	r1, #2
 800160e:	4618      	mov	r0, r3
 8001610:	f002 ff14 	bl	800443c <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800161a:	f000 f869 	bl	80016f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800161e:	2312      	movs	r3, #18
 8001620:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001622:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001626:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f003 f8d0 	bl	80047d4 <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800163a:	f000 f859 	bl	80016f0 <Error_Handler>
  }
}
 800163e:	bf00      	nop
 8001640:	3750      	adds	r7, #80	; 0x50
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001650:	f00a ff64 	bl	800c51c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <StartDefaultTask+0x5c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1500);
 800165e:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <StartDefaultTask+0x5c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001666:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <StartDefaultTask+0x5c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <StartDefaultTask+0x60>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <StartDefaultTask+0x60>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001684:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <StartDefaultTask+0x60>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800168e:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <StartDefaultTask+0x60>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
    osDelay(2);
 800169a:	2002      	movs	r0, #2
 800169c:	f008 fc52 	bl	8009f44 <osDelay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 80016a0:	e7d8      	b.n	8001654 <StartDefaultTask+0xc>
 80016a2:	bf00      	nop
 80016a4:	20001584 	.word	0x20001584
 80016a8:	200013f8 	.word	0x200013f8

080016ac <update_state>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_update_state */
void update_state(void const * argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	  uint8_t buffer[] = "Hello, World!\r\n";
//	  CDC_Transmit_FS(buffer, sizeof(buffer));
	  ST7735_FillRectangle(0, 30, 10, 40, ST7735_BLUE);
 80016b4:	231f      	movs	r3, #31
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	2328      	movs	r3, #40	; 0x28
 80016ba:	220a      	movs	r2, #10
 80016bc:	211e      	movs	r1, #30
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f91e 	bl	8001900 <ST7735_FillRectangle>
    osDelay(100);
 80016c4:	2064      	movs	r0, #100	; 0x64
 80016c6:	f008 fc3d 	bl	8009f44 <osDelay>
	  ST7735_FillRectangle(0, 30, 10, 40, ST7735_BLUE);
 80016ca:	e7f3      	b.n	80016b4 <update_state+0x8>

080016cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016de:	f000 fd11 	bl	8002104 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40000800 	.word	0x40000800

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001706:	4802      	ldr	r0, [pc, #8]	; (8001710 <ST7735_Select+0x14>)
 8001708:	f001 fd1e 	bl	8003148 <HAL_GPIO_WritePin>
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40010800 	.word	0x40010800

08001714 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001718:	2201      	movs	r2, #1
 800171a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171e:	4802      	ldr	r0, [pc, #8]	; (8001728 <ST7735_Unselect+0x14>)
 8001720:	f001 fd12 	bl	8003148 <HAL_GPIO_WritePin>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40010800 	.word	0x40010800

0800172c <ST7735_Reset>:

static void ST7735_Reset() {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001736:	4807      	ldr	r0, [pc, #28]	; (8001754 <ST7735_Reset+0x28>)
 8001738:	f001 fd06 	bl	8003148 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800173c:	2005      	movs	r0, #5
 800173e:	f000 fcfd 	bl	800213c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <ST7735_Reset+0x28>)
 800174a:	f001 fcfd 	bl	8003148 <HAL_GPIO_WritePin>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010800 	.word	0x40010800

08001758 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <ST7735_WriteCommand+0x2c>)
 800176a:	f001 fced 	bl	8003148 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800176e:	1df9      	adds	r1, r7, #7
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
 8001774:	2201      	movs	r2, #1
 8001776:	4804      	ldr	r0, [pc, #16]	; (8001788 <ST7735_WriteCommand+0x30>)
 8001778:	f003 f943 	bl	8004a02 <HAL_SPI_Transmit>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010800 	.word	0x40010800
 8001788:	200013a0 	.word	0x200013a0

0800178c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179c:	4807      	ldr	r0, [pc, #28]	; (80017bc <ST7735_WriteData+0x30>)
 800179e:	f001 fcd3 	bl	8003148 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <ST7735_WriteData+0x34>)
 80017ae:	f003 f928 	bl	8004a02 <HAL_SPI_Transmit>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40010800 	.word	0x40010800
 80017c0:	200013a0 	.word	0x200013a0

080017c4 <ST7735_ExecuteCommandList>:
static void ST7735_WriteData_16bit(uint8_t* buff, size_t buff_size) {
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
    HAL_SPI_Transmit_DMA(&ST7735_SPI_PORT, buff, buff_size);
}

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80017d6:	e034      	b.n	8001842 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ffb7 	bl	8001758 <ST7735_WriteCommand>

        numArgs = *addr++;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80017f4:	7abb      	ldrb	r3, [r7, #10]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80017fe:	7abb      	ldrb	r3, [r7, #10]
 8001800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001804:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001806:	7abb      	ldrb	r3, [r7, #10]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800180c:	7abb      	ldrb	r3, [r7, #10]
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ffbb 	bl	800178c <ST7735_WriteData>
            addr += numArgs;
 8001816:	7abb      	ldrb	r3, [r7, #10]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800181e:	89bb      	ldrh	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00e      	beq.n	8001842 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800182e:	89bb      	ldrh	r3, [r7, #12]
 8001830:	2bff      	cmp	r3, #255	; 0xff
 8001832:	d102      	bne.n	800183a <ST7735_ExecuteCommandList+0x76>
 8001834:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001838:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800183a:	89bb      	ldrh	r3, [r7, #12]
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fc7d 	bl	800213c <HAL_Delay>
    while(numCommands--) {
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	73fa      	strb	r2, [r7, #15]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1c5      	bne.n	80017d8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800184c:	bf00      	nop
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	4604      	mov	r4, r0
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4623      	mov	r3, r4
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	4603      	mov	r3, r0
 8001868:	71bb      	strb	r3, [r7, #6]
 800186a:	460b      	mov	r3, r1
 800186c:	717b      	strb	r3, [r7, #5]
 800186e:	4613      	mov	r3, r2
 8001870:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001872:	202a      	movs	r0, #42	; 0x2a
 8001874:	f7ff ff70 	bl	8001758 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001878:	2300      	movs	r3, #0
 800187a:	733b      	strb	r3, [r7, #12]
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	3302      	adds	r3, #2
 8001880:	b2db      	uxtb	r3, r3
 8001882:	737b      	strb	r3, [r7, #13]
 8001884:	2300      	movs	r3, #0
 8001886:	73bb      	strb	r3, [r7, #14]
 8001888:	797b      	ldrb	r3, [r7, #5]
 800188a:	3302      	adds	r3, #2
 800188c:	b2db      	uxtb	r3, r3
 800188e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	2104      	movs	r1, #4
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff78 	bl	800178c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800189c:	202b      	movs	r0, #43	; 0x2b
 800189e:	f7ff ff5b 	bl	8001758 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	3303      	adds	r3, #3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80018aa:	793b      	ldrb	r3, [r7, #4]
 80018ac:	3303      	adds	r3, #3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	2104      	movs	r1, #4
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff67 	bl	800178c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80018be:	202c      	movs	r0, #44	; 0x2c
 80018c0:	f7ff ff4a 	bl	8001758 <ST7735_WriteCommand>
}
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <ST7735_Init>:

void ST7735_Init() {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
    ST7735_Select();
 80018d0:	f7ff ff14 	bl	80016fc <ST7735_Select>
    ST7735_Reset();
 80018d4:	f7ff ff2a 	bl	800172c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80018d8:	4806      	ldr	r0, [pc, #24]	; (80018f4 <ST7735_Init+0x28>)
 80018da:	f7ff ff73 	bl	80017c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <ST7735_Init+0x2c>)
 80018e0:	f7ff ff70 	bl	80017c4 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <ST7735_Init+0x30>)
 80018e6:	f7ff ff6d 	bl	80017c4 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80018ea:	f7ff ff13 	bl	8001714 <ST7735_Unselect>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	0800d03c 	.word	0x0800d03c
 80018f8:	0800d078 	.word	0x0800d078
 80018fc:	0800d088 	.word	0x0800d088

08001900 <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	4604      	mov	r4, r0
 8001908:	4608      	mov	r0, r1
 800190a:	4611      	mov	r1, r2
 800190c:	461a      	mov	r2, r3
 800190e:	4623      	mov	r3, r4
 8001910:	80fb      	strh	r3, [r7, #6]
 8001912:	4603      	mov	r3, r0
 8001914:	80bb      	strh	r3, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	807b      	strh	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	2b7f      	cmp	r3, #127	; 0x7f
 8001922:	d85a      	bhi.n	80019da <ST7735_FillRectangle+0xda>
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	2b7f      	cmp	r3, #127	; 0x7f
 8001928:	d857      	bhi.n	80019da <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4413      	add	r3, r2
 8001930:	3b01      	subs	r3, #1
 8001932:	2b7f      	cmp	r3, #127	; 0x7f
 8001934:	dd03      	ble.n	800193e <ST7735_FillRectangle+0x3e>
 8001936:	88fb      	ldrh	r3, [r7, #6]
 8001938:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800193c:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800193e:	88ba      	ldrh	r2, [r7, #4]
 8001940:	883b      	ldrh	r3, [r7, #0]
 8001942:	4413      	add	r3, r2
 8001944:	3b01      	subs	r3, #1
 8001946:	2b7f      	cmp	r3, #127	; 0x7f
 8001948:	dd03      	ble.n	8001952 <ST7735_FillRectangle+0x52>
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001950:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001952:	f7ff fed3 	bl	80016fc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	b2d8      	uxtb	r0, r3
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	b2d9      	uxtb	r1, r3
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2da      	uxtb	r2, r3
 8001962:	887b      	ldrh	r3, [r7, #2]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b2db      	uxtb	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b2dc      	uxtb	r4, r3
 800196e:	88bb      	ldrh	r3, [r7, #4]
 8001970:	b2da      	uxtb	r2, r3
 8001972:	883b      	ldrh	r3, [r7, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4413      	add	r3, r2
 8001978:	b2db      	uxtb	r3, r3
 800197a:	3b01      	subs	r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4622      	mov	r2, r4
 8001980:	f7ff ff68 	bl	8001854 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001984:	8c3b      	ldrh	r3, [r7, #32]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	b29b      	uxth	r3, r3
 800198a:	b2db      	uxtb	r3, r3
 800198c:	733b      	strb	r3, [r7, #12]
 800198e:	8c3b      	ldrh	r3, [r7, #32]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <ST7735_FillRectangle+0xe4>)
 800199c:	f001 fbd4 	bl	8003148 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80019a0:	883b      	ldrh	r3, [r7, #0]
 80019a2:	80bb      	strh	r3, [r7, #4]
 80019a4:	e013      	b.n	80019ce <ST7735_FillRectangle+0xce>
        for(x = w; x > 0; x--) {
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	80fb      	strh	r3, [r7, #6]
 80019aa:	e00a      	b.n	80019c2 <ST7735_FillRectangle+0xc2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80019ac:	f107 010c 	add.w	r1, r7, #12
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295
 80019b4:	2202      	movs	r2, #2
 80019b6:	480c      	ldr	r0, [pc, #48]	; (80019e8 <ST7735_FillRectangle+0xe8>)
 80019b8:	f003 f823 	bl	8004a02 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	3b01      	subs	r3, #1
 80019c0:	80fb      	strh	r3, [r7, #6]
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f1      	bne.n	80019ac <ST7735_FillRectangle+0xac>
    for(y = h; y > 0; y--) {
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	80bb      	strh	r3, [r7, #4]
 80019ce:	88bb      	ldrh	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e8      	bne.n	80019a6 <ST7735_FillRectangle+0xa6>
        }
    }

    ST7735_Unselect();
 80019d4:	f7ff fe9e 	bl	8001714 <ST7735_Unselect>
 80019d8:	e000      	b.n	80019dc <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80019da:	bf00      	nop
}
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40010800 	.word	0x40010800
 80019e8:	200013a0 	.word	0x200013a0

080019ec <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80019f6:	88fb      	ldrh	r3, [r7, #6]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	2100      	movs	r1, #0
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff ff7d 	bl	8001900 <ST7735_FillRectangle>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_MspInit+0x5c>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	4a14      	ldr	r2, [pc, #80]	; (8001a6c <HAL_MspInit+0x5c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6193      	str	r3, [r2, #24]
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_MspInit+0x5c>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_MspInit+0x5c>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_MspInit+0x5c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	61d3      	str	r3, [r2, #28]
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_MspInit+0x5c>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <HAL_MspInit+0x60>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_MspInit+0x60>)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000

08001a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <HAL_ADC_MspInit+0xbc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d149      	bne.n	8001b28 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <HAL_ADC_MspInit+0xc0>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a26      	ldr	r2, [pc, #152]	; (8001b34 <HAL_ADC_MspInit+0xc0>)
 8001a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_ADC_MspInit+0xc0>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	4b21      	ldr	r3, [pc, #132]	; (8001b34 <HAL_ADC_MspInit+0xc0>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	; (8001b34 <HAL_ADC_MspInit+0xc0>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <HAL_ADC_MspInit+0xc0>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8001ac4:	2336      	movs	r3, #54	; 0x36
 8001ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4819      	ldr	r0, [pc, #100]	; (8001b38 <HAL_ADC_MspInit+0xc4>)
 8001ad4:	f001 f9de 	bl	8002e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <HAL_ADC_MspInit+0xcc>)
 8001adc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aea:	4b14      	ldr	r3, [pc, #80]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001af6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001afa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001afe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001b02:	2220      	movs	r2, #32
 8001b04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b0c:	480b      	ldr	r0, [pc, #44]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001b0e:	f000 ffd3 	bl	8002ab8 <HAL_DMA_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b18:	f7ff fdea 	bl	80016f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001b20:	621a      	str	r2, [r3, #32]
 8001b22:	4a06      	ldr	r2, [pc, #24]	; (8001b3c <HAL_ADC_MspInit+0xc8>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40012400 	.word	0x40012400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010800 	.word	0x40010800
 8001b3c:	200014a8 	.word	0x200014a8
 8001b40:	40020008 	.word	0x40020008

08001b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08c      	sub	sp, #48	; 0x30
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a3e      	ldr	r2, [pc, #248]	; (8001c58 <HAL_SPI_MspInit+0x114>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d13e      	bne.n	8001be2 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b64:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a3c      	ldr	r2, [pc, #240]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b78:	61bb      	str	r3, [r7, #24]
 8001b7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7c:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a36      	ldr	r2, [pc, #216]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b82:	f043 0308 	orr.w	r3, r3, #8
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001b94:	2328      	movs	r3, #40	; 0x28
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	482e      	ldr	r0, [pc, #184]	; (8001c60 <HAL_SPI_MspInit+0x11c>)
 8001ba8:	f001 f974 	bl	8002e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bac:	2310      	movs	r3, #16
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4828      	ldr	r0, [pc, #160]	; (8001c60 <HAL_SPI_MspInit+0x11c>)
 8001bc0:	f001 f968 	bl	8002e94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_SPI_MspInit+0x120>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bda:	4a22      	ldr	r2, [pc, #136]	; (8001c64 <HAL_SPI_MspInit+0x120>)
 8001bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bde:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001be0:	e036      	b.n	8001c50 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a20      	ldr	r2, [pc, #128]	; (8001c68 <HAL_SPI_MspInit+0x124>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d131      	bne.n	8001c50 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4a1a      	ldr	r2, [pc, #104]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001bf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf6:	61d3      	str	r3, [r2, #28]
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a14      	ldr	r2, [pc, #80]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_SPI_MspInit+0x118>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c1c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <HAL_SPI_MspInit+0x11c>)
 8001c32:	f001 f92f 	bl	8002e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 031c 	add.w	r3, r7, #28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <HAL_SPI_MspInit+0x11c>)
 8001c4c:	f001 f922 	bl	8002e94 <HAL_GPIO_Init>
}
 8001c50:	bf00      	nop
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40013000 	.word	0x40013000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010c00 	.word	0x40010c00
 8001c64:	40010000 	.word	0x40010000
 8001c68:	40003800 	.word	0x40003800

08001c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <HAL_TIM_Base_MspInit+0x58>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10c      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c88:	6193      	str	r3, [r2, #24]
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c96:	e010      	b.n	8001cba <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_TIM_Base_MspInit+0x60>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10b      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a08      	ldr	r2, [pc, #32]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_TIM_Base_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40000400 	.word	0x40000400

08001cd0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d10b      	bne.n	8001cfa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_TIM_PWM_MspInit+0x34>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_TIM_PWM_MspInit+0x34>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	; 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d26:	d12b      	bne.n	8001d80 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a31      	ldr	r2, [pc, #196]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4828      	ldr	r0, [pc, #160]	; (8001df8 <HAL_TIM_MspPostInit+0xf0>)
 8001d56:	f001 f89d 	bl	8002e94 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	4a20      	ldr	r2, [pc, #128]	; (8001dfc <HAL_TIM_MspPostInit+0xf4>)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d7e:	e034      	b.n	8001dea <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a1e      	ldr	r2, [pc, #120]	; (8001e00 <HAL_TIM_MspPostInit+0xf8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12f      	bne.n	8001dea <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	6193      	str	r3, [r2, #24]
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001da8:	f043 0308 	orr.w	r3, r3, #8
 8001dac:	6193      	str	r3, [r2, #24]
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_TIM_MspPostInit+0xec>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <HAL_TIM_MspPostInit+0xfc>)
 8001dce:	f001 f861 	bl	8002e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <HAL_TIM_MspPostInit+0xf0>)
 8001de6:	f001 f855 	bl	8002e94 <HAL_GPIO_Init>
}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40000400 	.word	0x40000400
 8001e04:	40010800 	.word	0x40010800

08001e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0310 	add.w	r3, r7, #16
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1c      	ldr	r2, [pc, #112]	; (8001e94 <HAL_UART_MspInit+0x8c>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d131      	bne.n	8001e8c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_UART_MspInit+0x90>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a1a      	ldr	r2, [pc, #104]	; (8001e98 <HAL_UART_MspInit+0x90>)
 8001e2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_UART_MspInit+0x90>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_UART_MspInit+0x90>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_UART_MspInit+0x90>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_UART_MspInit+0x90>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0310 	add.w	r3, r7, #16
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480b      	ldr	r0, [pc, #44]	; (8001e9c <HAL_UART_MspInit+0x94>)
 8001e6e:	f001 f811 	bl	8002e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4619      	mov	r1, r3
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <HAL_UART_MspInit+0x94>)
 8001e88:	f001 f804 	bl	8002e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3720      	adds	r7, #32
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40013800 	.word	0x40013800
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800

08001ea0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	201e      	movs	r0, #30
 8001eb6:	f000 fdd4 	bl	8002a62 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eba:	201e      	movs	r0, #30
 8001ebc:	f000 fded 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <HAL_InitTick+0xa0>)
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	4a1e      	ldr	r2, [pc, #120]	; (8001f40 <HAL_InitTick+0xa0>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	61d3      	str	r3, [r2, #28]
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_InitTick+0xa0>)
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ed8:	f107 0210 	add.w	r2, r7, #16
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f002 fc28 	bl	8004738 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ee8:	f002 fbfe 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8001eec:	4603      	mov	r3, r0
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef4:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <HAL_InitTick+0xa4>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0c9b      	lsrs	r3, r3, #18
 8001efc:	3b01      	subs	r3, #1
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_InitTick+0xa8>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_InitTick+0xac>)
 8001f04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_InitTick+0xa8>)
 8001f08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f0c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001f0e:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_InitTick+0xa8>)
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_InitTick+0xa8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_InitTick+0xa8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <HAL_InitTick+0xa8>)
 8001f22:	f003 f8d9 	bl	80050d8 <HAL_TIM_Base_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d104      	bne.n	8001f36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001f2c:	4806      	ldr	r0, [pc, #24]	; (8001f48 <HAL_InitTick+0xa8>)
 8001f2e:	f003 f8fe 	bl	800512e <HAL_TIM_Base_Start_IT>
 8001f32:	4603      	mov	r3, r0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	431bde83 	.word	0x431bde83
 8001f48:	200018b0 	.word	0x200018b0
 8001f4c:	40000800 	.word	0x40000800

08001f50 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <SDTimer_Handler+0x3c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <SDTimer_Handler+0x1c>
    Timer1--;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <SDTimer_Handler+0x3c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SDTimer_Handler+0x3c>)
 8001f6a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <SDTimer_Handler+0x40>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <SDTimer_Handler+0x34>
    Timer2--;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <SDTimer_Handler+0x40>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <SDTimer_Handler+0x40>)
 8001f82:	701a      	strb	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	200018f1 	.word	0x200018f1
 8001f90:	200018f0 	.word	0x200018f0

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <HardFault_Handler+0x4>

08001fa6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <MemManage_Handler+0x4>

08001fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <BusFault_Handler+0x4>

08001fb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <UsageFault_Handler+0x4>

08001fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Channel1_IRQHandler+0x10>)
 8001fca:	f000 fe2f 	bl	8002c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200014a8 	.word	0x200014a8

08001fd8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001fde:	f001 f9d2 	bl	8003386 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20002834 	.word	0x20002834

08001fec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ff0:	480a      	ldr	r0, [pc, #40]	; (800201c <TIM4_IRQHandler+0x30>)
 8001ff2:	f003 f8ea 	bl	80051ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	FatFsCnt++;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <TIM4_IRQHandler+0x34>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <TIM4_IRQHandler+0x34>)
 8002002:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <TIM4_IRQHandler+0x34>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b09      	cmp	r3, #9
 800200c:	d904      	bls.n	8002018 <TIM4_IRQHandler+0x2c>
	{
	  FatFsCnt = 0;
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <TIM4_IRQHandler+0x34>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8002014:	f7ff ff9c 	bl	8001f50 <SDTimer_Handler>
	}

  /* USER CODE END TIM4_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200018b0 	.word	0x200018b0
 8002020:	20000404 	.word	0x20000404

08002024 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <SystemInit+0x5c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <SystemInit+0x5c>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <SystemInit+0x5c>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4911      	ldr	r1, [pc, #68]	; (8002080 <SystemInit+0x5c>)
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <SystemInit+0x60>)
 800203c:	4013      	ands	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <SystemInit+0x5c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <SystemInit+0x5c>)
 8002046:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <SystemInit+0x5c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SystemInit+0x5c>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <SystemInit+0x5c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <SystemInit+0x5c>)
 8002062:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002066:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SystemInit+0x5c>)
 800206a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800206e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SystemInit+0x64>)
 8002072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002076:	609a      	str	r2, [r3, #8]
#endif 
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000
 8002084:	f8ff0000 	.word	0xf8ff0000
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800208c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800208e:	e003      	b.n	8002098 <LoopCopyDataInit>

08002090 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002092:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002094:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002096:	3104      	adds	r1, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002098:	480a      	ldr	r0, [pc, #40]	; (80020c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800209c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800209e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80020a0:	d3f6      	bcc.n	8002090 <CopyDataInit>
  ldr r2, =_sbss
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80020a4:	e002      	b.n	80020ac <LoopFillZerobss>

080020a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80020a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80020a8:	f842 3b04 	str.w	r3, [r2], #4

080020ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80020ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80020b0:	d3f9      	bcc.n	80020a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80020b2:	f7ff ffb7 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b6:	f00a fe9b 	bl	800cdf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ba:	f7ff f961 	bl	8001380 <main>
  bx lr
 80020be:	4770      	bx	lr
  ldr r3, =_sidata
 80020c0:	0800d0d4 	.word	0x0800d0d4
  ldr r0, =_sdata
 80020c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80020c8:	20000194 	.word	0x20000194
  ldr r2, =_sbss
 80020cc:	20000194 	.word	0x20000194
  ldr r3, = _ebss
 80020d0:	20002aa0 	.word	0x20002aa0

080020d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_2_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_Init+0x28>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_Init+0x28>)
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 fcaf 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff fed6 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fc8c 	bl	8001a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_IncTick+0x1c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	461a      	mov	r2, r3
 800210e:	4b05      	ldr	r3, [pc, #20]	; (8002124 <HAL_IncTick+0x20>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4413      	add	r3, r2
 8002114:	4a03      	ldr	r2, [pc, #12]	; (8002124 <HAL_IncTick+0x20>)
 8002116:	6013      	str	r3, [r2, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000008 	.word	0x20000008
 8002124:	200018f4 	.word	0x200018f4

08002128 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b02      	ldr	r3, [pc, #8]	; (8002138 <HAL_GetTick+0x10>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	200018f4 	.word	0x200018f4

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff fff0 	bl	8002128 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_Delay+0x40>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffe0 	bl	8002128 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000008 	.word	0x20000008

08002180 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0be      	b.n	8002320 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fc58 	bl	8001a74 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 faf7 	bl	80027b8 <ADC_ConversionStop_Disable>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 8099 	bne.w	800230e <HAL_ADC_Init+0x18e>
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 8095 	bne.w	800230e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021ec:	f023 0302 	bic.w	r3, r3, #2
 80021f0:	f043 0202 	orr.w	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002200:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7b1b      	ldrb	r3, [r3, #12]
 8002206:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002208:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4313      	orrs	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002218:	d003      	beq.n	8002222 <HAL_ADC_Init+0xa2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <HAL_ADC_Init+0xa8>
 8002222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002226:	e000      	b.n	800222a <HAL_ADC_Init+0xaa>
 8002228:	2300      	movs	r3, #0
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7d1b      	ldrb	r3, [r3, #20]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d119      	bne.n	800226c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7b1b      	ldrb	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	3b01      	subs	r3, #1
 8002246:	035a      	lsls	r2, r3, #13
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e00b      	b.n	800226c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	430a      	orrs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_ADC_Init+0x1a8>)
 8002288:	4013      	ands	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	430b      	orrs	r3, r1
 8002292:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800229c:	d003      	beq.n	80022a6 <HAL_ADC_Init+0x126>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d104      	bne.n	80022b0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	051b      	lsls	r3, r3, #20
 80022ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_ADC_Init+0x1ac>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d10b      	bne.n	80022ec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f023 0303 	bic.w	r3, r3, #3
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022ea:	e018      	b.n	800231e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	f023 0312 	bic.w	r3, r3, #18
 80022f4:	f043 0210 	orr.w	r2, r3, #16
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800230c:	e007      	b.n	800231e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800231e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	ffe1f7fd 	.word	0xffe1f7fd
 800232c:	ff1f0efe 	.word	0xff1f0efe

08002330 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a64      	ldr	r2, [pc, #400]	; (80024d8 <HAL_ADC_Start_DMA+0x1a8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_ADC_Start_DMA+0x24>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_ADC_Start_DMA+0x1ac>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d106      	bne.n	8002362 <HAL_ADC_Start_DMA+0x32>
 8002354:	4b60      	ldr	r3, [pc, #384]	; (80024d8 <HAL_ADC_Start_DMA+0x1a8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 80b3 	bne.w	80024c8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_ADC_Start_DMA+0x40>
 800236c:	2302      	movs	r3, #2
 800236e:	e0ae      	b.n	80024ce <HAL_ADC_Start_DMA+0x19e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 f9cb 	bl	8002714 <ADC_Enable>
 800237e:	4603      	mov	r3, r0
 8002380:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002382:	7dfb      	ldrb	r3, [r7, #23]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 809a 	bne.w	80024be <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a4e      	ldr	r2, [pc, #312]	; (80024dc <HAL_ADC_Start_DMA+0x1ac>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d105      	bne.n	80023b4 <HAL_ADC_Start_DMA+0x84>
 80023a8:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <HAL_ADC_Start_DMA+0x1a8>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d115      	bne.n	80023e0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d026      	beq.n	800241c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023de:	e01d      	b.n	800241c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a39      	ldr	r2, [pc, #228]	; (80024d8 <HAL_ADC_Start_DMA+0x1a8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_ADC_Start_DMA+0xd0>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a38      	ldr	r2, [pc, #224]	; (80024dc <HAL_ADC_Start_DMA+0x1ac>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10d      	bne.n	800241c <HAL_ADC_Start_DMA+0xec>
 8002400:	4b35      	ldr	r3, [pc, #212]	; (80024d8 <HAL_ADC_Start_DMA+0x1a8>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002414:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f023 0206 	bic.w	r2, r3, #6
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c
 8002434:	e002      	b.n	800243c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <HAL_ADC_Start_DMA+0x1b0>)
 800244a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a24      	ldr	r2, [pc, #144]	; (80024e4 <HAL_ADC_Start_DMA+0x1b4>)
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4a23      	ldr	r2, [pc, #140]	; (80024e8 <HAL_ADC_Start_DMA+0x1b8>)
 800245a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0202 	mvn.w	r2, #2
 8002464:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002474:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a18      	ldr	r0, [r3, #32]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	334c      	adds	r3, #76	; 0x4c
 8002480:	4619      	mov	r1, r3
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f000 fb71 	bl	8002b6c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002494:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002498:	d108      	bne.n	80024ac <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024a8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024aa:	e00f      	b.n	80024cc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024ba:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80024bc:	e006      	b.n	80024cc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80024c6:	e001      	b.n	80024cc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40012400 	.word	0x40012400
 80024dc:	40012800 	.word	0x40012800
 80024e0:	0800282d 	.word	0x0800282d
 80024e4:	080028a9 	.word	0x080028a9
 80024e8:	080028c5 	.word	0x080028c5

080024ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
	...

08002524 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x20>
 8002540:	2302      	movs	r3, #2
 8002542:	e0dc      	b.n	80026fe <HAL_ADC_ConfigChannel+0x1da>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d81c      	bhi.n	800258e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	3b05      	subs	r3, #5
 8002566:	221f      	movs	r2, #31
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	4019      	ands	r1, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	3b05      	subs	r3, #5
 8002580:	fa00 f203 	lsl.w	r2, r0, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	635a      	str	r2, [r3, #52]	; 0x34
 800258c:	e03c      	b.n	8002608 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d81c      	bhi.n	80025d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	3b23      	subs	r3, #35	; 0x23
 80025a8:	221f      	movs	r2, #31
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	4019      	ands	r1, r3
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	3b23      	subs	r3, #35	; 0x23
 80025c2:	fa00 f203 	lsl.w	r2, r0, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
 80025ce:	e01b      	b.n	8002608 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	3b41      	subs	r3, #65	; 0x41
 80025e2:	221f      	movs	r2, #31
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4019      	ands	r1, r3
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	3b41      	subs	r3, #65	; 0x41
 80025fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d91c      	bls.n	800264a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68d9      	ldr	r1, [r3, #12]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	3b1e      	subs	r3, #30
 8002622:	2207      	movs	r2, #7
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	4019      	ands	r1, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6898      	ldr	r0, [r3, #8]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	3b1e      	subs	r3, #30
 800263c:	fa00 f203 	lsl.w	r2, r0, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	e019      	b.n	800267e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6919      	ldr	r1, [r3, #16]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	2207      	movs	r2, #7
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	4019      	ands	r1, r3
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6898      	ldr	r0, [r3, #8]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b10      	cmp	r3, #16
 8002684:	d003      	beq.n	800268e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800268a:	2b11      	cmp	r3, #17
 800268c:	d132      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_ADC_ConfigChannel+0x1e4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d125      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d126      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026b4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b10      	cmp	r3, #16
 80026bc:	d11a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_ADC_ConfigChannel+0x1e8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a13      	ldr	r2, [pc, #76]	; (8002710 <HAL_ADC_ConfigChannel+0x1ec>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	0c9a      	lsrs	r2, r3, #18
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d4:	e002      	b.n	80026dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f9      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x1b2>
 80026e2:	e007      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f043 0220 	orr.w	r2, r3, #32
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012400 	.word	0x40012400
 800270c:	20000000 	.word	0x20000000
 8002710:	431bde83 	.word	0x431bde83

08002714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d039      	beq.n	80027a6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <ADC_Enable+0x9c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <ADC_Enable+0xa0>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0c9b      	lsrs	r3, r3, #18
 800274e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002750:	e002      	b.n	8002758 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	3b01      	subs	r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f9      	bne.n	8002752 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800275e:	f7ff fce3 	bl	8002128 <HAL_GetTick>
 8002762:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002764:	e018      	b.n	8002798 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002766:	f7ff fcdf 	bl	8002128 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d911      	bls.n	8002798 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f043 0210 	orr.w	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d1df      	bne.n	8002766 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000000 	.word	0x20000000
 80027b4:	431bde83 	.word	0x431bde83

080027b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d127      	bne.n	8002822 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027e2:	f7ff fca1 	bl	8002128 <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027e8:	e014      	b.n	8002814 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027ea:	f7ff fc9d 	bl	8002128 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d90d      	bls.n	8002814 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e007      	b.n	8002824 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b01      	cmp	r3, #1
 8002820:	d0e3      	beq.n	80027ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002842:	2b00      	cmp	r3, #0
 8002844:	d127      	bne.n	8002896 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800285c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002860:	d115      	bne.n	800288e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002866:	2b00      	cmp	r3, #0
 8002868:	d111      	bne.n	800288e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f7ff fe2c 	bl	80024ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002894:	e004      	b.n	80028a0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f7ff fe21 	bl	80024fe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f043 0204 	orr.w	r2, r3, #4
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f7ff fe10 	bl	8002510 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	; (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4906      	ldr	r1, [pc, #24]	; (8002990 <__NVIC_EnableIRQ+0x34>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	; (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
         );
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff4f 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff64 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ffb2 	bl	80029e8 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff81 	bl	8002994 <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff57 	bl	800295c <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e043      	b.n	8002b56 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_DMA_Init+0xa8>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_DMA_Init+0xac>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	; (8002b68 <HAL_DMA_Init+0xb0>)
 8002aea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	bffdfff8 	.word	0xbffdfff8
 8002b64:	cccccccd 	.word	0xcccccccd
 8002b68:	40020000 	.word	0x40020000

08002b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_DMA_Start_IT+0x20>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e04a      	b.n	8002c22 <HAL_DMA_Start_IT+0xb6>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d13a      	bne.n	8002c14 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0201 	bic.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f938 	bl	8002e38 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 020e 	orr.w	r2, r2, #14
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	e00f      	b.n	8002c02 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0204 	bic.w	r2, r2, #4
 8002bf0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 020a 	orr.w	r2, r2, #10
 8002c00:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0201 	orr.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e005      	b.n	8002c20 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d04f      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xc8>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d107      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0204 	bic.w	r2, r2, #4
 8002c7a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a66      	ldr	r2, [pc, #408]	; (8002e1c <HAL_DMA_IRQHandler+0x1f0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d029      	beq.n	8002cda <HAL_DMA_IRQHandler+0xae>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_DMA_IRQHandler+0x1f4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0xaa>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a63      	ldr	r2, [pc, #396]	; (8002e24 <HAL_DMA_IRQHandler+0x1f8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01a      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0xa4>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a62      	ldr	r2, [pc, #392]	; (8002e28 <HAL_DMA_IRQHandler+0x1fc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d012      	beq.n	8002cca <HAL_DMA_IRQHandler+0x9e>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a60      	ldr	r2, [pc, #384]	; (8002e2c <HAL_DMA_IRQHandler+0x200>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x98>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5f      	ldr	r2, [pc, #380]	; (8002e30 <HAL_DMA_IRQHandler+0x204>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d102      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x92>
 8002cb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cbc:	e00e      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002cc2:	e00b      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cc8:	e008      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cce:	e005      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd4:	e002      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cd6:	2340      	movs	r3, #64	; 0x40
 8002cd8:	e000      	b.n	8002cdc <HAL_DMA_IRQHandler+0xb0>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <HAL_DMA_IRQHandler+0x208>)
 8002cde:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8094 	beq.w	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cf2:	e08e      	b.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d056      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x186>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d051      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 020a 	bic.w	r2, r2, #10
 8002d2a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_DMA_IRQHandler+0x1f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d029      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x166>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a37      	ldr	r2, [pc, #220]	; (8002e20 <HAL_DMA_IRQHandler+0x1f4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x162>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a35      	ldr	r2, [pc, #212]	; (8002e24 <HAL_DMA_IRQHandler+0x1f8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01a      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x15c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_DMA_IRQHandler+0x1fc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d012      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x156>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a32      	ldr	r2, [pc, #200]	; (8002e2c <HAL_DMA_IRQHandler+0x200>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00a      	beq.n	8002d7c <HAL_DMA_IRQHandler+0x150>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a31      	ldr	r2, [pc, #196]	; (8002e30 <HAL_DMA_IRQHandler+0x204>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_DMA_IRQHandler+0x14a>
 8002d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d74:	e00e      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d7a:	e00b      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d80:	e008      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d86:	e005      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d8c:	e002      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e000      	b.n	8002d94 <HAL_DMA_IRQHandler+0x168>
 8002d92:	2302      	movs	r3, #2
 8002d94:	4a27      	ldr	r2, [pc, #156]	; (8002e34 <HAL_DMA_IRQHandler+0x208>)
 8002d96:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d034      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002db0:	e02f      	b.n	8002e12 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	2208      	movs	r2, #8
 8002db8:	409a      	lsls	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d028      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d023      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020e 	bic.w	r2, r2, #14
 8002dda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	4798      	blx	r3
    }
  }
  return;
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
}
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40020008 	.word	0x40020008
 8002e20:	4002001c 	.word	0x4002001c
 8002e24:	40020030 	.word	0x40020030
 8002e28:	40020044 	.word	0x40020044
 8002e2c:	40020058 	.word	0x40020058
 8002e30:	4002006c 	.word	0x4002006c
 8002e34:	40020000 	.word	0x40020000

08002e38 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d108      	bne.n	8002e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e76:	e007      	b.n	8002e88 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	60da      	str	r2, [r3, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b08b      	sub	sp, #44	; 0x2c
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ea6:	e127      	b.n	80030f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	f040 8116 	bne.w	80030f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b12      	cmp	r3, #18
 8002ecc:	d034      	beq.n	8002f38 <HAL_GPIO_Init+0xa4>
 8002ece:	2b12      	cmp	r3, #18
 8002ed0:	d80d      	bhi.n	8002eee <HAL_GPIO_Init+0x5a>
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d02b      	beq.n	8002f2e <HAL_GPIO_Init+0x9a>
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d804      	bhi.n	8002ee4 <HAL_GPIO_Init+0x50>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d031      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d01c      	beq.n	8002f1c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ee2:	e048      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d043      	beq.n	8002f70 <HAL_GPIO_Init+0xdc>
 8002ee8:	2b11      	cmp	r3, #17
 8002eea:	d01b      	beq.n	8002f24 <HAL_GPIO_Init+0x90>
          break;
 8002eec:	e043      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002eee:	4a89      	ldr	r2, [pc, #548]	; (8003114 <HAL_GPIO_Init+0x280>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d026      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002ef4:	4a87      	ldr	r2, [pc, #540]	; (8003114 <HAL_GPIO_Init+0x280>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d806      	bhi.n	8002f08 <HAL_GPIO_Init+0x74>
 8002efa:	4a87      	ldr	r2, [pc, #540]	; (8003118 <HAL_GPIO_Init+0x284>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d020      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002f00:	4a86      	ldr	r2, [pc, #536]	; (800311c <HAL_GPIO_Init+0x288>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
          break;
 8002f06:	e036      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002f08:	4a85      	ldr	r2, [pc, #532]	; (8003120 <HAL_GPIO_Init+0x28c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002f0e:	4a85      	ldr	r2, [pc, #532]	; (8003124 <HAL_GPIO_Init+0x290>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d016      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
 8002f14:	4a84      	ldr	r2, [pc, #528]	; (8003128 <HAL_GPIO_Init+0x294>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_GPIO_Init+0xae>
          break;
 8002f1a:	e02c      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e028      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e023      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	3308      	adds	r3, #8
 8002f34:	623b      	str	r3, [r7, #32]
          break;
 8002f36:	e01e      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	623b      	str	r3, [r7, #32]
          break;
 8002f40:	e019      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	623b      	str	r3, [r7, #32]
          break;
 8002f4e:	e012      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f58:	2308      	movs	r3, #8
 8002f5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	611a      	str	r2, [r3, #16]
          break;
 8002f62:	e008      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f64:	2308      	movs	r3, #8
 8002f66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	615a      	str	r2, [r3, #20]
          break;
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f70:	2300      	movs	r3, #0
 8002f72:	623b      	str	r3, [r7, #32]
          break;
 8002f74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2bff      	cmp	r3, #255	; 0xff
 8002f7a:	d801      	bhi.n	8002f80 <HAL_GPIO_Init+0xec>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	e001      	b.n	8002f84 <HAL_GPIO_Init+0xf0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3304      	adds	r3, #4
 8002f84:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	2bff      	cmp	r3, #255	; 0xff
 8002f8a:	d802      	bhi.n	8002f92 <HAL_GPIO_Init+0xfe>
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x104>
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	3b08      	subs	r3, #8
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	210f      	movs	r1, #15
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	401a      	ands	r2, r3
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8096 	beq.w	80030f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc6:	4b59      	ldr	r3, [pc, #356]	; (800312c <HAL_GPIO_Init+0x298>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_GPIO_Init+0x298>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6193      	str	r3, [r2, #24]
 8002fd2:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_GPIO_Init+0x298>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fde:	4a54      	ldr	r2, [pc, #336]	; (8003130 <HAL_GPIO_Init+0x29c>)
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a4b      	ldr	r2, [pc, #300]	; (8003134 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0x19e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a4a      	ldr	r2, [pc, #296]	; (8003138 <HAL_GPIO_Init+0x2a4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00d      	beq.n	800302e <HAL_GPIO_Init+0x19a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a49      	ldr	r2, [pc, #292]	; (800313c <HAL_GPIO_Init+0x2a8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <HAL_GPIO_Init+0x196>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a48      	ldr	r2, [pc, #288]	; (8003140 <HAL_GPIO_Init+0x2ac>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_GPIO_Init+0x192>
 8003022:	2303      	movs	r3, #3
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 8003026:	2304      	movs	r3, #4
 8003028:	e004      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 800302a:	2302      	movs	r3, #2
 800302c:	e002      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <HAL_GPIO_Init+0x1a0>
 8003032:	2300      	movs	r3, #0
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	f002 0203 	and.w	r2, r2, #3
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	4093      	lsls	r3, r2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003044:	493a      	ldr	r1, [pc, #232]	; (8003130 <HAL_GPIO_Init+0x29c>)
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	3302      	adds	r3, #2
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d006      	beq.n	800306c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800305e:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	4938      	ldr	r1, [pc, #224]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
 800306a:	e006      	b.n	800307a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800306c:	4b35      	ldr	r3, [pc, #212]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	43db      	mvns	r3, r3
 8003074:	4933      	ldr	r1, [pc, #204]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003076:	4013      	ands	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d006      	beq.n	8003094 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003086:	4b2f      	ldr	r3, [pc, #188]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	492e      	ldr	r1, [pc, #184]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
 8003092:	e006      	b.n	80030a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	43db      	mvns	r3, r3
 800309c:	4929      	ldr	r1, [pc, #164]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 800309e:	4013      	ands	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030ae:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	4924      	ldr	r1, [pc, #144]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
 80030ba:	e006      	b.n	80030ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	491f      	ldr	r1, [pc, #124]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	491a      	ldr	r1, [pc, #104]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60cb      	str	r3, [r1, #12]
 80030e2:	e006      	b.n	80030f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030e4:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	4915      	ldr	r1, [pc, #84]	; (8003144 <HAL_GPIO_Init+0x2b0>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f4:	3301      	adds	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	f47f aed0 	bne.w	8002ea8 <HAL_GPIO_Init+0x14>
  }
}
 8003108:	bf00      	nop
 800310a:	372c      	adds	r7, #44	; 0x2c
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	10210000 	.word	0x10210000
 8003118:	10110000 	.word	0x10110000
 800311c:	10120000 	.word	0x10120000
 8003120:	10310000 	.word	0x10310000
 8003124:	10320000 	.word	0x10320000
 8003128:	10220000 	.word	0x10220000
 800312c:	40021000 	.word	0x40021000
 8003130:	40010000 	.word	0x40010000
 8003134:	40010800 	.word	0x40010800
 8003138:	40010c00 	.word	0x40010c00
 800313c:	40011000 	.word	0x40011000
 8003140:	40011400 	.word	0x40011400
 8003144:	40010400 	.word	0x40010400

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003164:	e003      	b.n	800316e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	611a      	str	r2, [r3, #16]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b08b      	sub	sp, #44	; 0x2c
 800317c:	af06      	add	r7, sp, #24
 800317e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0d3      	b.n	8003332 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f009 fb88 	bl	800c8b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2203      	movs	r2, #3
 80031a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f002 feda 	bl	8005f6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	687e      	ldr	r6, [r7, #4]
 80031be:	466d      	mov	r5, sp
 80031c0:	f106 0410 	add.w	r4, r6, #16
 80031c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	602b      	str	r3, [r5, #0]
 80031cc:	1d33      	adds	r3, r6, #4
 80031ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031d0:	6838      	ldr	r0, [r7, #0]
 80031d2:	f002 fea3 	bl	8005f1c <USB_CoreInit>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0a4      	b.n	8003332 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f002 fed7 	bl	8005fa2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e035      	b.n	8003266 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	015b      	lsls	r3, r3, #5
 8003200:	4413      	add	r3, r2
 8003202:	3329      	adds	r3, #41	; 0x29
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	015b      	lsls	r3, r3, #5
 800320e:	4413      	add	r3, r2
 8003210:	3328      	adds	r3, #40	; 0x28
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	7bfa      	ldrb	r2, [r7, #15]
 800321a:	b291      	uxth	r1, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	015b      	lsls	r3, r3, #5
 8003220:	4413      	add	r3, r2
 8003222:	3336      	adds	r3, #54	; 0x36
 8003224:	460a      	mov	r2, r1
 8003226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	015b      	lsls	r3, r3, #5
 800322e:	4413      	add	r3, r2
 8003230:	332b      	adds	r3, #43	; 0x2b
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	4413      	add	r3, r2
 800323e:	3338      	adds	r3, #56	; 0x38
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	4413      	add	r3, r2
 800324c:	333c      	adds	r3, #60	; 0x3c
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	3302      	adds	r3, #2
 8003258:	015b      	lsls	r3, r3, #5
 800325a:	4413      	add	r3, r2
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	3301      	adds	r3, #1
 8003264:	73fb      	strb	r3, [r7, #15]
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d3c4      	bcc.n	80031fa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	e031      	b.n	80032da <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	015b      	lsls	r3, r3, #5
 800327c:	4413      	add	r3, r2
 800327e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	015b      	lsls	r3, r3, #5
 800328c:	4413      	add	r3, r2
 800328e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003292:	7bfa      	ldrb	r2, [r7, #15]
 8003294:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	015b      	lsls	r3, r3, #5
 800329c:	4413      	add	r3, r2
 800329e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	015b      	lsls	r3, r3, #5
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	015b      	lsls	r3, r3, #5
 80032bc:	4413      	add	r3, r2
 80032be:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	330a      	adds	r3, #10
 80032cc:	015b      	lsls	r3, r3, #5
 80032ce:	4413      	add	r3, r2
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	3301      	adds	r3, #1
 80032d8:	73fb      	strb	r3, [r7, #15]
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d3c8      	bcc.n	8003276 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	687e      	ldr	r6, [r7, #4]
 80032ec:	466d      	mov	r5, sp
 80032ee:	f106 0410 	add.w	r4, r6, #16
 80032f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	602b      	str	r3, [r5, #0]
 80032fa:	1d33      	adds	r3, r6, #4
 80032fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f002 fe5b 	bl	8005fba <USB_DevInit>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00d      	b.n	8003332 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fe99 	bl	8007062 <USB_DevDisconnect>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800333a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_PCD_Start+0x16>
 800334c:	2302      	movs	r3, #2
 800334e:	e016      	b.n	800337e <HAL_PCD_Start+0x44>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003358:	2101      	movs	r1, #1
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f009 fd11 	bl	800cd82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f003 fe72 	bl	800704e <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f002 fde4 	bl	8005f3c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fe6f 	bl	8007076 <USB_ReadInterrupts>
 8003398:	4603      	mov	r3, r0
 800339a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800339e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033a2:	d102      	bne.n	80033aa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 faf3 	bl	8003990 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f003 fe61 	bl	8007076 <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d112      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	b292      	uxth	r2, r2
 80033d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f009 fae0 	bl	800c99e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80033de:	2100      	movs	r1, #0
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8de 	bl	80035a2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 fe43 	bl	8007076 <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033fa:	d10b      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800340e:	b292      	uxth	r2, r2
 8003410:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f003 fe2c 	bl	8007076 <USB_ReadInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003428:	d10b      	bne.n	8003442 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003432:	b29a      	uxth	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343c:	b292      	uxth	r2, r2
 800343e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f003 fe15 	bl	8007076 <USB_ReadInterrupts>
 800344c:	4603      	mov	r3, r0
 800344e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	d126      	bne.n	80034a6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003460:	b29a      	uxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0208 	bic.w	r2, r2, #8
 8003482:	b292      	uxth	r2, r2
 8003484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f009 fac1 	bl	800ca10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003496:	b29a      	uxth	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034a0:	b292      	uxth	r2, r2
 80034a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f003 fde3 	bl	8007076 <USB_ReadInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d13d      	bne.n	8003538 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0208 	orr.w	r2, r2, #8
 80034ce:	b292      	uxth	r2, r2
 80034d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e6:	b292      	uxth	r2, r2
 80034e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0204 	orr.w	r2, r2, #4
 80034fe:	b292      	uxth	r2, r2
 8003500:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f003 fdb4 	bl	8007076 <USB_ReadInterrupts>
 800350e:	4603      	mov	r3, r0
 8003510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003518:	d10b      	bne.n	8003532 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003522:	b29a      	uxth	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800352c:	b292      	uxth	r2, r2
 800352e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f009 fa52 	bl	800c9dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f003 fd9a 	bl	8007076 <USB_ReadInterrupts>
 8003542:	4603      	mov	r3, r0
 8003544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d10e      	bne.n	800356c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003560:	b292      	uxth	r2, r2
 8003562:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f009 fa0b 	bl	800c982 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f003 fd80 	bl	8007076 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003580:	d10b      	bne.n	800359a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003594:	b292      	uxth	r2, r2
 8003596:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_PCD_SetAddress+0x1a>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e013      	b.n	80035e4 <HAL_PCD_SetAddress+0x42>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f003 fd27 	bl	8007028 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	70fb      	strb	r3, [r7, #3]
 80035fe:	460b      	mov	r3, r1
 8003600:	803b      	strh	r3, [r7, #0]
 8003602:	4613      	mov	r3, r2
 8003604:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800360a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da0b      	bge.n	800362a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	015b      	lsls	r3, r3, #5
 800361a:	3328      	adds	r3, #40	; 0x28
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	705a      	strb	r2, [r3, #1]
 8003628:	e00b      	b.n	8003642 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800362a:	78fb      	ldrb	r3, [r7, #3]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	015b      	lsls	r3, r3, #5
 8003632:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800364e:	883a      	ldrh	r2, [r7, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	78ba      	ldrb	r2, [r7, #2]
 8003658:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800366c:	78bb      	ldrb	r3, [r7, #2]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d102      	bne.n	8003678 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <HAL_PCD_EP_Open+0x9a>
 8003682:	2302      	movs	r3, #2
 8003684:	e00e      	b.n	80036a4 <HAL_PCD_EP_Open+0xb8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	4618      	mov	r0, r3
 8003696:	f002 fcb5 	bl	8006004 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80036a2:	7afb      	ldrb	r3, [r7, #11]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	da0b      	bge.n	80036d8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	015b      	lsls	r3, r3, #5
 80036c8:	3328      	adds	r3, #40	; 0x28
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2201      	movs	r2, #1
 80036d4:	705a      	strb	r2, [r3, #1]
 80036d6:	e00b      	b.n	80036f0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4413      	add	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_PCD_EP_Close+0x5e>
 8003706:	2302      	movs	r3, #2
 8003708:	e00e      	b.n	8003728 <HAL_PCD_EP_Close+0x7c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	f002 ff61 	bl	80065e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	460b      	mov	r3, r1
 800373e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003740:	7afb      	ldrb	r3, [r7, #11]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2200      	movs	r2, #0
 8003768:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	b2da      	uxtb	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003776:	7afb      	ldrb	r3, [r7, #11]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	2b00      	cmp	r3, #0
 800377e:	d106      	bne.n	800378e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6979      	ldr	r1, [r7, #20]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 f8c0 	bl	800690c <USB_EPStartXfer>
 800378c:	e005      	b.n	800379a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6979      	ldr	r1, [r7, #20]
 8003794:	4618      	mov	r0, r3
 8003796:	f003 f8b9 	bl	800690c <USB_EPStartXfer>
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	330a      	adds	r3, #10
 80037ba:	015b      	lsls	r3, r3, #5
 80037bc:	4413      	add	r3, r2
 80037be:	3304      	adds	r3, #4
 80037c0:	681b      	ldr	r3, [r3, #0]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr

080037cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	460b      	mov	r3, r1
 80037da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037dc:	7afb      	ldrb	r3, [r7, #11]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	015b      	lsls	r3, r3, #5
 80037e4:	3328      	adds	r3, #40	; 0x28
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4413      	add	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2201      	movs	r2, #1
 8003802:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003804:	7afb      	ldrb	r3, [r7, #11]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	b2da      	uxtb	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003810:	7afb      	ldrb	r3, [r7, #11]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6979      	ldr	r1, [r7, #20]
 8003820:	4618      	mov	r0, r3
 8003822:	f003 f873 	bl	800690c <USB_EPStartXfer>
 8003826:	e005      	b.n	8003834 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	4618      	mov	r0, r3
 8003830:	f003 f86c 	bl	800690c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 0207 	and.w	r2, r3, #7
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d901      	bls.n	800385c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e046      	b.n	80038ea <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800385c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003860:	2b00      	cmp	r3, #0
 8003862:	da0b      	bge.n	800387c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	015b      	lsls	r3, r3, #5
 800386c:	3328      	adds	r3, #40	; 0x28
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	705a      	strb	r2, [r3, #1]
 800387a:	e009      	b.n	8003890 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	015b      	lsls	r3, r3, #5
 8003880:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4413      	add	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2201      	movs	r2, #1
 8003894:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_PCD_EP_SetStall+0x72>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e01c      	b.n	80038ea <HAL_PCD_EP_SetStall+0xac>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 fadc 	bl	8006e7c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d108      	bne.n	80038e0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f003 fbda 	bl	8007094 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	f003 020f 	and.w	r2, r3, #15
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	429a      	cmp	r2, r3
 800390a:	d901      	bls.n	8003910 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e03a      	b.n	8003986 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	da0b      	bge.n	8003930 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	015b      	lsls	r3, r3, #5
 8003920:	3328      	adds	r3, #40	; 0x28
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	4413      	add	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
 800392e:	e00b      	b.n	8003948 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	015b      	lsls	r3, r3, #5
 8003938:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_PCD_EP_ClrStall+0x76>
 8003964:	2302      	movs	r3, #2
 8003966:	e00e      	b.n	8003986 <HAL_PCD_EP_ClrStall+0x94>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f003 fac2 	bl	8006f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003998:	e282      	b.n	8003ea0 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039a2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80039a4:	8afb      	ldrh	r3, [r7, #22]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80039ae:	7d7b      	ldrb	r3, [r7, #21]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 8142 	bne.w	8003c3a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80039b6:	8afb      	ldrh	r3, [r7, #22]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d151      	bne.n	8003a64 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d0:	b29c      	uxth	r4, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80039da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039de:	b29b      	uxth	r3, r3
 80039e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3328      	adds	r3, #40	; 0x28
 80039e6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	3302      	adds	r3, #2
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	441a      	add	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a22:	2100      	movs	r1, #0
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f008 ff95 	bl	800c954 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8234 	beq.w	8003ea0 <PCD_EP_ISR_Handler+0x510>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 822f 	bne.w	8003ea0 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b292      	uxth	r2, r2
 8003a56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a62:	e21d      	b.n	8003ea0 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003a6a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003a74:	8a7b      	ldrh	r3, [r7, #18]
 8003a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d033      	beq.n	8003ae6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	3306      	adds	r3, #6
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f003 fb38 	bl	8007132 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29c      	uxth	r4, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ada:	b292      	uxth	r2, r2
 8003adc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f008 ff0e 	bl	800c900 <HAL_PCD_SetupStageCallback>
 8003ae4:	e1dc      	b.n	8003ea0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ae6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f280 81d8 	bge.w	8003ea0 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003afc:	4013      	ands	r3, r2
 8003afe:	b29c      	uxth	r4, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	4413      	add	r3, r2
 8003b20:	3306      	adds	r3, #6
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d019      	beq.n	8003b74 <PCD_EP_ISR_Handler+0x1e4>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6959      	ldr	r1, [r3, #20]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	f003 faea 	bl	8007132 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	695a      	ldr	r2, [r3, #20]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	441a      	add	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f008 fed8 	bl	800c924 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461c      	mov	r4, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	441c      	add	r4, r3
 8003b86:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003b8a:	461c      	mov	r4, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10e      	bne.n	8003bb2 <PCD_EP_ISR_Handler+0x222>
 8003b94:	8823      	ldrh	r3, [r4, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8023      	strh	r3, [r4, #0]
 8003ba0:	8823      	ldrh	r3, [r4, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	8023      	strh	r3, [r4, #0]
 8003bb0:	e02d      	b.n	8003c0e <PCD_EP_ISR_Handler+0x27e>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bb8:	d812      	bhi.n	8003be0 <PCD_EP_ISR_Handler+0x250>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <PCD_EP_ISR_Handler+0x244>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	029b      	lsls	r3, r3, #10
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	8023      	strh	r3, [r4, #0]
 8003bde:	e016      	b.n	8003c0e <PCD_EP_ISR_Handler+0x27e>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	095b      	lsrs	r3, r3, #5
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <PCD_EP_ISR_Handler+0x26a>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	029b      	lsls	r3, r3, #10
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	b29c      	uxth	r4, r3
 8003c20:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c24:	b29c      	uxth	r4, r3
 8003c26:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c2a:	b29c      	uxth	r4, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4ba2      	ldr	r3, [pc, #648]	; (8003ebc <PCD_EP_ISR_Handler+0x52c>)
 8003c32:	4323      	orrs	r3, r4
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	8013      	strh	r3, [r2, #0]
 8003c38:	e132      	b.n	8003ea0 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	7d7b      	ldrb	r3, [r7, #21]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c4a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f280 80d1 	bge.w	8003df6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	7d7b      	ldrb	r3, [r7, #21]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b29c      	uxth	r4, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	7d7b      	ldrb	r3, [r7, #21]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4413      	add	r3, r2
 8003c78:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003c7c:	b292      	uxth	r2, r2
 8003c7e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003c80:	7d7b      	ldrb	r3, [r7, #21]
 8003c82:	015b      	lsls	r3, r3, #5
 8003c84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	7b1b      	ldrb	r3, [r3, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d121      	bne.n	8003cda <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	3306      	adds	r3, #6
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb8:	881b      	ldrh	r3, [r3, #0]
 8003cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cbe:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003cc0:	8bfb      	ldrh	r3, [r7, #30]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d072      	beq.n	8003dac <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6959      	ldr	r1, [r3, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	88da      	ldrh	r2, [r3, #6]
 8003cd2:	8bfb      	ldrh	r3, [r7, #30]
 8003cd4:	f003 fa2d 	bl	8007132 <USB_ReadPMA>
 8003cd8:	e068      	b.n	8003dac <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	881b      	ldrh	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d021      	beq.n	8003d38 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	3302      	adds	r3, #2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d1c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003d1e:	8bfb      	ldrh	r3, [r7, #30]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02a      	beq.n	8003d7a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6959      	ldr	r1, [r3, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	891a      	ldrh	r2, [r3, #8]
 8003d30:	8bfb      	ldrh	r3, [r7, #30]
 8003d32:	f003 f9fe 	bl	8007132 <USB_ReadPMA>
 8003d36:	e020      	b.n	8003d7a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	3306      	adds	r3, #6
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6812      	ldr	r2, [r2, #0]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d60:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003d62:	8bfb      	ldrh	r3, [r7, #30]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6959      	ldr	r1, [r3, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	895a      	ldrh	r2, [r3, #10]
 8003d74:	8bfb      	ldrh	r3, [r7, #30]
 8003d76:	f003 f9dc 	bl	8007132 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d94:	b29c      	uxth	r4, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	441a      	add	r2, r3
 8003da4:	4b46      	ldr	r3, [pc, #280]	; (8003ec0 <PCD_EP_ISR_Handler+0x530>)
 8003da6:	4323      	orrs	r3, r4
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	8bfb      	ldrh	r3, [r7, #30]
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	8bfb      	ldrh	r3, [r7, #30]
 8003dbe:	441a      	add	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d004      	beq.n	8003dd6 <PCD_EP_ISR_Handler+0x446>
 8003dcc:	8bfa      	ldrh	r2, [r7, #30]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d206      	bcs.n	8003de4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f008 fda1 	bl	800c924 <HAL_PCD_DataOutStageCallback>
 8003de2:	e008      	b.n	8003df6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	7819      	ldrb	r1, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff fc9d 	bl	8003730 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003df6:	8a7b      	ldrh	r3, [r7, #18]
 8003df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d04f      	beq.n	8003ea0 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003e00:	7d7b      	ldrb	r3, [r7, #21]
 8003e02:	015b      	lsls	r3, r3, #5
 8003e04:	3328      	adds	r3, #40	; 0x28
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	7d7b      	ldrb	r3, [r7, #21]
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e24:	b29c      	uxth	r4, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	7d7b      	ldrb	r3, [r7, #21]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003e36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	3302      	adds	r3, #2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	441a      	add	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f008 fd64 	bl	800c954 <HAL_PCD_DataInStageCallback>
 8003e8c:	e008      	b.n	8003ea0 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	7819      	ldrb	r1, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fc96 	bl	80037cc <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	b21b      	sxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f6ff ad74 	blt.w	800399a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3724      	adds	r7, #36	; 0x24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd90      	pop	{r4, r7, pc}
 8003ebc:	ffff8080 	.word	0xffff8080
 8003ec0:	ffff80c0 	.word	0xffff80c0

08003ec4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	607b      	str	r3, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	817b      	strh	r3, [r7, #10]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	015b      	lsls	r3, r3, #5
 8003eea:	3328      	adds	r3, #40	; 0x28
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e006      	b.n	8003f02 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ef4:	897b      	ldrh	r3, [r7, #10]
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d107      	bne.n	8003f18 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	80da      	strh	r2, [r3, #6]
 8003f16:	e00b      	b.n	8003f30 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0c1b      	lsrs	r3, r3, #16
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr

08003f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e26c      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8087 	beq.w	800406a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f5c:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d00c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f68:	4b8f      	ldr	r3, [pc, #572]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d112      	bne.n	8003f9a <HAL_RCC_OscConfig+0x5e>
 8003f74:	4b8c      	ldr	r3, [pc, #560]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f82:	4b89      	ldr	r3, [pc, #548]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d06c      	beq.n	8004068 <HAL_RCC_OscConfig+0x12c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d168      	bne.n	8004068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e246      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x76>
 8003fa4:	4b80      	ldr	r3, [pc, #512]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a7f      	ldr	r2, [pc, #508]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e02e      	b.n	8004010 <HAL_RCC_OscConfig+0xd4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x98>
 8003fba:	4b7b      	ldr	r3, [pc, #492]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7a      	ldr	r2, [pc, #488]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	4b78      	ldr	r3, [pc, #480]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a77      	ldr	r2, [pc, #476]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	e01d      	b.n	8004010 <HAL_RCC_OscConfig+0xd4>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0xbc>
 8003fde:	4b72      	ldr	r3, [pc, #456]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a71      	ldr	r2, [pc, #452]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0xd4>
 8003ff8:	4b6b      	ldr	r3, [pc, #428]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a6a      	ldr	r2, [pc, #424]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a67      	ldr	r2, [pc, #412]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800400a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d013      	beq.n	8004040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004018:	f7fe f886 	bl	8002128 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004020:	f7fe f882 	bl	8002128 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b64      	cmp	r3, #100	; 0x64
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e1fa      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0xe4>
 800403e:	e014      	b.n	800406a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004040:	f7fe f872 	bl	8002128 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004048:	f7fe f86e 	bl	8002128 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b64      	cmp	r3, #100	; 0x64
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e1e6      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x10c>
 8004066:	e000      	b.n	800406a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d063      	beq.n	800413e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004076:	4b4c      	ldr	r3, [pc, #304]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004082:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b08      	cmp	r3, #8
 800408c:	d11c      	bne.n	80040c8 <HAL_RCC_OscConfig+0x18c>
 800408e:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d116      	bne.n	80040c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_RCC_OscConfig+0x176>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e1ba      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	4939      	ldr	r1, [pc, #228]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040c6:	e03a      	b.n	800413e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d020      	beq.n	8004112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d0:	4b36      	ldr	r3, [pc, #216]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fe f827 	bl	8002128 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040de:	f7fe f823 	bl	8002128 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e19b      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	4b2d      	ldr	r3, [pc, #180]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fc:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4927      	ldr	r1, [pc, #156]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 800410c:	4313      	orrs	r3, r2
 800410e:	600b      	str	r3, [r1, #0]
 8004110:	e015      	b.n	800413e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_RCC_OscConfig+0x270>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe f806 	bl	8002128 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004120:	f7fe f802 	bl	8002128 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e17a      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d03a      	beq.n	80041c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d019      	beq.n	8004186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fd ffe6 	bl	8002128 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004160:	f7fd ffe2 	bl	8002128 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e15a      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCC_OscConfig+0x26c>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800417e:	2001      	movs	r0, #1
 8004180:	f000 fb0a 	bl	8004798 <RCC_Delay>
 8004184:	e01c      	b.n	80041c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_RCC_OscConfig+0x274>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418c:	f7fd ffcc 	bl	8002128 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004192:	e00f      	b.n	80041b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004194:	f7fd ffc8 	bl	8002128 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d908      	bls.n	80041b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e140      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
 80041a6:	bf00      	nop
 80041a8:	40021000 	.word	0x40021000
 80041ac:	42420000 	.word	0x42420000
 80041b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	4b9e      	ldr	r3, [pc, #632]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1e9      	bne.n	8004194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80a6 	beq.w	800431a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d2:	4b97      	ldr	r3, [pc, #604]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041de:	4b94      	ldr	r3, [pc, #592]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4a93      	ldr	r2, [pc, #588]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	61d3      	str	r3, [r2, #28]
 80041ea:	4b91      	ldr	r3, [pc, #580]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fa:	4b8e      	ldr	r3, [pc, #568]	; (8004434 <HAL_RCC_OscConfig+0x4f8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d118      	bne.n	8004238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004206:	4b8b      	ldr	r3, [pc, #556]	; (8004434 <HAL_RCC_OscConfig+0x4f8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a8a      	ldr	r2, [pc, #552]	; (8004434 <HAL_RCC_OscConfig+0x4f8>)
 800420c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004212:	f7fd ff89 	bl	8002128 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800421a:	f7fd ff85 	bl	8002128 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	; 0x64
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0fd      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	4b81      	ldr	r3, [pc, #516]	; (8004434 <HAL_RCC_OscConfig+0x4f8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0f0      	beq.n	800421a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d106      	bne.n	800424e <HAL_RCC_OscConfig+0x312>
 8004240:	4b7b      	ldr	r3, [pc, #492]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	4a7a      	ldr	r2, [pc, #488]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	6213      	str	r3, [r2, #32]
 800424c:	e02d      	b.n	80042aa <HAL_RCC_OscConfig+0x36e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x334>
 8004256:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	4a75      	ldr	r2, [pc, #468]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	6213      	str	r3, [r2, #32]
 8004262:	4b73      	ldr	r3, [pc, #460]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4a72      	ldr	r2, [pc, #456]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004268:	f023 0304 	bic.w	r3, r3, #4
 800426c:	6213      	str	r3, [r2, #32]
 800426e:	e01c      	b.n	80042aa <HAL_RCC_OscConfig+0x36e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d10c      	bne.n	8004292 <HAL_RCC_OscConfig+0x356>
 8004278:	4b6d      	ldr	r3, [pc, #436]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	4a6c      	ldr	r2, [pc, #432]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	6213      	str	r3, [r2, #32]
 8004284:	4b6a      	ldr	r3, [pc, #424]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	4a69      	ldr	r2, [pc, #420]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6213      	str	r3, [r2, #32]
 8004290:	e00b      	b.n	80042aa <HAL_RCC_OscConfig+0x36e>
 8004292:	4b67      	ldr	r3, [pc, #412]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4a66      	ldr	r2, [pc, #408]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	6213      	str	r3, [r2, #32]
 800429e:	4b64      	ldr	r3, [pc, #400]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	4a63      	ldr	r2, [pc, #396]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80042a4:	f023 0304 	bic.w	r3, r3, #4
 80042a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b2:	f7fd ff39 	bl	8002128 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fd ff35 	bl	8002128 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0ab      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	4b57      	ldr	r3, [pc, #348]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ee      	beq.n	80042ba <HAL_RCC_OscConfig+0x37e>
 80042dc:	e014      	b.n	8004308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7fd ff23 	bl	8002128 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd ff1f 	bl	8002128 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e095      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fc:	4b4c      	ldr	r3, [pc, #304]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d105      	bne.n	800431a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430e:	4b48      	ldr	r3, [pc, #288]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	4a47      	ldr	r2, [pc, #284]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8081 	beq.w	8004426 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004324:	4b42      	ldr	r3, [pc, #264]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d061      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d146      	bne.n	80043c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b3f      	ldr	r3, [pc, #252]	; (8004438 <HAL_RCC_OscConfig+0x4fc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fd fef3 	bl	8002128 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd feef 	bl	8002128 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e067      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004358:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436c:	d108      	bne.n	8004380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	492d      	ldr	r1, [pc, #180]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004380:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a19      	ldr	r1, [r3, #32]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	430b      	orrs	r3, r1
 8004392:	4927      	ldr	r1, [pc, #156]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_RCC_OscConfig+0x4fc>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7fd fec3 	bl	8002128 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7fd febf 	bl	8002128 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e037      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x46a>
 80043c4:	e02f      	b.n	8004426 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <HAL_RCC_OscConfig+0x4fc>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd feac 	bl	8002128 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fd fea8 	bl	8002128 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e020      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x498>
 80043f2:	e018      	b.n	8004426 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e013      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	429a      	cmp	r2, r3
 8004412:	d106      	bne.n	8004422 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d001      	beq.n	8004426 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000
 8004434:	40007000 	.word	0x40007000
 8004438:	42420060 	.word	0x42420060

0800443c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0d0      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004450:	4b6a      	ldr	r3, [pc, #424]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d910      	bls.n	8004480 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b67      	ldr	r3, [pc, #412]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 0207 	bic.w	r2, r3, #7
 8004466:	4965      	ldr	r1, [pc, #404]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80044b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80044ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d040      	beq.n	800455c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d115      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d107      	bne.n	800450a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fa:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e073      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450a:	4b3d      	ldr	r3, [pc, #244]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e06b      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f023 0203 	bic.w	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	4936      	ldr	r1, [pc, #216]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800452c:	f7fd fdfc 	bl	8002128 <HAL_GetTick>
 8004530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	e00a      	b.n	800454a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004534:	f7fd fdf8 	bl	8002128 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e053      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 020c 	and.w	r2, r3, #12
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	429a      	cmp	r2, r3
 800455a:	d1eb      	bne.n	8004534 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800455c:	4b27      	ldr	r3, [pc, #156]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d210      	bcs.n	800458c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 0207 	bic.w	r2, r3, #7
 8004572:	4922      	ldr	r1, [pc, #136]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	4313      	orrs	r3, r2
 8004578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCC_ClockConfig+0x1c0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f821 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045ce:	4601      	mov	r1, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	5cd3      	ldrb	r3, [r2, r3]
 80045de:	fa21 f303 	lsr.w	r3, r1, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1cc>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1d0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fc58 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40022000 	.word	0x40022000
 8004600:	40021000 	.word	0x40021000
 8004604:	0800d0b4 	.word	0x0800d0b4
 8004608:	20000000 	.word	0x20000000
 800460c:	20000004 	.word	0x20000004

08004610 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	b490      	push	{r4, r7}
 8004612:	b08a      	sub	sp, #40	; 0x28
 8004614:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004616:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004618:	1d3c      	adds	r4, r7, #4
 800461a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800461c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004620:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	2300      	movs	r3, #0
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004636:	2300      	movs	r3, #0
 8004638:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b04      	cmp	r3, #4
 8004648:	d002      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x40>
 800464a:	2b08      	cmp	r3, #8
 800464c:	d003      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x46>
 800464e:	e02d      	b.n	80046ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004650:	4b1e      	ldr	r3, [pc, #120]	; (80046cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004652:	623b      	str	r3, [r7, #32]
      break;
 8004654:	e02d      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	0c9b      	lsrs	r3, r3, #18
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004662:	4413      	add	r3, r2
 8004664:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004668:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d013      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004674:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0c5b      	lsrs	r3, r3, #17
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004682:	4413      	add	r3, r2
 8004684:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004688:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800468e:	fb02 f203 	mul.w	r2, r2, r3
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	fbb2 f3f3 	udiv	r3, r2, r3
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	e004      	b.n	80046a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	4a0c      	ldr	r2, [pc, #48]	; (80046d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046a0:	fb02 f303 	mul.w	r3, r2, r3
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	623b      	str	r3, [r7, #32]
      break;
 80046aa:	e002      	b.n	80046b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80046ae:	623b      	str	r3, [r7, #32]
      break;
 80046b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046b2:	6a3b      	ldr	r3, [r7, #32]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3728      	adds	r7, #40	; 0x28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc90      	pop	{r4, r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	0800cfd8 	.word	0x0800cfd8
 80046c4:	0800cfe8 	.word	0x0800cfe8
 80046c8:	40021000 	.word	0x40021000
 80046cc:	007a1200 	.word	0x007a1200
 80046d0:	003d0900 	.word	0x003d0900

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ec:	f7ff fff2 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 80046f0:	4601      	mov	r1, r0
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	0a1b      	lsrs	r3, r3, #8
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4a03      	ldr	r2, [pc, #12]	; (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fe:	5cd3      	ldrb	r3, [r2, r3]
 8004700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004704:	4618      	mov	r0, r3
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40021000 	.word	0x40021000
 800470c:	0800d0c4 	.word	0x0800d0c4

08004710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004714:	f7ff ffde 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 8004718:	4601      	mov	r1, r0
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	0adb      	lsrs	r3, r3, #11
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	4a03      	ldr	r2, [pc, #12]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004726:	5cd3      	ldrb	r3, [r2, r3]
 8004728:	fa21 f303 	lsr.w	r3, r1, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	0800d0c4 	.word	0x0800d0c4

08004738 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	220f      	movs	r2, #15
 8004746:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <HAL_RCC_GetClockConfig+0x58>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0203 	and.w	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <HAL_RCC_GetClockConfig+0x58>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_GetClockConfig+0x58>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800476c:	4b08      	ldr	r3, [pc, #32]	; (8004790 <HAL_RCC_GetClockConfig+0x58>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_GetClockConfig+0x5c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr
 8004790:	40021000 	.word	0x40021000
 8004794:	40022000 	.word	0x40022000

08004798 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <RCC_Delay+0x34>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <RCC_Delay+0x38>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	0a5b      	lsrs	r3, r3, #9
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047b4:	bf00      	nop
  }
  while (Delay --);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	60fa      	str	r2, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f9      	bne.n	80047b4 <RCC_Delay+0x1c>
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bc80      	pop	{r7}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000000 	.word	0x20000000
 80047d0:	10624dd3 	.word	0x10624dd3

080047d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d07d      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f4:	4b4f      	ldr	r3, [pc, #316]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10d      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004800:	4b4c      	ldr	r3, [pc, #304]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	4a4b      	ldr	r2, [pc, #300]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480a:	61d3      	str	r3, [r2, #28]
 800480c:	4b49      	ldr	r3, [pc, #292]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004818:	2301      	movs	r3, #1
 800481a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b46      	ldr	r3, [pc, #280]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d118      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004828:	4b43      	ldr	r3, [pc, #268]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a42      	ldr	r2, [pc, #264]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800482e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004832:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004834:	f7fd fc78 	bl	8002128 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483a:	e008      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800483c:	f7fd fc74 	bl	8002128 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	; 0x64
 8004848:	d901      	bls.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e06d      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484e:	4b3a      	ldr	r3, [pc, #232]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800485a:	4b36      	ldr	r3, [pc, #216]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d02e      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d027      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004878:	4b2e      	ldr	r3, [pc, #184]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004880:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004882:	4b2e      	ldr	r3, [pc, #184]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004888:	4b2c      	ldr	r3, [pc, #176]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800488e:	4a29      	ldr	r2, [pc, #164]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d014      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fd fc43 	bl	8002128 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a4:	e00a      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a6:	f7fd fc3f 	bl	8002128 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e036      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048bc:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ee      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048c8:	4b1a      	ldr	r3, [pc, #104]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4917      	ldr	r1, [pc, #92]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d105      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	4a13      	ldr	r2, [pc, #76]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	490b      	ldr	r1, [pc, #44]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	4904      	ldr	r1, [pc, #16]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
 8004938:	40007000 	.word	0x40007000
 800493c:	42420440 	.word	0x42420440

08004940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e053      	b.n	80049fa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fd f8e9 	bl	8001b44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004988:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	ea42 0103 	orr.w	r1, r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	0c1a      	lsrs	r2, r3, #16
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f002 0204 	and.w	r2, r2, #4
 80049d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b088      	sub	sp, #32
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_SPI_Transmit+0x22>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e11e      	b.n	8004c62 <HAL_SPI_Transmit+0x260>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2c:	f7fd fb7c 	bl	8002128 <HAL_GetTick>
 8004a30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d002      	beq.n	8004a48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
 8004a44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a46:	e103      	b.n	8004c50 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_SPI_Transmit+0x52>
 8004a4e:	88fb      	ldrh	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a58:	e0fa      	b.n	8004c50 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2203      	movs	r2, #3
 8004a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa0:	d107      	bne.n	8004ab2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ab0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d007      	beq.n	8004ad0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ace:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad8:	d14b      	bne.n	8004b72 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_SPI_Transmit+0xe6>
 8004ae2:	8afb      	ldrh	r3, [r7, #22]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d13e      	bne.n	8004b66 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	881a      	ldrh	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	1c9a      	adds	r2, r3, #2
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b0c:	e02b      	b.n	8004b66 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d112      	bne.n	8004b42 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	1c9a      	adds	r2, r3, #2
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b40:	e011      	b.n	8004b66 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b42:	f7fd faf1 	bl	8002128 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d803      	bhi.n	8004b5a <HAL_SPI_Transmit+0x158>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d102      	bne.n	8004b60 <HAL_SPI_Transmit+0x15e>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d102      	bne.n	8004b66 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b64:	e074      	b.n	8004c50 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1ce      	bne.n	8004b0e <HAL_SPI_Transmit+0x10c>
 8004b70:	e04c      	b.n	8004c0c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x17e>
 8004b7a:	8afb      	ldrh	r3, [r7, #22]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d140      	bne.n	8004c02 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ba6:	e02c      	b.n	8004c02 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d113      	bne.n	8004bde <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bdc:	e011      	b.n	8004c02 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bde:	f7fd faa3 	bl	8002128 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d803      	bhi.n	8004bf6 <HAL_SPI_Transmit+0x1f4>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d102      	bne.n	8004bfc <HAL_SPI_Transmit+0x1fa>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c00:	e026      	b.n	8004c50 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1cd      	bne.n	8004ba8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	6839      	ldr	r1, [r7, #0]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fa43 	bl	800509c <SPI_EndRxTxTransaction>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10a      	bne.n	8004c40 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e000      	b.n	8004c50 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3720      	adds	r7, #32
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b08c      	sub	sp, #48	; 0x30
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x26>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e18a      	b.n	8004fa6 <HAL_SPI_TransmitReceive+0x33c>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c98:	f7fd fa46 	bl	8002128 <HAL_GetTick>
 8004c9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cae:	887b      	ldrh	r3, [r7, #2]
 8004cb0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d00f      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x70>
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cc0:	d107      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x68>
 8004cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d003      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cd8:	e15b      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x82>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <HAL_SPI_TransmitReceive+0x82>
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cf2:	e14e      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d003      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2205      	movs	r2, #5
 8004d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	887a      	ldrh	r2, [r7, #2]
 8004d18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	887a      	ldrh	r2, [r7, #2]
 8004d1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	887a      	ldrh	r2, [r7, #2]
 8004d2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	887a      	ldrh	r2, [r7, #2]
 8004d30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d007      	beq.n	8004d5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d64:	d178      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <HAL_SPI_TransmitReceive+0x10a>
 8004d6e:	8b7b      	ldrh	r3, [r7, #26]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d166      	bne.n	8004e42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	1c9a      	adds	r2, r3, #2
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d98:	e053      	b.n	8004e42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d11b      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x176>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d016      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0x176>
 8004db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d113      	bne.n	8004de0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	881a      	ldrh	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	1c9a      	adds	r2, r3, #2
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d119      	bne.n	8004e22 <HAL_SPI_TransmitReceive+0x1b8>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d014      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	b292      	uxth	r2, r2
 8004e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	1c9a      	adds	r2, r3, #2
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e22:	f7fd f981 	bl	8002128 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d807      	bhi.n	8004e42 <HAL_SPI_TransmitReceive+0x1d8>
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e38:	d003      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e40:	e0a7      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1a6      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x130>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1a1      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x130>
 8004e56:	e07c      	b.n	8004f52 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_SPI_TransmitReceive+0x1fc>
 8004e60:	8b7b      	ldrh	r3, [r7, #26]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d16b      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	7812      	ldrb	r2, [r2, #0]
 8004e72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e8c:	e057      	b.n	8004f3e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d11c      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x26c>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d017      	beq.n	8004ed6 <HAL_SPI_TransmitReceive+0x26c>
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d114      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d119      	bne.n	8004f18 <HAL_SPI_TransmitReceive+0x2ae>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d014      	beq.n	8004f18 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f14:	2301      	movs	r3, #1
 8004f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f18:	f7fd f906 	bl	8002128 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d803      	bhi.n	8004f30 <HAL_SPI_TransmitReceive+0x2c6>
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d102      	bne.n	8004f36 <HAL_SPI_TransmitReceive+0x2cc>
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f3c:	e029      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1a2      	bne.n	8004e8e <HAL_SPI_TransmitReceive+0x224>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d19d      	bne.n	8004e8e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f8a0 	bl	800509c <SPI_EndRxTxTransaction>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d006      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f6e:	e010      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	617b      	str	r3, [r7, #20]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	e000      	b.n	8004f92 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3730      	adds	r7, #48	; 0x30
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fbc:	b2db      	uxtb	r3, r3
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd8:	e04c      	b.n	8005074 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d048      	beq.n	8005074 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fe2:	f7fd f8a1 	bl	8002128 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d902      	bls.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d13d      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005006:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005010:	d111      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501a:	d004      	beq.n	8005026 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005024:	d107      	bne.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005034:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503e:	d10f      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e00f      	b.n	8005094 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	429a      	cmp	r2, r3
 8005090:	d1a3      	bne.n	8004fda <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	2180      	movs	r1, #128	; 0x80
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff ff88 	bl	8004fc8 <SPI_WaitFlagStateUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e000      	b.n	80050d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e01d      	b.n	8005126 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc fdb4 	bl	8001c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3304      	adds	r3, #4
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f000 fb02 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b06      	cmp	r3, #6
 8005156:	d007      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e01d      	b.n	80051c2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fc fd98 	bl	8001cd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fab4 	bl	8005720 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d122      	bne.n	8005226 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d11b      	bne.n	8005226 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0202 	mvn.w	r2, #2
 80051f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa6b 	bl	80056e8 <HAL_TIM_IC_CaptureCallback>
 8005212:	e005      	b.n	8005220 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fa5e 	bl	80056d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa6d 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b04      	cmp	r3, #4
 8005232:	d122      	bne.n	800527a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d11b      	bne.n	800527a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f06f 0204 	mvn.w	r2, #4
 800524a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fa41 	bl	80056e8 <HAL_TIM_IC_CaptureCallback>
 8005266:	e005      	b.n	8005274 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa34 	bl	80056d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa43 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b08      	cmp	r3, #8
 8005286:	d122      	bne.n	80052ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d11b      	bne.n	80052ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0208 	mvn.w	r2, #8
 800529e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2204      	movs	r2, #4
 80052a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fa17 	bl	80056e8 <HAL_TIM_IC_CaptureCallback>
 80052ba:	e005      	b.n	80052c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fa0a 	bl	80056d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa19 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0310 	and.w	r3, r3, #16
 80052d8:	2b10      	cmp	r3, #16
 80052da:	d122      	bne.n	8005322 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d11b      	bne.n	8005322 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f06f 0210 	mvn.w	r2, #16
 80052f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2208      	movs	r2, #8
 80052f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f9ed 	bl	80056e8 <HAL_TIM_IC_CaptureCallback>
 800530e:	e005      	b.n	800531c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f9e0 	bl	80056d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9ef 	bl	80056fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10e      	bne.n	800534e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d107      	bne.n	800534e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f06f 0201 	mvn.w	r2, #1
 8005346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fc f9bf 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d10e      	bne.n	800537a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d107      	bne.n	800537a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fca0 	bl	8005cba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b40      	cmp	r3, #64	; 0x40
 8005386:	d10e      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d107      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f9b3 	bl	800570c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f003 0320 	and.w	r3, r3, #32
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d10e      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f06f 0220 	mvn.w	r2, #32
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fc6b 	bl	8005ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e0b4      	b.n	8005560 <HAL_TIM_PWM_ConfigChannel+0x184>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	f200 809f 	bhi.w	800554c <HAL_TIM_PWM_ConfigChannel+0x170>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005449 	.word	0x08005449
 8005418:	0800554d 	.word	0x0800554d
 800541c:	0800554d 	.word	0x0800554d
 8005420:	0800554d 	.word	0x0800554d
 8005424:	08005489 	.word	0x08005489
 8005428:	0800554d 	.word	0x0800554d
 800542c:	0800554d 	.word	0x0800554d
 8005430:	0800554d 	.word	0x0800554d
 8005434:	080054cb 	.word	0x080054cb
 8005438:	0800554d 	.word	0x0800554d
 800543c:	0800554d 	.word	0x0800554d
 8005440:	0800554d 	.word	0x0800554d
 8005444:	0800550b 	.word	0x0800550b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f9c8 	bl	80057e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0208 	orr.w	r2, r2, #8
 8005462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0204 	bic.w	r2, r2, #4
 8005472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	619a      	str	r2, [r3, #24]
      break;
 8005486:	e062      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fa0e 	bl	80058b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6999      	ldr	r1, [r3, #24]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]
      break;
 80054c8:	e041      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fa57 	bl	8005984 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0208 	orr.w	r2, r2, #8
 80054e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0204 	bic.w	r2, r2, #4
 80054f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	61da      	str	r2, [r3, #28]
      break;
 8005508:	e021      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 faa1 	bl	8005a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69d9      	ldr	r1, [r3, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	021a      	lsls	r2, r3, #8
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	61da      	str	r2, [r3, #28]
      break;
 800554a:	e000      	b.n	800554e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800554c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIM_ConfigClockSource+0x18>
 800557c:	2302      	movs	r3, #2
 800557e:	e0a6      	b.n	80056ce <HAL_TIM_ConfigClockSource+0x166>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800559e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b40      	cmp	r3, #64	; 0x40
 80055b6:	d067      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0x120>
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d80b      	bhi.n	80055d4 <HAL_TIM_ConfigClockSource+0x6c>
 80055bc:	2b10      	cmp	r3, #16
 80055be:	d073      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x140>
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d802      	bhi.n	80055ca <HAL_TIM_ConfigClockSource+0x62>
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d06f      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80055c8:	e078      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d06c      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x140>
 80055ce:	2b30      	cmp	r3, #48	; 0x30
 80055d0:	d06a      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80055d2:	e073      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055d4:	2b70      	cmp	r3, #112	; 0x70
 80055d6:	d00d      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0x8c>
 80055d8:	2b70      	cmp	r3, #112	; 0x70
 80055da:	d804      	bhi.n	80055e6 <HAL_TIM_ConfigClockSource+0x7e>
 80055dc:	2b50      	cmp	r3, #80	; 0x50
 80055de:	d033      	beq.n	8005648 <HAL_TIM_ConfigClockSource+0xe0>
 80055e0:	2b60      	cmp	r3, #96	; 0x60
 80055e2:	d041      	beq.n	8005668 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80055e4:	e06a      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	d066      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x152>
 80055ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f0:	d017      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055f2:	e063      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f000 faed 	bl	8005be2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005616:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]
      break;
 8005620:	e04c      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f000 fad6 	bl	8005be2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005644:	609a      	str	r2, [r3, #8]
      break;
 8005646:	e039      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	461a      	mov	r2, r3
 8005656:	f000 fa4d 	bl	8005af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2150      	movs	r1, #80	; 0x50
 8005660:	4618      	mov	r0, r3
 8005662:	f000 faa4 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 8005666:	e029      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	461a      	mov	r2, r3
 8005676:	f000 fa6b 	bl	8005b50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2160      	movs	r1, #96	; 0x60
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fa94 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 8005686:	e019      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	461a      	mov	r2, r3
 8005696:	f000 fa2d 	bl	8005af4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2140      	movs	r1, #64	; 0x40
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fa84 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 80056a6:	e009      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f000 fa7b 	bl	8005bae <TIM_ITRx_SetConfig>
      break;
 80056b8:	e000      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80056ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bc80      	pop	{r7}
 800570a:	4770      	bx	lr

0800570c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr
	...

08005720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a29      	ldr	r2, [pc, #164]	; (80057d8 <TIM_Base_SetConfig+0xb8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00b      	beq.n	8005750 <TIM_Base_SetConfig+0x30>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573e:	d007      	beq.n	8005750 <TIM_Base_SetConfig+0x30>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a26      	ldr	r2, [pc, #152]	; (80057dc <TIM_Base_SetConfig+0xbc>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <TIM_Base_SetConfig+0x30>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a25      	ldr	r2, [pc, #148]	; (80057e0 <TIM_Base_SetConfig+0xc0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d108      	bne.n	8005762 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1c      	ldr	r2, [pc, #112]	; (80057d8 <TIM_Base_SetConfig+0xb8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00b      	beq.n	8005782 <TIM_Base_SetConfig+0x62>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005770:	d007      	beq.n	8005782 <TIM_Base_SetConfig+0x62>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a19      	ldr	r2, [pc, #100]	; (80057dc <TIM_Base_SetConfig+0xbc>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_Base_SetConfig+0x62>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <TIM_Base_SetConfig+0xc0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d108      	bne.n	8005794 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a07      	ldr	r2, [pc, #28]	; (80057d8 <TIM_Base_SetConfig+0xb8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	615a      	str	r2, [r3, #20]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800

080057e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 0302 	bic.w	r3, r3, #2
 800582c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a1c      	ldr	r2, [pc, #112]	; (80058ac <TIM_OC1_SetConfig+0xc8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d10c      	bne.n	800585a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f023 0308 	bic.w	r3, r3, #8
 8005846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a13      	ldr	r2, [pc, #76]	; (80058ac <TIM_OC1_SetConfig+0xc8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d111      	bne.n	8005886 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	4313      	orrs	r3, r2
 8005884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	621a      	str	r2, [r3, #32]
}
 80058a0:	bf00      	nop
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40012c00 	.word	0x40012c00

080058b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f023 0210 	bic.w	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0320 	bic.w	r3, r3, #32
 80058fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <TIM_OC2_SetConfig+0xd0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10d      	bne.n	800592c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a14      	ldr	r2, [pc, #80]	; (8005980 <TIM_OC2_SetConfig+0xd0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d113      	bne.n	800595c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	40012c00 	.word	0x40012c00

08005984 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0303 	bic.w	r3, r3, #3
 80059ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	021b      	lsls	r3, r3, #8
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <TIM_OC3_SetConfig+0xd0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10d      	bne.n	80059fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <TIM_OC3_SetConfig+0xd0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d113      	bne.n	8005a2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	621a      	str	r2, [r3, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40012c00 	.word	0x40012c00

08005a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	031b      	lsls	r3, r3, #12
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0f      	ldr	r2, [pc, #60]	; (8005af0 <TIM_OC4_SetConfig+0x98>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d109      	bne.n	8005acc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	019b      	lsls	r3, r3, #6
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	40012c00 	.word	0x40012c00

08005af4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f023 030a 	bic.w	r3, r3, #10
 8005b30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bc80      	pop	{r7}
 8005b4e:	4770      	bx	lr

08005b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f023 0210 	bic.w	r2, r3, #16
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	031b      	lsls	r3, r3, #12
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	621a      	str	r2, [r3, #32]
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f043 0307 	orr.w	r3, r3, #7
 8005bd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b087      	sub	sp, #28
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	60f8      	str	r0, [r7, #12]
 8005bea:	60b9      	str	r1, [r7, #8]
 8005bec:	607a      	str	r2, [r7, #4]
 8005bee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	021a      	lsls	r2, r3, #8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	609a      	str	r2, [r3, #8]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e032      	b.n	8005c9e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c70:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e03f      	b.n	8005d5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7fc f888 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2224      	movs	r2, #36	; 0x24
 8005cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f829 	bl	8005d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005da2:	f023 030c 	bic.w	r3, r3, #12
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6812      	ldr	r2, [r2, #0]
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	430b      	orrs	r3, r1
 8005dae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a52      	ldr	r2, [pc, #328]	; (8005f14 <UART_SetConfig+0x1ac>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d14e      	bne.n	8005e6e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005dd0:	f7fe fc9e 	bl	8004710 <HAL_RCC_GetPCLK2Freq>
 8005dd4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009a      	lsls	r2, r3, #2
 8005de0:	441a      	add	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	4a4a      	ldr	r2, [pc, #296]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	0119      	lsls	r1, r3, #4
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009a      	lsls	r2, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e0c:	4b42      	ldr	r3, [pc, #264]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2064      	movs	r0, #100	; 0x64
 8005e16:	fb00 f303 	mul.w	r3, r0, r3
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	3332      	adds	r3, #50	; 0x32
 8005e20:	4a3d      	ldr	r2, [pc, #244]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005e22:	fba2 2303 	umull	r2, r3, r2, r3
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2c:	4419      	add	r1, r3
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	009a      	lsls	r2, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e44:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005e46:	fba3 0302 	umull	r0, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2064      	movs	r0, #100	; 0x64
 8005e4e:	fb00 f303 	mul.w	r3, r0, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	3332      	adds	r3, #50	; 0x32
 8005e58:	4a2f      	ldr	r2, [pc, #188]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f003 020f 	and.w	r2, r3, #15
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	440a      	add	r2, r1
 8005e6a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005e6c:	e04d      	b.n	8005f0a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e6e:	f7fe fc3b 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8005e72:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009a      	lsls	r2, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8a:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	0119      	lsls	r1, r3, #4
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009a      	lsls	r2, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eaa:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005eac:	fba3 0302 	umull	r0, r3, r3, r2
 8005eb0:	095b      	lsrs	r3, r3, #5
 8005eb2:	2064      	movs	r0, #100	; 0x64
 8005eb4:	fb00 f303 	mul.w	r3, r0, r3
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	3332      	adds	r3, #50	; 0x32
 8005ebe:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	095b      	lsrs	r3, r3, #5
 8005ec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eca:	4419      	add	r1, r3
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009a      	lsls	r2, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005ee4:	fba3 0302 	umull	r0, r3, r3, r2
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	2064      	movs	r0, #100	; 0x64
 8005eec:	fb00 f303 	mul.w	r3, r0, r3
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	3332      	adds	r3, #50	; 0x32
 8005ef6:	4a08      	ldr	r2, [pc, #32]	; (8005f18 <UART_SetConfig+0x1b0>)
 8005ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	f003 020f 	and.w	r2, r3, #15
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	440a      	add	r2, r1
 8005f08:	609a      	str	r2, [r3, #8]
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40013800 	.word	0x40013800
 8005f18:	51eb851f 	.word	0x51eb851f

08005f1c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	f107 0014 	add.w	r0, r7, #20
 8005f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bc80      	pop	{r7}
 8005f38:	b004      	add	sp, #16
 8005f3a:	4770      	bx	lr

08005f3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005f48:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	89fb      	ldrh	r3, [r7, #14]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b085      	sub	sp, #20
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f72:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005f76:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	b21a      	sxth	r2, r3
 8005f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f86:	43db      	mvns	r3, r3
 8005f88:	b21b      	sxth	r3, r3
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	b21b      	sxth	r3, r3
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr

08005fba <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fba:	b084      	sub	sp, #16
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	f107 0014 	add.w	r0, r7, #20
 8005fc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ffa5 	bl	8005f3c <USB_EnableGlobalInt>

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ffe:	b004      	add	sp, #16
 8006000:	4770      	bx	lr
	...

08006004 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006004:	b490      	push	{r4, r7}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	78db      	ldrb	r3, [r3, #3]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d819      	bhi.n	8006066 <USB_ActivateEndpoint+0x62>
 8006032:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <USB_ActivateEndpoint+0x34>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	08006049 	.word	0x08006049
 800603c:	0800605d 	.word	0x0800605d
 8006040:	0800606d 	.word	0x0800606d
 8006044:	08006053 	.word	0x08006053
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006048:	89bb      	ldrh	r3, [r7, #12]
 800604a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800604e:	81bb      	strh	r3, [r7, #12]
      break;
 8006050:	e00d      	b.n	800606e <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006052:	89bb      	ldrh	r3, [r7, #12]
 8006054:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006058:	81bb      	strh	r3, [r7, #12]
      break;
 800605a:	e008      	b.n	800606e <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800605c:	89bb      	ldrh	r3, [r7, #12]
 800605e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006062:	81bb      	strh	r3, [r7, #12]
      break;
 8006064:	e003      	b.n	800606e <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
      break;
 800606a:	e000      	b.n	800606e <USB_ActivateEndpoint+0x6a>
      break;
 800606c:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	441a      	add	r2, r3
 8006078:	89bb      	ldrh	r3, [r7, #12]
 800607a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800607e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	b29b      	uxth	r3, r3
 800608c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4313      	orrs	r3, r2
 80060ae:	b29c      	uxth	r4, r3
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	441a      	add	r2, r3
 80060ba:	4b8a      	ldr	r3, [pc, #552]	; (80062e4 <USB_ActivateEndpoint+0x2e0>)
 80060bc:	4323      	orrs	r3, r4
 80060be:	b29b      	uxth	r3, r3
 80060c0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	7b1b      	ldrb	r3, [r3, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f040 8112 	bne.w	80062f0 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d067      	beq.n	80061a4 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80060d4:	687c      	ldr	r4, [r7, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060dc:	b29b      	uxth	r3, r3
 80060de:	441c      	add	r4, r3
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	4423      	add	r3, r4
 80060e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ec:	461c      	mov	r4, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	88db      	ldrh	r3, [r3, #6]
 80060f2:	085b      	lsrs	r3, r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29c      	uxth	r4, r3
 800610a:	4623      	mov	r3, r4
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d014      	beq.n	800613e <USB_ActivateEndpoint+0x13a>
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612a:	b29c      	uxth	r4, r3
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	441a      	add	r2, r3
 8006136:	4b6c      	ldr	r3, [pc, #432]	; (80062e8 <USB_ActivateEndpoint+0x2e4>)
 8006138:	4323      	orrs	r3, r4
 800613a:	b29b      	uxth	r3, r3
 800613c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d018      	beq.n	8006178 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	b29c      	uxth	r4, r3
 800615e:	f084 0320 	eor.w	r3, r4, #32
 8006162:	b29c      	uxth	r4, r3
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	441a      	add	r2, r3
 800616e:	4b5d      	ldr	r3, [pc, #372]	; (80062e4 <USB_ActivateEndpoint+0x2e0>)
 8006170:	4323      	orrs	r3, r4
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]
 8006176:	e22b      	b.n	80065d0 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800618e:	b29c      	uxth	r4, r3
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	4b52      	ldr	r3, [pc, #328]	; (80062e4 <USB_ActivateEndpoint+0x2e0>)
 800619c:	4323      	orrs	r3, r4
 800619e:	b29b      	uxth	r3, r3
 80061a0:	8013      	strh	r3, [r2, #0]
 80061a2:	e215      	b.n	80065d0 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80061a4:	687c      	ldr	r4, [r7, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	441c      	add	r4, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	4423      	add	r3, r4
 80061b8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80061bc:	461c      	mov	r4, r3
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	88db      	ldrh	r3, [r3, #6]
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80061cc:	687c      	ldr	r4, [r7, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	441c      	add	r4, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	011b      	lsls	r3, r3, #4
 80061de:	4423      	add	r3, r4
 80061e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061e4:	461c      	mov	r4, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10e      	bne.n	800620c <USB_ActivateEndpoint+0x208>
 80061ee:	8823      	ldrh	r3, [r4, #0]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8023      	strh	r3, [r4, #0]
 80061fa:	8823      	ldrh	r3, [r4, #0]
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006206:	b29b      	uxth	r3, r3
 8006208:	8023      	strh	r3, [r4, #0]
 800620a:	e02d      	b.n	8006268 <USB_ActivateEndpoint+0x264>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b3e      	cmp	r3, #62	; 0x3e
 8006212:	d812      	bhi.n	800623a <USB_ActivateEndpoint+0x236>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	60bb      	str	r3, [r7, #8]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <USB_ActivateEndpoint+0x22a>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	3301      	adds	r3, #1
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	b29b      	uxth	r3, r3
 8006232:	029b      	lsls	r3, r3, #10
 8006234:	b29b      	uxth	r3, r3
 8006236:	8023      	strh	r3, [r4, #0]
 8006238:	e016      	b.n	8006268 <USB_ActivateEndpoint+0x264>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <USB_ActivateEndpoint+0x250>
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3b01      	subs	r3, #1
 8006252:	60bb      	str	r3, [r7, #8]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	b29b      	uxth	r3, r3
 8006258:	029b      	lsls	r3, r3, #10
 800625a:	b29b      	uxth	r3, r3
 800625c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006264:	b29b      	uxth	r3, r3
 8006266:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	b29c      	uxth	r4, r3
 8006276:	4623      	mov	r3, r4
 8006278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d014      	beq.n	80062aa <USB_ActivateEndpoint+0x2a6>
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006296:	b29c      	uxth	r4, r3
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	4b12      	ldr	r3, [pc, #72]	; (80062ec <USB_ActivateEndpoint+0x2e8>)
 80062a4:	4323      	orrs	r3, r4
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	b29c      	uxth	r4, r3
 80062c2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80062c6:	b29c      	uxth	r4, r3
 80062c8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80062cc:	b29c      	uxth	r4, r3
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	441a      	add	r2, r3
 80062d8:	4b02      	ldr	r3, [pc, #8]	; (80062e4 <USB_ActivateEndpoint+0x2e0>)
 80062da:	4323      	orrs	r3, r4
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]
 80062e0:	e176      	b.n	80065d0 <USB_ActivateEndpoint+0x5cc>
 80062e2:	bf00      	nop
 80062e4:	ffff8080 	.word	0xffff8080
 80062e8:	ffff80c0 	.word	0xffff80c0
 80062ec:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006306:	b29c      	uxth	r4, r3
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	4b96      	ldr	r3, [pc, #600]	; (800656c <USB_ActivateEndpoint+0x568>)
 8006314:	4323      	orrs	r3, r4
 8006316:	b29b      	uxth	r3, r3
 8006318:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800631a:	687c      	ldr	r4, [r7, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	441c      	add	r4, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	4423      	add	r3, r4
 800632e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006332:	461c      	mov	r4, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	891b      	ldrh	r3, [r3, #8]
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	b29b      	uxth	r3, r3
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	8023      	strh	r3, [r4, #0]
 8006342:	687c      	ldr	r4, [r7, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634a:	b29b      	uxth	r3, r3
 800634c:	441c      	add	r4, r3
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	4423      	add	r3, r4
 8006356:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800635a:	461c      	mov	r4, r3
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	895b      	ldrh	r3, [r3, #10]
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	b29b      	uxth	r3, r3
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	b29b      	uxth	r3, r3
 8006368:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	785b      	ldrb	r3, [r3, #1]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 8088 	bne.w	8006484 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	b29c      	uxth	r4, r3
 8006382:	4623      	mov	r3, r4
 8006384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d014      	beq.n	80063b6 <USB_ActivateEndpoint+0x3b2>
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	b29c      	uxth	r4, r3
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	441a      	add	r2, r3
 80063ae:	4b70      	ldr	r3, [pc, #448]	; (8006570 <USB_ActivateEndpoint+0x56c>)
 80063b0:	4323      	orrs	r3, r4
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	b29c      	uxth	r4, r3
 80063c4:	4623      	mov	r3, r4
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d014      	beq.n	80063f8 <USB_ActivateEndpoint+0x3f4>
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	b29c      	uxth	r4, r3
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	4b60      	ldr	r3, [pc, #384]	; (8006574 <USB_ActivateEndpoint+0x570>)
 80063f2:	4323      	orrs	r3, r4
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29b      	uxth	r3, r3
 8006406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640e:	b29c      	uxth	r4, r3
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	4b56      	ldr	r3, [pc, #344]	; (8006574 <USB_ActivateEndpoint+0x570>)
 800641c:	4323      	orrs	r3, r4
 800641e:	b29b      	uxth	r3, r3
 8006420:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	b29b      	uxth	r3, r3
 8006430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006438:	b29c      	uxth	r4, r3
 800643a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800643e:	b29c      	uxth	r4, r3
 8006440:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006444:	b29c      	uxth	r4, r3
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	441a      	add	r2, r3
 8006450:	4b49      	ldr	r3, [pc, #292]	; (8006578 <USB_ActivateEndpoint+0x574>)
 8006452:	4323      	orrs	r3, r4
 8006454:	b29b      	uxth	r3, r3
 8006456:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800646a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646e:	b29c      	uxth	r4, r3
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	441a      	add	r2, r3
 800647a:	4b3f      	ldr	r3, [pc, #252]	; (8006578 <USB_ActivateEndpoint+0x574>)
 800647c:	4323      	orrs	r3, r4
 800647e:	b29b      	uxth	r3, r3
 8006480:	8013      	strh	r3, [r2, #0]
 8006482:	e0a5      	b.n	80065d0 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29c      	uxth	r4, r3
 8006492:	4623      	mov	r3, r4
 8006494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d014      	beq.n	80064c6 <USB_ActivateEndpoint+0x4c2>
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	b29c      	uxth	r4, r3
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	441a      	add	r2, r3
 80064be:	4b2c      	ldr	r3, [pc, #176]	; (8006570 <USB_ActivateEndpoint+0x56c>)
 80064c0:	4323      	orrs	r3, r4
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29c      	uxth	r4, r3
 80064d4:	4623      	mov	r3, r4
 80064d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d014      	beq.n	8006508 <USB_ActivateEndpoint+0x504>
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f4:	b29c      	uxth	r4, r3
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	441a      	add	r2, r3
 8006500:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <USB_ActivateEndpoint+0x570>)
 8006502:	4323      	orrs	r3, r4
 8006504:	b29b      	uxth	r3, r3
 8006506:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	b29b      	uxth	r3, r3
 8006516:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	b29c      	uxth	r4, r3
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <USB_ActivateEndpoint+0x56c>)
 800652c:	4323      	orrs	r3, r4
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	78db      	ldrb	r3, [r3, #3]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d020      	beq.n	800657c <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006550:	b29c      	uxth	r4, r3
 8006552:	f084 0320 	eor.w	r3, r4, #32
 8006556:	b29c      	uxth	r4, r3
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	441a      	add	r2, r3
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <USB_ActivateEndpoint+0x574>)
 8006564:	4323      	orrs	r3, r4
 8006566:	b29b      	uxth	r3, r3
 8006568:	8013      	strh	r3, [r2, #0]
 800656a:	e01c      	b.n	80065a6 <USB_ActivateEndpoint+0x5a2>
 800656c:	ffff8180 	.word	0xffff8180
 8006570:	ffffc080 	.word	0xffffc080
 8006574:	ffff80c0 	.word	0xffff80c0
 8006578:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006592:	b29c      	uxth	r4, r3
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <USB_ActivateEndpoint+0x5d8>)
 80065a0:	4323      	orrs	r3, r4
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065bc:	b29c      	uxth	r4, r3
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	441a      	add	r2, r3
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <USB_ActivateEndpoint+0x5d8>)
 80065ca:	4323      	orrs	r3, r4
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc90      	pop	{r4, r7}
 80065da:	4770      	bx	lr
 80065dc:	ffff8080 	.word	0xffff8080

080065e0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e0:	b490      	push	{r4, r7}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	7b1b      	ldrb	r3, [r3, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d171      	bne.n	80066d6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	785b      	ldrb	r3, [r3, #1]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d036      	beq.n	8006668 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29c      	uxth	r4, r3
 8006608:	4623      	mov	r3, r4
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	d014      	beq.n	800663c <USB_DeactivateEndpoint+0x5c>
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006628:	b29c      	uxth	r4, r3
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	441a      	add	r2, r3
 8006634:	4b6b      	ldr	r3, [pc, #428]	; (80067e4 <USB_DeactivateEndpoint+0x204>)
 8006636:	4323      	orrs	r3, r4
 8006638:	b29b      	uxth	r3, r3
 800663a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800664e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006652:	b29c      	uxth	r4, r3
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	4b62      	ldr	r3, [pc, #392]	; (80067e8 <USB_DeactivateEndpoint+0x208>)
 8006660:	4323      	orrs	r3, r4
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
 8006666:	e144      	b.n	80068f2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	b29c      	uxth	r4, r3
 8006676:	4623      	mov	r3, r4
 8006678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d014      	beq.n	80066aa <USB_DeactivateEndpoint+0xca>
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006696:	b29c      	uxth	r4, r3
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	4b52      	ldr	r3, [pc, #328]	; (80067ec <USB_DeactivateEndpoint+0x20c>)
 80066a4:	4323      	orrs	r3, r4
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c0:	b29c      	uxth	r4, r3
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	441a      	add	r2, r3
 80066cc:	4b46      	ldr	r3, [pc, #280]	; (80067e8 <USB_DeactivateEndpoint+0x208>)
 80066ce:	4323      	orrs	r3, r4
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	8013      	strh	r3, [r2, #0]
 80066d4:	e10d      	b.n	80068f2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f040 8088 	bne.w	80067f0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29c      	uxth	r4, r3
 80066ee:	4623      	mov	r3, r4
 80066f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d014      	beq.n	8006722 <USB_DeactivateEndpoint+0x142>
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670e:	b29c      	uxth	r4, r3
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	441a      	add	r2, r3
 800671a:	4b34      	ldr	r3, [pc, #208]	; (80067ec <USB_DeactivateEndpoint+0x20c>)
 800671c:	4323      	orrs	r3, r4
 800671e:	b29b      	uxth	r3, r3
 8006720:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29c      	uxth	r4, r3
 8006730:	4623      	mov	r3, r4
 8006732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d014      	beq.n	8006764 <USB_DeactivateEndpoint+0x184>
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29b      	uxth	r3, r3
 8006748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006750:	b29c      	uxth	r4, r3
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <USB_DeactivateEndpoint+0x204>)
 800675e:	4323      	orrs	r3, r4
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	b29c      	uxth	r4, r3
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	441a      	add	r2, r3
 8006786:	4b17      	ldr	r3, [pc, #92]	; (80067e4 <USB_DeactivateEndpoint+0x204>)
 8006788:	4323      	orrs	r3, r4
 800678a:	b29b      	uxth	r3, r3
 800678c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	b29c      	uxth	r4, r3
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	441a      	add	r2, r3
 80067b0:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <USB_DeactivateEndpoint+0x208>)
 80067b2:	4323      	orrs	r3, r4
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ce:	b29c      	uxth	r4, r3
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	441a      	add	r2, r3
 80067da:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <USB_DeactivateEndpoint+0x208>)
 80067dc:	4323      	orrs	r3, r4
 80067de:	b29b      	uxth	r3, r3
 80067e0:	8013      	strh	r3, [r2, #0]
 80067e2:	e086      	b.n	80068f2 <USB_DeactivateEndpoint+0x312>
 80067e4:	ffff80c0 	.word	0xffff80c0
 80067e8:	ffff8080 	.word	0xffff8080
 80067ec:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29c      	uxth	r4, r3
 80067fe:	4623      	mov	r3, r4
 8006800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d014      	beq.n	8006832 <USB_DeactivateEndpoint+0x252>
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	b29c      	uxth	r4, r3
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	4b35      	ldr	r3, [pc, #212]	; (8006900 <USB_DeactivateEndpoint+0x320>)
 800682c:	4323      	orrs	r3, r4
 800682e:	b29b      	uxth	r3, r3
 8006830:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	4413      	add	r3, r2
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	b29c      	uxth	r4, r3
 8006840:	4623      	mov	r3, r4
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <USB_DeactivateEndpoint+0x294>
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006860:	b29c      	uxth	r4, r3
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	441a      	add	r2, r3
 800686c:	4b25      	ldr	r3, [pc, #148]	; (8006904 <USB_DeactivateEndpoint+0x324>)
 800686e:	4323      	orrs	r3, r4
 8006870:	b29b      	uxth	r3, r3
 8006872:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	b29c      	uxth	r4, r3
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	441a      	add	r2, r3
 8006896:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <USB_DeactivateEndpoint+0x320>)
 8006898:	4323      	orrs	r3, r4
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b4:	b29c      	uxth	r4, r3
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	441a      	add	r2, r3
 80068c0:	4b11      	ldr	r3, [pc, #68]	; (8006908 <USB_DeactivateEndpoint+0x328>)
 80068c2:	4323      	orrs	r3, r4
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	b29c      	uxth	r4, r3
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <USB_DeactivateEndpoint+0x328>)
 80068ec:	4323      	orrs	r3, r4
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc90      	pop	{r4, r7}
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	ffffc080 	.word	0xffffc080
 8006904:	ffff80c0 	.word	0xffff80c0
 8006908:	ffff8080 	.word	0xffff8080

0800690c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800690c:	b590      	push	{r4, r7, lr}
 800690e:	b08d      	sub	sp, #52	; 0x34
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b01      	cmp	r3, #1
 800691c:	f040 8160 	bne.w	8006be0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	429a      	cmp	r2, r3
 800692a:	d909      	bls.n	8006940 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	1ad2      	subs	r2, r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	619a      	str	r2, [r3, #24]
 800693e:	e005      	b.n	800694c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2200      	movs	r2, #0
 800694a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	7b1b      	ldrb	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d119      	bne.n	8006988 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	6959      	ldr	r1, [r3, #20]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	88da      	ldrh	r2, [r3, #6]
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	b29b      	uxth	r3, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fba2 	bl	80070aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006966:	687c      	ldr	r4, [r7, #4]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696e:	b29b      	uxth	r3, r3
 8006970:	441c      	add	r4, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	4423      	add	r3, r4
 800697a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800697e:	461c      	mov	r4, r3
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	b29b      	uxth	r3, r3
 8006984:	8023      	strh	r3, [r4, #0]
 8006986:	e10f      	b.n	8006ba8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d065      	beq.n	8006a6a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800699e:	687c      	ldr	r4, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d148      	bne.n	8006a3a <USB_EPStartXfer+0x12e>
 80069a8:	687c      	ldr	r4, [r7, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	441c      	add	r4, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	4423      	add	r3, r4
 80069bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80069c0:	461c      	mov	r4, r3
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10e      	bne.n	80069e6 <USB_EPStartXfer+0xda>
 80069c8:	8823      	ldrh	r3, [r4, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	8023      	strh	r3, [r4, #0]
 80069d4:	8823      	ldrh	r3, [r4, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8023      	strh	r3, [r4, #0]
 80069e4:	e03d      	b.n	8006a62 <USB_EPStartXfer+0x156>
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	2b3e      	cmp	r3, #62	; 0x3e
 80069ea:	d810      	bhi.n	8006a0e <USB_EPStartXfer+0x102>
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	085b      	lsrs	r3, r3, #1
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <USB_EPStartXfer+0xf6>
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	3301      	adds	r3, #1
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	029b      	lsls	r3, r3, #10
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	8023      	strh	r3, [r4, #0]
 8006a0c:	e029      	b.n	8006a62 <USB_EPStartXfer+0x156>
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
 8006a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a16:	f003 031f 	and.w	r3, r3, #31
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d102      	bne.n	8006a24 <USB_EPStartXfer+0x118>
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	3b01      	subs	r3, #1
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	029b      	lsls	r3, r3, #10
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	8023      	strh	r3, [r4, #0]
 8006a38:	e013      	b.n	8006a62 <USB_EPStartXfer+0x156>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d10f      	bne.n	8006a62 <USB_EPStartXfer+0x156>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	441c      	add	r4, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	4423      	add	r3, r4
 8006a54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	b29a      	uxth	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	895b      	ldrh	r3, [r3, #10]
 8006a66:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a68:	e063      	b.n	8006b32 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	785b      	ldrb	r3, [r3, #1]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d148      	bne.n	8006b04 <USB_EPStartXfer+0x1f8>
 8006a72:	687c      	ldr	r4, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	441c      	add	r4, r3
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	4423      	add	r3, r4
 8006a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a8a:	461c      	mov	r4, r3
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10e      	bne.n	8006ab0 <USB_EPStartXfer+0x1a4>
 8006a92:	8823      	ldrh	r3, [r4, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	8023      	strh	r3, [r4, #0]
 8006a9e:	8823      	ldrh	r3, [r4, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	8023      	strh	r3, [r4, #0]
 8006aae:	e03d      	b.n	8006b2c <USB_EPStartXfer+0x220>
 8006ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ab4:	d810      	bhi.n	8006ad8 <USB_EPStartXfer+0x1cc>
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	623b      	str	r3, [r7, #32]
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <USB_EPStartXfer+0x1c0>
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	623b      	str	r3, [r7, #32]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	029b      	lsls	r3, r3, #10
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	8023      	strh	r3, [r4, #0]
 8006ad6:	e029      	b.n	8006b2c <USB_EPStartXfer+0x220>
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	623b      	str	r3, [r7, #32]
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	f003 031f 	and.w	r3, r3, #31
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <USB_EPStartXfer+0x1e2>
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	623b      	str	r3, [r7, #32]
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	029b      	lsls	r3, r3, #10
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	8023      	strh	r3, [r4, #0]
 8006b02:	e013      	b.n	8006b2c <USB_EPStartXfer+0x220>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d10f      	bne.n	8006b2c <USB_EPStartXfer+0x220>
 8006b0c:	687c      	ldr	r4, [r7, #4]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	441c      	add	r4, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	4423      	add	r3, r4
 8006b20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b24:	461c      	mov	r4, r3
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	891b      	ldrh	r3, [r3, #8]
 8006b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6959      	ldr	r1, [r3, #20]
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fab4 	bl	80070aa <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d115      	bne.n	8006b76 <USB_EPStartXfer+0x26a>
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	b29c      	uxth	r4, r3
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	4b9a      	ldr	r3, [pc, #616]	; (8006dd8 <USB_EPStartXfer+0x4cc>)
 8006b6e:	4323      	orrs	r3, r4
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	8013      	strh	r3, [r2, #0]
 8006b74:	e018      	b.n	8006ba8 <USB_EPStartXfer+0x29c>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d114      	bne.n	8006ba8 <USB_EPStartXfer+0x29c>
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b94:	b29c      	uxth	r4, r3
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	441a      	add	r2, r3
 8006ba0:	4b8e      	ldr	r3, [pc, #568]	; (8006ddc <USB_EPStartXfer+0x4d0>)
 8006ba2:	4323      	orrs	r3, r4
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbe:	b29c      	uxth	r4, r3
 8006bc0:	f084 0310 	eor.w	r3, r4, #16
 8006bc4:	b29c      	uxth	r4, r3
 8006bc6:	f084 0320 	eor.w	r3, r4, #32
 8006bca:	b29c      	uxth	r4, r3
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	441a      	add	r2, r3
 8006bd6:	4b82      	ldr	r3, [pc, #520]	; (8006de0 <USB_EPStartXfer+0x4d4>)
 8006bd8:	4323      	orrs	r3, r4
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	8013      	strh	r3, [r2, #0]
 8006bde:	e146      	b.n	8006e6e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d909      	bls.n	8006c00 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	1ad2      	subs	r2, r2, r3
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	619a      	str	r2, [r3, #24]
 8006bfe:	e005      	b.n	8006c0c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	7b1b      	ldrb	r3, [r3, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d148      	bne.n	8006ca6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006c14:	687c      	ldr	r4, [r7, #4]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	441c      	add	r4, r3
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	4423      	add	r3, r4
 8006c28:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10e      	bne.n	8006c52 <USB_EPStartXfer+0x346>
 8006c34:	8823      	ldrh	r3, [r4, #0]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	8023      	strh	r3, [r4, #0]
 8006c40:	8823      	ldrh	r3, [r4, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	8023      	strh	r3, [r4, #0]
 8006c50:	e0f2      	b.n	8006e38 <USB_EPStartXfer+0x52c>
 8006c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c54:	2b3e      	cmp	r3, #62	; 0x3e
 8006c56:	d810      	bhi.n	8006c7a <USB_EPStartXfer+0x36e>
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	085b      	lsrs	r3, r3, #1
 8006c5c:	61fb      	str	r3, [r7, #28]
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <USB_EPStartXfer+0x362>
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	029b      	lsls	r3, r3, #10
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	8023      	strh	r3, [r4, #0]
 8006c78:	e0de      	b.n	8006e38 <USB_EPStartXfer+0x52c>
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	095b      	lsrs	r3, r3, #5
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <USB_EPStartXfer+0x384>
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	029b      	lsls	r3, r3, #10
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	8023      	strh	r3, [r4, #0]
 8006ca4:	e0c8      	b.n	8006e38 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d148      	bne.n	8006d40 <USB_EPStartXfer+0x434>
 8006cae:	687c      	ldr	r4, [r7, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	441c      	add	r4, r3
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	4423      	add	r3, r4
 8006cc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc6:	461c      	mov	r4, r3
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10e      	bne.n	8006cec <USB_EPStartXfer+0x3e0>
 8006cce:	8823      	ldrh	r3, [r4, #0]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	8023      	strh	r3, [r4, #0]
 8006cda:	8823      	ldrh	r3, [r4, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8023      	strh	r3, [r4, #0]
 8006cea:	e03d      	b.n	8006d68 <USB_EPStartXfer+0x45c>
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	2b3e      	cmp	r3, #62	; 0x3e
 8006cf0:	d810      	bhi.n	8006d14 <USB_EPStartXfer+0x408>
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	085b      	lsrs	r3, r3, #1
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <USB_EPStartXfer+0x3fc>
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	3301      	adds	r3, #1
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	029b      	lsls	r3, r3, #10
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	8023      	strh	r3, [r4, #0]
 8006d12:	e029      	b.n	8006d68 <USB_EPStartXfer+0x45c>
 8006d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <USB_EPStartXfer+0x41e>
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	61bb      	str	r3, [r7, #24]
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	029b      	lsls	r3, r3, #10
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	8023      	strh	r3, [r4, #0]
 8006d3e:	e013      	b.n	8006d68 <USB_EPStartXfer+0x45c>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d10f      	bne.n	8006d68 <USB_EPStartXfer+0x45c>
 8006d48:	687c      	ldr	r4, [r7, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	441c      	add	r4, r3
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	4423      	add	r3, r4
 8006d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d60:	461c      	mov	r4, r3
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	8023      	strh	r3, [r4, #0]
 8006d68:	687c      	ldr	r4, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	785b      	ldrb	r3, [r3, #1]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d14e      	bne.n	8006e10 <USB_EPStartXfer+0x504>
 8006d72:	687c      	ldr	r4, [r7, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	441c      	add	r4, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	4423      	add	r3, r4
 8006d86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d8a:	461c      	mov	r4, r3
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10e      	bne.n	8006db0 <USB_EPStartXfer+0x4a4>
 8006d92:	8823      	ldrh	r3, [r4, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	8023      	strh	r3, [r4, #0]
 8006d9e:	8823      	ldrh	r3, [r4, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	8023      	strh	r3, [r4, #0]
 8006dae:	e043      	b.n	8006e38 <USB_EPStartXfer+0x52c>
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	2b3e      	cmp	r3, #62	; 0x3e
 8006db4:	d816      	bhi.n	8006de4 <USB_EPStartXfer+0x4d8>
 8006db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <USB_EPStartXfer+0x4c0>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	617b      	str	r3, [r7, #20]
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	029b      	lsls	r3, r3, #10
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8023      	strh	r3, [r4, #0]
 8006dd6:	e02f      	b.n	8006e38 <USB_EPStartXfer+0x52c>
 8006dd8:	ffff80c0 	.word	0xffff80c0
 8006ddc:	ffffc080 	.word	0xffffc080
 8006de0:	ffff8080 	.word	0xffff8080
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dec:	f003 031f 	and.w	r3, r3, #31
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d102      	bne.n	8006dfa <USB_EPStartXfer+0x4ee>
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	029b      	lsls	r3, r3, #10
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8023      	strh	r3, [r4, #0]
 8006e0e:	e013      	b.n	8006e38 <USB_EPStartXfer+0x52c>
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d10f      	bne.n	8006e38 <USB_EPStartXfer+0x52c>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	441c      	add	r4, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	4423      	add	r3, r4
 8006e2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e2e:	613b      	str	r3, [r7, #16]
 8006e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4e:	b29c      	uxth	r4, r3
 8006e50:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006e54:	b29c      	uxth	r4, r3
 8006e56:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006e5a:	b29c      	uxth	r4, r3
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	441a      	add	r2, r3
 8006e66:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <USB_EPStartXfer+0x56c>)
 8006e68:	4323      	orrs	r3, r4
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3734      	adds	r7, #52	; 0x34
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd90      	pop	{r4, r7, pc}
 8006e78:	ffff8080 	.word	0xffff8080

08006e7c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e7c:	b490      	push	{r4, r7}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d018      	beq.n	8006ec0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	881b      	ldrh	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea4:	b29c      	uxth	r4, r3
 8006ea6:	f084 0310 	eor.w	r3, r4, #16
 8006eaa:	b29c      	uxth	r4, r3
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	441a      	add	r2, r3
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <USB_EPSetStall+0x80>)
 8006eb8:	4323      	orrs	r3, r4
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	8013      	strh	r3, [r2, #0]
 8006ebe:	e017      	b.n	8006ef0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	b29c      	uxth	r4, r3
 8006ed8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006edc:	b29c      	uxth	r4, r3
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	4b04      	ldr	r3, [pc, #16]	; (8006efc <USB_EPSetStall+0x80>)
 8006eea:	4323      	orrs	r3, r4
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bc90      	pop	{r4, r7}
 8006efa:	4770      	bx	lr
 8006efc:	ffff8080 	.word	0xffff8080

08006f00 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f00:	b490      	push	{r4, r7}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	7b1b      	ldrb	r3, [r3, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d17d      	bne.n	800700e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d03d      	beq.n	8006f96 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29c      	uxth	r4, r3
 8006f28:	4623      	mov	r3, r4
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d014      	beq.n	8006f5c <USB_EPClearStall+0x5c>
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	b29c      	uxth	r4, r3
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	441a      	add	r2, r3
 8006f54:	4b31      	ldr	r3, [pc, #196]	; (800701c <USB_EPClearStall+0x11c>)
 8006f56:	4323      	orrs	r3, r4
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	78db      	ldrb	r3, [r3, #3]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d054      	beq.n	800700e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f7a:	b29c      	uxth	r4, r3
 8006f7c:	f084 0320 	eor.w	r3, r4, #32
 8006f80:	b29c      	uxth	r4, r3
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	441a      	add	r2, r3
 8006f8c:	4b24      	ldr	r3, [pc, #144]	; (8007020 <USB_EPClearStall+0x120>)
 8006f8e:	4323      	orrs	r3, r4
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8013      	strh	r3, [r2, #0]
 8006f94:	e03b      	b.n	800700e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	b29c      	uxth	r4, r3
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d014      	beq.n	8006fd8 <USB_EPClearStall+0xd8>
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc4:	b29c      	uxth	r4, r3
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	441a      	add	r2, r3
 8006fd0:	4b14      	ldr	r3, [pc, #80]	; (8007024 <USB_EPClearStall+0x124>)
 8006fd2:	4323      	orrs	r3, r4
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fee:	b29c      	uxth	r4, r3
 8006ff0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006ff4:	b29c      	uxth	r4, r3
 8006ff6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006ffa:	b29c      	uxth	r4, r3
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	441a      	add	r2, r3
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <USB_EPClearStall+0x120>)
 8007008:	4323      	orrs	r3, r4
 800700a:	b29b      	uxth	r3, r3
 800700c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bc90      	pop	{r4, r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	ffff80c0 	.word	0xffff80c0
 8007020:	ffff8080 	.word	0xffff8080
 8007024:	ffffc080 	.word	0xffffc080

08007028 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2280      	movs	r2, #128	; 0x80
 800703e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr

08007062 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr

08007076 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007084:	b29b      	uxth	r3, r3
 8007086:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr

08007094 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr

080070aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b08d      	sub	sp, #52	; 0x34
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	4611      	mov	r1, r2
 80070b6:	461a      	mov	r2, r3
 80070b8:	460b      	mov	r3, r1
 80070ba:	80fb      	strh	r3, [r7, #6]
 80070bc:	4613      	mov	r3, r2
 80070be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80070c0:	88bb      	ldrh	r3, [r7, #4]
 80070c2:	3301      	adds	r3, #1
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	005a      	lsls	r2, r3, #1
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80070de:	6a3b      	ldr	r3, [r7, #32]
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e2:	e01e      	b.n	8007122 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	3301      	adds	r3, #1
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	461a      	mov	r2, r3
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	b29a      	uxth	r2, r3
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	3302      	adds	r3, #2
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	3302      	adds	r3, #2
 8007114:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	3301      	adds	r3, #1
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	3b01      	subs	r3, #1
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1dd      	bne.n	80070e4 <USB_WritePMA+0x3a>
  }
}
 8007128:	bf00      	nop
 800712a:	3734      	adds	r7, #52	; 0x34
 800712c:	46bd      	mov	sp, r7
 800712e:	bc80      	pop	{r7}
 8007130:	4770      	bx	lr

08007132 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007132:	b480      	push	{r7}
 8007134:	b08b      	sub	sp, #44	; 0x2c
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	4611      	mov	r1, r2
 800713e:	461a      	mov	r2, r3
 8007140:	460b      	mov	r3, r1
 8007142:	80fb      	strh	r3, [r7, #6]
 8007144:	4613      	mov	r3, r2
 8007146:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007148:	88bb      	ldrh	r3, [r7, #4]
 800714a:	085b      	lsrs	r3, r3, #1
 800714c:	b29b      	uxth	r3, r3
 800714e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	005a      	lsls	r2, r3, #1
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007164:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
 800716a:	e01b      	b.n	80071a4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	b29b      	uxth	r3, r3
 8007172:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	3302      	adds	r3, #2
 8007178:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	b2da      	uxtb	r2, r3
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	3301      	adds	r3, #1
 8007186:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	b2da      	uxtb	r2, r3
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	3301      	adds	r3, #1
 8007196:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	3302      	adds	r3, #2
 800719c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	3b01      	subs	r3, #1
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1e0      	bne.n	800716c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80071aa:	88bb      	ldrh	r3, [r7, #4]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80071b6:	6a3b      	ldr	r3, [r7, #32]
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	701a      	strb	r2, [r3, #0]
  }
}
 80071c6:	bf00      	nop
 80071c8:	372c      	adds	r7, #44	; 0x2c
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80071d4:	4904      	ldr	r1, [pc, #16]	; (80071e8 <MX_FATFS_Init+0x18>)
 80071d6:	4805      	ldr	r0, [pc, #20]	; (80071ec <MX_FATFS_Init+0x1c>)
 80071d8:	f002 fdde 	bl	8009d98 <FATFS_LinkDriver>
 80071dc:	4603      	mov	r3, r0
 80071de:	461a      	mov	r2, r3
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <MX_FATFS_Init+0x20>)
 80071e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80071e4:	bf00      	nop
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	200018f8 	.word	0x200018f8
 80071ec:	2000000c 	.word	0x2000000c
 80071f0:	200018fc 	.word	0x200018fc

080071f4 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80071f8:	2200      	movs	r2, #0
 80071fa:	2180      	movs	r1, #128	; 0x80
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <SELECT+0x14>)
 80071fe:	f7fb ffa3 	bl	8003148 <HAL_GPIO_WritePin>
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40010c00 	.word	0x40010c00

0800720c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8007210:	2201      	movs	r2, #1
 8007212:	2180      	movs	r1, #128	; 0x80
 8007214:	4802      	ldr	r0, [pc, #8]	; (8007220 <DESELECT+0x14>)
 8007216:	f7fb ff97 	bl	8003148 <HAL_GPIO_WritePin>
}
 800721a:	bf00      	nop
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40010c00 	.word	0x40010c00

08007224 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800722e:	bf00      	nop
 8007230:	4808      	ldr	r0, [pc, #32]	; (8007254 <SPI_TxByte+0x30>)
 8007232:	f7fd febc 	bl	8004fae <HAL_SPI_GetState>
 8007236:	4603      	mov	r3, r0
 8007238:	2b01      	cmp	r3, #1
 800723a:	d1f9      	bne.n	8007230 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800723c:	1df9      	adds	r1, r7, #7
 800723e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007242:	2201      	movs	r2, #1
 8007244:	4803      	ldr	r0, [pc, #12]	; (8007254 <SPI_TxByte+0x30>)
 8007246:	f7fd fbdc 	bl	8004a02 <HAL_SPI_Transmit>
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	2000152c 	.word	0x2000152c

08007258 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800725e:	23ff      	movs	r3, #255	; 0xff
 8007260:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8007266:	bf00      	nop
 8007268:	4809      	ldr	r0, [pc, #36]	; (8007290 <SPI_RxByte+0x38>)
 800726a:	f7fd fea0 	bl	8004fae <HAL_SPI_GetState>
 800726e:	4603      	mov	r3, r0
 8007270:	2b01      	cmp	r3, #1
 8007272:	d1f9      	bne.n	8007268 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8007274:	1dba      	adds	r2, r7, #6
 8007276:	1df9      	adds	r1, r7, #7
 8007278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2301      	movs	r3, #1
 8007280:	4803      	ldr	r0, [pc, #12]	; (8007290 <SPI_RxByte+0x38>)
 8007282:	f7fd fcf2 	bl	8004c6a <HAL_SPI_TransmitReceive>
  
  return data;
 8007286:	79bb      	ldrb	r3, [r7, #6]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3708      	adds	r7, #8
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	2000152c 	.word	0x2000152c

08007294 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800729c:	f7ff ffdc 	bl	8007258 <SPI_RxByte>
 80072a0:	4603      	mov	r3, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	701a      	strb	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80072b6:	4b0b      	ldr	r3, [pc, #44]	; (80072e4 <SD_ReadyWait+0x34>)
 80072b8:	2232      	movs	r2, #50	; 0x32
 80072ba:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80072bc:	f7ff ffcc 	bl	8007258 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80072c0:	f7ff ffca 	bl	8007258 <SPI_RxByte>
 80072c4:	4603      	mov	r3, r0
 80072c6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	2bff      	cmp	r3, #255	; 0xff
 80072cc:	d004      	beq.n	80072d8 <SD_ReadyWait+0x28>
 80072ce:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <SD_ReadyWait+0x34>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1f3      	bne.n	80072c0 <SD_ReadyWait+0x10>
  
  return res;
 80072d8:	79fb      	ldrb	r3, [r7, #7]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200018f0 	.word	0x200018f0

080072e8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80072ee:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80072f2:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 80072f4:	f7ff ff8a 	bl	800720c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	e005      	b.n	800730a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80072fe:	20ff      	movs	r0, #255	; 0xff
 8007300:	f7ff ff90 	bl	8007224 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	3301      	adds	r3, #1
 8007308:	613b      	str	r3, [r7, #16]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	2b09      	cmp	r3, #9
 800730e:	ddf6      	ble.n	80072fe <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8007310:	f7ff ff70 	bl	80071f4 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8007314:	2340      	movs	r3, #64	; 0x40
 8007316:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8007328:	2395      	movs	r3, #149	; 0x95
 800732a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800732c:	2300      	movs	r3, #0
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	e009      	b.n	8007346 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8007332:	1d3a      	adds	r2, r7, #4
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff ff72 	bl	8007224 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	3301      	adds	r3, #1
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b05      	cmp	r3, #5
 800734a:	ddf2      	ble.n	8007332 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800734c:	e002      	b.n	8007354 <SD_PowerOn+0x6c>
  {
    Count--;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	3b01      	subs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8007354:	f7ff ff80 	bl	8007258 <SPI_RxByte>
 8007358:	4603      	mov	r3, r0
 800735a:	2b01      	cmp	r3, #1
 800735c:	d002      	beq.n	8007364 <SD_PowerOn+0x7c>
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1f4      	bne.n	800734e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8007364:	f7ff ff52 	bl	800720c <DESELECT>
  SPI_TxByte(0XFF);
 8007368:	20ff      	movs	r0, #255	; 0xff
 800736a:	f7ff ff5b 	bl	8007224 <SPI_TxByte>
  
  PowerFlag = 1;
 800736e:	4b03      	ldr	r3, [pc, #12]	; (800737c <SD_PowerOn+0x94>)
 8007370:	2201      	movs	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000406 	.word	0x20000406

08007380 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8007384:	4b03      	ldr	r3, [pc, #12]	; (8007394 <SD_PowerOff+0x14>)
 8007386:	2200      	movs	r2, #0
 8007388:	701a      	strb	r2, [r3, #0]
}
 800738a:	bf00      	nop
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	20000406 	.word	0x20000406

08007398 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800739c:	4b02      	ldr	r3, [pc, #8]	; (80073a8 <SD_CheckPower+0x10>)
 800739e:	781b      	ldrb	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr
 80073a8:	20000406 	.word	0x20000406

080073ac <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80073b6:	4b17      	ldr	r3, [pc, #92]	; (8007414 <SD_RxDataBlock+0x68>)
 80073b8:	220a      	movs	r2, #10
 80073ba:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80073bc:	f7ff ff4c 	bl	8007258 <SPI_RxByte>
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	2bff      	cmp	r3, #255	; 0xff
 80073c8:	d104      	bne.n	80073d4 <SD_RxDataBlock+0x28>
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <SD_RxDataBlock+0x68>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1f3      	bne.n	80073bc <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2bfe      	cmp	r3, #254	; 0xfe
 80073d8:	d001      	beq.n	80073de <SD_RxDataBlock+0x32>
    return FALSE;
 80073da:	2300      	movs	r3, #0
 80073dc:	e016      	b.n	800740c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff ff55 	bl	8007294 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff ff4f 	bl	8007294 <SPI_RxBytePtr>
  } while(btr -= 2);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	3b02      	subs	r3, #2
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1ed      	bne.n	80073de <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8007402:	f7ff ff29 	bl	8007258 <SPI_RxByte>
  SPI_RxByte();
 8007406:	f7ff ff27 	bl	8007258 <SPI_RxByte>
  
  return TRUE;
 800740a:	2301      	movs	r3, #1
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	200018f1 	.word	0x200018f1

08007418 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8007428:	f7ff ff42 	bl	80072b0 <SD_ReadyWait>
 800742c:	4603      	mov	r3, r0
 800742e:	2bff      	cmp	r3, #255	; 0xff
 8007430:	d001      	beq.n	8007436 <SD_TxDataBlock+0x1e>
    return FALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	e040      	b.n	80074b8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff fef3 	bl	8007224 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	2bfd      	cmp	r3, #253	; 0xfd
 8007442:	d031      	beq.n	80074a8 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	607a      	str	r2, [r7, #4]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fee7 	bl	8007224 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fee0 	bl	8007224 <SPI_TxByte>
    } while (--wc);
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	3b01      	subs	r3, #1
 8007468:	73bb      	strb	r3, [r7, #14]
 800746a:	7bbb      	ldrb	r3, [r7, #14]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1eb      	bne.n	8007448 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8007470:	f7ff fef2 	bl	8007258 <SPI_RxByte>
    SPI_RxByte();
 8007474:	f7ff fef0 	bl	8007258 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8007478:	e00b      	b.n	8007492 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800747a:	f7ff feed 	bl	8007258 <SPI_RxByte>
 800747e:	4603      	mov	r3, r0
 8007480:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2b05      	cmp	r3, #5
 800748a:	d006      	beq.n	800749a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800748c:	7b7b      	ldrb	r3, [r7, #13]
 800748e:	3301      	adds	r3, #1
 8007490:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8007492:	7b7b      	ldrb	r3, [r7, #13]
 8007494:	2b40      	cmp	r3, #64	; 0x40
 8007496:	d9f0      	bls.n	800747a <SD_TxDataBlock+0x62>
 8007498:	e000      	b.n	800749c <SD_TxDataBlock+0x84>
        break;
 800749a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800749c:	bf00      	nop
 800749e:	f7ff fedb 	bl	8007258 <SPI_RxByte>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d0fa      	beq.n	800749e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2b05      	cmp	r3, #5
 80074b0:	d101      	bne.n	80074b6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	6039      	str	r1, [r7, #0]
 80074ca:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80074cc:	f7ff fef0 	bl	80072b0 <SD_ReadyWait>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2bff      	cmp	r3, #255	; 0xff
 80074d4:	d001      	beq.n	80074da <SD_SendCmd+0x1a>
    return 0xFF;
 80074d6:	23ff      	movs	r3, #255	; 0xff
 80074d8:	e040      	b.n	800755c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fea1 	bl	8007224 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	0e1b      	lsrs	r3, r3, #24
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fe9b 	bl	8007224 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	0c1b      	lsrs	r3, r3, #16
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fe95 	bl	8007224 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	0a1b      	lsrs	r3, r3, #8
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff fe8f 	bl	8007224 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fe8a 	bl	8007224 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d101      	bne.n	800751e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800751a:	2395      	movs	r3, #149	; 0x95
 800751c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800751e:	79fb      	ldrb	r3, [r7, #7]
 8007520:	2b48      	cmp	r3, #72	; 0x48
 8007522:	d101      	bne.n	8007528 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8007524:	2387      	movs	r3, #135	; 0x87
 8007526:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff fe7a 	bl	8007224 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	2b4c      	cmp	r3, #76	; 0x4c
 8007534:	d101      	bne.n	800753a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8007536:	f7ff fe8f 	bl	8007258 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800753a:	230a      	movs	r3, #10
 800753c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800753e:	f7ff fe8b 	bl	8007258 <SPI_RxByte>
 8007542:	4603      	mov	r3, r0
 8007544:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8007546:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800754a:	2b00      	cmp	r3, #0
 800754c:	da05      	bge.n	800755a <SD_SendCmd+0x9a>
 800754e:	7bbb      	ldrb	r3, [r7, #14]
 8007550:	3b01      	subs	r3, #1
 8007552:	73bb      	strb	r3, [r7, #14]
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f1      	bne.n	800753e <SD_SendCmd+0x7e>
  
  return res;
 800755a:	7b7b      	ldrb	r3, [r7, #13]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8007564:	b590      	push	{r4, r7, lr}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800756e:	79fb      	ldrb	r3, [r7, #7]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8007574:	2301      	movs	r3, #1
 8007576:	e0d5      	b.n	8007724 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8007578:	4b6c      	ldr	r3, [pc, #432]	; (800772c <SD_disk_initialize+0x1c8>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <SD_disk_initialize+0x2a>
    return Stat;        
 8007586:	4b69      	ldr	r3, [pc, #420]	; (800772c <SD_disk_initialize+0x1c8>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e0ca      	b.n	8007724 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800758e:	f7ff feab 	bl	80072e8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8007592:	f7ff fe2f 	bl	80071f4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800759a:	2100      	movs	r1, #0
 800759c:	2040      	movs	r0, #64	; 0x40
 800759e:	f7ff ff8f 	bl	80074c0 <SD_SendCmd>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	f040 80a5 	bne.w	80076f4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80075aa:	4b61      	ldr	r3, [pc, #388]	; (8007730 <SD_disk_initialize+0x1cc>)
 80075ac:	2264      	movs	r2, #100	; 0x64
 80075ae:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80075b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80075b4:	2048      	movs	r0, #72	; 0x48
 80075b6:	f7ff ff83 	bl	80074c0 <SD_SendCmd>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d158      	bne.n	8007672 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]
 80075c4:	e00c      	b.n	80075e0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80075c6:	7bfc      	ldrb	r4, [r7, #15]
 80075c8:	f7ff fe46 	bl	8007258 <SPI_RxByte>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	f107 0310 	add.w	r3, r7, #16
 80075d4:	4423      	add	r3, r4
 80075d6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80075da:	7bfb      	ldrb	r3, [r7, #15]
 80075dc:	3301      	adds	r3, #1
 80075de:	73fb      	strb	r3, [r7, #15]
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d9ef      	bls.n	80075c6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80075e6:	7abb      	ldrb	r3, [r7, #10]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	f040 8083 	bne.w	80076f4 <SD_disk_initialize+0x190>
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	2baa      	cmp	r3, #170	; 0xaa
 80075f2:	d17f      	bne.n	80076f4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80075f4:	2100      	movs	r1, #0
 80075f6:	2077      	movs	r0, #119	; 0x77
 80075f8:	f7ff ff62 	bl	80074c0 <SD_SendCmd>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d807      	bhi.n	8007612 <SD_disk_initialize+0xae>
 8007602:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007606:	2069      	movs	r0, #105	; 0x69
 8007608:	f7ff ff5a 	bl	80074c0 <SD_SendCmd>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8007612:	4b47      	ldr	r3, [pc, #284]	; (8007730 <SD_disk_initialize+0x1cc>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1eb      	bne.n	80075f4 <SD_disk_initialize+0x90>
 800761c:	e000      	b.n	8007620 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800761e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8007620:	4b43      	ldr	r3, [pc, #268]	; (8007730 <SD_disk_initialize+0x1cc>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d064      	beq.n	80076f4 <SD_disk_initialize+0x190>
 800762a:	2100      	movs	r1, #0
 800762c:	207a      	movs	r0, #122	; 0x7a
 800762e:	f7ff ff47 	bl	80074c0 <SD_SendCmd>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d15d      	bne.n	80076f4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
 800763c:	e00c      	b.n	8007658 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800763e:	7bfc      	ldrb	r4, [r7, #15]
 8007640:	f7ff fe0a 	bl	8007258 <SPI_RxByte>
 8007644:	4603      	mov	r3, r0
 8007646:	461a      	mov	r2, r3
 8007648:	f107 0310 	add.w	r3, r7, #16
 800764c:	4423      	add	r3, r4
 800764e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	3301      	adds	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d9ef      	bls.n	800763e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800765e:	7a3b      	ldrb	r3, [r7, #8]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <SD_disk_initialize+0x108>
 8007668:	2306      	movs	r3, #6
 800766a:	e000      	b.n	800766e <SD_disk_initialize+0x10a>
 800766c:	2302      	movs	r3, #2
 800766e:	73bb      	strb	r3, [r7, #14]
 8007670:	e040      	b.n	80076f4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8007672:	2100      	movs	r1, #0
 8007674:	2077      	movs	r0, #119	; 0x77
 8007676:	f7ff ff23 	bl	80074c0 <SD_SendCmd>
 800767a:	4603      	mov	r3, r0
 800767c:	2b01      	cmp	r3, #1
 800767e:	d808      	bhi.n	8007692 <SD_disk_initialize+0x12e>
 8007680:	2100      	movs	r1, #0
 8007682:	2069      	movs	r0, #105	; 0x69
 8007684:	f7ff ff1c 	bl	80074c0 <SD_SendCmd>
 8007688:	4603      	mov	r3, r0
 800768a:	2b01      	cmp	r3, #1
 800768c:	d801      	bhi.n	8007692 <SD_disk_initialize+0x12e>
 800768e:	2302      	movs	r3, #2
 8007690:	e000      	b.n	8007694 <SD_disk_initialize+0x130>
 8007692:	2301      	movs	r3, #1
 8007694:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d10e      	bne.n	80076ba <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800769c:	2100      	movs	r1, #0
 800769e:	2077      	movs	r0, #119	; 0x77
 80076a0:	f7ff ff0e 	bl	80074c0 <SD_SendCmd>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d80e      	bhi.n	80076c8 <SD_disk_initialize+0x164>
 80076aa:	2100      	movs	r1, #0
 80076ac:	2069      	movs	r0, #105	; 0x69
 80076ae:	f7ff ff07 	bl	80074c0 <SD_SendCmd>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d107      	bne.n	80076c8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80076b8:	e00d      	b.n	80076d6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80076ba:	2100      	movs	r1, #0
 80076bc:	2041      	movs	r0, #65	; 0x41
 80076be:	f7ff feff 	bl	80074c0 <SD_SendCmd>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80076c8:	4b19      	ldr	r3, [pc, #100]	; (8007730 <SD_disk_initialize+0x1cc>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e1      	bne.n	8007696 <SD_disk_initialize+0x132>
 80076d2:	e000      	b.n	80076d6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80076d4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80076d6:	4b16      	ldr	r3, [pc, #88]	; (8007730 <SD_disk_initialize+0x1cc>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <SD_disk_initialize+0x18c>
 80076e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076e4:	2050      	movs	r0, #80	; 0x50
 80076e6:	f7ff feeb 	bl	80074c0 <SD_SendCmd>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80076f4:	4a0f      	ldr	r2, [pc, #60]	; (8007734 <SD_disk_initialize+0x1d0>)
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80076fa:	f7ff fd87 	bl	800720c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80076fe:	f7ff fdab 	bl	8007258 <SPI_RxByte>
  
  if (type) 
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d008      	beq.n	800771a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <SD_disk_initialize+0x1c8>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f023 0301 	bic.w	r3, r3, #1
 8007712:	b2da      	uxtb	r2, r3
 8007714:	4b05      	ldr	r3, [pc, #20]	; (800772c <SD_disk_initialize+0x1c8>)
 8007716:	701a      	strb	r2, [r3, #0]
 8007718:	e001      	b.n	800771e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800771a:	f7ff fe31 	bl	8007380 <SD_PowerOff>
  }
  
  return Stat;
 800771e:	4b03      	ldr	r3, [pc, #12]	; (800772c <SD_disk_initialize+0x1c8>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	b2db      	uxtb	r3, r3
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	bd90      	pop	{r4, r7, pc}
 800772c:	20000009 	.word	0x20000009
 8007730:	200018f1 	.word	0x200018f1
 8007734:	20000405 	.word	0x20000405

08007738 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8007748:	2301      	movs	r3, #1
 800774a:	e002      	b.n	8007752 <SD_disk_status+0x1a>
  
  return Stat;
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <SD_disk_status+0x24>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	b2db      	uxtb	r3, r3
}
 8007752:	4618      	mov	r0, r3
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr
 800775c:	20000009 	.word	0x20000009

08007760 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	4603      	mov	r3, r0
 800776e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <SD_disk_read+0x1c>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <SD_disk_read+0x20>
    return RES_PARERR;
 800777c:	2304      	movs	r3, #4
 800777e:	e051      	b.n	8007824 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8007780:	4b2a      	ldr	r3, [pc, #168]	; (800782c <SD_disk_read+0xcc>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800778e:	2303      	movs	r3, #3
 8007790:	e048      	b.n	8007824 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8007792:	4b27      	ldr	r3, [pc, #156]	; (8007830 <SD_disk_read+0xd0>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	d102      	bne.n	80077a4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	025b      	lsls	r3, r3, #9
 80077a2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80077a4:	f7ff fd26 	bl	80071f4 <SELECT>
  
  if (count == 1) 
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d111      	bne.n	80077d2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	2051      	movs	r0, #81	; 0x51
 80077b2:	f7ff fe85 	bl	80074c0 <SD_SendCmd>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d129      	bne.n	8007810 <SD_disk_read+0xb0>
 80077bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077c0:	68b8      	ldr	r0, [r7, #8]
 80077c2:	f7ff fdf3 	bl	80073ac <SD_RxDataBlock>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d021      	beq.n	8007810 <SD_disk_read+0xb0>
      count = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	e01e      	b.n	8007810 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	2052      	movs	r0, #82	; 0x52
 80077d6:	f7ff fe73 	bl	80074c0 <SD_SendCmd>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d117      	bne.n	8007810 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80077e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077e4:	68b8      	ldr	r0, [r7, #8]
 80077e6:	f7ff fde1 	bl	80073ac <SD_RxDataBlock>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00a      	beq.n	8007806 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80077f6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	603b      	str	r3, [r7, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ed      	bne.n	80077e0 <SD_disk_read+0x80>
 8007804:	e000      	b.n	8007808 <SD_disk_read+0xa8>
          break;
 8007806:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8007808:	2100      	movs	r1, #0
 800780a:	204c      	movs	r0, #76	; 0x4c
 800780c:	f7ff fe58 	bl	80074c0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8007810:	f7ff fcfc 	bl	800720c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8007814:	f7ff fd20 	bl	8007258 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	bf14      	ite	ne
 800781e:	2301      	movne	r3, #1
 8007820:	2300      	moveq	r3, #0
 8007822:	b2db      	uxtb	r3, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	3710      	adds	r7, #16
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	20000009 	.word	0x20000009
 8007830:	20000405 	.word	0x20000405

08007834 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	603b      	str	r3, [r7, #0]
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <SD_disk_write+0x1c>
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <SD_disk_write+0x20>
    return RES_PARERR;
 8007850:	2304      	movs	r3, #4
 8007852:	e06b      	b.n	800792c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8007854:	4b37      	ldr	r3, [pc, #220]	; (8007934 <SD_disk_write+0x100>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8007862:	2303      	movs	r3, #3
 8007864:	e062      	b.n	800792c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8007866:	4b33      	ldr	r3, [pc, #204]	; (8007934 <SD_disk_write+0x100>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <SD_disk_write+0x44>
    return RES_WRPRT;
 8007874:	2302      	movs	r3, #2
 8007876:	e059      	b.n	800792c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8007878:	4b2f      	ldr	r3, [pc, #188]	; (8007938 <SD_disk_write+0x104>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	f003 0304 	and.w	r3, r3, #4
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	025b      	lsls	r3, r3, #9
 8007888:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800788a:	f7ff fcb3 	bl	80071f4 <SELECT>
  
  if (count == 1) 
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b01      	cmp	r3, #1
 8007892:	d110      	bne.n	80078b6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	2058      	movs	r0, #88	; 0x58
 8007898:	f7ff fe12 	bl	80074c0 <SD_SendCmd>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d13a      	bne.n	8007918 <SD_disk_write+0xe4>
 80078a2:	21fe      	movs	r1, #254	; 0xfe
 80078a4:	68b8      	ldr	r0, [r7, #8]
 80078a6:	f7ff fdb7 	bl	8007418 <SD_TxDataBlock>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d033      	beq.n	8007918 <SD_disk_write+0xe4>
      count = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	603b      	str	r3, [r7, #0]
 80078b4:	e030      	b.n	8007918 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80078b6:	4b20      	ldr	r3, [pc, #128]	; (8007938 <SD_disk_write+0x104>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d007      	beq.n	80078d2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80078c2:	2100      	movs	r1, #0
 80078c4:	2077      	movs	r0, #119	; 0x77
 80078c6:	f7ff fdfb 	bl	80074c0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	2057      	movs	r0, #87	; 0x57
 80078ce:	f7ff fdf7 	bl	80074c0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	2059      	movs	r0, #89	; 0x59
 80078d6:	f7ff fdf3 	bl	80074c0 <SD_SendCmd>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d11b      	bne.n	8007918 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80078e0:	21fc      	movs	r1, #252	; 0xfc
 80078e2:	68b8      	ldr	r0, [r7, #8]
 80078e4:	f7ff fd98 	bl	8007418 <SD_TxDataBlock>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80078f4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	3b01      	subs	r3, #1
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1ee      	bne.n	80078e0 <SD_disk_write+0xac>
 8007902:	e000      	b.n	8007906 <SD_disk_write+0xd2>
          break;
 8007904:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8007906:	21fd      	movs	r1, #253	; 0xfd
 8007908:	2000      	movs	r0, #0
 800790a:	f7ff fd85 	bl	8007418 <SD_TxDataBlock>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <SD_disk_write+0xe4>
      {        
        count = 1;
 8007914:	2301      	movs	r3, #1
 8007916:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8007918:	f7ff fc78 	bl	800720c <DESELECT>
  SPI_RxByte();
 800791c:	f7ff fc9c 	bl	8007258 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	bf14      	ite	ne
 8007926:	2301      	movne	r3, #1
 8007928:	2300      	moveq	r3, #0
 800792a:	b2db      	uxtb	r3, r3
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000009 	.word	0x20000009
 8007938:	20000405 	.word	0x20000405

0800793c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b08b      	sub	sp, #44	; 0x2c
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	603a      	str	r2, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
 8007948:	460b      	mov	r3, r1
 800794a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8007956:	2304      	movs	r3, #4
 8007958:	e117      	b.n	8007b8a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8007960:	79bb      	ldrb	r3, [r7, #6]
 8007962:	2b05      	cmp	r3, #5
 8007964:	d126      	bne.n	80079b4 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d00e      	beq.n	800798c <SD_disk_ioctl+0x50>
 800796e:	2b02      	cmp	r3, #2
 8007970:	d012      	beq.n	8007998 <SD_disk_ioctl+0x5c>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11a      	bne.n	80079ac <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8007976:	f7ff fd0f 	bl	8007398 <SD_CheckPower>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8007980:	f7ff fcfe 	bl	8007380 <SD_PowerOff>
      res = RES_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800798a:	e0fc      	b.n	8007b86 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800798c:	f7ff fcac 	bl	80072e8 <SD_PowerOn>
      res = RES_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007996:	e0f6      	b.n	8007b86 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	1c5c      	adds	r4, r3, #1
 800799c:	f7ff fcfc 	bl	8007398 <SD_CheckPower>
 80079a0:	4603      	mov	r3, r0
 80079a2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80079a4:	2300      	movs	r3, #0
 80079a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80079aa:	e0ec      	b.n	8007b86 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80079ac:	2304      	movs	r3, #4
 80079ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079b2:	e0e8      	b.n	8007b86 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80079b4:	4b77      	ldr	r3, [pc, #476]	; (8007b94 <SD_disk_ioctl+0x258>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d001      	beq.n	80079c6 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e0e1      	b.n	8007b8a <SD_disk_ioctl+0x24e>
    
    SELECT();
 80079c6:	f7ff fc15 	bl	80071f4 <SELECT>
    
    switch (ctrl) 
 80079ca:	79bb      	ldrb	r3, [r7, #6]
 80079cc:	2b0d      	cmp	r3, #13
 80079ce:	f200 80cb 	bhi.w	8007b68 <SD_disk_ioctl+0x22c>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <SD_disk_ioctl+0x9c>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	08007ad3 	.word	0x08007ad3
 80079dc:	08007a11 	.word	0x08007a11
 80079e0:	08007ac3 	.word	0x08007ac3
 80079e4:	08007b69 	.word	0x08007b69
 80079e8:	08007b69 	.word	0x08007b69
 80079ec:	08007b69 	.word	0x08007b69
 80079f0:	08007b69 	.word	0x08007b69
 80079f4:	08007b69 	.word	0x08007b69
 80079f8:	08007b69 	.word	0x08007b69
 80079fc:	08007b69 	.word	0x08007b69
 8007a00:	08007b69 	.word	0x08007b69
 8007a04:	08007ae5 	.word	0x08007ae5
 8007a08:	08007b09 	.word	0x08007b09
 8007a0c:	08007b2d 	.word	0x08007b2d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8007a10:	2100      	movs	r1, #0
 8007a12:	2049      	movs	r0, #73	; 0x49
 8007a14:	f7ff fd54 	bl	80074c0 <SD_SendCmd>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f040 80a8 	bne.w	8007b70 <SD_disk_ioctl+0x234>
 8007a20:	f107 030c 	add.w	r3, r7, #12
 8007a24:	2110      	movs	r1, #16
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff fcc0 	bl	80073ac <SD_RxDataBlock>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 809e 	beq.w	8007b70 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8007a34:	7b3b      	ldrb	r3, [r7, #12]
 8007a36:	099b      	lsrs	r3, r3, #6
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d10e      	bne.n	8007a5c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8007a3e:	7d7b      	ldrb	r3, [r7, #21]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	7d3b      	ldrb	r3, [r7, #20]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3301      	adds	r3, #1
 8007a50:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8007a52:	8bfb      	ldrh	r3, [r7, #30]
 8007a54:	029a      	lsls	r2, r3, #10
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	601a      	str	r2, [r3, #0]
 8007a5a:	e02e      	b.n	8007aba <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007a5c:	7c7b      	ldrb	r3, [r7, #17]
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	7dbb      	ldrb	r3, [r7, #22]
 8007a66:	09db      	lsrs	r3, r3, #7
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	4413      	add	r3, r2
 8007a6c:	b2da      	uxtb	r2, r3
 8007a6e:	7d7b      	ldrb	r3, [r7, #21]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0306 	and.w	r3, r3, #6
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	4413      	add	r3, r2
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	3302      	adds	r3, #2
 8007a80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8007a84:	7d3b      	ldrb	r3, [r7, #20]
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	7cfb      	ldrb	r3, [r7, #19]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4413      	add	r3, r2
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	7cbb      	ldrb	r3, [r7, #18]
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8007aac:	8bfa      	ldrh	r2, [r7, #30]
 8007aae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ab2:	3b09      	subs	r3, #9
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8007aba:	2300      	movs	r3, #0
 8007abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8007ac0:	e056      	b.n	8007b70 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007ad0:	e055      	b.n	8007b7e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8007ad2:	f7ff fbed 	bl	80072b0 <SD_ReadyWait>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2bff      	cmp	r3, #255	; 0xff
 8007ada:	d14b      	bne.n	8007b74 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007ae2:	e047      	b.n	8007b74 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	2049      	movs	r0, #73	; 0x49
 8007ae8:	f7ff fcea 	bl	80074c0 <SD_SendCmd>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d142      	bne.n	8007b78 <SD_disk_ioctl+0x23c>
 8007af2:	2110      	movs	r1, #16
 8007af4:	6a38      	ldr	r0, [r7, #32]
 8007af6:	f7ff fc59 	bl	80073ac <SD_RxDataBlock>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d03b      	beq.n	8007b78 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007b06:	e037      	b.n	8007b78 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8007b08:	2100      	movs	r1, #0
 8007b0a:	204a      	movs	r0, #74	; 0x4a
 8007b0c:	f7ff fcd8 	bl	80074c0 <SD_SendCmd>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d132      	bne.n	8007b7c <SD_disk_ioctl+0x240>
 8007b16:	2110      	movs	r1, #16
 8007b18:	6a38      	ldr	r0, [r7, #32]
 8007b1a:	f7ff fc47 	bl	80073ac <SD_RxDataBlock>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d02b      	beq.n	8007b7c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8007b2a:	e027      	b.n	8007b7c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	207a      	movs	r0, #122	; 0x7a
 8007b30:	f7ff fcc6 	bl	80074c0 <SD_SendCmd>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d116      	bne.n	8007b68 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b40:	e00b      	b.n	8007b5a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8007b42:	6a3c      	ldr	r4, [r7, #32]
 8007b44:	1c63      	adds	r3, r4, #1
 8007b46:	623b      	str	r3, [r7, #32]
 8007b48:	f7ff fb86 	bl	8007258 <SPI_RxByte>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8007b50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b54:	3301      	adds	r3, #1
 8007b56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d9ef      	bls.n	8007b42 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8007b68:	2304      	movs	r3, #4
 8007b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b6e:	e006      	b.n	8007b7e <SD_disk_ioctl+0x242>
      break;
 8007b70:	bf00      	nop
 8007b72:	e004      	b.n	8007b7e <SD_disk_ioctl+0x242>
      break;
 8007b74:	bf00      	nop
 8007b76:	e002      	b.n	8007b7e <SD_disk_ioctl+0x242>
      break;
 8007b78:	bf00      	nop
 8007b7a:	e000      	b.n	8007b7e <SD_disk_ioctl+0x242>
      break;
 8007b7c:	bf00      	nop
    }
    
    DESELECT();
 8007b7e:	f7ff fb45 	bl	800720c <DESELECT>
    SPI_RxByte();
 8007b82:	f7ff fb69 	bl	8007258 <SPI_RxByte>
  }
  
  return res;
 8007b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	372c      	adds	r7, #44	; 0x2c
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd90      	pop	{r4, r7, pc}
 8007b92:	bf00      	nop
 8007b94:	20000009 	.word	0x20000009

08007b98 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff fcdd 	bl	8007564 <SD_disk_initialize>
 8007baa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fdb9 	bl	8007738 <SD_disk_status>
 8007bc6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007be0:	7bf8      	ldrb	r0, [r7, #15]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	68b9      	ldr	r1, [r7, #8]
 8007be8:	f7ff fdba 	bl	8007760 <SD_disk_read>
 8007bec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
 8007c02:	4603      	mov	r3, r0
 8007c04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007c06:	7bf8      	ldrb	r0, [r7, #15]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	f7ff fe11 	bl	8007834 <SD_disk_write>
 8007c12:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	603a      	str	r2, [r7, #0]
 8007c26:	71fb      	strb	r3, [r7, #7]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8007c2c:	79b9      	ldrb	r1, [r7, #6]
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff fe82 	bl	800793c <SD_disk_ioctl>
 8007c38:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7c1b      	ldrb	r3, [r3, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d115      	bne.n	8007c86 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c5e:	2202      	movs	r2, #2
 8007c60:	2181      	movs	r1, #129	; 0x81
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f004 ff57 	bl	800cb16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c72:	2202      	movs	r2, #2
 8007c74:	2101      	movs	r1, #1
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f004 ff4d 	bl	800cb16 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007c84:	e012      	b.n	8007cac <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c86:	2340      	movs	r3, #64	; 0x40
 8007c88:	2202      	movs	r2, #2
 8007c8a:	2181      	movs	r1, #129	; 0x81
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f004 ff42 	bl	800cb16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c98:	2340      	movs	r3, #64	; 0x40
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f004 ff39 	bl	800cb16 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007cac:	2308      	movs	r3, #8
 8007cae:	2203      	movs	r2, #3
 8007cb0:	2182      	movs	r1, #130	; 0x82
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f004 ff2f 	bl	800cb16 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cbe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cc2:	f005 f849 	bl	800cd58 <USBD_static_malloc>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d102      	bne.n	8007cde <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	e026      	b.n	8007d2c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	7c1b      	ldrb	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d109      	bne.n	8007d1c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d12:	2101      	movs	r1, #1
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f004 ffe8 	bl	800ccea <USBD_LL_PrepareReceive>
 8007d1a:	e007      	b.n	8007d2c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d22:	2340      	movs	r3, #64	; 0x40
 8007d24:	2101      	movs	r1, #1
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f004 ffdf 	bl	800ccea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d46:	2181      	movs	r1, #129	; 0x81
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f004 ff0a 	bl	800cb62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d54:	2101      	movs	r1, #1
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f004 ff03 	bl	800cb62 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d64:	2182      	movs	r1, #130	; 0x82
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f004 fefb 	bl	800cb62 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00e      	beq.n	8007d9a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f004 ffef 	bl	800cd70 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d039      	beq.n	8007e42 <USBD_CDC_Setup+0x9e>
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d17c      	bne.n	8007ecc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	88db      	ldrh	r3, [r3, #6]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d029      	beq.n	8007e2e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	b25b      	sxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	da11      	bge.n	8007e08 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007df0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	88d2      	ldrh	r2, [r2, #6]
 8007df6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007df8:	6939      	ldr	r1, [r7, #16]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 f9c7 	bl	8009194 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007e06:	e068      	b.n	8007eda <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	785a      	ldrb	r2, [r3, #1]
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e1e:	6939      	ldr	r1, [r7, #16]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	88db      	ldrh	r3, [r3, #6]
 8007e24:	461a      	mov	r2, r3
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f001 f9e2 	bl	80091f0 <USBD_CtlPrepareRx>
      break;
 8007e2c:	e055      	b.n	8007eda <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	7850      	ldrb	r0, [r2, #1]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	4798      	blx	r3
      break;
 8007e40:	e04b      	b.n	8007eda <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	785b      	ldrb	r3, [r3, #1]
 8007e46:	2b0a      	cmp	r3, #10
 8007e48:	d017      	beq.n	8007e7a <USBD_CDC_Setup+0xd6>
 8007e4a:	2b0b      	cmp	r3, #11
 8007e4c:	d029      	beq.n	8007ea2 <USBD_CDC_Setup+0xfe>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d133      	bne.n	8007eba <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d107      	bne.n	8007e6c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e5c:	f107 030c 	add.w	r3, r7, #12
 8007e60:	2202      	movs	r2, #2
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 f995 	bl	8009194 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e6a:	e02e      	b.n	8007eca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 f926 	bl	80090c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e74:	2302      	movs	r3, #2
 8007e76:	75fb      	strb	r3, [r7, #23]
          break;
 8007e78:	e027      	b.n	8007eca <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e80:	2b03      	cmp	r3, #3
 8007e82:	d107      	bne.n	8007e94 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e84:	f107 030f 	add.w	r3, r7, #15
 8007e88:	2201      	movs	r2, #1
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f981 	bl	8009194 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e92:	e01a      	b.n	8007eca <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f912 	bl	80090c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea0:	e013      	b.n	8007eca <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d00d      	beq.n	8007ec8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 f906 	bl	80090c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb4:	2302      	movs	r3, #2
 8007eb6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007eb8:	e006      	b.n	8007ec8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8007eba:	6839      	ldr	r1, [r7, #0]
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 f8ff 	bl	80090c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ec6:	e000      	b.n	8007eca <USBD_CDC_Setup+0x126>
          break;
 8007ec8:	bf00      	nop
      }
      break;
 8007eca:	e006      	b.n	8007eda <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8007ecc:	6839      	ldr	r1, [r7, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 f8f6 	bl	80090c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed8:	bf00      	nop
  }

  return ret;
 8007eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007efe:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d037      	beq.n	8007f7a <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007f0a:	78fa      	ldrb	r2, [r7, #3]
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	440b      	add	r3, r1
 8007f18:	331c      	adds	r3, #28
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d026      	beq.n	8007f6e <USBD_CDC_DataIn+0x8a>
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	331c      	adds	r3, #28
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	0152      	lsls	r2, r2, #5
 8007f38:	440a      	add	r2, r1
 8007f3a:	3238      	adds	r2, #56	; 0x38
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f42:	fb02 f201 	mul.w	r2, r2, r1
 8007f46:	1a9b      	subs	r3, r3, r2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d110      	bne.n	8007f6e <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	331c      	adds	r3, #28
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f60:	78f9      	ldrb	r1, [r7, #3]
 8007f62:	2300      	movs	r3, #0
 8007f64:	2200      	movs	r2, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f004 fe9c 	bl	800cca4 <USBD_LL_Transmit>
 8007f6c:	e003      	b.n	8007f76 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e000      	b.n	8007f7c <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8007f7a:	2302      	movs	r3, #2
  }
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f004 fec7 	bl	800cd30 <USBD_LL_GetRxDataSize>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fc8:	4611      	mov	r1, r2
 8007fca:	4798      	blx	r3

    return USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e000      	b.n	8007fd2 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d015      	beq.n	8008020 <USBD_CDC_EP0_RxReady+0x46>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ffa:	2bff      	cmp	r3, #255	; 0xff
 8007ffc:	d010      	beq.n	8008020 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800800c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008014:	b292      	uxth	r2, r2
 8008016:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	22ff      	movs	r2, #255	; 0xff
 800801c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2243      	movs	r2, #67	; 0x43
 8008038:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800803a:	4b03      	ldr	r3, [pc, #12]	; (8008048 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	200000a8 	.word	0x200000a8

0800804c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2243      	movs	r2, #67	; 0x43
 8008058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800805a:	4b03      	ldr	r3, [pc, #12]	; (8008068 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800805c:	4618      	mov	r0, r3
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	bc80      	pop	{r7}
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	20000064 	.word	0x20000064

0800806c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2243      	movs	r2, #67	; 0x43
 8008078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800807c:	4618      	mov	r0, r3
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	bc80      	pop	{r7}
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	200000ec 	.word	0x200000ec

0800808c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	220a      	movs	r2, #10
 8008098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800809c:	4618      	mov	r0, r3
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bc80      	pop	{r7}
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	20000020 	.word	0x20000020

080080ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080b6:	2302      	movs	r3, #2
 80080b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr

080080d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80080d8:	b480      	push	{r7}
 80080da:	b087      	sub	sp, #28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080f6:	88fa      	ldrh	r2, [r7, #6]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr

0800810a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800810a:	b480      	push	{r7}
 800810c:	b085      	sub	sp, #20
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr

08008130 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008146:	2b00      	cmp	r3, #0
 8008148:	d017      	beq.n	800817a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	7c1b      	ldrb	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800815c:	2101      	movs	r1, #1
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f004 fdc3 	bl	800ccea <USBD_LL_PrepareReceive>
 8008164:	e007      	b.n	8008176 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	2101      	movs	r1, #1
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f004 fdba 	bl	800ccea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008198:	2302      	movs	r3, #2
 800819a:	e01a      	b.n	80081d2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	79fa      	ldrb	r2, [r7, #7]
 80081c8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80081ca:	68f8      	ldr	r0, [r7, #12]
 80081cc:	f004 fc2e 	bl	800ca2c <USBD_LL_Init>

  return USBD_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d006      	beq.n	80081fc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
 80081fa:	e001      	b.n	8008200 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80081fc:	2302      	movs	r3, #2
 80081fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr

0800820c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f004 fc63 	bl	800cae0 <USBD_LL_Start>

  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr

08008238 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008244:	2302      	movs	r3, #2
 8008246:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00c      	beq.n	800826c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	78fa      	ldrb	r2, [r7, #3]
 800825c:	4611      	mov	r1, r2
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	4611      	mov	r1, r2
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3

  return USBD_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 feca 	bl	8009048 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80082c2:	461a      	mov	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d00c      	beq.n	80082f2 <USBD_LL_SetupStage+0x56>
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d302      	bcc.n	80082e2 <USBD_LL_SetupStage+0x46>
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d010      	beq.n	8008302 <USBD_LL_SetupStage+0x66>
 80082e0:	e017      	b.n	8008312 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f9ca 	bl	8008684 <USBD_StdDevReq>
      break;
 80082f0:	e01a      	b.n	8008328 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082f8:	4619      	mov	r1, r3
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa2c 	bl	8008758 <USBD_StdItfReq>
      break;
 8008300:	e012      	b.n	8008328 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008308:	4619      	mov	r1, r3
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fa6a 	bl	80087e4 <USBD_StdEPReq>
      break;
 8008310:	e00a      	b.n	8008328 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008318:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800831c:	b2db      	uxtb	r3, r3
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f004 fc3d 	bl	800cba0 <USBD_LL_StallEP>
      break;
 8008326:	bf00      	nop
  }

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b086      	sub	sp, #24
 8008336:	af00      	add	r7, sp, #0
 8008338:	60f8      	str	r0, [r7, #12]
 800833a:	460b      	mov	r3, r1
 800833c:	607a      	str	r2, [r7, #4]
 800833e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d14b      	bne.n	80083de <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800834c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008354:	2b03      	cmp	r3, #3
 8008356:	d134      	bne.n	80083c2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	429a      	cmp	r2, r3
 8008362:	d919      	bls.n	8008398 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	691b      	ldr	r3, [r3, #16]
 800836c:	1ad2      	subs	r2, r2, r3
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800837a:	429a      	cmp	r2, r3
 800837c:	d203      	bcs.n	8008386 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008382:	b29b      	uxth	r3, r3
 8008384:	e002      	b.n	800838c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800838a:	b29b      	uxth	r3, r3
 800838c:	461a      	mov	r2, r3
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 ff4b 	bl	800922c <USBD_CtlContinueRx>
 8008396:	e038      	b.n	800840a <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d105      	bne.n	80083ba <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	f000 ff48 	bl	8009250 <USBD_CtlSendStatus>
 80083c0:	e023      	b.n	800840a <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083c8:	2b05      	cmp	r3, #5
 80083ca:	d11e      	bne.n	800840a <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80083d4:	2100      	movs	r1, #0
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f004 fbe2 	bl	800cba0 <USBD_LL_StallEP>
 80083dc:	e015      	b.n	800840a <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80083f0:	2b03      	cmp	r3, #3
 80083f2:	d108      	bne.n	8008406 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	7afa      	ldrb	r2, [r7, #11]
 80083fe:	4611      	mov	r1, r2
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	4798      	blx	r3
 8008404:	e001      	b.n	800840a <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008406:	2302      	movs	r3, #2
 8008408:	e000      	b.n	800840c <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	460b      	mov	r3, r1
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d17f      	bne.n	8008528 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	3314      	adds	r3, #20
 800842c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008434:	2b02      	cmp	r3, #2
 8008436:	d15c      	bne.n	80084f2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	68da      	ldr	r2, [r3, #12]
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	429a      	cmp	r2, r3
 8008442:	d915      	bls.n	8008470 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	1ad2      	subs	r2, r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	b29b      	uxth	r3, r3
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 feb5 	bl	80091cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008462:	2300      	movs	r3, #0
 8008464:	2200      	movs	r2, #0
 8008466:	2100      	movs	r1, #0
 8008468:	68f8      	ldr	r0, [r7, #12]
 800846a:	f004 fc3e 	bl	800ccea <USBD_LL_PrepareReceive>
 800846e:	e04e      	b.n	800850e <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	6912      	ldr	r2, [r2, #16]
 8008478:	fbb3 f1f2 	udiv	r1, r3, r2
 800847c:	fb02 f201 	mul.w	r2, r2, r1
 8008480:	1a9b      	subs	r3, r3, r2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d11c      	bne.n	80084c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800848e:	429a      	cmp	r2, r3
 8008490:	d316      	bcc.n	80084c0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800849c:	429a      	cmp	r2, r3
 800849e:	d20f      	bcs.n	80084c0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fe91 	bl	80091cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084b2:	2300      	movs	r3, #0
 80084b4:	2200      	movs	r2, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f004 fc16 	bl	800ccea <USBD_LL_PrepareReceive>
 80084be:	e026      	b.n	800850e <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d105      	bne.n	80084e2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80084e2:	2180      	movs	r1, #128	; 0x80
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f004 fb5b 	bl	800cba0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80084ea:	68f8      	ldr	r0, [r7, #12]
 80084ec:	f000 fec3 	bl	8009276 <USBD_CtlReceiveStatus>
 80084f0:	e00d      	b.n	800850e <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d004      	beq.n	8008506 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008506:	2180      	movs	r1, #128	; 0x80
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f004 fb49 	bl	800cba0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d11d      	bne.n	8008554 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7ff fe83 	bl	8008224 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008526:	e015      	b.n	8008554 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00d      	beq.n	8008550 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800853a:	2b03      	cmp	r3, #3
 800853c:	d108      	bne.n	8008550 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	7afa      	ldrb	r2, [r7, #11]
 8008548:	4611      	mov	r1, r2
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	4798      	blx	r3
 800854e:	e001      	b.n	8008554 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008550:	2302      	movs	r3, #2
 8008552:	e000      	b.n	8008556 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b082      	sub	sp, #8
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008566:	2340      	movs	r3, #64	; 0x40
 8008568:	2200      	movs	r2, #0
 800856a:	2100      	movs	r1, #0
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f004 fad2 	bl	800cb16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2240      	movs	r2, #64	; 0x40
 800857e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	2200      	movs	r2, #0
 8008586:	2180      	movs	r1, #128	; 0x80
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f004 fac4 	bl	800cb16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2240      	movs	r2, #64	; 0x40
 8008598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6852      	ldr	r2, [r2, #4]
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	4611      	mov	r1, r2
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
  }

  return USBD_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr

080085fe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2204      	movs	r2, #4
 8008616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008626:	b480      	push	{r7}
 8008628:	b083      	sub	sp, #12
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008634:	2b04      	cmp	r3, #4
 8008636:	d105      	bne.n	8008644 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr

08008650 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800865e:	2b03      	cmp	r3, #3
 8008660:	d10b      	bne.n	800867a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3708      	adds	r7, #8
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800869a:	2b20      	cmp	r3, #32
 800869c:	d004      	beq.n	80086a8 <USBD_StdDevReq+0x24>
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	d002      	beq.n	80086a8 <USBD_StdDevReq+0x24>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <USBD_StdDevReq+0x34>
 80086a6:	e04c      	b.n	8008742 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
      break;
 80086b6:	e049      	b.n	800874c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	785b      	ldrb	r3, [r3, #1]
 80086bc:	2b09      	cmp	r3, #9
 80086be:	d83a      	bhi.n	8008736 <USBD_StdDevReq+0xb2>
 80086c0:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <USBD_StdDevReq+0x44>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	08008719 	.word	0x08008719
 80086cc:	0800872d 	.word	0x0800872d
 80086d0:	08008737 	.word	0x08008737
 80086d4:	08008723 	.word	0x08008723
 80086d8:	08008737 	.word	0x08008737
 80086dc:	080086fb 	.word	0x080086fb
 80086e0:	080086f1 	.word	0x080086f1
 80086e4:	08008737 	.word	0x08008737
 80086e8:	0800870f 	.word	0x0800870f
 80086ec:	08008705 	.word	0x08008705
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 f9d4 	bl	8008aa0 <USBD_GetDescriptor>
          break;
 80086f8:	e022      	b.n	8008740 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fb37 	bl	8008d70 <USBD_SetAddress>
          break;
 8008702:	e01d      	b.n	8008740 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fb74 	bl	8008df4 <USBD_SetConfig>
          break;
 800870c:	e018      	b.n	8008740 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 fbfd 	bl	8008f10 <USBD_GetConfig>
          break;
 8008716:	e013      	b.n	8008740 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fc2c 	bl	8008f78 <USBD_GetStatus>
          break;
 8008720:	e00e      	b.n	8008740 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fc5a 	bl	8008fde <USBD_SetFeature>
          break;
 800872a:	e009      	b.n	8008740 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fc69 	bl	8009006 <USBD_ClrFeature>
          break;
 8008734:	e004      	b.n	8008740 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fcc1 	bl	80090c0 <USBD_CtlError>
          break;
 800873e:	bf00      	nop
      }
      break;
 8008740:	e004      	b.n	800874c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fcbb 	bl	80090c0 <USBD_CtlError>
      break;
 800874a:	bf00      	nop
  }

  return ret;
 800874c:	7bfb      	ldrb	r3, [r7, #15]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop

08008758 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800876e:	2b20      	cmp	r3, #32
 8008770:	d003      	beq.n	800877a <USBD_StdItfReq+0x22>
 8008772:	2b40      	cmp	r3, #64	; 0x40
 8008774:	d001      	beq.n	800877a <USBD_StdItfReq+0x22>
 8008776:	2b00      	cmp	r3, #0
 8008778:	d12a      	bne.n	80087d0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008780:	3b01      	subs	r3, #1
 8008782:	2b02      	cmp	r3, #2
 8008784:	d81d      	bhi.n	80087c2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	889b      	ldrh	r3, [r3, #4]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b01      	cmp	r3, #1
 800878e:	d813      	bhi.n	80087b8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	6839      	ldr	r1, [r7, #0]
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	4798      	blx	r3
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	88db      	ldrh	r3, [r3, #6]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d110      	bne.n	80087cc <USBD_StdItfReq+0x74>
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d10d      	bne.n	80087cc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fd4d 	bl	8009250 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087b6:	e009      	b.n	80087cc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc80 	bl	80090c0 <USBD_CtlError>
          break;
 80087c0:	e004      	b.n	80087cc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 fc7b 	bl	80090c0 <USBD_CtlError>
          break;
 80087ca:	e000      	b.n	80087ce <USBD_StdItfReq+0x76>
          break;
 80087cc:	bf00      	nop
      }
      break;
 80087ce:	e004      	b.n	80087da <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fc74 	bl	80090c0 <USBD_CtlError>
      break;
 80087d8:	bf00      	nop
  }

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	889b      	ldrh	r3, [r3, #4]
 80087f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008800:	2b20      	cmp	r3, #32
 8008802:	d004      	beq.n	800880e <USBD_StdEPReq+0x2a>
 8008804:	2b40      	cmp	r3, #64	; 0x40
 8008806:	d002      	beq.n	800880e <USBD_StdEPReq+0x2a>
 8008808:	2b00      	cmp	r3, #0
 800880a:	d008      	beq.n	800881e <USBD_StdEPReq+0x3a>
 800880c:	e13d      	b.n	8008a8a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
      break;
 800881c:	e13a      	b.n	8008a94 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008826:	2b20      	cmp	r3, #32
 8008828:	d10a      	bne.n	8008840 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	6839      	ldr	r1, [r7, #0]
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
 800883e:	e12a      	b.n	8008a96 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	785b      	ldrb	r3, [r3, #1]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d03e      	beq.n	80088c6 <USBD_StdEPReq+0xe2>
 8008848:	2b03      	cmp	r3, #3
 800884a:	d002      	beq.n	8008852 <USBD_StdEPReq+0x6e>
 800884c:	2b00      	cmp	r3, #0
 800884e:	d070      	beq.n	8008932 <USBD_StdEPReq+0x14e>
 8008850:	e115      	b.n	8008a7e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008858:	2b02      	cmp	r3, #2
 800885a:	d002      	beq.n	8008862 <USBD_StdEPReq+0x7e>
 800885c:	2b03      	cmp	r3, #3
 800885e:	d015      	beq.n	800888c <USBD_StdEPReq+0xa8>
 8008860:	e02b      	b.n	80088ba <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00c      	beq.n	8008882 <USBD_StdEPReq+0x9e>
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	2b80      	cmp	r3, #128	; 0x80
 800886c:	d009      	beq.n	8008882 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f004 f994 	bl	800cba0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008878:	2180      	movs	r1, #128	; 0x80
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f004 f990 	bl	800cba0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008880:	e020      	b.n	80088c4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fc1b 	bl	80090c0 <USBD_CtlError>
              break;
 800888a:	e01b      	b.n	80088c4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	885b      	ldrh	r3, [r3, #2]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10e      	bne.n	80088b2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008894:	7bbb      	ldrb	r3, [r7, #14]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00b      	beq.n	80088b2 <USBD_StdEPReq+0xce>
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d008      	beq.n	80088b2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	88db      	ldrh	r3, [r3, #6]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d104      	bne.n	80088b2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80088a8:	7bbb      	ldrb	r3, [r7, #14]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f004 f977 	bl	800cba0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fccc 	bl	8009250 <USBD_CtlSendStatus>

              break;
 80088b8:	e004      	b.n	80088c4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fbff 	bl	80090c0 <USBD_CtlError>
              break;
 80088c2:	bf00      	nop
          }
          break;
 80088c4:	e0e0      	b.n	8008a88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d002      	beq.n	80088d6 <USBD_StdEPReq+0xf2>
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d015      	beq.n	8008900 <USBD_StdEPReq+0x11c>
 80088d4:	e026      	b.n	8008924 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088d6:	7bbb      	ldrb	r3, [r7, #14]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00c      	beq.n	80088f6 <USBD_StdEPReq+0x112>
 80088dc:	7bbb      	ldrb	r3, [r7, #14]
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d009      	beq.n	80088f6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80088e2:	7bbb      	ldrb	r3, [r7, #14]
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f004 f95a 	bl	800cba0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088ec:	2180      	movs	r1, #128	; 0x80
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f004 f956 	bl	800cba0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088f4:	e01c      	b.n	8008930 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fbe1 	bl	80090c0 <USBD_CtlError>
              break;
 80088fe:	e017      	b.n	8008930 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	885b      	ldrh	r3, [r3, #2]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d112      	bne.n	800892e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	4619      	mov	r1, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f004 f961 	bl	800cbde <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fc97 	bl	8009250 <USBD_CtlSendStatus>
              }
              break;
 8008922:	e004      	b.n	800892e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fbca 	bl	80090c0 <USBD_CtlError>
              break;
 800892c:	e000      	b.n	8008930 <USBD_StdEPReq+0x14c>
              break;
 800892e:	bf00      	nop
          }
          break;
 8008930:	e0aa      	b.n	8008a88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008938:	2b02      	cmp	r3, #2
 800893a:	d002      	beq.n	8008942 <USBD_StdEPReq+0x15e>
 800893c:	2b03      	cmp	r3, #3
 800893e:	d032      	beq.n	80089a6 <USBD_StdEPReq+0x1c2>
 8008940:	e097      	b.n	8008a72 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d007      	beq.n	8008958 <USBD_StdEPReq+0x174>
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	2b80      	cmp	r3, #128	; 0x80
 800894c:	d004      	beq.n	8008958 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fbb5 	bl	80090c0 <USBD_CtlError>
                break;
 8008956:	e091      	b.n	8008a7c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800895c:	2b00      	cmp	r3, #0
 800895e:	da0b      	bge.n	8008978 <USBD_StdEPReq+0x194>
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	3310      	adds	r3, #16
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	3304      	adds	r3, #4
 8008976:	e00b      	b.n	8008990 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800897e:	4613      	mov	r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	3304      	adds	r3, #4
 8008990:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2202      	movs	r2, #2
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fbf8 	bl	8009194 <USBD_CtlSendData>
              break;
 80089a4:	e06a      	b.n	8008a7c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da11      	bge.n	80089d2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	f003 020f 	and.w	r2, r3, #15
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	4613      	mov	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	440b      	add	r3, r1
 80089c0:	3318      	adds	r3, #24
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d117      	bne.n	80089f8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fb78 	bl	80090c0 <USBD_CtlError>
                  break;
 80089d0:	e054      	b.n	8008a7c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fb65 	bl	80090c0 <USBD_CtlError>
                  break;
 80089f6:	e041      	b.n	8008a7c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	da0b      	bge.n	8008a18 <USBD_StdEPReq+0x234>
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a06:	4613      	mov	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4413      	add	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	3310      	adds	r3, #16
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	4413      	add	r3, r2
 8008a14:	3304      	adds	r3, #4
 8008a16:	e00b      	b.n	8008a30 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a1e:	4613      	mov	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <USBD_StdEPReq+0x25a>
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b80      	cmp	r3, #128	; 0x80
 8008a3c:	d103      	bne.n	8008a46 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	e00e      	b.n	8008a64 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008a46:	7bbb      	ldrb	r3, [r7, #14]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f004 f8e6 	bl	800cc1c <USBD_LL_IsStallEP>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d003      	beq.n	8008a5e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	e002      	b.n	8008a64 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2202      	movs	r2, #2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fb92 	bl	8009194 <USBD_CtlSendData>
              break;
 8008a70:	e004      	b.n	8008a7c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fb23 	bl	80090c0 <USBD_CtlError>
              break;
 8008a7a:	bf00      	nop
          }
          break;
 8008a7c:	e004      	b.n	8008a88 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fb1d 	bl	80090c0 <USBD_CtlError>
          break;
 8008a86:	bf00      	nop
      }
      break;
 8008a88:	e004      	b.n	8008a94 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fb17 	bl	80090c0 <USBD_CtlError>
      break;
 8008a92:	bf00      	nop
  }

  return ret;
 8008a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	885b      	ldrh	r3, [r3, #2]
 8008aba:	0a1b      	lsrs	r3, r3, #8
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	2b06      	cmp	r3, #6
 8008ac2:	f200 8128 	bhi.w	8008d16 <USBD_GetDescriptor+0x276>
 8008ac6:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <USBD_GetDescriptor+0x2c>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008ae9 	.word	0x08008ae9
 8008ad0:	08008b01 	.word	0x08008b01
 8008ad4:	08008b41 	.word	0x08008b41
 8008ad8:	08008d17 	.word	0x08008d17
 8008adc:	08008d17 	.word	0x08008d17
 8008ae0:	08008cb7 	.word	0x08008cb7
 8008ae4:	08008ce3 	.word	0x08008ce3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	7c12      	ldrb	r2, [r2, #16]
 8008af4:	f107 0108 	add.w	r1, r7, #8
 8008af8:	4610      	mov	r0, r2
 8008afa:	4798      	blx	r3
 8008afc:	60f8      	str	r0, [r7, #12]
      break;
 8008afe:	e112      	b.n	8008d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	7c1b      	ldrb	r3, [r3, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10d      	bne.n	8008b24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	f107 0208 	add.w	r2, r7, #8
 8008b14:	4610      	mov	r0, r2
 8008b16:	4798      	blx	r3
 8008b18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	2202      	movs	r2, #2
 8008b20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b22:	e100      	b.n	8008d26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	f107 0208 	add.w	r2, r7, #8
 8008b30:	4610      	mov	r0, r2
 8008b32:	4798      	blx	r3
 8008b34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	701a      	strb	r2, [r3, #0]
      break;
 8008b3e:	e0f2      	b.n	8008d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	885b      	ldrh	r3, [r3, #2]
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b05      	cmp	r3, #5
 8008b48:	f200 80ac 	bhi.w	8008ca4 <USBD_GetDescriptor+0x204>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <USBD_GetDescriptor+0xb4>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b6d 	.word	0x08008b6d
 8008b58:	08008ba1 	.word	0x08008ba1
 8008b5c:	08008bd5 	.word	0x08008bd5
 8008b60:	08008c09 	.word	0x08008c09
 8008b64:	08008c3d 	.word	0x08008c3d
 8008b68:	08008c71 	.word	0x08008c71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	7c12      	ldrb	r2, [r2, #16]
 8008b84:	f107 0108 	add.w	r1, r7, #8
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4798      	blx	r3
 8008b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b8e:	e091      	b.n	8008cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fa94 	bl	80090c0 <USBD_CtlError>
            err++;
 8008b98:	7afb      	ldrb	r3, [r7, #11]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b9e:	e089      	b.n	8008cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00b      	beq.n	8008bc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7c12      	ldrb	r2, [r2, #16]
 8008bb8:	f107 0108 	add.w	r1, r7, #8
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4798      	blx	r3
 8008bc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bc2:	e077      	b.n	8008cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fa7a 	bl	80090c0 <USBD_CtlError>
            err++;
 8008bcc:	7afb      	ldrb	r3, [r7, #11]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008bd2:	e06f      	b.n	8008cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00b      	beq.n	8008bf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	7c12      	ldrb	r2, [r2, #16]
 8008bec:	f107 0108 	add.w	r1, r7, #8
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	4798      	blx	r3
 8008bf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bf6:	e05d      	b.n	8008cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa60 	bl	80090c0 <USBD_CtlError>
            err++;
 8008c00:	7afb      	ldrb	r3, [r7, #11]
 8008c02:	3301      	adds	r3, #1
 8008c04:	72fb      	strb	r3, [r7, #11]
          break;
 8008c06:	e055      	b.n	8008cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	7c12      	ldrb	r2, [r2, #16]
 8008c20:	f107 0108 	add.w	r1, r7, #8
 8008c24:	4610      	mov	r0, r2
 8008c26:	4798      	blx	r3
 8008c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c2a:	e043      	b.n	8008cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fa46 	bl	80090c0 <USBD_CtlError>
            err++;
 8008c34:	7afb      	ldrb	r3, [r7, #11]
 8008c36:	3301      	adds	r3, #1
 8008c38:	72fb      	strb	r3, [r7, #11]
          break;
 8008c3a:	e03b      	b.n	8008cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	7c12      	ldrb	r2, [r2, #16]
 8008c54:	f107 0108 	add.w	r1, r7, #8
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c5e:	e029      	b.n	8008cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fa2c 	bl	80090c0 <USBD_CtlError>
            err++;
 8008c68:	7afb      	ldrb	r3, [r7, #11]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c6e:	e021      	b.n	8008cb4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c92:	e00f      	b.n	8008cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa12 	bl	80090c0 <USBD_CtlError>
            err++;
 8008c9c:	7afb      	ldrb	r3, [r7, #11]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ca2:	e007      	b.n	8008cb4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa0a 	bl	80090c0 <USBD_CtlError>
          err++;
 8008cac:	7afb      	ldrb	r3, [r7, #11]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008cb2:	e038      	b.n	8008d26 <USBD_GetDescriptor+0x286>
 8008cb4:	e037      	b.n	8008d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7c1b      	ldrb	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d109      	bne.n	8008cd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc6:	f107 0208 	add.w	r2, r7, #8
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4798      	blx	r3
 8008cce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cd0:	e029      	b.n	8008d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f9f3 	bl	80090c0 <USBD_CtlError>
        err++;
 8008cda:	7afb      	ldrb	r3, [r7, #11]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	72fb      	strb	r3, [r7, #11]
      break;
 8008ce0:	e021      	b.n	8008d26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	7c1b      	ldrb	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10d      	bne.n	8008d06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf2:	f107 0208 	add.w	r2, r7, #8
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4798      	blx	r3
 8008cfa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	2207      	movs	r2, #7
 8008d02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d04:	e00f      	b.n	8008d26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f9d9 	bl	80090c0 <USBD_CtlError>
        err++;
 8008d0e:	7afb      	ldrb	r3, [r7, #11]
 8008d10:	3301      	adds	r3, #1
 8008d12:	72fb      	strb	r3, [r7, #11]
      break;
 8008d14:	e007      	b.n	8008d26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f9d1 	bl	80090c0 <USBD_CtlError>
      err++;
 8008d1e:	7afb      	ldrb	r3, [r7, #11]
 8008d20:	3301      	adds	r3, #1
 8008d22:	72fb      	strb	r3, [r7, #11]
      break;
 8008d24:	bf00      	nop
  }

  if (err != 0U)
 8008d26:	7afb      	ldrb	r3, [r7, #11]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d11c      	bne.n	8008d66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008d2c:	893b      	ldrh	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d011      	beq.n	8008d56 <USBD_GetDescriptor+0x2b6>
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	88db      	ldrh	r3, [r3, #6]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00d      	beq.n	8008d56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	88da      	ldrh	r2, [r3, #6]
 8008d3e:	893b      	ldrh	r3, [r7, #8]
 8008d40:	4293      	cmp	r3, r2
 8008d42:	bf28      	it	cs
 8008d44:	4613      	movcs	r3, r2
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d4a:	893b      	ldrh	r3, [r7, #8]
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fa1f 	bl	8009194 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	88db      	ldrh	r3, [r3, #6]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa76 	bl	8009250 <USBD_CtlSendStatus>
 8008d64:	e000      	b.n	8008d68 <USBD_GetDescriptor+0x2c8>
    return;
 8008d66:	bf00      	nop
    }
  }
}
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop

08008d70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	889b      	ldrh	r3, [r3, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d130      	bne.n	8008de4 <USBD_SetAddress+0x74>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	88db      	ldrh	r3, [r3, #6]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d12c      	bne.n	8008de4 <USBD_SetAddress+0x74>
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	885b      	ldrh	r3, [r3, #2]
 8008d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d90:	d828      	bhi.n	8008de4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	885b      	ldrh	r3, [r3, #2]
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da4:	2b03      	cmp	r3, #3
 8008da6:	d104      	bne.n	8008db2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f988 	bl	80090c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db0:	e01c      	b.n	8008dec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	7bfa      	ldrb	r2, [r7, #15]
 8008db6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f003 ff51 	bl	800cc66 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fa43 	bl	8009250 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d004      	beq.n	8008dda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2202      	movs	r2, #2
 8008dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd8:	e008      	b.n	8008dec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de2:	e003      	b.n	8008dec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008de4:	6839      	ldr	r1, [r7, #0]
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 f96a 	bl	80090c0 <USBD_CtlError>
  }
}
 8008dec:	bf00      	nop
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	4b41      	ldr	r3, [pc, #260]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e08:	4b40      	ldr	r3, [pc, #256]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d904      	bls.n	8008e1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f954 	bl	80090c0 <USBD_CtlError>
 8008e18:	e075      	b.n	8008f06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d002      	beq.n	8008e2a <USBD_SetConfig+0x36>
 8008e24:	2b03      	cmp	r3, #3
 8008e26:	d023      	beq.n	8008e70 <USBD_SetConfig+0x7c>
 8008e28:	e062      	b.n	8008ef0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008e2a:	4b38      	ldr	r3, [pc, #224]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d01a      	beq.n	8008e68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008e32:	4b36      	ldr	r3, [pc, #216]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2203      	movs	r2, #3
 8008e40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e44:	4b31      	ldr	r3, [pc, #196]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff f9f4 	bl	8008238 <USBD_SetClassConfig>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d104      	bne.n	8008e60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008e56:	6839      	ldr	r1, [r7, #0]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f931 	bl	80090c0 <USBD_CtlError>
            return;
 8008e5e:	e052      	b.n	8008f06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f9f5 	bl	8009250 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e66:	e04e      	b.n	8008f06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f9f1 	bl	8009250 <USBD_CtlSendStatus>
        break;
 8008e6e:	e04a      	b.n	8008f06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008e70:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d112      	bne.n	8008e9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008e80:	4b22      	ldr	r3, [pc, #136]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008e8a:	4b20      	ldr	r3, [pc, #128]	; (8008f0c <USBD_SetConfig+0x118>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff f9f0 	bl	8008276 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f9da 	bl	8009250 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e9c:	e033      	b.n	8008f06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <USBD_SetConfig+0x118>)
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d01d      	beq.n	8008ee8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff f9de 	bl	8008276 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008eba:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <USBD_SetConfig+0x118>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ec4:	4b11      	ldr	r3, [pc, #68]	; (8008f0c <USBD_SetConfig+0x118>)
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff f9b4 	bl	8008238 <USBD_SetClassConfig>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d104      	bne.n	8008ee0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f8f1 	bl	80090c0 <USBD_CtlError>
            return;
 8008ede:	e012      	b.n	8008f06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f9b5 	bl	8009250 <USBD_CtlSendStatus>
        break;
 8008ee6:	e00e      	b.n	8008f06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f9b1 	bl	8009250 <USBD_CtlSendStatus>
        break;
 8008eee:	e00a      	b.n	8008f06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008ef0:	6839      	ldr	r1, [r7, #0]
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f8e4 	bl	80090c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008ef8:	4b04      	ldr	r3, [pc, #16]	; (8008f0c <USBD_SetConfig+0x118>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f7ff f9b9 	bl	8008276 <USBD_ClrClassConfig>
        break;
 8008f04:	bf00      	nop
    }
  }
}
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000407 	.word	0x20000407

08008f10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d004      	beq.n	8008f2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f8cb 	bl	80090c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f2a:	e021      	b.n	8008f70 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	db17      	blt.n	8008f66 <USBD_GetConfig+0x56>
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	dd02      	ble.n	8008f40 <USBD_GetConfig+0x30>
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d00b      	beq.n	8008f56 <USBD_GetConfig+0x46>
 8008f3e:	e012      	b.n	8008f66 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3308      	adds	r3, #8
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f920 	bl	8009194 <USBD_CtlSendData>
        break;
 8008f54:	e00c      	b.n	8008f70 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f918 	bl	8009194 <USBD_CtlSendData>
        break;
 8008f64:	e004      	b.n	8008f70 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f8a9 	bl	80090c0 <USBD_CtlError>
        break;
 8008f6e:	bf00      	nop
}
 8008f70:	bf00      	nop
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d81e      	bhi.n	8008fcc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	88db      	ldrh	r3, [r3, #6]
 8008f92:	2b02      	cmp	r3, #2
 8008f94:	d004      	beq.n	8008fa0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f891 	bl	80090c0 <USBD_CtlError>
        break;
 8008f9e:	e01a      	b.n	8008fd6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f043 0202 	orr.w	r2, r3, #2
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f8e5 	bl	8009194 <USBD_CtlSendData>
      break;
 8008fca:	e004      	b.n	8008fd6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f876 	bl	80090c0 <USBD_CtlError>
      break;
 8008fd4:	bf00      	nop
  }
}
 8008fd6:	bf00      	nop
 8008fd8:	3708      	adds	r7, #8
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b082      	sub	sp, #8
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	885b      	ldrh	r3, [r3, #2]
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d106      	bne.n	8008ffe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f929 	bl	8009250 <USBD_CtlSendStatus>
  }
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b082      	sub	sp, #8
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009016:	3b01      	subs	r3, #1
 8009018:	2b02      	cmp	r3, #2
 800901a:	d80b      	bhi.n	8009034 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	885b      	ldrh	r3, [r3, #2]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10c      	bne.n	800903e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 f90f 	bl	8009250 <USBD_CtlSendStatus>
      }
      break;
 8009032:	e004      	b.n	800903e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009034:	6839      	ldr	r1, [r7, #0]
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f842 	bl	80090c0 <USBD_CtlError>
      break;
 800903c:	e000      	b.n	8009040 <USBD_ClrFeature+0x3a>
      break;
 800903e:	bf00      	nop
  }
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781a      	ldrb	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	785a      	ldrb	r2, [r3, #1]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	3302      	adds	r3, #2
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	b29a      	uxth	r2, r3
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	3303      	adds	r3, #3
 800906e:	781b      	ldrb	r3, [r3, #0]
 8009070:	b29b      	uxth	r3, r3
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	b29b      	uxth	r3, r3
 8009076:	4413      	add	r3, r2
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	3304      	adds	r3, #4
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	b29a      	uxth	r2, r3
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	3305      	adds	r3, #5
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b29b      	uxth	r3, r3
 800908e:	021b      	lsls	r3, r3, #8
 8009090:	b29b      	uxth	r3, r3
 8009092:	4413      	add	r3, r2
 8009094:	b29a      	uxth	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	3306      	adds	r3, #6
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	3307      	adds	r3, #7
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	021b      	lsls	r3, r3, #8
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	4413      	add	r3, r2
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	80da      	strh	r2, [r3, #6]

}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bc80      	pop	{r7}
 80090be:	4770      	bx	lr

080090c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80090ca:	2180      	movs	r1, #128	; 0x80
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f003 fd67 	bl	800cba0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80090d2:	2100      	movs	r1, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f003 fd63 	bl	800cba0 <USBD_LL_StallEP>
}
 80090da:	bf00      	nop
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b086      	sub	sp, #24
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	60f8      	str	r0, [r7, #12]
 80090ea:	60b9      	str	r1, [r7, #8]
 80090ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80090ee:	2300      	movs	r3, #0
 80090f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d032      	beq.n	800915e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f834 	bl	8009166 <USBD_GetLen>
 80090fe:	4603      	mov	r3, r0
 8009100:	3301      	adds	r3, #1
 8009102:	b29b      	uxth	r3, r3
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800910c:	7dfb      	ldrb	r3, [r7, #23]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	75fa      	strb	r2, [r7, #23]
 8009112:	461a      	mov	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4413      	add	r3, r2
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	7812      	ldrb	r2, [r2, #0]
 800911c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800911e:	7dfb      	ldrb	r3, [r7, #23]
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	75fa      	strb	r2, [r7, #23]
 8009124:	461a      	mov	r2, r3
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	4413      	add	r3, r2
 800912a:	2203      	movs	r2, #3
 800912c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800912e:	e012      	b.n	8009156 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	60fa      	str	r2, [r7, #12]
 8009136:	7dfa      	ldrb	r2, [r7, #23]
 8009138:	1c51      	adds	r1, r2, #1
 800913a:	75f9      	strb	r1, [r7, #23]
 800913c:	4611      	mov	r1, r2
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	440a      	add	r2, r1
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009146:	7dfb      	ldrb	r3, [r7, #23]
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	75fa      	strb	r2, [r7, #23]
 800914c:	461a      	mov	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	2200      	movs	r2, #0
 8009154:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e8      	bne.n	8009130 <USBD_GetString+0x4e>
    }
  }
}
 800915e:	bf00      	nop
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009166:	b480      	push	{r7}
 8009168:	b085      	sub	sp, #20
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800916e:	2300      	movs	r3, #0
 8009170:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009172:	e005      	b.n	8009180 <USBD_GetLen+0x1a>
  {
    len++;
 8009174:	7bfb      	ldrb	r3, [r7, #15]
 8009176:	3301      	adds	r3, #1
 8009178:	73fb      	strb	r3, [r7, #15]
    buf++;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	3301      	adds	r3, #1
 800917e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1f5      	bne.n	8009174 <USBD_GetLen+0xe>
  }

  return len;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	bc80      	pop	{r7}
 8009192:	4770      	bx	lr

08009194 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	4613      	mov	r3, r2
 80091a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2202      	movs	r2, #2
 80091a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80091aa:	88fa      	ldrh	r2, [r7, #6]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80091b0:	88fa      	ldrh	r2, [r7, #6]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	2100      	movs	r1, #0
 80091bc:	68f8      	ldr	r0, [r7, #12]
 80091be:	f003 fd71 	bl	800cca4 <USBD_LL_Transmit>

  return USBD_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	4613      	mov	r3, r2
 80091d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80091da:	88fb      	ldrh	r3, [r7, #6]
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	2100      	movs	r1, #0
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f003 fd5f 	bl	800cca4 <USBD_LL_Transmit>

  return USBD_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	4613      	mov	r3, r2
 80091fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2203      	movs	r2, #3
 8009202:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009206:	88fa      	ldrh	r2, [r7, #6]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800920e:	88fa      	ldrh	r2, [r7, #6]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009216:	88fb      	ldrh	r3, [r7, #6]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	2100      	movs	r1, #0
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f003 fd64 	bl	800ccea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800923a:	88fb      	ldrh	r3, [r7, #6]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	2100      	movs	r1, #0
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f003 fd52 	bl	800ccea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2204      	movs	r2, #4
 800925c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009260:	2300      	movs	r3, #0
 8009262:	2200      	movs	r2, #0
 8009264:	2100      	movs	r1, #0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f003 fd1c 	bl	800cca4 <USBD_LL_Transmit>

  return USBD_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2205      	movs	r2, #5
 8009282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009286:	2300      	movs	r3, #0
 8009288:	2200      	movs	r2, #0
 800928a:	2100      	movs	r1, #0
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f003 fd2c 	bl	800ccea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	4a08      	ldr	r2, [pc, #32]	; (80092cc <disk_status+0x30>)
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	4413      	add	r3, r2
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	79fa      	ldrb	r2, [r7, #7]
 80092b4:	4905      	ldr	r1, [pc, #20]	; (80092cc <disk_status+0x30>)
 80092b6:	440a      	add	r2, r1
 80092b8:	7a12      	ldrb	r2, [r2, #8]
 80092ba:	4610      	mov	r0, r2
 80092bc:	4798      	blx	r3
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	20000428 	.word	0x20000428

080092d0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	4a0d      	ldr	r2, [pc, #52]	; (8009318 <disk_initialize+0x48>)
 80092e2:	5cd3      	ldrb	r3, [r2, r3]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d111      	bne.n	800930c <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	4a0b      	ldr	r2, [pc, #44]	; (8009318 <disk_initialize+0x48>)
 80092ec:	2101      	movs	r1, #1
 80092ee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <disk_initialize+0x48>)
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	79fa      	ldrb	r2, [r7, #7]
 80092fe:	4906      	ldr	r1, [pc, #24]	; (8009318 <disk_initialize+0x48>)
 8009300:	440a      	add	r2, r1
 8009302:	7a12      	ldrb	r2, [r2, #8]
 8009304:	4610      	mov	r0, r2
 8009306:	4798      	blx	r3
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800930c:	7bfb      	ldrb	r3, [r7, #15]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20000428 	.word	0x20000428

0800931c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800931c:	b590      	push	{r4, r7, lr}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	4603      	mov	r3, r0
 800932a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800932c:	7bfb      	ldrb	r3, [r7, #15]
 800932e:	4a0a      	ldr	r2, [pc, #40]	; (8009358 <disk_read+0x3c>)
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4413      	add	r3, r2
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	689c      	ldr	r4, [r3, #8]
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4a07      	ldr	r2, [pc, #28]	; (8009358 <disk_read+0x3c>)
 800933c:	4413      	add	r3, r2
 800933e:	7a18      	ldrb	r0, [r3, #8]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	47a0      	blx	r4
 8009348:	4603      	mov	r3, r0
 800934a:	75fb      	strb	r3, [r7, #23]
  return res;
 800934c:	7dfb      	ldrb	r3, [r7, #23]
}
 800934e:	4618      	mov	r0, r3
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	bd90      	pop	{r4, r7, pc}
 8009356:	bf00      	nop
 8009358:	20000428 	.word	0x20000428

0800935c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800935c:	b590      	push	{r4, r7, lr}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	607a      	str	r2, [r7, #4]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	4a0a      	ldr	r2, [pc, #40]	; (8009398 <disk_write+0x3c>)
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	68dc      	ldr	r4, [r3, #12]
 8009378:	7bfb      	ldrb	r3, [r7, #15]
 800937a:	4a07      	ldr	r2, [pc, #28]	; (8009398 <disk_write+0x3c>)
 800937c:	4413      	add	r3, r2
 800937e:	7a18      	ldrb	r0, [r3, #8]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	47a0      	blx	r4
 8009388:	4603      	mov	r3, r0
 800938a:	75fb      	strb	r3, [r7, #23]
  return res;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
}
 800938e:	4618      	mov	r0, r3
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	bd90      	pop	{r4, r7, pc}
 8009396:	bf00      	nop
 8009398:	20000428 	.word	0x20000428

0800939c <lock_fs>:
#if _FS_REENTRANT
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	return ff_req_grant(fs->sobj);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fd2f 	bl	8009e0e <ff_req_grant>
 80093b0:	4603      	mov	r3, r0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b082      	sub	sp, #8
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
 80093c2:	460b      	mov	r3, r1
 80093c4:	70fb      	strb	r3, [r7, #3]
	if (fs &&
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d011      	beq.n	80093f0 <unlock_fs+0x36>
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	2b0c      	cmp	r3, #12
 80093d0:	d00e      	beq.n	80093f0 <unlock_fs+0x36>
		res != FR_NOT_ENABLED &&
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	2b0b      	cmp	r3, #11
 80093d6:	d00b      	beq.n	80093f0 <unlock_fs+0x36>
		res != FR_INVALID_DRIVE &&
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	2b09      	cmp	r3, #9
 80093dc:	d008      	beq.n	80093f0 <unlock_fs+0x36>
		res != FR_INVALID_OBJECT &&
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	2b0f      	cmp	r3, #15
 80093e2:	d005      	beq.n	80093f0 <unlock_fs+0x36>
		res != FR_TIMEOUT) {
		ff_rel_grant(fs->sobj);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fd24 	bl	8009e38 <ff_rel_grant>
	}
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
 8009404:	e016      	b.n	8009434 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009406:	490f      	ldr	r1, [pc, #60]	; (8009444 <clear_lock+0x4c>)
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4613      	mov	r3, r2
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	440b      	add	r3, r1
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	429a      	cmp	r2, r3
 800941a:	d108      	bne.n	800942e <clear_lock+0x36>
 800941c:	4909      	ldr	r1, [pc, #36]	; (8009444 <clear_lock+0x4c>)
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4613      	mov	r3, r2
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	440b      	add	r3, r1
 800942a:	2200      	movs	r2, #0
 800942c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d9e5      	bls.n	8009406 <clear_lock+0xe>
	}
}
 800943a:	bf00      	nop
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr
 8009444:	20000410 	.word	0x20000410

08009448 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 800945a:	2b00      	cmp	r3, #0
 800945c:	d038      	beq.n	80094d0 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8009464:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800946c:	6879      	ldr	r1, [r7, #4]
 800946e:	2301      	movs	r3, #1
 8009470:	697a      	ldr	r2, [r7, #20]
 8009472:	f7ff ff73 	bl	800935c <disk_write>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <sync_window+0x3a>
			res = FR_DISK_ERR;
 800947c:	2301      	movs	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
 8009480:	e026      	b.n	80094d0 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800949a:	429a      	cmp	r2, r3
 800949c:	d218      	bcs.n	80094d0 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	e010      	b.n	80094ca <sync_window+0x82>
					wsect += fs->fsize;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4413      	add	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	2301      	movs	r3, #1
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	f7ff ff4c 	bl	800935c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	613b      	str	r3, [r7, #16]
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d8eb      	bhi.n	80094a8 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80094e4:	2300      	movs	r3, #0
 80094e6:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d01b      	beq.n	800952c <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff ffa7 	bl	8009448 <sync_window>
 80094fa:	4603      	mov	r3, r0
 80094fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d113      	bne.n	800952c <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	2301      	movs	r3, #1
 800950e:	683a      	ldr	r2, [r7, #0]
 8009510:	f7ff ff04 	bl	800931c <disk_read>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d004      	beq.n	8009524 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800951a:	f04f 33ff 	mov.w	r3, #4294967295
 800951e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009520:	2301      	movs	r3, #1
 8009522:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
	}
	return res;
 800952c:	7bfb      	ldrb	r3, [r7, #15]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009536:	b480      	push	{r7}
 8009538:	b087      	sub	sp, #28
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800953e:	f04f 33ff 	mov.w	r3, #4294967295
 8009542:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d031      	beq.n	80095b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	617b      	str	r3, [r7, #20]
 8009552:	e002      	b.n	800955a <get_ldnumber+0x24>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3301      	adds	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b1f      	cmp	r3, #31
 8009560:	d903      	bls.n	800956a <get_ldnumber+0x34>
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b3a      	cmp	r3, #58	; 0x3a
 8009568:	d1f4      	bne.n	8009554 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b3a      	cmp	r3, #58	; 0x3a
 8009570:	d11c      	bne.n	80095ac <get_ldnumber+0x76>
			tp = *path;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	1c5a      	adds	r2, r3, #1
 800957c:	60fa      	str	r2, [r7, #12]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	3b30      	subs	r3, #48	; 0x30
 8009582:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b09      	cmp	r3, #9
 8009588:	d80e      	bhi.n	80095a8 <get_ldnumber+0x72>
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	429a      	cmp	r2, r3
 8009590:	d10a      	bne.n	80095a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d107      	bne.n	80095a8 <get_ldnumber+0x72>
					vol = (int)i;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	3301      	adds	r3, #1
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	e002      	b.n	80095b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80095b0:	693b      	ldr	r3, [r7, #16]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bc80      	pop	{r7}
 80095ba:	4770      	bx	lr

080095bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f04f 32ff 	mov.w	r2, #4294967295
 80095d4:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff ff7d 	bl	80094da <move_window>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <check_fs+0x2e>
		return 3;
 80095e6:	2303      	movs	r3, #3
 80095e8:	e04a      	b.n	8009680 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095f0:	3301      	adds	r3, #1
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	021b      	lsls	r3, r3, #8
 80095f6:	b21a      	sxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 80095fe:	b21b      	sxth	r3, r3
 8009600:	4313      	orrs	r3, r2
 8009602:	b21b      	sxth	r3, r3
 8009604:	4a20      	ldr	r2, [pc, #128]	; (8009688 <check_fs+0xcc>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d001      	beq.n	800960e <check_fs+0x52>
		return 2;
 800960a:	2302      	movs	r3, #2
 800960c:	e038      	b.n	8009680 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3336      	adds	r3, #54	; 0x36
 8009612:	3303      	adds	r3, #3
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	061a      	lsls	r2, r3, #24
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3336      	adds	r3, #54	; 0x36
 800961c:	3302      	adds	r3, #2
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	041b      	lsls	r3, r3, #16
 8009622:	4313      	orrs	r3, r2
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	3236      	adds	r2, #54	; 0x36
 8009628:	3201      	adds	r2, #1
 800962a:	7812      	ldrb	r2, [r2, #0]
 800962c:	0212      	lsls	r2, r2, #8
 800962e:	4313      	orrs	r3, r2
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8009636:	4313      	orrs	r3, r2
 8009638:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800963c:	4a13      	ldr	r2, [pc, #76]	; (800968c <check_fs+0xd0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d101      	bne.n	8009646 <check_fs+0x8a>
		return 0;
 8009642:	2300      	movs	r3, #0
 8009644:	e01c      	b.n	8009680 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3352      	adds	r3, #82	; 0x52
 800964a:	3303      	adds	r3, #3
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	061a      	lsls	r2, r3, #24
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3352      	adds	r3, #82	; 0x52
 8009654:	3302      	adds	r3, #2
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	041b      	lsls	r3, r3, #16
 800965a:	4313      	orrs	r3, r2
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	3252      	adds	r2, #82	; 0x52
 8009660:	3201      	adds	r2, #1
 8009662:	7812      	ldrb	r2, [r2, #0]
 8009664:	0212      	lsls	r2, r2, #8
 8009666:	4313      	orrs	r3, r2
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800966e:	4313      	orrs	r3, r2
 8009670:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009674:	4a05      	ldr	r2, [pc, #20]	; (800968c <check_fs+0xd0>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d101      	bne.n	800967e <check_fs+0xc2>
		return 0;
 800967a:	2300      	movs	r3, #0
 800967c:	e000      	b.n	8009680 <check_fs+0xc4>

	return 1;
 800967e:	2301      	movs	r3, #1
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	ffffaa55 	.word	0xffffaa55
 800968c:	00544146 	.word	0x00544146

08009690 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b096      	sub	sp, #88	; 0x58
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4613      	mov	r3, r2
 800969c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80096a4:	68b8      	ldr	r0, [r7, #8]
 80096a6:	f7ff ff46 	bl	8009536 <get_ldnumber>
 80096aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80096ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	da01      	bge.n	80096b6 <find_volume+0x26>
 80096b2:	230b      	movs	r3, #11
 80096b4:	e2b2      	b.n	8009c1c <find_volume+0x58c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096b6:	4aa2      	ldr	r2, [pc, #648]	; (8009940 <find_volume+0x2b0>)
 80096b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <find_volume+0x3a>
 80096c6:	230c      	movs	r3, #12
 80096c8:	e2a8      	b.n	8009c1c <find_volume+0x58c>

	ENTER_FF(fs);						/* Lock the volume */
 80096ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096cc:	f7ff fe66 	bl	800939c <lock_fs>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <find_volume+0x4a>
 80096d6:	230f      	movs	r3, #15
 80096d8:	e2a0      	b.n	8009c1c <find_volume+0x58c>
	*rfs = fs;							/* Return pointer to the file system object */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096de:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d01b      	beq.n	8009722 <find_volume+0x92>
		stat = disk_status(fs->drv);
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff fdd3 	bl	800929c <disk_status>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80096fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10c      	bne.n	8009722 <find_volume+0x92>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d007      	beq.n	800971e <find_volume+0x8e>
 800970e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009712:	f003 0304 	and.w	r3, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <find_volume+0x8e>
				return FR_WRITE_PROTECTED;
 800971a:	230a      	movs	r3, #10
 800971c:	e27e      	b.n	8009c1c <find_volume+0x58c>
			return FR_OK;				/* The file system object is valid */
 800971e:	2300      	movs	r3, #0
 8009720:	e27c      	b.n	8009c1c <find_volume+0x58c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	2200      	movs	r2, #0
 8009726:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800972a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972c:	b2da      	uxtb	r2, r3
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff fdc8 	bl	80092d0 <disk_initialize>
 8009740:	4603      	mov	r3, r0
 8009742:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009746:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b00      	cmp	r3, #0
 8009750:	d001      	beq.n	8009756 <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009752:	2303      	movs	r3, #3
 8009754:	e262      	b.n	8009c1c <find_volume+0x58c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <find_volume+0xdc>
 800975c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 8009768:	230a      	movs	r3, #10
 800976a:	e257      	b.n	8009c1c <find_volume+0x58c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009770:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009772:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009774:	f7ff ff22 	bl	80095bc <check_fs>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800977e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009782:	2b01      	cmp	r3, #1
 8009784:	d155      	bne.n	8009832 <find_volume+0x1a2>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009786:	2300      	movs	r3, #0
 8009788:	643b      	str	r3, [r7, #64]	; 0x40
 800978a:	e029      	b.n	80097e0 <find_volume+0x150>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800978c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800978e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009796:	4413      	add	r3, r2
 8009798:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	3304      	adds	r3, #4
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d012      	beq.n	80097ca <find_volume+0x13a>
 80097a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a6:	330b      	adds	r3, #11
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	061a      	lsls	r2, r3, #24
 80097ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ae:	330a      	adds	r3, #10
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	4313      	orrs	r3, r2
 80097b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b8:	3209      	adds	r2, #9
 80097ba:	7812      	ldrb	r2, [r2, #0]
 80097bc:	0212      	lsls	r2, r2, #8
 80097be:	4313      	orrs	r3, r2
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	3208      	adds	r2, #8
 80097c4:	7812      	ldrb	r2, [r2, #0]
 80097c6:	431a      	orrs	r2, r3
 80097c8:	e000      	b.n	80097cc <find_volume+0x13c>
 80097ca:	2200      	movs	r2, #0
 80097cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80097d4:	440b      	add	r3, r1
 80097d6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80097da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097dc:	3301      	adds	r3, #1
 80097de:	643b      	str	r3, [r7, #64]	; 0x40
 80097e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	d9d2      	bls.n	800978c <find_volume+0xfc>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80097e6:	2300      	movs	r3, #0
 80097e8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80097ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <find_volume+0x166>
 80097f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f2:	3b01      	subs	r3, #1
 80097f4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80097f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80097fe:	4413      	add	r3, r2
 8009800:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009804:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009808:	2b00      	cmp	r3, #0
 800980a:	d005      	beq.n	8009818 <find_volume+0x188>
 800980c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800980e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009810:	f7ff fed4 	bl	80095bc <check_fs>
 8009814:	4603      	mov	r3, r0
 8009816:	e000      	b.n	800981a <find_volume+0x18a>
 8009818:	2302      	movs	r3, #2
 800981a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800981e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <find_volume+0x1a2>
 8009826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009828:	3301      	adds	r3, #1
 800982a:	643b      	str	r3, [r7, #64]	; 0x40
 800982c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800982e:	2b03      	cmp	r3, #3
 8009830:	d9e1      	bls.n	80097f6 <find_volume+0x166>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009832:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009836:	2b03      	cmp	r3, #3
 8009838:	d101      	bne.n	800983e <find_volume+0x1ae>
 800983a:	2301      	movs	r3, #1
 800983c:	e1ee      	b.n	8009c1c <find_volume+0x58c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800983e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <find_volume+0x1ba>
 8009846:	230d      	movs	r3, #13
 8009848:	e1e8      	b.n	8009c1c <find_volume+0x58c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	7b1b      	ldrb	r3, [r3, #12]
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	b21a      	sxth	r2, r3
 8009852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009854:	7adb      	ldrb	r3, [r3, #11]
 8009856:	b21b      	sxth	r3, r3
 8009858:	4313      	orrs	r3, r2
 800985a:	b21b      	sxth	r3, r3
 800985c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009860:	d001      	beq.n	8009866 <find_volume+0x1d6>
		return FR_NO_FILESYSTEM;
 8009862:	230d      	movs	r3, #13
 8009864:	e1da      	b.n	8009c1c <find_volume+0x58c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009868:	7ddb      	ldrb	r3, [r3, #23]
 800986a:	021b      	lsls	r3, r3, #8
 800986c:	b21a      	sxth	r2, r3
 800986e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009870:	7d9b      	ldrb	r3, [r3, #22]
 8009872:	b21b      	sxth	r3, r3
 8009874:	4313      	orrs	r3, r2
 8009876:	b21b      	sxth	r3, r3
 8009878:	b29b      	uxth	r3, r3
 800987a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800987c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d112      	bne.n	80098a8 <find_volume+0x218>
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009888:	061a      	lsls	r2, r3, #24
 800988a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009890:	041b      	lsls	r3, r3, #16
 8009892:	4313      	orrs	r3, r2
 8009894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009896:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800989a:	0212      	lsls	r2, r2, #8
 800989c:	4313      	orrs	r3, r2
 800989e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098a0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80098a4:	4313      	orrs	r3, r2
 80098a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80098a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	7c1a      	ldrb	r2, [r3, #16]
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d006      	beq.n	80098d2 <find_volume+0x242>
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d001      	beq.n	80098d2 <find_volume+0x242>
		return FR_NO_FILESYSTEM;
 80098ce:	230d      	movs	r3, #13
 80098d0:	e1a4      	b.n	8009c1c <find_volume+0x58c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 80098d8:	461a      	mov	r2, r3
 80098da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098dc:	fb02 f303 	mul.w	r3, r2, r3
 80098e0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	7b5a      	ldrb	r2, [r3, #13]
 80098e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80098ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ee:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <find_volume+0x27c>
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80098fc:	461a      	mov	r2, r3
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009904:	3b01      	subs	r3, #1
 8009906:	4013      	ands	r3, r2
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <find_volume+0x280>
		return FR_NO_FILESYSTEM;
 800990c:	230d      	movs	r3, #13
 800990e:	e185      	b.n	8009c1c <find_volume+0x58c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009912:	7c9b      	ldrb	r3, [r3, #18]
 8009914:	021b      	lsls	r3, r3, #8
 8009916:	b21a      	sxth	r2, r3
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	7c5b      	ldrb	r3, [r3, #17]
 800991c:	b21b      	sxth	r3, r3
 800991e:	4313      	orrs	r3, r2
 8009920:	b21b      	sxth	r3, r3
 8009922:	b29a      	uxth	r2, r3
 8009924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009926:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009930:	f003 030f 	and.w	r3, r3, #15
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d004      	beq.n	8009944 <find_volume+0x2b4>
		return FR_NO_FILESYSTEM;
 800993a:	230d      	movs	r3, #13
 800993c:	e16e      	b.n	8009c1c <find_volume+0x58c>
 800993e:	bf00      	nop
 8009940:	20000408 	.word	0x20000408

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009946:	7d1b      	ldrb	r3, [r3, #20]
 8009948:	021b      	lsls	r3, r3, #8
 800994a:	b21a      	sxth	r2, r3
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	7cdb      	ldrb	r3, [r3, #19]
 8009950:	b21b      	sxth	r3, r3
 8009952:	4313      	orrs	r3, r2
 8009954:	b21b      	sxth	r3, r3
 8009956:	b29b      	uxth	r3, r3
 8009958:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800995a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800995c:	2b00      	cmp	r3, #0
 800995e:	d112      	bne.n	8009986 <find_volume+0x2f6>
 8009960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009962:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009966:	061a      	lsls	r2, r3, #24
 8009968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800996a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800996e:	041b      	lsls	r3, r3, #16
 8009970:	4313      	orrs	r3, r2
 8009972:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009974:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009978:	0212      	lsls	r2, r2, #8
 800997a:	4313      	orrs	r3, r2
 800997c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800997e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009982:	4313      	orrs	r3, r2
 8009984:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009988:	7bdb      	ldrb	r3, [r3, #15]
 800998a:	021b      	lsls	r3, r3, #8
 800998c:	b21a      	sxth	r2, r3
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	7b9b      	ldrb	r3, [r3, #14]
 8009992:	b21b      	sxth	r3, r3
 8009994:	4313      	orrs	r3, r2
 8009996:	b21b      	sxth	r3, r3
 8009998:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800999a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <find_volume+0x314>
 80099a0:	230d      	movs	r3, #13
 80099a2:	e13b      	b.n	8009c1c <find_volume+0x58c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80099a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a8:	4413      	add	r3, r2
 80099aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099ac:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 80099b0:	0912      	lsrs	r2, r2, #4
 80099b2:	b292      	uxth	r2, r2
 80099b4:	4413      	add	r3, r2
 80099b6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80099b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	429a      	cmp	r2, r3
 80099be:	d201      	bcs.n	80099c4 <find_volume+0x334>
 80099c0:	230d      	movs	r3, #13
 80099c2:	e12b      	b.n	8009c1c <find_volume+0x58c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80099c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099cc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80099d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80099d4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <find_volume+0x350>
 80099dc:	230d      	movs	r3, #13
 80099de:	e11d      	b.n	8009c1c <find_volume+0x58c>
	fmt = FS_FAT12;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d902      	bls.n	80099f6 <find_volume+0x366>
 80099f0:	2302      	movs	r3, #2
 80099f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d902      	bls.n	8009a06 <find_volume+0x376>
 8009a00:	2303      	movs	r3, #3
 8009a02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	1c9a      	adds	r2, r3, #2
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
	fs->volbase = bsect;								/* Volume start sector */
 8009a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a14:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009a18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a1c:	441a      	add	r2, r3
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	fs->database = bsect + sysect;						/* Data start sector */
 8009a24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	441a      	add	r2, r3
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (fmt == FS_FAT32) {
 8009a30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d121      	bne.n	8009a7c <find_volume+0x3ec>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <find_volume+0x3b6>
 8009a42:	230d      	movs	r3, #13
 8009a44:	e0ea      	b.n	8009c1c <find_volume+0x58c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a4c:	061a      	lsls	r2, r3, #24
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a50:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009a54:	041b      	lsls	r3, r3, #16
 8009a56:	4313      	orrs	r3, r2
 8009a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a5a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009a5e:	0212      	lsls	r2, r2, #8
 8009a60:	4313      	orrs	r3, r2
 8009a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a64:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a72:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	647b      	str	r3, [r7, #68]	; 0x44
 8009a7a:	e025      	b.n	8009ac8 <find_volume+0x438>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d101      	bne.n	8009a8a <find_volume+0x3fa>
 8009a86:	230d      	movs	r3, #13
 8009a88:	e0c8      	b.n	8009c1c <find_volume+0x58c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 8009a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a92:	441a      	add	r2, r3
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d104      	bne.n	8009aac <find_volume+0x41c>
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	e00c      	b.n	8009ac6 <find_volume+0x436>
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	4413      	add	r3, r2
 8009ab8:	085a      	lsrs	r2, r3, #1
 8009aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8009ac6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009ad4:	0a5b      	lsrs	r3, r3, #9
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d201      	bcs.n	8009ade <find_volume+0x44e>
		return FR_NO_FILESYSTEM;
 8009ada:	230d      	movs	r3, #13
 8009adc:	e09e      	b.n	8009c1c <find_volume+0x58c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af6:	2280      	movs	r2, #128	; 0x80
 8009af8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009afc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d177      	bne.n	8009bf4 <find_volume+0x564>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b0a:	021b      	lsls	r3, r3, #8
 8009b0c:	b21a      	sxth	r2, r3
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009b14:	b21b      	sxth	r3, r3
 8009b16:	4313      	orrs	r3, r2
 8009b18:	b21b      	sxth	r3, r3
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d16a      	bne.n	8009bf4 <find_volume+0x564>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b20:	3301      	adds	r3, #1
 8009b22:	4619      	mov	r1, r3
 8009b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b26:	f7ff fcd8 	bl	80094da <move_window>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d161      	bne.n	8009bf4 <find_volume+0x564>
	{
		fs->fsi_flag = 0;
 8009b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b32:	2200      	movs	r2, #0
 8009b34:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	b21a      	sxth	r2, r3
 8009b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b44:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009b48:	b21b      	sxth	r3, r3
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	b21b      	sxth	r3, r3
 8009b4e:	4a35      	ldr	r2, [pc, #212]	; (8009c24 <find_volume+0x594>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d14f      	bne.n	8009bf4 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b56:	78db      	ldrb	r3, [r3, #3]
 8009b58:	061a      	lsls	r2, r3, #24
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	789b      	ldrb	r3, [r3, #2]
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	4313      	orrs	r3, r2
 8009b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b64:	7852      	ldrb	r2, [r2, #1]
 8009b66:	0212      	lsls	r2, r2, #8
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b6c:	7812      	ldrb	r2, [r2, #0]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	4a2d      	ldr	r2, [pc, #180]	; (8009c28 <find_volume+0x598>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d13e      	bne.n	8009bf4 <find_volume+0x564>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8009b7c:	061a      	lsls	r2, r3, #24
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8009b84:	041b      	lsls	r3, r3, #16
 8009b86:	4313      	orrs	r3, r2
 8009b88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b8a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8009b8e:	0212      	lsls	r2, r2, #8
 8009b90:	4313      	orrs	r3, r2
 8009b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b94:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	4a24      	ldr	r2, [pc, #144]	; (8009c2c <find_volume+0x59c>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d129      	bne.n	8009bf4 <find_volume+0x564>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8009ba6:	061a      	lsls	r2, r3, #24
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8009bae:	041b      	lsls	r3, r3, #16
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bb4:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8009bb8:	0212      	lsls	r2, r2, #8
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bbe:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8009bc2:	431a      	orrs	r2, r3
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bcc:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8009bd0:	061a      	lsls	r2, r3, #24
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bd4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8009bd8:	041b      	lsls	r3, r3, #16
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bde:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8009be2:	0212      	lsls	r2, r2, #8
 8009be4:	4313      	orrs	r3, r2
 8009be6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009be8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8009bec:	431a      	orrs	r2, r3
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009bfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8009bfe:	4b0c      	ldr	r3, [pc, #48]	; (8009c30 <find_volume+0x5a0>)
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	3301      	adds	r3, #1
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <find_volume+0x5a0>)
 8009c08:	801a      	strh	r2, [r3, #0]
 8009c0a:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <find_volume+0x5a0>)
 8009c0c:	881a      	ldrh	r2, [r3, #0]
 8009c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c10:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8009c14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c16:	f7ff fbef 	bl	80093f8 <clear_lock>
#endif

	return FR_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3758      	adds	r7, #88	; 0x58
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	ffffaa55 	.word	0xffffaa55
 8009c28:	41615252 	.word	0x41615252
 8009c2c:	61417272 	.word	0x61417272
 8009c30:	2000040c 	.word	0x2000040c

08009c34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8009c46:	f107 0310 	add.w	r3, r7, #16
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff fc73 	bl	8009536 <get_ldnumber>
 8009c50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	da01      	bge.n	8009c5c <f_mount+0x28>
 8009c58:	230b      	movs	r3, #11
 8009c5a:	e04c      	b.n	8009cf6 <f_mount+0xc2>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c5c:	4a28      	ldr	r2, [pc, #160]	; (8009d00 <f_mount+0xcc>)
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d011      	beq.n	8009c90 <f_mount+0x5c>
#if _FS_LOCK
		clear_lock(cfs);
 8009c6c:	69b8      	ldr	r0, [r7, #24]
 8009c6e:	f7ff fbc3 	bl	80093f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 f8bc 	bl	8009df6 <ff_del_syncobj>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <f_mount+0x54>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e036      	b.n	8009cf6 <f_mount+0xc2>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d011      	beq.n	8009cba <f_mount+0x86>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4610      	mov	r0, r2
 8009cac:	f000 f883 	bl	8009db6 <ff_cre_syncobj>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <f_mount+0x86>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	e01d      	b.n	8009cf6 <f_mount+0xc2>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4910      	ldr	r1, [pc, #64]	; (8009d00 <f_mount+0xcc>)
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <f_mount+0x9c>
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d001      	beq.n	8009cd4 <f_mount+0xa0>
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	e010      	b.n	8009cf6 <f_mount+0xc2>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009cd4:	f107 0108 	add.w	r1, r7, #8
 8009cd8:	f107 030c 	add.w	r3, r7, #12
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f7ff fcd6 	bl	8009690 <find_volume>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	7dfa      	ldrb	r2, [r7, #23]
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fb63 	bl	80093ba <unlock_fs>
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000408 	.word	0x20000408

08009d04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d12:	2301      	movs	r3, #1
 8009d14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009d1a:	4b1e      	ldr	r3, [pc, #120]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d1c:	7a5b      	ldrb	r3, [r3, #9]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d831      	bhi.n	8009d88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d24:	4b1b      	ldr	r3, [pc, #108]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d26:	7a5b      	ldrb	r3, [r3, #9]
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	4b19      	ldr	r3, [pc, #100]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d2e:	2100      	movs	r1, #0
 8009d30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009d32:	4b18      	ldr	r3, [pc, #96]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d34:	7a5b      	ldrb	r3, [r3, #9]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	4a16      	ldr	r2, [pc, #88]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009d42:	4b14      	ldr	r3, [pc, #80]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d44:	7a5b      	ldrb	r3, [r3, #9]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	461a      	mov	r2, r3
 8009d4a:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d4c:	4413      	add	r3, r2
 8009d4e:	79fa      	ldrb	r2, [r7, #7]
 8009d50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d52:	4b10      	ldr	r3, [pc, #64]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d54:	7a5b      	ldrb	r3, [r3, #9]
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	b2d1      	uxtb	r1, r2
 8009d5c:	4a0d      	ldr	r2, [pc, #52]	; (8009d94 <FATFS_LinkDriverEx+0x90>)
 8009d5e:	7251      	strb	r1, [r2, #9]
 8009d60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009d62:	7dbb      	ldrb	r3, [r7, #22]
 8009d64:	3330      	adds	r3, #48	; 0x30
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	223a      	movs	r2, #58	; 0x3a
 8009d72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	3302      	adds	r3, #2
 8009d78:	222f      	movs	r2, #47	; 0x2f
 8009d7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	3303      	adds	r3, #3
 8009d80:	2200      	movs	r2, #0
 8009d82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009d84:	2300      	movs	r3, #0
 8009d86:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bc80      	pop	{r7}
 8009d92:	4770      	bx	lr
 8009d94:	20000428 	.word	0x20000428

08009d98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009da2:	2200      	movs	r2, #0
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff ffac 	bl	8009d04 <FATFS_LinkDriverEx>
 8009dac:	4603      	mov	r3, r0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3708      	adds	r7, #8
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* TRUE:Function succeeded, FALSE:Could not create due to any error */
	BYTE vol,			/* Corresponding logical drive being processed */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b086      	sub	sp, #24
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	6039      	str	r1, [r7, #0]
 8009dc0:	71fb      	strb	r3, [r7, #7]
  int ret;
  
  osSemaphoreDef(SEM);
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	613b      	str	r3, [r7, #16]
  *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);		
 8009dca:	f107 030c 	add.w	r3, r7, #12
 8009dce:	2101      	movs	r1, #1
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 f8cb 	bl	8009f6c <osSemaphoreCreate>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	601a      	str	r2, [r3, #0]
  ret = (*sobj != NULL);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bf14      	ite	ne
 8009de4:	2301      	movne	r3, #1
 8009de6:	2300      	moveq	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	617b      	str	r3, [r7, #20]
  
  return ret;
 8009dec:	697b      	ldr	r3, [r7, #20]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3718      	adds	r7, #24
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* TRUE:Function succeeded, FALSE:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b082      	sub	sp, #8
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  osSemaphoreDelete (sobj);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f96c 	bl	800a0dc <osSemaphoreDelete>
  return 1;
 8009e04:	2301      	movs	r3, #1
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <ff_req_grant>:
*/

int ff_req_grant (	/* TRUE:Got a grant to access the volume, FALSE:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
  
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009e1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f8d8 	bl	8009fd4 <osSemaphoreWait>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <ff_req_grant+0x20>
  {
    ret = 1;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 f915 	bl	800a070 <osSemaphoreRelease>
}
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b085      	sub	sp, #20
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	4603      	mov	r3, r0
 8009e56:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009e5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e60:	2b84      	cmp	r3, #132	; 0x84
 8009e62:	d005      	beq.n	8009e70 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009e64:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3303      	adds	r3, #3
 8009e6e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009e70:	68fb      	ldr	r3, [r7, #12]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bc80      	pop	{r7}
 8009e7a:	4770      	bx	lr

08009e7c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e82:	f3ef 8305 	mrs	r3, IPSR
 8009e86:	607b      	str	r3, [r7, #4]
  return(result);
 8009e88:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bf14      	ite	ne
 8009e8e:	2301      	movne	r3, #1
 8009e90:	2300      	moveq	r3, #0
 8009e92:	b2db      	uxtb	r3, r3
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr

08009e9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ea2:	f001 f947 	bl	800b134 <vTaskStartScheduler>
  
  return osOK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eae:	b089      	sub	sp, #36	; 0x24
 8009eb0:	af04      	add	r7, sp, #16
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d020      	beq.n	8009f00 <osThreadCreate+0x54>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d01c      	beq.n	8009f00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	685c      	ldr	r4, [r3, #4]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681d      	ldr	r5, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691e      	ldr	r6, [r3, #16]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff ffb8 	bl	8009e4e <makeFreeRtosPriority>
 8009ede:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ee8:	9202      	str	r2, [sp, #8]
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	9100      	str	r1, [sp, #0]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	4632      	mov	r2, r6
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f000 ff63 	bl	800adc0 <xTaskCreateStatic>
 8009efa:	4603      	mov	r3, r0
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	e01c      	b.n	8009f3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685c      	ldr	r4, [r3, #4]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009f0c:	b29e      	uxth	r6, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff ff9a 	bl	8009e4e <makeFreeRtosPriority>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f107 030c 	add.w	r3, r7, #12
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	9200      	str	r2, [sp, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	4632      	mov	r2, r6
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 ffa1 	bl	800ae72 <xTaskCreate>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d001      	beq.n	8009f3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	e000      	b.n	8009f3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3714      	adds	r7, #20
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <osDelay+0x16>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	e000      	b.n	8009f5c <osDelay+0x18>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 f8b5 	bl	800b0cc <vTaskDelay>
  
  return osOK;
 8009f62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b086      	sub	sp, #24
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d010      	beq.n	8009fa0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d10b      	bne.n	8009f9c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	2303      	movs	r3, #3
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2100      	movs	r1, #0
 8009f92:	2001      	movs	r0, #1
 8009f94:	f000 f9cc 	bl	800a330 <xQueueGenericCreateStatic>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	e016      	b.n	8009fca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	e014      	b.n	8009fca <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d110      	bne.n	8009fc8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009fa6:	2203      	movs	r2, #3
 8009fa8:	2100      	movs	r1, #0
 8009faa:	2001      	movs	r0, #1
 8009fac:	f000 fa32 	bl	800a414 <xQueueGenericCreate>
 8009fb0:	60f8      	str	r0, [r7, #12]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d005      	beq.n	8009fc4 <osSemaphoreCreate+0x58>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fa84 	bl	800a4cc <xQueueGenericSend>
      return sema;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	e000      	b.n	8009fca <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009fc8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009fe8:	2380      	movs	r3, #128	; 0x80
 8009fea:	e03a      	b.n	800a062 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009fec:	2300      	movs	r3, #0
 8009fee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff6:	d103      	bne.n	800a000 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	e009      	b.n	800a014 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d006      	beq.n	800a014 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <osSemaphoreWait+0x40>
      ticks = 1;
 800a010:	2301      	movs	r3, #1
 800a012:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a014:	f7ff ff32 	bl	8009e7c <inHandlerMode>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d017      	beq.n	800a04e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a01e:	f107 0308 	add.w	r3, r7, #8
 800a022:	461a      	mov	r2, r3
 800a024:	2100      	movs	r1, #0
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fcdc 	bl	800a9e4 <xQueueReceiveFromISR>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d001      	beq.n	800a036 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a032:	23ff      	movs	r3, #255	; 0xff
 800a034:	e015      	b.n	800a062 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d011      	beq.n	800a060 <osSemaphoreWait+0x8c>
 800a03c:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <osSemaphoreWait+0x98>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	e008      	b.n	800a060 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a04e:	68f9      	ldr	r1, [r7, #12]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fbbf 	bl	800a7d4 <xQueueSemaphoreTake>
 800a056:	4603      	mov	r3, r0
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d001      	beq.n	800a060 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a05c:	23ff      	movs	r3, #255	; 0xff
 800a05e:	e000      	b.n	800a062 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	e000ed04 	.word	0xe000ed04

0800a070 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a078:	2300      	movs	r3, #0
 800a07a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a07c:	2300      	movs	r3, #0
 800a07e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a080:	f7ff fefc 	bl	8009e7c <inHandlerMode>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d016      	beq.n	800a0b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a08a:	f107 0308 	add.w	r3, r7, #8
 800a08e:	4619      	mov	r1, r3
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fb15 	bl	800a6c0 <xQueueGiveFromISR>
 800a096:	4603      	mov	r3, r0
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d001      	beq.n	800a0a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a09c:	23ff      	movs	r3, #255	; 0xff
 800a09e:	e017      	b.n	800a0d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d013      	beq.n	800a0ce <osSemaphoreRelease+0x5e>
 800a0a6:	4b0c      	ldr	r3, [pc, #48]	; (800a0d8 <osSemaphoreRelease+0x68>)
 800a0a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	e00a      	b.n	800a0ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2100      	movs	r1, #0
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa04 	bl	800a4cc <xQueueGenericSend>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d001      	beq.n	800a0ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a0ca:	23ff      	movs	r3, #255	; 0xff
 800a0cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	e000ed04 	.word	0xe000ed04

0800a0dc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a0e4:	f7ff feca 	bl	8009e7c <inHandlerMode>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a0ee:	2382      	movs	r3, #130	; 0x82
 800a0f0:	e003      	b.n	800a0fa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fcf3 	bl	800aade <vQueueDelete>

  return osOK; 
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a102:	b480      	push	{r7}
 800a104:	b083      	sub	sp, #12
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f103 0208 	add.w	r2, r3, #8
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f04f 32ff 	mov.w	r2, #4294967295
 800a11a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f103 0208 	add.w	r2, r3, #8
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f103 0208 	add.w	r2, r3, #8
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a136:	bf00      	nop
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bc80      	pop	{r7}
 800a13e:	4770      	bx	lr

0800a140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a14e:	bf00      	nop
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	bc80      	pop	{r7}
 800a156:	4770      	bx	lr

0800a158 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	1c5a      	adds	r2, r3, #1
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	bc80      	pop	{r7}
 800a19c:	4770      	bx	lr

0800a19e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b085      	sub	sp, #20
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1b4:	d103      	bne.n	800a1be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e00c      	b.n	800a1d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	60fb      	str	r3, [r7, #12]
 800a1c4:	e002      	b.n	800a1cc <vListInsert+0x2e>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	60fb      	str	r3, [r7, #12]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d2f6      	bcs.n	800a1c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	1c5a      	adds	r2, r3, #1
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	bc80      	pop	{r7}
 800a20c:	4770      	bx	lr

0800a20e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	6892      	ldr	r2, [r2, #8]
 800a224:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	6852      	ldr	r2, [r2, #4]
 800a22e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	429a      	cmp	r2, r3
 800a238:	d103      	bne.n	800a242 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689a      	ldr	r2, [r3, #8]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	1e5a      	subs	r2, r3, #1
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bc80      	pop	{r7}
 800a25e:	4770      	bx	lr

0800a260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d109      	bne.n	800a288 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a278:	f383 8811 	msr	BASEPRI, r3
 800a27c:	f3bf 8f6f 	isb	sy
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	60bb      	str	r3, [r7, #8]
 800a286:	e7fe      	b.n	800a286 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a288:	f001 fe7e 	bl	800bf88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a294:	68f9      	ldr	r1, [r7, #12]
 800a296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a298:	fb01 f303 	mul.w	r3, r1, r3
 800a29c:	441a      	add	r2, r3
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	68f9      	ldr	r1, [r7, #12]
 800a2bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2be:	fb01 f303 	mul.w	r3, r1, r3
 800a2c2:	441a      	add	r2, r3
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	22ff      	movs	r2, #255	; 0xff
 800a2cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	22ff      	movs	r2, #255	; 0xff
 800a2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d114      	bne.n	800a308 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d01a      	beq.n	800a31c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3310      	adds	r3, #16
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f001 f964 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d012      	beq.n	800a31c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2f6:	4b0d      	ldr	r3, [pc, #52]	; (800a32c <xQueueGenericReset+0xcc>)
 800a2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	e009      	b.n	800a31c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3310      	adds	r3, #16
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fef8 	bl	800a102 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3324      	adds	r3, #36	; 0x24
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff fef3 	bl	800a102 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a31c:	f001 fe62 	bl	800bfe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a320:	2301      	movs	r3, #1
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	e000ed04 	.word	0xe000ed04

0800a330 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08e      	sub	sp, #56	; 0x38
 800a334:	af02      	add	r7, sp, #8
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d109      	bne.n	800a358 <xQueueGenericCreateStatic+0x28>
 800a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a348:	f383 8811 	msr	BASEPRI, r3
 800a34c:	f3bf 8f6f 	isb	sy
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	62bb      	str	r3, [r7, #40]	; 0x28
 800a356:	e7fe      	b.n	800a356 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d109      	bne.n	800a372 <xQueueGenericCreateStatic+0x42>
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
 800a370:	e7fe      	b.n	800a370 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <xQueueGenericCreateStatic+0x4e>
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <xQueueGenericCreateStatic+0x52>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <xQueueGenericCreateStatic+0x54>
 800a382:	2300      	movs	r3, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d109      	bne.n	800a39c <xQueueGenericCreateStatic+0x6c>
 800a388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	623b      	str	r3, [r7, #32]
 800a39a:	e7fe      	b.n	800a39a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d102      	bne.n	800a3a8 <xQueueGenericCreateStatic+0x78>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d101      	bne.n	800a3ac <xQueueGenericCreateStatic+0x7c>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e000      	b.n	800a3ae <xQueueGenericCreateStatic+0x7e>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <xQueueGenericCreateStatic+0x96>
 800a3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	61fb      	str	r3, [r7, #28]
 800a3c4:	e7fe      	b.n	800a3c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a3c6:	2348      	movs	r3, #72	; 0x48
 800a3c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2b48      	cmp	r3, #72	; 0x48
 800a3ce:	d009      	beq.n	800a3e4 <xQueueGenericCreateStatic+0xb4>
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	61bb      	str	r3, [r7, #24]
 800a3e2:	e7fe      	b.n	800a3e2 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00d      	beq.n	800a40a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4613      	mov	r3, r2
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	68b9      	ldr	r1, [r7, #8]
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f842 	bl	800a48e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3730      	adds	r7, #48	; 0x30
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	; 0x28
 800a418:	af02      	add	r7, sp, #8
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d109      	bne.n	800a43c <xQueueGenericCreate+0x28>
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	e7fe      	b.n	800a43a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d102      	bne.n	800a448 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a442:	2300      	movs	r3, #0
 800a444:	61fb      	str	r3, [r7, #28]
 800a446:	e004      	b.n	800a452 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	fb02 f303 	mul.w	r3, r2, r3
 800a450:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	3348      	adds	r3, #72	; 0x48
 800a456:	4618      	mov	r0, r3
 800a458:	f001 fe8c 	bl	800c174 <pvPortMalloc>
 800a45c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00f      	beq.n	800a484 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	3348      	adds	r3, #72	; 0x48
 800a468:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a472:	79fa      	ldrb	r2, [r7, #7]
 800a474:	69bb      	ldr	r3, [r7, #24]
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	4613      	mov	r3, r2
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	68b9      	ldr	r1, [r7, #8]
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f805 	bl	800a48e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a484:	69bb      	ldr	r3, [r7, #24]
	}
 800a486:	4618      	mov	r0, r3
 800a488:	3720      	adds	r7, #32
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	607a      	str	r2, [r7, #4]
 800a49a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d103      	bne.n	800a4aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	601a      	str	r2, [r3, #0]
 800a4a8:	e002      	b.n	800a4b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4aa:	69bb      	ldr	r3, [r7, #24]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4bc:	2101      	movs	r1, #1
 800a4be:	69b8      	ldr	r0, [r7, #24]
 800a4c0:	f7ff fece 	bl	800a260 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a4c4:	bf00      	nop
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08e      	sub	sp, #56	; 0x38
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	607a      	str	r2, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <xQueueGenericSend+0x30>
 800a4e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fa:	e7fe      	b.n	800a4fa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d103      	bne.n	800a50a <xQueueGenericSend+0x3e>
 800a502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a506:	2b00      	cmp	r3, #0
 800a508:	d101      	bne.n	800a50e <xQueueGenericSend+0x42>
 800a50a:	2301      	movs	r3, #1
 800a50c:	e000      	b.n	800a510 <xQueueGenericSend+0x44>
 800a50e:	2300      	movs	r3, #0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d109      	bne.n	800a528 <xQueueGenericSend+0x5c>
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	627b      	str	r3, [r7, #36]	; 0x24
 800a526:	e7fe      	b.n	800a526 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b02      	cmp	r3, #2
 800a52c:	d103      	bne.n	800a536 <xQueueGenericSend+0x6a>
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a532:	2b01      	cmp	r3, #1
 800a534:	d101      	bne.n	800a53a <xQueueGenericSend+0x6e>
 800a536:	2301      	movs	r3, #1
 800a538:	e000      	b.n	800a53c <xQueueGenericSend+0x70>
 800a53a:	2300      	movs	r3, #0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d109      	bne.n	800a554 <xQueueGenericSend+0x88>
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	623b      	str	r3, [r7, #32]
 800a552:	e7fe      	b.n	800a552 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a554:	f001 f9ea 	bl	800b92c <xTaskGetSchedulerState>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d102      	bne.n	800a564 <xQueueGenericSend+0x98>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d101      	bne.n	800a568 <xQueueGenericSend+0x9c>
 800a564:	2301      	movs	r3, #1
 800a566:	e000      	b.n	800a56a <xQueueGenericSend+0x9e>
 800a568:	2300      	movs	r3, #0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d109      	bne.n	800a582 <xQueueGenericSend+0xb6>
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	61fb      	str	r3, [r7, #28]
 800a580:	e7fe      	b.n	800a580 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a582:	f001 fd01 	bl	800bf88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	429a      	cmp	r2, r3
 800a590:	d302      	bcc.n	800a598 <xQueueGenericSend+0xcc>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d129      	bne.n	800a5ec <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a59e:	f000 fad7 	bl	800ab50 <prvCopyDataToQueue>
 800a5a2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d010      	beq.n	800a5ce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ae:	3324      	adds	r3, #36	; 0x24
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f001 f801 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d013      	beq.n	800a5e4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5bc:	4b3f      	ldr	r3, [pc, #252]	; (800a6bc <xQueueGenericSend+0x1f0>)
 800a5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	e00a      	b.n	800a5e4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5d4:	4b39      	ldr	r3, [pc, #228]	; (800a6bc <xQueueGenericSend+0x1f0>)
 800a5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5e4:	f001 fcfe 	bl	800bfe4 <vPortExitCritical>
				return pdPASS;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e063      	b.n	800a6b4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d103      	bne.n	800a5fa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5f2:	f001 fcf7 	bl	800bfe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e05c      	b.n	800a6b4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d106      	bne.n	800a60e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a600:	f107 0314 	add.w	r3, r7, #20
 800a604:	4618      	mov	r0, r3
 800a606:	f001 f839 	bl	800b67c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a60a:	2301      	movs	r3, #1
 800a60c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a60e:	f001 fce9 	bl	800bfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a612:	f000 fded 	bl	800b1f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a616:	f001 fcb7 	bl	800bf88 <vPortEnterCritical>
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a620:	b25b      	sxtb	r3, r3
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d103      	bne.n	800a630 <xQueueGenericSend+0x164>
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a636:	b25b      	sxtb	r3, r3
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d103      	bne.n	800a646 <xQueueGenericSend+0x17a>
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a646:	f001 fccd 	bl	800bfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a64a:	1d3a      	adds	r2, r7, #4
 800a64c:	f107 0314 	add.w	r3, r7, #20
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f001 f828 	bl	800b6a8 <xTaskCheckForTimeOut>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d124      	bne.n	800a6a8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a65e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a660:	f000 fb6e 	bl	800ad40 <prvIsQueueFull>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d018      	beq.n	800a69c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	3310      	adds	r3, #16
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f000 ff7c 	bl	800b570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a67a:	f000 faf9 	bl	800ac70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a67e:	f000 fdc5 	bl	800b20c <xTaskResumeAll>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	f47f af7c 	bne.w	800a582 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a68a:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <xQueueGenericSend+0x1f0>)
 800a68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	e772      	b.n	800a582 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a69e:	f000 fae7 	bl	800ac70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6a2:	f000 fdb3 	bl	800b20c <xTaskResumeAll>
 800a6a6:	e76c      	b.n	800a582 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6aa:	f000 fae1 	bl	800ac70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ae:	f000 fdad 	bl	800b20c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6b2:	2300      	movs	r3, #0
		}
	}
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3738      	adds	r7, #56	; 0x38
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	e000ed04 	.word	0xe000ed04

0800a6c0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08e      	sub	sp, #56	; 0x38
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d109      	bne.n	800a6e8 <xQueueGiveFromISR+0x28>
 800a6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d8:	f383 8811 	msr	BASEPRI, r3
 800a6dc:	f3bf 8f6f 	isb	sy
 800a6e0:	f3bf 8f4f 	dsb	sy
 800a6e4:	623b      	str	r3, [r7, #32]
 800a6e6:	e7fe      	b.n	800a6e6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d009      	beq.n	800a704 <xQueueGiveFromISR+0x44>
 800a6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	61fb      	str	r3, [r7, #28]
 800a702:	e7fe      	b.n	800a702 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d103      	bne.n	800a714 <xQueueGiveFromISR+0x54>
 800a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d101      	bne.n	800a718 <xQueueGiveFromISR+0x58>
 800a714:	2301      	movs	r3, #1
 800a716:	e000      	b.n	800a71a <xQueueGiveFromISR+0x5a>
 800a718:	2300      	movs	r3, #0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d109      	bne.n	800a732 <xQueueGiveFromISR+0x72>
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	61bb      	str	r3, [r7, #24]
 800a730:	e7fe      	b.n	800a730 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a732:	f001 fce3 	bl	800c0fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a736:	f3ef 8211 	mrs	r2, BASEPRI
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	617a      	str	r2, [r7, #20]
 800a74c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a74e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a750:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a756:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a75e:	429a      	cmp	r2, r3
 800a760:	d22b      	bcs.n	800a7ba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a774:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77c:	d112      	bne.n	800a7a4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d016      	beq.n	800a7b4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	3324      	adds	r3, #36	; 0x24
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 ff14 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00e      	beq.n	800a7b4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00b      	beq.n	800a7b4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	e007      	b.n	800a7b4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7a8:	3301      	adds	r3, #1
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	b25a      	sxtb	r2, r3
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7b8:	e001      	b.n	800a7be <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3738      	adds	r7, #56	; 0x38
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b08e      	sub	sp, #56	; 0x38
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d109      	bne.n	800a804 <xQueueSemaphoreTake+0x30>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	623b      	str	r3, [r7, #32]
 800a802:	e7fe      	b.n	800a802 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d009      	beq.n	800a820 <xQueueSemaphoreTake+0x4c>
 800a80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	e7fe      	b.n	800a81e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a820:	f001 f884 	bl	800b92c <xTaskGetSchedulerState>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <xQueueSemaphoreTake+0x5c>
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <xQueueSemaphoreTake+0x60>
 800a830:	2301      	movs	r3, #1
 800a832:	e000      	b.n	800a836 <xQueueSemaphoreTake+0x62>
 800a834:	2300      	movs	r3, #0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d109      	bne.n	800a84e <xQueueSemaphoreTake+0x7a>
 800a83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	61bb      	str	r3, [r7, #24]
 800a84c:	e7fe      	b.n	800a84c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a84e:	f001 fb9b 	bl	800bf88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a856:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d024      	beq.n	800a8a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	1e5a      	subs	r2, r3, #1
 800a862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a864:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d104      	bne.n	800a878 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a86e:	f001 fa23 	bl	800bcb8 <pvTaskIncrementMutexHeldCount>
 800a872:	4602      	mov	r2, r0
 800a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a876:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00f      	beq.n	800a8a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	3310      	adds	r3, #16
 800a884:	4618      	mov	r0, r3
 800a886:	f000 fe97 	bl	800b5b8 <xTaskRemoveFromEventList>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d007      	beq.n	800a8a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a890:	4b53      	ldr	r3, [pc, #332]	; (800a9e0 <xQueueSemaphoreTake+0x20c>)
 800a892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8a0:	f001 fba0 	bl	800bfe4 <vPortExitCritical>
				return pdPASS;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e096      	b.n	800a9d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d110      	bne.n	800a8d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d009      	beq.n	800a8c8 <xQueueSemaphoreTake+0xf4>
 800a8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b8:	f383 8811 	msr	BASEPRI, r3
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	617b      	str	r3, [r7, #20]
 800a8c6:	e7fe      	b.n	800a8c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8c8:	f001 fb8c 	bl	800bfe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	e082      	b.n	800a9d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d106      	bne.n	800a8e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8d6:	f107 030c 	add.w	r3, r7, #12
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fece 	bl	800b67c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8e4:	f001 fb7e 	bl	800bfe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8e8:	f000 fc82 	bl	800b1f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8ec:	f001 fb4c 	bl	800bf88 <vPortEnterCritical>
 800a8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8f6:	b25b      	sxtb	r3, r3
 800a8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fc:	d103      	bne.n	800a906 <xQueueSemaphoreTake+0x132>
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a90c:	b25b      	sxtb	r3, r3
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d103      	bne.n	800a91c <xQueueSemaphoreTake+0x148>
 800a914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a91c:	f001 fb62 	bl	800bfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a920:	463a      	mov	r2, r7
 800a922:	f107 030c 	add.w	r3, r7, #12
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 febd 	bl	800b6a8 <xTaskCheckForTimeOut>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d132      	bne.n	800a99a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a936:	f000 f9ed 	bl	800ad14 <prvIsQueueEmpty>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d026      	beq.n	800a98e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a948:	f001 fb1e 	bl	800bf88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	4618      	mov	r0, r3
 800a952:	f001 f809 	bl	800b968 <xTaskPriorityInherit>
 800a956:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a958:	f001 fb44 	bl	800bfe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a95e:	3324      	adds	r3, #36	; 0x24
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	4611      	mov	r1, r2
 800a964:	4618      	mov	r0, r3
 800a966:	f000 fe03 	bl	800b570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a96a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a96c:	f000 f980 	bl	800ac70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a970:	f000 fc4c 	bl	800b20c <xTaskResumeAll>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	f47f af69 	bne.w	800a84e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a97c:	4b18      	ldr	r3, [pc, #96]	; (800a9e0 <xQueueSemaphoreTake+0x20c>)
 800a97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	e75f      	b.n	800a84e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a98e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a990:	f000 f96e 	bl	800ac70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a994:	f000 fc3a 	bl	800b20c <xTaskResumeAll>
 800a998:	e759      	b.n	800a84e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a99a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a99c:	f000 f968 	bl	800ac70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9a0:	f000 fc34 	bl	800b20c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9a6:	f000 f9b5 	bl	800ad14 <prvIsQueueEmpty>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f43f af4e 	beq.w	800a84e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00d      	beq.n	800a9d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a9b8:	f001 fae6 	bl	800bf88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a9bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9be:	f000 f8b0 	bl	800ab22 <prvGetDisinheritPriorityAfterTimeout>
 800a9c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f001 f8d6 	bl	800bb7c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9d0:	f001 fb08 	bl	800bfe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3738      	adds	r7, #56	; 0x38
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	e000ed04 	.word	0xe000ed04

0800a9e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08e      	sub	sp, #56	; 0x38
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d109      	bne.n	800aa0e <xQueueReceiveFromISR+0x2a>
 800a9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	623b      	str	r3, [r7, #32]
 800aa0c:	e7fe      	b.n	800aa0c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d103      	bne.n	800aa1c <xQueueReceiveFromISR+0x38>
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <xQueueReceiveFromISR+0x3c>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e000      	b.n	800aa22 <xQueueReceiveFromISR+0x3e>
 800aa20:	2300      	movs	r3, #0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d109      	bne.n	800aa3a <xQueueReceiveFromISR+0x56>
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	61fb      	str	r3, [r7, #28]
 800aa38:	e7fe      	b.n	800aa38 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa3a:	f001 fb5f 	bl	800c0fc <vPortValidateInterruptPriority>
	__asm volatile
 800aa3e:	f3ef 8211 	mrs	r2, BASEPRI
 800aa42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa46:	f383 8811 	msr	BASEPRI, r3
 800aa4a:	f3bf 8f6f 	isb	sy
 800aa4e:	f3bf 8f4f 	dsb	sy
 800aa52:	61ba      	str	r2, [r7, #24]
 800aa54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa58:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d02f      	beq.n	800aac6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa70:	68b9      	ldr	r1, [r7, #8]
 800aa72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa74:	f000 f8d6 	bl	800ac24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7a:	1e5a      	subs	r2, r3, #1
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa88:	d112      	bne.n	800aab0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d016      	beq.n	800aac0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	3310      	adds	r3, #16
 800aa96:	4618      	mov	r0, r3
 800aa98:	f000 fd8e 	bl	800b5b8 <xTaskRemoveFromEventList>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00e      	beq.n	800aac0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00b      	beq.n	800aac0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	601a      	str	r2, [r3, #0]
 800aaae:	e007      	b.n	800aac0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aab4:	3301      	adds	r3, #1
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	b25a      	sxtb	r2, r3
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aac0:	2301      	movs	r3, #1
 800aac2:	637b      	str	r3, [r7, #52]	; 0x34
 800aac4:	e001      	b.n	800aaca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800aac6:	2300      	movs	r3, #0
 800aac8:	637b      	str	r3, [r7, #52]	; 0x34
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3738      	adds	r7, #56	; 0x38
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d109      	bne.n	800ab04 <vQueueDelete+0x26>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	60bb      	str	r3, [r7, #8]
 800ab02:	e7fe      	b.n	800ab02 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 f933 	bl	800ad70 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d102      	bne.n	800ab1a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f001 fbef 	bl	800c2f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab1a:	bf00      	nop
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab22:	b480      	push	{r7}
 800ab24:	b085      	sub	sp, #20
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d006      	beq.n	800ab40 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f1c3 0307 	rsb	r3, r3, #7
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	e001      	b.n	800ab44 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab44:	68fb      	ldr	r3, [r7, #12]
	}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bc80      	pop	{r7}
 800ab4e:	4770      	bx	lr

0800ab50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10d      	bne.n	800ab8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d14d      	bne.n	800ac12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 ff7a 	bl	800ba74 <xTaskPriorityDisinherit>
 800ab80:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	605a      	str	r2, [r3, #4]
 800ab88:	e043      	b.n	800ac12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d119      	bne.n	800abc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6898      	ldr	r0, [r3, #8]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68b9      	ldr	r1, [r7, #8]
 800ab9c:	f002 f94c 	bl	800ce38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	441a      	add	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d32b      	bcc.n	800ac12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	609a      	str	r2, [r3, #8]
 800abc2:	e026      	b.n	800ac12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68d8      	ldr	r0, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abcc:	461a      	mov	r2, r3
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	f002 f932 	bl	800ce38 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abdc:	425b      	negs	r3, r3
 800abde:	441a      	add	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d207      	bcs.n	800ac00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	685a      	ldr	r2, [r3, #4]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf8:	425b      	negs	r3, r3
 800abfa:	441a      	add	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d105      	bne.n	800ac12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac1a:	697b      	ldr	r3, [r7, #20]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d018      	beq.n	800ac68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68da      	ldr	r2, [r3, #12]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	441a      	add	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d303      	bcc.n	800ac58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68d9      	ldr	r1, [r3, #12]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	461a      	mov	r2, r3
 800ac62:	6838      	ldr	r0, [r7, #0]
 800ac64:	f002 f8e8 	bl	800ce38 <memcpy>
	}
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac78:	f001 f986 	bl	800bf88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac84:	e011      	b.n	800acaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d012      	beq.n	800acb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3324      	adds	r3, #36	; 0x24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fc90 	bl	800b5b8 <xTaskRemoveFromEventList>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac9e:	f000 fd63 	bl	800b768 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dce9      	bgt.n	800ac86 <prvUnlockQueue+0x16>
 800acb2:	e000      	b.n	800acb6 <prvUnlockQueue+0x46>
					break;
 800acb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	22ff      	movs	r2, #255	; 0xff
 800acba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800acbe:	f001 f991 	bl	800bfe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acc2:	f001 f961 	bl	800bf88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800accc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acce:	e011      	b.n	800acf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d012      	beq.n	800acfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3310      	adds	r3, #16
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fc6b 	bl	800b5b8 <xTaskRemoveFromEventList>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ace8:	f000 fd3e 	bl	800b768 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	3b01      	subs	r3, #1
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dce9      	bgt.n	800acd0 <prvUnlockQueue+0x60>
 800acfc:	e000      	b.n	800ad00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	22ff      	movs	r2, #255	; 0xff
 800ad04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ad08:	f001 f96c 	bl	800bfe4 <vPortExitCritical>
}
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad1c:	f001 f934 	bl	800bf88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	e001      	b.n	800ad32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad32:	f001 f957 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800ad36:	68fb      	ldr	r3, [r7, #12]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad48:	f001 f91e 	bl	800bf88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d102      	bne.n	800ad5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	e001      	b.n	800ad62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad62:	f001 f93f 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800ad66:	68fb      	ldr	r3, [r7, #12]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	e016      	b.n	800adac <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad7e:	4a0f      	ldr	r2, [pc, #60]	; (800adbc <vQueueUnregisterQueue+0x4c>)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	00db      	lsls	r3, r3, #3
 800ad84:	4413      	add	r3, r2
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d10b      	bne.n	800ada6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad8e:	4a0b      	ldr	r2, [pc, #44]	; (800adbc <vQueueUnregisterQueue+0x4c>)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2100      	movs	r1, #0
 800ad94:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad98:	4a08      	ldr	r2, [pc, #32]	; (800adbc <vQueueUnregisterQueue+0x4c>)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	00db      	lsls	r3, r3, #3
 800ad9e:	4413      	add	r3, r2
 800ada0:	2200      	movs	r2, #0
 800ada2:	605a      	str	r2, [r3, #4]
				break;
 800ada4:	e005      	b.n	800adb2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3301      	adds	r3, #1
 800adaa:	60fb      	str	r3, [r7, #12]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b07      	cmp	r3, #7
 800adb0:	d9e5      	bls.n	800ad7e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800adb2:	bf00      	nop
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bc80      	pop	{r7}
 800adba:	4770      	bx	lr
 800adbc:	20001b60 	.word	0x20001b60

0800adc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08e      	sub	sp, #56	; 0x38
 800adc4:	af04      	add	r7, sp, #16
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	2b00      	cmp	r3, #0
 800add2:	d109      	bne.n	800ade8 <xTaskCreateStatic+0x28>
 800add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	623b      	str	r3, [r7, #32]
 800ade6:	e7fe      	b.n	800ade6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <xTaskCreateStatic+0x42>
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	61fb      	str	r3, [r7, #28]
 800ae00:	e7fe      	b.n	800ae00 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae02:	2354      	movs	r3, #84	; 0x54
 800ae04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	2b54      	cmp	r3, #84	; 0x54
 800ae0a:	d009      	beq.n	800ae20 <xTaskCreateStatic+0x60>
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	61bb      	str	r3, [r7, #24]
 800ae1e:	e7fe      	b.n	800ae1e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d01e      	beq.n	800ae64 <xTaskCreateStatic+0xa4>
 800ae26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01b      	beq.n	800ae64 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae34:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	2202      	movs	r2, #2
 800ae3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae3e:	2300      	movs	r3, #0
 800ae40:	9303      	str	r3, [sp, #12]
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	9302      	str	r3, [sp, #8]
 800ae46:	f107 0314 	add.w	r3, r7, #20
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	68b9      	ldr	r1, [r7, #8]
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 f850 	bl	800aefc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae5e:	f000 f8cb 	bl	800aff8 <prvAddNewTaskToReadyList>
 800ae62:	e001      	b.n	800ae68 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae68:	697b      	ldr	r3, [r7, #20]
	}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3728      	adds	r7, #40	; 0x28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b08c      	sub	sp, #48	; 0x30
 800ae76:	af04      	add	r7, sp, #16
 800ae78:	60f8      	str	r0, [r7, #12]
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	603b      	str	r3, [r7, #0]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae82:	88fb      	ldrh	r3, [r7, #6]
 800ae84:	009b      	lsls	r3, r3, #2
 800ae86:	4618      	mov	r0, r3
 800ae88:	f001 f974 	bl	800c174 <pvPortMalloc>
 800ae8c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00e      	beq.n	800aeb2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ae94:	2054      	movs	r0, #84	; 0x54
 800ae96:	f001 f96d 	bl	800c174 <pvPortMalloc>
 800ae9a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	697a      	ldr	r2, [r7, #20]
 800aea6:	631a      	str	r2, [r3, #48]	; 0x30
 800aea8:	e005      	b.n	800aeb6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aeaa:	6978      	ldr	r0, [r7, #20]
 800aeac:	f001 fa24 	bl	800c2f8 <vPortFree>
 800aeb0:	e001      	b.n	800aeb6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d017      	beq.n	800aeec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aec4:	88fa      	ldrh	r2, [r7, #6]
 800aec6:	2300      	movs	r3, #0
 800aec8:	9303      	str	r3, [sp, #12]
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	9302      	str	r3, [sp, #8]
 800aece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	68b9      	ldr	r1, [r7, #8]
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f000 f80e 	bl	800aefc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aee0:	69f8      	ldr	r0, [r7, #28]
 800aee2:	f000 f889 	bl	800aff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aee6:	2301      	movs	r3, #1
 800aee8:	61bb      	str	r3, [r7, #24]
 800aeea:	e002      	b.n	800aef2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aeec:	f04f 33ff 	mov.w	r3, #4294967295
 800aef0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aef2:	69bb      	ldr	r3, [r7, #24]
	}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b088      	sub	sp, #32
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800af14:	3b01      	subs	r3, #1
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4413      	add	r3, r2
 800af1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	f023 0307 	bic.w	r3, r3, #7
 800af22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d009      	beq.n	800af42 <prvInitialiseNewTask+0x46>
 800af2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af32:	f383 8811 	msr	BASEPRI, r3
 800af36:	f3bf 8f6f 	isb	sy
 800af3a:	f3bf 8f4f 	dsb	sy
 800af3e:	617b      	str	r3, [r7, #20]
 800af40:	e7fe      	b.n	800af40 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af42:	2300      	movs	r3, #0
 800af44:	61fb      	str	r3, [r7, #28]
 800af46:	e012      	b.n	800af6e <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	4413      	add	r3, r2
 800af4e:	7819      	ldrb	r1, [r3, #0]
 800af50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4413      	add	r3, r2
 800af56:	3334      	adds	r3, #52	; 0x34
 800af58:	460a      	mov	r2, r1
 800af5a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	4413      	add	r3, r2
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d006      	beq.n	800af76 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	3301      	adds	r3, #1
 800af6c:	61fb      	str	r3, [r7, #28]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	2b0f      	cmp	r3, #15
 800af72:	d9e9      	bls.n	800af48 <prvInitialiseNewTask+0x4c>
 800af74:	e000      	b.n	800af78 <prvInitialiseNewTask+0x7c>
		{
			break;
 800af76:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	2b06      	cmp	r3, #6
 800af84:	d901      	bls.n	800af8a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af86:	2306      	movs	r3, #6
 800af88:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af94:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	2200      	movs	r2, #0
 800af9a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9e:	3304      	adds	r3, #4
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7ff f8cd 	bl	800a140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	3318      	adds	r3, #24
 800afaa:	4618      	mov	r0, r3
 800afac:	f7ff f8c8 	bl	800a140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	f1c3 0207 	rsb	r2, r3, #7
 800afbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc8:	2200      	movs	r2, #0
 800afca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	68f9      	ldr	r1, [r7, #12]
 800afd8:	69b8      	ldr	r0, [r7, #24]
 800afda:	f000 fee7 	bl	800bdac <pxPortInitialiseStack>
 800afde:	4602      	mov	r2, r0
 800afe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800afe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aff0:	bf00      	nop
 800aff2:	3720      	adds	r7, #32
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b000:	f000 ffc2 	bl	800bf88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b004:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <prvAddNewTaskToReadyList+0xb8>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3301      	adds	r3, #1
 800b00a:	4a29      	ldr	r2, [pc, #164]	; (800b0b0 <prvAddNewTaskToReadyList+0xb8>)
 800b00c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b00e:	4b29      	ldr	r3, [pc, #164]	; (800b0b4 <prvAddNewTaskToReadyList+0xbc>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d109      	bne.n	800b02a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b016:	4a27      	ldr	r2, [pc, #156]	; (800b0b4 <prvAddNewTaskToReadyList+0xbc>)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b01c:	4b24      	ldr	r3, [pc, #144]	; (800b0b0 <prvAddNewTaskToReadyList+0xb8>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d110      	bne.n	800b046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b024:	f000 fbc4 	bl	800b7b0 <prvInitialiseTaskLists>
 800b028:	e00d      	b.n	800b046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b02a:	4b23      	ldr	r3, [pc, #140]	; (800b0b8 <prvAddNewTaskToReadyList+0xc0>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d109      	bne.n	800b046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b032:	4b20      	ldr	r3, [pc, #128]	; (800b0b4 <prvAddNewTaskToReadyList+0xbc>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d802      	bhi.n	800b046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b040:	4a1c      	ldr	r2, [pc, #112]	; (800b0b4 <prvAddNewTaskToReadyList+0xbc>)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b046:	4b1d      	ldr	r3, [pc, #116]	; (800b0bc <prvAddNewTaskToReadyList+0xc4>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3301      	adds	r3, #1
 800b04c:	4a1b      	ldr	r2, [pc, #108]	; (800b0bc <prvAddNewTaskToReadyList+0xc4>)
 800b04e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	2201      	movs	r2, #1
 800b056:	409a      	lsls	r2, r3
 800b058:	4b19      	ldr	r3, [pc, #100]	; (800b0c0 <prvAddNewTaskToReadyList+0xc8>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	4a18      	ldr	r2, [pc, #96]	; (800b0c0 <prvAddNewTaskToReadyList+0xc8>)
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b066:	4613      	mov	r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4a15      	ldr	r2, [pc, #84]	; (800b0c4 <prvAddNewTaskToReadyList+0xcc>)
 800b070:	441a      	add	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3304      	adds	r3, #4
 800b076:	4619      	mov	r1, r3
 800b078:	4610      	mov	r0, r2
 800b07a:	f7ff f86d 	bl	800a158 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b07e:	f000 ffb1 	bl	800bfe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b082:	4b0d      	ldr	r3, [pc, #52]	; (800b0b8 <prvAddNewTaskToReadyList+0xc0>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00e      	beq.n	800b0a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b08a:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <prvAddNewTaskToReadyList+0xbc>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	429a      	cmp	r2, r3
 800b096:	d207      	bcs.n	800b0a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b098:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <prvAddNewTaskToReadyList+0xd0>)
 800b09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b09e:	601a      	str	r2, [r3, #0]
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	20000534 	.word	0x20000534
 800b0b4:	20000434 	.word	0x20000434
 800b0b8:	20000540 	.word	0x20000540
 800b0bc:	20000550 	.word	0x20000550
 800b0c0:	2000053c 	.word	0x2000053c
 800b0c4:	20000438 	.word	0x20000438
 800b0c8:	e000ed04 	.word	0xe000ed04

0800b0cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d016      	beq.n	800b10c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0de:	4b13      	ldr	r3, [pc, #76]	; (800b12c <vTaskDelay+0x60>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d009      	beq.n	800b0fa <vTaskDelay+0x2e>
 800b0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	60bb      	str	r3, [r7, #8]
 800b0f8:	e7fe      	b.n	800b0f8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b0fa:	f000 f879 	bl	800b1f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0fe:	2100      	movs	r1, #0
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fded 	bl	800bce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b106:	f000 f881 	bl	800b20c <xTaskResumeAll>
 800b10a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d107      	bne.n	800b122 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <vTaskDelay+0x64>)
 800b114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b122:	bf00      	nop
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	2000055c 	.word	0x2000055c
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	; 0x28
 800b138:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b142:	463a      	mov	r2, r7
 800b144:	1d39      	adds	r1, r7, #4
 800b146:	f107 0308 	add.w	r3, r7, #8
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7f5 fe16 	bl	8000d7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	68ba      	ldr	r2, [r7, #8]
 800b156:	9202      	str	r2, [sp, #8]
 800b158:	9301      	str	r3, [sp, #4]
 800b15a:	2300      	movs	r3, #0
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	2300      	movs	r3, #0
 800b160:	460a      	mov	r2, r1
 800b162:	491d      	ldr	r1, [pc, #116]	; (800b1d8 <vTaskStartScheduler+0xa4>)
 800b164:	481d      	ldr	r0, [pc, #116]	; (800b1dc <vTaskStartScheduler+0xa8>)
 800b166:	f7ff fe2b 	bl	800adc0 <xTaskCreateStatic>
 800b16a:	4602      	mov	r2, r0
 800b16c:	4b1c      	ldr	r3, [pc, #112]	; (800b1e0 <vTaskStartScheduler+0xac>)
 800b16e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b170:	4b1b      	ldr	r3, [pc, #108]	; (800b1e0 <vTaskStartScheduler+0xac>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b178:	2301      	movs	r3, #1
 800b17a:	617b      	str	r3, [r7, #20]
 800b17c:	e001      	b.n	800b182 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d115      	bne.n	800b1b4 <vTaskStartScheduler+0x80>
 800b188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b19a:	4b12      	ldr	r3, [pc, #72]	; (800b1e4 <vTaskStartScheduler+0xb0>)
 800b19c:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1a2:	4b11      	ldr	r3, [pc, #68]	; (800b1e8 <vTaskStartScheduler+0xb4>)
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b1a8:	4b10      	ldr	r3, [pc, #64]	; (800b1ec <vTaskStartScheduler+0xb8>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1ae:	f000 fe7b 	bl	800bea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1b2:	e00d      	b.n	800b1d0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ba:	d109      	bne.n	800b1d0 <vTaskStartScheduler+0x9c>
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e7fe      	b.n	800b1ce <vTaskStartScheduler+0x9a>
}
 800b1d0:	bf00      	nop
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	0800cfec 	.word	0x0800cfec
 800b1dc:	0800b781 	.word	0x0800b781
 800b1e0:	20000558 	.word	0x20000558
 800b1e4:	20000554 	.word	0x20000554
 800b1e8:	20000540 	.word	0x20000540
 800b1ec:	20000538 	.word	0x20000538

0800b1f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b1f4:	4b04      	ldr	r3, [pc, #16]	; (800b208 <vTaskSuspendAll+0x18>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	4a03      	ldr	r2, [pc, #12]	; (800b208 <vTaskSuspendAll+0x18>)
 800b1fc:	6013      	str	r3, [r2, #0]
}
 800b1fe:	bf00      	nop
 800b200:	46bd      	mov	sp, r7
 800b202:	bc80      	pop	{r7}
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	2000055c 	.word	0x2000055c

0800b20c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b216:	2300      	movs	r3, #0
 800b218:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b21a:	4b41      	ldr	r3, [pc, #260]	; (800b320 <xTaskResumeAll+0x114>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d109      	bne.n	800b236 <xTaskResumeAll+0x2a>
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	603b      	str	r3, [r7, #0]
 800b234:	e7fe      	b.n	800b234 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b236:	f000 fea7 	bl	800bf88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b23a:	4b39      	ldr	r3, [pc, #228]	; (800b320 <xTaskResumeAll+0x114>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3b01      	subs	r3, #1
 800b240:	4a37      	ldr	r2, [pc, #220]	; (800b320 <xTaskResumeAll+0x114>)
 800b242:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b244:	4b36      	ldr	r3, [pc, #216]	; (800b320 <xTaskResumeAll+0x114>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d161      	bne.n	800b310 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b24c:	4b35      	ldr	r3, [pc, #212]	; (800b324 <xTaskResumeAll+0x118>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d05d      	beq.n	800b310 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b254:	e02e      	b.n	800b2b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b256:	4b34      	ldr	r3, [pc, #208]	; (800b328 <xTaskResumeAll+0x11c>)
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3318      	adds	r3, #24
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe ffd3 	bl	800a20e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe ffce 	bl	800a20e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	2201      	movs	r2, #1
 800b278:	409a      	lsls	r2, r3
 800b27a:	4b2c      	ldr	r3, [pc, #176]	; (800b32c <xTaskResumeAll+0x120>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4313      	orrs	r3, r2
 800b280:	4a2a      	ldr	r2, [pc, #168]	; (800b32c <xTaskResumeAll+0x120>)
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4a27      	ldr	r2, [pc, #156]	; (800b330 <xTaskResumeAll+0x124>)
 800b292:	441a      	add	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3304      	adds	r3, #4
 800b298:	4619      	mov	r1, r3
 800b29a:	4610      	mov	r0, r2
 800b29c:	f7fe ff5c 	bl	800a158 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a4:	4b23      	ldr	r3, [pc, #140]	; (800b334 <xTaskResumeAll+0x128>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d302      	bcc.n	800b2b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b2ae:	4b22      	ldr	r3, [pc, #136]	; (800b338 <xTaskResumeAll+0x12c>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2b4:	4b1c      	ldr	r3, [pc, #112]	; (800b328 <xTaskResumeAll+0x11c>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1cc      	bne.n	800b256 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d001      	beq.n	800b2c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2c2:	f000 fb0f 	bl	800b8e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b2c6:	4b1d      	ldr	r3, [pc, #116]	; (800b33c <xTaskResumeAll+0x130>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d010      	beq.n	800b2f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2d2:	f000 f837 	bl	800b344 <xTaskIncrementTick>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b2dc:	4b16      	ldr	r3, [pc, #88]	; (800b338 <xTaskResumeAll+0x12c>)
 800b2de:	2201      	movs	r2, #1
 800b2e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1f1      	bne.n	800b2d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b2ee:	4b13      	ldr	r3, [pc, #76]	; (800b33c <xTaskResumeAll+0x130>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2f4:	4b10      	ldr	r3, [pc, #64]	; (800b338 <xTaskResumeAll+0x12c>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d009      	beq.n	800b310 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b300:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <xTaskResumeAll+0x134>)
 800b302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	f3bf 8f4f 	dsb	sy
 800b30c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b310:	f000 fe68 	bl	800bfe4 <vPortExitCritical>

	return xAlreadyYielded;
 800b314:	68bb      	ldr	r3, [r7, #8]
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	2000055c 	.word	0x2000055c
 800b324:	20000534 	.word	0x20000534
 800b328:	200004f4 	.word	0x200004f4
 800b32c:	2000053c 	.word	0x2000053c
 800b330:	20000438 	.word	0x20000438
 800b334:	20000434 	.word	0x20000434
 800b338:	20000548 	.word	0x20000548
 800b33c:	20000544 	.word	0x20000544
 800b340:	e000ed04 	.word	0xe000ed04

0800b344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b34a:	2300      	movs	r3, #0
 800b34c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b34e:	4b50      	ldr	r3, [pc, #320]	; (800b490 <xTaskIncrementTick+0x14c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f040 808c 	bne.w	800b470 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b358:	4b4e      	ldr	r3, [pc, #312]	; (800b494 <xTaskIncrementTick+0x150>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3301      	adds	r3, #1
 800b35e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b360:	4a4c      	ldr	r2, [pc, #304]	; (800b494 <xTaskIncrementTick+0x150>)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d11f      	bne.n	800b3ac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b36c:	4b4a      	ldr	r3, [pc, #296]	; (800b498 <xTaskIncrementTick+0x154>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d009      	beq.n	800b38a <xTaskIncrementTick+0x46>
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	603b      	str	r3, [r7, #0]
 800b388:	e7fe      	b.n	800b388 <xTaskIncrementTick+0x44>
 800b38a:	4b43      	ldr	r3, [pc, #268]	; (800b498 <xTaskIncrementTick+0x154>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60fb      	str	r3, [r7, #12]
 800b390:	4b42      	ldr	r3, [pc, #264]	; (800b49c <xTaskIncrementTick+0x158>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a40      	ldr	r2, [pc, #256]	; (800b498 <xTaskIncrementTick+0x154>)
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	4a40      	ldr	r2, [pc, #256]	; (800b49c <xTaskIncrementTick+0x158>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6013      	str	r3, [r2, #0]
 800b39e:	4b40      	ldr	r3, [pc, #256]	; (800b4a0 <xTaskIncrementTick+0x15c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	4a3e      	ldr	r2, [pc, #248]	; (800b4a0 <xTaskIncrementTick+0x15c>)
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	f000 fa9c 	bl	800b8e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3ac:	4b3d      	ldr	r3, [pc, #244]	; (800b4a4 <xTaskIncrementTick+0x160>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d34d      	bcc.n	800b452 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3b6:	4b38      	ldr	r3, [pc, #224]	; (800b498 <xTaskIncrementTick+0x154>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <xTaskIncrementTick+0x80>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e000      	b.n	800b3c6 <xTaskIncrementTick+0x82>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ca:	4b36      	ldr	r3, [pc, #216]	; (800b4a4 <xTaskIncrementTick+0x160>)
 800b3cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d0:	601a      	str	r2, [r3, #0]
					break;
 800b3d2:	e03e      	b.n	800b452 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b3d4:	4b30      	ldr	r3, [pc, #192]	; (800b498 <xTaskIncrementTick+0x154>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d203      	bcs.n	800b3f4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3ec:	4a2d      	ldr	r2, [pc, #180]	; (800b4a4 <xTaskIncrementTick+0x160>)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6013      	str	r3, [r2, #0]
						break;
 800b3f2:	e02e      	b.n	800b452 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fe ff08 	bl	800a20e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b402:	2b00      	cmp	r3, #0
 800b404:	d004      	beq.n	800b410 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	3318      	adds	r3, #24
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe feff 	bl	800a20e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b414:	2201      	movs	r2, #1
 800b416:	409a      	lsls	r2, r3
 800b418:	4b23      	ldr	r3, [pc, #140]	; (800b4a8 <xTaskIncrementTick+0x164>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	4a22      	ldr	r2, [pc, #136]	; (800b4a8 <xTaskIncrementTick+0x164>)
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b426:	4613      	mov	r3, r2
 800b428:	009b      	lsls	r3, r3, #2
 800b42a:	4413      	add	r3, r2
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4a1f      	ldr	r2, [pc, #124]	; (800b4ac <xTaskIncrementTick+0x168>)
 800b430:	441a      	add	r2, r3
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	3304      	adds	r3, #4
 800b436:	4619      	mov	r1, r3
 800b438:	4610      	mov	r0, r2
 800b43a:	f7fe fe8d 	bl	800a158 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b442:	4b1b      	ldr	r3, [pc, #108]	; (800b4b0 <xTaskIncrementTick+0x16c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b448:	429a      	cmp	r2, r3
 800b44a:	d3b4      	bcc.n	800b3b6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b450:	e7b1      	b.n	800b3b6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b452:	4b17      	ldr	r3, [pc, #92]	; (800b4b0 <xTaskIncrementTick+0x16c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4914      	ldr	r1, [pc, #80]	; (800b4ac <xTaskIncrementTick+0x168>)
 800b45a:	4613      	mov	r3, r2
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	440b      	add	r3, r1
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d907      	bls.n	800b47a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800b46a:	2301      	movs	r3, #1
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	e004      	b.n	800b47a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b470:	4b10      	ldr	r3, [pc, #64]	; (800b4b4 <xTaskIncrementTick+0x170>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3301      	adds	r3, #1
 800b476:	4a0f      	ldr	r2, [pc, #60]	; (800b4b4 <xTaskIncrementTick+0x170>)
 800b478:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b47a:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <xTaskIncrementTick+0x174>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800b482:	2301      	movs	r3, #1
 800b484:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b486:	697b      	ldr	r3, [r7, #20]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}
 800b490:	2000055c 	.word	0x2000055c
 800b494:	20000538 	.word	0x20000538
 800b498:	200004ec 	.word	0x200004ec
 800b49c:	200004f0 	.word	0x200004f0
 800b4a0:	2000054c 	.word	0x2000054c
 800b4a4:	20000554 	.word	0x20000554
 800b4a8:	2000053c 	.word	0x2000053c
 800b4ac:	20000438 	.word	0x20000438
 800b4b0:	20000434 	.word	0x20000434
 800b4b4:	20000544 	.word	0x20000544
 800b4b8:	20000548 	.word	0x20000548

0800b4bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4c2:	4b26      	ldr	r3, [pc, #152]	; (800b55c <vTaskSwitchContext+0xa0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4ca:	4b25      	ldr	r3, [pc, #148]	; (800b560 <vTaskSwitchContext+0xa4>)
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4d0:	e03e      	b.n	800b550 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b4d2:	4b23      	ldr	r3, [pc, #140]	; (800b560 <vTaskSwitchContext+0xa4>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b4d8:	4b22      	ldr	r3, [pc, #136]	; (800b564 <vTaskSwitchContext+0xa8>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	fab3 f383 	clz	r3, r3
 800b4e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b4e6:	7afb      	ldrb	r3, [r7, #11]
 800b4e8:	f1c3 031f 	rsb	r3, r3, #31
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	491e      	ldr	r1, [pc, #120]	; (800b568 <vTaskSwitchContext+0xac>)
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d109      	bne.n	800b516 <vTaskSwitchContext+0x5a>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	607b      	str	r3, [r7, #4]
 800b514:	e7fe      	b.n	800b514 <vTaskSwitchContext+0x58>
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4a11      	ldr	r2, [pc, #68]	; (800b568 <vTaskSwitchContext+0xac>)
 800b522:	4413      	add	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	605a      	str	r2, [r3, #4]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	3308      	adds	r3, #8
 800b538:	429a      	cmp	r2, r3
 800b53a:	d104      	bne.n	800b546 <vTaskSwitchContext+0x8a>
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	605a      	str	r2, [r3, #4]
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	4a07      	ldr	r2, [pc, #28]	; (800b56c <vTaskSwitchContext+0xb0>)
 800b54e:	6013      	str	r3, [r2, #0]
}
 800b550:	bf00      	nop
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	bc80      	pop	{r7}
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	2000055c 	.word	0x2000055c
 800b560:	20000548 	.word	0x20000548
 800b564:	2000053c 	.word	0x2000053c
 800b568:	20000438 	.word	0x20000438
 800b56c:	20000434 	.word	0x20000434

0800b570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d109      	bne.n	800b594 <vTaskPlaceOnEventList+0x24>
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e7fe      	b.n	800b592 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b594:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <vTaskPlaceOnEventList+0x44>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3318      	adds	r3, #24
 800b59a:	4619      	mov	r1, r3
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7fe fdfe 	bl	800a19e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	6838      	ldr	r0, [r7, #0]
 800b5a6:	f000 fb9b 	bl	800bce0 <prvAddCurrentTaskToDelayedList>
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20000434 	.word	0x20000434

0800b5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	68db      	ldr	r3, [r3, #12]
 800b5c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d109      	bne.n	800b5e2 <xTaskRemoveFromEventList+0x2a>
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e7fe      	b.n	800b5e0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	3318      	adds	r3, #24
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7fe fe11 	bl	800a20e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5ec:	4b1d      	ldr	r3, [pc, #116]	; (800b664 <xTaskRemoveFromEventList+0xac>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d11c      	bne.n	800b62e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f7fe fe08 	bl	800a20e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5fe:	693b      	ldr	r3, [r7, #16]
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	2201      	movs	r2, #1
 800b604:	409a      	lsls	r2, r3
 800b606:	4b18      	ldr	r3, [pc, #96]	; (800b668 <xTaskRemoveFromEventList+0xb0>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4313      	orrs	r3, r2
 800b60c:	4a16      	ldr	r2, [pc, #88]	; (800b668 <xTaskRemoveFromEventList+0xb0>)
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b614:	4613      	mov	r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	4413      	add	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4a13      	ldr	r2, [pc, #76]	; (800b66c <xTaskRemoveFromEventList+0xb4>)
 800b61e:	441a      	add	r2, r3
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	4610      	mov	r0, r2
 800b628:	f7fe fd96 	bl	800a158 <vListInsertEnd>
 800b62c:	e005      	b.n	800b63a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3318      	adds	r3, #24
 800b632:	4619      	mov	r1, r3
 800b634:	480e      	ldr	r0, [pc, #56]	; (800b670 <xTaskRemoveFromEventList+0xb8>)
 800b636:	f7fe fd8f 	bl	800a158 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63e:	4b0d      	ldr	r3, [pc, #52]	; (800b674 <xTaskRemoveFromEventList+0xbc>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b644:	429a      	cmp	r2, r3
 800b646:	d905      	bls.n	800b654 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b648:	2301      	movs	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b64c:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <xTaskRemoveFromEventList+0xc0>)
 800b64e:	2201      	movs	r2, #1
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	e001      	b.n	800b658 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800b654:	2300      	movs	r3, #0
 800b656:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b658:	697b      	ldr	r3, [r7, #20]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3718      	adds	r7, #24
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	2000055c 	.word	0x2000055c
 800b668:	2000053c 	.word	0x2000053c
 800b66c:	20000438 	.word	0x20000438
 800b670:	200004f4 	.word	0x200004f4
 800b674:	20000434 	.word	0x20000434
 800b678:	20000548 	.word	0x20000548

0800b67c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b684:	4b06      	ldr	r3, [pc, #24]	; (800b6a0 <vTaskInternalSetTimeOutState+0x24>)
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b68c:	4b05      	ldr	r3, [pc, #20]	; (800b6a4 <vTaskInternalSetTimeOutState+0x28>)
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	605a      	str	r2, [r3, #4]
}
 800b694:	bf00      	nop
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	bc80      	pop	{r7}
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	2000054c 	.word	0x2000054c
 800b6a4:	20000538 	.word	0x20000538

0800b6a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d109      	bne.n	800b6cc <xTaskCheckForTimeOut+0x24>
 800b6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6bc:	f383 8811 	msr	BASEPRI, r3
 800b6c0:	f3bf 8f6f 	isb	sy
 800b6c4:	f3bf 8f4f 	dsb	sy
 800b6c8:	613b      	str	r3, [r7, #16]
 800b6ca:	e7fe      	b.n	800b6ca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d109      	bne.n	800b6e6 <xTaskCheckForTimeOut+0x3e>
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60fb      	str	r3, [r7, #12]
 800b6e4:	e7fe      	b.n	800b6e4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800b6e6:	f000 fc4f 	bl	800bf88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6ea:	4b1d      	ldr	r3, [pc, #116]	; (800b760 <xTaskCheckForTimeOut+0xb8>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b702:	d102      	bne.n	800b70a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
 800b708:	e023      	b.n	800b752 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	4b15      	ldr	r3, [pc, #84]	; (800b764 <xTaskCheckForTimeOut+0xbc>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	429a      	cmp	r2, r3
 800b714:	d007      	beq.n	800b726 <xTaskCheckForTimeOut+0x7e>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	69ba      	ldr	r2, [r7, #24]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d302      	bcc.n	800b726 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b720:	2301      	movs	r3, #1
 800b722:	61fb      	str	r3, [r7, #28]
 800b724:	e015      	b.n	800b752 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d20b      	bcs.n	800b748 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff ff9d 	bl	800b67c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	61fb      	str	r3, [r7, #28]
 800b746:	e004      	b.n	800b752 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2200      	movs	r2, #0
 800b74c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b74e:	2301      	movs	r3, #1
 800b750:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b752:	f000 fc47 	bl	800bfe4 <vPortExitCritical>

	return xReturn;
 800b756:	69fb      	ldr	r3, [r7, #28]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3720      	adds	r7, #32
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20000538 	.word	0x20000538
 800b764:	2000054c 	.word	0x2000054c

0800b768 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b768:	b480      	push	{r7}
 800b76a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b76c:	4b03      	ldr	r3, [pc, #12]	; (800b77c <vTaskMissedYield+0x14>)
 800b76e:	2201      	movs	r2, #1
 800b770:	601a      	str	r2, [r3, #0]
}
 800b772:	bf00      	nop
 800b774:	46bd      	mov	sp, r7
 800b776:	bc80      	pop	{r7}
 800b778:	4770      	bx	lr
 800b77a:	bf00      	nop
 800b77c:	20000548 	.word	0x20000548

0800b780 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b788:	f000 f852 	bl	800b830 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b78c:	4b06      	ldr	r3, [pc, #24]	; (800b7a8 <prvIdleTask+0x28>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b01      	cmp	r3, #1
 800b792:	d9f9      	bls.n	800b788 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b794:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <prvIdleTask+0x2c>)
 800b796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7a4:	e7f0      	b.n	800b788 <prvIdleTask+0x8>
 800b7a6:	bf00      	nop
 800b7a8:	20000438 	.word	0x20000438
 800b7ac:	e000ed04 	.word	0xe000ed04

0800b7b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	607b      	str	r3, [r7, #4]
 800b7ba:	e00c      	b.n	800b7d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4a12      	ldr	r2, [pc, #72]	; (800b810 <prvInitialiseTaskLists+0x60>)
 800b7c8:	4413      	add	r3, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fc99 	bl	800a102 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	607b      	str	r3, [r7, #4]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b06      	cmp	r3, #6
 800b7da:	d9ef      	bls.n	800b7bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7dc:	480d      	ldr	r0, [pc, #52]	; (800b814 <prvInitialiseTaskLists+0x64>)
 800b7de:	f7fe fc90 	bl	800a102 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7e2:	480d      	ldr	r0, [pc, #52]	; (800b818 <prvInitialiseTaskLists+0x68>)
 800b7e4:	f7fe fc8d 	bl	800a102 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7e8:	480c      	ldr	r0, [pc, #48]	; (800b81c <prvInitialiseTaskLists+0x6c>)
 800b7ea:	f7fe fc8a 	bl	800a102 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7ee:	480c      	ldr	r0, [pc, #48]	; (800b820 <prvInitialiseTaskLists+0x70>)
 800b7f0:	f7fe fc87 	bl	800a102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7f4:	480b      	ldr	r0, [pc, #44]	; (800b824 <prvInitialiseTaskLists+0x74>)
 800b7f6:	f7fe fc84 	bl	800a102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7fa:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <prvInitialiseTaskLists+0x78>)
 800b7fc:	4a05      	ldr	r2, [pc, #20]	; (800b814 <prvInitialiseTaskLists+0x64>)
 800b7fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <prvInitialiseTaskLists+0x7c>)
 800b802:	4a05      	ldr	r2, [pc, #20]	; (800b818 <prvInitialiseTaskLists+0x68>)
 800b804:	601a      	str	r2, [r3, #0]
}
 800b806:	bf00      	nop
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20000438 	.word	0x20000438
 800b814:	200004c4 	.word	0x200004c4
 800b818:	200004d8 	.word	0x200004d8
 800b81c:	200004f4 	.word	0x200004f4
 800b820:	20000508 	.word	0x20000508
 800b824:	20000520 	.word	0x20000520
 800b828:	200004ec 	.word	0x200004ec
 800b82c:	200004f0 	.word	0x200004f0

0800b830 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b082      	sub	sp, #8
 800b834:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b836:	e019      	b.n	800b86c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b838:	f000 fba6 	bl	800bf88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b83c:	4b0f      	ldr	r3, [pc, #60]	; (800b87c <prvCheckTasksWaitingTermination+0x4c>)
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3304      	adds	r3, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fe fce0 	bl	800a20e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b84e:	4b0c      	ldr	r3, [pc, #48]	; (800b880 <prvCheckTasksWaitingTermination+0x50>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	3b01      	subs	r3, #1
 800b854:	4a0a      	ldr	r2, [pc, #40]	; (800b880 <prvCheckTasksWaitingTermination+0x50>)
 800b856:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <prvCheckTasksWaitingTermination+0x54>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	4a09      	ldr	r2, [pc, #36]	; (800b884 <prvCheckTasksWaitingTermination+0x54>)
 800b860:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b862:	f000 fbbf 	bl	800bfe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f80e 	bl	800b888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b86c:	4b05      	ldr	r3, [pc, #20]	; (800b884 <prvCheckTasksWaitingTermination+0x54>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e1      	bne.n	800b838 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20000508 	.word	0x20000508
 800b880:	20000534 	.word	0x20000534
 800b884:	2000051c 	.word	0x2000051c

0800b888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b896:	2b00      	cmp	r3, #0
 800b898:	d108      	bne.n	800b8ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 fd2a 	bl	800c2f8 <vPortFree>
				vPortFree( pxTCB );
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 fd27 	bl	800c2f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8aa:	e017      	b.n	800b8dc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d103      	bne.n	800b8be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fd1e 	bl	800c2f8 <vPortFree>
	}
 800b8bc:	e00e      	b.n	800b8dc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8c4:	2b02      	cmp	r3, #2
 800b8c6:	d009      	beq.n	800b8dc <prvDeleteTCB+0x54>
 800b8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	e7fe      	b.n	800b8da <prvDeleteTCB+0x52>
	}
 800b8dc:	bf00      	nop
 800b8de:	3710      	adds	r7, #16
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ea:	4b0e      	ldr	r3, [pc, #56]	; (800b924 <prvResetNextTaskUnblockTime+0x40>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <prvResetNextTaskUnblockTime+0x14>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	e000      	b.n	800b8fa <prvResetNextTaskUnblockTime+0x16>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d004      	beq.n	800b908 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8fe:	4b0a      	ldr	r3, [pc, #40]	; (800b928 <prvResetNextTaskUnblockTime+0x44>)
 800b900:	f04f 32ff 	mov.w	r2, #4294967295
 800b904:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b906:	e008      	b.n	800b91a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <prvResetNextTaskUnblockTime+0x40>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	4a04      	ldr	r2, [pc, #16]	; (800b928 <prvResetNextTaskUnblockTime+0x44>)
 800b918:	6013      	str	r3, [r2, #0]
}
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	bc80      	pop	{r7}
 800b922:	4770      	bx	lr
 800b924:	200004ec 	.word	0x200004ec
 800b928:	20000554 	.word	0x20000554

0800b92c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b932:	4b0b      	ldr	r3, [pc, #44]	; (800b960 <xTaskGetSchedulerState+0x34>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d102      	bne.n	800b940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b93a:	2301      	movs	r3, #1
 800b93c:	607b      	str	r3, [r7, #4]
 800b93e:	e008      	b.n	800b952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b940:	4b08      	ldr	r3, [pc, #32]	; (800b964 <xTaskGetSchedulerState+0x38>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d102      	bne.n	800b94e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b948:	2302      	movs	r3, #2
 800b94a:	607b      	str	r3, [r7, #4]
 800b94c:	e001      	b.n	800b952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b94e:	2300      	movs	r3, #0
 800b950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b952:	687b      	ldr	r3, [r7, #4]
	}
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	bc80      	pop	{r7}
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	20000540 	.word	0x20000540
 800b964:	2000055c 	.word	0x2000055c

0800b968 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b084      	sub	sp, #16
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b974:	2300      	movs	r3, #0
 800b976:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d06e      	beq.n	800ba5c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b982:	4b39      	ldr	r3, [pc, #228]	; (800ba68 <xTaskPriorityInherit+0x100>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b988:	429a      	cmp	r2, r3
 800b98a:	d25e      	bcs.n	800ba4a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	699b      	ldr	r3, [r3, #24]
 800b990:	2b00      	cmp	r3, #0
 800b992:	db06      	blt.n	800b9a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b994:	4b34      	ldr	r3, [pc, #208]	; (800ba68 <xTaskPriorityInherit+0x100>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99a:	f1c3 0207 	rsb	r2, r3, #7
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	6959      	ldr	r1, [r3, #20]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4a2e      	ldr	r2, [pc, #184]	; (800ba6c <xTaskPriorityInherit+0x104>)
 800b9b4:	4413      	add	r3, r2
 800b9b6:	4299      	cmp	r1, r3
 800b9b8:	d101      	bne.n	800b9be <xTaskPriorityInherit+0x56>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e000      	b.n	800b9c0 <xTaskPriorityInherit+0x58>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d03a      	beq.n	800ba3a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fc20 	bl	800a20e <uxListRemove>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d115      	bne.n	800ba00 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d8:	4924      	ldr	r1, [pc, #144]	; (800ba6c <xTaskPriorityInherit+0x104>)
 800b9da:	4613      	mov	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	440b      	add	r3, r1
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10a      	bne.n	800ba00 <xTaskPriorityInherit+0x98>
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f4:	43da      	mvns	r2, r3
 800b9f6:	4b1e      	ldr	r3, [pc, #120]	; (800ba70 <xTaskPriorityInherit+0x108>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	4a1c      	ldr	r2, [pc, #112]	; (800ba70 <xTaskPriorityInherit+0x108>)
 800b9fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba00:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <xTaskPriorityInherit+0x100>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	2201      	movs	r2, #1
 800ba10:	409a      	lsls	r2, r3
 800ba12:	4b17      	ldr	r3, [pc, #92]	; (800ba70 <xTaskPriorityInherit+0x108>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4313      	orrs	r3, r2
 800ba18:	4a15      	ldr	r2, [pc, #84]	; (800ba70 <xTaskPriorityInherit+0x108>)
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba20:	4613      	mov	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4413      	add	r3, r2
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	4a10      	ldr	r2, [pc, #64]	; (800ba6c <xTaskPriorityInherit+0x104>)
 800ba2a:	441a      	add	r2, r3
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	3304      	adds	r3, #4
 800ba30:	4619      	mov	r1, r3
 800ba32:	4610      	mov	r0, r2
 800ba34:	f7fe fb90 	bl	800a158 <vListInsertEnd>
 800ba38:	e004      	b.n	800ba44 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba3a:	4b0b      	ldr	r3, [pc, #44]	; (800ba68 <xTaskPriorityInherit+0x100>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ba44:	2301      	movs	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	e008      	b.n	800ba5c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba4e:	4b06      	ldr	r3, [pc, #24]	; (800ba68 <xTaskPriorityInherit+0x100>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d201      	bcs.n	800ba5c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20000434 	.word	0x20000434
 800ba6c:	20000438 	.word	0x20000438
 800ba70:	2000053c 	.word	0x2000053c

0800ba74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b086      	sub	sp, #24
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba80:	2300      	movs	r3, #0
 800ba82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d06c      	beq.n	800bb64 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba8a:	4b39      	ldr	r3, [pc, #228]	; (800bb70 <xTaskPriorityDisinherit+0xfc>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d009      	beq.n	800baa8 <xTaskPriorityDisinherit+0x34>
 800ba94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba98:	f383 8811 	msr	BASEPRI, r3
 800ba9c:	f3bf 8f6f 	isb	sy
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	60fb      	str	r3, [r7, #12]
 800baa6:	e7fe      	b.n	800baa6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baac:	2b00      	cmp	r3, #0
 800baae:	d109      	bne.n	800bac4 <xTaskPriorityDisinherit+0x50>
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	f383 8811 	msr	BASEPRI, r3
 800bab8:	f3bf 8f6f 	isb	sy
 800babc:	f3bf 8f4f 	dsb	sy
 800bac0:	60bb      	str	r3, [r7, #8]
 800bac2:	e7fe      	b.n	800bac2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac8:	1e5a      	subs	r2, r3, #1
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d044      	beq.n	800bb64 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d140      	bne.n	800bb64 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	3304      	adds	r3, #4
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fb91 	bl	800a20e <uxListRemove>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d115      	bne.n	800bb1e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baf6:	491f      	ldr	r1, [pc, #124]	; (800bb74 <xTaskPriorityDisinherit+0x100>)
 800baf8:	4613      	mov	r3, r2
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	4413      	add	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	440b      	add	r3, r1
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <xTaskPriorityDisinherit+0xaa>
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb12:	43da      	mvns	r2, r3
 800bb14:	4b18      	ldr	r3, [pc, #96]	; (800bb78 <xTaskPriorityDisinherit+0x104>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4013      	ands	r3, r2
 800bb1a:	4a17      	ldr	r2, [pc, #92]	; (800bb78 <xTaskPriorityDisinherit+0x104>)
 800bb1c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	f1c3 0207 	rsb	r2, r3, #7
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb36:	2201      	movs	r2, #1
 800bb38:	409a      	lsls	r2, r3
 800bb3a:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <xTaskPriorityDisinherit+0x104>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	4a0d      	ldr	r2, [pc, #52]	; (800bb78 <xTaskPriorityDisinherit+0x104>)
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb48:	4613      	mov	r3, r2
 800bb4a:	009b      	lsls	r3, r3, #2
 800bb4c:	4413      	add	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4a08      	ldr	r2, [pc, #32]	; (800bb74 <xTaskPriorityDisinherit+0x100>)
 800bb52:	441a      	add	r2, r3
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	3304      	adds	r3, #4
 800bb58:	4619      	mov	r1, r3
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	f7fe fafc 	bl	800a158 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb60:	2301      	movs	r3, #1
 800bb62:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb64:	697b      	ldr	r3, [r7, #20]
	}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000434 	.word	0x20000434
 800bb74:	20000438 	.word	0x20000438
 800bb78:	2000053c 	.word	0x2000053c

0800bb7c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b088      	sub	sp, #32
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f000 8086 	beq.w	800bca2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d109      	bne.n	800bbb2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	e7fe      	b.n	800bbb0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d902      	bls.n	800bbc2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	61fb      	str	r3, [r7, #28]
 800bbc0:	e002      	b.n	800bbc8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	69fa      	ldr	r2, [r7, #28]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d067      	beq.n	800bca2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbd6:	697a      	ldr	r2, [r7, #20]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d162      	bne.n	800bca2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bbdc:	4b33      	ldr	r3, [pc, #204]	; (800bcac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	69ba      	ldr	r2, [r7, #24]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d109      	bne.n	800bbfa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800bbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	60bb      	str	r3, [r7, #8]
 800bbf8:	e7fe      	b.n	800bbf8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	69fa      	ldr	r2, [r7, #28]
 800bc04:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	db04      	blt.n	800bc18 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	f1c3 0207 	rsb	r2, r3, #7
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	6959      	ldr	r1, [r3, #20]
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	4a22      	ldr	r2, [pc, #136]	; (800bcb0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bc28:	4413      	add	r3, r2
 800bc2a:	4299      	cmp	r1, r3
 800bc2c:	d101      	bne.n	800bc32 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e000      	b.n	800bc34 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800bc32:	2300      	movs	r3, #0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d034      	beq.n	800bca2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc38:	69bb      	ldr	r3, [r7, #24]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fe fae6 	bl	800a20e <uxListRemove>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d115      	bne.n	800bc74 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4c:	4918      	ldr	r1, [pc, #96]	; (800bcb0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bc4e:	4613      	mov	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	009b      	lsls	r3, r3, #2
 800bc56:	440b      	add	r3, r1
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10a      	bne.n	800bc74 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800bc5e:	69bb      	ldr	r3, [r7, #24]
 800bc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc62:	2201      	movs	r2, #1
 800bc64:	fa02 f303 	lsl.w	r3, r2, r3
 800bc68:	43da      	mvns	r2, r3
 800bc6a:	4b12      	ldr	r3, [pc, #72]	; (800bcb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4013      	ands	r3, r2
 800bc70:	4a10      	ldr	r2, [pc, #64]	; (800bcb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bc72:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc78:	2201      	movs	r2, #1
 800bc7a:	409a      	lsls	r2, r3
 800bc7c:	4b0d      	ldr	r3, [pc, #52]	; (800bcb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	4a0c      	ldr	r2, [pc, #48]	; (800bcb4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4a07      	ldr	r2, [pc, #28]	; (800bcb0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800bc94:	441a      	add	r2, r3
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	f7fe fa5b 	bl	800a158 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bca2:	bf00      	nop
 800bca4:	3720      	adds	r7, #32
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	20000434 	.word	0x20000434
 800bcb0:	20000438 	.word	0x20000438
 800bcb4:	2000053c 	.word	0x2000053c

0800bcb8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bcbc:	4b07      	ldr	r3, [pc, #28]	; (800bcdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d004      	beq.n	800bcce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bcc4:	4b05      	ldr	r3, [pc, #20]	; (800bcdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bcca:	3201      	adds	r2, #1
 800bccc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bcce:	4b03      	ldr	r3, [pc, #12]	; (800bcdc <pvTaskIncrementMutexHeldCount+0x24>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
	}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bc80      	pop	{r7}
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20000434 	.word	0x20000434

0800bce0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcea:	4b29      	ldr	r3, [pc, #164]	; (800bd90 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcf0:	4b28      	ldr	r3, [pc, #160]	; (800bd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	3304      	adds	r3, #4
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fa89 	bl	800a20e <uxListRemove>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10b      	bne.n	800bd1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800bd02:	4b24      	ldr	r3, [pc, #144]	; (800bd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd08:	2201      	movs	r2, #1
 800bd0a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd0e:	43da      	mvns	r2, r3
 800bd10:	4b21      	ldr	r3, [pc, #132]	; (800bd98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4013      	ands	r3, r2
 800bd16:	4a20      	ldr	r2, [pc, #128]	; (800bd98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bd18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd20:	d10a      	bne.n	800bd38 <prvAddCurrentTaskToDelayedList+0x58>
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d007      	beq.n	800bd38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd28:	4b1a      	ldr	r3, [pc, #104]	; (800bd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3304      	adds	r3, #4
 800bd2e:	4619      	mov	r1, r3
 800bd30:	481a      	ldr	r0, [pc, #104]	; (800bd9c <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd32:	f7fe fa11 	bl	800a158 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd36:	e026      	b.n	800bd86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd40:	4b14      	ldr	r3, [pc, #80]	; (800bd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	68ba      	ldr	r2, [r7, #8]
 800bd46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d209      	bcs.n	800bd64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd50:	4b13      	ldr	r3, [pc, #76]	; (800bda0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	4b0f      	ldr	r3, [pc, #60]	; (800bd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	f7fe fa1e 	bl	800a19e <vListInsert>
}
 800bd62:	e010      	b.n	800bd86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd64:	4b0f      	ldr	r3, [pc, #60]	; (800bda4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4610      	mov	r0, r2
 800bd72:	f7fe fa14 	bl	800a19e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd76:	4b0c      	ldr	r3, [pc, #48]	; (800bda8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d202      	bcs.n	800bd86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd80:	4a09      	ldr	r2, [pc, #36]	; (800bda8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6013      	str	r3, [r2, #0]
}
 800bd86:	bf00      	nop
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	20000538 	.word	0x20000538
 800bd94:	20000434 	.word	0x20000434
 800bd98:	2000053c 	.word	0x2000053c
 800bd9c:	20000520 	.word	0x20000520
 800bda0:	200004f0 	.word	0x200004f0
 800bda4:	200004ec 	.word	0x200004ec
 800bda8:	20000554 	.word	0x20000554

0800bdac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3b04      	subs	r3, #4
 800bdbc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bdc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3b04      	subs	r3, #4
 800bdca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f023 0201 	bic.w	r2, r3, #1
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3b04      	subs	r3, #4
 800bdda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bddc:	4a08      	ldr	r2, [pc, #32]	; (800be00 <pxPortInitialiseStack+0x54>)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3b14      	subs	r3, #20
 800bde6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	3b20      	subs	r3, #32
 800bdf2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bc80      	pop	{r7}
 800bdfe:	4770      	bx	lr
 800be00:	0800be05 	.word	0x0800be05

0800be04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800be0a:	2300      	movs	r3, #0
 800be0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800be0e:	4b10      	ldr	r3, [pc, #64]	; (800be50 <prvTaskExitError+0x4c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be16:	d009      	beq.n	800be2c <prvTaskExitError+0x28>
 800be18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	60fb      	str	r3, [r7, #12]
 800be2a:	e7fe      	b.n	800be2a <prvTaskExitError+0x26>
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be3e:	bf00      	nop
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d0fc      	beq.n	800be40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be46:	bf00      	nop
 800be48:	3714      	adds	r7, #20
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bc80      	pop	{r7}
 800be4e:	4770      	bx	lr
 800be50:	20000130 	.word	0x20000130
	...

0800be60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be60:	4b07      	ldr	r3, [pc, #28]	; (800be80 <pxCurrentTCBConst2>)
 800be62:	6819      	ldr	r1, [r3, #0]
 800be64:	6808      	ldr	r0, [r1, #0]
 800be66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800be6a:	f380 8809 	msr	PSP, r0
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f04f 0000 	mov.w	r0, #0
 800be76:	f380 8811 	msr	BASEPRI, r0
 800be7a:	f04e 0e0d 	orr.w	lr, lr, #13
 800be7e:	4770      	bx	lr

0800be80 <pxCurrentTCBConst2>:
 800be80:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop

0800be88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800be88:	4806      	ldr	r0, [pc, #24]	; (800bea4 <prvPortStartFirstTask+0x1c>)
 800be8a:	6800      	ldr	r0, [r0, #0]
 800be8c:	6800      	ldr	r0, [r0, #0]
 800be8e:	f380 8808 	msr	MSP, r0
 800be92:	b662      	cpsie	i
 800be94:	b661      	cpsie	f
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	df00      	svc	0
 800bea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bea2:	bf00      	nop
 800bea4:	e000ed08 	.word	0xe000ed08

0800bea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beae:	4b31      	ldr	r3, [pc, #196]	; (800bf74 <xPortStartScheduler+0xcc>)
 800beb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	22ff      	movs	r2, #255	; 0xff
 800bebe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bec8:	78fb      	ldrb	r3, [r7, #3]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	4b29      	ldr	r3, [pc, #164]	; (800bf78 <xPortStartScheduler+0xd0>)
 800bed4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bed6:	4b29      	ldr	r3, [pc, #164]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bed8:	2207      	movs	r2, #7
 800beda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bedc:	e009      	b.n	800bef2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bede:	4b27      	ldr	r3, [pc, #156]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	4a25      	ldr	r2, [pc, #148]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bee6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bee8:	78fb      	ldrb	r3, [r7, #3]
 800beea:	b2db      	uxtb	r3, r3
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bef2:	78fb      	ldrb	r3, [r7, #3]
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800befa:	2b80      	cmp	r3, #128	; 0x80
 800befc:	d0ef      	beq.n	800bede <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800befe:	4b1f      	ldr	r3, [pc, #124]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f1c3 0307 	rsb	r3, r3, #7
 800bf06:	2b04      	cmp	r3, #4
 800bf08:	d009      	beq.n	800bf1e <xPortStartScheduler+0x76>
 800bf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0e:	f383 8811 	msr	BASEPRI, r3
 800bf12:	f3bf 8f6f 	isb	sy
 800bf16:	f3bf 8f4f 	dsb	sy
 800bf1a:	60bb      	str	r3, [r7, #8]
 800bf1c:	e7fe      	b.n	800bf1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf1e:	4b17      	ldr	r3, [pc, #92]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	021b      	lsls	r3, r3, #8
 800bf24:	4a15      	ldr	r2, [pc, #84]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bf26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf28:	4b14      	ldr	r3, [pc, #80]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bf30:	4a12      	ldr	r2, [pc, #72]	; (800bf7c <xPortStartScheduler+0xd4>)
 800bf32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf3c:	4b10      	ldr	r3, [pc, #64]	; (800bf80 <xPortStartScheduler+0xd8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a0f      	ldr	r2, [pc, #60]	; (800bf80 <xPortStartScheduler+0xd8>)
 800bf42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bf46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf48:	4b0d      	ldr	r3, [pc, #52]	; (800bf80 <xPortStartScheduler+0xd8>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4a0c      	ldr	r2, [pc, #48]	; (800bf80 <xPortStartScheduler+0xd8>)
 800bf4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bf52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf54:	f000 f8b0 	bl	800c0b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf58:	4b0a      	ldr	r3, [pc, #40]	; (800bf84 <xPortStartScheduler+0xdc>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bf5e:	f7ff ff93 	bl	800be88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bf62:	f7ff faab 	bl	800b4bc <vTaskSwitchContext>
	prvTaskExitError();
 800bf66:	f7ff ff4d 	bl	800be04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	e000e400 	.word	0xe000e400
 800bf78:	20000560 	.word	0x20000560
 800bf7c:	20000564 	.word	0x20000564
 800bf80:	e000ed20 	.word	0xe000ed20
 800bf84:	20000130 	.word	0x20000130

0800bf88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bfa0:	4b0e      	ldr	r3, [pc, #56]	; (800bfdc <vPortEnterCritical+0x54>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <vPortEnterCritical+0x54>)
 800bfa8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bfaa:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <vPortEnterCritical+0x54>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d10e      	bne.n	800bfd0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bfb2:	4b0b      	ldr	r3, [pc, #44]	; (800bfe0 <vPortEnterCritical+0x58>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d009      	beq.n	800bfd0 <vPortEnterCritical+0x48>
 800bfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc0:	f383 8811 	msr	BASEPRI, r3
 800bfc4:	f3bf 8f6f 	isb	sy
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	603b      	str	r3, [r7, #0]
 800bfce:	e7fe      	b.n	800bfce <vPortEnterCritical+0x46>
	}
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	20000130 	.word	0x20000130
 800bfe0:	e000ed04 	.word	0xe000ed04

0800bfe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bfea:	4b10      	ldr	r3, [pc, #64]	; (800c02c <vPortExitCritical+0x48>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d109      	bne.n	800c006 <vPortExitCritical+0x22>
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	f383 8811 	msr	BASEPRI, r3
 800bffa:	f3bf 8f6f 	isb	sy
 800bffe:	f3bf 8f4f 	dsb	sy
 800c002:	607b      	str	r3, [r7, #4]
 800c004:	e7fe      	b.n	800c004 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c006:	4b09      	ldr	r3, [pc, #36]	; (800c02c <vPortExitCritical+0x48>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3b01      	subs	r3, #1
 800c00c:	4a07      	ldr	r2, [pc, #28]	; (800c02c <vPortExitCritical+0x48>)
 800c00e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c010:	4b06      	ldr	r3, [pc, #24]	; (800c02c <vPortExitCritical+0x48>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d104      	bne.n	800c022 <vPortExitCritical+0x3e>
 800c018:	2300      	movs	r3, #0
 800c01a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c022:	bf00      	nop
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	bc80      	pop	{r7}
 800c02a:	4770      	bx	lr
 800c02c:	20000130 	.word	0x20000130

0800c030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c030:	f3ef 8009 	mrs	r0, PSP
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <pxCurrentTCBConst>)
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c040:	6010      	str	r0, [r2, #0]
 800c042:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c046:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c04a:	f380 8811 	msr	BASEPRI, r0
 800c04e:	f7ff fa35 	bl	800b4bc <vTaskSwitchContext>
 800c052:	f04f 0000 	mov.w	r0, #0
 800c056:	f380 8811 	msr	BASEPRI, r0
 800c05a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c05e:	6819      	ldr	r1, [r3, #0]
 800c060:	6808      	ldr	r0, [r1, #0]
 800c062:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c066:	f380 8809 	msr	PSP, r0
 800c06a:	f3bf 8f6f 	isb	sy
 800c06e:	4770      	bx	lr

0800c070 <pxCurrentTCBConst>:
 800c070:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop

0800c078 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c090:	f7ff f958 	bl	800b344 <xTaskIncrementTick>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c09a:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <SysTick_Handler+0x3c>)
 800c09c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c0ac:	bf00      	nop
 800c0ae:	3708      	adds	r7, #8
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	e000ed04 	.word	0xe000ed04

0800c0b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c0bc:	4b0a      	ldr	r3, [pc, #40]	; (800c0e8 <vPortSetupTimerInterrupt+0x30>)
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c0c2:	4b0a      	ldr	r3, [pc, #40]	; (800c0ec <vPortSetupTimerInterrupt+0x34>)
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c0c8:	4b09      	ldr	r3, [pc, #36]	; (800c0f0 <vPortSetupTimerInterrupt+0x38>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a09      	ldr	r2, [pc, #36]	; (800c0f4 <vPortSetupTimerInterrupt+0x3c>)
 800c0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c0d2:	099b      	lsrs	r3, r3, #6
 800c0d4:	4a08      	ldr	r2, [pc, #32]	; (800c0f8 <vPortSetupTimerInterrupt+0x40>)
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0da:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <vPortSetupTimerInterrupt+0x30>)
 800c0dc:	2207      	movs	r2, #7
 800c0de:	601a      	str	r2, [r3, #0]
}
 800c0e0:	bf00      	nop
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bc80      	pop	{r7}
 800c0e6:	4770      	bx	lr
 800c0e8:	e000e010 	.word	0xe000e010
 800c0ec:	e000e018 	.word	0xe000e018
 800c0f0:	20000000 	.word	0x20000000
 800c0f4:	10624dd3 	.word	0x10624dd3
 800c0f8:	e000e014 	.word	0xe000e014

0800c0fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c102:	f3ef 8305 	mrs	r3, IPSR
 800c106:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b0f      	cmp	r3, #15
 800c10c:	d913      	bls.n	800c136 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c10e:	4a15      	ldr	r2, [pc, #84]	; (800c164 <vPortValidateInterruptPriority+0x68>)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	4413      	add	r3, r2
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c118:	4b13      	ldr	r3, [pc, #76]	; (800c168 <vPortValidateInterruptPriority+0x6c>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	7afa      	ldrb	r2, [r7, #11]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d209      	bcs.n	800c136 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	f383 8811 	msr	BASEPRI, r3
 800c12a:	f3bf 8f6f 	isb	sy
 800c12e:	f3bf 8f4f 	dsb	sy
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	e7fe      	b.n	800c134 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c136:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <vPortValidateInterruptPriority+0x70>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <vPortValidateInterruptPriority+0x74>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	d909      	bls.n	800c15a <vPortValidateInterruptPriority+0x5e>
 800c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	603b      	str	r3, [r7, #0]
 800c158:	e7fe      	b.n	800c158 <vPortValidateInterruptPriority+0x5c>
	}
 800c15a:	bf00      	nop
 800c15c:	3714      	adds	r7, #20
 800c15e:	46bd      	mov	sp, r7
 800c160:	bc80      	pop	{r7}
 800c162:	4770      	bx	lr
 800c164:	e000e3f0 	.word	0xe000e3f0
 800c168:	20000560 	.word	0x20000560
 800c16c:	e000ed0c 	.word	0xe000ed0c
 800c170:	20000564 	.word	0x20000564

0800c174 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b08a      	sub	sp, #40	; 0x28
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c180:	f7ff f836 	bl	800b1f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c184:	4b57      	ldr	r3, [pc, #348]	; (800c2e4 <pvPortMalloc+0x170>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c18c:	f000 f90c 	bl	800c3a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c190:	4b55      	ldr	r3, [pc, #340]	; (800c2e8 <pvPortMalloc+0x174>)
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4013      	ands	r3, r2
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f040 808c 	bne.w	800c2b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d01c      	beq.n	800c1de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c1a4:	2208      	movs	r2, #8
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f003 0307 	and.w	r3, r3, #7
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d013      	beq.n	800c1de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f023 0307 	bic.w	r3, r3, #7
 800c1bc:	3308      	adds	r3, #8
 800c1be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f003 0307 	and.w	r3, r3, #7
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d009      	beq.n	800c1de <pvPortMalloc+0x6a>
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	617b      	str	r3, [r7, #20]
 800c1dc:	e7fe      	b.n	800c1dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d068      	beq.n	800c2b6 <pvPortMalloc+0x142>
 800c1e4:	4b41      	ldr	r3, [pc, #260]	; (800c2ec <pvPortMalloc+0x178>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d863      	bhi.n	800c2b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1ee:	4b40      	ldr	r3, [pc, #256]	; (800c2f0 <pvPortMalloc+0x17c>)
 800c1f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1f2:	4b3f      	ldr	r3, [pc, #252]	; (800c2f0 <pvPortMalloc+0x17c>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1f8:	e004      	b.n	800c204 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d903      	bls.n	800c216 <pvPortMalloc+0xa2>
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d1f1      	bne.n	800c1fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c216:	4b33      	ldr	r3, [pc, #204]	; (800c2e4 <pvPortMalloc+0x170>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d04a      	beq.n	800c2b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2208      	movs	r2, #8
 800c226:	4413      	add	r3, r2
 800c228:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22c:	681a      	ldr	r2, [r3, #0]
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	685a      	ldr	r2, [r3, #4]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	1ad2      	subs	r2, r2, r3
 800c23a:	2308      	movs	r3, #8
 800c23c:	005b      	lsls	r3, r3, #1
 800c23e:	429a      	cmp	r2, r3
 800c240:	d91e      	bls.n	800c280 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c24a:	69bb      	ldr	r3, [r7, #24]
 800c24c:	f003 0307 	and.w	r3, r3, #7
 800c250:	2b00      	cmp	r3, #0
 800c252:	d009      	beq.n	800c268 <pvPortMalloc+0xf4>
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	f383 8811 	msr	BASEPRI, r3
 800c25c:	f3bf 8f6f 	isb	sy
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	613b      	str	r3, [r7, #16]
 800c266:	e7fe      	b.n	800c266 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	69bb      	ldr	r3, [r7, #24]
 800c272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c27a:	69b8      	ldr	r0, [r7, #24]
 800c27c:	f000 f8f6 	bl	800c46c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c280:	4b1a      	ldr	r3, [pc, #104]	; (800c2ec <pvPortMalloc+0x178>)
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	1ad3      	subs	r3, r2, r3
 800c28a:	4a18      	ldr	r2, [pc, #96]	; (800c2ec <pvPortMalloc+0x178>)
 800c28c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c28e:	4b17      	ldr	r3, [pc, #92]	; (800c2ec <pvPortMalloc+0x178>)
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	4b18      	ldr	r3, [pc, #96]	; (800c2f4 <pvPortMalloc+0x180>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	429a      	cmp	r2, r3
 800c298:	d203      	bcs.n	800c2a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c29a:	4b14      	ldr	r3, [pc, #80]	; (800c2ec <pvPortMalloc+0x178>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	4a15      	ldr	r2, [pc, #84]	; (800c2f4 <pvPortMalloc+0x180>)
 800c2a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a4:	685a      	ldr	r2, [r3, #4]
 800c2a6:	4b10      	ldr	r3, [pc, #64]	; (800c2e8 <pvPortMalloc+0x174>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2b6:	f7fe ffa9 	bl	800b20c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	f003 0307 	and.w	r3, r3, #7
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d009      	beq.n	800c2d8 <pvPortMalloc+0x164>
 800c2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e7fe      	b.n	800c2d6 <pvPortMalloc+0x162>
	return pvReturn;
 800c2d8:	69fb      	ldr	r3, [r7, #28]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3728      	adds	r7, #40	; 0x28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20001170 	.word	0x20001170
 800c2e8:	2000117c 	.word	0x2000117c
 800c2ec:	20001174 	.word	0x20001174
 800c2f0:	20001168 	.word	0x20001168
 800c2f4:	20001178 	.word	0x20001178

0800c2f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d046      	beq.n	800c398 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c30a:	2308      	movs	r3, #8
 800c30c:	425b      	negs	r3, r3
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	4413      	add	r3, r2
 800c312:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	4b20      	ldr	r3, [pc, #128]	; (800c3a0 <vPortFree+0xa8>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4013      	ands	r3, r2
 800c322:	2b00      	cmp	r3, #0
 800c324:	d109      	bne.n	800c33a <vPortFree+0x42>
 800c326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32a:	f383 8811 	msr	BASEPRI, r3
 800c32e:	f3bf 8f6f 	isb	sy
 800c332:	f3bf 8f4f 	dsb	sy
 800c336:	60fb      	str	r3, [r7, #12]
 800c338:	e7fe      	b.n	800c338 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d009      	beq.n	800c356 <vPortFree+0x5e>
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	60bb      	str	r3, [r7, #8]
 800c354:	e7fe      	b.n	800c354 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	4b11      	ldr	r3, [pc, #68]	; (800c3a0 <vPortFree+0xa8>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4013      	ands	r3, r2
 800c360:	2b00      	cmp	r3, #0
 800c362:	d019      	beq.n	800c398 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d115      	bne.n	800c398 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	685a      	ldr	r2, [r3, #4]
 800c370:	4b0b      	ldr	r3, [pc, #44]	; (800c3a0 <vPortFree+0xa8>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	43db      	mvns	r3, r3
 800c376:	401a      	ands	r2, r3
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c37c:	f7fe ff38 	bl	800b1f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	685a      	ldr	r2, [r3, #4]
 800c384:	4b07      	ldr	r3, [pc, #28]	; (800c3a4 <vPortFree+0xac>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4413      	add	r3, r2
 800c38a:	4a06      	ldr	r2, [pc, #24]	; (800c3a4 <vPortFree+0xac>)
 800c38c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c38e:	6938      	ldr	r0, [r7, #16]
 800c390:	f000 f86c 	bl	800c46c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c394:	f7fe ff3a 	bl	800b20c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c398:	bf00      	nop
 800c39a:	3718      	adds	r7, #24
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	2000117c 	.word	0x2000117c
 800c3a4:	20001174 	.word	0x20001174

0800c3a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c3b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3b4:	4b27      	ldr	r3, [pc, #156]	; (800c454 <prvHeapInit+0xac>)
 800c3b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f003 0307 	and.w	r3, r3, #7
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00c      	beq.n	800c3dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3307      	adds	r3, #7
 800c3c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	f023 0307 	bic.w	r3, r3, #7
 800c3ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	1ad3      	subs	r3, r2, r3
 800c3d6:	4a1f      	ldr	r2, [pc, #124]	; (800c454 <prvHeapInit+0xac>)
 800c3d8:	4413      	add	r3, r2
 800c3da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3e0:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <prvHeapInit+0xb0>)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c3e6:	4b1c      	ldr	r3, [pc, #112]	; (800c458 <prvHeapInit+0xb0>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c3f4:	2208      	movs	r2, #8
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f023 0307 	bic.w	r3, r3, #7
 800c402:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	4a15      	ldr	r2, [pc, #84]	; (800c45c <prvHeapInit+0xb4>)
 800c408:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c40a:	4b14      	ldr	r3, [pc, #80]	; (800c45c <prvHeapInit+0xb4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2200      	movs	r2, #0
 800c410:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c412:	4b12      	ldr	r3, [pc, #72]	; (800c45c <prvHeapInit+0xb4>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	1ad2      	subs	r2, r2, r3
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c428:	4b0c      	ldr	r3, [pc, #48]	; (800c45c <prvHeapInit+0xb4>)
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	4a0a      	ldr	r2, [pc, #40]	; (800c460 <prvHeapInit+0xb8>)
 800c436:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	4a09      	ldr	r2, [pc, #36]	; (800c464 <prvHeapInit+0xbc>)
 800c43e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c440:	4b09      	ldr	r3, [pc, #36]	; (800c468 <prvHeapInit+0xc0>)
 800c442:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c446:	601a      	str	r2, [r3, #0]
}
 800c448:	bf00      	nop
 800c44a:	3714      	adds	r7, #20
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bc80      	pop	{r7}
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	20000568 	.word	0x20000568
 800c458:	20001168 	.word	0x20001168
 800c45c:	20001170 	.word	0x20001170
 800c460:	20001178 	.word	0x20001178
 800c464:	20001174 	.word	0x20001174
 800c468:	2000117c 	.word	0x2000117c

0800c46c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c474:	4b27      	ldr	r3, [pc, #156]	; (800c514 <prvInsertBlockIntoFreeList+0xa8>)
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	e002      	b.n	800c480 <prvInsertBlockIntoFreeList+0x14>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	60fb      	str	r3, [r7, #12]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	429a      	cmp	r2, r3
 800c488:	d8f7      	bhi.n	800c47a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	4413      	add	r3, r2
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d108      	bne.n	800c4ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	441a      	add	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	441a      	add	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d118      	bne.n	800c4f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681a      	ldr	r2, [r3, #0]
 800c4c6:	4b14      	ldr	r3, [pc, #80]	; (800c518 <prvInsertBlockIntoFreeList+0xac>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d00d      	beq.n	800c4ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	441a      	add	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	601a      	str	r2, [r3, #0]
 800c4e8:	e008      	b.n	800c4fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c4ea:	4b0b      	ldr	r3, [pc, #44]	; (800c518 <prvInsertBlockIntoFreeList+0xac>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	e003      	b.n	800c4fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	429a      	cmp	r2, r3
 800c502:	d002      	beq.n	800c50a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c50a:	bf00      	nop
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	bc80      	pop	{r7}
 800c512:	4770      	bx	lr
 800c514:	20001168 	.word	0x20001168
 800c518:	20001170 	.word	0x20001170

0800c51c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c520:	2200      	movs	r2, #0
 800c522:	4912      	ldr	r1, [pc, #72]	; (800c56c <MX_USB_DEVICE_Init+0x50>)
 800c524:	4812      	ldr	r0, [pc, #72]	; (800c570 <MX_USB_DEVICE_Init+0x54>)
 800c526:	f7fb fe2d 	bl	8008184 <USBD_Init>
 800c52a:	4603      	mov	r3, r0
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c530:	f7f5 f8de 	bl	80016f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c534:	490f      	ldr	r1, [pc, #60]	; (800c574 <MX_USB_DEVICE_Init+0x58>)
 800c536:	480e      	ldr	r0, [pc, #56]	; (800c570 <MX_USB_DEVICE_Init+0x54>)
 800c538:	f7fb fe4f 	bl	80081da <USBD_RegisterClass>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c542:	f7f5 f8d5 	bl	80016f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c546:	490c      	ldr	r1, [pc, #48]	; (800c578 <MX_USB_DEVICE_Init+0x5c>)
 800c548:	4809      	ldr	r0, [pc, #36]	; (800c570 <MX_USB_DEVICE_Init+0x54>)
 800c54a:	f7fb fdaf 	bl	80080ac <USBD_CDC_RegisterInterface>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d001      	beq.n	800c558 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c554:	f7f5 f8cc 	bl	80016f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c558:	4805      	ldr	r0, [pc, #20]	; (800c570 <MX_USB_DEVICE_Init+0x54>)
 800c55a:	f7fb fe57 	bl	800820c <USBD_Start>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d001      	beq.n	800c568 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c564:	f7f5 f8c4 	bl	80016f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c568:	bf00      	nop
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	20000144 	.word	0x20000144
 800c570:	20001ba0 	.word	0x20001ba0
 800c574:	2000002c 	.word	0x2000002c
 800c578:	20000134 	.word	0x20000134

0800c57c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c580:	2200      	movs	r2, #0
 800c582:	4905      	ldr	r1, [pc, #20]	; (800c598 <CDC_Init_FS+0x1c>)
 800c584:	4805      	ldr	r0, [pc, #20]	; (800c59c <CDC_Init_FS+0x20>)
 800c586:	f7fb fda7 	bl	80080d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c58a:	4905      	ldr	r1, [pc, #20]	; (800c5a0 <CDC_Init_FS+0x24>)
 800c58c:	4803      	ldr	r0, [pc, #12]	; (800c59c <CDC_Init_FS+0x20>)
 800c58e:	f7fb fdbc 	bl	800810a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c592:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c594:	4618      	mov	r0, r3
 800c596:	bd80      	pop	{r7, pc}
 800c598:	2000224c 	.word	0x2000224c
 800c59c:	20001ba0 	.word	0x20001ba0
 800c5a0:	20001e64 	.word	0x20001e64

0800c5a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bc80      	pop	{r7}
 800c5b0:	4770      	bx	lr
	...

0800c5b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	6039      	str	r1, [r7, #0]
 800c5be:	71fb      	strb	r3, [r7, #7]
 800c5c0:	4613      	mov	r3, r2
 800c5c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c5c4:	79fb      	ldrb	r3, [r7, #7]
 800c5c6:	2b23      	cmp	r3, #35	; 0x23
 800c5c8:	d84a      	bhi.n	800c660 <CDC_Control_FS+0xac>
 800c5ca:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <CDC_Control_FS+0x1c>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c661 	.word	0x0800c661
 800c5d4:	0800c661 	.word	0x0800c661
 800c5d8:	0800c661 	.word	0x0800c661
 800c5dc:	0800c661 	.word	0x0800c661
 800c5e0:	0800c661 	.word	0x0800c661
 800c5e4:	0800c661 	.word	0x0800c661
 800c5e8:	0800c661 	.word	0x0800c661
 800c5ec:	0800c661 	.word	0x0800c661
 800c5f0:	0800c661 	.word	0x0800c661
 800c5f4:	0800c661 	.word	0x0800c661
 800c5f8:	0800c661 	.word	0x0800c661
 800c5fc:	0800c661 	.word	0x0800c661
 800c600:	0800c661 	.word	0x0800c661
 800c604:	0800c661 	.word	0x0800c661
 800c608:	0800c661 	.word	0x0800c661
 800c60c:	0800c661 	.word	0x0800c661
 800c610:	0800c661 	.word	0x0800c661
 800c614:	0800c661 	.word	0x0800c661
 800c618:	0800c661 	.word	0x0800c661
 800c61c:	0800c661 	.word	0x0800c661
 800c620:	0800c661 	.word	0x0800c661
 800c624:	0800c661 	.word	0x0800c661
 800c628:	0800c661 	.word	0x0800c661
 800c62c:	0800c661 	.word	0x0800c661
 800c630:	0800c661 	.word	0x0800c661
 800c634:	0800c661 	.word	0x0800c661
 800c638:	0800c661 	.word	0x0800c661
 800c63c:	0800c661 	.word	0x0800c661
 800c640:	0800c661 	.word	0x0800c661
 800c644:	0800c661 	.word	0x0800c661
 800c648:	0800c661 	.word	0x0800c661
 800c64c:	0800c661 	.word	0x0800c661
 800c650:	0800c661 	.word	0x0800c661
 800c654:	0800c661 	.word	0x0800c661
 800c658:	0800c661 	.word	0x0800c661
 800c65c:	0800c661 	.word	0x0800c661
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c660:	bf00      	nop
  }

  return (USBD_OK);
 800c662:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c664:	4618      	mov	r0, r3
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	bc80      	pop	{r7}
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop

0800c670 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c67a:	6879      	ldr	r1, [r7, #4]
 800c67c:	4805      	ldr	r0, [pc, #20]	; (800c694 <CDC_Receive_FS+0x24>)
 800c67e:	f7fb fd44 	bl	800810a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c682:	4804      	ldr	r0, [pc, #16]	; (800c694 <CDC_Receive_FS+0x24>)
 800c684:	f7fb fd54 	bl	8008130 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c688:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
 800c692:	bf00      	nop
 800c694:	20001ba0 	.word	0x20001ba0

0800c698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	6039      	str	r1, [r7, #0]
 800c6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2212      	movs	r2, #18
 800c6a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c6aa:	4b03      	ldr	r3, [pc, #12]	; (800c6b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	370c      	adds	r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bc80      	pop	{r7}
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	20000160 	.word	0x20000160

0800c6bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	6039      	str	r1, [r7, #0]
 800c6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2204      	movs	r2, #4
 800c6cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c6ce:	4b03      	ldr	r3, [pc, #12]	; (800c6dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bc80      	pop	{r7}
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	20000174 	.word	0x20000174

0800c6e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	6039      	str	r1, [r7, #0]
 800c6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d105      	bne.n	800c6fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	4907      	ldr	r1, [pc, #28]	; (800c714 <USBD_FS_ProductStrDescriptor+0x34>)
 800c6f6:	4808      	ldr	r0, [pc, #32]	; (800c718 <USBD_FS_ProductStrDescriptor+0x38>)
 800c6f8:	f7fc fcf3 	bl	80090e2 <USBD_GetString>
 800c6fc:	e004      	b.n	800c708 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	4904      	ldr	r1, [pc, #16]	; (800c714 <USBD_FS_ProductStrDescriptor+0x34>)
 800c702:	4805      	ldr	r0, [pc, #20]	; (800c718 <USBD_FS_ProductStrDescriptor+0x38>)
 800c704:	f7fc fced 	bl	80090e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c708:	4b02      	ldr	r3, [pc, #8]	; (800c714 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	20002634 	.word	0x20002634
 800c718:	0800cff4 	.word	0x0800cff4

0800c71c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	6039      	str	r1, [r7, #0]
 800c726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c728:	683a      	ldr	r2, [r7, #0]
 800c72a:	4904      	ldr	r1, [pc, #16]	; (800c73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c72c:	4804      	ldr	r0, [pc, #16]	; (800c740 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c72e:	f7fc fcd8 	bl	80090e2 <USBD_GetString>
  return USBD_StrDesc;
 800c732:	4b02      	ldr	r3, [pc, #8]	; (800c73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c734:	4618      	mov	r0, r3
 800c736:	3708      	adds	r7, #8
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	20002634 	.word	0x20002634
 800c740:	0800d00c 	.word	0x0800d00c

0800c744 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b082      	sub	sp, #8
 800c748:	af00      	add	r7, sp, #0
 800c74a:	4603      	mov	r3, r0
 800c74c:	6039      	str	r1, [r7, #0]
 800c74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	221a      	movs	r2, #26
 800c754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c756:	f000 f843 	bl	800c7e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c75a:	4b02      	ldr	r3, [pc, #8]	; (800c764 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20000178 	.word	0x20000178

0800c768 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	6039      	str	r1, [r7, #0]
 800c772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c774:	79fb      	ldrb	r3, [r7, #7]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d105      	bne.n	800c786 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c77a:	683a      	ldr	r2, [r7, #0]
 800c77c:	4907      	ldr	r1, [pc, #28]	; (800c79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c77e:	4808      	ldr	r0, [pc, #32]	; (800c7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c780:	f7fc fcaf 	bl	80090e2 <USBD_GetString>
 800c784:	e004      	b.n	800c790 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	4904      	ldr	r1, [pc, #16]	; (800c79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c78a:	4805      	ldr	r0, [pc, #20]	; (800c7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c78c:	f7fc fca9 	bl	80090e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c790:	4b02      	ldr	r3, [pc, #8]	; (800c79c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	20002634 	.word	0x20002634
 800c7a0:	0800d020 	.word	0x0800d020

0800c7a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	6039      	str	r1, [r7, #0]
 800c7ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c7b0:	79fb      	ldrb	r3, [r7, #7]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d105      	bne.n	800c7c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7b6:	683a      	ldr	r2, [r7, #0]
 800c7b8:	4907      	ldr	r1, [pc, #28]	; (800c7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7ba:	4808      	ldr	r0, [pc, #32]	; (800c7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7bc:	f7fc fc91 	bl	80090e2 <USBD_GetString>
 800c7c0:	e004      	b.n	800c7cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	4904      	ldr	r1, [pc, #16]	; (800c7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c7c6:	4805      	ldr	r0, [pc, #20]	; (800c7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c7c8:	f7fc fc8b 	bl	80090e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7cc:	4b02      	ldr	r3, [pc, #8]	; (800c7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	20002634 	.word	0x20002634
 800c7dc:	0800d02c 	.word	0x0800d02c

0800c7e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7e6:	4b0f      	ldr	r3, [pc, #60]	; (800c824 <Get_SerialNum+0x44>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7ec:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <Get_SerialNum+0x48>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7f2:	4b0e      	ldr	r3, [pc, #56]	; (800c82c <Get_SerialNum+0x4c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d009      	beq.n	800c81a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c806:	2208      	movs	r2, #8
 800c808:	4909      	ldr	r1, [pc, #36]	; (800c830 <Get_SerialNum+0x50>)
 800c80a:	68f8      	ldr	r0, [r7, #12]
 800c80c:	f000 f814 	bl	800c838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c810:	2204      	movs	r2, #4
 800c812:	4908      	ldr	r1, [pc, #32]	; (800c834 <Get_SerialNum+0x54>)
 800c814:	68b8      	ldr	r0, [r7, #8]
 800c816:	f000 f80f 	bl	800c838 <IntToUnicode>
  }
}
 800c81a:	bf00      	nop
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	1ffff7e8 	.word	0x1ffff7e8
 800c828:	1ffff7ec 	.word	0x1ffff7ec
 800c82c:	1ffff7f0 	.word	0x1ffff7f0
 800c830:	2000017a 	.word	0x2000017a
 800c834:	2000018a 	.word	0x2000018a

0800c838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c838:	b480      	push	{r7}
 800c83a:	b087      	sub	sp, #28
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	4613      	mov	r3, r2
 800c844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c84a:	2300      	movs	r3, #0
 800c84c:	75fb      	strb	r3, [r7, #23]
 800c84e:	e027      	b.n	800c8a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	0f1b      	lsrs	r3, r3, #28
 800c854:	2b09      	cmp	r3, #9
 800c856:	d80b      	bhi.n	800c870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	0f1b      	lsrs	r3, r3, #28
 800c85c:	b2da      	uxtb	r2, r3
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	4619      	mov	r1, r3
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	440b      	add	r3, r1
 800c868:	3230      	adds	r2, #48	; 0x30
 800c86a:	b2d2      	uxtb	r2, r2
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	e00a      	b.n	800c886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	0f1b      	lsrs	r3, r3, #28
 800c874:	b2da      	uxtb	r2, r3
 800c876:	7dfb      	ldrb	r3, [r7, #23]
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	4619      	mov	r1, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	440b      	add	r3, r1
 800c880:	3237      	adds	r2, #55	; 0x37
 800c882:	b2d2      	uxtb	r2, r2
 800c884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	011b      	lsls	r3, r3, #4
 800c88a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c88c:	7dfb      	ldrb	r3, [r7, #23]
 800c88e:	005b      	lsls	r3, r3, #1
 800c890:	3301      	adds	r3, #1
 800c892:	68ba      	ldr	r2, [r7, #8]
 800c894:	4413      	add	r3, r2
 800c896:	2200      	movs	r2, #0
 800c898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	3301      	adds	r3, #1
 800c89e:	75fb      	strb	r3, [r7, #23]
 800c8a0:	7dfa      	ldrb	r2, [r7, #23]
 800c8a2:	79fb      	ldrb	r3, [r7, #7]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d3d3      	bcc.n	800c850 <IntToUnicode+0x18>
  }
}
 800c8a8:	bf00      	nop
 800c8aa:	371c      	adds	r7, #28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bc80      	pop	{r7}
 800c8b0:	4770      	bx	lr
	...

0800c8b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a0d      	ldr	r2, [pc, #52]	; (800c8f8 <HAL_PCD_MspInit+0x44>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d113      	bne.n	800c8ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8c6:	4b0d      	ldr	r3, [pc, #52]	; (800c8fc <HAL_PCD_MspInit+0x48>)
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	4a0c      	ldr	r2, [pc, #48]	; (800c8fc <HAL_PCD_MspInit+0x48>)
 800c8cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c8d0:	61d3      	str	r3, [r2, #28]
 800c8d2:	4b0a      	ldr	r3, [pc, #40]	; (800c8fc <HAL_PCD_MspInit+0x48>)
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	2014      	movs	r0, #20
 800c8e4:	f7f6 f8bd 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800c8e8:	2014      	movs	r0, #20
 800c8ea:	f7f6 f8d6 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8ee:	bf00      	nop
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	40005c00 	.word	0x40005c00
 800c8fc:	40021000 	.word	0x40021000

0800c900 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800c914:	4619      	mov	r1, r3
 800c916:	4610      	mov	r0, r2
 800c918:	f7fb fcc0 	bl	800829c <USBD_LL_SetupStage>
}
 800c91c:	bf00      	nop
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b082      	sub	sp, #8
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
 800c92c:	460b      	mov	r3, r1
 800c92e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800c936:	78fb      	ldrb	r3, [r7, #3]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	015b      	lsls	r3, r3, #5
 800c93c:	4413      	add	r3, r2
 800c93e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	78fb      	ldrb	r3, [r7, #3]
 800c946:	4619      	mov	r1, r3
 800c948:	f7fb fcf3 	bl	8008332 <USBD_LL_DataOutStage>
}
 800c94c:	bf00      	nop
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800c966:	78fb      	ldrb	r3, [r7, #3]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	015b      	lsls	r3, r3, #5
 800c96c:	4413      	add	r3, r2
 800c96e:	333c      	adds	r3, #60	; 0x3c
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	78fb      	ldrb	r3, [r7, #3]
 800c974:	4619      	mov	r1, r3
 800c976:	f7fb fd4d 	bl	8008414 <USBD_LL_DataInStage>
}
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}

0800c982 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c982:	b580      	push	{r7, lr}
 800c984:	b082      	sub	sp, #8
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c990:	4618      	mov	r0, r3
 800c992:	f7fb fe5d 	bl	8008650 <USBD_LL_SOF>
}
 800c996:	bf00      	nop
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d001      	beq.n	800c9b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9b2:	f7f4 fe9d 	bl	80016f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c9bc:	7bfa      	ldrb	r2, [r7, #15]
 800c9be:	4611      	mov	r1, r2
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fb fe0d 	bl	80085e0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fb fdc6 	bl	800855e <USBD_LL_Reset>
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
	...

0800c9dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fb fe07 	bl	80085fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	699b      	ldr	r3, [r3, #24]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d005      	beq.n	800ca04 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9f8:	4b04      	ldr	r3, [pc, #16]	; (800ca0c <HAL_PCD_SuspendCallback+0x30>)
 800c9fa:	691b      	ldr	r3, [r3, #16]
 800c9fc:	4a03      	ldr	r2, [pc, #12]	; (800ca0c <HAL_PCD_SuspendCallback+0x30>)
 800c9fe:	f043 0306 	orr.w	r3, r3, #6
 800ca02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	e000ed00 	.word	0xe000ed00

0800ca10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fb fe01 	bl	8008626 <USBD_LL_Resume>
}
 800ca24:	bf00      	nop
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca34:	4a28      	ldr	r2, [pc, #160]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4a26      	ldr	r2, [pc, #152]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ca44:	4b24      	ldr	r3, [pc, #144]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca46:	4a25      	ldr	r2, [pc, #148]	; (800cadc <USBD_LL_Init+0xb0>)
 800ca48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca4a:	4b23      	ldr	r3, [pc, #140]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca4c:	2208      	movs	r2, #8
 800ca4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ca50:	4b21      	ldr	r3, [pc, #132]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca52:	2202      	movs	r2, #2
 800ca54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ca56:	4b20      	ldr	r3, [pc, #128]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ca5c:	4b1e      	ldr	r3, [pc, #120]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ca62:	4b1d      	ldr	r3, [pc, #116]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ca68:	481b      	ldr	r0, [pc, #108]	; (800cad8 <USBD_LL_Init+0xac>)
 800ca6a:	f7f6 fb85 	bl	8003178 <HAL_PCD_Init>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ca74:	f7f4 fe3c 	bl	80016f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca7e:	2318      	movs	r3, #24
 800ca80:	2200      	movs	r2, #0
 800ca82:	2100      	movs	r1, #0
 800ca84:	f7f7 fa1e 	bl	8003ec4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca8e:	2358      	movs	r3, #88	; 0x58
 800ca90:	2200      	movs	r2, #0
 800ca92:	2180      	movs	r1, #128	; 0x80
 800ca94:	f7f7 fa16 	bl	8003ec4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca9e:	23c0      	movs	r3, #192	; 0xc0
 800caa0:	2200      	movs	r2, #0
 800caa2:	2181      	movs	r1, #129	; 0x81
 800caa4:	f7f7 fa0e 	bl	8003ec4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800caae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cab2:	2200      	movs	r2, #0
 800cab4:	2101      	movs	r1, #1
 800cab6:	f7f7 fa05 	bl	8003ec4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cac4:	2200      	movs	r2, #0
 800cac6:	2182      	movs	r1, #130	; 0x82
 800cac8:	f7f7 f9fc 	bl	8003ec4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	20002834 	.word	0x20002834
 800cadc:	40005c00 	.word	0x40005c00

0800cae0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f6 fc1f 	bl	800333a <HAL_PCD_Start>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	4618      	mov	r0, r3
 800cb04:	f000 f948 	bl	800cd98 <USBD_Get_USB_Status>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3710      	adds	r7, #16
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}

0800cb16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b084      	sub	sp, #16
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	4608      	mov	r0, r1
 800cb20:	4611      	mov	r1, r2
 800cb22:	461a      	mov	r2, r3
 800cb24:	4603      	mov	r3, r0
 800cb26:	70fb      	strb	r3, [r7, #3]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	70bb      	strb	r3, [r7, #2]
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cb3e:	78bb      	ldrb	r3, [r7, #2]
 800cb40:	883a      	ldrh	r2, [r7, #0]
 800cb42:	78f9      	ldrb	r1, [r7, #3]
 800cb44:	f7f6 fd52 	bl	80035ec <HAL_PCD_EP_Open>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb4c:	7bfb      	ldrb	r3, [r7, #15]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 f922 	bl	800cd98 <USBD_Get_USB_Status>
 800cb54:	4603      	mov	r3, r0
 800cb56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb62:	b580      	push	{r7, lr}
 800cb64:	b084      	sub	sp, #16
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb7c:	78fa      	ldrb	r2, [r7, #3]
 800cb7e:	4611      	mov	r1, r2
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7f6 fd93 	bl	80036ac <HAL_PCD_EP_Close>
 800cb86:	4603      	mov	r3, r0
 800cb88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb8a:	7bfb      	ldrb	r3, [r7, #15]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f903 	bl	800cd98 <USBD_Get_USB_Status>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb96:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3710      	adds	r7, #16
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbba:	78fa      	ldrb	r2, [r7, #3]
 800cbbc:	4611      	mov	r1, r2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7f6 fe3d 	bl	800383e <HAL_PCD_EP_SetStall>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 f8e4 	bl	800cd98 <USBD_Get_USB_Status>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b084      	sub	sp, #16
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbea:	2300      	movs	r3, #0
 800cbec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbf8:	78fa      	ldrb	r2, [r7, #3]
 800cbfa:	4611      	mov	r1, r2
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7f6 fe78 	bl	80038f2 <HAL_PCD_EP_ClrStall>
 800cc02:	4603      	mov	r3, r0
 800cc04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc06:	7bfb      	ldrb	r3, [r7, #15]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f000 f8c5 	bl	800cd98 <USBD_Get_USB_Status>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3710      	adds	r7, #16
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b085      	sub	sp, #20
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	da08      	bge.n	800cc4a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc38:	78fb      	ldrb	r3, [r7, #3]
 800cc3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	015b      	lsls	r3, r3, #5
 800cc42:	4413      	add	r3, r2
 800cc44:	332a      	adds	r3, #42	; 0x2a
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	e008      	b.n	800cc5c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc4a:	78fb      	ldrb	r3, [r7, #3]
 800cc4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	015b      	lsls	r3, r3, #5
 800cc54:	4413      	add	r3, r2
 800cc56:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800cc5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3714      	adds	r7, #20
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bc80      	pop	{r7}
 800cc64:	4770      	bx	lr

0800cc66 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b084      	sub	sp, #16
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc80:	78fa      	ldrb	r2, [r7, #3]
 800cc82:	4611      	mov	r1, r2
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7f6 fc8c 	bl	80035a2 <HAL_PCD_SetAddress>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f000 f881 	bl	800cd98 <USBD_Get_USB_Status>
 800cc96:	4603      	mov	r3, r0
 800cc98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	607a      	str	r2, [r7, #4]
 800ccae:	461a      	mov	r2, r3
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	72fb      	strb	r3, [r7, #11]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ccc6:	893b      	ldrh	r3, [r7, #8]
 800ccc8:	7af9      	ldrb	r1, [r7, #11]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	f7f6 fd7e 	bl	80037cc <HAL_PCD_EP_Transmit>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccd4:	7dfb      	ldrb	r3, [r7, #23]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f85e 	bl	800cd98 <USBD_Get_USB_Status>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cce0:	7dbb      	ldrb	r3, [r7, #22]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b086      	sub	sp, #24
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	72fb      	strb	r3, [r7, #11]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd0c:	893b      	ldrh	r3, [r7, #8]
 800cd0e:	7af9      	ldrb	r1, [r7, #11]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	f7f6 fd0d 	bl	8003730 <HAL_PCD_EP_Receive>
 800cd16:	4603      	mov	r3, r0
 800cd18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 f83b 	bl	800cd98 <USBD_Get_USB_Status>
 800cd22:	4603      	mov	r3, r0
 800cd24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd26:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd42:	78fa      	ldrb	r2, [r7, #3]
 800cd44:	4611      	mov	r1, r2
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7f6 fd2c 	bl	80037a4 <HAL_PCD_EP_GetRxCount>
 800cd4c:	4603      	mov	r3, r0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
	...

0800cd58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cd60:	4b02      	ldr	r3, [pc, #8]	; (800cd6c <USBD_static_malloc+0x14>)
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bc80      	pop	{r7}
 800cd6a:	4770      	bx	lr
 800cd6c:	20001180 	.word	0x20001180

0800cd70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]

}
 800cd78:	bf00      	nop
 800cd7a:	370c      	adds	r7, #12
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bc80      	pop	{r7}
 800cd80:	4770      	bx	lr

0800cd82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd82:	b480      	push	{r7}
 800cd84:	b083      	sub	sp, #12
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800cd8e:	bf00      	nop
 800cd90:	370c      	adds	r7, #12
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bc80      	pop	{r7}
 800cd96:	4770      	bx	lr

0800cd98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d817      	bhi.n	800cddc <USBD_Get_USB_Status+0x44>
 800cdac:	a201      	add	r2, pc, #4	; (adr r2, 800cdb4 <USBD_Get_USB_Status+0x1c>)
 800cdae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb2:	bf00      	nop
 800cdb4:	0800cdc5 	.word	0x0800cdc5
 800cdb8:	0800cdcb 	.word	0x0800cdcb
 800cdbc:	0800cdd1 	.word	0x0800cdd1
 800cdc0:	0800cdd7 	.word	0x0800cdd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc8:	e00b      	b.n	800cde2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	73fb      	strb	r3, [r7, #15]
    break;
 800cdce:	e008      	b.n	800cde2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd4:	e005      	b.n	800cde2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cdd6:	2302      	movs	r3, #2
 800cdd8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdda:	e002      	b.n	800cde2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cddc:	2302      	movs	r3, #2
 800cdde:	73fb      	strb	r3, [r7, #15]
    break;
 800cde0:	bf00      	nop
  }
  return usb_status;
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bc80      	pop	{r7}
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop

0800cdf0 <__libc_init_array>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	2500      	movs	r5, #0
 800cdf4:	4e0c      	ldr	r6, [pc, #48]	; (800ce28 <__libc_init_array+0x38>)
 800cdf6:	4c0d      	ldr	r4, [pc, #52]	; (800ce2c <__libc_init_array+0x3c>)
 800cdf8:	1ba4      	subs	r4, r4, r6
 800cdfa:	10a4      	asrs	r4, r4, #2
 800cdfc:	42a5      	cmp	r5, r4
 800cdfe:	d109      	bne.n	800ce14 <__libc_init_array+0x24>
 800ce00:	f000 f8b2 	bl	800cf68 <_init>
 800ce04:	2500      	movs	r5, #0
 800ce06:	4e0a      	ldr	r6, [pc, #40]	; (800ce30 <__libc_init_array+0x40>)
 800ce08:	4c0a      	ldr	r4, [pc, #40]	; (800ce34 <__libc_init_array+0x44>)
 800ce0a:	1ba4      	subs	r4, r4, r6
 800ce0c:	10a4      	asrs	r4, r4, #2
 800ce0e:	42a5      	cmp	r5, r4
 800ce10:	d105      	bne.n	800ce1e <__libc_init_array+0x2e>
 800ce12:	bd70      	pop	{r4, r5, r6, pc}
 800ce14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce18:	4798      	blx	r3
 800ce1a:	3501      	adds	r5, #1
 800ce1c:	e7ee      	b.n	800cdfc <__libc_init_array+0xc>
 800ce1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce22:	4798      	blx	r3
 800ce24:	3501      	adds	r5, #1
 800ce26:	e7f2      	b.n	800ce0e <__libc_init_array+0x1e>
 800ce28:	0800d0cc 	.word	0x0800d0cc
 800ce2c:	0800d0cc 	.word	0x0800d0cc
 800ce30:	0800d0cc 	.word	0x0800d0cc
 800ce34:	0800d0d0 	.word	0x0800d0d0

0800ce38 <memcpy>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	1e43      	subs	r3, r0, #1
 800ce3c:	440a      	add	r2, r1
 800ce3e:	4291      	cmp	r1, r2
 800ce40:	d100      	bne.n	800ce44 <memcpy+0xc>
 800ce42:	bd10      	pop	{r4, pc}
 800ce44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce4c:	e7f7      	b.n	800ce3e <memcpy+0x6>

0800ce4e <memset>:
 800ce4e:	4603      	mov	r3, r0
 800ce50:	4402      	add	r2, r0
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d100      	bne.n	800ce58 <memset+0xa>
 800ce56:	4770      	bx	lr
 800ce58:	f803 1b01 	strb.w	r1, [r3], #1
 800ce5c:	e7f9      	b.n	800ce52 <memset+0x4>
	...

0800ce60 <floor>:
 800ce60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce64:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800ce68:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800ce6c:	2e13      	cmp	r6, #19
 800ce6e:	4607      	mov	r7, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	460c      	mov	r4, r1
 800ce74:	4605      	mov	r5, r0
 800ce76:	dc35      	bgt.n	800cee4 <floor+0x84>
 800ce78:	2e00      	cmp	r6, #0
 800ce7a:	da16      	bge.n	800ceaa <floor+0x4a>
 800ce7c:	a336      	add	r3, pc, #216	; (adr r3, 800cf58 <floor+0xf8>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	f7f3 f96b 	bl	800015c <__adddf3>
 800ce86:	2200      	movs	r2, #0
 800ce88:	2300      	movs	r3, #0
 800ce8a:	f7f3 fdad 	bl	80009e8 <__aeabi_dcmpgt>
 800ce8e:	b148      	cbz	r0, 800cea4 <floor+0x44>
 800ce90:	2c00      	cmp	r4, #0
 800ce92:	da5b      	bge.n	800cf4c <floor+0xec>
 800ce94:	2500      	movs	r5, #0
 800ce96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ce9a:	4a31      	ldr	r2, [pc, #196]	; (800cf60 <floor+0x100>)
 800ce9c:	433b      	orrs	r3, r7
 800ce9e:	42ab      	cmp	r3, r5
 800cea0:	bf18      	it	ne
 800cea2:	4614      	movne	r4, r2
 800cea4:	4623      	mov	r3, r4
 800cea6:	462f      	mov	r7, r5
 800cea8:	e026      	b.n	800cef8 <floor+0x98>
 800ceaa:	4a2e      	ldr	r2, [pc, #184]	; (800cf64 <floor+0x104>)
 800ceac:	fa42 f806 	asr.w	r8, r2, r6
 800ceb0:	ea01 0208 	and.w	r2, r1, r8
 800ceb4:	4302      	orrs	r2, r0
 800ceb6:	d01f      	beq.n	800cef8 <floor+0x98>
 800ceb8:	a327      	add	r3, pc, #156	; (adr r3, 800cf58 <floor+0xf8>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 f94d 	bl	800015c <__adddf3>
 800cec2:	2200      	movs	r2, #0
 800cec4:	2300      	movs	r3, #0
 800cec6:	f7f3 fd8f 	bl	80009e8 <__aeabi_dcmpgt>
 800ceca:	2800      	cmp	r0, #0
 800cecc:	d0ea      	beq.n	800cea4 <floor+0x44>
 800cece:	2c00      	cmp	r4, #0
 800ced0:	bfbe      	ittt	lt
 800ced2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ced6:	fa43 f606 	asrlt.w	r6, r3, r6
 800ceda:	19a4      	addlt	r4, r4, r6
 800cedc:	ea24 0408 	bic.w	r4, r4, r8
 800cee0:	2500      	movs	r5, #0
 800cee2:	e7df      	b.n	800cea4 <floor+0x44>
 800cee4:	2e33      	cmp	r6, #51	; 0x33
 800cee6:	dd0b      	ble.n	800cf00 <floor+0xa0>
 800cee8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ceec:	d104      	bne.n	800cef8 <floor+0x98>
 800ceee:	4602      	mov	r2, r0
 800cef0:	f7f3 f934 	bl	800015c <__adddf3>
 800cef4:	4607      	mov	r7, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4638      	mov	r0, r7
 800cefa:	4619      	mov	r1, r3
 800cefc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf00:	f04f 32ff 	mov.w	r2, #4294967295
 800cf04:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800cf08:	fa22 f808 	lsr.w	r8, r2, r8
 800cf0c:	ea18 0f00 	tst.w	r8, r0
 800cf10:	d0f2      	beq.n	800cef8 <floor+0x98>
 800cf12:	a311      	add	r3, pc, #68	; (adr r3, 800cf58 <floor+0xf8>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	f7f3 f920 	bl	800015c <__adddf3>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2300      	movs	r3, #0
 800cf20:	f7f3 fd62 	bl	80009e8 <__aeabi_dcmpgt>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d0bd      	beq.n	800cea4 <floor+0x44>
 800cf28:	2c00      	cmp	r4, #0
 800cf2a:	da02      	bge.n	800cf32 <floor+0xd2>
 800cf2c:	2e14      	cmp	r6, #20
 800cf2e:	d103      	bne.n	800cf38 <floor+0xd8>
 800cf30:	3401      	adds	r4, #1
 800cf32:	ea25 0508 	bic.w	r5, r5, r8
 800cf36:	e7b5      	b.n	800cea4 <floor+0x44>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cf3e:	fa03 f606 	lsl.w	r6, r3, r6
 800cf42:	4435      	add	r5, r6
 800cf44:	42bd      	cmp	r5, r7
 800cf46:	bf38      	it	cc
 800cf48:	18e4      	addcc	r4, r4, r3
 800cf4a:	e7f2      	b.n	800cf32 <floor+0xd2>
 800cf4c:	2500      	movs	r5, #0
 800cf4e:	462c      	mov	r4, r5
 800cf50:	e7a8      	b.n	800cea4 <floor+0x44>
 800cf52:	bf00      	nop
 800cf54:	f3af 8000 	nop.w
 800cf58:	8800759c 	.word	0x8800759c
 800cf5c:	7e37e43c 	.word	0x7e37e43c
 800cf60:	bff00000 	.word	0xbff00000
 800cf64:	000fffff 	.word	0x000fffff

0800cf68 <_init>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr

0800cf74 <_fini>:
 800cf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf76:	bf00      	nop
 800cf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf7a:	bc08      	pop	{r3}
 800cf7c:	469e      	mov	lr, r3
 800cf7e:	4770      	bx	lr
