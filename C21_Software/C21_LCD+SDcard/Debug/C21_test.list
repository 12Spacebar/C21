
C21_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006058  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ef4  08006164  08006164  00016164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009058  08009058  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08009058  08009058  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009058  08009058  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800905c  0800905c  0001905c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08009060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000243c  20000038  08009098  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002474  08009098  00022474  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b020  00000000  00000000  00020061  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002038  00000000  00000000  0002b081  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00014224  00000000  00000000  0002db00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009edb  00000000  00000000  00041d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0006abb8  00000000  00000000  0004bbff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000b67b7  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000910  00000000  00000000  000b6838  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00002778  00000000  00000000  000b7148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	0800614c 	.word	0x0800614c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	0800614c 	.word	0x0800614c

0800014c <loop>:
FRESULT fres ;
DWORD fre_clust ;
uint32_t total , free ;
char buffer [ 100 ] ;

void loop() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af04      	add	r7, sp, #16
    // Check border
    ST7735_FillScreen(ST7735_BLACK);
 8000152:	2000      	movs	r0, #0
 8000154:	f000 fd9a 	bl	8000c8c <ST7735_FillScreen>

    for(int x = 0; x < ST7735_WIDTH; x++) {
 8000158:	2300      	movs	r3, #0
 800015a:	607b      	str	r3, [r7, #4]
 800015c:	e012      	b.n	8000184 <loop+0x38>
        ST7735_DrawPixel(x, 0, ST7735_RED);
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	b29b      	uxth	r3, r3
 8000162:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000166:	2100      	movs	r1, #0
 8000168:	4618      	mov	r0, r3
 800016a:	f000 fc25 	bl	80009b8 <ST7735_DrawPixel>
        ST7735_DrawPixel(x, ST7735_HEIGHT-1, ST7735_RED);
 800016e:	687b      	ldr	r3, [r7, #4]
 8000170:	b29b      	uxth	r3, r3
 8000172:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000176:	217f      	movs	r1, #127	; 0x7f
 8000178:	4618      	mov	r0, r3
 800017a:	f000 fc1d 	bl	80009b8 <ST7735_DrawPixel>
    for(int x = 0; x < ST7735_WIDTH; x++) {
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	3301      	adds	r3, #1
 8000182:	607b      	str	r3, [r7, #4]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b7f      	cmp	r3, #127	; 0x7f
 8000188:	dde9      	ble.n	800015e <loop+0x12>
    }

    for(int y = 0; y < ST7735_HEIGHT; y++) {
 800018a:	2300      	movs	r3, #0
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	e012      	b.n	80001b6 <loop+0x6a>
        ST7735_DrawPixel(0, y, ST7735_RED);
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	b29b      	uxth	r3, r3
 8000194:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000198:	4619      	mov	r1, r3
 800019a:	2000      	movs	r0, #0
 800019c:	f000 fc0c 	bl	80009b8 <ST7735_DrawPixel>
        ST7735_DrawPixel(ST7735_WIDTH-1, y, ST7735_RED);
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80001a8:	4619      	mov	r1, r3
 80001aa:	207f      	movs	r0, #127	; 0x7f
 80001ac:	f000 fc04 	bl	80009b8 <ST7735_DrawPixel>
    for(int y = 0; y < ST7735_HEIGHT; y++) {
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	3301      	adds	r3, #1
 80001b4:	603b      	str	r3, [r7, #0]
 80001b6:	683b      	ldr	r3, [r7, #0]
 80001b8:	2b7f      	cmp	r3, #127	; 0x7f
 80001ba:	dde9      	ble.n	8000190 <loop+0x44>
    }

    HAL_Delay(3000);
 80001bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001c0:	f000 ff58 	bl	8001074 <HAL_Delay>

    // Check fonts
    ST7735_FillScreen(ST7735_BLACK);
 80001c4:	2000      	movs	r0, #0
 80001c6:	f000 fd61 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 80001ca:	4b6f      	ldr	r3, [pc, #444]	; (8000388 <loop+0x23c>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	9202      	str	r2, [sp, #8]
 80001d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80001d4:	9201      	str	r2, [sp, #4]
 80001d6:	685a      	ldr	r2, [r3, #4]
 80001d8:	9200      	str	r2, [sp, #0]
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a6b      	ldr	r2, [pc, #428]	; (800038c <loop+0x240>)
 80001de:	2100      	movs	r1, #0
 80001e0:	2000      	movs	r0, #0
 80001e2:	f000 fc93 	bl	8000b0c <ST7735_WriteString>
    ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80001e6:	4b6a      	ldr	r3, [pc, #424]	; (8000390 <loop+0x244>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	9202      	str	r2, [sp, #8]
 80001ec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80001f0:	9201      	str	r2, [sp, #4]
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	9200      	str	r2, [sp, #0]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a66      	ldr	r2, [pc, #408]	; (8000394 <loop+0x248>)
 80001fa:	211e      	movs	r1, #30
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fc85 	bl	8000b0c <ST7735_WriteString>
    ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 8000202:	4b65      	ldr	r3, [pc, #404]	; (8000398 <loop+0x24c>)
 8000204:	2200      	movs	r2, #0
 8000206:	9202      	str	r2, [sp, #8]
 8000208:	221f      	movs	r2, #31
 800020a:	9201      	str	r2, [sp, #4]
 800020c:	685a      	ldr	r2, [r3, #4]
 800020e:	9200      	str	r2, [sp, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a62      	ldr	r2, [pc, #392]	; (800039c <loop+0x250>)
 8000214:	2154      	movs	r1, #84	; 0x54
 8000216:	2000      	movs	r0, #0
 8000218:	f000 fc78 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(2000);
 800021c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000220:	f000 ff28 	bl	8001074 <HAL_Delay>

    // Check colors
    ST7735_FillScreen(ST7735_BLACK);
 8000224:	2000      	movs	r0, #0
 8000226:	f000 fd31 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 800022a:	4b59      	ldr	r3, [pc, #356]	; (8000390 <loop+0x244>)
 800022c:	2200      	movs	r2, #0
 800022e:	9202      	str	r2, [sp, #8]
 8000230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000234:	9201      	str	r2, [sp, #4]
 8000236:	685a      	ldr	r2, [r3, #4]
 8000238:	9200      	str	r2, [sp, #0]
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <loop+0x254>)
 800023e:	2100      	movs	r1, #0
 8000240:	2000      	movs	r0, #0
 8000242:	f000 fc63 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 8000246:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800024a:	f000 ff13 	bl	8001074 <HAL_Delay>

    ST7735_FillScreen(ST7735_BLUE);
 800024e:	201f      	movs	r0, #31
 8000250:	f000 fd1c 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 8000254:	4b4e      	ldr	r3, [pc, #312]	; (8000390 <loop+0x244>)
 8000256:	221f      	movs	r2, #31
 8000258:	9202      	str	r2, [sp, #8]
 800025a:	2200      	movs	r2, #0
 800025c:	9201      	str	r2, [sp, #4]
 800025e:	685a      	ldr	r2, [r3, #4]
 8000260:	9200      	str	r2, [sp, #0]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a4f      	ldr	r2, [pc, #316]	; (80003a4 <loop+0x258>)
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 fc4f 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 800026e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000272:	f000 feff 	bl	8001074 <HAL_Delay>

    ST7735_FillScreen(ST7735_RED);
 8000276:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800027a:	f000 fd07 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 800027e:	4b44      	ldr	r3, [pc, #272]	; (8000390 <loop+0x244>)
 8000280:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000284:	9202      	str	r2, [sp, #8]
 8000286:	2200      	movs	r2, #0
 8000288:	9201      	str	r2, [sp, #4]
 800028a:	685a      	ldr	r2, [r3, #4]
 800028c:	9200      	str	r2, [sp, #0]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a45      	ldr	r2, [pc, #276]	; (80003a8 <loop+0x25c>)
 8000292:	2100      	movs	r1, #0
 8000294:	2000      	movs	r0, #0
 8000296:	f000 fc39 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 800029a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800029e:	f000 fee9 	bl	8001074 <HAL_Delay>

    ST7735_FillScreen(ST7735_GREEN);
 80002a2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80002a6:	f000 fcf1 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 80002aa:	4b39      	ldr	r3, [pc, #228]	; (8000390 <loop+0x244>)
 80002ac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80002b0:	9202      	str	r2, [sp, #8]
 80002b2:	2200      	movs	r2, #0
 80002b4:	9201      	str	r2, [sp, #4]
 80002b6:	685a      	ldr	r2, [r3, #4]
 80002b8:	9200      	str	r2, [sp, #0]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a3b      	ldr	r2, [pc, #236]	; (80003ac <loop+0x260>)
 80002be:	2100      	movs	r1, #0
 80002c0:	2000      	movs	r0, #0
 80002c2:	f000 fc23 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 80002c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ca:	f000 fed3 	bl	8001074 <HAL_Delay>

    ST7735_FillScreen(ST7735_CYAN);
 80002ce:	f240 70ff 	movw	r0, #2047	; 0x7ff
 80002d2:	f000 fcdb 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 80002d6:	4b2e      	ldr	r3, [pc, #184]	; (8000390 <loop+0x244>)
 80002d8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80002dc:	9202      	str	r2, [sp, #8]
 80002de:	2200      	movs	r2, #0
 80002e0:	9201      	str	r2, [sp, #4]
 80002e2:	685a      	ldr	r2, [r3, #4]
 80002e4:	9200      	str	r2, [sp, #0]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a31      	ldr	r2, [pc, #196]	; (80003b0 <loop+0x264>)
 80002ea:	2100      	movs	r1, #0
 80002ec:	2000      	movs	r0, #0
 80002ee:	f000 fc0d 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 80002f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f6:	f000 febd 	bl	8001074 <HAL_Delay>

    ST7735_FillScreen(ST7735_MAGENTA);
 80002fa:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80002fe:	f000 fcc5 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 8000302:	4b23      	ldr	r3, [pc, #140]	; (8000390 <loop+0x244>)
 8000304:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000308:	9202      	str	r2, [sp, #8]
 800030a:	2200      	movs	r2, #0
 800030c:	9201      	str	r2, [sp, #4]
 800030e:	685a      	ldr	r2, [r3, #4]
 8000310:	9200      	str	r2, [sp, #0]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a27      	ldr	r2, [pc, #156]	; (80003b4 <loop+0x268>)
 8000316:	2100      	movs	r1, #0
 8000318:	2000      	movs	r0, #0
 800031a:	f000 fbf7 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 800031e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000322:	f000 fea7 	bl	8001074 <HAL_Delay>

    ST7735_FillScreen(ST7735_YELLOW);
 8000326:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800032a:	f000 fcaf 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <loop+0x244>)
 8000330:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000334:	9202      	str	r2, [sp, #8]
 8000336:	2200      	movs	r2, #0
 8000338:	9201      	str	r2, [sp, #4]
 800033a:	685a      	ldr	r2, [r3, #4]
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1d      	ldr	r2, [pc, #116]	; (80003b8 <loop+0x26c>)
 8000342:	2100      	movs	r1, #0
 8000344:	2000      	movs	r0, #0
 8000346:	f000 fbe1 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 800034a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800034e:	f000 fe91 	bl	8001074 <HAL_Delay>

    ST7735_FillScreen(ST7735_WHITE);
 8000352:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000356:	f000 fc99 	bl	8000c8c <ST7735_FillScreen>
    ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <loop+0x244>)
 800035c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000360:	9202      	str	r2, [sp, #8]
 8000362:	2200      	movs	r2, #0
 8000364:	9201      	str	r2, [sp, #4]
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	9200      	str	r2, [sp, #0]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a13      	ldr	r2, [pc, #76]	; (80003bc <loop+0x270>)
 800036e:	2100      	movs	r1, #0
 8000370:	2000      	movs	r0, #0
 8000372:	f000 fbcb 	bl	8000b0c <ST7735_WriteString>
    HAL_Delay(500);
 8000376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800037a:	f000 fe7b 	bl	8001074 <HAL_Delay>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000000 	.word	0x20000000
 800038c:	08006164 	.word	0x08006164
 8000390:	20000008 	.word	0x20000008
 8000394:	08006198 	.word	0x08006198
 8000398:	20000010 	.word	0x20000010
 800039c:	080061b8 	.word	0x080061b8
 80003a0:	080061c4 	.word	0x080061c4
 80003a4:	080061cc 	.word	0x080061cc
 80003a8:	080061d4 	.word	0x080061d4
 80003ac:	080061d8 	.word	0x080061d8
 80003b0:	080061e0 	.word	0x080061e0
 80003b4:	080061e8 	.word	0x080061e8
 80003b8:	080061f0 	.word	0x080061f0
 80003bc:	080061f8 	.word	0x080061f8

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b0d4      	sub	sp, #336	; 0x150
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c6:	f000 fdf3 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ca:	f000 f8d9 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ce:	f000 f989 	bl	80006e4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80003d2:	f000 f951 	bl	8000678 <MX_SPI2_Init>
  MX_SPI1_Init();
 80003d6:	f000 f919 	bl	800060c <MX_SPI1_Init>
  MX_FATFS_Init();
 80003da:	f002 f891 	bl	8002500 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80003de:	f000 fad1 	bl	8000984 <ST7735_Init>
  loop();
 80003e2:	f7ff feb3 	bl	800014c <loop>

  fres = f_mount ( &fs ,  "" ,   1);
 80003e6:	2201      	movs	r2, #1
 80003e8:	495f      	ldr	r1, [pc, #380]	; (8000568 <main+0x1a8>)
 80003ea:	4860      	ldr	r0, [pc, #384]	; (800056c <main+0x1ac>)
 80003ec:	f005 f9c2 	bl	8005774 <f_mount>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b5e      	ldr	r3, [pc, #376]	; (8000570 <main+0x1b0>)
 80003f6:	701a      	strb	r2, [r3, #0]
   while ( fres !=  FR_OK ){
 80003f8:	e00b      	b.n	8000412 <main+0x52>
 	  fres = f_mount ( &fs ,  "" ,   1);
 80003fa:	2201      	movs	r2, #1
 80003fc:	495a      	ldr	r1, [pc, #360]	; (8000568 <main+0x1a8>)
 80003fe:	485b      	ldr	r0, [pc, #364]	; (800056c <main+0x1ac>)
 8000400:	f005 f9b8 	bl	8005774 <f_mount>
 8000404:	4603      	mov	r3, r0
 8000406:	461a      	mov	r2, r3
 8000408:	4b59      	ldr	r3, [pc, #356]	; (8000570 <main+0x1b0>)
 800040a:	701a      	strb	r2, [r3, #0]
 	  HAL_Delay(100);
 800040c:	2064      	movs	r0, #100	; 0x64
 800040e:	f000 fe31 	bl	8001074 <HAL_Delay>
   while ( fres !=  FR_OK ){
 8000412:	4b57      	ldr	r3, [pc, #348]	; (8000570 <main+0x1b0>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d1ef      	bne.n	80003fa <main+0x3a>
   }
   FIL file;
    FRESULT res = f_open(&file, "video.rgb", FA_READ);
 800041a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800041e:	2201      	movs	r2, #1
 8000420:	4954      	ldr	r1, [pc, #336]	; (8000574 <main+0x1b4>)
 8000422:	4618      	mov	r0, r3
 8000424:	f005 f9f0 	bl	8005808 <f_open>
 8000428:	4603      	mov	r3, r0
 800042a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
    if(res != FR_OK) {
 800042e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8000432:	2b00      	cmp	r3, #0
 8000434:	d002      	beq.n	800043c <main+0x7c>
  //      UART_Printf("f_open() failed, res = %d\r\n", res);
        return -1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295
 800043a:	e08f      	b.n	800055c <main+0x19c>
    }
  uint32_t imageHeight = 128;
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  uint32_t imageWidth = 128;
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  uint32_t bytesRead;
  for( int frame = 0;  frame < 903; frame ++){
 8000448:	2300      	movs	r3, #0
 800044a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800044e:	e067      	b.n	8000520 <main+0x160>
    uint8_t imageRow[256];
       for(uint32_t y = 0; y < imageHeight; y++) {
 8000450:	2300      	movs	r3, #0
 8000452:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8000456:	e058      	b.n	800050a <main+0x14a>
           uint32_t rowIdx = 0;
 8000458:	2300      	movs	r3, #0
 800045a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
           res = f_read(&file, imageRow, sizeof(imageRow), &bytesRead);
 800045e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000462:	4639      	mov	r1, r7
 8000464:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800046c:	f005 fb58 	bl	8005b20 <f_read>
 8000470:	4603      	mov	r3, r0
 8000472:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
           if(res != FR_OK) {
 8000476:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800047a:	2b00      	cmp	r3, #0
 800047c:	d007      	beq.n	800048e <main+0xce>
  //             UART_Printf("f_read() failed, res = %d\r\n", res);
               f_close(&file);
 800047e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000482:	4618      	mov	r0, r3
 8000484:	f005 fd4d 	bl	8005f22 <f_close>
               return -7;
 8000488:	f06f 0306 	mvn.w	r3, #6
 800048c:	e066      	b.n	800055c <main+0x19c>
           }

           for(uint32_t x = 0; x < imageWidth; x++) {
 800048e:	2300      	movs	r3, #0
 8000490:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8000494:	e02e      	b.n	80004f4 <main+0x134>
               uint8_t h = imageRow[rowIdx++];
 8000496:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800049a:	1c5a      	adds	r2, r3, #1
 800049c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80004a0:	463a      	mov	r2, r7
 80004a2:	5cd3      	ldrb	r3, [r2, r3]
 80004a4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
               uint8_t l = imageRow[rowIdx++];
 80004a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80004ac:	1c5a      	adds	r2, r3, #1
 80004ae:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 80004b2:	463a      	mov	r2, r7
 80004b4:	5cd3      	ldrb	r3, [r2, r3]
 80004b6:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132

               uint16_t color565 = (l<<8)|h;
 80004ba:	f897 3132 	ldrb.w	r3, [r7, #306]	; 0x132
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	b21a      	sxth	r2, r3
 80004c2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80004c6:	b21b      	sxth	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b21b      	sxth	r3, r3
 80004cc:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130

                   ST7735_DrawPixel(x,  y - 1 , color565);
 80004d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80004d4:	b298      	uxth	r0, r3
 80004d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80004da:	b29b      	uxth	r3, r3
 80004dc:	3b01      	subs	r3, #1
 80004de:	b29b      	uxth	r3, r3
 80004e0:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 80004e4:	4619      	mov	r1, r3
 80004e6:	f000 fa67 	bl	80009b8 <ST7735_DrawPixel>
           for(uint32_t x = 0; x < imageWidth; x++) {
 80004ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80004ee:	3301      	adds	r3, #1
 80004f0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80004f4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80004f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3ca      	bcc.n	8000496 <main+0xd6>
       for(uint32_t y = 0; y < imageHeight; y++) {
 8000500:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000504:	3301      	adds	r3, #1
 8000506:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800050a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800050e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8000512:	429a      	cmp	r2, r3
 8000514:	d3a0      	bcc.n	8000458 <main+0x98>
  for( int frame = 0;  frame < 903; frame ++){
 8000516:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800051a:	3301      	adds	r3, #1
 800051c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000520:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000524:	f240 3286 	movw	r2, #902	; 0x386
 8000528:	4293      	cmp	r3, r2
 800052a:	dd91      	ble.n	8000450 <main+0x90>

           }
       }
  }
       res = f_close(&file);
 800052c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000530:	4618      	mov	r0, r3
 8000532:	f005 fcf6 	bl	8005f22 <f_close>
 8000536:	4603      	mov	r3, r0
 8000538:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 800053c:	2104      	movs	r1, #4
 800053e:	480e      	ldr	r0, [pc, #56]	; (8000578 <main+0x1b8>)
 8000540:	f001 f810 	bl	8001564 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 8000544:	2140      	movs	r1, #64	; 0x40
 8000546:	480d      	ldr	r0, [pc, #52]	; (800057c <main+0x1bc>)
 8000548:	f001 f80c 	bl	8001564 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	480b      	ldr	r0, [pc, #44]	; (800057c <main+0x1bc>)
 8000550:	f001 f808 	bl	8001564 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000554:	2064      	movs	r0, #100	; 0x64
 8000556:	f000 fd8d 	bl	8001074 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 800055a:	e7ef      	b.n	800053c <main+0x17c>
  }
  /* USER CODE END 3 */
}
 800055c:	4618      	mov	r0, r3
 800055e:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	08006200 	.word	0x08006200
 800056c:	200002e0 	.word	0x200002e0
 8000570:	200013d4 	.word	0x200013d4
 8000574:	08006204 	.word	0x08006204
 8000578:	40010c00 	.word	0x40010c00
 800057c:	40010800 	.word	0x40010800

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b090      	sub	sp, #64	; 0x40
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2228      	movs	r2, #40	; 0x28
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fdd4 	bl	800613c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0318 	add.w	r3, r7, #24
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 ffe3 	bl	8001594 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d4:	f000 f8e8 	bl	80007a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fa4e 	bl	8001a94 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005fe:	f000 f8d3 	bl	80007a8 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3740      	adds	r7, #64	; 0x40
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_SPI1_Init+0x64>)
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <MX_SPI1_Init+0x68>)
 8000614:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <MX_SPI1_Init+0x64>)
 8000618:	f44f 7282 	mov.w	r2, #260	; 0x104
 800061c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_SPI1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_SPI1_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_SPI1_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_SPI1_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_SPI1_Init+0x64>)
 8000638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800063c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_SPI1_Init+0x64>)
 8000640:	2208      	movs	r2, #8
 8000642:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_SPI1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_SPI1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_SPI1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_SPI1_Init+0x64>)
 8000658:	220a      	movs	r2, #10
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_SPI1_Init+0x64>)
 800065e:	f001 fb83 	bl	8001d68 <HAL_SPI_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000668:	f000 f89e 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20001378 	.word	0x20001378
 8000674:	40013000 	.word	0x40013000

08000678 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_SPI2_Init+0x64>)
 800067e:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <MX_SPI2_Init+0x68>)
 8000680:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_SPI2_Init+0x64>)
 8000684:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000688:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_SPI2_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_SPI2_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_SPI2_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_SPI2_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_SPI2_Init+0x64>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_SPI2_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_SPI2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_SPI2_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_SPI2_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_SPI2_Init+0x64>)
 80006c4:	220a      	movs	r2, #10
 80006c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_SPI2_Init+0x64>)
 80006ca:	f001 fb4d 	bl	8001d68 <HAL_SPI_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006d4:	f000 f868 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000288 	.word	0x20000288
 80006e0:	40003800 	.word	0x40003800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <MX_GPIO_Init+0xb8>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a27      	ldr	r2, [pc, #156]	; (800079c <MX_GPIO_Init+0xb8>)
 80006fe:	f043 0320 	orr.w	r3, r3, #32
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b25      	ldr	r3, [pc, #148]	; (800079c <MX_GPIO_Init+0xb8>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0320 	and.w	r3, r3, #32
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_GPIO_Init+0xb8>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a21      	ldr	r2, [pc, #132]	; (800079c <MX_GPIO_Init+0xb8>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xb8>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xb8>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <MX_GPIO_Init+0xb8>)
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0xb8>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0308 	and.w	r3, r3, #8
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|LCD_RS_Pin|rst_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000746:	4816      	ldr	r0, [pc, #88]	; (80007a0 <MX_GPIO_Init+0xbc>)
 8000748:	f000 fef4 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|LCD_CS_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f241 0184 	movw	r1, #4228	; 0x1084
 8000752:	4814      	ldr	r0, [pc, #80]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000754:	f000 feee 	bl	8001534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 LCD_RS_Pin rst_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|LCD_RS_Pin|rst_Pin;
 8000758:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2302      	movs	r3, #2
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	4619      	mov	r1, r3
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0xbc>)
 8000772:	f000 fd85 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 LCD_CS_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LCD_CS_Pin|SD_CS_Pin;
 8000776:	f241 0384 	movw	r3, #4228	; 0x1084
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2302      	movs	r3, #2
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_GPIO_Init+0xc0>)
 8000790:	f000 fd76 	bl	8001280 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	40010800 	.word	0x40010800
 80007a4:	40010c00 	.word	0x40010c00

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007be:	4802      	ldr	r0, [pc, #8]	; (80007c8 <ST7735_Select+0x14>)
 80007c0:	f000 feb8 	bl	8001534 <HAL_GPIO_WritePin>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40010c00 	.word	0x40010c00

080007cc <ST7735_Unselect>:

void ST7735_Unselect() {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d6:	4802      	ldr	r0, [pc, #8]	; (80007e0 <ST7735_Unselect+0x14>)
 80007d8:	f000 feac 	bl	8001534 <HAL_GPIO_WritePin>
}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <ST7735_Reset>:

static void ST7735_Reset() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <ST7735_Reset+0x28>)
 80007f0:	f000 fea0 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80007f4:	2005      	movs	r0, #5
 80007f6:	f000 fc3d 	bl	8001074 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <ST7735_Reset+0x28>)
 8000802:	f000 fe97 	bl	8001534 <HAL_GPIO_WritePin>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40010800 	.word	0x40010800

08000810 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <ST7735_WriteCommand+0x2c>)
 8000822:	f000 fe87 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000826:	1df9      	adds	r1, r7, #7
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
 800082c:	2201      	movs	r2, #1
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <ST7735_WriteCommand+0x30>)
 8000830:	f001 fafb 	bl	8001e2a <HAL_SPI_Transmit>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40010800 	.word	0x40010800
 8000840:	20000288 	.word	0x20000288

08000844 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <ST7735_WriteData+0x30>)
 8000856:	f000 fe6d 	bl	8001534 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	b29a      	uxth	r2, r3
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <ST7735_WriteData+0x34>)
 8000866:	f001 fae0 	bl	8001e2a <HAL_SPI_Transmit>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40010800 	.word	0x40010800
 8000878:	20000288 	.word	0x20000288

0800087c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800088e:	e034      	b.n	80008fa <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	1c5a      	adds	r2, r3, #1
 8000894:	607a      	str	r2, [r7, #4]
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800089a:	7afb      	ldrb	r3, [r7, #11]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ffb7 	bl	8000810 <ST7735_WriteCommand>

        numArgs = *addr++;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	1c5a      	adds	r2, r3, #1
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80008ac:	7abb      	ldrb	r3, [r7, #10]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80008b6:	7abb      	ldrb	r3, [r7, #10]
 80008b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008bc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80008be:	7abb      	ldrb	r3, [r7, #10]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d008      	beq.n	80008d6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80008c4:	7abb      	ldrb	r3, [r7, #10]
 80008c6:	4619      	mov	r1, r3
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ffbb 	bl	8000844 <ST7735_WriteData>
            addr += numArgs;
 80008ce:	7abb      	ldrb	r3, [r7, #10]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80008d6:	89bb      	ldrh	r3, [r7, #12]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00e      	beq.n	80008fa <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80008e6:	89bb      	ldrh	r3, [r7, #12]
 80008e8:	2bff      	cmp	r3, #255	; 0xff
 80008ea:	d102      	bne.n	80008f2 <ST7735_ExecuteCommandList+0x76>
 80008ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008f0:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80008f2:	89bb      	ldrh	r3, [r7, #12]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fbbd 	bl	8001074 <HAL_Delay>
    while(numCommands--) {
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	1e5a      	subs	r2, r3, #1
 80008fe:	73fa      	strb	r2, [r7, #15]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d1c5      	bne.n	8000890 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800090c:	b590      	push	{r4, r7, lr}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4604      	mov	r4, r0
 8000914:	4608      	mov	r0, r1
 8000916:	4611      	mov	r1, r2
 8000918:	461a      	mov	r2, r3
 800091a:	4623      	mov	r3, r4
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	4603      	mov	r3, r0
 8000920:	71bb      	strb	r3, [r7, #6]
 8000922:	460b      	mov	r3, r1
 8000924:	717b      	strb	r3, [r7, #5]
 8000926:	4613      	mov	r3, r2
 8000928:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800092a:	202a      	movs	r0, #42	; 0x2a
 800092c:	f7ff ff70 	bl	8000810 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8000930:	2300      	movs	r3, #0
 8000932:	733b      	strb	r3, [r7, #12]
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	3302      	adds	r3, #2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	737b      	strb	r3, [r7, #13]
 800093c:	2300      	movs	r3, #0
 800093e:	73bb      	strb	r3, [r7, #14]
 8000940:	797b      	ldrb	r3, [r7, #5]
 8000942:	3302      	adds	r3, #2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2104      	movs	r1, #4
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff78 	bl	8000844 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000954:	202b      	movs	r0, #43	; 0x2b
 8000956:	f7ff ff5b 	bl	8000810 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	3303      	adds	r3, #3
 800095e:	b2db      	uxtb	r3, r3
 8000960:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8000962:	793b      	ldrb	r3, [r7, #4]
 8000964:	3303      	adds	r3, #3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2104      	movs	r1, #4
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff67 	bl	8000844 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000976:	202c      	movs	r0, #44	; 0x2c
 8000978:	f7ff ff4a 	bl	8000810 <ST7735_WriteCommand>
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <ST7735_Init>:

void ST7735_Init() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000988:	f7ff ff14 	bl	80007b4 <ST7735_Select>
    ST7735_Reset();
 800098c:	f7ff ff2a 	bl	80007e4 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <ST7735_Init+0x28>)
 8000992:	f7ff ff73 	bl	800087c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000996:	4806      	ldr	r0, [pc, #24]	; (80009b0 <ST7735_Init+0x2c>)
 8000998:	f7ff ff70 	bl	800087c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <ST7735_Init+0x30>)
 800099e:	f7ff ff6d 	bl	800087c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80009a2:	f7ff ff13 	bl	80007cc <ST7735_Unselect>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08008a80 	.word	0x08008a80
 80009b0:	08008abc 	.word	0x08008abc
 80009b4:	08008acc 	.word	0x08008acc

080009b8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	460b      	mov	r3, r1
 80009c4:	80bb      	strh	r3, [r7, #4]
 80009c6:	4613      	mov	r3, r2
 80009c8:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	2b7f      	cmp	r3, #127	; 0x7f
 80009ce:	d823      	bhi.n	8000a18 <ST7735_DrawPixel+0x60>
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	2b7f      	cmp	r3, #127	; 0x7f
 80009d4:	d820      	bhi.n	8000a18 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 80009d6:	f7ff feed 	bl	80007b4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	b2d8      	uxtb	r0, r3
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	b2d9      	uxtb	r1, r3
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3301      	adds	r3, #1
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	3301      	adds	r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f7ff ff8b 	bl	800090c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80009f6:	887b      	ldrh	r3, [r7, #2]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	733b      	strb	r3, [r7, #12]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2102      	movs	r1, #2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff19 	bl	8000844 <ST7735_WriteData>

    ST7735_Unselect();
 8000a12:	f7ff fedb 	bl	80007cc <ST7735_Unselect>
 8000a16:	e000      	b.n	8000a1a <ST7735_DrawPixel+0x62>
        return;
 8000a18:	bf00      	nop
}
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a20:	b082      	sub	sp, #8
 8000a22:	b590      	push	{r4, r7, lr}
 8000a24:	b089      	sub	sp, #36	; 0x24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	80bb      	strh	r3, [r7, #4]
 8000a32:	4613      	mov	r3, r2
 8000a34:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	b2d8      	uxtb	r0, r3
 8000a3a:	88bb      	ldrh	r3, [r7, #4]
 8000a3c:	b2d9      	uxtb	r1, r3
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000a46:	4413      	add	r3, r2
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	b2dc      	uxtb	r4, r3
 8000a4e:	88bb      	ldrh	r3, [r7, #4]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000a56:	4413      	add	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4622      	mov	r2, r4
 8000a60:	f7ff ff54 	bl	800090c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	e043      	b.n	8000af2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	3b20      	subs	r3, #32
 8000a70:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000a74:	fb01 f303 	mul.w	r3, r1, r3
 8000a78:	4619      	mov	r1, r3
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	440b      	add	r3, r1
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	e029      	b.n	8000ae0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00e      	beq.n	8000aba <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000a9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	743b      	strb	r3, [r7, #16]
 8000aa6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2102      	movs	r1, #2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fec6 	bl	8000844 <ST7735_WriteData>
 8000ab8:	e00f      	b.n	8000ada <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000aba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	733b      	strb	r3, [r7, #12]
 8000ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff feb5 	bl	8000844 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	3301      	adds	r3, #1
 8000ade:	61bb      	str	r3, [r7, #24]
 8000ae0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d3cf      	bcc.n	8000a8c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3301      	adds	r3, #1
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000af6:	461a      	mov	r2, r3
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d3b5      	bcc.n	8000a6a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000afe:	bf00      	nop
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b08:	b002      	add	sp, #8
 8000b0a:	4770      	bx	lr

08000b0c <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af04      	add	r7, sp, #16
 8000b14:	603a      	str	r2, [r7, #0]
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	4603      	mov	r3, r0
 8000b1a:	80fb      	strh	r3, [r7, #6]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000b20:	f7ff fe48 	bl	80007b4 <ST7735_Select>

    while(*str) {
 8000b24:	e02d      	b.n	8000b82 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	7d3a      	ldrb	r2, [r7, #20]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8000b2e:	dd13      	ble.n	8000b58 <ST7735_WriteString+0x4c>
            x = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b34:	7d7b      	ldrb	r3, [r7, #21]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	7d7a      	ldrb	r2, [r7, #21]
 8000b42:	4413      	add	r3, r2
 8000b44:	2b7f      	cmp	r3, #127	; 0x7f
 8000b46:	dc21      	bgt.n	8000b8c <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b20      	cmp	r3, #32
 8000b4e:	d103      	bne.n	8000b58 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	603b      	str	r3, [r7, #0]
                continue;
 8000b56:	e014      	b.n	8000b82 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	88b9      	ldrh	r1, [r7, #4]
 8000b5e:	88f8      	ldrh	r0, [r7, #6]
 8000b60:	8c3b      	ldrh	r3, [r7, #32]
 8000b62:	9302      	str	r3, [sp, #8]
 8000b64:	8bbb      	ldrh	r3, [r7, #28]
 8000b66:	9301      	str	r3, [sp, #4]
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f7ff ff57 	bl	8000a20 <ST7735_WriteChar>
        x += font.width;
 8000b72:	7d3b      	ldrb	r3, [r7, #20]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	4413      	add	r3, r2
 8000b7a:	80fb      	strh	r3, [r7, #6]
        str++;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1cd      	bne.n	8000b26 <ST7735_WriteString+0x1a>
 8000b8a:	e000      	b.n	8000b8e <ST7735_WriteString+0x82>
                break;
 8000b8c:	bf00      	nop
    }

    ST7735_Unselect();
 8000b8e:	f7ff fe1d 	bl	80007cc <ST7735_Unselect>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b9c:	b002      	add	sp, #8
 8000b9e:	4770      	bx	lr

08000ba0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000ba0:	b590      	push	{r4, r7, lr}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4604      	mov	r4, r0
 8000ba8:	4608      	mov	r0, r1
 8000baa:	4611      	mov	r1, r2
 8000bac:	461a      	mov	r2, r3
 8000bae:	4623      	mov	r3, r4
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	807b      	strh	r3, [r7, #2]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000bbe:	88fb      	ldrh	r3, [r7, #6]
 8000bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc2:	d85a      	bhi.n	8000c7a <ST7735_FillRectangle+0xda>
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bc8:	d857      	bhi.n	8000c7a <ST7735_FillRectangle+0xda>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000bca:	88fa      	ldrh	r2, [r7, #6]
 8000bcc:	887b      	ldrh	r3, [r7, #2]
 8000bce:	4413      	add	r3, r2
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd4:	dd03      	ble.n	8000bde <ST7735_FillRectangle+0x3e>
 8000bd6:	88fb      	ldrh	r3, [r7, #6]
 8000bd8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000bdc:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000bde:	88ba      	ldrh	r2, [r7, #4]
 8000be0:	883b      	ldrh	r3, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	3b01      	subs	r3, #1
 8000be6:	2b7f      	cmp	r3, #127	; 0x7f
 8000be8:	dd03      	ble.n	8000bf2 <ST7735_FillRectangle+0x52>
 8000bea:	88bb      	ldrh	r3, [r7, #4]
 8000bec:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000bf0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000bf2:	f7ff fddf 	bl	80007b4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	b2d8      	uxtb	r0, r3
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	b2d9      	uxtb	r1, r3
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	887b      	ldrh	r3, [r7, #2]
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	b2dc      	uxtb	r4, r3
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	b2da      	uxtb	r2, r3
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	4622      	mov	r2, r4
 8000c20:	f7ff fe74 	bl	800090c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000c24:	8c3b      	ldrh	r3, [r7, #32]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	733b      	strb	r3, [r7, #12]
 8000c2e:	8c3b      	ldrh	r3, [r7, #32]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	4812      	ldr	r0, [pc, #72]	; (8000c84 <ST7735_FillRectangle+0xe4>)
 8000c3c:	f000 fc7a 	bl	8001534 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000c40:	883b      	ldrh	r3, [r7, #0]
 8000c42:	80bb      	strh	r3, [r7, #4]
 8000c44:	e013      	b.n	8000c6e <ST7735_FillRectangle+0xce>
        for(x = w; x > 0; x--) {
 8000c46:	887b      	ldrh	r3, [r7, #2]
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	e00a      	b.n	8000c62 <ST7735_FillRectangle+0xc2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000c4c:	f107 010c 	add.w	r1, r7, #12
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
 8000c54:	2202      	movs	r2, #2
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <ST7735_FillRectangle+0xe8>)
 8000c58:	f001 f8e7 	bl	8001e2a <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	80fb      	strh	r3, [r7, #6]
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1f1      	bne.n	8000c4c <ST7735_FillRectangle+0xac>
    for(y = h; y > 0; y--) {
 8000c68:	88bb      	ldrh	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	80bb      	strh	r3, [r7, #4]
 8000c6e:	88bb      	ldrh	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1e8      	bne.n	8000c46 <ST7735_FillRectangle+0xa6>
        }
    }

    ST7735_Unselect();
 8000c74:	f7ff fdaa 	bl	80007cc <ST7735_Unselect>
 8000c78:	e000      	b.n	8000c7c <ST7735_FillRectangle+0xdc>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000c7a:	bf00      	nop
}
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010800 	.word	0x40010800
 8000c88:	20000288 	.word	0x20000288

08000c8c <ST7735_FillScreen>:

void ST7735_FillScreen(uint16_t color) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2380      	movs	r3, #128	; 0x80
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff ff7d 	bl	8000ba0 <ST7735_FillRectangle>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_MspInit+0x60>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_MspInit+0x60>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010000 	.word	0x40010000

08000d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	; 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 031c 	add.w	r3, r7, #28
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a3e      	ldr	r2, [pc, #248]	; (8000e28 <HAL_SPI_MspInit+0x114>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d13e      	bne.n	8000db2 <HAL_SPI_MspInit+0x9e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d34:	4b3d      	ldr	r3, [pc, #244]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a3c      	ldr	r2, [pc, #240]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000d3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b3a      	ldr	r3, [pc, #232]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a36      	ldr	r2, [pc, #216]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000d64:	2328      	movs	r3, #40	; 0x28
 8000d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	482e      	ldr	r0, [pc, #184]	; (8000e30 <HAL_SPI_MspInit+0x11c>)
 8000d78:	f000 fa82 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4828      	ldr	r0, [pc, #160]	; (8000e30 <HAL_SPI_MspInit+0x11c>)
 8000d90:	f000 fa76 	bl	8001280 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <HAL_SPI_MspInit+0x120>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000daa:	4a22      	ldr	r2, [pc, #136]	; (8000e34 <HAL_SPI_MspInit+0x120>)
 8000dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dae:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000db0:	e036      	b.n	8000e20 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_SPI_MspInit+0x124>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d131      	bne.n	8000e20 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	61d3      	str	r3, [r2, #28]
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000dca:	69db      	ldr	r3, [r3, #28]
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000dda:	f043 0308 	orr.w	r3, r3, #8
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_SPI_MspInit+0x118>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f003 0308 	and.w	r3, r3, #8
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000dec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df6:	2303      	movs	r3, #3
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <HAL_SPI_MspInit+0x11c>)
 8000e02:	f000 fa3d 	bl	8001280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <HAL_SPI_MspInit+0x11c>)
 8000e1c:	f000 fa30 	bl	8001280 <HAL_GPIO_Init>
}
 8000e20:	bf00      	nop
 8000e22:	3730      	adds	r7, #48	; 0x30
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40013000 	.word	0x40013000
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010c00 	.word	0x40010c00
 8000e34:	40010000 	.word	0x40010000
 8000e38:	40003800 	.word	0x40003800

08000e3c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8000e40:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <SDTimer_Handler+0x3c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <SDTimer_Handler+0x1c>
    Timer1--;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <SDTimer_Handler+0x3c>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3b01      	subs	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <SDTimer_Handler+0x3c>)
 8000e56:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <SDTimer_Handler+0x40>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d006      	beq.n	8000e70 <SDTimer_Handler+0x34>
    Timer2--;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SDTimer_Handler+0x40>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <SDTimer_Handler+0x40>)
 8000e6e:	701a      	strb	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	20001409 	.word	0x20001409
 8000e7c:	20001408 	.word	0x20001408

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <HardFault_Handler+0x4>

08000e92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <BusFault_Handler+0x4>

08000e9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <UsageFault_Handler+0x4>

08000ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <SysTick_Handler+0x30>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <SysTick_Handler+0x30>)
 8000ed8:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <SysTick_Handler+0x30>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d904      	bls.n	8000eee <SysTick_Handler+0x26>
  {
    FatFsCnt = 0;
 8000ee4:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Handler+0x30>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8000eea:	f7ff ffa7 	bl	8000e3c <SDTimer_Handler>
  }

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 f8a5 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000054 	.word	0x20000054

08000efc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <SystemInit+0x5c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <SystemInit+0x5c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <SystemInit+0x5c>)
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4911      	ldr	r1, [pc, #68]	; (8000f58 <SystemInit+0x5c>)
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <SystemInit+0x60>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <SystemInit+0x5c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <SystemInit+0x5c>)
 8000f1e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f26:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <SystemInit+0x5c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <SystemInit+0x5c>)
 8000f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f32:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SystemInit+0x5c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <SystemInit+0x5c>)
 8000f3a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000f3e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <SystemInit+0x5c>)
 8000f42:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000f46:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SystemInit+0x64>)
 8000f4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f4e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	f8ff0000 	.word	0xf8ff0000
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f64:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f66:	e003      	b.n	8000f70 <LoopCopyDataInit>

08000f68 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f6a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f6c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f6e:	3104      	adds	r1, #4

08000f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f70:	480a      	ldr	r0, [pc, #40]	; (8000f9c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f74:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f76:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f78:	d3f6      	bcc.n	8000f68 <CopyDataInit>
  ldr r2, =_sbss
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f7c:	e002      	b.n	8000f84 <LoopFillZerobss>

08000f7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f80:	f842 3b04 	str.w	r3, [r2], #4

08000f84 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f86:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f88:	d3f9      	bcc.n	8000f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f8a:	f7ff ffb7 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f005 f8b1 	bl	80060f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff fa15 	bl	80003c0 <main>
  bx lr
 8000f96:	4770      	bx	lr
  ldr r3, =_sidata
 8000f98:	08009060 	.word	0x08009060
  ldr r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000fa0:	20000038 	.word	0x20000038
  ldr r2, =_sbss
 8000fa4:	20000038 	.word	0x20000038
  ldr r3, = _ebss
 8000fa8:	20002474 	.word	0x20002474

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x28>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x28>)
 8000fba:	f043 0310 	orr.w	r3, r3, #16
 8000fbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f929 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe70 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f933 	bl	8001266 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f909 	bl	800122e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000018 	.word	0x20000018
 8001034:	20000020 	.word	0x20000020
 8001038:	2000001c 	.word	0x2000001c

0800103c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x1c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <HAL_IncTick+0x20>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a03      	ldr	r2, [pc, #12]	; (800105c <HAL_IncTick+0x20>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000020 	.word	0x20000020
 800105c:	2000140c 	.word	0x2000140c

08001060 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b02      	ldr	r3, [pc, #8]	; (8001070 <HAL_GetTick+0x10>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	2000140c 	.word	0x2000140c

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff fff0 	bl	8001060 <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_Delay+0x40>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffe0 	bl	8001060 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000020 	.word	0x20000020

080010b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	60d3      	str	r3, [r2, #12]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff90 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff49 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff5e 	bl	8001100 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff90 	bl	8001170 <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5f 	bl	800111c <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffb0 	bl	80011d4 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b08b      	sub	sp, #44	; 0x2c
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001292:	e127      	b.n	80014e4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001294:	2201      	movs	r2, #1
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	4013      	ands	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 8116 	bne.w	80014de <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d034      	beq.n	8001324 <HAL_GPIO_Init+0xa4>
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d80d      	bhi.n	80012da <HAL_GPIO_Init+0x5a>
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x9a>
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d804      	bhi.n	80012d0 <HAL_GPIO_Init+0x50>
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d031      	beq.n	800132e <HAL_GPIO_Init+0xae>
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d01c      	beq.n	8001308 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ce:	e048      	b.n	8001362 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d043      	beq.n	800135c <HAL_GPIO_Init+0xdc>
 80012d4:	2b11      	cmp	r3, #17
 80012d6:	d01b      	beq.n	8001310 <HAL_GPIO_Init+0x90>
          break;
 80012d8:	e043      	b.n	8001362 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012da:	4a89      	ldr	r2, [pc, #548]	; (8001500 <HAL_GPIO_Init+0x280>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d026      	beq.n	800132e <HAL_GPIO_Init+0xae>
 80012e0:	4a87      	ldr	r2, [pc, #540]	; (8001500 <HAL_GPIO_Init+0x280>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d806      	bhi.n	80012f4 <HAL_GPIO_Init+0x74>
 80012e6:	4a87      	ldr	r2, [pc, #540]	; (8001504 <HAL_GPIO_Init+0x284>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d020      	beq.n	800132e <HAL_GPIO_Init+0xae>
 80012ec:	4a86      	ldr	r2, [pc, #536]	; (8001508 <HAL_GPIO_Init+0x288>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01d      	beq.n	800132e <HAL_GPIO_Init+0xae>
          break;
 80012f2:	e036      	b.n	8001362 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012f4:	4a85      	ldr	r2, [pc, #532]	; (800150c <HAL_GPIO_Init+0x28c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0xae>
 80012fa:	4a85      	ldr	r2, [pc, #532]	; (8001510 <HAL_GPIO_Init+0x290>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d016      	beq.n	800132e <HAL_GPIO_Init+0xae>
 8001300:	4a84      	ldr	r2, [pc, #528]	; (8001514 <HAL_GPIO_Init+0x294>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0xae>
          break;
 8001306:	e02c      	b.n	8001362 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e028      	b.n	8001362 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	3304      	adds	r3, #4
 8001316:	623b      	str	r3, [r7, #32]
          break;
 8001318:	e023      	b.n	8001362 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	3308      	adds	r3, #8
 8001320:	623b      	str	r3, [r7, #32]
          break;
 8001322:	e01e      	b.n	8001362 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	330c      	adds	r3, #12
 800132a:	623b      	str	r3, [r7, #32]
          break;
 800132c:	e019      	b.n	8001362 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001336:	2304      	movs	r3, #4
 8001338:	623b      	str	r3, [r7, #32]
          break;
 800133a:	e012      	b.n	8001362 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001344:	2308      	movs	r3, #8
 8001346:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	611a      	str	r2, [r3, #16]
          break;
 800134e:	e008      	b.n	8001362 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001350:	2308      	movs	r3, #8
 8001352:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	615a      	str	r2, [r3, #20]
          break;
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
          break;
 8001360:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	2bff      	cmp	r3, #255	; 0xff
 8001366:	d801      	bhi.n	800136c <HAL_GPIO_Init+0xec>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	e001      	b.n	8001370 <HAL_GPIO_Init+0xf0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2bff      	cmp	r3, #255	; 0xff
 8001376:	d802      	bhi.n	800137e <HAL_GPIO_Init+0xfe>
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x104>
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	3b08      	subs	r3, #8
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	210f      	movs	r1, #15
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	401a      	ands	r2, r3
 8001396:	6a39      	ldr	r1, [r7, #32]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	431a      	orrs	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8096 	beq.w	80014de <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013b2:	4b59      	ldr	r3, [pc, #356]	; (8001518 <HAL_GPIO_Init+0x298>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a58      	ldr	r2, [pc, #352]	; (8001518 <HAL_GPIO_Init+0x298>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <HAL_GPIO_Init+0x298>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013ca:	4a54      	ldr	r2, [pc, #336]	; (800151c <HAL_GPIO_Init+0x29c>)
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <HAL_GPIO_Init+0x2a0>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x19e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <HAL_GPIO_Init+0x2a4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x19a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a49      	ldr	r2, [pc, #292]	; (8001528 <HAL_GPIO_Init+0x2a8>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x196>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a48      	ldr	r2, [pc, #288]	; (800152c <HAL_GPIO_Init+0x2ac>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x192>
 800140e:	2303      	movs	r3, #3
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x1a0>
 8001412:	2304      	movs	r3, #4
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x1a0>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x1a0>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x1a0>
 800141e:	2300      	movs	r3, #0
 8001420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001422:	f002 0203 	and.w	r2, r2, #3
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4313      	orrs	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001430:	493a      	ldr	r1, [pc, #232]	; (800151c <HAL_GPIO_Init+0x29c>)
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4938      	ldr	r1, [pc, #224]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	43db      	mvns	r3, r3
 8001460:	4933      	ldr	r1, [pc, #204]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 8001462:	4013      	ands	r3, r2
 8001464:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001472:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	492e      	ldr	r1, [pc, #184]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
 800147e:	e006      	b.n	800148e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	43db      	mvns	r3, r3
 8001488:	4929      	ldr	r1, [pc, #164]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 800148a:	4013      	ands	r3, r2
 800148c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800149a:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	4924      	ldr	r1, [pc, #144]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
 80014a6:	e006      	b.n	80014b6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	491f      	ldr	r1, [pc, #124]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	491a      	ldr	r1, [pc, #104]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60cb      	str	r3, [r1, #12]
 80014ce:	e006      	b.n	80014de <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	4915      	ldr	r1, [pc, #84]	; (8001530 <HAL_GPIO_Init+0x2b0>)
 80014da:	4013      	ands	r3, r2
 80014dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	3301      	adds	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f47f aed0 	bne.w	8001294 <HAL_GPIO_Init+0x14>
  }
}
 80014f4:	bf00      	nop
 80014f6:	372c      	adds	r7, #44	; 0x2c
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	10210000 	.word	0x10210000
 8001504:	10110000 	.word	0x10110000
 8001508:	10120000 	.word	0x10120000
 800150c:	10310000 	.word	0x10310000
 8001510:	10320000 	.word	0x10320000
 8001514:	10220000 	.word	0x10220000
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000
 8001520:	40010800 	.word	0x40010800
 8001524:	40010c00 	.word	0x40010c00
 8001528:	40011000 	.word	0x40011000
 800152c:	40011400 	.word	0x40011400
 8001530:	40010400 	.word	0x40010400

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001550:	e003      	b.n	800155a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	041a      	lsls	r2, r3, #16
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	611a      	str	r2, [r3, #16]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157c:	887a      	ldrh	r2, [r7, #2]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001582:	e002      	b.n	800158a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001584:	887a      	ldrh	r2, [r7, #2]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	611a      	str	r2, [r3, #16]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e26c      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8087 	beq.w	80016c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015b4:	4b92      	ldr	r3, [pc, #584]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d00c      	beq.n	80015da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015c0:	4b8f      	ldr	r3, [pc, #572]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d112      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
 80015cc:	4b8c      	ldr	r3, [pc, #560]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d8:	d10b      	bne.n	80015f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015da:	4b89      	ldr	r3, [pc, #548]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d06c      	beq.n	80016c0 <HAL_RCC_OscConfig+0x12c>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d168      	bne.n	80016c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e246      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fa:	d106      	bne.n	800160a <HAL_RCC_OscConfig+0x76>
 80015fc:	4b80      	ldr	r3, [pc, #512]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a7f      	ldr	r2, [pc, #508]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e02e      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x98>
 8001612:	4b7b      	ldr	r3, [pc, #492]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7a      	ldr	r2, [pc, #488]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b78      	ldr	r3, [pc, #480]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a77      	ldr	r2, [pc, #476]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e01d      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001634:	d10c      	bne.n	8001650 <HAL_RCC_OscConfig+0xbc>
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a71      	ldr	r2, [pc, #452]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b6f      	ldr	r3, [pc, #444]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a6e      	ldr	r2, [pc, #440]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e00b      	b.n	8001668 <HAL_RCC_OscConfig+0xd4>
 8001650:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6a      	ldr	r2, [pc, #424]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a67      	ldr	r2, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d013      	beq.n	8001698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fcf6 	bl	8001060 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001678:	f7ff fcf2 	bl	8001060 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e1fa      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0xe4>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fce2 	bl	8001060 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcde 	bl	8001060 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e1e6      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x10c>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d063      	beq.n	8001796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ce:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00b      	beq.n	80016f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016da:	4b49      	ldr	r3, [pc, #292]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d11c      	bne.n	8001720 <HAL_RCC_OscConfig+0x18c>
 80016e6:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d116      	bne.n	8001720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f2:	4b43      	ldr	r3, [pc, #268]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x176>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e1ba      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170a:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4939      	ldr	r1, [pc, #228]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171e:	e03a      	b.n	8001796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_OscConfig+0x270>)
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fc97 	bl	8001060 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fc93 	bl	8001060 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e19b      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0f0      	beq.n	8001736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	4927      	ldr	r1, [pc, #156]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e015      	b.n	8001796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800176a:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_OscConfig+0x270>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fc76 	bl	8001060 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fc72 	bl	8001060 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e17a      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d03a      	beq.n	8001818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d019      	beq.n	80017de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_OscConfig+0x274>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b0:	f7ff fc56 	bl	8001060 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b8:	f7ff fc52 	bl	8001060 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e15a      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017d6:	2001      	movs	r0, #1
 80017d8:	f000 faa8 	bl	8001d2c <RCC_Delay>
 80017dc:	e01c      	b.n	8001818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_OscConfig+0x274>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff fc3c 	bl	8001060 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ea:	e00f      	b.n	800180c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fc38 	bl	8001060 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d908      	bls.n	800180c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e140      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000
 8001804:	42420000 	.word	0x42420000
 8001808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	4b9e      	ldr	r3, [pc, #632]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e9      	bne.n	80017ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a6 	beq.w	8001972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001826:	2300      	movs	r3, #0
 8001828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800182a:	4b97      	ldr	r3, [pc, #604]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b94      	ldr	r3, [pc, #592]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a93      	ldr	r2, [pc, #588]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b91      	ldr	r3, [pc, #580]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184e:	2301      	movs	r3, #1
 8001850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001852:	4b8e      	ldr	r3, [pc, #568]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185a:	2b00      	cmp	r3, #0
 800185c:	d118      	bne.n	8001890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185e:	4b8b      	ldr	r3, [pc, #556]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a8a      	ldr	r2, [pc, #552]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff fbf9 	bl	8001060 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff fbf5 	bl	8001060 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0fd      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <HAL_RCC_OscConfig+0x4f8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x312>
 8001898:	4b7b      	ldr	r3, [pc, #492]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a7a      	ldr	r2, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6213      	str	r3, [r2, #32]
 80018a4:	e02d      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x334>
 80018ae:	4b76      	ldr	r3, [pc, #472]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a75      	ldr	r2, [pc, #468]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	4a72      	ldr	r2, [pc, #456]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6213      	str	r3, [r2, #32]
 80018c6:	e01c      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d10c      	bne.n	80018ea <HAL_RCC_OscConfig+0x356>
 80018d0:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a6c      	ldr	r2, [pc, #432]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4a69      	ldr	r2, [pc, #420]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6213      	str	r3, [r2, #32]
 80018e8:	e00b      	b.n	8001902 <HAL_RCC_OscConfig+0x36e>
 80018ea:	4b67      	ldr	r3, [pc, #412]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a66      	ldr	r2, [pc, #408]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a63      	ldr	r2, [pc, #396]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d015      	beq.n	8001936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190a:	f7ff fba9 	bl	8001060 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	e00a      	b.n	8001928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001912:	f7ff fba5 	bl	8001060 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001920:	4293      	cmp	r3, r2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e0ab      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	4b57      	ldr	r3, [pc, #348]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ee      	beq.n	8001912 <HAL_RCC_OscConfig+0x37e>
 8001934:	e014      	b.n	8001960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fb93 	bl	8001060 <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff fb8f 	bl	8001060 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e095      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1ee      	bne.n	800193e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d105      	bne.n	8001972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001966:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 8081 	beq.w	8001a7e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800197c:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d061      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d146      	bne.n	8001a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_RCC_OscConfig+0x4fc>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001996:	f7ff fb63 	bl	8001060 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fb5f 	bl	8001060 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e067      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d108      	bne.n	80019d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019c6:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	492d      	ldr	r1, [pc, #180]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a19      	ldr	r1, [r3, #32]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	430b      	orrs	r3, r1
 80019ea:	4927      	ldr	r1, [pc, #156]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x4fc>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fb33 	bl	8001060 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff fb2f 	bl	8001060 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e037      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCC_OscConfig+0x46a>
 8001a1c:	e02f      	b.n	8001a7e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_RCC_OscConfig+0x4fc>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fb1c 	bl	8001060 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7ff fb18 	bl	8001060 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e020      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x498>
 8001a4a:	e018      	b.n	8001a7e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e013      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3718      	adds	r7, #24
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	42420060 	.word	0x42420060

08001a94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0d0      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d910      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f023 0207 	bic.w	r2, r3, #7
 8001abe:	4965      	ldr	r1, [pc, #404]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b63      	ldr	r3, [pc, #396]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0b8      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af0:	4b59      	ldr	r3, [pc, #356]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a58      	ldr	r2, [pc, #352]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001afa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b08:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	494d      	ldr	r1, [pc, #308]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d040      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b47      	ldr	r3, [pc, #284]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d115      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e07f      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d109      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e073      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06b      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 0203 	bic.w	r2, r3, #3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4936      	ldr	r1, [pc, #216]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b84:	f7ff fa6c 	bl	8001060 <HAL_GetTick>
 8001b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b8c:	f7ff fa68 	bl	8001060 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e053      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 020c 	and.w	r2, r3, #12
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d1eb      	bne.n	8001b8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d210      	bcs.n	8001be4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 0207 	bic.w	r2, r3, #7
 8001bca:	4922      	ldr	r1, [pc, #136]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e032      	b.n	8001c4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d008      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4916      	ldr	r1, [pc, #88]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	490e      	ldr	r1, [pc, #56]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c22:	f000 f821 	bl	8001c68 <HAL_RCC_GetSysClockFreq>
 8001c26:	4601      	mov	r1, r0
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <HAL_RCC_ClockConfig+0x1c8>)
 8001c34:	5cd3      	ldrb	r3, [r2, r3]
 8001c36:	fa21 f303 	lsr.w	r3, r1, r3
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_RCC_ClockConfig+0x1cc>)
 8001c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1d0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f9ca 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40022000 	.word	0x40022000
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08008af8 	.word	0x08008af8
 8001c60:	20000018 	.word	0x20000018
 8001c64:	2000001c 	.word	0x2000001c

08001c68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c68:	b490      	push	{r4, r7}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c70:	1d3c      	adds	r4, r7, #4
 8001c72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c78:	4b28      	ldr	r3, [pc, #160]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c92:	4b23      	ldr	r3, [pc, #140]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x46>
 8001ca6:	e02d      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001caa:	623b      	str	r3, [r7, #32]
      break;
 8001cac:	e02d      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cba:	4413      	add	r3, r2
 8001cbc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cc0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d013      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	0c5b      	lsrs	r3, r3, #17
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cda:	4413      	add	r3, r2
 8001cdc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ce0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce6:	fb02 f203 	mul.w	r2, r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf2:	e004      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	623b      	str	r3, [r7, #32]
      break;
 8001d02:	e002      	b.n	8001d0a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d06:	623b      	str	r3, [r7, #32]
      break;
 8001d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc90      	pop	{r4, r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	08006210 	.word	0x08006210
 8001d1c:	08006220 	.word	0x08006220
 8001d20:	40021000 	.word	0x40021000
 8001d24:	007a1200 	.word	0x007a1200
 8001d28:	003d0900 	.word	0x003d0900

08001d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <RCC_Delay+0x34>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <RCC_Delay+0x38>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a5b      	lsrs	r3, r3, #9
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d48:	bf00      	nop
  }
  while (Delay --);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	60fa      	str	r2, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f9      	bne.n	8001d48 <RCC_Delay+0x1c>
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000018 	.word	0x20000018
 8001d64:	10624dd3 	.word	0x10624dd3

08001d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e053      	b.n	8001e22 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7fe ffbd 	bl	8000d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	ea42 0103 	orr.w	r1, r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	0c1a      	lsrs	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f002 0204 	and.w	r2, r2, #4
 8001e00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b088      	sub	sp, #32
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_SPI_Transmit+0x22>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e11e      	b.n	800208a <HAL_SPI_Transmit+0x260>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e54:	f7ff f904 	bl	8001060 <HAL_GetTick>
 8001e58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d002      	beq.n	8001e70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e6e:	e103      	b.n	8002078 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_SPI_Transmit+0x52>
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d102      	bne.n	8001e82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e80:	e0fa      	b.n	8002078 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2203      	movs	r2, #3
 8001e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	88fa      	ldrh	r2, [r7, #6]
 8001e9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	88fa      	ldrh	r2, [r7, #6]
 8001ea0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ec8:	d107      	bne.n	8001eda <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ed8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d007      	beq.n	8001ef8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f00:	d14b      	bne.n	8001f9a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <HAL_SPI_Transmit+0xe6>
 8001f0a:	8afb      	ldrh	r3, [r7, #22]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d13e      	bne.n	8001f8e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	1c9a      	adds	r2, r3, #2
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f34:	e02b      	b.n	8001f8e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d112      	bne.n	8001f6a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	881a      	ldrh	r2, [r3, #0]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	1c9a      	adds	r2, r3, #2
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f68:	e011      	b.n	8001f8e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f6a:	f7ff f879 	bl	8001060 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d803      	bhi.n	8001f82 <HAL_SPI_Transmit+0x158>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d102      	bne.n	8001f88 <HAL_SPI_Transmit+0x15e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f8c:	e074      	b.n	8002078 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1ce      	bne.n	8001f36 <HAL_SPI_Transmit+0x10c>
 8001f98:	e04c      	b.n	8002034 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <HAL_SPI_Transmit+0x17e>
 8001fa2:	8afb      	ldrh	r3, [r7, #22]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d140      	bne.n	800202a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	330c      	adds	r3, #12
 8001fb2:	7812      	ldrb	r2, [r2, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fce:	e02c      	b.n	800202a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d113      	bne.n	8002006 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	7812      	ldrb	r2, [r2, #0]
 8001fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	86da      	strh	r2, [r3, #54]	; 0x36
 8002004:	e011      	b.n	800202a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002006:	f7ff f82b 	bl	8001060 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d803      	bhi.n	800201e <HAL_SPI_Transmit+0x1f4>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201c:	d102      	bne.n	8002024 <HAL_SPI_Transmit+0x1fa>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002028:	e026      	b.n	8002078 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1cd      	bne.n	8001fd0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	6839      	ldr	r1, [r7, #0]
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fa43 	bl	80024c4 <SPI_EndRxTxTransaction>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206c:	2b00      	cmp	r3, #0
 800206e:	d002      	beq.n	8002076 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]
 8002074:	e000      	b.n	8002078 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002088:	7ffb      	ldrb	r3, [r7, #31]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b08c      	sub	sp, #48	; 0x30
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020a0:	2301      	movs	r3, #1
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0x26>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e18a      	b.n	80023ce <HAL_SPI_TransmitReceive+0x33c>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020c0:	f7fe ffce 	bl	8001060 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80020da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d00f      	beq.n	8002102 <HAL_SPI_TransmitReceive+0x70>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020e8:	d107      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d103      	bne.n	80020fa <HAL_SPI_TransmitReceive+0x68>
 80020f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d003      	beq.n	8002102 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
 80020fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002100:	e15b      	b.n	80023ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_SPI_TransmitReceive+0x82>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_SPI_TransmitReceive+0x82>
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800211a:	e14e      	b.n	80023ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b04      	cmp	r3, #4
 8002126:	d003      	beq.n	8002130 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2205      	movs	r2, #5
 800212c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	887a      	ldrh	r2, [r7, #2]
 8002146:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002170:	2b40      	cmp	r3, #64	; 0x40
 8002172:	d007      	beq.n	8002184 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800218c:	d178      	bne.n	8002280 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <HAL_SPI_TransmitReceive+0x10a>
 8002196:	8b7b      	ldrh	r3, [r7, #26]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d166      	bne.n	800226a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	881a      	ldrh	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	1c9a      	adds	r2, r3, #2
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021c0:	e053      	b.n	800226a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d11b      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x176>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_SPI_TransmitReceive+0x176>
 80021da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d113      	bne.n	8002208 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e4:	881a      	ldrh	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f0:	1c9a      	adds	r2, r3, #2
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d119      	bne.n	800224a <HAL_SPI_TransmitReceive+0x1b8>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d014      	beq.n	800224a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	b292      	uxth	r2, r2
 800222c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	1c9a      	adds	r2, r3, #2
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002246:	2301      	movs	r3, #1
 8002248:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800224a:	f7fe ff09 	bl	8001060 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002256:	429a      	cmp	r2, r3
 8002258:	d807      	bhi.n	800226a <HAL_SPI_TransmitReceive+0x1d8>
 800225a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d003      	beq.n	800226a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002268:	e0a7      	b.n	80023ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1a6      	bne.n	80021c2 <HAL_SPI_TransmitReceive+0x130>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1a1      	bne.n	80021c2 <HAL_SPI_TransmitReceive+0x130>
 800227e:	e07c      	b.n	800237a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_SPI_TransmitReceive+0x1fc>
 8002288:	8b7b      	ldrh	r3, [r7, #26]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d16b      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b4:	e057      	b.n	8002366 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d11c      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x26c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d017      	beq.n	80022fe <HAL_SPI_TransmitReceive+0x26c>
 80022ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d114      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	330c      	adds	r3, #12
 80022de:	7812      	ldrb	r2, [r2, #0]
 80022e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d119      	bne.n	8002340 <HAL_SPI_TransmitReceive+0x2ae>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d014      	beq.n	8002340 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002332:	b29b      	uxth	r3, r3
 8002334:	3b01      	subs	r3, #1
 8002336:	b29a      	uxth	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800233c:	2301      	movs	r3, #1
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002340:	f7fe fe8e 	bl	8001060 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234c:	429a      	cmp	r2, r3
 800234e:	d803      	bhi.n	8002358 <HAL_SPI_TransmitReceive+0x2c6>
 8002350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d102      	bne.n	800235e <HAL_SPI_TransmitReceive+0x2cc>
 8002358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002364:	e029      	b.n	80023ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1a2      	bne.n	80022b6 <HAL_SPI_TransmitReceive+0x224>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002374:	b29b      	uxth	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d19d      	bne.n	80022b6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800237a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8a0 	bl	80024c4 <SPI_EndRxTxTransaction>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d006      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002396:	e010      	b.n	80023ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	e000      	b.n	80023ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80023b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80023ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3730      	adds	r7, #48	; 0x30
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e4:	b2db      	uxtb	r3, r3
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002400:	e04c      	b.n	800249c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d048      	beq.n	800249c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800240a:	f7fe fe29 	bl	8001060 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d902      	bls.n	8002420 <SPI_WaitFlagStateUntilTimeout+0x30>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d13d      	bne.n	800249c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800242e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002438:	d111      	bne.n	800245e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002442:	d004      	beq.n	800244e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244c:	d107      	bne.n	800245e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800245c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002466:	d10f      	bne.n	8002488 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002486:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e00f      	b.n	80024bc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4013      	ands	r3, r2
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d1a3      	bne.n	8002402 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7ff ff88 	bl	80023f0 <SPI_WaitFlagStateUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ea:	f043 0220 	orr.w	r2, r3, #32
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e000      	b.n	80024f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002504:	4904      	ldr	r1, [pc, #16]	; (8002518 <MX_FATFS_Init+0x18>)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_FATFS_Init+0x1c>)
 8002508:	f003 fd7c 	bl	8006004 <FATFS_LinkDriver>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <MX_FATFS_Init+0x20>)
 8002512:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20001410 	.word	0x20001410
 800251c:	20000024 	.word	0x20000024
 8002520:	20001414 	.word	0x20001414

08002524 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8002528:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
	...

08002534 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002538:	2200      	movs	r2, #0
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <SELECT+0x14>)
 800253e:	f7fe fff9 	bl	8001534 <HAL_GPIO_WritePin>
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40010c00 	.word	0x40010c00

0800254c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002550:	2201      	movs	r2, #1
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DESELECT+0x14>)
 8002556:	f7fe ffed 	bl	8001534 <HAL_GPIO_WritePin>
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40010c00 	.word	0x40010c00

08002564 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800256e:	bf00      	nop
 8002570:	4808      	ldr	r0, [pc, #32]	; (8002594 <SPI_TxByte+0x30>)
 8002572:	f7ff ff30 	bl	80023d6 <HAL_SPI_GetState>
 8002576:	4603      	mov	r3, r0
 8002578:	2b01      	cmp	r3, #1
 800257a:	d1f9      	bne.n	8002570 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800257c:	1df9      	adds	r1, r7, #7
 800257e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002582:	2201      	movs	r2, #1
 8002584:	4803      	ldr	r0, [pc, #12]	; (8002594 <SPI_TxByte+0x30>)
 8002586:	f7ff fc50 	bl	8001e2a <HAL_SPI_Transmit>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20001378 	.word	0x20001378

08002598 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800259e:	23ff      	movs	r3, #255	; 0xff
 80025a0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80025a6:	bf00      	nop
 80025a8:	4809      	ldr	r0, [pc, #36]	; (80025d0 <SPI_RxByte+0x38>)
 80025aa:	f7ff ff14 	bl	80023d6 <HAL_SPI_GetState>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d1f9      	bne.n	80025a8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80025b4:	1dba      	adds	r2, r7, #6
 80025b6:	1df9      	adds	r1, r7, #7
 80025b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	2301      	movs	r3, #1
 80025c0:	4803      	ldr	r0, [pc, #12]	; (80025d0 <SPI_RxByte+0x38>)
 80025c2:	f7ff fd66 	bl	8002092 <HAL_SPI_TransmitReceive>
  
  return data;
 80025c6:	79bb      	ldrb	r3, [r7, #6]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20001378 	.word	0x20001378

080025d4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80025dc:	f7ff ffdc 	bl	8002598 <SPI_RxByte>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	701a      	strb	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <SD_ReadyWait+0x34>)
 80025f8:	2232      	movs	r2, #50	; 0x32
 80025fa:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80025fc:	f7ff ffcc 	bl	8002598 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8002600:	f7ff ffca 	bl	8002598 <SPI_RxByte>
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d004      	beq.n	8002618 <SD_ReadyWait+0x28>
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <SD_ReadyWait+0x34>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f3      	bne.n	8002600 <SD_ReadyWait+0x10>
  
  return res;
 8002618:	79fb      	ldrb	r3, [r7, #7]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20001408 	.word	0x20001408

08002628 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800262e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8002634:	f7ff ff8a 	bl	800254c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	e005      	b.n	800264a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800263e:	20ff      	movs	r0, #255	; 0xff
 8002640:	f7ff ff90 	bl	8002564 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	3301      	adds	r3, #1
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b09      	cmp	r3, #9
 800264e:	ddf6      	ble.n	800263e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002650:	f7ff ff70 	bl	8002534 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8002654:	2340      	movs	r3, #64	; 0x40
 8002656:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002668:	2395      	movs	r3, #149	; 0x95
 800266a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e009      	b.n	8002686 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8002672:	1d3a      	adds	r2, r7, #4
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff72 	bl	8002564 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b05      	cmp	r3, #5
 800268a:	ddf2      	ble.n	8002672 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 800268c:	e002      	b.n	8002694 <SD_PowerOn+0x6c>
  {
    Count--;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3b01      	subs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8002694:	f7ff ff80 	bl	8002598 <SPI_RxByte>
 8002698:	4603      	mov	r3, r0
 800269a:	2b01      	cmp	r3, #1
 800269c:	d002      	beq.n	80026a4 <SD_PowerOn+0x7c>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f4      	bne.n	800268e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80026a4:	f7ff ff52 	bl	800254c <DESELECT>
  SPI_TxByte(0XFF);
 80026a8:	20ff      	movs	r0, #255	; 0xff
 80026aa:	f7ff ff5b 	bl	8002564 <SPI_TxByte>
  
  PowerFlag = 1;
 80026ae:	4b03      	ldr	r3, [pc, #12]	; (80026bc <SD_PowerOn+0x94>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000056 	.word	0x20000056

080026c0 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80026c4:	4b03      	ldr	r3, [pc, #12]	; (80026d4 <SD_PowerOff+0x14>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000056 	.word	0x20000056

080026d8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80026dc:	4b02      	ldr	r3, [pc, #8]	; (80026e8 <SD_CheckPower+0x10>)
 80026de:	781b      	ldrb	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	20000056 	.word	0x20000056

080026ec <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <SD_RxDataBlock+0x68>)
 80026f8:	220a      	movs	r2, #10
 80026fa:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80026fc:	f7ff ff4c 	bl	8002598 <SPI_RxByte>
 8002700:	4603      	mov	r3, r0
 8002702:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d104      	bne.n	8002714 <SD_RxDataBlock+0x28>
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <SD_RxDataBlock+0x68>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f3      	bne.n	80026fc <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2bfe      	cmp	r3, #254	; 0xfe
 8002718:	d001      	beq.n	800271e <SD_RxDataBlock+0x32>
    return FALSE;
 800271a:	2300      	movs	r3, #0
 800271c:	e016      	b.n	800274c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff55 	bl	80025d4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff4f 	bl	80025d4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	3b02      	subs	r3, #2
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ed      	bne.n	800271e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8002742:	f7ff ff29 	bl	8002598 <SPI_RxByte>
  SPI_RxByte();
 8002746:	f7ff ff27 	bl	8002598 <SPI_RxByte>
  
  return TRUE;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20001409 	.word	0x20001409

08002758 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002764:	2300      	movs	r3, #0
 8002766:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002768:	f7ff ff42 	bl	80025f0 <SD_ReadyWait>
 800276c:	4603      	mov	r3, r0
 800276e:	2bff      	cmp	r3, #255	; 0xff
 8002770:	d001      	beq.n	8002776 <SD_TxDataBlock+0x1e>
    return FALSE;
 8002772:	2300      	movs	r3, #0
 8002774:	e040      	b.n	80027f8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fef3 	bl	8002564 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	2bfd      	cmp	r3, #253	; 0xfd
 8002782:	d031      	beq.n	80027e8 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fee7 	bl	8002564 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	607a      	str	r2, [r7, #4]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fee0 	bl	8002564 <SPI_TxByte>
    } while (--wc);
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	73bb      	strb	r3, [r7, #14]
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1eb      	bne.n	8002788 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80027b0:	f7ff fef2 	bl	8002598 <SPI_RxByte>
    SPI_RxByte();
 80027b4:	f7ff fef0 	bl	8002598 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80027b8:	e00b      	b.n	80027d2 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80027ba:	f7ff feed 	bl	8002598 <SPI_RxByte>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d006      	beq.n	80027da <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80027cc:	7b7b      	ldrb	r3, [r7, #13]
 80027ce:	3301      	adds	r3, #1
 80027d0:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80027d2:	7b7b      	ldrb	r3, [r7, #13]
 80027d4:	2b40      	cmp	r3, #64	; 0x40
 80027d6:	d9f0      	bls.n	80027ba <SD_TxDataBlock+0x62>
 80027d8:	e000      	b.n	80027dc <SD_TxDataBlock+0x84>
        break;
 80027da:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80027dc:	bf00      	nop
 80027de:	f7ff fedb 	bl	8002598 <SPI_RxByte>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0fa      	beq.n	80027de <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d101      	bne.n	80027f6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800280c:	f7ff fef0 	bl	80025f0 <SD_ReadyWait>
 8002810:	4603      	mov	r3, r0
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d001      	beq.n	800281a <SD_SendCmd+0x1a>
    return 0xFF;
 8002816:	23ff      	movs	r3, #255	; 0xff
 8002818:	e040      	b.n	800289c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fea1 	bl	8002564 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	0e1b      	lsrs	r3, r3, #24
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fe9b 	bl	8002564 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	0c1b      	lsrs	r3, r3, #16
 8002832:	b2db      	uxtb	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fe95 	bl	8002564 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	0a1b      	lsrs	r3, r3, #8
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fe8f 	bl	8002564 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fe8a 	bl	8002564 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d101      	bne.n	800285e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800285a:	2395      	movs	r3, #149	; 0x95
 800285c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	2b48      	cmp	r3, #72	; 0x48
 8002862:	d101      	bne.n	8002868 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002864:	2387      	movs	r3, #135	; 0x87
 8002866:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fe7a 	bl	8002564 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2b4c      	cmp	r3, #76	; 0x4c
 8002874:	d101      	bne.n	800287a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002876:	f7ff fe8f 	bl	8002598 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800287a:	230a      	movs	r3, #10
 800287c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800287e:	f7ff fe8b 	bl	8002598 <SPI_RxByte>
 8002882:	4603      	mov	r3, r0
 8002884:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002886:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800288a:	2b00      	cmp	r3, #0
 800288c:	da05      	bge.n	800289a <SD_SendCmd+0x9a>
 800288e:	7bbb      	ldrb	r3, [r7, #14]
 8002890:	3b01      	subs	r3, #1
 8002892:	73bb      	strb	r3, [r7, #14]
 8002894:	7bbb      	ldrb	r3, [r7, #14]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f1      	bne.n	800287e <SD_SendCmd+0x7e>
  
  return res;
 800289a:	7b7b      	ldrb	r3, [r7, #13]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0d5      	b.n	8002a64 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80028b8:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <SD_disk_initialize+0x1c8>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <SD_disk_initialize+0x2a>
    return Stat;        
 80028c6:	4b69      	ldr	r3, [pc, #420]	; (8002a6c <SD_disk_initialize+0x1c8>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	e0ca      	b.n	8002a64 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80028ce:	f7ff feab 	bl	8002628 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80028d2:	f7ff fe2f 	bl	8002534 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80028da:	2100      	movs	r1, #0
 80028dc:	2040      	movs	r0, #64	; 0x40
 80028de:	f7ff ff8f 	bl	8002800 <SD_SendCmd>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	f040 80a5 	bne.w	8002a34 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80028ea:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <SD_disk_initialize+0x1cc>)
 80028ec:	2264      	movs	r2, #100	; 0x64
 80028ee:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80028f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80028f4:	2048      	movs	r0, #72	; 0x48
 80028f6:	f7ff ff83 	bl	8002800 <SD_SendCmd>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d158      	bne.n	80029b2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e00c      	b.n	8002920 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002906:	7bfc      	ldrb	r4, [r7, #15]
 8002908:	f7ff fe46 	bl	8002598 <SPI_RxByte>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4423      	add	r3, r4
 8002916:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	3301      	adds	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d9ef      	bls.n	8002906 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002926:	7abb      	ldrb	r3, [r7, #10]
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 8083 	bne.w	8002a34 <SD_disk_initialize+0x190>
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	2baa      	cmp	r3, #170	; 0xaa
 8002932:	d17f      	bne.n	8002a34 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002934:	2100      	movs	r1, #0
 8002936:	2077      	movs	r0, #119	; 0x77
 8002938:	f7ff ff62 	bl	8002800 <SD_SendCmd>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d807      	bhi.n	8002952 <SD_disk_initialize+0xae>
 8002942:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002946:	2069      	movs	r0, #105	; 0x69
 8002948:	f7ff ff5a 	bl	8002800 <SD_SendCmd>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <SD_disk_initialize+0x1cc>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1eb      	bne.n	8002934 <SD_disk_initialize+0x90>
 800295c:	e000      	b.n	8002960 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800295e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002960:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <SD_disk_initialize+0x1cc>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d064      	beq.n	8002a34 <SD_disk_initialize+0x190>
 800296a:	2100      	movs	r1, #0
 800296c:	207a      	movs	r0, #122	; 0x7a
 800296e:	f7ff ff47 	bl	8002800 <SD_SendCmd>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d15d      	bne.n	8002a34 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e00c      	b.n	8002998 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800297e:	7bfc      	ldrb	r4, [r7, #15]
 8002980:	f7ff fe0a 	bl	8002598 <SPI_RxByte>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	4423      	add	r3, r4
 800298e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	3301      	adds	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d9ef      	bls.n	800297e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800299e:	7a3b      	ldrb	r3, [r7, #8]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <SD_disk_initialize+0x108>
 80029a8:	2306      	movs	r3, #6
 80029aa:	e000      	b.n	80029ae <SD_disk_initialize+0x10a>
 80029ac:	2302      	movs	r3, #2
 80029ae:	73bb      	strb	r3, [r7, #14]
 80029b0:	e040      	b.n	8002a34 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80029b2:	2100      	movs	r1, #0
 80029b4:	2077      	movs	r0, #119	; 0x77
 80029b6:	f7ff ff23 	bl	8002800 <SD_SendCmd>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d808      	bhi.n	80029d2 <SD_disk_initialize+0x12e>
 80029c0:	2100      	movs	r1, #0
 80029c2:	2069      	movs	r0, #105	; 0x69
 80029c4:	f7ff ff1c 	bl	8002800 <SD_SendCmd>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d801      	bhi.n	80029d2 <SD_disk_initialize+0x12e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e000      	b.n	80029d4 <SD_disk_initialize+0x130>
 80029d2:	2301      	movs	r3, #1
 80029d4:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80029d6:	7bbb      	ldrb	r3, [r7, #14]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d10e      	bne.n	80029fa <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80029dc:	2100      	movs	r1, #0
 80029de:	2077      	movs	r0, #119	; 0x77
 80029e0:	f7ff ff0e 	bl	8002800 <SD_SendCmd>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d80e      	bhi.n	8002a08 <SD_disk_initialize+0x164>
 80029ea:	2100      	movs	r1, #0
 80029ec:	2069      	movs	r0, #105	; 0x69
 80029ee:	f7ff ff07 	bl	8002800 <SD_SendCmd>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80029f8:	e00d      	b.n	8002a16 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80029fa:	2100      	movs	r1, #0
 80029fc:	2041      	movs	r0, #65	; 0x41
 80029fe:	f7ff feff 	bl	8002800 <SD_SendCmd>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <SD_disk_initialize+0x1cc>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e1      	bne.n	80029d6 <SD_disk_initialize+0x132>
 8002a12:	e000      	b.n	8002a16 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002a14:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <SD_disk_initialize+0x1cc>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <SD_disk_initialize+0x18c>
 8002a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a24:	2050      	movs	r0, #80	; 0x50
 8002a26:	f7ff feeb 	bl	8002800 <SD_SendCmd>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <SD_disk_initialize+0x1d0>)
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002a3a:	f7ff fd87 	bl	800254c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002a3e:	f7ff fdab 	bl	8002598 <SPI_RxByte>
  
  if (type) 
 8002a42:	7bbb      	ldrb	r3, [r7, #14]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <SD_disk_initialize+0x1c8>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <SD_disk_initialize+0x1c8>)
 8002a56:	701a      	strb	r2, [r3, #0]
 8002a58:	e001      	b.n	8002a5e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002a5a:	f7ff fe31 	bl	80026c0 <SD_PowerOff>
  }
  
  return Stat;
 8002a5e:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <SD_disk_initialize+0x1c8>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	b2db      	uxtb	r3, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}
 8002a6c:	20000021 	.word	0x20000021
 8002a70:	20001409 	.word	0x20001409
 8002a74:	20000055 	.word	0x20000055

08002a78 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e002      	b.n	8002a92 <SD_disk_status+0x1a>
  
  return Stat;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <SD_disk_status+0x24>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b2db      	uxtb	r3, r3
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000021 	.word	0x20000021

08002aa0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4603      	mov	r3, r0
 8002aae:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <SD_disk_read+0x1c>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <SD_disk_read+0x20>
    return RES_PARERR;
 8002abc:	2304      	movs	r3, #4
 8002abe:	e051      	b.n	8002b64 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <SD_disk_read+0xcc>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e048      	b.n	8002b64 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002ad2:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <SD_disk_read+0xd0>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	025b      	lsls	r3, r3, #9
 8002ae2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002ae4:	f7ff fd26 	bl	8002534 <SELECT>
  
  if (count == 1) 
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d111      	bne.n	8002b12 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	2051      	movs	r0, #81	; 0x51
 8002af2:	f7ff fe85 	bl	8002800 <SD_SendCmd>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d129      	bne.n	8002b50 <SD_disk_read+0xb0>
 8002afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b00:	68b8      	ldr	r0, [r7, #8]
 8002b02:	f7ff fdf3 	bl	80026ec <SD_RxDataBlock>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <SD_disk_read+0xb0>
      count = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	e01e      	b.n	8002b50 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	2052      	movs	r0, #82	; 0x52
 8002b16:	f7ff fe73 	bl	8002800 <SD_SendCmd>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d117      	bne.n	8002b50 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002b20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b24:	68b8      	ldr	r0, [r7, #8]
 8002b26:	f7ff fde1 	bl	80026ec <SD_RxDataBlock>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002b36:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1ed      	bne.n	8002b20 <SD_disk_read+0x80>
 8002b44:	e000      	b.n	8002b48 <SD_disk_read+0xa8>
          break;
 8002b46:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002b48:	2100      	movs	r1, #0
 8002b4a:	204c      	movs	r0, #76	; 0x4c
 8002b4c:	f7ff fe58 	bl	8002800 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002b50:	f7ff fcfc 	bl	800254c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002b54:	f7ff fd20 	bl	8002598 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000021 	.word	0x20000021
 8002b70:	20000055 	.word	0x20000055

08002b74 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <SD_disk_write+0x1c>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <SD_disk_write+0x20>
    return RES_PARERR;
 8002b90:	2304      	movs	r3, #4
 8002b92:	e06b      	b.n	8002c6c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <SD_disk_write+0x100>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e062      	b.n	8002c6c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002ba6:	4b33      	ldr	r3, [pc, #204]	; (8002c74 <SD_disk_write+0x100>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e059      	b.n	8002c6c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <SD_disk_write+0x104>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	025b      	lsls	r3, r3, #9
 8002bc8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002bca:	f7ff fcb3 	bl	8002534 <SELECT>
  
  if (count == 1) 
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d110      	bne.n	8002bf6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	2058      	movs	r0, #88	; 0x58
 8002bd8:	f7ff fe12 	bl	8002800 <SD_SendCmd>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d13a      	bne.n	8002c58 <SD_disk_write+0xe4>
 8002be2:	21fe      	movs	r1, #254	; 0xfe
 8002be4:	68b8      	ldr	r0, [r7, #8]
 8002be6:	f7ff fdb7 	bl	8002758 <SD_TxDataBlock>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d033      	beq.n	8002c58 <SD_disk_write+0xe4>
      count = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	e030      	b.n	8002c58 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <SD_disk_write+0x104>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d007      	beq.n	8002c12 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002c02:	2100      	movs	r1, #0
 8002c04:	2077      	movs	r0, #119	; 0x77
 8002c06:	f7ff fdfb 	bl	8002800 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002c0a:	6839      	ldr	r1, [r7, #0]
 8002c0c:	2057      	movs	r0, #87	; 0x57
 8002c0e:	f7ff fdf7 	bl	8002800 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	2059      	movs	r0, #89	; 0x59
 8002c16:	f7ff fdf3 	bl	8002800 <SD_SendCmd>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d11b      	bne.n	8002c58 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002c20:	21fc      	movs	r1, #252	; 0xfc
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f7ff fd98 	bl	8002758 <SD_TxDataBlock>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002c34:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1ee      	bne.n	8002c20 <SD_disk_write+0xac>
 8002c42:	e000      	b.n	8002c46 <SD_disk_write+0xd2>
          break;
 8002c44:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002c46:	21fd      	movs	r1, #253	; 0xfd
 8002c48:	2000      	movs	r0, #0
 8002c4a:	f7ff fd85 	bl	8002758 <SD_TxDataBlock>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002c54:	2301      	movs	r3, #1
 8002c56:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002c58:	f7ff fc78 	bl	800254c <DESELECT>
  SPI_RxByte();
 8002c5c:	f7ff fc9c 	bl	8002598 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf14      	ite	ne
 8002c66:	2301      	movne	r3, #1
 8002c68:	2300      	moveq	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20000021 	.word	0x20000021
 8002c78:	20000055 	.word	0x20000055

08002c7c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b08b      	sub	sp, #44	; 0x2c
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	603a      	str	r2, [r7, #0]
 8002c86:	71fb      	strb	r3, [r7, #7]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002c96:	2304      	movs	r3, #4
 8002c98:	e117      	b.n	8002eca <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002ca0:	79bb      	ldrb	r3, [r7, #6]
 8002ca2:	2b05      	cmp	r3, #5
 8002ca4:	d126      	bne.n	8002cf4 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d00e      	beq.n	8002ccc <SD_disk_ioctl+0x50>
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d012      	beq.n	8002cd8 <SD_disk_ioctl+0x5c>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11a      	bne.n	8002cec <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8002cb6:	f7ff fd0f 	bl	80026d8 <SD_CheckPower>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8002cc0:	f7ff fcfe 	bl	80026c0 <SD_PowerOff>
      res = RES_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002cca:	e0fc      	b.n	8002ec6 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8002ccc:	f7ff fcac 	bl	8002628 <SD_PowerOn>
      res = RES_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002cd6:	e0f6      	b.n	8002ec6 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	1c5c      	adds	r4, r3, #1
 8002cdc:	f7ff fcfc 	bl	80026d8 <SD_CheckPower>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002cea:	e0ec      	b.n	8002ec6 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8002cec:	2304      	movs	r3, #4
 8002cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002cf2:	e0e8      	b.n	8002ec6 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002cf4:	4b77      	ldr	r3, [pc, #476]	; (8002ed4 <SD_disk_ioctl+0x258>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0e1      	b.n	8002eca <SD_disk_ioctl+0x24e>
    
    SELECT();
 8002d06:	f7ff fc15 	bl	8002534 <SELECT>
    
    switch (ctrl) 
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	2b0d      	cmp	r3, #13
 8002d0e:	f200 80cb 	bhi.w	8002ea8 <SD_disk_ioctl+0x22c>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <SD_disk_ioctl+0x9c>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002e13 	.word	0x08002e13
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002e03 	.word	0x08002e03
 8002d24:	08002ea9 	.word	0x08002ea9
 8002d28:	08002ea9 	.word	0x08002ea9
 8002d2c:	08002ea9 	.word	0x08002ea9
 8002d30:	08002ea9 	.word	0x08002ea9
 8002d34:	08002ea9 	.word	0x08002ea9
 8002d38:	08002ea9 	.word	0x08002ea9
 8002d3c:	08002ea9 	.word	0x08002ea9
 8002d40:	08002ea9 	.word	0x08002ea9
 8002d44:	08002e25 	.word	0x08002e25
 8002d48:	08002e49 	.word	0x08002e49
 8002d4c:	08002e6d 	.word	0x08002e6d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002d50:	2100      	movs	r1, #0
 8002d52:	2049      	movs	r0, #73	; 0x49
 8002d54:	f7ff fd54 	bl	8002800 <SD_SendCmd>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 80a8 	bne.w	8002eb0 <SD_disk_ioctl+0x234>
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	2110      	movs	r1, #16
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fcc0 	bl	80026ec <SD_RxDataBlock>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 809e 	beq.w	8002eb0 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8002d74:	7b3b      	ldrb	r3, [r7, #12]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10e      	bne.n	8002d9c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002d7e:	7d7b      	ldrb	r3, [r7, #21]
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	7d3b      	ldrb	r3, [r7, #20]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	021b      	lsls	r3, r3, #8
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002d92:	8bfb      	ldrh	r3, [r7, #30]
 8002d94:	029a      	lsls	r2, r3, #10
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e02e      	b.n	8002dfa <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002d9c:	7c7b      	ldrb	r3, [r7, #17]
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	7dbb      	ldrb	r3, [r7, #22]
 8002da6:	09db      	lsrs	r3, r3, #7
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	7d7b      	ldrb	r3, [r7, #21]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 0306 	and.w	r3, r3, #6
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4413      	add	r3, r2
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002dc4:	7d3b      	ldrb	r3, [r7, #20]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	7cbb      	ldrb	r3, [r7, #18]
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002dec:	8bfa      	ldrh	r2, [r7, #30]
 8002dee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002df2:	3b09      	subs	r3, #9
 8002df4:	409a      	lsls	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002e00:	e056      	b.n	8002eb0 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e08:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e10:	e055      	b.n	8002ebe <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002e12:	f7ff fbed 	bl	80025f0 <SD_ReadyWait>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2bff      	cmp	r3, #255	; 0xff
 8002e1a:	d14b      	bne.n	8002eb4 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e22:	e047      	b.n	8002eb4 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002e24:	2100      	movs	r1, #0
 8002e26:	2049      	movs	r0, #73	; 0x49
 8002e28:	f7ff fcea 	bl	8002800 <SD_SendCmd>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d142      	bne.n	8002eb8 <SD_disk_ioctl+0x23c>
 8002e32:	2110      	movs	r1, #16
 8002e34:	6a38      	ldr	r0, [r7, #32]
 8002e36:	f7ff fc59 	bl	80026ec <SD_RxDataBlock>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d03b      	beq.n	8002eb8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e46:	e037      	b.n	8002eb8 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002e48:	2100      	movs	r1, #0
 8002e4a:	204a      	movs	r0, #74	; 0x4a
 8002e4c:	f7ff fcd8 	bl	8002800 <SD_SendCmd>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d132      	bne.n	8002ebc <SD_disk_ioctl+0x240>
 8002e56:	2110      	movs	r1, #16
 8002e58:	6a38      	ldr	r0, [r7, #32]
 8002e5a:	f7ff fc47 	bl	80026ec <SD_RxDataBlock>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d02b      	beq.n	8002ebc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002e6a:	e027      	b.n	8002ebc <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	207a      	movs	r0, #122	; 0x7a
 8002e70:	f7ff fcc6 	bl	8002800 <SD_SendCmd>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e80:	e00b      	b.n	8002e9a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8002e82:	6a3c      	ldr	r4, [r7, #32]
 8002e84:	1c63      	adds	r3, r4, #1
 8002e86:	623b      	str	r3, [r7, #32]
 8002e88:	f7ff fb86 	bl	8002598 <SPI_RxByte>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002e90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e94:	3301      	adds	r3, #1
 8002e96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d9ef      	bls.n	8002e82 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eae:	e006      	b.n	8002ebe <SD_disk_ioctl+0x242>
      break;
 8002eb0:	bf00      	nop
 8002eb2:	e004      	b.n	8002ebe <SD_disk_ioctl+0x242>
      break;
 8002eb4:	bf00      	nop
 8002eb6:	e002      	b.n	8002ebe <SD_disk_ioctl+0x242>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <SD_disk_ioctl+0x242>
      break;
 8002ebc:	bf00      	nop
    }
    
    DESELECT();
 8002ebe:	f7ff fb45 	bl	800254c <DESELECT>
    SPI_RxByte();
 8002ec2:	f7ff fb69 	bl	8002598 <SPI_RxByte>
  }
  
  return res;
 8002ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	372c      	adds	r7, #44	; 0x2c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000021 	.word	0x20000021

08002ed8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fcdd 	bl	80028a4 <SD_disk_initialize>
 8002eea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fdb9 	bl	8002a78 <SD_disk_status>
 8002f06:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8002f20:	7bf8      	ldrb	r0, [r7, #15]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	f7ff fdba 	bl	8002aa0 <SD_disk_read>
 8002f2c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4603      	mov	r3, r0
 8002f44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8002f46:	7bf8      	ldrb	r0, [r7, #15]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	f7ff fe11 	bl	8002b74 <SD_disk_write>
 8002f52:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3710      	adds	r7, #16
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	603a      	str	r2, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8002f6c:	79b9      	ldrb	r1, [r7, #6]
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fe82 	bl	8002c7c <SD_disk_ioctl>
 8002f78:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
	...

08002f84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	4a08      	ldr	r2, [pc, #32]	; (8002fb4 <disk_status+0x30>)
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	4905      	ldr	r1, [pc, #20]	; (8002fb4 <disk_status+0x30>)
 8002f9e:	440a      	add	r2, r1
 8002fa0:	7a12      	ldrb	r2, [r2, #8]
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4798      	blx	r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000278 	.word	0x20000278

08002fb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <disk_initialize+0x48>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d111      	bne.n	8002ff4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <disk_initialize+0x48>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <disk_initialize+0x48>)
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	79fa      	ldrb	r2, [r7, #7]
 8002fe6:	4906      	ldr	r1, [pc, #24]	; (8003000 <disk_initialize+0x48>)
 8002fe8:	440a      	add	r2, r1
 8002fea:	7a12      	ldrb	r2, [r2, #8]
 8002fec:	4610      	mov	r0, r2
 8002fee:	4798      	blx	r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000278 	.word	0x20000278

08003004 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <disk_read+0x3c>)
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	689c      	ldr	r4, [r3, #8]
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <disk_read+0x3c>)
 8003024:	4413      	add	r3, r2
 8003026:	7a18      	ldrb	r0, [r3, #8]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	47a0      	blx	r4
 8003030:	4603      	mov	r3, r0
 8003032:	75fb      	strb	r3, [r7, #23]
  return res;
 8003034:	7dfb      	ldrb	r3, [r7, #23]
}
 8003036:	4618      	mov	r0, r3
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd90      	pop	{r4, r7, pc}
 800303e:	bf00      	nop
 8003040:	20000278 	.word	0x20000278

08003044 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4603      	mov	r3, r0
 8003052:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <disk_write+0x3c>)
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	68dc      	ldr	r4, [r3, #12]
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	4a07      	ldr	r2, [pc, #28]	; (8003080 <disk_write+0x3c>)
 8003064:	4413      	add	r3, r2
 8003066:	7a18      	ldrb	r0, [r3, #8]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	47a0      	blx	r4
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]
  return res;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop
 8003080:	20000278 	.word	0x20000278

08003084 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	603a      	str	r2, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
 8003090:	460b      	mov	r3, r1
 8003092:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4a09      	ldr	r2, [pc, #36]	; (80030bc <disk_ioctl+0x38>)
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	79fa      	ldrb	r2, [r7, #7]
 80030a2:	4906      	ldr	r1, [pc, #24]	; (80030bc <disk_ioctl+0x38>)
 80030a4:	440a      	add	r2, r1
 80030a6:	7a10      	ldrb	r0, [r2, #8]
 80030a8:	79b9      	ldrb	r1, [r7, #6]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4798      	blx	r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	73fb      	strb	r3, [r7, #15]
  return res;
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000278 	.word	0x20000278

080030c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80030c0:	b480      	push	{r7}
 80030c2:	b087      	sub	sp, #28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80030d4:	e007      	b.n	80030e6 <mem_cpy+0x26>
		*d++ = *s++;
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	1c53      	adds	r3, r2, #1
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	6179      	str	r1, [r7, #20]
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	1e5a      	subs	r2, r3, #1
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f2      	bne.n	80030d6 <mem_cpy+0x16>
}
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	617b      	str	r3, [r7, #20]

	while (cnt--)
 800310a:	e005      	b.n	8003118 <mem_set+0x1e>
		*d++ = (BYTE)val;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	617a      	str	r2, [r7, #20]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	1e5a      	subs	r2, r3, #1
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f4      	bne.n	800310c <mem_set+0x12>
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr

0800312c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003144:	bf00      	nop
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <mem_cmp+0x40>
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	61fa      	str	r2, [r7, #28]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	61ba      	str	r2, [r7, #24]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	1acb      	subs	r3, r1, r3
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0ec      	beq.n	8003146 <mem_cmp+0x1a>
	return r;
 800316c:	697b      	ldr	r3, [r7, #20]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr

08003178 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003182:	e002      	b.n	800318a <chk_chr+0x12>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3301      	adds	r3, #1
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <chk_chr+0x26>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4293      	cmp	r3, r2
 800319c:	d1f2      	bne.n	8003184 <chk_chr+0xc>
	return *str;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	781b      	ldrb	r3, [r3, #0]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e035      	b.n	800322c <chk_lock+0x80>
		if (Files[i].fs) {	/* Existing entry */
 80031c0:	492e      	ldr	r1, [pc, #184]	; (800327c <chk_lock+0xd0>)
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d026      	beq.n	8003222 <chk_lock+0x76>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80031d4:	4929      	ldr	r1, [pc, #164]	; (800327c <chk_lock+0xd0>)
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d11c      	bne.n	8003226 <chk_lock+0x7a>
				Files[i].clu == dp->sclust &&
 80031ec:	4923      	ldr	r1, [pc, #140]	; (800327c <chk_lock+0xd0>)
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	3304      	adds	r3, #4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8003202:	429a      	cmp	r2, r3
 8003204:	d10f      	bne.n	8003226 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 8003206:	491d      	ldr	r1, [pc, #116]	; (800327c <chk_lock+0xd0>)
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3308      	adds	r3, #8
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 800321c:	429a      	cmp	r2, r3
 800321e:	d102      	bne.n	8003226 <chk_lock+0x7a>
				Files[i].idx == dp->index) break;
 8003220:	e007      	b.n	8003232 <chk_lock+0x86>
		} else {			/* Blank entry */
			be = 1;
 8003222:	2301      	movs	r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3301      	adds	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d9c6      	bls.n	80031c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d109      	bne.n	800324c <chk_lock+0xa0>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <chk_lock+0x98>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d101      	bne.n	8003248 <chk_lock+0x9c>
 8003244:	2300      	movs	r3, #0
 8003246:	e013      	b.n	8003270 <chk_lock+0xc4>
 8003248:	2312      	movs	r3, #18
 800324a:	e011      	b.n	8003270 <chk_lock+0xc4>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <chk_lock+0xbe>
 8003252:	490a      	ldr	r1, [pc, #40]	; (800327c <chk_lock+0xd0>)
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	330a      	adds	r3, #10
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003268:	d101      	bne.n	800326e <chk_lock+0xc2>
 800326a:	2310      	movs	r3, #16
 800326c:	e000      	b.n	8003270 <chk_lock+0xc4>
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	20000060 	.word	0x20000060

08003280 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003286:	2300      	movs	r3, #0
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	e002      	b.n	8003292 <enq_lock+0x12>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3301      	adds	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d809      	bhi.n	80032ac <enq_lock+0x2c>
 8003298:	490a      	ldr	r1, [pc, #40]	; (80032c4 <enq_lock+0x44>)
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ef      	bne.n	800328c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	bf14      	ite	ne
 80032b2:	2301      	movne	r3, #1
 80032b4:	2300      	moveq	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000060 	.word	0x20000060

080032c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e028      	b.n	800332a <inc_lock+0x62>
		if (Files[i].fs == dp->fs &&
 80032d8:	4952      	ldr	r1, [pc, #328]	; (8003424 <inc_lock+0x15c>)
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d119      	bne.n	8003324 <inc_lock+0x5c>
			Files[i].clu == dp->sclust &&
 80032f0:	494c      	ldr	r1, [pc, #304]	; (8003424 <inc_lock+0x15c>)
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4613      	mov	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	3304      	adds	r3, #4
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8003306:	429a      	cmp	r2, r3
 8003308:	d10c      	bne.n	8003324 <inc_lock+0x5c>
			Files[i].idx == dp->index) break;
 800330a:	4946      	ldr	r1, [pc, #280]	; (8003424 <inc_lock+0x15c>)
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3308      	adds	r3, #8
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8003320:	429a      	cmp	r2, r3
 8003322:	d006      	beq.n	8003332 <inc_lock+0x6a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3301      	adds	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d9d3      	bls.n	80032d8 <inc_lock+0x10>
 8003330:	e000      	b.n	8003334 <inc_lock+0x6c>
			Files[i].idx == dp->index) break;
 8003332:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d142      	bne.n	80033c0 <inc_lock+0xf8>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800333a:	2300      	movs	r3, #0
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e002      	b.n	8003346 <inc_lock+0x7e>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3301      	adds	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d809      	bhi.n	8003360 <inc_lock+0x98>
 800334c:	4935      	ldr	r1, [pc, #212]	; (8003424 <inc_lock+0x15c>)
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ef      	bne.n	8003340 <inc_lock+0x78>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d101      	bne.n	800336a <inc_lock+0xa2>
 8003366:	2300      	movs	r3, #0
 8003368:	e057      	b.n	800341a <inc_lock+0x152>
		Files[i].fs = dp->fs;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6819      	ldr	r1, [r3, #0]
 800336e:	482d      	ldr	r0, [pc, #180]	; (8003424 <inc_lock+0x15c>)
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4403      	add	r3, r0
 800337c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	4828      	ldr	r0, [pc, #160]	; (8003424 <inc_lock+0x15c>)
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4403      	add	r3, r0
 8003390:	3304      	adds	r3, #4
 8003392:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	88d8      	ldrh	r0, [r3, #6]
 8003398:	4922      	ldr	r1, [pc, #136]	; (8003424 <inc_lock+0x15c>)
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	3308      	adds	r3, #8
 80033a8:	4602      	mov	r2, r0
 80033aa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80033ac:	491d      	ldr	r1, [pc, #116]	; (8003424 <inc_lock+0x15c>)
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	330a      	adds	r3, #10
 80033bc:	2200      	movs	r2, #0
 80033be:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <inc_lock+0x118>
 80033c6:	4917      	ldr	r1, [pc, #92]	; (8003424 <inc_lock+0x15c>)
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	330a      	adds	r3, #10
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <inc_lock+0x118>
 80033dc:	2300      	movs	r3, #0
 80033de:	e01c      	b.n	800341a <inc_lock+0x152>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <inc_lock+0x136>
 80033e6:	490f      	ldr	r1, [pc, #60]	; (8003424 <inc_lock+0x15c>)
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	330a      	adds	r3, #10
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	b299      	uxth	r1, r3
 80033fc:	e001      	b.n	8003402 <inc_lock+0x13a>
 80033fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003402:	4808      	ldr	r0, [pc, #32]	; (8003424 <inc_lock+0x15c>)
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4403      	add	r3, r0
 8003410:	330a      	adds	r3, #10
 8003412:	460a      	mov	r2, r1
 8003414:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3301      	adds	r3, #1
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000060 	.word	0x20000060

08003428 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d82e      	bhi.n	800349a <dec_lock+0x72>
		n = Files[i].ctr;
 800343c:	491b      	ldr	r1, [pc, #108]	; (80034ac <dec_lock+0x84>)
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	330a      	adds	r3, #10
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003456:	d101      	bne.n	800345c <dec_lock+0x34>
 8003458:	2300      	movs	r3, #0
 800345a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d002      	beq.n	8003468 <dec_lock+0x40>
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	3b01      	subs	r3, #1
 8003466:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003468:	4910      	ldr	r1, [pc, #64]	; (80034ac <dec_lock+0x84>)
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	330a      	adds	r3, #10
 8003478:	89fa      	ldrh	r2, [r7, #14]
 800347a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800347c:	89fb      	ldrh	r3, [r7, #14]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <dec_lock+0x6c>
 8003482:	490a      	ldr	r1, [pc, #40]	; (80034ac <dec_lock+0x84>)
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	737b      	strb	r3, [r7, #13]
 8003498:	e001      	b.n	800349e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800349a:	2302      	movs	r3, #2
 800349c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800349e:	7b7b      	ldrb	r3, [r7, #13]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000060 	.word	0x20000060

080034b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e016      	b.n	80034ec <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80034be:	490f      	ldr	r1, [pc, #60]	; (80034fc <clear_lock+0x4c>)
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d108      	bne.n	80034e6 <clear_lock+0x36>
 80034d4:	4909      	ldr	r1, [pc, #36]	; (80034fc <clear_lock+0x4c>)
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3301      	adds	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d9e5      	bls.n	80034be <clear_lock+0xe>
	}
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	20000060 	.word	0x20000060

08003500 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003512:	3304      	adds	r3, #4
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d047      	beq.n	80035aa <sync_window+0xaa>
		wsect = fs->winsect;	/* Current sector number */
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003520:	330c      	adds	r3, #12
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352c:	3301      	adds	r3, #1
 800352e:	7818      	ldrb	r0, [r3, #0]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	2301      	movs	r3, #1
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	f7ff fd85 	bl	8003044 <disk_write>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <sync_window+0x46>
			res = FR_DISK_ERR;
 8003540:	2301      	movs	r3, #1
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e031      	b.n	80035aa <sync_window+0xaa>
		} else {
			fs->wflag = 0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354c:	3304      	adds	r3, #4
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	1ad2      	subs	r2, r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003564:	3318      	adds	r3, #24
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d21e      	bcs.n	80035aa <sync_window+0xaa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003572:	3303      	adds	r3, #3
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	e014      	b.n	80035a4 <sync_window+0xa4>
					wsect += fs->fsize;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003580:	3318      	adds	r3, #24
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4413      	add	r3, r2
 8003588:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003590:	3301      	adds	r3, #1
 8003592:	7818      	ldrb	r0, [r3, #0]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	2301      	movs	r3, #1
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	f7ff fd53 	bl	8003044 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d8e7      	bhi.n	800357a <sync_window+0x7a>
				}
			}
		}
	}
	return res;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80035c8:	330c      	adds	r3, #12
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d01f      	beq.n	8003612 <move_window+0x5e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff ff94 	bl	8003500 <sync_window>
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d117      	bne.n	8003612 <move_window+0x5e>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e8:	3301      	adds	r3, #1
 80035ea:	7818      	ldrb	r0, [r3, #0]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	2301      	movs	r3, #1
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	f7ff fd07 	bl	8003004 <disk_read>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <move_window+0x52>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800360c:	330c      	adds	r3, #12
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	601a      	str	r2, [r3, #0]
		}
	}
	return res;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff ff6b 	bl	8003500 <sync_window>
 800362a:	4603      	mov	r3, r0
 800362c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	2b00      	cmp	r3, #0
 8003632:	f040 80bd 	bne.w	80037b0 <sync_fs+0x194>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b03      	cmp	r3, #3
 8003640:	f040 80a7 	bne.w	8003792 <sync_fs+0x176>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800364a:	3305      	adds	r3, #5
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	f040 809f 	bne.w	8003792 <sync_fs+0x176>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800365c:	330a      	adds	r3, #10
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	2100      	movs	r1, #0
 8003664:	f7ff fd49 	bl	80030fa <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2255      	movs	r2, #85	; 0x55
 800366c:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	22aa      	movs	r2, #170	; 0xaa
 8003674:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2252      	movs	r2, #82	; 0x52
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2252      	movs	r2, #82	; 0x52
 8003682:	705a      	strb	r2, [r3, #1]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2261      	movs	r2, #97	; 0x61
 8003688:	709a      	strb	r2, [r3, #2]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2241      	movs	r2, #65	; 0x41
 800368e:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2272      	movs	r2, #114	; 0x72
 8003694:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2272      	movs	r2, #114	; 0x72
 800369c:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2241      	movs	r2, #65	; 0x41
 80036a4:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2261      	movs	r2, #97	; 0x61
 80036ac:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036b6:	3310      	adds	r3, #16
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036c8:	3310      	adds	r3, #16
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	0a1b      	lsrs	r3, r3, #8
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036e0:	3310      	adds	r3, #16
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036f4:	3310      	adds	r3, #16
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0e1b      	lsrs	r3, r3, #24
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	330c      	adds	r3, #12
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b2da      	uxtb	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800371a:	330c      	adds	r3, #12
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	b29b      	uxth	r3, r3
 8003724:	b2da      	uxtb	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003732:	330c      	adds	r3, #12
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	0c1b      	lsrs	r3, r3, #16
 8003738:	b2da      	uxtb	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003746:	330c      	adds	r3, #12
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e1b      	lsrs	r3, r3, #24
 800374c:	b2da      	uxtb	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800375a:	331c      	adds	r3, #28
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003766:	330c      	adds	r3, #12
 8003768:	601a      	str	r2, [r3, #0]
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003770:	3301      	adds	r3, #1
 8003772:	7818      	ldrb	r0, [r3, #0]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800377c:	330c      	adds	r3, #12
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2301      	movs	r3, #1
 8003782:	f7ff fc5f 	bl	8003044 <disk_write>
			fs->fsi_flag = 0;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	3305      	adds	r3, #5
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003798:	3301      	adds	r3, #1
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2200      	movs	r2, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fc6f 	bl	8003084 <disk_ioctl>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <sync_fs+0x194>
			res = FR_DISK_ERR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	3b02      	subs	r3, #2
 80037c8:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037d0:	3314      	adds	r3, #20
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3b02      	subs	r3, #2
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d301      	bcc.n	80037e0 <clust2sect+0x26>
 80037dc:	2300      	movs	r3, #0
 80037de:	e00e      	b.n	80037fe <clust2sect+0x44>
	return clst * fs->csize + fs->database;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037e6:	3302      	adds	r3, #2
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	fb03 f202 	mul.w	r2, r3, r2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80037f8:	3308      	adds	r3, #8
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4413      	add	r3, r2
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d907      	bls.n	8003828 <get_fat+0x20>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381e:	3314      	adds	r3, #20
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <get_fat+0x26>
		val = 1;	/* Internal error */
 8003828:	2301      	movs	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	e0e9      	b.n	8003a02 <get_fat+0x1fa>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d068      	beq.n	8003912 <get_fat+0x10a>
 8003840:	2b03      	cmp	r3, #3
 8003842:	f000 8099 	beq.w	8003978 <get_fat+0x170>
 8003846:	2b01      	cmp	r3, #1
 8003848:	f040 80d1 	bne.w	80039ee <get_fat+0x1e6>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003868:	330a      	adds	r3, #10
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	4619      	mov	r1, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	fbb3 f3f1 	udiv	r3, r3, r1
 8003874:	4413      	add	r3, r2
 8003876:	4619      	mov	r1, r3
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff fe9b 	bl	80035b4 <move_window>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	f040 80b7 	bne.w	80039f4 <get_fat+0x1ec>
			wc = fs->win.d8[bc++ % SS(fs)];
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	60fa      	str	r2, [r7, #12]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003892:	320a      	adds	r2, #10
 8003894:	8812      	ldrh	r2, [r2, #0]
 8003896:	fbb3 f1f2 	udiv	r1, r3, r2
 800389a:	fb02 f201 	mul.w	r2, r2, r1
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038b4:	330a      	adds	r3, #10
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	4619      	mov	r1, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c0:	4413      	add	r3, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff fe75 	bl	80035b4 <move_window>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8093 	bne.w	80039f8 <get_fat+0x1f0>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d8:	330a      	adds	r3, #10
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	461a      	mov	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80038e4:	fb02 f201 	mul.w	r2, r2, r1
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	5cd3      	ldrb	r3, [r2, r3]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	461a      	mov	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <get_fat+0x100>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	e002      	b.n	800390e <get_fat+0x106>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	617b      	str	r3, [r7, #20]
			break;
 8003910:	e077      	b.n	8003a02 <get_fat+0x1fa>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003920:	330a      	adds	r3, #10
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	b29b      	uxth	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003930:	4413      	add	r3, r2
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fe3d 	bl	80035b4 <move_window>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d15d      	bne.n	80039fc <get_fat+0x1f4>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	005a      	lsls	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394a:	330a      	adds	r3, #10
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003952:	fb03 f301 	mul.w	r3, r3, r1
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3301      	adds	r3, #1
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	b21a      	sxth	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b21b      	sxth	r3, r3
 800396e:	4313      	orrs	r3, r2
 8003970:	b21b      	sxth	r3, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	617b      	str	r3, [r7, #20]
			break;
 8003976:	e044      	b.n	8003a02 <get_fat+0x1fa>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003986:	330a      	adds	r3, #10
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	b29b      	uxth	r3, r3
 800398e:	4619      	mov	r1, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	fbb3 f3f1 	udiv	r3, r3, r1
 8003996:	4413      	add	r3, r2
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fe0a 	bl	80035b4 <move_window>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d12c      	bne.n	8003a00 <get_fat+0x1f8>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	009a      	lsls	r2, r3, #2
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b0:	330a      	adds	r3, #10
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80039b8:	fb03 f301 	mul.w	r3, r3, r1
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	3303      	adds	r3, #3
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	061a      	lsls	r2, r3, #24
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	3302      	adds	r3, #2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	4313      	orrs	r3, r2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	3201      	adds	r2, #1
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	0212      	lsls	r2, r2, #8
 80039de:	4313      	orrs	r3, r2
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	7812      	ldrb	r2, [r2, #0]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039ea:	617b      	str	r3, [r7, #20]
			break;
 80039ec:	e009      	b.n	8003a02 <get_fat+0x1fa>

		default:
			val = 1;	/* Internal error */
 80039ee:	2301      	movs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e006      	b.n	8003a02 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039f4:	bf00      	nop
 80039f6:	e004      	b.n	8003a02 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <get_fat+0x1fa>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a00:	bf00      	nop
		}
	}

	return val;
 8003a02:	697b      	ldr	r3, [r7, #20]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d907      	bls.n	8003a2e <put_fat+0x22>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a24:	3314      	adds	r3, #20
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d302      	bcc.n	8003a34 <put_fat+0x28>
		res = FR_INT_ERR;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e143      	b.n	8003cbc <put_fat+0x2b0>

	} else {
		switch (fs->fs_type) {
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	f000 809a 	beq.w	8003b76 <put_fat+0x16a>
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	f000 80d3 	beq.w	8003bee <put_fat+0x1e2>
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 812d 	bne.w	8003ca8 <put_fat+0x29c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4413      	add	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a6a:	330a      	adds	r3, #10
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a76:	4413      	add	r3, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f7ff fd9a 	bl	80035b4 <move_window>
 8003a80:	4603      	mov	r3, r0
 8003a82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 8111 	bne.w	8003cae <put_fat+0x2a2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	617a      	str	r2, [r7, #20]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003a98:	320a      	adds	r2, #10
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003aa0:	fb02 f201 	mul.w	r2, r2, r1
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <put_fat+0xc6>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	b25b      	sxtb	r3, r3
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	b25a      	sxtb	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	b25b      	sxtb	r3, r3
 8003aca:	4313      	orrs	r3, r2
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	e001      	b.n	8003ad6 <put_fat+0xca>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	701a      	strb	r2, [r3, #0]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af4:	330a      	adds	r3, #10
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	4619      	mov	r1, r3
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b00:	4413      	add	r3, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff fd55 	bl	80035b4 <move_window>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b0e:	7ffb      	ldrb	r3, [r7, #31]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f040 80ce 	bne.w	8003cb2 <put_fat+0x2a6>
			p = &fs->win.d8[bc % SS(fs)];
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1c:	330a      	adds	r3, #10
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b28:	fb02 f201 	mul.w	r2, r2, r1
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <put_fat+0x13a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e00e      	b.n	8003b64 <put_fat+0x158>
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f023 030f 	bic.w	r3, r3, #15
 8003b50:	b25a      	sxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	b25b      	sxtb	r3, r3
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	b25b      	sxtb	r3, r3
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6e:	3304      	adds	r3, #4
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
			break;
 8003b74:	e0a2      	b.n	8003cbc <put_fat+0x2b0>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b84:	330a      	adds	r3, #10
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b94:	4413      	add	r3, r2
 8003b96:	4619      	mov	r1, r3
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff fd0b 	bl	80035b4 <move_window>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 8086 	bne.w	8003cb6 <put_fat+0x2aa>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	005a      	lsls	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb4:	330a      	adds	r3, #10
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003bbc:	fb03 f301 	mul.w	r3, r3, r1
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be6:	3304      	adds	r3, #4
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
			break;
 8003bec:	e066      	b.n	8003cbc <put_fat+0x2b0>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bfc:	330a      	adds	r3, #10
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	4619      	mov	r1, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c0c:	4413      	add	r3, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7ff fccf 	bl	80035b4 <move_window>
 8003c16:	4603      	mov	r3, r0
 8003c18:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d14c      	bne.n	8003cba <put_fat+0x2ae>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2a:	330a      	adds	r3, #10
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c32:	fb03 f301 	mul.w	r3, r3, r1
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	3303      	adds	r3, #3
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	061a      	lsls	r2, r3, #24
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	3302      	adds	r3, #2
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	041b      	lsls	r3, r3, #16
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	3201      	adds	r2, #1
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	0212      	lsls	r2, r2, #8
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	7812      	ldrb	r2, [r2, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0c1a      	lsrs	r2, r3, #16
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	3302      	adds	r3, #2
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0e1a      	lsrs	r2, r3, #24
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3303      	adds	r3, #3
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
			break;
 8003ca6:	e009      	b.n	8003cbc <put_fat+0x2b0>

		default :
			res = FR_INT_ERR;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e006      	b.n	8003cbc <put_fat+0x2b0>
			if (res != FR_OK) break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <put_fat+0x2b0>
			if (res != FR_OK) break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <put_fat+0x2b0>
			if (res != FR_OK) break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <put_fat+0x2b0>
			if (res != FR_OK) break;
 8003cba:	bf00      	nop
		}
	}

	return res;
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d907      	bls.n	8003ce6 <remove_chain+0x20>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cdc:	3314      	adds	r3, #20
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <remove_chain+0x26>
		res = FR_INT_ERR;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	73fb      	strb	r3, [r7, #15]
 8003cea:	e04f      	b.n	8003d8c <remove_chain+0xc6>

	} else {
		res = FR_OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003cf0:	e040      	b.n	8003d74 <remove_chain+0xae>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff fd87 	bl	8003808 <get_fat>
 8003cfa:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d041      	beq.n	8003d86 <remove_chain+0xc0>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d102      	bne.n	8003d0e <remove_chain+0x48>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e03e      	b.n	8003d8c <remove_chain+0xc6>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d102      	bne.n	8003d1c <remove_chain+0x56>
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
 8003d1a:	e037      	b.n	8003d8c <remove_chain+0xc6>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fe73 	bl	8003a0c <put_fat>
 8003d26:	4603      	mov	r3, r0
 8003d28:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d12c      	bne.n	8003d8a <remove_chain+0xc4>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d36:	3310      	adds	r3, #16
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3e:	d017      	beq.n	8003d70 <remove_chain+0xaa>
				fs->free_clust++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d46:	3310      	adds	r3, #16
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d52:	3310      	adds	r3, #16
 8003d54:	601a      	str	r2, [r3, #0]
				fs->fsi_flag |= 1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5c:	3305      	adds	r3, #5
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6c:	3305      	adds	r3, #5
 8003d6e:	701a      	strb	r2, [r3, #0]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d3b6      	bcc.n	8003cf2 <remove_chain+0x2c>
 8003d84:	e002      	b.n	8003d8c <remove_chain+0xc6>
			if (nxt == 0) break;				/* Empty cluster? */
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <remove_chain+0xc6>
			if (res != FR_OK) break;
 8003d8a:	bf00      	nop
		}
	}

	return res;
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d113      	bne.n	8003dce <create_chain+0x38>
		scl = fs->last_clust;			/* Get suggested start point */
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dac:	330c      	adds	r3, #12
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <create_chain+0x32>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d31e      	bcc.n	8003e06 <create_chain+0x70>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	e01b      	b.n	8003e06 <create_chain+0x70>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003dce:	6839      	ldr	r1, [r7, #0]
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fd19 	bl	8003808 <get_fat>
 8003dd6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d801      	bhi.n	8003de2 <create_chain+0x4c>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e086      	b.n	8003ef0 <create_chain+0x15a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d101      	bne.n	8003dee <create_chain+0x58>
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	e080      	b.n	8003ef0 <create_chain+0x15a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	3314      	adds	r3, #20
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d201      	bcs.n	8003e02 <create_chain+0x6c>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	e076      	b.n	8003ef0 <create_chain+0x15a>
		scl = clst;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e16:	3314      	adds	r3, #20
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d307      	bcc.n	8003e30 <create_chain+0x9a>
			ncl = 2;
 8003e20:	2302      	movs	r3, #2
 8003e22:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d901      	bls.n	8003e30 <create_chain+0x9a>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e05f      	b.n	8003ef0 <create_chain+0x15a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff fce8 	bl	8003808 <get_fat>
 8003e38:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <create_chain+0xc8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d002      	beq.n	8003e4e <create_chain+0xb8>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <create_chain+0xbc>
			return cs;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	e04e      	b.n	8003ef0 <create_chain+0x15a>
		if (ncl == scl) return 0;		/* No free cluster */
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d1d7      	bne.n	8003e0a <create_chain+0x74>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e048      	b.n	8003ef0 <create_chain+0x15a>
		if (cs == 0) break;				/* Found a free cluster */
 8003e5e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8003e60:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003e64:	6979      	ldr	r1, [r7, #20]
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff fdd0 	bl	8003a0c <put_fat>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <create_chain+0xf4>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d006      	beq.n	8003e8a <create_chain+0xf4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fdc3 	bl	8003a0c <put_fat>
 8003e86:	4603      	mov	r3, r0
 8003e88:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d126      	bne.n	8003ede <create_chain+0x148>
		fs->last_clust = ncl;			/* Update FSINFO */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e96:	330c      	adds	r3, #12
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	601a      	str	r2, [r3, #0]
		if (fs->free_clust != 0xFFFFFFFF) {
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ea2:	3310      	adds	r3, #16
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eaa:	d020      	beq.n	8003eee <create_chain+0x158>
			fs->free_clust--;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eb2:	3310      	adds	r3, #16
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	1e5a      	subs	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebe:	3310      	adds	r3, #16
 8003ec0:	601a      	str	r2, [r3, #0]
			fs->fsi_flag |= 1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec8:	3305      	adds	r3, #5
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed8:	3305      	adds	r3, #5
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e007      	b.n	8003eee <create_chain+0x158>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <create_chain+0x154>
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	e000      	b.n	8003eec <create_chain+0x156>
 8003eea:	2301      	movs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8003eee:	697b      	ldr	r3, [r7, #20]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	3304      	adds	r3, #4
 8003f08:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f12:	330a      	adds	r3, #10
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	461a      	mov	r2, r3
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f26:	3302      	adds	r3, #2
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1d1a      	adds	r2, r3, #4
 8003f34:	613a      	str	r2, [r7, #16]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <clmt_clust+0x4c>
 8003f40:	2300      	movs	r3, #0
 8003f42:	e010      	b.n	8003f66 <clmt_clust+0x6e>
		if (cl < ncl) break;	/* In this fragment? */
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d307      	bcc.n	8003f5c <clmt_clust+0x64>
		cl -= ncl; tbl++;		/* Next fragment */
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	3304      	adds	r3, #4
 8003f58:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003f5a:	e7e9      	b.n	8003f30 <clmt_clust+0x38>
		if (cl < ncl) break;	/* In this fragment? */
 8003f5c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4413      	add	r3, r2
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr

08003f70 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d008      	beq.n	8003fa0 <dir_sdi+0x30>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f96:	3314      	adds	r3, #20
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d301      	bcc.n	8003fa4 <dir_sdi+0x34>
		return FR_INT_ERR;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e093      	b.n	80040cc <dir_sdi+0x15c>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10d      	bne.n	8003fc6 <dir_sdi+0x56>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d106      	bne.n	8003fc6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d113      	bne.n	8003ff4 <dir_sdi+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd4:	3308      	adds	r3, #8
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d301      	bcc.n	8003fe4 <dir_sdi+0x74>
			return FR_INT_ERR;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e073      	b.n	80040cc <dir_sdi+0x15c>
		sect = dp->fs->dirbase;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8003fec:	3304      	adds	r3, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e03c      	b.n	800406e <dir_sdi+0xfe>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffc:	330a      	adds	r3, #10
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	b29b      	uxth	r3, r3
 8004004:	461a      	mov	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	3302      	adds	r3, #2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	fb03 f302 	mul.w	r3, r3, r2
 8004016:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8004018:	e01e      	b.n	8004058 <dir_sdi+0xe8>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	6979      	ldr	r1, [r7, #20]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fbf1 	bl	8003808 <get_fat>
 8004026:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d101      	bne.n	8004034 <dir_sdi+0xc4>
 8004030:	2301      	movs	r3, #1
 8004032:	e04b      	b.n	80040cc <dir_sdi+0x15c>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d908      	bls.n	800404c <dir_sdi+0xdc>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004042:	3314      	adds	r3, #20
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	429a      	cmp	r2, r3
 800404a:	d301      	bcc.n	8004050 <dir_sdi+0xe0>
				return FR_INT_ERR;
 800404c:	2302      	movs	r3, #2
 800404e:	e03d      	b.n	80040cc <dir_sdi+0x15c>
			idx -= ic;
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	429a      	cmp	r2, r3
 800405e:	d2dc      	bcs.n	800401a <dir_sdi+0xaa>
		}
		sect = clust2sect(dp->fs, clst);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fba7 	bl	80037ba <clust2sect>
 800406c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <dir_sdi+0x10e>
 800407a:	2302      	movs	r3, #2
 800407c:	e026      	b.n	80040cc <dir_sdi+0x15c>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004086:	330a      	adds	r3, #10
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	b29b      	uxth	r3, r3
 800408e:	461a      	mov	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	fbb3 f2f2 	udiv	r2, r3, r2
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	330a      	adds	r3, #10
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80040bc:	fb02 f201 	mul.w	r2, r2, r1
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	015b      	lsls	r3, r3, #5
 80040c4:	18c2      	adds	r2, r0, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	88db      	ldrh	r3, [r3, #6]
 80040e2:	3301      	adds	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <dir_next+0x22>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <dir_next+0x26>
		return FR_NO_FILE;
 80040f6:	2304      	movs	r3, #4
 80040f8:	e0fe      	b.n	80042f8 <dir_next+0x224>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004102:	330a      	adds	r3, #10
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004112:	fb02 f201 	mul.w	r2, r2, r1
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 80d2 	bne.w	80042c2 <dir_next+0x1ee>
		dp->sect++;					/* Next sector */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10c      	bne.n	800414a <dir_next+0x76>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004138:	3308      	adds	r3, #8
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4293      	cmp	r3, r2
 8004142:	f0c0 80be 	bcc.w	80042c2 <dir_next+0x1ee>
				return FR_NO_FILE;
 8004146:	2304      	movs	r3, #4
 8004148:	e0d6      	b.n	80042f8 <dir_next+0x224>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004152:	330a      	adds	r3, #10
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	b29b      	uxth	r3, r3
 800415a:	461a      	mov	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416a:	3302      	adds	r3, #2
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	3b01      	subs	r3, #1
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	f040 80a5 	bne.w	80042c2 <dir_next+0x1ee>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	4619      	mov	r1, r3
 8004182:	4610      	mov	r0, r2
 8004184:	f7ff fb40 	bl	8003808 <get_fat>
 8004188:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d801      	bhi.n	8004194 <dir_next+0xc0>
 8004190:	2302      	movs	r3, #2
 8004192:	e0b1      	b.n	80042f8 <dir_next+0x224>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d101      	bne.n	80041a0 <dir_next+0xcc>
 800419c:	2301      	movs	r3, #1
 800419e:	e0ab      	b.n	80042f8 <dir_next+0x224>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a8:	3314      	adds	r3, #20
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d37b      	bcc.n	80042aa <dir_next+0x1d6>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <dir_next+0xe8>
 80041b8:	2304      	movs	r3, #4
 80041ba:	e09d      	b.n	80042f8 <dir_next+0x224>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f7ff fde5 	bl	8003d96 <create_chain>
 80041cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <dir_next+0x104>
 80041d4:	2307      	movs	r3, #7
 80041d6:	e08f      	b.n	80042f8 <dir_next+0x224>
					if (clst == 1) return FR_INT_ERR;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <dir_next+0x10e>
 80041de:	2302      	movs	r3, #2
 80041e0:	e08a      	b.n	80042f8 <dir_next+0x224>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e8:	d101      	bne.n	80041ee <dir_next+0x11a>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e084      	b.n	80042f8 <dir_next+0x224>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff f984 	bl	8003500 <sync_window>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <dir_next+0x12e>
 80041fe:	2301      	movs	r3, #1
 8004200:	e07a      	b.n	80042f8 <dir_next+0x224>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004210:	330a      	adds	r3, #10
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	2100      	movs	r1, #0
 8004218:	f7fe ff6f 	bl	80030fa <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681c      	ldr	r4, [r3, #0]
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	4610      	mov	r0, r2
 8004228:	f7ff fac7 	bl	80037ba <clust2sect>
 800422c:	4602      	mov	r2, r0
 800422e:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8004232:	330c      	adds	r3, #12
 8004234:	601a      	str	r2, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	e01e      	b.n	800427a <dir_next+0x1a6>
						dp->fs->wflag = 1;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004244:	3304      	adds	r3, #4
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff f956 	bl	8003500 <sync_window>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <dir_next+0x18a>
 800425a:	2301      	movs	r3, #1
 800425c:	e04c      	b.n	80042f8 <dir_next+0x224>
						dp->fs->winsect++;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004266:	330c      	adds	r3, #12
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	f502 5381 	add.w	r3, r2, #4128	; 0x1020
 8004270:	330c      	adds	r3, #12
 8004272:	6019      	str	r1, [r3, #0]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3301      	adds	r3, #1
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004282:	3302      	adds	r3, #2
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4293      	cmp	r3, r2
 800428c:	d3d6      	bcc.n	800423c <dir_next+0x168>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004296:	330c      	adds	r3, #12
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	1a8a      	subs	r2, r1, r2
 80042a2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80042a6:	330c      	adds	r3, #12
 80042a8:	601a      	str	r2, [r3, #0]
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6979      	ldr	r1, [r7, #20]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff fa7f 	bl	80037ba <clust2sect>
 80042bc:	4602      	mov	r2, r0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	330a      	adds	r3, #10
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	b29b      	uxth	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80042e8:	fb02 f201 	mul.w	r2, r2, r1
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	18c2      	adds	r2, r0, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd90      	pop	{r4, r7, pc}

08004300 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800430a:	2100      	movs	r1, #0
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff fe2f 	bl	8003f70 <dir_sdi>
 8004312:	4603      	mov	r3, r0
 8004314:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d12d      	bne.n	8004378 <dir_alloc+0x78>
		n = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f7ff f942 	bl	80035b4 <move_window>
 8004330:	4603      	mov	r3, r0
 8004332:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11d      	bne.n	8004376 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2be5      	cmp	r3, #229	; 0xe5
 8004342:	d004      	beq.n	800434e <dir_alloc+0x4e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d107      	bne.n	800435e <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	3301      	adds	r3, #1
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d102      	bne.n	8004362 <dir_alloc+0x62>
 800435c:	e00c      	b.n	8004378 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800435e:	2300      	movs	r3, #0
 8004360:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8004362:	2101      	movs	r1, #1
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff feb5 	bl	80040d4 <dir_next>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0d5      	beq.n	8004320 <dir_alloc+0x20>
 8004374:	e000      	b.n	8004378 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8004376:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b04      	cmp	r3, #4
 800437c:	d101      	bne.n	8004382 <dir_alloc+0x82>
 800437e:	2307      	movs	r3, #7
 8004380:	73fb      	strb	r3, [r7, #15]
	return res;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	331b      	adds	r3, #27
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	b21a      	sxth	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	331a      	adds	r3, #26
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b21b      	sxth	r3, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	b21b      	sxth	r3, r3
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d10f      	bne.n	80043dc <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	3315      	adds	r3, #21
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	b21a      	sxth	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	3314      	adds	r3, #20
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b21b      	sxth	r3, r3
 80043ce:	4313      	orrs	r3, r2
 80043d0:	b21b      	sxth	r3, r3
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

	return cl;
 80043dc:	68fb      	ldr	r3, [r7, #12]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	331a      	adds	r3, #26
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	b29b      	uxth	r3, r3
 8004400:	0a1b      	lsrs	r3, r3, #8
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	331b      	adds	r3, #27
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	0c1a      	lsrs	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3314      	adds	r3, #20
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	701a      	strb	r2, [r3, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	b29b      	uxth	r3, r3
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3315      	adds	r3, #21
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	2301      	movs	r3, #1
 800445a:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800445c:	4a2b      	ldr	r2, [pc, #172]	; (800450c <cmp_lfn+0xd8>)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	4413      	add	r3, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	b21a      	sxth	r2, r3
 8004470:	4926      	ldr	r1, [pc, #152]	; (800450c <cmp_lfn+0xd8>)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	440b      	add	r3, r1
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	4619      	mov	r1, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	440b      	add	r3, r1
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	b21b      	sxth	r3, r3
 8004482:	4313      	orrs	r3, r2
 8004484:	b21b      	sxth	r3, r3
 8004486:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8004488:	89fb      	ldrh	r3, [r7, #14]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d019      	beq.n	80044c2 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800448e:	89bb      	ldrh	r3, [r7, #12]
 8004490:	4618      	mov	r0, r3
 8004492:	f001 fe01 	bl	8006098 <ff_wtoupper>
 8004496:	4603      	mov	r3, r0
 8004498:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2bfe      	cmp	r3, #254	; 0xfe
 800449e:	d80e      	bhi.n	80044be <cmp_lfn+0x8a>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	617a      	str	r2, [r7, #20]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fdf2 	bl	8006098 <ff_wtoupper>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	89fb      	ldrh	r3, [r7, #14]
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d008      	beq.n	80044d0 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 80044be:	2300      	movs	r3, #0
 80044c0:	e01f      	b.n	8004502 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 80044c2:	89bb      	ldrh	r3, [r7, #12]
 80044c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d001      	beq.n	80044d0 <cmp_lfn+0x9c>
 80044cc:	2300      	movs	r3, #0
 80044ce:	e018      	b.n	8004502 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	3301      	adds	r3, #1
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d9bf      	bls.n	800445c <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <cmp_lfn+0xcc>
 80044e8:	89fb      	ldrh	r3, [r7, #14]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <cmp_lfn+0xcc>
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <cmp_lfn+0xcc>
		return 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8004500:	2301      	movs	r3, #1
}
 8004502:	4618      	mov	r0, r3
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	08008b88 	.word	0x08008b88

08004510 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	460b      	mov	r3, r1
 8004520:	71fb      	strb	r3, [r7, #7]
 8004522:	4613      	mov	r3, r2
 8004524:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	330d      	adds	r3, #13
 800452a:	79ba      	ldrb	r2, [r7, #6]
 800452c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	330b      	adds	r3, #11
 8004532:	220f      	movs	r2, #15
 8004534:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	330c      	adds	r3, #12
 800453a:	2200      	movs	r2, #0
 800453c:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	331a      	adds	r3, #26
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	331b      	adds	r3, #27
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	1e5a      	subs	r2, r3, #1
 8004552:	4613      	mov	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	82fb      	strh	r3, [r7, #22]
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8004566:	8afb      	ldrh	r3, [r7, #22]
 8004568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800456c:	4293      	cmp	r3, r2
 800456e:	d007      	beq.n	8004580 <fit_lfn+0x70>
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	61fa      	str	r2, [r7, #28]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <fit_lfn+0xe4>)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4413      	add	r3, r2
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	461a      	mov	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4413      	add	r3, r2
 800458e:	8afa      	ldrh	r2, [r7, #22]
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	8afb      	ldrh	r3, [r7, #22]
 8004596:	0a1b      	lsrs	r3, r3, #8
 8004598:	b299      	uxth	r1, r3
 800459a:	4a16      	ldr	r2, [pc, #88]	; (80045f4 <fit_lfn+0xe4>)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	4413      	add	r3, r2
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	4413      	add	r3, r2
 80045a8:	b2ca      	uxtb	r2, r1
 80045aa:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 80045ac:	8afb      	ldrh	r3, [r7, #22]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <fit_lfn+0xa8>
 80045b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045b6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0c      	cmp	r3, #12
 80045c2:	d9d0      	bls.n	8004566 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 80045c4:	8afb      	ldrh	r3, [r7, #22]
 80045c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d006      	beq.n	80045dc <fit_lfn+0xcc>
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	881b      	ldrh	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <fit_lfn+0xd4>
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	79fa      	ldrb	r2, [r7, #7]
 80045e8:	701a      	strb	r2, [r3, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3724      	adds	r7, #36	; 0x24
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	08008b88 	.word	0x08008b88

080045f8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	; 0x30
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004606:	220b      	movs	r2, #11
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7fe fd58 	bl	80030c0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d92b      	bls.n	800466e <gen_numname+0x76>
		sr = seq;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800461a:	e022      	b.n	8004662 <gen_numname+0x6a>
			wc = *lfn++;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8004626:	2300      	movs	r3, #0
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
 800462a:	e017      	b.n	800465c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005a      	lsls	r2, r3, #1
 8004630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800463a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <gen_numname+0x5e>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8004650:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8004654:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	3301      	adds	r3, #1
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2b0f      	cmp	r3, #15
 8004660:	d9e4      	bls.n	800462c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1d8      	bne.n	800461c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800466e:	2307      	movs	r3, #7
 8004670:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3330      	adds	r3, #48	; 0x30
 800467e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8004682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004686:	2b39      	cmp	r3, #57	; 0x39
 8004688:	d904      	bls.n	8004694 <gen_numname+0x9c>
 800468a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800468e:	3307      	adds	r3, #7
 8004690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	1e5a      	subs	r2, r3, #1
 8004698:	62ba      	str	r2, [r7, #40]	; 0x28
 800469a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800469e:	4413      	add	r3, r2
 80046a0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80046a4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	091b      	lsrs	r3, r3, #4
 80046ac:	603b      	str	r3, [r7, #0]
	} while (seq);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1de      	bne.n	8004672 <gen_numname+0x7a>
	ns[i] = '~';
 80046b4:	f107 0214 	add.w	r2, r7, #20
 80046b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ba:	4413      	add	r3, r2
 80046bc:	227e      	movs	r2, #126	; 0x7e
 80046be:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80046c0:	2300      	movs	r3, #0
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
 80046c4:	e002      	b.n	80046cc <gen_numname+0xd4>
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	3301      	adds	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d205      	bcs.n	80046e0 <gen_numname+0xe8>
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	4413      	add	r3, r2
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d1f2      	bne.n	80046c6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2b07      	cmp	r3, #7
 80046e4:	d808      	bhi.n	80046f8 <gen_numname+0x100>
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80046ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80046f0:	4413      	add	r3, r2
 80046f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80046f6:	e000      	b.n	80046fa <gen_numname+0x102>
 80046f8:	2120      	movs	r1, #32
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1c5a      	adds	r2, r3, #1
 80046fe:	627a      	str	r2, [r7, #36]	; 0x24
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	460a      	mov	r2, r1
 8004706:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	2b07      	cmp	r3, #7
 800470c:	d9e8      	bls.n	80046e0 <gen_numname+0xe8>
}
 800470e:	bf00      	nop
 8004710:	3730      	adds	r7, #48	; 0x30
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004722:	230b      	movs	r3, #11
 8004724:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	0852      	lsrs	r2, r2, #1
 800472c:	01db      	lsls	r3, r3, #7
 800472e:	4313      	orrs	r3, r2
 8004730:	b2da      	uxtb	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	1c59      	adds	r1, r3, #1
 8004736:	6079      	str	r1, [r7, #4]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	4413      	add	r3, r2
 800473c:	73fb      	strb	r3, [r7, #15]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	3b01      	subs	r3, #1
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1ed      	bne.n	8004726 <sum_sfn+0x10>
	return sum;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b086      	sub	sp, #24
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800475e:	2100      	movs	r1, #0
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7ff fc05 	bl	8003f70 <dir_sdi>
 8004766:	4603      	mov	r3, r0
 8004768:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <dir_find+0x1e>
 8004770:	7dfb      	ldrb	r3, [r7, #23]
 8004772:	e0a0      	b.n	80048b6 <dir_find+0x160>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004774:	23ff      	movs	r3, #255	; 0xff
 8004776:	753b      	strb	r3, [r7, #20]
 8004778:	7d3b      	ldrb	r3, [r7, #20]
 800477a:	757b      	strb	r3, [r7, #21]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004782:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7fe ff10 	bl	80035b4 <move_window>
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	2b00      	cmp	r3, #0
 800479c:	f040 8085 	bne.w	80048aa <dir_find+0x154>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80047ac:	7dbb      	ldrb	r3, [r7, #22]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <dir_find+0x62>
 80047b2:	2304      	movs	r3, #4
 80047b4:	75fb      	strb	r3, [r7, #23]
 80047b6:	e07d      	b.n	80048b4 <dir_find+0x15e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	330b      	adds	r3, #11
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c2:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80047c4:	7dbb      	ldrb	r3, [r7, #22]
 80047c6:	2be5      	cmp	r3, #229	; 0xe5
 80047c8:	d007      	beq.n	80047da <dir_find+0x84>
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <dir_find+0x92>
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	d006      	beq.n	80047e8 <dir_find+0x92>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80047da:	23ff      	movs	r3, #255	; 0xff
 80047dc:	757b      	strb	r3, [r7, #21]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047e4:	849a      	strh	r2, [r3, #36]	; 0x24
 80047e6:	e055      	b.n	8004894 <dir_find+0x13e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b0f      	cmp	r3, #15
 80047ec:	d12f      	bne.n	800484e <dir_find+0xf8>
				if (dp->lfn) {
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d04e      	beq.n	8004894 <dir_find+0x13e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80047f6:	7dbb      	ldrb	r3, [r7, #22]
 80047f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00c      	beq.n	800481a <dir_find+0xc4>
						sum = dir[LDIR_Chksum];
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	7b5b      	ldrb	r3, [r3, #13]
 8004804:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8004806:	7dbb      	ldrb	r3, [r7, #22]
 8004808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800480c:	75bb      	strb	r3, [r7, #22]
 800480e:	7dbb      	ldrb	r3, [r7, #22]
 8004810:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	88da      	ldrh	r2, [r3, #6]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800481a:	7dba      	ldrb	r2, [r7, #22]
 800481c:	7d7b      	ldrb	r3, [r7, #21]
 800481e:	429a      	cmp	r2, r3
 8004820:	d112      	bne.n	8004848 <dir_find+0xf2>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	330d      	adds	r3, #13
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	7d3a      	ldrb	r2, [r7, #20]
 800482a:	429a      	cmp	r2, r3
 800482c:	d10c      	bne.n	8004848 <dir_find+0xf2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	6939      	ldr	r1, [r7, #16]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fdfd 	bl	8004434 <cmp_lfn>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <dir_find+0xf2>
 8004840:	7d7b      	ldrb	r3, [r7, #21]
 8004842:	3b01      	subs	r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e000      	b.n	800484a <dir_find+0xf4>
 8004848:	23ff      	movs	r3, #255	; 0xff
 800484a:	757b      	strb	r3, [r7, #21]
 800484c:	e022      	b.n	8004894 <dir_find+0x13e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800484e:	7d7b      	ldrb	r3, [r7, #21]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d107      	bne.n	8004864 <dir_find+0x10e>
 8004854:	6938      	ldr	r0, [r7, #16]
 8004856:	f7ff ff5e 	bl	8004716 <sum_sfn>
 800485a:	4603      	mov	r3, r0
 800485c:	461a      	mov	r2, r3
 800485e:	7d3b      	ldrb	r3, [r7, #20]
 8004860:	4293      	cmp	r3, r2
 8004862:	d024      	beq.n	80048ae <dir_find+0x158>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	330b      	adds	r3, #11
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <dir_find+0x132>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	220b      	movs	r2, #11
 800487a:	4619      	mov	r1, r3
 800487c:	6938      	ldr	r0, [r7, #16]
 800487e:	f7fe fc55 	bl	800312c <mem_cmp>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d014      	beq.n	80048b2 <dir_find+0x15c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8004888:	23ff      	movs	r3, #255	; 0xff
 800488a:	757b      	strb	r3, [r7, #21]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004892:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004894:	2100      	movs	r1, #0
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff fc1c 	bl	80040d4 <dir_next>
 800489c:	4603      	mov	r3, r0
 800489e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f43f af6e 	beq.w	8004784 <dir_find+0x2e>
 80048a8:	e004      	b.n	80048b4 <dir_find+0x15e>
		if (res != FR_OK) break;
 80048aa:	bf00      	nop
 80048ac:	e002      	b.n	80048b4 <dir_find+0x15e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <dir_find+0x15e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80048b2:	bf00      	nop

	return res;
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	; 0x30
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	220c      	movs	r2, #12
 80048da:	6a39      	ldr	r1, [r7, #32]
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe fbef 	bl	80030c0 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80048e2:	7dfb      	ldrb	r3, [r7, #23]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d035      	beq.n	8004958 <dir_register+0x98>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	330b      	adds	r3, #11
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	621a      	str	r2, [r3, #32]
		for (n = 1; n < 100; n++) {
 80048fa:	2301      	movs	r3, #1
 80048fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fe:	e013      	b.n	8004928 <dir_register+0x68>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 8004900:	f107 010c 	add.w	r1, r7, #12
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	69fa      	ldr	r2, [r7, #28]
 8004908:	6a38      	ldr	r0, [r7, #32]
 800490a:	f7ff fe75 	bl	80045f8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ff21 	bl	8004756 <dir_find>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800491a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <dir_register+0x70>
		for (n = 1; n < 100; n++) {
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	3301      	adds	r3, #1
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b63      	cmp	r3, #99	; 0x63
 800492c:	d9e8      	bls.n	8004900 <dir_register+0x40>
 800492e:	e000      	b.n	8004932 <dir_register+0x72>
			if (res != FR_OK) break;
 8004930:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	2b64      	cmp	r3, #100	; 0x64
 8004936:	d101      	bne.n	800493c <dir_register+0x7c>
 8004938:	2307      	movs	r3, #7
 800493a:	e0b9      	b.n	8004ab0 <dir_register+0x1f0>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800493c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004940:	2b04      	cmp	r3, #4
 8004942:	d002      	beq.n	800494a <dir_register+0x8a>
 8004944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004948:	e0b2      	b.n	8004ab0 <dir_register+0x1f0>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	330b      	adds	r3, #11
 800494e:	7dfa      	ldrb	r2, [r7, #23]
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	621a      	str	r2, [r3, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d014      	beq.n	800498c <dir_register+0xcc>
		for (n = 0; lfn[n]; n++) ;
 8004962:	2300      	movs	r3, #0
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
 8004966:	e002      	b.n	800496e <dir_register+0xae>
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	3301      	adds	r3, #1
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f5      	bne.n	8004968 <dir_register+0xa8>
		nent = (n + 25) / 13;
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	3319      	adds	r3, #25
 8004980:	4a4d      	ldr	r2, [pc, #308]	; (8004ab8 <dir_register+0x1f8>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	089b      	lsrs	r3, r3, #2
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	e001      	b.n	8004990 <dir_register+0xd0>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800498c:	2301      	movs	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff fcb4 	bl	8004300 <dir_alloc>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800499e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d14e      	bne.n	8004a44 <dir_register+0x184>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	3b01      	subs	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d048      	beq.n	8004a44 <dir_register+0x184>
		res = dir_sdi(dp, dp->index - nent);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	88db      	ldrh	r3, [r3, #6]
 80049b6:	461a      	mov	r2, r3
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fad6 	bl	8003f70 <dir_sdi>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80049ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d138      	bne.n	8004a44 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fe9d 	bl	8004716 <sum_sfn>
 80049dc:	4603      	mov	r3, r0
 80049de:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fe fde2 	bl	80035b4 <move_window>
 80049f0:	4603      	mov	r3, r0
 80049f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80049f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d121      	bne.n	8004a42 <dir_register+0x182>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a18      	ldr	r0, [r3, #32]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6959      	ldr	r1, [r3, #20]
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	7efb      	ldrb	r3, [r7, #27]
 8004a0c:	f7ff fd80 	bl	8004510 <fit_lfn>
				dp->fs->wflag = 1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a18:	3304      	adds	r3, #4
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
				res = dir_next(dp, 0);	/* Next entry */
 8004a1e:	2100      	movs	r1, #0
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fb57 	bl	80040d4 <dir_next>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8004a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d107      	bne.n	8004a44 <dir_register+0x184>
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	3b01      	subs	r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1cf      	bne.n	80049e0 <dir_register+0x120>
 8004a40:	e000      	b.n	8004a44 <dir_register+0x184>
				if (res != FR_OK) break;
 8004a42:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d12f      	bne.n	8004aac <dir_register+0x1ec>
		res = move_window(dp->fs, dp->sect);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	4619      	mov	r1, r3
 8004a56:	4610      	mov	r0, r2
 8004a58:	f7fe fdac 	bl	80035b4 <move_window>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8004a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d120      	bne.n	8004aac <dir_register+0x1ec>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fb41 	bl	80030fa <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6958      	ldr	r0, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	220b      	movs	r2, #11
 8004a82:	4619      	mov	r1, r3
 8004a84:	f7fe fb1c 	bl	80030c0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	330b      	adds	r3, #11
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	330c      	adds	r3, #12
 8004a96:	f002 0218 	and.w	r2, r2, #24
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	701a      	strb	r2, [r3, #0]
		}
	}

	return res;
 8004aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3730      	adds	r7, #48	; 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	4ec4ec4f 	.word	0x4ec4ec4f

08004abc <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	e002      	b.n	8004ad4 <create_name+0x18>
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b2f      	cmp	r3, #47	; 0x2f
 8004ada:	d0f8      	beq.n	8004ace <create_name+0x12>
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ae2:	d0f4      	beq.n	8004ace <create_name+0x12>
	lfn = dp->lfn;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	61ba      	str	r2, [r7, #24]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4413      	add	r3, r2
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8004b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b02:	2b1f      	cmp	r3, #31
 8004b04:	d92f      	bls.n	8004b66 <create_name+0xaa>
 8004b06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b08:	2b2f      	cmp	r3, #47	; 0x2f
 8004b0a:	d02c      	beq.n	8004b66 <create_name+0xaa>
 8004b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b0e:	2b5c      	cmp	r3, #92	; 0x5c
 8004b10:	d029      	beq.n	8004b66 <create_name+0xaa>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2bfe      	cmp	r3, #254	; 0xfe
 8004b16:	d901      	bls.n	8004b1c <create_name+0x60>
			return FR_INVALID_NAME;
 8004b18:	2306      	movs	r3, #6
 8004b1a:	e176      	b.n	8004e0a <create_name+0x34e>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 fa7c 	bl	8006024 <ff_convert>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <create_name+0x7e>
 8004b36:	2306      	movs	r3, #6
 8004b38:	e167      	b.n	8004e0a <create_name+0x34e>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8004b3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b3e:	d809      	bhi.n	8004b54 <create_name+0x98>
 8004b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b42:	4619      	mov	r1, r3
 8004b44:	48b3      	ldr	r0, [pc, #716]	; (8004e14 <create_name+0x358>)
 8004b46:	f7fe fb17 	bl	8003178 <chk_chr>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <create_name+0x98>
			return FR_INVALID_NAME;
 8004b50:	2306      	movs	r3, #6
 8004b52:	e15a      	b.n	8004e0a <create_name+0x34e>
		lfn[di++] = w;					/* Store the Unicode character */
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	617a      	str	r2, [r7, #20]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8004b64:	e7c5      	b.n	8004af2 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	441a      	add	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004b70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b72:	2b1f      	cmp	r3, #31
 8004b74:	d801      	bhi.n	8004b7a <create_name+0xbe>
 8004b76:	2304      	movs	r3, #4
 8004b78:	e000      	b.n	8004b7c <create_name+0xc0>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8004b80:	e011      	b.n	8004ba6 <create_name+0xea>
		w = lfn[di - 1];
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8004b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d002      	beq.n	8004ba0 <create_name+0xe4>
 8004b9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b9c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b9e:	d106      	bne.n	8004bae <create_name+0xf2>
		di--;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ea      	bne.n	8004b82 <create_name+0xc6>
 8004bac:	e000      	b.n	8004bb0 <create_name+0xf4>
		if (w != ' ' && w != '.') break;
 8004bae:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <create_name+0xfe>
 8004bb6:	2306      	movs	r3, #6
 8004bb8:	e127      	b.n	8004e0a <create_name+0x34e>

	lfn[di] = 0;						/* LFN is created */
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	220b      	movs	r2, #11
 8004bcc:	2120      	movs	r1, #32
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fe fa93 	bl	80030fa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	e002      	b.n	8004be0 <create_name+0x124>
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d0f5      	beq.n	8004bda <create_name+0x11e>
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8004bfa:	d0ee      	beq.n	8004bda <create_name+0x11e>
	if (si) cf |= NS_LOSS | NS_LFN;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <create_name+0x15a>
 8004c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c06:	f043 0303 	orr.w	r3, r3, #3
 8004c0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8004c0e:	e002      	b.n	8004c16 <create_name+0x15a>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d009      	beq.n	8004c30 <create_name+0x174>
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004c22:	3b01      	subs	r3, #1
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c2e:	d1ef      	bne.n	8004c10 <create_name+0x154>

	b = i = 0; ni = 8;
 8004c30:	2300      	movs	r3, #0
 8004c32:	623b      	str	r3, [r7, #32]
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	61ba      	str	r2, [r7, #24]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8004c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 808f 	beq.w	8004d74 <create_name+0x2b8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8004c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d006      	beq.n	8004c6a <create_name+0x1ae>
 8004c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c60:	d10a      	bne.n	8004c78 <create_name+0x1bc>
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d006      	beq.n	8004c78 <create_name+0x1bc>
			cf |= NS_LOSS | NS_LFN; continue;
 8004c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c6e:	f043 0303 	orr.w	r3, r3, #3
 8004c72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c76:	e07c      	b.n	8004d72 <create_name+0x2b6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8004c78:	6a3a      	ldr	r2, [r7, #32]
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d203      	bcs.n	8004c88 <create_name+0x1cc>
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d123      	bne.n	8004cd0 <create_name+0x214>
			if (ni == 11) {				/* Long extension */
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	2b0b      	cmp	r3, #11
 8004c8c:	d106      	bne.n	8004c9c <create_name+0x1e0>
				cf |= NS_LOSS | NS_LFN; break;
 8004c8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c92:	f043 0303 	orr.w	r3, r3, #3
 8004c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c9a:	e06e      	b.n	8004d7a <create_name+0x2be>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d005      	beq.n	8004cb0 <create_name+0x1f4>
 8004ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ca8:	f043 0303 	orr.w	r3, r3, #3
 8004cac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d85f      	bhi.n	8004d78 <create_name+0x2bc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	230b      	movs	r3, #11
 8004cc2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004cce:	e050      	b.n	8004d72 <create_name+0x2b6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8004cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd4:	d914      	bls.n	8004d00 <create_name+0x244>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f9a2 	bl	8006024 <ff_convert>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004ce4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <create_name+0x238>
 8004cea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cec:	3b80      	subs	r3, #128	; 0x80
 8004cee:	4a4a      	ldr	r2, [pc, #296]	; (8004e18 <create_name+0x35c>)
 8004cf0:	5cd3      	ldrb	r3, [r2, r3]
 8004cf2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004cf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8004d00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <create_name+0x25a>
 8004d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4844      	ldr	r0, [pc, #272]	; (8004e1c <create_name+0x360>)
 8004d0c:	f7fe fa34 	bl	8003178 <chk_chr>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <create_name+0x26c>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004d16:	235f      	movs	r3, #95	; 0x5f
 8004d18:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004d1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d1e:	f043 0303 	orr.w	r3, r3, #3
 8004d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d26:	e01b      	b.n	8004d60 <create_name+0x2a4>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8004d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d909      	bls.n	8004d42 <create_name+0x286>
 8004d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d30:	2b5a      	cmp	r3, #90	; 0x5a
 8004d32:	d806      	bhi.n	8004d42 <create_name+0x286>
					b |= 2;
 8004d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d40:	e00e      	b.n	8004d60 <create_name+0x2a4>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8004d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d44:	2b60      	cmp	r3, #96	; 0x60
 8004d46:	d90b      	bls.n	8004d60 <create_name+0x2a4>
 8004d48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d4a:	2b7a      	cmp	r3, #122	; 0x7a
 8004d4c:	d808      	bhi.n	8004d60 <create_name+0x2a4>
						b |= 1; w -= 0x20;
 8004d4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004d5c:	3b20      	subs	r3, #32
 8004d5e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699a      	ldr	r2, [r3, #24]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	1c59      	adds	r1, r3, #1
 8004d68:	6239      	str	r1, [r7, #32]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8004d72:	e764      	b.n	8004c3e <create_name+0x182>
		if (!w) break;					/* Break on end of the LFN */
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <create_name+0x2be>
			if (si > di) break;			/* No extension */
 8004d78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2be5      	cmp	r3, #229	; 0xe5
 8004d82:	d103      	bne.n	8004d8c <create_name+0x2d0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2205      	movs	r2, #5
 8004d8a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d104      	bne.n	8004d9c <create_name+0x2e0>
 8004d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8004d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da0:	f003 030c 	and.w	r3, r3, #12
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	d005      	beq.n	8004db4 <create_name+0x2f8>
 8004da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dac:	f003 0303 	and.w	r3, r3, #3
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d105      	bne.n	8004dc0 <create_name+0x304>
		cf |= NS_LFN;
 8004db4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004db8:	f043 0302 	orr.w	r3, r3, #2
 8004dbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004dc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d117      	bne.n	8004dfc <create_name+0x340>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d105      	bne.n	8004de4 <create_name+0x328>
 8004dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004ddc:	f043 0310 	orr.w	r3, r3, #16
 8004de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d105      	bne.n	8004dfc <create_name+0x340>
 8004df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	330b      	adds	r3, #11
 8004e02:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004e06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004e08:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	; 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	08006224 	.word	0x08006224
 8004e18:	08008b08 	.word	0x08008b08
 8004e1c:	08006230 	.word	0x08006230

08004e20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b2f      	cmp	r3, #47	; 0x2f
 8004e30:	d003      	beq.n	8004e3a <follow_path+0x1a>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b5c      	cmp	r3, #92	; 0x5c
 8004e38:	d102      	bne.n	8004e40 <follow_path+0x20>
		path++;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b1f      	cmp	r3, #31
 8004e4c:	d809      	bhi.n	8004e62 <follow_path+0x42>
		res = dir_sdi(dp, 0);
 8004e4e:	2100      	movs	r1, #0
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff f88d 	bl	8003f70 <dir_sdi>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	615a      	str	r2, [r3, #20]
 8004e60:	e041      	b.n	8004ee6 <follow_path+0xc6>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004e62:	463b      	mov	r3, r7
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fe28 	bl	8004abc <create_name>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d132      	bne.n	8004edc <follow_path+0xbc>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff fc6d 	bl	8004756 <dir_find>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	7adb      	ldrb	r3, [r3, #11]
 8004e86:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <follow_path+0x84>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d125      	bne.n	8004ee0 <follow_path+0xc0>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004e94:	7bbb      	ldrb	r3, [r7, #14]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d120      	bne.n	8004ee0 <follow_path+0xc0>
 8004e9e:	2305      	movs	r3, #5
 8004ea0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8004ea2:	e01d      	b.n	8004ee0 <follow_path+0xc0>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ea4:	7bbb      	ldrb	r3, [r7, #14]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11a      	bne.n	8004ee4 <follow_path+0xc4>
			dir = dp->dir;						/* Follow the sub-directory */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	330b      	adds	r3, #11
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d102      	bne.n	8004ec8 <follow_path+0xa8>
				res = FR_NO_PATH; break;
 8004ec2:	2305      	movs	r3, #5
 8004ec4:	73fb      	strb	r3, [r7, #15]
 8004ec6:	e00e      	b.n	8004ee6 <follow_path+0xc6>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fa5c 	bl	800438c <ld_clust>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004eda:	e7c2      	b.n	8004e62 <follow_path+0x42>
			if (res != FR_OK) break;
 8004edc:	bf00      	nop
 8004ede:	e002      	b.n	8004ee6 <follow_path+0xc6>
				break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <follow_path+0xc6>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004ee4:	bf00      	nop
		}
	}

	return res;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8004efc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d031      	beq.n	8004f6a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e002      	b.n	8004f14 <get_ldnumber+0x24>
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	3301      	adds	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b1f      	cmp	r3, #31
 8004f1a:	d903      	bls.n	8004f24 <get_ldnumber+0x34>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b3a      	cmp	r3, #58	; 0x3a
 8004f22:	d1f4      	bne.n	8004f0e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b3a      	cmp	r3, #58	; 0x3a
 8004f2a:	d11c      	bne.n	8004f66 <get_ldnumber+0x76>
			tp = *path;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	60fa      	str	r2, [r7, #12]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	3b30      	subs	r3, #48	; 0x30
 8004f3c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b09      	cmp	r3, #9
 8004f42:	d80e      	bhi.n	8004f62 <get_ldnumber+0x72>
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d10a      	bne.n	8004f62 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d107      	bne.n	8004f62 <get_ldnumber+0x72>
					vol = (int)i;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	e002      	b.n	8004f6c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004f66:	2300      	movs	r3, #0
 8004f68:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004f6a:	693b      	ldr	r3, [r7, #16]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
	...

08004f78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8004f94:	330c      	adds	r3, #12
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9a:	601a      	str	r2, [r3, #0]
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fe fb08 	bl	80035b4 <move_window>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <check_fs+0x36>
		return 3;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e04a      	b.n	8005044 <check_fs+0xcc>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	b21b      	sxth	r3, r3
 8004fc8:	4a20      	ldr	r2, [pc, #128]	; (800504c <check_fs+0xd4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d001      	beq.n	8004fd2 <check_fs+0x5a>
		return 2;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	e038      	b.n	8005044 <check_fs+0xcc>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3336      	adds	r3, #54	; 0x36
 8004fd6:	3303      	adds	r3, #3
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	061a      	lsls	r2, r3, #24
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3336      	adds	r3, #54	; 0x36
 8004fe0:	3302      	adds	r3, #2
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	041b      	lsls	r3, r3, #16
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	3236      	adds	r2, #54	; 0x36
 8004fec:	3201      	adds	r2, #1
 8004fee:	7812      	ldrb	r2, [r2, #0]
 8004ff0:	0212      	lsls	r2, r2, #8
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <check_fs+0xd8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d101      	bne.n	800500a <check_fs+0x92>
		return 0;
 8005006:	2300      	movs	r3, #0
 8005008:	e01c      	b.n	8005044 <check_fs+0xcc>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3352      	adds	r3, #82	; 0x52
 800500e:	3303      	adds	r3, #3
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	061a      	lsls	r2, r3, #24
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3352      	adds	r3, #82	; 0x52
 8005018:	3302      	adds	r3, #2
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	4313      	orrs	r3, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	3252      	adds	r2, #82	; 0x52
 8005024:	3201      	adds	r2, #1
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	0212      	lsls	r2, r2, #8
 800502a:	4313      	orrs	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8005032:	4313      	orrs	r3, r2
 8005034:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005038:	4a05      	ldr	r2, [pc, #20]	; (8005050 <check_fs+0xd8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d101      	bne.n	8005042 <check_fs+0xca>
		return 0;
 800503e:	2300      	movs	r3, #0
 8005040:	e000      	b.n	8005044 <check_fs+0xcc>

	return 1;
 8005042:	2301      	movs	r3, #1
}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	ffffaa55 	.word	0xffffaa55
 8005050:	00544146 	.word	0x00544146

08005054 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b096      	sub	sp, #88	; 0x58
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005068:	68b8      	ldr	r0, [r7, #8]
 800506a:	f7ff ff41 	bl	8004ef0 <get_ldnumber>
 800506e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005072:	2b00      	cmp	r3, #0
 8005074:	da01      	bge.n	800507a <find_volume+0x26>
 8005076:	230b      	movs	r3, #11
 8005078:	e33c      	b.n	80056f4 <find_volume+0x6a0>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800507a:	4ab3      	ldr	r2, [pc, #716]	; (8005348 <find_volume+0x2f4>)
 800507c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <find_volume+0x3a>
 800508a:	230c      	movs	r3, #12
 800508c:	e332      	b.n	80056f4 <find_volume+0x6a0>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005092:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01d      	beq.n	80050dc <find_volume+0x88>
		stat = disk_status(fs->drv);
 80050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a6:	3301      	adds	r3, #1
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fd ff6a 	bl	8002f84 <disk_status>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80050b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10c      	bne.n	80050dc <find_volume+0x88>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <find_volume+0x84>
 80050c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80050d4:	230a      	movs	r3, #10
 80050d6:	e30d      	b.n	80056f4 <find_volume+0x6a0>
			return FR_OK;				/* The file system object is valid */
 80050d8:	2300      	movs	r3, #0
 80050da:	e30b      	b.n	80056f4 <find_volume+0x6a0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80050e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f0:	3301      	adds	r3, #1
 80050f2:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fa:	3301      	adds	r3, #1
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fd ff5a 	bl	8002fb8 <disk_initialize>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800510a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005116:	2303      	movs	r3, #3
 8005118:	e2ec      	b.n	80056f4 <find_volume+0x6a0>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <find_volume+0xdc>
 8005120:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800512c:	230a      	movs	r3, #10
 800512e:	e2e1      	b.n	80056f4 <find_volume+0x6a0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005136:	3301      	adds	r3, #1
 8005138:	7818      	ldrb	r0, [r3, #0]
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005140:	330a      	adds	r3, #10
 8005142:	461a      	mov	r2, r3
 8005144:	2102      	movs	r1, #2
 8005146:	f7fd ff9d 	bl	8003084 <disk_ioctl>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10f      	bne.n	8005170 <find_volume+0x11c>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	330a      	adds	r3, #10
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515e:	d307      	bcc.n	8005170 <find_volume+0x11c>
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005166:	330a      	adds	r3, #10
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800516e:	d901      	bls.n	8005174 <find_volume+0x120>
 8005170:	2301      	movs	r3, #1
 8005172:	e2bf      	b.n	80056f4 <find_volume+0x6a0>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005178:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800517a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800517c:	f7ff fefc 	bl	8004f78 <check_fs>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005186:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800518a:	2b01      	cmp	r3, #1
 800518c:	d155      	bne.n	800523a <find_volume+0x1e6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800518e:	2300      	movs	r3, #0
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
 8005192:	e029      	b.n	80051e8 <find_volume+0x194>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8005194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800519e:	4413      	add	r3, r2
 80051a0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	3304      	adds	r3, #4
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d012      	beq.n	80051d2 <find_volume+0x17e>
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	330b      	adds	r3, #11
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	061a      	lsls	r2, r3, #24
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	330a      	adds	r3, #10
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	4313      	orrs	r3, r2
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	3209      	adds	r2, #9
 80051c2:	7812      	ldrb	r2, [r2, #0]
 80051c4:	0212      	lsls	r2, r2, #8
 80051c6:	4313      	orrs	r3, r2
 80051c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ca:	3208      	adds	r2, #8
 80051cc:	7812      	ldrb	r2, [r2, #0]
 80051ce:	431a      	orrs	r2, r3
 80051d0:	e000      	b.n	80051d4 <find_volume+0x180>
 80051d2:	2200      	movs	r2, #0
 80051d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80051dc:	440b      	add	r3, r1
 80051de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80051e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e4:	3301      	adds	r3, #1
 80051e6:	643b      	str	r3, [r7, #64]	; 0x40
 80051e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d9d2      	bls.n	8005194 <find_volume+0x140>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80051ee:	2300      	movs	r3, #0
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80051f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <find_volume+0x1aa>
 80051f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fa:	3b01      	subs	r3, #1
 80051fc:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80051fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005206:	4413      	add	r3, r2
 8005208:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800520c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800520e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <find_volume+0x1cc>
 8005214:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005216:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005218:	f7ff feae 	bl	8004f78 <check_fs>
 800521c:	4603      	mov	r3, r0
 800521e:	e000      	b.n	8005222 <find_volume+0x1ce>
 8005220:	2302      	movs	r3, #2
 8005222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8005226:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <find_volume+0x1e6>
 800522e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005230:	3301      	adds	r3, #1
 8005232:	643b      	str	r3, [r7, #64]	; 0x40
 8005234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005236:	2b03      	cmp	r3, #3
 8005238:	d9e1      	bls.n	80051fe <find_volume+0x1aa>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800523a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800523e:	2b03      	cmp	r3, #3
 8005240:	d101      	bne.n	8005246 <find_volume+0x1f2>
 8005242:	2301      	movs	r3, #1
 8005244:	e256      	b.n	80056f4 <find_volume+0x6a0>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <find_volume+0x1fe>
 800524e:	230d      	movs	r3, #13
 8005250:	e250      	b.n	80056f4 <find_volume+0x6a0>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	7b1b      	ldrb	r3, [r3, #12]
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	b21a      	sxth	r2, r3
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	7adb      	ldrb	r3, [r3, #11]
 800525e:	b21b      	sxth	r3, r3
 8005260:	4313      	orrs	r3, r2
 8005262:	b21b      	sxth	r3, r3
 8005264:	b29a      	uxth	r2, r3
 8005266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526c:	330a      	adds	r3, #10
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d001      	beq.n	8005278 <find_volume+0x224>
		return FR_NO_FILESYSTEM;
 8005274:	230d      	movs	r3, #13
 8005276:	e23d      	b.n	80056f4 <find_volume+0x6a0>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	7ddb      	ldrb	r3, [r3, #23]
 800527c:	021b      	lsls	r3, r3, #8
 800527e:	b21a      	sxth	r2, r3
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	7d9b      	ldrb	r3, [r3, #22]
 8005284:	b21b      	sxth	r3, r3
 8005286:	4313      	orrs	r3, r2
 8005288:	b21b      	sxth	r3, r3
 800528a:	b29b      	uxth	r3, r3
 800528c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800528e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d112      	bne.n	80052ba <find_volume+0x266>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800529a:	061a      	lsls	r2, r3, #24
 800529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80052a2:	041b      	lsls	r3, r3, #16
 80052a4:	4313      	orrs	r3, r2
 80052a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052a8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80052ac:	0212      	lsls	r2, r2, #8
 80052ae:	4313      	orrs	r3, r2
 80052b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80052b6:	4313      	orrs	r3, r2
 80052b8:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052c0:	3318      	adds	r3, #24
 80052c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052c4:	601a      	str	r2, [r3, #0]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	7c1a      	ldrb	r2, [r3, #16]
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d0:	3303      	adds	r3, #3
 80052d2:	701a      	strb	r2, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052da:	3303      	adds	r3, #3
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d008      	beq.n	80052f4 <find_volume+0x2a0>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e8:	3303      	adds	r3, #3
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d001      	beq.n	80052f4 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 80052f0:	230d      	movs	r3, #13
 80052f2:	e1ff      	b.n	80056f4 <find_volume+0x6a0>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052fa:	3303      	adds	r3, #3
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	7b5a      	ldrb	r2, [r3, #13]
 800530c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005312:	3302      	adds	r3, #2
 8005314:	701a      	strb	r2, [r3, #0]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8005316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531c:	3302      	adds	r3, #2
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00e      	beq.n	8005342 <find_volume+0x2ee>
 8005324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532a:	3302      	adds	r3, #2
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005336:	3302      	adds	r3, #2
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	3b01      	subs	r3, #1
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <find_volume+0x2f8>
		return FR_NO_FILESYSTEM;
 8005342:	230d      	movs	r3, #13
 8005344:	e1d6      	b.n	80056f4 <find_volume+0x6a0>
 8005346:	bf00      	nop
 8005348:	20000058 	.word	0x20000058

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534e:	7c9b      	ldrb	r3, [r3, #18]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	b21a      	sxth	r2, r3
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	7c5b      	ldrb	r3, [r3, #17]
 8005358:	b21b      	sxth	r3, r3
 800535a:	4313      	orrs	r3, r2
 800535c:	b21b      	sxth	r3, r3
 800535e:	b29a      	uxth	r2, r3
 8005360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005366:	3308      	adds	r3, #8
 8005368:	801a      	strh	r2, [r3, #0]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005370:	3308      	adds	r3, #8
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537a:	330a      	adds	r3, #10
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	b29b      	uxth	r3, r3
 8005382:	fbb2 f1f3 	udiv	r1, r2, r3
 8005386:	fb03 f301 	mul.w	r3, r3, r1
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <find_volume+0x342>
		return FR_NO_FILESYSTEM;
 8005392:	230d      	movs	r3, #13
 8005394:	e1ae      	b.n	80056f4 <find_volume+0x6a0>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	7d1b      	ldrb	r3, [r3, #20]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	b21a      	sxth	r2, r3
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	7cdb      	ldrb	r3, [r3, #19]
 80053a2:	b21b      	sxth	r3, r3
 80053a4:	4313      	orrs	r3, r2
 80053a6:	b21b      	sxth	r3, r3
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80053ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d112      	bne.n	80053d8 <find_volume+0x384>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80053b8:	061a      	lsls	r2, r3, #24
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80053c0:	041b      	lsls	r3, r3, #16
 80053c2:	4313      	orrs	r3, r2
 80053c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053c6:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80053ca:	0212      	lsls	r2, r2, #8
 80053cc:	4313      	orrs	r3, r2
 80053ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	7bdb      	ldrb	r3, [r3, #15]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	b21a      	sxth	r2, r3
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	7b9b      	ldrb	r3, [r3, #14]
 80053e4:	b21b      	sxth	r3, r3
 80053e6:	4313      	orrs	r3, r2
 80053e8:	b21b      	sxth	r3, r3
 80053ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80053ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <find_volume+0x3a2>
 80053f2:	230d      	movs	r3, #13
 80053f4:	e17e      	b.n	80056f4 <find_volume+0x6a0>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80053f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fa:	441a      	add	r2, r3
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005402:	3308      	adds	r3, #8
 8005404:	8819      	ldrh	r1, [r3, #0]
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800540c:	330a      	adds	r3, #10
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	b29b      	uxth	r3, r3
 8005414:	fbb1 f3f3 	udiv	r3, r1, r3
 8005418:	b29b      	uxth	r3, r3
 800541a:	4413      	add	r3, r2
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800541e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	429a      	cmp	r2, r3
 8005424:	d201      	bcs.n	800542a <find_volume+0x3d6>
 8005426:	230d      	movs	r3, #13
 8005428:	e164      	b.n	80056f4 <find_volume+0x6a0>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800542a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005436:	3302      	adds	r3, #2
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <find_volume+0x3f6>
 8005446:	230d      	movs	r3, #13
 8005448:	e154      	b.n	80056f4 <find_volume+0x6a0>
	fmt = FS_FAT12;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005456:	4293      	cmp	r3, r2
 8005458:	d902      	bls.n	8005460 <find_volume+0x40c>
 800545a:	2302      	movs	r3, #2
 800545c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005466:	4293      	cmp	r3, r2
 8005468:	d902      	bls.n	8005470 <find_volume+0x41c>
 800546a:	2303      	movs	r3, #3
 800546c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	1c9a      	adds	r2, r3, #2
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800547a:	3314      	adds	r3, #20
 800547c:	601a      	str	r2, [r3, #0]
	fs->volbase = bsect;								/* Volume start sector */
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005484:	331c      	adds	r3, #28
 8005486:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005488:	601a      	str	r2, [r3, #0]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800548a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800548c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800548e:	441a      	add	r2, r3
 8005490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005492:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005496:	601a      	str	r2, [r3, #0]
	fs->database = bsect + sysect;						/* Data start sector */
 8005498:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	441a      	add	r2, r3
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054a4:	3308      	adds	r3, #8
 80054a6:	601a      	str	r2, [r3, #0]
	if (fmt == FS_FAT32) {
 80054a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d127      	bne.n	8005500 <find_volume+0x4ac>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054b6:	3308      	adds	r3, #8
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <find_volume+0x46e>
 80054be:	230d      	movs	r3, #13
 80054c0:	e118      	b.n	80056f4 <find_volume+0x6a0>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054c8:	061a      	lsls	r2, r3, #24
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	4313      	orrs	r3, r2
 80054d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80054da:	0212      	lsls	r2, r2, #8
 80054dc:	4313      	orrs	r3, r2
 80054de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80054e4:	431a      	orrs	r2, r3
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80054ec:	3304      	adds	r3, #4
 80054ee:	601a      	str	r2, [r3, #0]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f6:	3314      	adds	r3, #20
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	647b      	str	r3, [r7, #68]	; 0x44
 80054fe:	e030      	b.n	8005562 <find_volume+0x50e>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005506:	3308      	adds	r3, #8
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <find_volume+0x4be>
 800550e:	230d      	movs	r3, #13
 8005510:	e0f0      	b.n	80056f4 <find_volume+0x6a0>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551c:	441a      	add	r2, r3
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005524:	3304      	adds	r3, #4
 8005526:	601a      	str	r2, [r3, #0]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800552c:	2b02      	cmp	r3, #2
 800552e:	d106      	bne.n	800553e <find_volume+0x4ea>
 8005530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005536:	3314      	adds	r3, #20
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	e010      	b.n	8005560 <find_volume+0x50c>
 800553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005544:	3314      	adds	r3, #20
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4613      	mov	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4413      	add	r3, r2
 800554e:	085a      	lsrs	r2, r3, #1
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005556:	3314      	adds	r3, #20
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005560:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005568:	3318      	adds	r3, #24
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005572:	330a      	adds	r3, #10
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800557a:	440b      	add	r3, r1
 800557c:	1e59      	subs	r1, r3, #1
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005584:	330a      	adds	r3, #10
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	fbb1 f3f3 	udiv	r3, r1, r3
 800558c:	429a      	cmp	r2, r3
 800558e:	d201      	bcs.n	8005594 <find_volume+0x540>
		return FR_NO_FILESYSTEM;
 8005590:	230d      	movs	r3, #13
 8005592:	e0af      	b.n	80056f4 <find_volume+0x6a0>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800559a:	3310      	adds	r3, #16
 800559c:	f04f 32ff 	mov.w	r2, #4294967295
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a8:	3310      	adds	r3, #16
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055b2:	330c      	adds	r3, #12
 80055b4:	601a      	str	r2, [r3, #0]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055bc:	3305      	adds	r3, #5
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	701a      	strb	r2, [r3, #0]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80055c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d17d      	bne.n	80056c6 <find_volume+0x672>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055d0:	021b      	lsls	r3, r3, #8
 80055d2:	b21a      	sxth	r2, r3
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055da:	b21b      	sxth	r3, r3
 80055dc:	4313      	orrs	r3, r2
 80055de:	b21b      	sxth	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d170      	bne.n	80056c6 <find_volume+0x672>
		&& move_window(fs, bsect + 1) == FR_OK)
 80055e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e6:	3301      	adds	r3, #1
 80055e8:	4619      	mov	r1, r3
 80055ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055ec:	f7fd ffe2 	bl	80035b4 <move_window>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d167      	bne.n	80056c6 <find_volume+0x672>
	{
		fs->fsi_flag = 0;
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fc:	3305      	adds	r3, #5
 80055fe:	2200      	movs	r2, #0
 8005600:	701a      	strb	r2, [r3, #0]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	b21a      	sxth	r2, r3
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8005612:	b21b      	sxth	r3, r3
 8005614:	4313      	orrs	r3, r2
 8005616:	b21b      	sxth	r3, r3
 8005618:	4a38      	ldr	r2, [pc, #224]	; (80056fc <find_volume+0x6a8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d153      	bne.n	80056c6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	78db      	ldrb	r3, [r3, #3]
 8005622:	061a      	lsls	r2, r3, #24
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	789b      	ldrb	r3, [r3, #2]
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	4313      	orrs	r3, r2
 800562c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800562e:	7852      	ldrb	r2, [r2, #1]
 8005630:	0212      	lsls	r2, r2, #8
 8005632:	4313      	orrs	r3, r2
 8005634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005636:	7812      	ldrb	r2, [r2, #0]
 8005638:	4313      	orrs	r3, r2
 800563a:	4a31      	ldr	r2, [pc, #196]	; (8005700 <find_volume+0x6ac>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d142      	bne.n	80056c6 <find_volume+0x672>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8005640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005642:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8005646:	061a      	lsls	r2, r3, #24
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	4313      	orrs	r3, r2
 8005652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005654:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8005658:	0212      	lsls	r2, r2, #8
 800565a:	4313      	orrs	r3, r2
 800565c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565e:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8005662:	4313      	orrs	r3, r2
 8005664:	4a27      	ldr	r2, [pc, #156]	; (8005704 <find_volume+0x6b0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d12d      	bne.n	80056c6 <find_volume+0x672>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800566a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566c:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8005670:	061a      	lsls	r2, r3, #24
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8005678:	041b      	lsls	r3, r3, #16
 800567a:	4313      	orrs	r3, r2
 800567c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800567e:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8005682:	0212      	lsls	r2, r2, #8
 8005684:	4313      	orrs	r3, r2
 8005686:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005688:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800568c:	431a      	orrs	r2, r3
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005694:	3310      	adds	r3, #16
 8005696:	601a      	str	r2, [r3, #0]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800569e:	061a      	lsls	r2, r3, #24
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 80056a6:	041b      	lsls	r3, r3, #16
 80056a8:	4313      	orrs	r3, r2
 80056aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ac:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80056b0:	0212      	lsls	r2, r2, #8
 80056b2:	4313      	orrs	r3, r2
 80056b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056b6:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80056ba:	431a      	orrs	r2, r3
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	330c      	adds	r3, #12
 80056c4:	601a      	str	r2, [r3, #0]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056cc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80056d0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80056d2:	4b0d      	ldr	r3, [pc, #52]	; (8005708 <find_volume+0x6b4>)
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <find_volume+0x6b4>)
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <find_volume+0x6b4>)
 80056e0:	881a      	ldrh	r2, [r3, #0]
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e8:	3306      	adds	r3, #6
 80056ea:	801a      	strh	r2, [r3, #0]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80056ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056ee:	f7fd fedf 	bl	80034b0 <clear_lock>
#endif

	return FR_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3758      	adds	r7, #88	; 0x58
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	ffffaa55 	.word	0xffffaa55
 8005700:	41615252 	.word	0x41615252
 8005704:	61417272 	.word	0x61417272
 8005708:	2000005c 	.word	0x2000005c

0800570c <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d022      	beq.n	8005764 <validate+0x58>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01e      	beq.n	8005764 <validate+0x58>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d017      	beq.n	8005764 <validate+0x58>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800573c:	3306      	adds	r3, #6
 800573e:	881a      	ldrh	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	889b      	ldrh	r3, [r3, #4]
 8005744:	429a      	cmp	r2, r3
 8005746:	d10d      	bne.n	8005764 <validate+0x58>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005750:	3301      	adds	r3, #1
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f7fd fc15 	bl	8002f84 <disk_status>
 800575a:	4603      	mov	r3, r0
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <validate+0x5c>
		return FR_INVALID_OBJECT;
 8005764:	2309      	movs	r3, #9
 8005766:	e000      	b.n	800576a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	4613      	mov	r3, r2
 8005780:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 8005786:	f107 0310 	add.w	r3, r7, #16
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff fbb0 	bl	8004ef0 <get_ldnumber>
 8005790:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	2b00      	cmp	r3, #0
 8005796:	da01      	bge.n	800579c <f_mount+0x28>
 8005798:	230b      	movs	r3, #11
 800579a:	e02f      	b.n	80057fc <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800579c:	4a19      	ldr	r2, [pc, #100]	; (8005804 <f_mount+0x90>)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80057ac:	69b8      	ldr	r0, [r7, #24]
 80057ae:	f7fd fe7f 	bl	80034b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	490d      	ldr	r1, [pc, #52]	; (8005804 <f_mount+0x90>)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <f_mount+0x6e>
 80057dc:	79fb      	ldrb	r3, [r7, #7]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d001      	beq.n	80057e6 <f_mount+0x72>
 80057e2:	2300      	movs	r3, #0
 80057e4:	e00a      	b.n	80057fc <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80057e6:	f107 0108 	add.w	r1, r7, #8
 80057ea:	f107 030c 	add.w	r3, r7, #12
 80057ee:	2200      	movs	r2, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fc2f 	bl	8005054 <find_volume>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80057fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000058 	.word	0x20000058

08005808 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b096      	sub	sp, #88	; 0x58
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <f_open+0x18>
 800581c:	2309      	movs	r3, #9
 800581e:	e178      	b.n	8005b12 <f_open+0x30a>
	fp->fs = 0;			/* Clear file object */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	b2da      	uxtb	r2, r3
 8005836:	f107 0108 	add.w	r1, r7, #8
 800583a:	f107 0320 	add.w	r3, r7, #32
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fc08 	bl	8005054 <find_volume>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800584a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800584e:	2b00      	cmp	r3, #0
 8005850:	f040 815d 	bne.w	8005b0e <f_open+0x306>
		INIT_BUF(dj);
 8005854:	f107 0314 	add.w	r3, r7, #20
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
 800585a:	4bb0      	ldr	r3, [pc, #704]	; (8005b1c <f_open+0x314>)
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
		res = follow_path(&dj, path);	/* Follow the file path */
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	f107 0320 	add.w	r3, r7, #32
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff fada 	bl	8004e20 <follow_path>
 800586c:	4603      	mov	r3, r0
 800586e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		dir = dj.dir;
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	653b      	str	r3, [r7, #80]	; 0x50
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005876:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800587a:	2b00      	cmp	r3, #0
 800587c:	d118      	bne.n	80058b0 <f_open+0xa8>
			if (!dir)	/* Default directory itself */
 800587e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005880:	2b00      	cmp	r3, #0
 8005882:	d103      	bne.n	800588c <f_open+0x84>
				res = FR_INVALID_NAME;
 8005884:	2306      	movs	r3, #6
 8005886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800588a:	e011      	b.n	80058b0 <f_open+0xa8>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	bf14      	ite	ne
 8005896:	2301      	movne	r3, #1
 8005898:	2300      	moveq	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	f107 0320 	add.w	r3, r7, #32
 80058a2:	4611      	mov	r1, r2
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fd fc81 	bl	80031ac <chk_lock>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	f003 031c 	and.w	r3, r3, #28
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80a1 	beq.w	80059fe <f_open+0x1f6>
			if (res != FR_OK) {					/* No file, create new */
 80058bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d019      	beq.n	80058f8 <f_open+0xf0>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80058c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d10e      	bne.n	80058ea <f_open+0xe2>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80058cc:	f7fd fcd8 	bl	8003280 <enq_lock>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d006      	beq.n	80058e4 <f_open+0xdc>
 80058d6:	f107 0320 	add.w	r3, r7, #32
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fe fff0 	bl	80048c0 <dir_register>
 80058e0:	4603      	mov	r3, r0
 80058e2:	e000      	b.n	80058e6 <f_open+0xde>
 80058e4:	2312      	movs	r3, #18
 80058e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	f043 0308 	orr.w	r3, r3, #8
 80058f0:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 80058f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058f4:	653b      	str	r3, [r7, #80]	; 0x50
 80058f6:	e012      	b.n	800591e <f_open+0x116>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80058f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058fa:	330b      	adds	r3, #11
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 0311 	and.w	r3, r3, #17
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <f_open+0x106>
					res = FR_DENIED;
 8005906:	2307      	movs	r3, #7
 8005908:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800590c:	e007      	b.n	800591e <f_open+0x116>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <f_open+0x116>
						res = FR_EXIST;
 8005918:	2308      	movs	r3, #8
 800591a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800591e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005922:	2b00      	cmp	r3, #0
 8005924:	f040 8089 	bne.w	8005a3a <f_open+0x232>
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8083 	beq.w	8005a3a <f_open+0x232>
				dw = GET_FATTIME();				/* Created time */
 8005934:	f7fc fdf6 	bl	8002524 <get_fattime>
 8005938:	64f8      	str	r0, [r7, #76]	; 0x4c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800593a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800593c:	330e      	adds	r3, #14
 800593e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
 8005944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005946:	b29b      	uxth	r3, r3
 8005948:	0a1b      	lsrs	r3, r3, #8
 800594a:	b29a      	uxth	r2, r3
 800594c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800594e:	330f      	adds	r3, #15
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005956:	0c1a      	lsrs	r2, r3, #16
 8005958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800595a:	3310      	adds	r3, #16
 800595c:	b2d2      	uxtb	r2, r2
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005962:	0e1a      	lsrs	r2, r3, #24
 8005964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005966:	3311      	adds	r3, #17
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800596c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800596e:	330b      	adds	r3, #11
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8005974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005976:	331c      	adds	r3, #28
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597e:	331d      	adds	r3, #29
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
 8005984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005986:	331e      	adds	r3, #30
 8005988:	2200      	movs	r2, #0
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800598e:	331f      	adds	r3, #31
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fcf7 	bl	800438c <ld_clust>
 800599e:	64b8      	str	r0, [r7, #72]	; 0x48
				st_clust(dir, 0);				/* cluster = 0 */
 80059a0:	2100      	movs	r1, #0
 80059a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80059a4:	f7fe fd20 	bl	80043e8 <st_clust>
				dj.fs->wflag = 1;
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ae:	3304      	adds	r3, #4
 80059b0:	2201      	movs	r2, #1
 80059b2:	701a      	strb	r2, [r3, #0]
				if (cl) {						/* Remove the cluster chain if exist */
 80059b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d03f      	beq.n	8005a3a <f_open+0x232>
					dw = dj.fs->winsect;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80059c0:	330c      	adds	r3, #12
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	64fb      	str	r3, [r7, #76]	; 0x4c
					res = remove_chain(dj.fs, cl);
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe f97b 	bl	8003cc6 <remove_chain>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res == FR_OK) {
 80059d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d12d      	bne.n	8005a3a <f_open+0x232>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059e2:	3a01      	subs	r2, #1
 80059e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059e8:	330c      	adds	r3, #12
 80059ea:	601a      	str	r2, [r3, #0]
						res = move_window(dj.fs, dw);
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fd fddf 	bl	80035b4 <move_window>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80059fc:	e01d      	b.n	8005a3a <f_open+0x232>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80059fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d119      	bne.n	8005a3a <f_open+0x232>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a08:	330b      	adds	r3, #11
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <f_open+0x214>
					res = FR_NO_FILE;
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8005a1a:	e00e      	b.n	8005a3a <f_open+0x232>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d009      	beq.n	8005a3a <f_open+0x232>
 8005a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a28:	330b      	adds	r3, #11
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <f_open+0x232>
						res = FR_DENIED;
 8005a34:	2307      	movs	r3, #7
 8005a36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
		}
		if (res == FR_OK) {
 8005a3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d12b      	bne.n	8005a9a <f_open+0x292>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <f_open+0x24c>
				mode |= FA__WRITTEN;
 8005a4c:	79fb      	ldrb	r3, [r7, #7]
 8005a4e:	f043 0320 	orr.w	r3, r3, #32
 8005a52:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a66:	621a      	str	r2, [r3, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005a68:	79fb      	ldrb	r3, [r7, #7]
 8005a6a:	f023 0301 	bic.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	461a      	mov	r2, r3
 8005a7a:	f107 0320 	add.w	r3, r7, #32
 8005a7e:	4611      	mov	r1, r2
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fd fc21 	bl	80032c8 <inc_lock>
 8005a86:	4602      	mov	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <f_open+0x292>
 8005a94:	2302      	movs	r3, #2
 8005a96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005a9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d135      	bne.n	8005b0e <f_open+0x306>
			fp->flag = mode;					/* File access mode */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	79fa      	ldrb	r2, [r7, #7]
 8005aa6:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fc6a 	bl	800438c <ld_clust>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac0:	331f      	adds	r3, #31
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	061a      	lsls	r2, r3, #24
 8005ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac8:	331e      	adds	r3, #30
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ad2:	321d      	adds	r2, #29
 8005ad4:	7812      	ldrb	r2, [r2, #0]
 8005ad6:	0212      	lsls	r2, r2, #8
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005adc:	321c      	adds	r2, #28
 8005ade:	7812      	ldrb	r2, [r2, #0]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b06:	3306      	adds	r3, #6
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3758      	adds	r7, #88	; 0x58
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000078 	.word	0x20000078

08005b20 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08c      	sub	sp, #48	; 0x30
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f7ff fde7 	bl	800570c <validate>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005b42:	7ffb      	ldrb	r3, [r7, #31]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <f_read+0x2c>
 8005b48:	7ffb      	ldrb	r3, [r7, #31]
 8005b4a:	e15a      	b.n	8005e02 <f_read+0x2e2>
	if (fp->err)								/* Check error */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	79db      	ldrb	r3, [r3, #7]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	79db      	ldrb	r3, [r3, #7]
 8005b58:	e153      	b.n	8005e02 <f_read+0x2e2>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	799b      	ldrb	r3, [r3, #6]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005b66:	2307      	movs	r3, #7
 8005b68:	e14b      	b.n	8005e02 <f_read+0x2e2>
	remain = fp->fsize - fp->fptr;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	f240 813c 	bls.w	8005df8 <f_read+0x2d8>
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005b84:	e138      	b.n	8005df8 <f_read+0x2d8>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b92:	330a      	adds	r3, #10
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b9a:	fb03 f301 	mul.w	r3, r3, r1
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 80d4 	bne.w	8005d4e <f_read+0x22e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb2:	330a      	adds	r3, #10
 8005bb4:	881b      	ldrh	r3, [r3, #0]
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	4013      	ands	r3, r2
 8005bce:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d130      	bne.n	8005c38 <f_read+0x118>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d103      	bne.n	8005be6 <f_read+0xc6>
					clst = fp->sclust;			/* Follow from the origin */
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be4:	e014      	b.n	8005c10 <f_read+0xf0>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <f_read+0xde>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7fe f97f 	bl	8003ef8 <clmt_clust>
 8005bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005bfc:	e008      	b.n	8005c10 <f_read+0xf0>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f7fd fdfd 	bl	8003808 <get_fat>
 8005c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d804      	bhi.n	8005c20 <f_read+0x100>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	71da      	strb	r2, [r3, #7]
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	e0f0      	b.n	8005e02 <f_read+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d104      	bne.n	8005c32 <f_read+0x112>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	71da      	strb	r2, [r3, #7]
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0e7      	b.n	8005e02 <f_read+0x2e2>
				fp->clust = clst;				/* Update current cluster */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c36:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7fd fdb9 	bl	80037ba <clust2sect>
 8005c48:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d104      	bne.n	8005c5a <f_read+0x13a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2202      	movs	r2, #2
 8005c54:	71da      	strb	r2, [r3, #7]
 8005c56:	2302      	movs	r3, #2
 8005c58:	e0d3      	b.n	8005e02 <f_read+0x2e2>
			sect += csect;
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6a:	330a      	adds	r3, #10
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d064      	beq.n	8005d48 <f_read+0x228>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005c7e:	7dfa      	ldrb	r2, [r7, #23]
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	441a      	add	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d909      	bls.n	8005ca8 <f_read+0x188>
					cc = fp->fs->csize - csect;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9c:	3302      	adds	r3, #2
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	7818      	ldrb	r0, [r3, #0]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	6a39      	ldr	r1, [r7, #32]
 8005cba:	f7fd f9a3 	bl	8003004 <disk_read>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <f_read+0x1ae>
					ABORT(fp->fs, FR_DISK_ERR);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	71da      	strb	r2, [r3, #7]
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e099      	b.n	8005e02 <f_read+0x2e2>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d028      	beq.n	8005d30 <f_read+0x210>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d91d      	bls.n	8005d30 <f_read+0x210>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad2      	subs	r2, r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d0c:	330a      	adds	r3, #10
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	fb03 f302 	mul.w	r3, r3, r2
 8005d14:	6a3a      	ldr	r2, [r7, #32]
 8005d16:	18d0      	adds	r0, r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d26:	330a      	adds	r3, #10
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f7fd f9c8 	bl	80030c0 <mem_cpy>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d38:	330a      	adds	r3, #10
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	fb02 f303 	mul.w	r3, r2, r3
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005d46:	e043      	b.n	8005dd0 <f_read+0x2b0>
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d56:	330a      	adds	r3, #10
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d68:	330a      	adds	r3, #10
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d70:	fb03 f301 	mul.w	r3, r3, r1
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	1ac3      	subs	r3, r0, r3
 8005d78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005d7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d901      	bls.n	8005d86 <f_read+0x266>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	4610      	mov	r0, r2
 8005d92:	f7fd fc0f 	bl	80035b4 <move_window>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <f_read+0x286>
			ABORT(fp->fs, FR_DISK_ERR);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	71da      	strb	r2, [r3, #7]
 8005da2:	2301      	movs	r3, #1
 8005da4:	e02d      	b.n	8005e02 <f_read+0x2e2>
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6819      	ldr	r1, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005db6:	330a      	adds	r3, #10
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	fbb2 f0f3 	udiv	r0, r2, r3
 8005dbe:	fb03 f300 	mul.w	r3, r3, r0
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	440b      	add	r3, r1
 8005dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6a38      	ldr	r0, [r7, #32]
 8005dcc:	f7fd f978 	bl	80030c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	4413      	add	r3, r2
 8005dd6:	623b      	str	r3, [r7, #32]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	441a      	add	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	441a      	add	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f47f aec3 	bne.w	8005b86 <f_read+0x66>
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3730      	adds	r7, #48	; 0x30
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7ff fc7a 	bl	800570c <validate>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d17a      	bne.n	8005f18 <f_sync+0x10e>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	799b      	ldrb	r3, [r3, #6]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d074      	beq.n	8005f18 <f_sync+0x10e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fd fbbb 	bl	80035b4 <move_window>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d167      	bne.n	8005f18 <f_sync+0x10e>
				dir = fp->dir_ptr;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	330b      	adds	r3, #11
 8005e52:	781a      	ldrb	r2, [r3, #0]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	330b      	adds	r3, #11
 8005e58:	f042 0220 	orr.w	r2, r2, #32
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	331c      	adds	r3, #28
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	331d      	adds	r3, #29
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	0c1a      	lsrs	r2, r3, #16
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	331e      	adds	r3, #30
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0e1a      	lsrs	r2, r3, #24
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	331f      	adds	r3, #31
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6938      	ldr	r0, [r7, #16]
 8005ea2:	f7fe faa1 	bl	80043e8 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8005ea6:	f7fc fb3d 	bl	8002524 <get_fattime>
 8005eaa:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	3316      	adds	r3, #22
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	3317      	adds	r3, #23
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	0c1a      	lsrs	r2, r3, #16
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	3318      	adds	r3, #24
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	0e1a      	lsrs	r2, r3, #24
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	3319      	adds	r3, #25
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3312      	adds	r3, #18
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3313      	adds	r3, #19
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	799b      	ldrb	r3, [r3, #6]
 8005ef2:	f023 0320 	bic.w	r3, r3, #32
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f04:	3304      	adds	r3, #4
 8005f06:	2201      	movs	r2, #1
 8005f08:	701a      	strb	r2, [r3, #0]
				res = sync_fs(fp->fs);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd fb84 	bl	800361c <sync_fs>
 8005f14:	4603      	mov	r3, r0
 8005f16:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b084      	sub	sp, #16
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff ff6d 	bl	8005e0a <f_sync>
 8005f30:	4603      	mov	r3, r0
 8005f32:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d114      	bne.n	8005f64 <f_close+0x42>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff fbe6 	bl	800570c <validate>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10c      	bne.n	8005f64 <f_close+0x42>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fd fa6a 	bl	8003428 <dec_lock>
 8005f54:	4603      	mov	r3, r0
 8005f56:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <f_close+0x42>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8005f86:	4b1e      	ldr	r3, [pc, #120]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005f88:	7a5b      	ldrb	r3, [r3, #9]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d831      	bhi.n	8005ff4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005f90:	4b1b      	ldr	r3, [pc, #108]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005f92:	7a5b      	ldrb	r3, [r3, #9]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005fa0:	7a5b      	ldrb	r3, [r3, #9]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005fae:	4b14      	ldr	r3, [pc, #80]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005fb0:	7a5b      	ldrb	r3, [r3, #9]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b12      	ldr	r3, [pc, #72]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005fb8:	4413      	add	r3, r2
 8005fba:	79fa      	ldrb	r2, [r7, #7]
 8005fbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005fbe:	4b10      	ldr	r3, [pc, #64]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005fc0:	7a5b      	ldrb	r3, [r3, #9]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	b2d1      	uxtb	r1, r2
 8005fc8:	4a0d      	ldr	r2, [pc, #52]	; (8006000 <FATFS_LinkDriverEx+0x90>)
 8005fca:	7251      	strb	r1, [r2, #9]
 8005fcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005fce:	7dbb      	ldrb	r3, [r7, #22]
 8005fd0:	3330      	adds	r3, #48	; 0x30
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	223a      	movs	r2, #58	; 0x3a
 8005fde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	3302      	adds	r3, #2
 8005fe4:	222f      	movs	r2, #47	; 0x2f
 8005fe6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3303      	adds	r3, #3
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr
 8006000:	20000278 	.word	0x20000278

08006004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800600e:	2200      	movs	r2, #0
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffac 	bl	8005f70 <FATFS_LinkDriverEx>
 8006018:	4603      	mov	r3, r0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	4603      	mov	r3, r0
 800602c:	6039      	str	r1, [r7, #0]
 800602e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006030:	88fb      	ldrh	r3, [r7, #6]
 8006032:	2b7f      	cmp	r3, #127	; 0x7f
 8006034:	d802      	bhi.n	800603c <ff_convert+0x18>
		c = chr;
 8006036:	88fb      	ldrh	r3, [r7, #6]
 8006038:	81fb      	strh	r3, [r7, #14]
 800603a:	e025      	b.n	8006088 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2bff      	cmp	r3, #255	; 0xff
 8006046:	d805      	bhi.n	8006054 <ff_convert+0x30>
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	3b80      	subs	r3, #128	; 0x80
 800604c:	4a11      	ldr	r2, [pc, #68]	; (8006094 <ff_convert+0x70>)
 800604e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006052:	e000      	b.n	8006056 <ff_convert+0x32>
 8006054:	2300      	movs	r3, #0
 8006056:	81fb      	strh	r3, [r7, #14]
 8006058:	e016      	b.n	8006088 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800605a:	2300      	movs	r3, #0
 800605c:	81fb      	strh	r3, [r7, #14]
 800605e:	e009      	b.n	8006074 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8006060:	89fb      	ldrh	r3, [r7, #14]
 8006062:	4a0c      	ldr	r2, [pc, #48]	; (8006094 <ff_convert+0x70>)
 8006064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006068:	88fa      	ldrh	r2, [r7, #6]
 800606a:	429a      	cmp	r2, r3
 800606c:	d006      	beq.n	800607c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	3301      	adds	r3, #1
 8006072:	81fb      	strh	r3, [r7, #14]
 8006074:	89fb      	ldrh	r3, [r7, #14]
 8006076:	2b7f      	cmp	r3, #127	; 0x7f
 8006078:	d9f2      	bls.n	8006060 <ff_convert+0x3c>
 800607a:	e000      	b.n	800607e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800607c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800607e:	89fb      	ldrh	r3, [r7, #14]
 8006080:	3380      	adds	r3, #128	; 0x80
 8006082:	b29b      	uxth	r3, r3
 8006084:	b2db      	uxtb	r3, r3
 8006086:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8006088:	89fb      	ldrh	r3, [r7, #14]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	bc80      	pop	{r7}
 8006092:	4770      	bx	lr
 8006094:	08008b98 	.word	0x08008b98

08006098 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	4603      	mov	r3, r0
 80060a0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	e002      	b.n	80060ae <ff_wtoupper+0x16>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	4a0f      	ldr	r2, [pc, #60]	; (80060ec <ff_wtoupper+0x54>)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d006      	beq.n	80060c8 <ff_wtoupper+0x30>
 80060ba:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <ff_wtoupper+0x54>)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d1ef      	bne.n	80060a8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 80060c8:	4a08      	ldr	r2, [pc, #32]	; (80060ec <ff_wtoupper+0x54>)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <ff_wtoupper+0x46>
 80060d4:	4a06      	ldr	r2, [pc, #24]	; (80060f0 <ff_wtoupper+0x58>)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060dc:	e000      	b.n	80060e0 <ff_wtoupper+0x48>
 80060de:	88fb      	ldrh	r3, [r7, #6]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	08008c98 	.word	0x08008c98
 80060f0:	08008e78 	.word	0x08008e78

080060f4 <__libc_init_array>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	2500      	movs	r5, #0
 80060f8:	4e0c      	ldr	r6, [pc, #48]	; (800612c <__libc_init_array+0x38>)
 80060fa:	4c0d      	ldr	r4, [pc, #52]	; (8006130 <__libc_init_array+0x3c>)
 80060fc:	1ba4      	subs	r4, r4, r6
 80060fe:	10a4      	asrs	r4, r4, #2
 8006100:	42a5      	cmp	r5, r4
 8006102:	d109      	bne.n	8006118 <__libc_init_array+0x24>
 8006104:	f000 f822 	bl	800614c <_init>
 8006108:	2500      	movs	r5, #0
 800610a:	4e0a      	ldr	r6, [pc, #40]	; (8006134 <__libc_init_array+0x40>)
 800610c:	4c0a      	ldr	r4, [pc, #40]	; (8006138 <__libc_init_array+0x44>)
 800610e:	1ba4      	subs	r4, r4, r6
 8006110:	10a4      	asrs	r4, r4, #2
 8006112:	42a5      	cmp	r5, r4
 8006114:	d105      	bne.n	8006122 <__libc_init_array+0x2e>
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800611c:	4798      	blx	r3
 800611e:	3501      	adds	r5, #1
 8006120:	e7ee      	b.n	8006100 <__libc_init_array+0xc>
 8006122:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006126:	4798      	blx	r3
 8006128:	3501      	adds	r5, #1
 800612a:	e7f2      	b.n	8006112 <__libc_init_array+0x1e>
 800612c:	08009058 	.word	0x08009058
 8006130:	08009058 	.word	0x08009058
 8006134:	08009058 	.word	0x08009058
 8006138:	0800905c 	.word	0x0800905c

0800613c <memset>:
 800613c:	4603      	mov	r3, r0
 800613e:	4402      	add	r2, r0
 8006140:	4293      	cmp	r3, r2
 8006142:	d100      	bne.n	8006146 <memset+0xa>
 8006144:	4770      	bx	lr
 8006146:	f803 1b01 	strb.w	r1, [r3], #1
 800614a:	e7f9      	b.n	8006140 <memset+0x4>

0800614c <_init>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr

08006158 <_fini>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr
