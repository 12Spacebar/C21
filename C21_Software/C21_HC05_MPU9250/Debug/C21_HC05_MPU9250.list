
C21_HC05_MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b74  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000010  08003cd4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08003cd4  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f58  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001519  00000000  00000000  00028f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008d8  00000000  00000000  0002a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000858  00000000  00000000  0002ad80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013c5f  00000000  00000000  0002b5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006cc5  00000000  00000000  0003f237  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d686  00000000  00000000  00045efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b3582  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  000b3600  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c6c 	.word	0x08003c6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003c6c 	.word	0x08003c6c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a48:	f1a2 0201 	sub.w	r2, r2, #1
 8000a4c:	d1ed      	bne.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_I2C_ClearBusyFlagErrata_2_14_7>:
float a1 = -1.9382;
float a2 = 0.9400;



void HAL_I2C_ClearBusyFlagErrata_2_14_7(I2C_HandleTypeDef *hi2c) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

    static uint8_t resetTried = 0;
    if (resetTried == 1) {
 8000bb0:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x188>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	f000 80b6 	beq.w	8000d26 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x17e>
        return ;
    }


    uint32_t SDA_PIN = GPIO_PIN_9;
 8000bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbe:	61fb      	str	r3, [r7, #28]
    uint32_t SCL_PIN = GPIO_PIN_8;
 8000bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitTypeDef GPIO_InitStruct;

    // 1
    __HAL_I2C_DISABLE(hi2c);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f022 0201 	bic.w	r2, r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]

    // 2
    GPIO_InitStruct.Pin = SDA_PIN|SCL_PIN;
 8000bd6:	69fa      	ldr	r2, [r7, #28]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bde:	2311      	movs	r3, #17
 8000be0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4850      	ldr	r0, [pc, #320]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000bf2:	f001 f83f 	bl	8001c74 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bfc:	484d      	ldr	r0, [pc, #308]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000bfe:	f001 f9aa 	bl	8001f56 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,GPIO_PIN_SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c08:	484a      	ldr	r0, [pc, #296]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c0a:	f001 f9a4 	bl	8001f56 <HAL_GPIO_WritePin>
//    HAL_GPIO_WRITE_ODR(GPIOB, SDA_PIN);
//    HAL_GPIO_WRITE_ODR(GPIOB, SCL_PIN);

    // 3
    GPIO_PinState pinState;
    if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_RESET) {
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4619      	mov	r1, r3
 8000c14:	4847      	ldr	r0, [pc, #284]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c16:	f001 f987 	bl	8001f28 <HAL_GPIO_ReadPin>
//        for(;;){}
    }
    if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_RESET) {
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4844      	ldr	r0, [pc, #272]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c22:	f001 f981 	bl	8001f28 <HAL_GPIO_ReadPin>
//        for(;;){}
    }

    // 4
    GPIO_InitStruct.Pin = SDA_PIN;
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0308 	add.w	r3, r7, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4840      	ldr	r0, [pc, #256]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c32:	f001 f81f 	bl	8001c74 <HAL_GPIO_Init>

    HAL_GPIO_TogglePin(GPIOB, SDA_PIN);
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	483d      	ldr	r0, [pc, #244]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c3e:	f001 f9a2 	bl	8001f86 <HAL_GPIO_TogglePin>

    // 5
    if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_SET) {
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4619      	mov	r1, r3
 8000c48:	483a      	ldr	r0, [pc, #232]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c4a:	f001 f96d 	bl	8001f28 <HAL_GPIO_ReadPin>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d100      	bne.n	8000c56 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xae>
        for(;;){}
 8000c54:	e7fe      	b.n	8000c54 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xac>
    }

    // 6
    GPIO_InitStruct.Pin = SCL_PIN;
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4834      	ldr	r0, [pc, #208]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c62:	f001 f807 	bl	8001c74 <HAL_GPIO_Init>

    HAL_GPIO_TogglePin(GPIOB, SCL_PIN);
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4831      	ldr	r0, [pc, #196]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c6e:	f001 f98a 	bl	8001f86 <HAL_GPIO_TogglePin>

    // 7
    if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_SET) {
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	4619      	mov	r1, r3
 8000c78:	482e      	ldr	r0, [pc, #184]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c7a:	f001 f955 	bl	8001f28 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d100      	bne.n	8000c86 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xde>
        for(;;){}
 8000c84:	e7fe      	b.n	8000c84 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xdc>
    }

    // 8
    GPIO_InitStruct.Pin = SDA_PIN;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4828      	ldr	r0, [pc, #160]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c92:	f000 ffef 	bl	8001c74 <HAL_GPIO_Init>

    HAL_GPIO_WRITE_ODR(GPIOB, SDA_PIN);
 8000c96:	69f9      	ldr	r1, [r7, #28]
 8000c98:	4826      	ldr	r0, [pc, #152]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000c9a:	f000 f84d 	bl	8000d38 <HAL_GPIO_WRITE_ODR>

    // 9
    if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_RESET) {
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4823      	ldr	r0, [pc, #140]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000ca6:	f001 f93f 	bl	8001f28 <HAL_GPIO_ReadPin>
//        for(;;){}
    }

    // 10
    GPIO_InitStruct.Pin = SCL_PIN;
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481f      	ldr	r0, [pc, #124]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000cb6:	f000 ffdd 	bl	8001c74 <HAL_GPIO_Init>

    HAL_GPIO_WRITE_ODR(GPIOB, SCL_PIN);
 8000cba:	69b9      	ldr	r1, [r7, #24]
 8000cbc:	481d      	ldr	r0, [pc, #116]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000cbe:	f000 f83b 	bl	8000d38 <HAL_GPIO_WRITE_ODR>

    // 11
    if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_RESET) {
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481a      	ldr	r0, [pc, #104]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000cca:	f001 f92d 	bl	8001f28 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d100      	bne.n	8000cd6 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x12e>
        for(;;){}
 8000cd4:	e7fe      	b.n	8000cd4 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x12c>
    }

    // 12
    GPIO_InitStruct.Pin = SDA_PIN|SCL_PIN;
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cde:	2312      	movs	r3, #18
 8000ce0:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4812      	ldr	r0, [pc, #72]	; (8000d34 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8000cea:	f000 ffc3 	bl	8001c74 <HAL_GPIO_Init>

   // 13
   hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cfc:	601a      	str	r2, [r3, #0]

   // 14
   hi2c->Instance->CR1 ^= I2C_CR1_SWRST;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8000d0c:	601a      	str	r2, [r3, #0]

   // 15
   __HAL_I2C_ENABLE(hi2c);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f042 0201 	orr.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

   resetTried = 1;
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x188>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	e000      	b.n	8000d28 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x180>
        return ;
 8000d26:	bf00      	nop
}
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000002c 	.word	0x2000002c
 8000d34:	40010c00 	.word	0x40010c00

08000d38 <HAL_GPIO_WRITE_ODR>:

void HAL_GPIO_WRITE_ODR(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR |= GPIO_Pin;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	887b      	ldrh	r3, [r7, #2]
 8000d4a:	431a      	orrs	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	60da      	str	r2, [r3, #12]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
	...

08000d5c <init_MPU>:

char init_MPU(){
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b08d      	sub	sp, #52	; 0x34
 8000d60:	af02      	add	r7, sp, #8
    char status = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8000d68:	23d0      	movs	r3, #208	; 0xd0
 8000d6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t magnet_address = MAG_ADRRESS;
 8000d6e:	2318      	movs	r3, #24
 8000d70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25




  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8000d74:	e017      	b.n	8000da6 <init_MPU+0x4a>
    	if(HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) == HAL_BUSY){
 8000d76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	2203      	movs	r2, #3
 8000d80:	488a      	ldr	r0, [pc, #552]	; (8000fac <init_MPU+0x250>)
 8000d82:	f001 fda9 	bl	80028d8 <HAL_I2C_IsDeviceReady>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d107      	bne.n	8000d9c <init_MPU+0x40>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d90:	4887      	ldr	r0, [pc, #540]	; (8000fb0 <init_MPU+0x254>)
 8000d92:	f001 f8f8 	bl	8001f86 <HAL_GPIO_TogglePin>
			HAL_I2C_ClearBusyFlagErrata_2_14_7(&hi2c1);
 8000d96:	4885      	ldr	r0, [pc, #532]	; (8000fac <init_MPU+0x250>)
 8000d98:	f7ff ff06 	bl	8000ba8 <HAL_I2C_ClearBusyFlagErrata_2_14_7>
    	}
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da0:	4884      	ldr	r0, [pc, #528]	; (8000fb4 <init_MPU+0x258>)
 8000da2:	f001 f8f0 	bl	8001f86 <HAL_GPIO_TogglePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8000da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000daa:	b299      	uxth	r1, r3
 8000dac:	2302      	movs	r3, #2
 8000dae:	2203      	movs	r2, #3
 8000db0:	487e      	ldr	r0, [pc, #504]	; (8000fac <init_MPU+0x250>)
 8000db2:	f001 fd91 	bl	80028d8 <HAL_I2C_IsDeviceReady>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1dc      	bne.n	8000d76 <init_MPU+0x1a>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc2:	487c      	ldr	r0, [pc, #496]	; (8000fb4 <init_MPU+0x258>)
 8000dc4:	f001 f8c7 	bl	8001f56 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dce:	4879      	ldr	r0, [pc, #484]	; (8000fb4 <init_MPU+0x258>)
 8000dd0:	f001 f8c1 	bl	8001f56 <HAL_GPIO_WritePin>

//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8000dd4:	236b      	movs	r3, #107	; 0x6b
 8000dd6:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8000de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000de4:	b299      	uxth	r1, r3
 8000de6:	f107 0220 	add.w	r2, r7, #32
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2302      	movs	r3, #2
 8000df2:	486e      	ldr	r0, [pc, #440]	; (8000fac <init_MPU+0x250>)
 8000df4:	f001 fa18 	bl	8002228 <HAL_I2C_Master_Transmit>

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 8000df8:	2319      	movs	r3, #25
 8000dfa:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000e04:	bf00      	nop
 8000e06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	f107 0220 	add.w	r2, r7, #32
 8000e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2302      	movs	r3, #2
 8000e18:	4864      	ldr	r0, [pc, #400]	; (8000fac <init_MPU+0x250>)
 8000e1a:	f001 fa05 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f0      	bne.n	8000e06 <init_MPU+0xaa>

	d[0] = CONFIG;
 8000e24:	231a      	movs	r3, #26
 8000e26:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = lpf;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000e30:	bf00      	nop
 8000e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e36:	b299      	uxth	r1, r3
 8000e38:	f107 0220 	add.w	r2, r7, #32
 8000e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2302      	movs	r3, #2
 8000e44:	4859      	ldr	r0, [pc, #356]	; (8000fac <init_MPU+0x250>)
 8000e46:	f001 f9ef 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f0      	bne.n	8000e32 <init_MPU+0xd6>

	d[0] = GYRO_CONFIG;
 8000e50:	231b      	movs	r3, #27
 8000e52:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 8000e56:	2318      	movs	r3, #24
 8000e58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000e5c:	bf00      	nop
 8000e5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e62:	b299      	uxth	r1, r3
 8000e64:	f107 0220 	add.w	r2, r7, #32
 8000e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2302      	movs	r3, #2
 8000e70:	484e      	ldr	r0, [pc, #312]	; (8000fac <init_MPU+0x250>)
 8000e72:	f001 f9d9 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1f0      	bne.n	8000e5e <init_MPU+0x102>

	d[0] = ACCEL_CONFIG;
 8000e7c:	231c      	movs	r3, #28
 8000e7e:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000e88:	bf00      	nop
 8000e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e8e:	b299      	uxth	r1, r3
 8000e90:	f107 0220 	add.w	r2, r7, #32
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	4843      	ldr	r0, [pc, #268]	; (8000fac <init_MPU+0x250>)
 8000e9e:	f001 f9c3 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1f0      	bne.n	8000e8a <init_MPU+0x12e>

	d[0] = ACCEL_CONFIG2;
 8000ea8:	231d      	movs	r3, #29
 8000eaa:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x02;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000eb4:	bf00      	nop
 8000eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eba:	b299      	uxth	r1, r3
 8000ebc:	f107 0220 	add.w	r2, r7, #32
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	4838      	ldr	r0, [pc, #224]	; (8000fac <init_MPU+0x250>)
 8000eca:	f001 f9ad 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f0      	bne.n	8000eb6 <init_MPU+0x15a>


	d[0] = INIT_ENB;
 8000ed4:	2338      	movs	r3, #56	; 0x38
 8000ed6:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000ee0:	bf00      	nop
 8000ee2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ee6:	b299      	uxth	r1, r3
 8000ee8:	f107 0220 	add.w	r2, r7, #32
 8000eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	482d      	ldr	r0, [pc, #180]	; (8000fac <init_MPU+0x250>)
 8000ef6:	f001 f997 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f0      	bne.n	8000ee2 <init_MPU+0x186>

	d[0] = USER_CTRL;
 8000f00:	236a      	movs	r3, #106	; 0x6a
 8000f02:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = zero;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000f0c:	bf00      	nop
 8000f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f12:	b299      	uxth	r1, r3
 8000f14:	f107 0220 	add.w	r2, r7, #32
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	4822      	ldr	r0, [pc, #136]	; (8000fac <init_MPU+0x250>)
 8000f22:	f001 f981 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1f0      	bne.n	8000f0e <init_MPU+0x1b2>

	d[0] = INT_BYPASS;
 8000f2c:	2337      	movs	r3, #55	; 0x37
 8000f2e:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = stop_i2c_master;
 8000f32:	2322      	movs	r3, #34	; 0x22
 8000f34:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000f38:	bf00      	nop
 8000f3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f3e:	b299      	uxth	r1, r3
 8000f40:	f107 0220 	add.w	r2, r7, #32
 8000f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	4817      	ldr	r0, [pc, #92]	; (8000fac <init_MPU+0x250>)
 8000f4e:	f001 f96b 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <init_MPU+0x1de>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8000f58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000f5c:	b299      	uxth	r1, r3
 8000f5e:	23c8      	movs	r3, #200	; 0xc8
 8000f60:	2203      	movs	r2, #3
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <init_MPU+0x250>)
 8000f64:	f001 fcb8 	bl	80028d8 <HAL_I2C_IsDeviceReady>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d026      	beq.n	8000fbc <init_MPU+0x260>
	    	strcpy( rx_data, "No Device \r \n");
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <init_MPU+0x25c>)
 8000f72:	461c      	mov	r4, r3
 8000f74:	4613      	mov	r3, r2
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	c407      	stmia	r4!, {r0, r1, r2}
 8000f7a:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f82:	480c      	ldr	r0, [pc, #48]	; (8000fb4 <init_MPU+0x258>)
 8000f84:	f000 ffe7 	bl	8001f56 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <init_MPU+0x258>)
 8000f90:	f000 ffe1 	bl	8001f56 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8000f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f98:	f000 fd66 	bl	8001a68 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <init_MPU+0x258>)
 8000fa4:	f000 ffd7 	bl	8001f56 <HAL_GPIO_WritePin>
 8000fa8:	e0e1      	b.n	800116e <init_MPU+0x412>
 8000faa:	bf00      	nop
 8000fac:	20000058 	.word	0x20000058
 8000fb0:	40011000 	.word	0x40011000
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	08003c84 	.word	0x08003c84
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 8000fbc:	230a      	movs	r3, #10
 8000fbe:	f887 3020 	strb.w	r3, [r7, #32]
	    	  	d[1] = ROM_MODE;
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8000fc8:	bf00      	nop
 8000fca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000fce:	b299      	uxth	r1, r3
 8000fd0:	f107 0220 	add.w	r2, r7, #32
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	2302      	movs	r3, #2
 8000fda:	4868      	ldr	r0, [pc, #416]	; (800117c <init_MPU+0x420>)
 8000fdc:	f001 f924 	bl	8002228 <HAL_I2C_Master_Transmit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f1      	bne.n	8000fca <init_MPU+0x26e>

	    	  	HAL_Delay(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f000 fd3e 	bl	8001a68 <HAL_Delay>


	    	  	uint8_t sensitive = ASAX_AD;
 8000fec:	2310      	movs	r3, #16
 8000fee:	70fb      	strb	r3, [r7, #3]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8000ff0:	bf00      	nop
 8000ff2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ff6:	b299      	uxth	r1, r3
 8000ff8:	1cfa      	adds	r2, r7, #3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	485e      	ldr	r0, [pc, #376]	; (800117c <init_MPU+0x420>)
 8001004:	f001 f910 	bl	8002228 <HAL_I2C_Master_Transmit>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f1      	bne.n	8000ff2 <init_MPU+0x296>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 800100e:	bf00      	nop
 8001010:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001014:	b299      	uxth	r1, r3
 8001016:	463a      	mov	r2, r7
 8001018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2303      	movs	r3, #3
 8001020:	4856      	ldr	r0, [pc, #344]	; (800117c <init_MPU+0x420>)
 8001022:	f001 f9ff 	bl	8002424 <HAL_I2C_Master_Receive>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f1      	bne.n	8001010 <init_MPU+0x2b4>

	    	      asax = (asa[0]-128)*0.5/128+1;
 800102c:	783b      	ldrb	r3, [r7, #0]
 800102e:	3b80      	subs	r3, #128	; 0x80
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f9df 	bl	80003f4 <__aeabi_i2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b51      	ldr	r3, [pc, #324]	; (8001180 <init_MPU+0x424>)
 800103c:	f7ff fa44 	bl	80004c8 <__aeabi_dmul>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <init_MPU+0x428>)
 800104e:	f7ff fb65 	bl	800071c <__aeabi_ddiv>
 8001052:	4603      	mov	r3, r0
 8001054:	460c      	mov	r4, r1
 8001056:	4618      	mov	r0, r3
 8001058:	4621      	mov	r1, r4
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <init_MPU+0x42c>)
 8001060:	f7ff f87c 	bl	800015c <__adddf3>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fc3e 	bl	80008ec <__aeabi_d2f>
 8001070:	4602      	mov	r2, r0
 8001072:	4b46      	ldr	r3, [pc, #280]	; (800118c <init_MPU+0x430>)
 8001074:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 8001076:	787b      	ldrb	r3, [r7, #1]
 8001078:	3b80      	subs	r3, #128	; 0x80
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff f9ba 	bl	80003f4 <__aeabi_i2d>
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	4b3e      	ldr	r3, [pc, #248]	; (8001180 <init_MPU+0x424>)
 8001086:	f7ff fa1f 	bl	80004c8 <__aeabi_dmul>
 800108a:	4603      	mov	r3, r0
 800108c:	460c      	mov	r4, r1
 800108e:	4618      	mov	r0, r3
 8001090:	4621      	mov	r1, r4
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	4b3b      	ldr	r3, [pc, #236]	; (8001184 <init_MPU+0x428>)
 8001098:	f7ff fb40 	bl	800071c <__aeabi_ddiv>
 800109c:	4603      	mov	r3, r0
 800109e:	460c      	mov	r4, r1
 80010a0:	4618      	mov	r0, r3
 80010a2:	4621      	mov	r1, r4
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <init_MPU+0x42c>)
 80010aa:	f7ff f857 	bl	800015c <__adddf3>
 80010ae:	4603      	mov	r3, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	4618      	mov	r0, r3
 80010b4:	4621      	mov	r1, r4
 80010b6:	f7ff fc19 	bl	80008ec <__aeabi_d2f>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b34      	ldr	r3, [pc, #208]	; (8001190 <init_MPU+0x434>)
 80010be:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	3b80      	subs	r3, #128	; 0x80
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f995 	bl	80003f4 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <init_MPU+0x424>)
 80010d0:	f7ff f9fa 	bl	80004c8 <__aeabi_dmul>
 80010d4:	4603      	mov	r3, r0
 80010d6:	460c      	mov	r4, r1
 80010d8:	4618      	mov	r0, r3
 80010da:	4621      	mov	r1, r4
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <init_MPU+0x428>)
 80010e2:	f7ff fb1b 	bl	800071c <__aeabi_ddiv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	460c      	mov	r4, r1
 80010ea:	4618      	mov	r0, r3
 80010ec:	4621      	mov	r1, r4
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <init_MPU+0x42c>)
 80010f4:	f7ff f832 	bl	800015c <__adddf3>
 80010f8:	4603      	mov	r3, r0
 80010fa:	460c      	mov	r4, r1
 80010fc:	4618      	mov	r0, r3
 80010fe:	4621      	mov	r1, r4
 8001100:	f7ff fbf4 	bl	80008ec <__aeabi_d2f>
 8001104:	4602      	mov	r2, r0
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <init_MPU+0x438>)
 8001108:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 800110a:	230a      	movs	r3, #10
 800110c:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = zero;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001116:	bf00      	nop
 8001118:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800111c:	b299      	uxth	r1, r3
 800111e:	f107 0220 	add.w	r2, r7, #32
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	4814      	ldr	r0, [pc, #80]	; (800117c <init_MPU+0x420>)
 800112c:	f001 f87c 	bl	8002228 <HAL_I2C_Master_Transmit>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <init_MPU+0x3bc>

	    	      HAL_Delay(100);
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f000 fc96 	bl	8001a68 <HAL_Delay>

	    	      d[0] = CNTL1_AD;
 800113c:	230a      	movs	r3, #10
 800113e:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = 0x16;
 8001142:	2316      	movs	r3, #22
 8001144:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001148:	bf00      	nop
 800114a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800114e:	b299      	uxth	r1, r3
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2302      	movs	r3, #2
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <init_MPU+0x420>)
 800115e:	f001 f863 	bl	8002228 <HAL_I2C_Master_Transmit>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f0      	bne.n	800114a <init_MPU+0x3ee>
	    	      HAL_Delay(100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f000 fc7d 	bl	8001a68 <HAL_Delay>
	      }


  return status;
 800116e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001172:	4618      	mov	r0, r3
 8001174:	372c      	adds	r7, #44	; 0x2c
 8001176:	46bd      	mov	sp, r7
 8001178:	bd90      	pop	{r4, r7, pc}
 800117a:	bf00      	nop
 800117c:	20000058 	.word	0x20000058
 8001180:	3fe00000 	.word	0x3fe00000
 8001184:	40600000 	.word	0x40600000
 8001188:	3ff00000 	.word	0x3ff00000
 800118c:	2000039c 	.word	0x2000039c
 8001190:	20000188 	.word	0x20000188
 8001194:	20000394 	.word	0x20000394

08001198 <process_MPU>:
	  Acc_z_  = 0;

}


IMU_data process_MPU(uint8_t EKF, uint8_t LPF){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b090      	sub	sp, #64	; 0x40
 800119c:	af02      	add	r7, sp, #8
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
 80011a4:	4613      	mov	r3, r2
 80011a6:	70bb      	strb	r3, [r7, #2]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 80011a8:	233b      	movs	r3, #59	; 0x3b
 80011aa:	72fb      	strb	r3, [r7, #11]
	uint8_t device_address = MPU_ADDRESS;
 80011ac:	23d0      	movs	r3, #208	; 0xd0
 80011ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK){
 80011b2:	bf00      	nop
 80011b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011b8:	b299      	uxth	r1, r3
 80011ba:	f107 020b 	add.w	r2, r7, #11
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2301      	movs	r3, #1
 80011c6:	4894      	ldr	r0, [pc, #592]	; (8001418 <process_MPU+0x280>)
 80011c8:	f001 f82e 	bl	8002228 <HAL_I2C_Master_Transmit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <process_MPU+0x1c>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
//			I2C_ClearBusyFlagErratum(&i2c, 10);
//	    }
//	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK){
 80011d2:	bf00      	nop
 80011d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011d8:	b299      	uxth	r1, r3
 80011da:	f107 020c 	add.w	r2, r7, #12
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	230e      	movs	r3, #14
 80011e6:	488c      	ldr	r0, [pc, #560]	; (8001418 <process_MPU+0x280>)
 80011e8:	f001 f91c 	bl	8002424 <HAL_I2C_Master_Receive>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <process_MPU+0x3c>
//					I2C_ClearBusyFlagErratum(&i2c, 10);
//			    }
//			    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	7b7b      	ldrb	r3, [r7, #13]
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fc7d 	bl	8000b00 <__aeabi_i2f>
 8001206:	4602      	mov	r2, r0
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <process_MPU+0x284>)
 800120a:	601a      	str	r2, [r3, #0]
	Acc_y= (int16_t)(data[2] << 8 | data[3]);
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	b21a      	sxth	r2, r3
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fc70 	bl	8000b00 <__aeabi_i2f>
 8001220:	4602      	mov	r2, r0
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <process_MPU+0x288>)
 8001224:	601a      	str	r2, [r3, #0]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8001226:	7c3b      	ldrb	r3, [r7, #16]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	7c7b      	ldrb	r3, [r7, #17]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21b      	sxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fc63 	bl	8000b00 <__aeabi_i2f>
 800123a:	4602      	mov	r2, r0
 800123c:	4b79      	ldr	r3, [pc, #484]	; (8001424 <process_MPU+0x28c>)
 800123e:	601a      	str	r2, [r3, #0]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001240:	7cbb      	ldrb	r3, [r7, #18]
 8001242:	021b      	lsls	r3, r3, #8
 8001244:	b21a      	sxth	r2, r3
 8001246:	7cfb      	ldrb	r3, [r7, #19]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fc56 	bl	8000b00 <__aeabi_i2f>
 8001254:	4602      	mov	r2, r0
 8001256:	4b74      	ldr	r3, [pc, #464]	; (8001428 <process_MPU+0x290>)
 8001258:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 800125a:	7d3b      	ldrb	r3, [r7, #20]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7d7b      	ldrb	r3, [r7, #21]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fc49 	bl	8000b00 <__aeabi_i2f>
 800126e:	4602      	mov	r2, r0
 8001270:	4b6e      	ldr	r3, [pc, #440]	; (800142c <process_MPU+0x294>)
 8001272:	601a      	str	r2, [r3, #0]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fc3c 	bl	8000b00 <__aeabi_i2f>
 8001288:	4602      	mov	r2, r0
 800128a:	4b69      	ldr	r3, [pc, #420]	; (8001430 <process_MPU+0x298>)
 800128c:	601a      	str	r2, [r3, #0]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 800128e:	7e3b      	ldrb	r3, [r7, #24]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	7e7b      	ldrb	r3, [r7, #25]
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fc2f 	bl	8000b00 <__aeabi_i2f>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4b63      	ldr	r3, [pc, #396]	; (8001434 <process_MPU+0x29c>)
 80012a6:	601a      	str	r2, [r3, #0]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 80012a8:	4b5c      	ldr	r3, [pc, #368]	; (800141c <process_MPU+0x284>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f8b3 	bl	8000418 <__aeabi_f2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b60      	ldr	r3, [pc, #384]	; (8001438 <process_MPU+0x2a0>)
 80012b8:	f7ff fa30 	bl	800071c <__aeabi_ddiv>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	4b5d      	ldr	r3, [pc, #372]	; (800143c <process_MPU+0x2a4>)
 80012c6:	cb18      	ldmia	r3, {r3, r4}
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	f7fe ff44 	bl	8000158 <__aeabi_dsub>
 80012d0:	4603      	mov	r3, r0
 80012d2:	460c      	mov	r4, r1
 80012d4:	4618      	mov	r0, r3
 80012d6:	4621      	mov	r1, r4
 80012d8:	f7ff fb08 	bl	80008ec <__aeabi_d2f>
 80012dc:	4602      	mov	r2, r0
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <process_MPU+0x284>)
 80012e0:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 80012e2:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <process_MPU+0x288>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f896 	bl	8000418 <__aeabi_f2d>
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b51      	ldr	r3, [pc, #324]	; (8001438 <process_MPU+0x2a0>)
 80012f2:	f7ff fa13 	bl	800071c <__aeabi_ddiv>
 80012f6:	4603      	mov	r3, r0
 80012f8:	460c      	mov	r4, r1
 80012fa:	4618      	mov	r0, r3
 80012fc:	4621      	mov	r1, r4
 80012fe:	4b50      	ldr	r3, [pc, #320]	; (8001440 <process_MPU+0x2a8>)
 8001300:	cb18      	ldmia	r3, {r3, r4}
 8001302:	461a      	mov	r2, r3
 8001304:	4623      	mov	r3, r4
 8001306:	f7fe ff27 	bl	8000158 <__aeabi_dsub>
 800130a:	4603      	mov	r3, r0
 800130c:	460c      	mov	r4, r1
 800130e:	4618      	mov	r0, r3
 8001310:	4621      	mov	r1, r4
 8001312:	f7ff faeb 	bl	80008ec <__aeabi_d2f>
 8001316:	4602      	mov	r2, r0
 8001318:	4b41      	ldr	r3, [pc, #260]	; (8001420 <process_MPU+0x288>)
 800131a:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 800131c:	4b41      	ldr	r3, [pc, #260]	; (8001424 <process_MPU+0x28c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f879 	bl	8000418 <__aeabi_f2d>
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <process_MPU+0x2a0>)
 800132c:	f7ff f9f6 	bl	800071c <__aeabi_ddiv>
 8001330:	4603      	mov	r3, r0
 8001332:	460c      	mov	r4, r1
 8001334:	4618      	mov	r0, r3
 8001336:	4621      	mov	r1, r4
 8001338:	4b42      	ldr	r3, [pc, #264]	; (8001444 <process_MPU+0x2ac>)
 800133a:	cb18      	ldmia	r3, {r3, r4}
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	f7fe ff0c 	bl	800015c <__adddf3>
 8001344:	4603      	mov	r3, r0
 8001346:	460c      	mov	r4, r1
 8001348:	4618      	mov	r0, r3
 800134a:	4621      	mov	r1, r4
 800134c:	f7ff face 	bl	80008ec <__aeabi_d2f>
 8001350:	4602      	mov	r2, r0
 8001352:	4b34      	ldr	r3, [pc, #208]	; (8001424 <process_MPU+0x28c>)
 8001354:	601a      	str	r2, [r3, #0]
    if(!EKF){
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d17b      	bne.n	8001454 <process_MPU+0x2bc>
	Gyro_x = (Gyro_x )/16.4- bGx;
 800135c:	4b33      	ldr	r3, [pc, #204]	; (800142c <process_MPU+0x294>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f859 	bl	8000418 <__aeabi_f2d>
 8001366:	a32a      	add	r3, pc, #168	; (adr r3, 8001410 <process_MPU+0x278>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff f9d6 	bl	800071c <__aeabi_ddiv>
 8001370:	4603      	mov	r3, r0
 8001372:	460c      	mov	r4, r1
 8001374:	4618      	mov	r0, r3
 8001376:	4621      	mov	r1, r4
 8001378:	4b33      	ldr	r3, [pc, #204]	; (8001448 <process_MPU+0x2b0>)
 800137a:	cb18      	ldmia	r3, {r3, r4}
 800137c:	461a      	mov	r2, r3
 800137e:	4623      	mov	r3, r4
 8001380:	f7fe feea 	bl	8000158 <__aeabi_dsub>
 8001384:	4603      	mov	r3, r0
 8001386:	460c      	mov	r4, r1
 8001388:	4618      	mov	r0, r3
 800138a:	4621      	mov	r1, r4
 800138c:	f7ff faae 	bl	80008ec <__aeabi_d2f>
 8001390:	4602      	mov	r2, r0
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <process_MPU+0x294>)
 8001394:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y )/16.4- bGy;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <process_MPU+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f83c 	bl	8000418 <__aeabi_f2d>
 80013a0:	a31b      	add	r3, pc, #108	; (adr r3, 8001410 <process_MPU+0x278>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f9b9 	bl	800071c <__aeabi_ddiv>
 80013aa:	4603      	mov	r3, r0
 80013ac:	460c      	mov	r4, r1
 80013ae:	4618      	mov	r0, r3
 80013b0:	4621      	mov	r1, r4
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <process_MPU+0x2b4>)
 80013b4:	cb18      	ldmia	r3, {r3, r4}
 80013b6:	461a      	mov	r2, r3
 80013b8:	4623      	mov	r3, r4
 80013ba:	f7fe fecd 	bl	8000158 <__aeabi_dsub>
 80013be:	4603      	mov	r3, r0
 80013c0:	460c      	mov	r4, r1
 80013c2:	4618      	mov	r0, r3
 80013c4:	4621      	mov	r1, r4
 80013c6:	f7ff fa91 	bl	80008ec <__aeabi_d2f>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <process_MPU+0x298>)
 80013ce:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <process_MPU+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f81f 	bl	8000418 <__aeabi_f2d>
 80013da:	a30d      	add	r3, pc, #52	; (adr r3, 8001410 <process_MPU+0x278>)
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f7ff f99c 	bl	800071c <__aeabi_ddiv>
 80013e4:	4603      	mov	r3, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	4618      	mov	r0, r3
 80013ea:	4621      	mov	r1, r4
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <process_MPU+0x2b8>)
 80013ee:	cb18      	ldmia	r3, {r3, r4}
 80013f0:	461a      	mov	r2, r3
 80013f2:	4623      	mov	r3, r4
 80013f4:	f7fe feb0 	bl	8000158 <__aeabi_dsub>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	4618      	mov	r0, r3
 80013fe:	4621      	mov	r1, r4
 8001400:	f7ff fa74 	bl	80008ec <__aeabi_d2f>
 8001404:	4602      	mov	r2, r0
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <process_MPU+0x29c>)
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e05c      	b.n	80014c6 <process_MPU+0x32e>
 800140c:	f3af 8000 	nop.w
 8001410:	66666666 	.word	0x66666666
 8001414:	40306666 	.word	0x40306666
 8001418:	20000058 	.word	0x20000058
 800141c:	20000160 	.word	0x20000160
 8001420:	200000dc 	.word	0x200000dc
 8001424:	20000034 	.word	0x20000034
 8001428:	20000100 	.word	0x20000100
 800142c:	20000048 	.word	0x20000048
 8001430:	20000370 	.word	0x20000370
 8001434:	20000110 	.word	0x20000110
 8001438:	40d00000 	.word	0x40d00000
 800143c:	20000358 	.word	0x20000358
 8001440:	20000168 	.word	0x20000168
 8001444:	20000380 	.word	0x20000380
 8001448:	20000198 	.word	0x20000198
 800144c:	200000b0 	.word	0x200000b0
 8001450:	20000388 	.word	0x20000388
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <process_MPU+0x380>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7fe ffdd 	bl	8000418 <__aeabi_f2d>
 800145e:	a32c      	add	r3, pc, #176	; (adr r3, 8001510 <process_MPU+0x378>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f95a 	bl	800071c <__aeabi_ddiv>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	4618      	mov	r0, r3
 800146e:	4621      	mov	r1, r4
 8001470:	f7ff fa3c 	bl	80008ec <__aeabi_d2f>
 8001474:	4602      	mov	r2, r0
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <process_MPU+0x380>)
 8001478:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <process_MPU+0x384>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ffca 	bl	8000418 <__aeabi_f2d>
 8001484:	a322      	add	r3, pc, #136	; (adr r3, 8001510 <process_MPU+0x378>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f947 	bl	800071c <__aeabi_ddiv>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	f7ff fa29 	bl	80008ec <__aeabi_d2f>
 800149a:	4602      	mov	r2, r0
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <process_MPU+0x384>)
 800149e:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <process_MPU+0x388>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe ffb7 	bl	8000418 <__aeabi_f2d>
 80014aa:	a319      	add	r3, pc, #100	; (adr r3, 8001510 <process_MPU+0x378>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f934 	bl	800071c <__aeabi_ddiv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	4618      	mov	r0, r3
 80014ba:	4621      	mov	r1, r4
 80014bc:	f7ff fa16 	bl	80008ec <__aeabi_d2f>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <process_MPU+0x388>)
 80014c4:	601a      	str	r2, [r3, #0]
    }

    if(!LPF){
 80014c6:	78bb      	ldrb	r3, [r7, #2]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <process_MPU+0x358>
		data_raw.Gyro_x = Gyro_x;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <process_MPU+0x380>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61fb      	str	r3, [r7, #28]
		data_raw.Gyro_y = Gyro_y;
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <process_MPU+0x384>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	623b      	str	r3, [r7, #32]
		data_raw.Gyro_z = Gyro_z;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <process_MPU+0x388>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
		data_raw.Acc_x = Acc_x;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <process_MPU+0x38c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
		data_raw.Acc_y = Acc_y;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <process_MPU+0x390>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		data_raw.Acc_z = Acc_z;
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <process_MPU+0x394>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
    }

    return data_raw;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	461d      	mov	r5, r3
 80014f4:	f107 041c 	add.w	r4, r7, #28
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001500:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	3738      	adds	r7, #56	; 0x38
 8001508:	46bd      	mov	sp, r7
 800150a:	bdb0      	pop	{r4, r5, r7, pc}
 800150c:	f3af 8000 	nop.w
 8001510:	66666666 	.word	0x66666666
 8001514:	40306666 	.word	0x40306666
 8001518:	20000048 	.word	0x20000048
 800151c:	20000370 	.word	0x20000370
 8001520:	20000110 	.word	0x20000110
 8001524:	20000160 	.word	0x20000160
 8001528:	200000dc 	.word	0x200000dc
 800152c:	20000034 	.word	0x20000034

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f000 fa35 	bl	80019a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 f80f 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f000 f8ab 	bl	8001698 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001542:	f000 f87f 	bl	8001644 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001546:	f000 f84f 	bl	80015e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 800154a:	f7ff fc07 	bl	8000d5c <init_MPU>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  temp = process_MPU(0,0);
 800154e:	463b      	mov	r3, r7
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fe1f 	bl	8001198 <process_MPU>
 800155a:	e7f8      	b.n	800154e <main+0x1e>

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b090      	sub	sp, #64	; 0x40
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	2228      	movs	r2, #40	; 0x28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fb76 	bl	8003c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157e:	2301      	movs	r3, #1
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001590:	2302      	movs	r3, #2
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800159a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0318 	add.w	r3, r7, #24
 80015a4:	4618      	mov	r0, r3
 80015a6:	f001 fdf1 	bl	800318c <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015b0:	f000 f8a0 	bl	80016f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b8:	2302      	movs	r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	2102      	movs	r1, #2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f85c 	bl	800368c <HAL_RCC_ClockConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015da:	f000 f88b 	bl	80016f4 <Error_Handler>
  }
}
 80015de:	bf00      	nop
 80015e0:	3740      	adds	r7, #64	; 0x40
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <MX_I2C1_Init+0x50>)
 80015ee:	4a13      	ldr	r2, [pc, #76]	; (800163c <MX_I2C1_Init+0x54>)
 80015f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_I2C1_Init+0x50>)
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <MX_I2C1_Init+0x58>)
 80015f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_I2C1_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_I2C1_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_I2C1_Init+0x50>)
 8001606:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <MX_I2C1_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_I2C1_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_I2C1_Init+0x50>)
 8001626:	f000 fcc7 	bl	8001fb8 <HAL_I2C_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001630:	f000 f860 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000058 	.word	0x20000058
 800163c:	40005400 	.word	0x40005400
 8001640:	00061a80 	.word	0x00061a80

08001644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_USART1_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164e:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART1_UART_Init+0x4c>)
 800167c:	f002 f9a2 	bl	80039c4 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f835 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000120 	.word	0x20000120
 8001694:	40013800 	.word	0x40013800

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a13      	ldr	r2, [pc, #76]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016a4:	f043 0320 	orr.w	r3, r3, #32
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0320 	and.w	r3, r3, #32
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	4a07      	ldr	r2, [pc, #28]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6193      	str	r3, [r2, #24]
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <MX_GPIO_Init+0x58>)
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40021000 	.word	0x40021000

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_MspInit+0x5c>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_MspInit+0x5c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_MspInit+0x5c>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_MspInit+0x5c>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a0e      	ldr	r2, [pc, #56]	; (800175c <HAL_MspInit+0x5c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_MspInit+0x5c>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_MspInit+0x60>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_MspInit+0x60>)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000

08001764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_I2C_MspInit+0x90>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d132      	bne.n	80017ea <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_I2C_MspInit+0x94>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_I2C_MspInit+0x94>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_I2C_MspInit+0x94>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800179c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a2:	2312      	movs	r3, #18
 80017a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80017a6:	2301      	movs	r3, #1
 80017a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4812      	ldr	r0, [pc, #72]	; (80017fc <HAL_I2C_MspInit+0x98>)
 80017b2:	f000 fa5f 	bl	8001c74 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_I2C_MspInit+0x9c>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_I2C_MspInit+0x9c>)
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_I2C_MspInit+0x94>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a08      	ldr	r2, [pc, #32]	; (80017f8 <HAL_I2C_MspInit+0x94>)
 80017d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <HAL_I2C_MspInit+0x94>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40005400 	.word	0x40005400
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40010000 	.word	0x40010000

08001804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0310 	add.w	r3, r7, #16
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <HAL_UART_MspInit+0x8c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d131      	bne.n	8001888 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a1a      	ldr	r2, [pc, #104]	; (8001894 <HAL_UART_MspInit+0x90>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_UART_MspInit+0x90>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a14      	ldr	r2, [pc, #80]	; (8001894 <HAL_UART_MspInit+0x90>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_UART_MspInit+0x90>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4619      	mov	r1, r3
 8001868:	480b      	ldr	r0, [pc, #44]	; (8001898 <HAL_UART_MspInit+0x94>)
 800186a:	f000 fa03 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800186e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4619      	mov	r1, r3
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <HAL_UART_MspInit+0x94>)
 8001884:	f000 f9f6 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3720      	adds	r7, #32
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40013800 	.word	0x40013800
 8001894:	40021000 	.word	0x40021000
 8001898:	40010800 	.word	0x40010800

0800189c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <HardFault_Handler+0x4>

080018ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <MemManage_Handler+0x4>

080018b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <BusFault_Handler+0x4>

080018ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <UsageFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f8a2 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <SystemInit+0x5c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <SystemInit+0x5c>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <SystemInit+0x5c>)
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4911      	ldr	r1, [pc, #68]	; (800194c <SystemInit+0x5c>)
 8001906:	4b12      	ldr	r3, [pc, #72]	; (8001950 <SystemInit+0x60>)
 8001908:	4013      	ands	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <SystemInit+0x5c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0e      	ldr	r2, [pc, #56]	; (800194c <SystemInit+0x5c>)
 8001912:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <SystemInit+0x5c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0a      	ldr	r2, [pc, #40]	; (800194c <SystemInit+0x5c>)
 8001922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001926:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <SystemInit+0x5c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a07      	ldr	r2, [pc, #28]	; (800194c <SystemInit+0x5c>)
 800192e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001932:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <SystemInit+0x5c>)
 8001936:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800193a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SystemInit+0x64>)
 800193e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001942:	609a      	str	r2, [r3, #8]
#endif 
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	f8ff0000 	.word	0xf8ff0000
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001958:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800195a:	e003      	b.n	8001964 <LoopCopyDataInit>

0800195c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800195e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001960:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001962:	3104      	adds	r1, #4

08001964 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001964:	480a      	ldr	r0, [pc, #40]	; (8001990 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001968:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800196a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800196c:	d3f6      	bcc.n	800195c <CopyDataInit>
  ldr r2, =_sbss
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001970:	e002      	b.n	8001978 <LoopFillZerobss>

08001972 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001974:	f842 3b04 	str.w	r3, [r2], #4

08001978 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800197a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800197c:	d3f9      	bcc.n	8001972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800197e:	f7ff ffb7 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f002 f947 	bl	8003c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fdd3 	bl	8001530 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r3, =_sidata
 800198c:	08003cc8 	.word	0x08003cc8
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001994:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001998:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800199c:	200003ac 	.word	0x200003ac

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <HAL_Init+0x28>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <HAL_Init+0x28>)
 80019ae:	f043 0310 	orr.w	r3, r3, #16
 80019b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 f929 	bl	8001c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fe9e 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40022000 	.word	0x40022000

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f933 	bl	8001c5a <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 f909 	bl	8001c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	20000004 	.word	0x20000004

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x20>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_IncTick+0x20>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	200003a8 	.word	0x200003a8

08001a54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <HAL_GetTick+0x10>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	200003a8 	.word	0x200003a8

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_Delay+0x40>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffe0 	bl	8001a54 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000008 	.word	0x20000008

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	; (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd8:	d301      	bcc.n	8001bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00f      	b.n	8001bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <SysTick_Config+0x40>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be6:	210f      	movs	r1, #15
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f7ff ff90 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <SysTick_Config+0x40>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf6:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <SysTick_Config+0x40>)
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	e000e010 	.word	0xe000e010

08001c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff49 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff5e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff90 	bl	8001b64 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5f 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffb0 	bl	8001bc8 <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b08b      	sub	sp, #44	; 0x2c
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	e127      	b.n	8001ed8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c88:	2201      	movs	r2, #1
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8116 	bne.w	8001ed2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d034      	beq.n	8001d18 <HAL_GPIO_Init+0xa4>
 8001cae:	2b12      	cmp	r3, #18
 8001cb0:	d80d      	bhi.n	8001cce <HAL_GPIO_Init+0x5a>
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d02b      	beq.n	8001d0e <HAL_GPIO_Init+0x9a>
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d804      	bhi.n	8001cc4 <HAL_GPIO_Init+0x50>
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d031      	beq.n	8001d22 <HAL_GPIO_Init+0xae>
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d01c      	beq.n	8001cfc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cc2:	e048      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d043      	beq.n	8001d50 <HAL_GPIO_Init+0xdc>
 8001cc8:	2b11      	cmp	r3, #17
 8001cca:	d01b      	beq.n	8001d04 <HAL_GPIO_Init+0x90>
          break;
 8001ccc:	e043      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001cce:	4a89      	ldr	r2, [pc, #548]	; (8001ef4 <HAL_GPIO_Init+0x280>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d026      	beq.n	8001d22 <HAL_GPIO_Init+0xae>
 8001cd4:	4a87      	ldr	r2, [pc, #540]	; (8001ef4 <HAL_GPIO_Init+0x280>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d806      	bhi.n	8001ce8 <HAL_GPIO_Init+0x74>
 8001cda:	4a87      	ldr	r2, [pc, #540]	; (8001ef8 <HAL_GPIO_Init+0x284>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d020      	beq.n	8001d22 <HAL_GPIO_Init+0xae>
 8001ce0:	4a86      	ldr	r2, [pc, #536]	; (8001efc <HAL_GPIO_Init+0x288>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01d      	beq.n	8001d22 <HAL_GPIO_Init+0xae>
          break;
 8001ce6:	e036      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ce8:	4a85      	ldr	r2, [pc, #532]	; (8001f00 <HAL_GPIO_Init+0x28c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d019      	beq.n	8001d22 <HAL_GPIO_Init+0xae>
 8001cee:	4a85      	ldr	r2, [pc, #532]	; (8001f04 <HAL_GPIO_Init+0x290>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d016      	beq.n	8001d22 <HAL_GPIO_Init+0xae>
 8001cf4:	4a84      	ldr	r2, [pc, #528]	; (8001f08 <HAL_GPIO_Init+0x294>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_GPIO_Init+0xae>
          break;
 8001cfa:	e02c      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	623b      	str	r3, [r7, #32]
          break;
 8001d02:	e028      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e023      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	3308      	adds	r3, #8
 8001d14:	623b      	str	r3, [r7, #32]
          break;
 8001d16:	e01e      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	330c      	adds	r3, #12
 8001d1e:	623b      	str	r3, [r7, #32]
          break;
 8001d20:	e019      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d102      	bne.n	8001d30 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e012      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d105      	bne.n	8001d44 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	611a      	str	r2, [r3, #16]
          break;
 8001d42:	e008      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d44:	2308      	movs	r3, #8
 8001d46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69fa      	ldr	r2, [r7, #28]
 8001d4c:	615a      	str	r2, [r3, #20]
          break;
 8001d4e:	e002      	b.n	8001d56 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2bff      	cmp	r3, #255	; 0xff
 8001d5a:	d801      	bhi.n	8001d60 <HAL_GPIO_Init+0xec>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	e001      	b.n	8001d64 <HAL_GPIO_Init+0xf0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	2bff      	cmp	r3, #255	; 0xff
 8001d6a:	d802      	bhi.n	8001d72 <HAL_GPIO_Init+0xfe>
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x104>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	3b08      	subs	r3, #8
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	210f      	movs	r1, #15
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	401a      	ands	r2, r3
 8001d8a:	6a39      	ldr	r1, [r7, #32]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d92:	431a      	orrs	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8096 	beq.w	8001ed2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001da6:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_GPIO_Init+0x298>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_GPIO_Init+0x298>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6193      	str	r3, [r2, #24]
 8001db2:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x298>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dbe:	4a54      	ldr	r2, [pc, #336]	; (8001f10 <HAL_GPIO_Init+0x29c>)
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_GPIO_Init+0x2a0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x19e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_GPIO_Init+0x2a4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x19a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_GPIO_Init+0x2a8>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x196>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2ac>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x192>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x1a0>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e004      	b.n	8001e14 <HAL_GPIO_Init+0x1a0>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_Init+0x1a0>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x1a0>
 8001e12:	2300      	movs	r3, #0
 8001e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e24:	493a      	ldr	r1, [pc, #232]	; (8001f10 <HAL_GPIO_Init+0x29c>)
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4938      	ldr	r1, [pc, #224]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]
 8001e4a:	e006      	b.n	8001e5a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4933      	ldr	r1, [pc, #204]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	492e      	ldr	r1, [pc, #184]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	604b      	str	r3, [r1, #4]
 8001e72:	e006      	b.n	8001e82 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	4929      	ldr	r1, [pc, #164]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	4924      	ldr	r1, [pc, #144]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
 8001e9a:	e006      	b.n	8001eaa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	491f      	ldr	r1, [pc, #124]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	491a      	ldr	r1, [pc, #104]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60cb      	str	r3, [r1, #12]
 8001ec2:	e006      	b.n	8001ed2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	4915      	ldr	r1, [pc, #84]	; (8001f24 <HAL_GPIO_Init+0x2b0>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f47f aed0 	bne.w	8001c88 <HAL_GPIO_Init+0x14>
  }
}
 8001ee8:	bf00      	nop
 8001eea:	372c      	adds	r7, #44	; 0x2c
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	10210000 	.word	0x10210000
 8001ef8:	10110000 	.word	0x10110000
 8001efc:	10120000 	.word	0x10120000
 8001f00:	10310000 	.word	0x10310000
 8001f04:	10320000 	.word	0x10320000
 8001f08:	10220000 	.word	0x10220000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40011400 	.word	0x40011400
 8001f24:	40010400 	.word	0x40010400

08001f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e001      	b.n	8001f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	807b      	strh	r3, [r7, #2]
 8001f62:	4613      	mov	r3, r2
 8001f64:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f66:	787b      	ldrb	r3, [r7, #1]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6c:	887a      	ldrh	r2, [r7, #2]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f72:	e003      	b.n	8001f7c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	041a      	lsls	r2, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa6:	887a      	ldrh	r2, [r7, #2]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e11f      	b.n	800220a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d106      	bne.n	8001fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fbc0 	bl	8001764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2224      	movs	r2, #36	; 0x24
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800201a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800201c:	f001 fc8c 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a7b      	ldr	r2, [pc, #492]	; (8002214 <HAL_I2C_Init+0x25c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d807      	bhi.n	800203c <HAL_I2C_Init+0x84>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a7a      	ldr	r2, [pc, #488]	; (8002218 <HAL_I2C_Init+0x260>)
 8002030:	4293      	cmp	r3, r2
 8002032:	bf94      	ite	ls
 8002034:	2301      	movls	r3, #1
 8002036:	2300      	movhi	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e006      	b.n	800204a <HAL_I2C_Init+0x92>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a77      	ldr	r2, [pc, #476]	; (800221c <HAL_I2C_Init+0x264>)
 8002040:	4293      	cmp	r3, r2
 8002042:	bf94      	ite	ls
 8002044:	2301      	movls	r3, #1
 8002046:	2300      	movhi	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0db      	b.n	800220a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4a72      	ldr	r2, [pc, #456]	; (8002220 <HAL_I2C_Init+0x268>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9b      	lsrs	r3, r3, #18
 800205c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a64      	ldr	r2, [pc, #400]	; (8002214 <HAL_I2C_Init+0x25c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d802      	bhi.n	800208c <HAL_I2C_Init+0xd4>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	e009      	b.n	80020a0 <HAL_I2C_Init+0xe8>
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a63      	ldr	r2, [pc, #396]	; (8002224 <HAL_I2C_Init+0x26c>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4956      	ldr	r1, [pc, #344]	; (8002214 <HAL_I2C_Init+0x25c>)
 80020bc:	428b      	cmp	r3, r1
 80020be:	d80d      	bhi.n	80020dc <HAL_I2C_Init+0x124>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e59      	subs	r1, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	bf38      	it	cc
 80020d8:	2304      	movcc	r3, #4
 80020da:	e04f      	b.n	800217c <HAL_I2C_Init+0x1c4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <HAL_I2C_Init+0x150>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e012      	b.n	800212e <HAL_I2C_Init+0x176>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	1e58      	subs	r0, r3, #1
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6859      	ldr	r1, [r3, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	0099      	lsls	r1, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	fbb0 f3f3 	udiv	r3, r0, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <HAL_I2C_Init+0x17e>
 8002132:	2301      	movs	r3, #1
 8002134:	e022      	b.n	800217c <HAL_I2C_Init+0x1c4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10e      	bne.n	800215c <HAL_I2C_Init+0x1a4>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1e58      	subs	r0, r3, #1
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	460b      	mov	r3, r1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	440b      	add	r3, r1
 800214c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002150:	3301      	adds	r3, #1
 8002152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215a:	e00f      	b.n	800217c <HAL_I2C_Init+0x1c4>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1e58      	subs	r0, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6859      	ldr	r1, [r3, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	0099      	lsls	r1, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	6809      	ldr	r1, [r1, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6911      	ldr	r1, [r2, #16]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68d2      	ldr	r2, [r2, #12]
 80021b6:	4311      	orrs	r1, r2
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695a      	ldr	r2, [r3, #20]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	000186a0 	.word	0x000186a0
 8002218:	001e847f 	.word	0x001e847f
 800221c:	003d08ff 	.word	0x003d08ff
 8002220:	431bde83 	.word	0x431bde83
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
 8002238:	4613      	mov	r3, r2
 800223a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff fc0a 	bl	8001a54 <HAL_GetTick>
 8002240:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	f040 80e0 	bne.w	8002410 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2319      	movs	r3, #25
 8002256:	2201      	movs	r2, #1
 8002258:	4970      	ldr	r1, [pc, #448]	; (800241c <HAL_I2C_Master_Transmit+0x1f4>)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 fdba 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002266:	2302      	movs	r3, #2
 8002268:	e0d3      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x50>
 8002274:	2302      	movs	r3, #2
 8002276:	e0cc      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b01      	cmp	r3, #1
 800228c:	d007      	beq.n	800229e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2221      	movs	r2, #33	; 0x21
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2210      	movs	r2, #16
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	893a      	ldrh	r2, [r7, #8]
 80022ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_I2C_Master_Transmit+0x1f8>)
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022e0:	8979      	ldrh	r1, [r7, #10]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6a3a      	ldr	r2, [r7, #32]
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fc24 	bl	8002b34 <I2C_MasterRequestWrite>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e08d      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800230c:	e066      	b.n	80023dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fe34 	bl	8002f80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	2b04      	cmp	r3, #4
 8002324:	d107      	bne.n	8002336 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002334:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06b      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	781a      	ldrb	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b04      	cmp	r3, #4
 8002376:	d11b      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x188>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b00      	cmp	r3, #0
 800237e:	d017      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	6a39      	ldr	r1, [r7, #32]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 fe24 	bl	8003002 <I2C_WaitOnBTFFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00d      	beq.n	80023dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e01a      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d194      	bne.n	800230e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	00100002 	.word	0x00100002
 8002420:	ffff0000 	.word	0xffff0000

08002424 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	460b      	mov	r3, r1
 8002432:	817b      	strh	r3, [r7, #10]
 8002434:	4613      	mov	r3, r2
 8002436:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff fb0a 	bl	8001a54 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b20      	cmp	r3, #32
 800244c:	f040 8238 	bne.w	80028c0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2319      	movs	r3, #25
 8002456:	2201      	movs	r2, #1
 8002458:	497e      	ldr	r1, [pc, #504]	; (8002654 <HAL_I2C_Master_Receive+0x230>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fcba 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002466:	2302      	movs	r3, #2
 8002468:	e22b      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_I2C_Master_Receive+0x54>
 8002474:	2302      	movs	r3, #2
 8002476:	e224      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d007      	beq.n	800249e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2222      	movs	r2, #34	; 0x22
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2210      	movs	r2, #16
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	893a      	ldrh	r2, [r7, #8]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4a5e      	ldr	r2, [pc, #376]	; (8002658 <HAL_I2C_Master_Receive+0x234>)
 80024de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024e0:	8979      	ldrh	r1, [r7, #10]
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fba6 	bl	8002c38 <I2C_MasterRequestRead>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1e5      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d113      	bne.n	8002526 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e1b9      	b.n	800289a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	2b01      	cmp	r3, #1
 800252c:	d11d      	bne.n	800256a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800253e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002564:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002566:	b662      	cpsie	i
 8002568:	e197      	b.n	800289a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256e:	2b02      	cmp	r3, #2
 8002570:	d11d      	bne.n	80025ae <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002580:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002582:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80025aa:	b662      	cpsie	i
 80025ac:	e175      	b.n	800289a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80025d4:	e161      	b.n	800289a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025da:	2b03      	cmp	r3, #3
 80025dc:	f200 811a 	bhi.w	8002814 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d123      	bne.n	8002630 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fd49 	bl	8003084 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e162      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800262e:	e134      	b.n	800289a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	2b02      	cmp	r3, #2
 8002636:	d150      	bne.n	80026da <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	2200      	movs	r2, #0
 8002640:	4906      	ldr	r1, [pc, #24]	; (800265c <HAL_I2C_Master_Receive+0x238>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fbc6 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e137      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
 8002652:	bf00      	nop
 8002654:	00100002 	.word	0x00100002
 8002658:	ffff0000 	.word	0xffff0000
 800265c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002660:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002670:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80026a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026d8:	e0df      	b.n	800289a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	2200      	movs	r2, #0
 80026e2:	497a      	ldr	r1, [pc, #488]	; (80028cc <HAL_I2C_Master_Receive+0x4a8>)
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fb75 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0e6      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002702:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002738:	4b65      	ldr	r3, [pc, #404]	; (80028d0 <HAL_I2C_Master_Receive+0x4ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	4a65      	ldr	r2, [pc, #404]	; (80028d4 <HAL_I2C_Master_Receive+0x4b0>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	0a1a      	lsrs	r2, r3, #8
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	00da      	lsls	r2, r3, #3
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	3b01      	subs	r3, #1
 8002756:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d117      	bne.n	800278e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002780:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e099      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b04      	cmp	r3, #4
 800279a:	d1da      	bne.n	8002752 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027de:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002812:	e042      	b.n	800289a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fc33 	bl	8003084 <I2C_WaitOnRXNEFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04c      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d118      	bne.n	800289a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f47f ae99 	bne.w	80025d6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	00010004 	.word	0x00010004
 80028d0:	20000000 	.word	0x20000000
 80028d4:	14f8b589 	.word	0x14f8b589

080028d8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff f8b4 	bl	8001a54 <HAL_GetTick>
 80028ec:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f040 8111 	bne.w	8002b22 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	4988      	ldr	r1, [pc, #544]	; (8002b2c <HAL_I2C_IsDeviceReady+0x254>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa62 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	e104      	b.n	8002b24 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_IsDeviceReady+0x50>
 8002924:	2302      	movs	r3, #2
 8002926:	e0fd      	b.n	8002b24 <HAL_I2C_IsDeviceReady+0x24c>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2224      	movs	r2, #36	; 0x24
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4a70      	ldr	r2, [pc, #448]	; (8002b30 <HAL_I2C_IsDeviceReady+0x258>)
 8002970:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002980:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fa20 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a8:	d103      	bne.n	80029b2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0b6      	b.n	8002b24 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029b6:	897b      	ldrh	r3, [r7, #10]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029c4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029c6:	f7ff f845 	bl	8001a54 <HAL_GetTick>
 80029ca:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f0:	bf0c      	ite	eq
 80029f2:	2301      	moveq	r3, #1
 80029f4:	2300      	movne	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029fa:	e025      	b.n	8002a48 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029fc:	f7ff f82a 	bl	8001a54 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d302      	bcc.n	8002a12 <HAL_I2C_IsDeviceReady+0x13a>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	22a0      	movs	r2, #160	; 0xa0
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3e:	bf0c      	ite	eq
 8002a40:	2301      	moveq	r3, #1
 8002a42:	2300      	movne	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2ba0      	cmp	r3, #160	; 0xa0
 8002a52:	d005      	beq.n	8002a60 <HAL_I2C_IsDeviceReady+0x188>
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d102      	bne.n	8002a60 <HAL_I2C_IsDeviceReady+0x188>
 8002a5a:	7dbb      	ldrb	r3, [r7, #22]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0cd      	beq.n	80029fc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d129      	bne.n	8002aca <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a84:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2319      	movs	r3, #25
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4921      	ldr	r1, [pc, #132]	; (8002b2c <HAL_I2C_IsDeviceReady+0x254>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f994 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e036      	b.n	8002b24 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e02c      	b.n	8002b24 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ae2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2319      	movs	r3, #25
 8002aea:	2201      	movs	r2, #1
 8002aec:	490f      	ldr	r1, [pc, #60]	; (8002b2c <HAL_I2C_IsDeviceReady+0x254>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f970 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e012      	b.n	8002b24 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3301      	adds	r3, #1
 8002b02:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	f4ff af32 	bcc.w	8002972 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b22:	2302      	movs	r3, #2
  }
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	00100002 	.word	0x00100002
 8002b30:	ffff0000 	.word	0xffff0000

08002b34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	460b      	mov	r3, r1
 8002b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d006      	beq.n	8002b5e <I2C_MasterRequestWrite+0x2a>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d003      	beq.n	8002b5e <I2C_MasterRequestWrite+0x2a>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b5c:	d108      	bne.n	8002b70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e00b      	b.n	8002b88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	2b12      	cmp	r3, #18
 8002b76:	d107      	bne.n	8002b88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f91d 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	d103      	bne.n	8002bb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e035      	b.n	8002c28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc4:	d108      	bne.n	8002bd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	e01b      	b.n	8002c10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd8:	897b      	ldrh	r3, [r7, #10]
 8002bda:	11db      	asrs	r3, r3, #7
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0306 	and.w	r3, r3, #6
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f063 030f 	orn	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	490e      	ldr	r1, [pc, #56]	; (8002c30 <I2C_MasterRequestWrite+0xfc>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f943 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e010      	b.n	8002c28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4907      	ldr	r1, [pc, #28]	; (8002c34 <I2C_MasterRequestWrite+0x100>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f933 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	00010008 	.word	0x00010008
 8002c34:	00010002 	.word	0x00010002

08002c38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d006      	beq.n	8002c72 <I2C_MasterRequestRead+0x3a>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d003      	beq.n	8002c72 <I2C_MasterRequestRead+0x3a>
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c70:	d108      	bne.n	8002c84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e00b      	b.n	8002c9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	2b11      	cmp	r3, #17
 8002c8a:	d107      	bne.n	8002c9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f893 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	d103      	bne.n	8002ccc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e079      	b.n	8002dc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cd8:	d108      	bne.n	8002cec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	611a      	str	r2, [r3, #16]
 8002cea:	e05f      	b.n	8002dac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	11db      	asrs	r3, r3, #7
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0306 	and.w	r3, r3, #6
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f063 030f 	orn	r3, r3, #15
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4930      	ldr	r1, [pc, #192]	; (8002dcc <I2C_MasterRequestRead+0x194>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f8b9 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e054      	b.n	8002dc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d1a:	897b      	ldrh	r3, [r7, #10]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4929      	ldr	r1, [pc, #164]	; (8002dd0 <I2C_MasterRequestRead+0x198>)
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 f8a9 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e044      	b.n	8002dc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f831 	bl	8002dd4 <I2C_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d86:	d103      	bne.n	8002d90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e017      	b.n	8002dc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d94:	897b      	ldrh	r3, [r7, #10]
 8002d96:	11db      	asrs	r3, r3, #7
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 0306 	and.w	r3, r3, #6
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f063 030e 	orn	r3, r3, #14
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	4907      	ldr	r1, [pc, #28]	; (8002dd0 <I2C_MasterRequestRead+0x198>)
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f865 	bl	8002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	00010008 	.word	0x00010008
 8002dd0:	00010002 	.word	0x00010002

08002dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	e025      	b.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dec:	d021      	beq.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dee:	f7fe fe31 	bl	8001a54 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d302      	bcc.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d116      	bne.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0220 	orr.w	r2, r3, #32
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e023      	b.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	0c1b      	lsrs	r3, r3, #16
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d10d      	bne.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4013      	ands	r3, r2
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
 8002e56:	e00c      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4013      	ands	r3, r2
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	79fb      	ldrb	r3, [r7, #7]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d0b6      	beq.n	8002de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e90:	e051      	b.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea0:	d123      	bne.n	8002eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f043 0204 	orr.w	r2, r3, #4
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e046      	b.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d021      	beq.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fdaf 	bl	8001a54 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d116      	bne.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e020      	b.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d10c      	bne.n	8002f5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	e00b      	b.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d18d      	bne.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f8c:	e02d      	b.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f8ce 	bl	8003130 <I2C_IsAcknowledgeFailed>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e02d      	b.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d021      	beq.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fd55 	bl	8001a54 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d116      	bne.n	8002fea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e007      	b.n	8002ffa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff4:	2b80      	cmp	r3, #128	; 0x80
 8002ff6:	d1ca      	bne.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300e:	e02d      	b.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 f88d 	bl	8003130 <I2C_IsAcknowledgeFailed>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e02d      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003026:	d021      	beq.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003028:	f7fe fd14 	bl	8001a54 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	429a      	cmp	r2, r3
 8003036:	d302      	bcc.n	800303e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e007      	b.n	800307c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b04      	cmp	r3, #4
 8003078:	d1ca      	bne.n	8003010 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003090:	e042      	b.n	8003118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b10      	cmp	r3, #16
 800309e:	d119      	bne.n	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e029      	b.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d4:	f7fe fcbe 	bl	8001a54 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d302      	bcc.n	80030ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	2b40      	cmp	r3, #64	; 0x40
 8003124:	d1b5      	bne.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003146:	d11b      	bne.n	8003180 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003150:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e26c      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8087 	beq.w	80032ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ac:	4b92      	ldr	r3, [pc, #584]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d00c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b8:	4b8f      	ldr	r3, [pc, #572]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d112      	bne.n	80031ea <HAL_RCC_OscConfig+0x5e>
 80031c4:	4b8c      	ldr	r3, [pc, #560]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d0:	d10b      	bne.n	80031ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d2:	4b89      	ldr	r3, [pc, #548]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d06c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x12c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d168      	bne.n	80032b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e246      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x76>
 80031f4:	4b80      	ldr	r3, [pc, #512]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7f      	ldr	r2, [pc, #508]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e02e      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b7b      	ldr	r3, [pc, #492]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7a      	ldr	r2, [pc, #488]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b78      	ldr	r3, [pc, #480]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a77      	ldr	r2, [pc, #476]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0xbc>
 800322e:	4b72      	ldr	r3, [pc, #456]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a71      	ldr	r2, [pc, #452]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6e      	ldr	r2, [pc, #440]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003248:	4b6b      	ldr	r3, [pc, #428]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6a      	ldr	r2, [pc, #424]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b68      	ldr	r3, [pc, #416]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a67      	ldr	r2, [pc, #412]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fbf4 	bl	8001a54 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fbf0 	bl	8001a54 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1fa      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b5d      	ldr	r3, [pc, #372]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0xe4>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fbe0 	bl	8001a54 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fbdc 	bl	8001a54 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	; 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1e6      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x10c>
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c6:	4b4c      	ldr	r3, [pc, #304]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032d2:	4b49      	ldr	r3, [pc, #292]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x18c>
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x176>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1ba      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b3d      	ldr	r3, [pc, #244]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4939      	ldr	r1, [pc, #228]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	e03a      	b.n	800338e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_OscConfig+0x270>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe fb95 	bl	8001a54 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe fb91 	bl	8001a54 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e19b      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4927      	ldr	r1, [pc, #156]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b26      	ldr	r3, [pc, #152]	; (80033fc <HAL_RCC_OscConfig+0x270>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fb74 	bl	8001a54 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7fe fb70 	bl	8001a54 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e17a      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d03a      	beq.n	8003410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d019      	beq.n	80033d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe fb54 	bl	8001a54 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe fb50 	bl	8001a54 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e15a      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f000 fada 	bl	8003988 <RCC_Delay>
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_OscConfig+0x274>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fb3a 	bl	8001a54 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e2:	e00f      	b.n	8003404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe fb36 	bl	8001a54 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d908      	bls.n	8003404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e140      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	42420000 	.word	0x42420000
 8003400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4b9e      	ldr	r3, [pc, #632]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e9      	bne.n	80033e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a6 	beq.w	800356a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b97      	ldr	r3, [pc, #604]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	4b94      	ldr	r3, [pc, #592]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4a93      	ldr	r2, [pc, #588]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	61d3      	str	r3, [r2, #28]
 800343a:	4b91      	ldr	r3, [pc, #580]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b8e      	ldr	r3, [pc, #568]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b8b      	ldr	r3, [pc, #556]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a8a      	ldr	r2, [pc, #552]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe faf7 	bl	8001a54 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe faf3 	bl	8001a54 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b64      	cmp	r3, #100	; 0x64
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0fd      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b81      	ldr	r3, [pc, #516]	; (8003684 <HAL_RCC_OscConfig+0x4f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x312>
 8003490:	4b7b      	ldr	r3, [pc, #492]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a7a      	ldr	r2, [pc, #488]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	e02d      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034a6:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4a75      	ldr	r2, [pc, #468]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6213      	str	r3, [r2, #32]
 80034b2:	4b73      	ldr	r3, [pc, #460]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a72      	ldr	r2, [pc, #456]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	e01c      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x356>
 80034c8:	4b6d      	ldr	r3, [pc, #436]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a6c      	ldr	r2, [pc, #432]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	4b6a      	ldr	r3, [pc, #424]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4a69      	ldr	r2, [pc, #420]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6213      	str	r3, [r2, #32]
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 80034e2:	4b67      	ldr	r3, [pc, #412]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a66      	ldr	r2, [pc, #408]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	4b64      	ldr	r3, [pc, #400]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a63      	ldr	r2, [pc, #396]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe faa7 	bl	8001a54 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe faa3 	bl	8001a54 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	; 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0ab      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	4b57      	ldr	r3, [pc, #348]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x37e>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe fa91 	bl	8001a54 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe fa8d 	bl	8001a54 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e095      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	4b4c      	ldr	r3, [pc, #304]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b48      	ldr	r3, [pc, #288]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8081 	beq.w	8003676 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	4b42      	ldr	r3, [pc, #264]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d061      	beq.n	8003644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d146      	bne.n	8003616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b3f      	ldr	r3, [pc, #252]	; (8003688 <HAL_RCC_OscConfig+0x4fc>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fe fa61 	bl	8001a54 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fe fa5d 	bl	8001a54 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e067      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	4b35      	ldr	r3, [pc, #212]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035bc:	d108      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	492d      	ldr	r1, [pc, #180]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d0:	4b2b      	ldr	r3, [pc, #172]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a19      	ldr	r1, [r3, #32]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	430b      	orrs	r3, r1
 80035e2:	4927      	ldr	r1, [pc, #156]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_OscConfig+0x4fc>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fa31 	bl	8001a54 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fa2d 	bl	8001a54 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e037      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003608:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x46a>
 8003614:	e02f      	b.n	8003676 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_RCC_OscConfig+0x4fc>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe fa1a 	bl	8001a54 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fa16 	bl	8001a54 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e020      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x498>
 8003642:	e018      	b.n	8003676 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e013      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <HAL_RCC_OscConfig+0x4f4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	429a      	cmp	r2, r3
 8003662:	d106      	bne.n	8003672 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	42420060 	.word	0x42420060

0800368c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0d0      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d910      	bls.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0207 	bic.w	r2, r3, #7
 80036b6:	4965      	ldr	r1, [pc, #404]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b63      	ldr	r3, [pc, #396]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0b8      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d020      	beq.n	800371e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e8:	4b59      	ldr	r3, [pc, #356]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003700:	4b53      	ldr	r3, [pc, #332]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a52      	ldr	r2, [pc, #328]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800370a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b50      	ldr	r3, [pc, #320]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	494d      	ldr	r1, [pc, #308]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d040      	beq.n	80037ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d107      	bne.n	8003742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	4b47      	ldr	r3, [pc, #284]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d115      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e07f      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e073      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e06b      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4936      	ldr	r1, [pc, #216]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7fe f96a 	bl	8001a54 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fe f966 	bl	8001a54 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e053      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d210      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 0207 	bic.w	r2, r3, #7
 80037c2:	4922      	ldr	r1, [pc, #136]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e032      	b.n	8003842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e8:	4b19      	ldr	r3, [pc, #100]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4916      	ldr	r1, [pc, #88]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	490e      	ldr	r1, [pc, #56]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381a:	f000 f821 	bl	8003860 <HAL_RCC_GetSysClockFreq>
 800381e:	4601      	mov	r1, r0
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 800382c:	5cd3      	ldrb	r3, [r2, r3]
 800382e:	fa21 f303 	lsr.w	r3, r1, r3
 8003832:	4a09      	ldr	r2, [pc, #36]	; (8003858 <HAL_RCC_ClockConfig+0x1cc>)
 8003834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1d0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe f8c8 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40022000 	.word	0x40022000
 8003850:	40021000 	.word	0x40021000
 8003854:	08003ca8 	.word	0x08003ca8
 8003858:	20000000 	.word	0x20000000
 800385c:	20000004 	.word	0x20000004

08003860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003860:	b490      	push	{r4, r7}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003866:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003868:	1d3c      	adds	r4, r7, #4
 800386a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800386c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003870:	4b28      	ldr	r3, [pc, #160]	; (8003914 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800388a:	4b23      	ldr	r3, [pc, #140]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b04      	cmp	r3, #4
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x40>
 800389a:	2b08      	cmp	r3, #8
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x46>
 800389e:	e02d      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038a2:	623b      	str	r3, [r7, #32]
      break;
 80038a4:	e02d      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	0c9b      	lsrs	r3, r3, #18
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038b2:	4413      	add	r3, r2
 80038b4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038b8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	0c5b      	lsrs	r3, r3, #17
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80038d2:	4413      	add	r3, r2
 80038d4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038d8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038de:	fb02 f203 	mul.w	r2, r2, r3
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e004      	b.n	80038f6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	623b      	str	r3, [r7, #32]
      break;
 80038fa:	e002      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_RCC_GetSysClockFreq+0xbc>)
 80038fe:	623b      	str	r3, [r7, #32]
      break;
 8003900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003902:	6a3b      	ldr	r3, [r7, #32]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3728      	adds	r7, #40	; 0x28
 8003908:	46bd      	mov	sp, r7
 800390a:	bc90      	pop	{r4, r7}
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	08003c94 	.word	0x08003c94
 8003914:	08003ca4 	.word	0x08003ca4
 8003918:	40021000 	.word	0x40021000
 800391c:	007a1200 	.word	0x007a1200
 8003920:	003d0900 	.word	0x003d0900

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b02      	ldr	r3, [pc, #8]	; (8003934 <HAL_RCC_GetHCLKFreq+0x10>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff2 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003940:	4601      	mov	r1, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08003cb8 	.word	0x08003cb8

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003964:	f7ff ffde 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003968:	4601      	mov	r1, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0adb      	lsrs	r3, r3, #11
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40021000 	.word	0x40021000
 8003984:	08003cb8 	.word	0x08003cb8

08003988 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <RCC_Delay+0x34>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <RCC_Delay+0x38>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0a5b      	lsrs	r3, r3, #9
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	fb02 f303 	mul.w	r3, r2, r3
 80039a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039a4:	bf00      	nop
  }
  while (Delay --);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	60fa      	str	r2, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f9      	bne.n	80039a4 <RCC_Delay+0x1c>
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000000 	.word	0x20000000
 80039c0:	10624dd3 	.word	0x10624dd3

080039c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e03f      	b.n	8003a56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd ff0a 	bl	8001804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2224      	movs	r2, #36	; 0x24
 80039f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f829 	bl	8003a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a9a:	f023 030c 	bic.w	r3, r3, #12
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699a      	ldr	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a52      	ldr	r2, [pc, #328]	; (8003c0c <UART_SetConfig+0x1ac>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d14e      	bne.n	8003b66 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ac8:	f7ff ff4a 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8003acc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	0119      	lsls	r1, r3, #4
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009a      	lsls	r2, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b04:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003b06:	fba3 0302 	umull	r0, r3, r3, r2
 8003b0a:	095b      	lsrs	r3, r3, #5
 8003b0c:	2064      	movs	r0, #100	; 0x64
 8003b0e:	fb00 f303 	mul.w	r3, r0, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	3332      	adds	r3, #50	; 0x32
 8003b18:	4a3d      	ldr	r2, [pc, #244]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b24:	4419      	add	r1, r3
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009a      	lsls	r2, r3, #2
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b3c:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003b3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2064      	movs	r0, #100	; 0x64
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	3332      	adds	r3, #50	; 0x32
 8003b50:	4a2f      	ldr	r2, [pc, #188]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	440a      	add	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003b64:	e04d      	b.n	8003c02 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b66:	f7ff fee7 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8003b6a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	009a      	lsls	r2, r3, #2
 8003b76:	441a      	add	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003b84:	fba2 2303 	umull	r2, r3, r2, r3
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	0119      	lsls	r1, r3, #4
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009a      	lsls	r2, r3, #2
 8003b96:	441a      	add	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003ba4:	fba3 0302 	umull	r0, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	2064      	movs	r0, #100	; 0x64
 8003bac:	fb00 f303 	mul.w	r3, r0, r3
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	3332      	adds	r3, #50	; 0x32
 8003bb6:	4a16      	ldr	r2, [pc, #88]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc2:	4419      	add	r1, r3
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	009a      	lsls	r2, r3, #2
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003bdc:	fba3 0302 	umull	r0, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2064      	movs	r0, #100	; 0x64
 8003be4:	fb00 f303 	mul.w	r3, r0, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <UART_SetConfig+0x1b0>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 020f 	and.w	r2, r3, #15
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	440a      	add	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	bf00      	nop
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40013800 	.word	0x40013800
 8003c10:	51eb851f 	.word	0x51eb851f

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	2500      	movs	r5, #0
 8003c18:	4e0c      	ldr	r6, [pc, #48]	; (8003c4c <__libc_init_array+0x38>)
 8003c1a:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1c:	1ba4      	subs	r4, r4, r6
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	42a5      	cmp	r5, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	f000 f822 	bl	8003c6c <_init>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	4e0a      	ldr	r6, [pc, #40]	; (8003c54 <__libc_init_array+0x40>)
 8003c2c:	4c0a      	ldr	r4, [pc, #40]	; (8003c58 <__libc_init_array+0x44>)
 8003c2e:	1ba4      	subs	r4, r4, r6
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	42a5      	cmp	r5, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c3c:	4798      	blx	r3
 8003c3e:	3501      	adds	r5, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c46:	4798      	blx	r3
 8003c48:	3501      	adds	r5, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08003cc0 	.word	0x08003cc0
 8003c50:	08003cc0 	.word	0x08003cc0
 8003c54:	08003cc0 	.word	0x08003cc0
 8003c58:	08003cc4 	.word	0x08003cc4

08003c5c <memset>:
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	4402      	add	r2, r0
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d100      	bne.n	8003c66 <memset+0xa>
 8003c64:	4770      	bx	lr
 8003c66:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6a:	e7f9      	b.n	8003c60 <memset+0x4>

08003c6c <_init>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr

08003c78 <_fini>:
 8003c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7a:	bf00      	nop
 8003c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c7e:	bc08      	pop	{r3}
 8003c80:	469e      	mov	lr, r3
 8003c82:	4770      	bx	lr
