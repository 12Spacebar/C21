
C21_HC05_MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006430  08006430  00016430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080064c0  080064c0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064c0  080064c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000078  0800653c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  0800653c  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d71f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aad  00000000  00000000  0002d7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  0002f270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df0  00000000  00000000  00030100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014915  00000000  00000000  00030ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000952a  00000000  00000000  00045805  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074e58  00000000  00000000  0004ed2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3b87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043dc  00000000  00000000  000c3c04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08006418 	.word	0x08006418

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08006418 	.word	0x08006418

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <HAL_I2C_ClearBusyFlagErrata_2_14_7>:
float a1 = -1.9382;
float a2 = 0.9400;



void HAL_I2C_ClearBusyFlagErrata_2_14_7(I2C_HandleTypeDef *hi2c) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

    static uint8_t resetTried = 0;
    if (resetTried == 1) {
 80010b8:	4b5f      	ldr	r3, [pc, #380]	; (8001238 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x188>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	f000 80b6 	beq.w	800122e <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x17e>
        return ;
    }


    uint32_t SDA_PIN = GPIO_PIN_9;
 80010c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c6:	61fb      	str	r3, [r7, #28]
    uint32_t SCL_PIN = GPIO_PIN_8;
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitTypeDef GPIO_InitStruct;

    // 1
    __HAL_I2C_DISABLE(hi2c);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

    // 2
    GPIO_InitStruct.Pin = SDA_PIN|SCL_PIN;
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010e6:	2311      	movs	r3, #17
 80010e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	4850      	ldr	r0, [pc, #320]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 80010fa:	f001 ffcb 	bl	8003094 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001104:	484d      	ldr	r0, [pc, #308]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8001106:	f002 f936 	bl	8003376 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001110:	484a      	ldr	r0, [pc, #296]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8001112:	f002 f930 	bl	8003376 <HAL_GPIO_WritePin>
//    HAL_GPIO_WRITE_ODR(GPIOB, SDA_PIN);
//    HAL_GPIO_WRITE_ODR(GPIOB, SCL_PIN);

    // 3
    GPIO_PinState pinState;
    if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_RESET) {
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	b29b      	uxth	r3, r3
 800111a:	4619      	mov	r1, r3
 800111c:	4847      	ldr	r0, [pc, #284]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 800111e:	f002 f913 	bl	8003348 <HAL_GPIO_ReadPin>
//        for(;;){}
    }
    if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_RESET) {
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4619      	mov	r1, r3
 8001128:	4844      	ldr	r0, [pc, #272]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 800112a:	f002 f90d 	bl	8003348 <HAL_GPIO_ReadPin>
//        for(;;){}
    }

    // 4
    GPIO_InitStruct.Pin = SDA_PIN;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	4619      	mov	r1, r3
 8001138:	4840      	ldr	r0, [pc, #256]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 800113a:	f001 ffab 	bl	8003094 <HAL_GPIO_Init>

    HAL_GPIO_TogglePin(GPIOB, SDA_PIN);
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4619      	mov	r1, r3
 8001144:	483d      	ldr	r0, [pc, #244]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8001146:	f002 f92e 	bl	80033a6 <HAL_GPIO_TogglePin>

    // 5
    if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_SET) {
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	483a      	ldr	r0, [pc, #232]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8001152:	f002 f8f9 	bl	8003348 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d100      	bne.n	800115e <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xae>
        for(;;){}
 800115c:	e7fe      	b.n	800115c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xac>
    }

    // 6
    GPIO_InitStruct.Pin = SCL_PIN;
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4619      	mov	r1, r3
 8001168:	4834      	ldr	r0, [pc, #208]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 800116a:	f001 ff93 	bl	8003094 <HAL_GPIO_Init>

    HAL_GPIO_TogglePin(GPIOB, SCL_PIN);
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4831      	ldr	r0, [pc, #196]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8001176:	f002 f916 	bl	80033a6 <HAL_GPIO_TogglePin>

    // 7
    if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_SET) {
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4619      	mov	r1, r3
 8001180:	482e      	ldr	r0, [pc, #184]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 8001182:	f002 f8e1 	bl	8003348 <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b01      	cmp	r3, #1
 800118a:	d100      	bne.n	800118e <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xde>
        for(;;){}
 800118c:	e7fe      	b.n	800118c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0xdc>
    }

    // 8
    GPIO_InitStruct.Pin = SDA_PIN;
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0308 	add.w	r3, r7, #8
 8001196:	4619      	mov	r1, r3
 8001198:	4828      	ldr	r0, [pc, #160]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 800119a:	f001 ff7b 	bl	8003094 <HAL_GPIO_Init>

    HAL_GPIO_WRITE_ODR(GPIOB, SDA_PIN);
 800119e:	69f9      	ldr	r1, [r7, #28]
 80011a0:	4826      	ldr	r0, [pc, #152]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 80011a2:	f000 f84d 	bl	8001240 <HAL_GPIO_WRITE_ODR>

    // 9
    if (HAL_GPIO_ReadPin(GPIOB, SDA_PIN) == GPIO_PIN_RESET) {
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	4823      	ldr	r0, [pc, #140]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 80011ae:	f002 f8cb 	bl	8003348 <HAL_GPIO_ReadPin>
//        for(;;){}
    }

    // 10
    GPIO_InitStruct.Pin = SCL_PIN;
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	481f      	ldr	r0, [pc, #124]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 80011be:	f001 ff69 	bl	8003094 <HAL_GPIO_Init>

    HAL_GPIO_WRITE_ODR(GPIOB, SCL_PIN);
 80011c2:	69b9      	ldr	r1, [r7, #24]
 80011c4:	481d      	ldr	r0, [pc, #116]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 80011c6:	f000 f83b 	bl	8001240 <HAL_GPIO_WRITE_ODR>

    // 11
    if (HAL_GPIO_ReadPin(GPIOB, SCL_PIN) == GPIO_PIN_RESET) {
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4619      	mov	r1, r3
 80011d0:	481a      	ldr	r0, [pc, #104]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 80011d2:	f002 f8b9 	bl	8003348 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x12e>
        for(;;){}
 80011dc:	e7fe      	b.n	80011dc <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x12c>
    }

    // 12
    GPIO_InitStruct.Pin = SDA_PIN|SCL_PIN;
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e6:	2312      	movs	r3, #18
 80011e8:	60fb      	str	r3, [r7, #12]

    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	4812      	ldr	r0, [pc, #72]	; (800123c <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x18c>)
 80011f2:	f001 ff4f 	bl	8003094 <HAL_GPIO_Init>

   // 13
   hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001204:	601a      	str	r2, [r3, #0]

   // 14
   hi2c->Instance->CR1 ^= I2C_CR1_SWRST;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f482 4200 	eor.w	r2, r2, #32768	; 0x8000
 8001214:	601a      	str	r2, [r3, #0]

   // 15
   __HAL_I2C_ENABLE(hi2c);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0201 	orr.w	r2, r2, #1
 8001224:	601a      	str	r2, [r3, #0]

   resetTried = 1;
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x188>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e000      	b.n	8001230 <HAL_I2C_ClearBusyFlagErrata_2_14_7+0x180>
        return ;
 800122e:	bf00      	nop
}
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000094 	.word	0x20000094
 800123c:	40010c00 	.word	0x40010c00

08001240 <HAL_GPIO_WRITE_ODR>:

void HAL_GPIO_WRITE_ODR(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR |= GPIO_Pin;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	60da      	str	r2, [r3, #12]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
	...

08001264 <init_MPU>:

char init_MPU(){
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b08d      	sub	sp, #52	; 0x34
 8001268:	af02      	add	r7, sp, #8
    char status = 1;
 800126a:	2301      	movs	r3, #1
 800126c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8001270:	23d0      	movs	r3, #208	; 0xd0
 8001272:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t magnet_address = MAG_ADRRESS;
 8001276:	2318      	movs	r3, #24
 8001278:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25




  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 800127c:	e017      	b.n	80012ae <init_MPU+0x4a>
    	if(HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) == HAL_BUSY){
 800127e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001282:	b299      	uxth	r1, r3
 8001284:	2302      	movs	r3, #2
 8001286:	2203      	movs	r2, #3
 8001288:	488a      	ldr	r0, [pc, #552]	; (80014b4 <init_MPU+0x250>)
 800128a:	f002 fd35 	bl	8003cf8 <HAL_I2C_IsDeviceReady>
 800128e:	4603      	mov	r3, r0
 8001290:	2b02      	cmp	r3, #2
 8001292:	d107      	bne.n	80012a4 <init_MPU+0x40>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	4887      	ldr	r0, [pc, #540]	; (80014b8 <init_MPU+0x254>)
 800129a:	f002 f884 	bl	80033a6 <HAL_GPIO_TogglePin>
			HAL_I2C_ClearBusyFlagErrata_2_14_7(&hi2c1);
 800129e:	4885      	ldr	r0, [pc, #532]	; (80014b4 <init_MPU+0x250>)
 80012a0:	f7ff ff06 	bl	80010b0 <HAL_I2C_ClearBusyFlagErrata_2_14_7>
    	}
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80012a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a8:	4884      	ldr	r0, [pc, #528]	; (80014bc <init_MPU+0x258>)
 80012aa:	f002 f87c 	bl	80033a6 <HAL_GPIO_TogglePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 80012ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012b2:	b299      	uxth	r1, r3
 80012b4:	2302      	movs	r3, #2
 80012b6:	2203      	movs	r2, #3
 80012b8:	487e      	ldr	r0, [pc, #504]	; (80014b4 <init_MPU+0x250>)
 80012ba:	f002 fd1d 	bl	8003cf8 <HAL_I2C_IsDeviceReady>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1dc      	bne.n	800127e <init_MPU+0x1a>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ca:	487c      	ldr	r0, [pc, #496]	; (80014bc <init_MPU+0x258>)
 80012cc:	f002 f853 	bl	8003376 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	4879      	ldr	r0, [pc, #484]	; (80014bc <init_MPU+0x258>)
 80012d8:	f002 f84d 	bl	8003376 <HAL_GPIO_WritePin>

//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 80012dc:	236b      	movs	r3, #107	; 0x6b
 80012de:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80012e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012ec:	b299      	uxth	r1, r3
 80012ee:	f107 0220 	add.w	r2, r7, #32
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2302      	movs	r3, #2
 80012fa:	486e      	ldr	r0, [pc, #440]	; (80014b4 <init_MPU+0x250>)
 80012fc:	f002 f9a4 	bl	8003648 <HAL_I2C_Master_Transmit>

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 8001300:	2319      	movs	r3, #25
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = sample_1khz;
 8001306:	2307      	movs	r3, #7
 8001308:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800130c:	bf00      	nop
 800130e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001312:	b299      	uxth	r1, r3
 8001314:	f107 0220 	add.w	r2, r7, #32
 8001318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2302      	movs	r3, #2
 8001320:	4864      	ldr	r0, [pc, #400]	; (80014b4 <init_MPU+0x250>)
 8001322:	f002 f991 	bl	8003648 <HAL_I2C_Master_Transmit>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <init_MPU+0xaa>

	d[0] = CONFIG;
 800132c:	231a      	movs	r3, #26
 800132e:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = lpf;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001338:	bf00      	nop
 800133a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800133e:	b299      	uxth	r1, r3
 8001340:	f107 0220 	add.w	r2, r7, #32
 8001344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2302      	movs	r3, #2
 800134c:	4859      	ldr	r0, [pc, #356]	; (80014b4 <init_MPU+0x250>)
 800134e:	f002 f97b 	bl	8003648 <HAL_I2C_Master_Transmit>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <init_MPU+0xd6>

	d[0] = GYRO_CONFIG;
 8001358:	231b      	movs	r3, #27
 800135a:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = gyro_con;
 800135e:	2318      	movs	r3, #24
 8001360:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001364:	bf00      	nop
 8001366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800136a:	b299      	uxth	r1, r3
 800136c:	f107 0220 	add.w	r2, r7, #32
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2302      	movs	r3, #2
 8001378:	484e      	ldr	r0, [pc, #312]	; (80014b4 <init_MPU+0x250>)
 800137a:	f002 f965 	bl	8003648 <HAL_I2C_Master_Transmit>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f0      	bne.n	8001366 <init_MPU+0x102>

	d[0] = ACCEL_CONFIG;
 8001384:	231c      	movs	r3, #28
 8001386:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x00;
 800138a:	2300      	movs	r3, #0
 800138c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001390:	bf00      	nop
 8001392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001396:	b299      	uxth	r1, r3
 8001398:	f107 0220 	add.w	r2, r7, #32
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2302      	movs	r3, #2
 80013a4:	4843      	ldr	r0, [pc, #268]	; (80014b4 <init_MPU+0x250>)
 80013a6:	f002 f94f 	bl	8003648 <HAL_I2C_Master_Transmit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <init_MPU+0x12e>

	d[0] = ACCEL_CONFIG2;
 80013b0:	231d      	movs	r3, #29
 80013b2:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = 0x02;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80013bc:	bf00      	nop
 80013be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013c2:	b299      	uxth	r1, r3
 80013c4:	f107 0220 	add.w	r2, r7, #32
 80013c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2302      	movs	r3, #2
 80013d0:	4838      	ldr	r0, [pc, #224]	; (80014b4 <init_MPU+0x250>)
 80013d2:	f002 f939 	bl	8003648 <HAL_I2C_Master_Transmit>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f0      	bne.n	80013be <init_MPU+0x15a>


	d[0] = INIT_ENB;
 80013dc:	2338      	movs	r3, #56	; 0x38
 80013de:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = inter;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80013e8:	bf00      	nop
 80013ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ee:	b299      	uxth	r1, r3
 80013f0:	f107 0220 	add.w	r2, r7, #32
 80013f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2302      	movs	r3, #2
 80013fc:	482d      	ldr	r0, [pc, #180]	; (80014b4 <init_MPU+0x250>)
 80013fe:	f002 f923 	bl	8003648 <HAL_I2C_Master_Transmit>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f0      	bne.n	80013ea <init_MPU+0x186>

	d[0] = USER_CTRL;
 8001408:	236a      	movs	r3, #106	; 0x6a
 800140a:	f887 3020 	strb.w	r3, [r7, #32]
    d[1] = zero;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001414:	bf00      	nop
 8001416:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800141a:	b299      	uxth	r1, r3
 800141c:	f107 0220 	add.w	r2, r7, #32
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2302      	movs	r3, #2
 8001428:	4822      	ldr	r0, [pc, #136]	; (80014b4 <init_MPU+0x250>)
 800142a:	f002 f90d 	bl	8003648 <HAL_I2C_Master_Transmit>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f0      	bne.n	8001416 <init_MPU+0x1b2>

	d[0] = INT_BYPASS;
 8001434:	2337      	movs	r3, #55	; 0x37
 8001436:	f887 3020 	strb.w	r3, [r7, #32]
	d[1] = stop_i2c_master;
 800143a:	2322      	movs	r3, #34	; 0x22
 800143c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001440:	bf00      	nop
 8001442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001446:	b299      	uxth	r1, r3
 8001448:	f107 0220 	add.w	r2, r7, #32
 800144c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2302      	movs	r3, #2
 8001454:	4817      	ldr	r0, [pc, #92]	; (80014b4 <init_MPU+0x250>)
 8001456:	f002 f8f7 	bl	8003648 <HAL_I2C_Master_Transmit>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <init_MPU+0x1de>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8001460:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001464:	b299      	uxth	r1, r3
 8001466:	23c8      	movs	r3, #200	; 0xc8
 8001468:	2203      	movs	r2, #3
 800146a:	4812      	ldr	r0, [pc, #72]	; (80014b4 <init_MPU+0x250>)
 800146c:	f002 fc44 	bl	8003cf8 <HAL_I2C_IsDeviceReady>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d026      	beq.n	80014c4 <init_MPU+0x260>
	    	strcpy( rx_data, "No Device \r \n");
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <init_MPU+0x25c>)
 800147a:	461c      	mov	r4, r3
 800147c:	4613      	mov	r3, r2
 800147e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001480:	c407      	stmia	r4!, {r0, r1, r2}
 8001482:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148a:	480c      	ldr	r0, [pc, #48]	; (80014bc <init_MPU+0x258>)
 800148c:	f001 ff73 	bl	8003376 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001490:	2201      	movs	r2, #1
 8001492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001496:	4809      	ldr	r0, [pc, #36]	; (80014bc <init_MPU+0x258>)
 8001498:	f001 ff6d 	bl	8003376 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 800149c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014a0:	f001 fcc8 	bl	8002e34 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <init_MPU+0x258>)
 80014ac:	f001 ff63 	bl	8003376 <HAL_GPIO_WritePin>
 80014b0:	e0e1      	b.n	8001676 <init_MPU+0x412>
 80014b2:	bf00      	nop
 80014b4:	20000110 	.word	0x20000110
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	08006430 	.word	0x08006430
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 80014c4:	230a      	movs	r3, #10
 80014c6:	f887 3020 	strb.w	r3, [r7, #32]
	    	  	d[1] = ROM_MODE;
 80014ca:	231f      	movs	r3, #31
 80014cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 80014d0:	bf00      	nop
 80014d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014d6:	b299      	uxth	r1, r3
 80014d8:	f107 0220 	add.w	r2, r7, #32
 80014dc:	2302      	movs	r3, #2
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2302      	movs	r3, #2
 80014e2:	4868      	ldr	r0, [pc, #416]	; (8001684 <init_MPU+0x420>)
 80014e4:	f002 f8b0 	bl	8003648 <HAL_I2C_Master_Transmit>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f1      	bne.n	80014d2 <init_MPU+0x26e>

	    	  	HAL_Delay(100);
 80014ee:	2064      	movs	r0, #100	; 0x64
 80014f0:	f001 fca0 	bl	8002e34 <HAL_Delay>


	    	  	uint8_t sensitive = ASAX_AD;
 80014f4:	2310      	movs	r3, #16
 80014f6:	70fb      	strb	r3, [r7, #3]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 80014f8:	bf00      	nop
 80014fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014fe:	b299      	uxth	r1, r3
 8001500:	1cfa      	adds	r2, r7, #3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	485e      	ldr	r0, [pc, #376]	; (8001684 <init_MPU+0x420>)
 800150c:	f002 f89c 	bl	8003648 <HAL_I2C_Master_Transmit>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1f1      	bne.n	80014fa <init_MPU+0x296>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 8001516:	bf00      	nop
 8001518:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800151c:	b299      	uxth	r1, r3
 800151e:	463a      	mov	r2, r7
 8001520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2303      	movs	r3, #3
 8001528:	4856      	ldr	r0, [pc, #344]	; (8001684 <init_MPU+0x420>)
 800152a:	f002 f98b 	bl	8003844 <HAL_I2C_Master_Receive>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f1      	bne.n	8001518 <init_MPU+0x2b4>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001534:	783b      	ldrb	r3, [r7, #0]
 8001536:	3b80      	subs	r3, #128	; 0x80
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe ff5b 	bl	80003f4 <__aeabi_i2d>
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	4b51      	ldr	r3, [pc, #324]	; (8001688 <init_MPU+0x424>)
 8001544:	f7fe ffc0 	bl	80004c8 <__aeabi_dmul>
 8001548:	4603      	mov	r3, r0
 800154a:	460c      	mov	r4, r1
 800154c:	4618      	mov	r0, r3
 800154e:	4621      	mov	r1, r4
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	4b4d      	ldr	r3, [pc, #308]	; (800168c <init_MPU+0x428>)
 8001556:	f7ff f8e1 	bl	800071c <__aeabi_ddiv>
 800155a:	4603      	mov	r3, r0
 800155c:	460c      	mov	r4, r1
 800155e:	4618      	mov	r0, r3
 8001560:	4621      	mov	r1, r4
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <init_MPU+0x42c>)
 8001568:	f7fe fdf8 	bl	800015c <__adddf3>
 800156c:	4603      	mov	r3, r0
 800156e:	460c      	mov	r4, r1
 8001570:	4618      	mov	r0, r3
 8001572:	4621      	mov	r1, r4
 8001574:	f7ff fa58 	bl	8000a28 <__aeabi_d2f>
 8001578:	4602      	mov	r2, r0
 800157a:	4b46      	ldr	r3, [pc, #280]	; (8001694 <init_MPU+0x430>)
 800157c:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 800157e:	787b      	ldrb	r3, [r7, #1]
 8001580:	3b80      	subs	r3, #128	; 0x80
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff36 	bl	80003f4 <__aeabi_i2d>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <init_MPU+0x424>)
 800158e:	f7fe ff9b 	bl	80004c8 <__aeabi_dmul>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	4618      	mov	r0, r3
 8001598:	4621      	mov	r1, r4
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <init_MPU+0x428>)
 80015a0:	f7ff f8bc 	bl	800071c <__aeabi_ddiv>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	4618      	mov	r0, r3
 80015aa:	4621      	mov	r1, r4
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b37      	ldr	r3, [pc, #220]	; (8001690 <init_MPU+0x42c>)
 80015b2:	f7fe fdd3 	bl	800015c <__adddf3>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	4618      	mov	r0, r3
 80015bc:	4621      	mov	r1, r4
 80015be:	f7ff fa33 	bl	8000a28 <__aeabi_d2f>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <init_MPU+0x434>)
 80015c6:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 80015c8:	78bb      	ldrb	r3, [r7, #2]
 80015ca:	3b80      	subs	r3, #128	; 0x80
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ff11 	bl	80003f4 <__aeabi_i2d>
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <init_MPU+0x424>)
 80015d8:	f7fe ff76 	bl	80004c8 <__aeabi_dmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	4618      	mov	r0, r3
 80015e2:	4621      	mov	r1, r4
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b28      	ldr	r3, [pc, #160]	; (800168c <init_MPU+0x428>)
 80015ea:	f7ff f897 	bl	800071c <__aeabi_ddiv>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	4618      	mov	r0, r3
 80015f4:	4621      	mov	r1, r4
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <init_MPU+0x42c>)
 80015fc:	f7fe fdae 	bl	800015c <__adddf3>
 8001600:	4603      	mov	r3, r0
 8001602:	460c      	mov	r4, r1
 8001604:	4618      	mov	r0, r3
 8001606:	4621      	mov	r1, r4
 8001608:	f7ff fa0e 	bl	8000a28 <__aeabi_d2f>
 800160c:	4602      	mov	r2, r0
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <init_MPU+0x438>)
 8001610:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8001612:	230a      	movs	r3, #10
 8001614:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = zero;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800161e:	bf00      	nop
 8001620:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001624:	b299      	uxth	r1, r3
 8001626:	f107 0220 	add.w	r2, r7, #32
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2302      	movs	r3, #2
 8001632:	4814      	ldr	r0, [pc, #80]	; (8001684 <init_MPU+0x420>)
 8001634:	f002 f808 	bl	8003648 <HAL_I2C_Master_Transmit>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <init_MPU+0x3bc>

	    	      HAL_Delay(100);
 800163e:	2064      	movs	r0, #100	; 0x64
 8001640:	f001 fbf8 	bl	8002e34 <HAL_Delay>

	    	      d[0] = CNTL1_AD;
 8001644:	230a      	movs	r3, #10
 8001646:	f887 3020 	strb.w	r3, [r7, #32]
	    	      d[1] = 0x16;
 800164a:	2316      	movs	r3, #22
 800164c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001650:	bf00      	nop
 8001652:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001656:	b299      	uxth	r1, r3
 8001658:	f107 0220 	add.w	r2, r7, #32
 800165c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2302      	movs	r3, #2
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <init_MPU+0x420>)
 8001666:	f001 ffef 	bl	8003648 <HAL_I2C_Master_Transmit>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f0      	bne.n	8001652 <init_MPU+0x3ee>
	    	      HAL_Delay(100);
 8001670:	2064      	movs	r0, #100	; 0x64
 8001672:	f001 fbdf 	bl	8002e34 <HAL_Delay>
	      }


  return status;
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800167a:	4618      	mov	r0, r3
 800167c:	372c      	adds	r7, #44	; 0x2c
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000110 	.word	0x20000110
 8001688:	3fe00000 	.word	0x3fe00000
 800168c:	40600000 	.word	0x40600000
 8001690:	3ff00000 	.word	0x3ff00000
 8001694:	20000538 	.word	0x20000538
 8001698:	20000298 	.word	0x20000298
 800169c:	20000530 	.word	0x20000530

080016a0 <process_MPU>:
	  Acc_z_  = 0;

}


IMU_data process_MPU(uint8_t EKF, uint8_t LPF){
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b090      	sub	sp, #64	; 0x40
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	70fb      	strb	r3, [r7, #3]
 80016ac:	4613      	mov	r3, r2
 80016ae:	70bb      	strb	r3, [r7, #2]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 80016b0:	233b      	movs	r3, #59	; 0x3b
 80016b2:	72fb      	strb	r3, [r7, #11]
	uint8_t device_address = MPU_ADDRESS;
 80016b4:	23d0      	movs	r3, #208	; 0xd0
 80016b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK){
 80016ba:	bf00      	nop
 80016bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016c0:	b299      	uxth	r1, r3
 80016c2:	f107 020b 	add.w	r2, r7, #11
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2301      	movs	r3, #1
 80016ce:	4894      	ldr	r0, [pc, #592]	; (8001920 <process_MPU+0x280>)
 80016d0:	f001 ffba 	bl	8003648 <HAL_I2C_Master_Transmit>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <process_MPU+0x1c>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
//			I2C_ClearBusyFlagErratum(&i2c, 10);
//	    }
//	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK){
 80016da:	bf00      	nop
 80016dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016e0:	b299      	uxth	r1, r3
 80016e2:	f107 020c 	add.w	r2, r7, #12
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	230e      	movs	r3, #14
 80016ee:	488c      	ldr	r0, [pc, #560]	; (8001920 <process_MPU+0x280>)
 80016f0:	f002 f8a8 	bl	8003844 <HAL_I2C_Master_Receive>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <process_MPU+0x3c>
//					I2C_ClearBusyFlagErratum(&i2c, 10);
//			    }
//			    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
	}

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 80016fa:	7b3b      	ldrb	r3, [r7, #12]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	b21a      	sxth	r2, r3
 8001700:	7b7b      	ldrb	r3, [r7, #13]
 8001702:	b21b      	sxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b21b      	sxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fa97 	bl	8000c3c <__aeabi_i2f>
 800170e:	4602      	mov	r2, r0
 8001710:	4b84      	ldr	r3, [pc, #528]	; (8001924 <process_MPU+0x284>)
 8001712:	601a      	str	r2, [r3, #0]
	Acc_y= (int16_t)(data[2] << 8 | data[3]);
 8001714:	7bbb      	ldrb	r3, [r7, #14]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21b      	sxth	r3, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fa8a 	bl	8000c3c <__aeabi_i2f>
 8001728:	4602      	mov	r2, r0
 800172a:	4b7f      	ldr	r3, [pc, #508]	; (8001928 <process_MPU+0x288>)
 800172c:	601a      	str	r2, [r3, #0]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 800172e:	7c3b      	ldrb	r3, [r7, #16]
 8001730:	021b      	lsls	r3, r3, #8
 8001732:	b21a      	sxth	r2, r3
 8001734:	7c7b      	ldrb	r3, [r7, #17]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fa7d 	bl	8000c3c <__aeabi_i2f>
 8001742:	4602      	mov	r2, r0
 8001744:	4b79      	ldr	r3, [pc, #484]	; (800192c <process_MPU+0x28c>)
 8001746:	601a      	str	r2, [r3, #0]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001748:	7cbb      	ldrb	r3, [r7, #18]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	7cfb      	ldrb	r3, [r7, #19]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b21b      	sxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fa70 	bl	8000c3c <__aeabi_i2f>
 800175c:	4602      	mov	r2, r0
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <process_MPU+0x290>)
 8001760:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8001762:	7d3b      	ldrb	r3, [r7, #20]
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b21a      	sxth	r2, r3
 8001768:	7d7b      	ldrb	r3, [r7, #21]
 800176a:	b21b      	sxth	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b21b      	sxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fa63 	bl	8000c3c <__aeabi_i2f>
 8001776:	4602      	mov	r2, r0
 8001778:	4b6e      	ldr	r3, [pc, #440]	; (8001934 <process_MPU+0x294>)
 800177a:	601a      	str	r2, [r3, #0]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 800177c:	7dbb      	ldrb	r3, [r7, #22]
 800177e:	021b      	lsls	r3, r3, #8
 8001780:	b21a      	sxth	r2, r3
 8001782:	7dfb      	ldrb	r3, [r7, #23]
 8001784:	b21b      	sxth	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b21b      	sxth	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fa56 	bl	8000c3c <__aeabi_i2f>
 8001790:	4602      	mov	r2, r0
 8001792:	4b69      	ldr	r3, [pc, #420]	; (8001938 <process_MPU+0x298>)
 8001794:	601a      	str	r2, [r3, #0]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8001796:	7e3b      	ldrb	r3, [r7, #24]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b21a      	sxth	r2, r3
 800179c:	7e7b      	ldrb	r3, [r7, #25]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fa49 	bl	8000c3c <__aeabi_i2f>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b63      	ldr	r3, [pc, #396]	; (800193c <process_MPU+0x29c>)
 80017ae:	601a      	str	r2, [r3, #0]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 80017b0:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <process_MPU+0x284>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe2f 	bl	8000418 <__aeabi_f2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <process_MPU+0x2a0>)
 80017c0:	f7fe ffac 	bl	800071c <__aeabi_ddiv>
 80017c4:	4603      	mov	r3, r0
 80017c6:	460c      	mov	r4, r1
 80017c8:	4618      	mov	r0, r3
 80017ca:	4621      	mov	r1, r4
 80017cc:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <process_MPU+0x2a4>)
 80017ce:	cb18      	ldmia	r3, {r3, r4}
 80017d0:	461a      	mov	r2, r3
 80017d2:	4623      	mov	r3, r4
 80017d4:	f7fe fcc0 	bl	8000158 <__aeabi_dsub>
 80017d8:	4603      	mov	r3, r0
 80017da:	460c      	mov	r4, r1
 80017dc:	4618      	mov	r0, r3
 80017de:	4621      	mov	r1, r4
 80017e0:	f7ff f922 	bl	8000a28 <__aeabi_d2f>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b4f      	ldr	r3, [pc, #316]	; (8001924 <process_MPU+0x284>)
 80017e8:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 80017ea:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <process_MPU+0x288>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fe12 	bl	8000418 <__aeabi_f2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b51      	ldr	r3, [pc, #324]	; (8001940 <process_MPU+0x2a0>)
 80017fa:	f7fe ff8f 	bl	800071c <__aeabi_ddiv>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	4618      	mov	r0, r3
 8001804:	4621      	mov	r1, r4
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <process_MPU+0x2a8>)
 8001808:	cb18      	ldmia	r3, {r3, r4}
 800180a:	461a      	mov	r2, r3
 800180c:	4623      	mov	r3, r4
 800180e:	f7fe fca3 	bl	8000158 <__aeabi_dsub>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4618      	mov	r0, r3
 8001818:	4621      	mov	r1, r4
 800181a:	f7ff f905 	bl	8000a28 <__aeabi_d2f>
 800181e:	4602      	mov	r2, r0
 8001820:	4b41      	ldr	r3, [pc, #260]	; (8001928 <process_MPU+0x288>)
 8001822:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 8001824:	4b41      	ldr	r3, [pc, #260]	; (800192c <process_MPU+0x28c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fdf5 	bl	8000418 <__aeabi_f2d>
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	4b43      	ldr	r3, [pc, #268]	; (8001940 <process_MPU+0x2a0>)
 8001834:	f7fe ff72 	bl	800071c <__aeabi_ddiv>
 8001838:	4603      	mov	r3, r0
 800183a:	460c      	mov	r4, r1
 800183c:	4618      	mov	r0, r3
 800183e:	4621      	mov	r1, r4
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <process_MPU+0x2ac>)
 8001842:	cb18      	ldmia	r3, {r3, r4}
 8001844:	461a      	mov	r2, r3
 8001846:	4623      	mov	r3, r4
 8001848:	f7fe fc88 	bl	800015c <__adddf3>
 800184c:	4603      	mov	r3, r0
 800184e:	460c      	mov	r4, r1
 8001850:	4618      	mov	r0, r3
 8001852:	4621      	mov	r1, r4
 8001854:	f7ff f8e8 	bl	8000a28 <__aeabi_d2f>
 8001858:	4602      	mov	r2, r0
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <process_MPU+0x28c>)
 800185c:	601a      	str	r2, [r3, #0]
    if(!EKF){
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d17b      	bne.n	800195c <process_MPU+0x2bc>
	Gyro_x = (Gyro_x )/16.4- bGx;
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <process_MPU+0x294>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7fe fdd5 	bl	8000418 <__aeabi_f2d>
 800186e:	a32a      	add	r3, pc, #168	; (adr r3, 8001918 <process_MPU+0x278>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe ff52 	bl	800071c <__aeabi_ddiv>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4618      	mov	r0, r3
 800187e:	4621      	mov	r1, r4
 8001880:	4b33      	ldr	r3, [pc, #204]	; (8001950 <process_MPU+0x2b0>)
 8001882:	cb18      	ldmia	r3, {r3, r4}
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	f7fe fc66 	bl	8000158 <__aeabi_dsub>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	4618      	mov	r0, r3
 8001892:	4621      	mov	r1, r4
 8001894:	f7ff f8c8 	bl	8000a28 <__aeabi_d2f>
 8001898:	4602      	mov	r2, r0
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <process_MPU+0x294>)
 800189c:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y)/16.4- bGy;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <process_MPU+0x298>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fdb8 	bl	8000418 <__aeabi_f2d>
 80018a8:	a31b      	add	r3, pc, #108	; (adr r3, 8001918 <process_MPU+0x278>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe ff35 	bl	800071c <__aeabi_ddiv>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	4618      	mov	r0, r3
 80018b8:	4621      	mov	r1, r4
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <process_MPU+0x2b4>)
 80018bc:	cb18      	ldmia	r3, {r3, r4}
 80018be:	461a      	mov	r2, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	f7fe fc49 	bl	8000158 <__aeabi_dsub>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	4618      	mov	r0, r3
 80018cc:	4621      	mov	r1, r4
 80018ce:	f7ff f8ab 	bl	8000a28 <__aeabi_d2f>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <process_MPU+0x298>)
 80018d6:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <process_MPU+0x29c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fd9b 	bl	8000418 <__aeabi_f2d>
 80018e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001918 <process_MPU+0x278>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe ff18 	bl	800071c <__aeabi_ddiv>
 80018ec:	4603      	mov	r3, r0
 80018ee:	460c      	mov	r4, r1
 80018f0:	4618      	mov	r0, r3
 80018f2:	4621      	mov	r1, r4
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <process_MPU+0x2b8>)
 80018f6:	cb18      	ldmia	r3, {r3, r4}
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	f7fe fc2c 	bl	8000158 <__aeabi_dsub>
 8001900:	4603      	mov	r3, r0
 8001902:	460c      	mov	r4, r1
 8001904:	4618      	mov	r0, r3
 8001906:	4621      	mov	r1, r4
 8001908:	f7ff f88e 	bl	8000a28 <__aeabi_d2f>
 800190c:	4602      	mov	r2, r0
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <process_MPU+0x29c>)
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e05c      	b.n	80019ce <process_MPU+0x32e>
 8001914:	f3af 8000 	nop.w
 8001918:	66666666 	.word	0x66666666
 800191c:	40306666 	.word	0x40306666
 8001920:	20000110 	.word	0x20000110
 8001924:	20000274 	.word	0x20000274
 8001928:	20000194 	.word	0x20000194
 800192c:	2000009c 	.word	0x2000009c
 8001930:	200001b8 	.word	0x200001b8
 8001934:	200000fc 	.word	0x200000fc
 8001938:	20000504 	.word	0x20000504
 800193c:	20000224 	.word	0x20000224
 8001940:	40d00000 	.word	0x40d00000
 8001944:	200004a8 	.word	0x200004a8
 8001948:	20000278 	.word	0x20000278
 800194c:	20000518 	.word	0x20000518
 8001950:	200002e8 	.word	0x200002e8
 8001954:	20000168 	.word	0x20000168
 8001958:	20000520 	.word	0x20000520
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <process_MPU+0x380>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fd59 	bl	8000418 <__aeabi_f2d>
 8001966:	a32c      	add	r3, pc, #176	; (adr r3, 8001a18 <process_MPU+0x378>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fed6 	bl	800071c <__aeabi_ddiv>
 8001970:	4603      	mov	r3, r0
 8001972:	460c      	mov	r4, r1
 8001974:	4618      	mov	r0, r3
 8001976:	4621      	mov	r1, r4
 8001978:	f7ff f856 	bl	8000a28 <__aeabi_d2f>
 800197c:	4602      	mov	r2, r0
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <process_MPU+0x380>)
 8001980:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 8001982:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <process_MPU+0x384>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fd46 	bl	8000418 <__aeabi_f2d>
 800198c:	a322      	add	r3, pc, #136	; (adr r3, 8001a18 <process_MPU+0x378>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fec3 	bl	800071c <__aeabi_ddiv>
 8001996:	4603      	mov	r3, r0
 8001998:	460c      	mov	r4, r1
 800199a:	4618      	mov	r0, r3
 800199c:	4621      	mov	r1, r4
 800199e:	f7ff f843 	bl	8000a28 <__aeabi_d2f>
 80019a2:	4602      	mov	r2, r0
 80019a4:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <process_MPU+0x384>)
 80019a6:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <process_MPU+0x388>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fd33 	bl	8000418 <__aeabi_f2d>
 80019b2:	a319      	add	r3, pc, #100	; (adr r3, 8001a18 <process_MPU+0x378>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe feb0 	bl	800071c <__aeabi_ddiv>
 80019bc:	4603      	mov	r3, r0
 80019be:	460c      	mov	r4, r1
 80019c0:	4618      	mov	r0, r3
 80019c2:	4621      	mov	r1, r4
 80019c4:	f7ff f830 	bl	8000a28 <__aeabi_d2f>
 80019c8:	4602      	mov	r2, r0
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <process_MPU+0x388>)
 80019cc:	601a      	str	r2, [r3, #0]
    }

    if(!LPF){
 80019ce:	78bb      	ldrb	r3, [r7, #2]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d111      	bne.n	80019f8 <process_MPU+0x358>
		data_raw.Gyro_x = Gyro_x;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <process_MPU+0x380>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61fb      	str	r3, [r7, #28]
		data_raw.Gyro_y = Gyro_y;
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <process_MPU+0x384>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	623b      	str	r3, [r7, #32]
		data_raw.Gyro_z = Gyro_z;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <process_MPU+0x388>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
		data_raw.Acc_x = Acc_x;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <process_MPU+0x38c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
		data_raw.Acc_y = Acc_y;
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <process_MPU+0x390>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		data_raw.Acc_z = Acc_z;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <process_MPU+0x394>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
    }

    return data_raw;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	461d      	mov	r5, r3
 80019fc:	f107 041c 	add.w	r4, r7, #28
 8001a00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a08:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	3738      	adds	r7, #56	; 0x38
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bdb0      	pop	{r4, r5, r7, pc}
 8001a14:	f3af 8000 	nop.w
 8001a18:	66666666 	.word	0x66666666
 8001a1c:	40306666 	.word	0x40306666
 8001a20:	200000fc 	.word	0x200000fc
 8001a24:	20000504 	.word	0x20000504
 8001a28:	20000224 	.word	0x20000224
 8001a2c:	20000274 	.word	0x20000274
 8001a30:	20000194 	.word	0x20000194
 8001a34:	2000009c 	.word	0x2000009c

08001a38 <calibration_IMU>:
		angle_e.roll = r*RAD2DEC;
		angle_e.pitch = p*RAD2DEC;
		angle_e.yaw = y*RAD2DEC;
		return angle_e;
}
IMU_calib_data calibration_IMU(){
 8001a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3a:	b099      	sub	sp, #100	; 0x64
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	6078      	str	r0, [r7, #4]
	    IMU_calib_data data_;
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
//	    print_msg("Calibrating the sensor....\n");
		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 8001a40:	233b      	movs	r3, #59	; 0x3b
 8001a42:	73fb      	strb	r3, [r7, #15]
		uint8_t device_address = MPU_ADDRESS;
 8001a44:	23d0      	movs	r3, #208	; 0xd0
 8001a46:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        for(int i = 0; i<200; i++){
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	657b      	str	r3, [r7, #84]	; 0x54
 8001a4e:	e130      	b.n	8001cb2 <calibration_IMU+0x27a>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8001a50:	bf00      	nop
 8001a52:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a56:	b299      	uxth	r1, r3
 8001a58:	f107 020f 	add.w	r2, r7, #15
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2301      	movs	r3, #1
 8001a64:	48ac      	ldr	r0, [pc, #688]	; (8001d18 <calibration_IMU+0x2e0>)
 8001a66:	f001 fdef 	bl	8003648 <HAL_I2C_Master_Transmit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <calibration_IMU+0x1a>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8001a70:	bf00      	nop
 8001a72:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001a76:	b299      	uxth	r1, r3
 8001a78:	f107 0210 	add.w	r2, r7, #16
 8001a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	230e      	movs	r3, #14
 8001a84:	48a4      	ldr	r0, [pc, #656]	; (8001d18 <calibration_IMU+0x2e0>)
 8001a86:	f001 fedd 	bl	8003844 <HAL_I2C_Master_Receive>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1f0      	bne.n	8001a72 <calibration_IMU+0x3a>

		Acc_x = (int16_t)(data[0] << 8 | data[1])/accel_factor;
 8001a90:	7c3b      	ldrb	r3, [r7, #16]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	7c7b      	ldrb	r3, [r7, #17]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fca8 	bl	80003f4 <__aeabi_i2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b9c      	ldr	r3, [pc, #624]	; (8001d1c <calibration_IMU+0x2e4>)
 8001aaa:	f7fe fe37 	bl	800071c <__aeabi_ddiv>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	460c      	mov	r4, r1
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	f7fe ffb7 	bl	8000a28 <__aeabi_d2f>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b98      	ldr	r3, [pc, #608]	; (8001d20 <calibration_IMU+0x2e8>)
 8001abe:	601a      	str	r2, [r3, #0]
		Acc_y = (int16_t)(data[2] << 8 | data[3])/accel_factor;
 8001ac0:	7cbb      	ldrb	r3, [r7, #18]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	7cfb      	ldrb	r3, [r7, #19]
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b21b      	sxth	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fc90 	bl	80003f4 <__aeabi_i2d>
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b90      	ldr	r3, [pc, #576]	; (8001d1c <calibration_IMU+0x2e4>)
 8001ada:	f7fe fe1f 	bl	800071c <__aeabi_ddiv>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	f7fe ff9f 	bl	8000a28 <__aeabi_d2f>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b8d      	ldr	r3, [pc, #564]	; (8001d24 <calibration_IMU+0x2ec>)
 8001aee:	601a      	str	r2, [r3, #0]
		Acc_z = (int16_t)(data[4] << 8 | data[5])/accel_factor;
 8001af0:	7d3b      	ldrb	r3, [r7, #20]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	b21a      	sxth	r2, r3
 8001af6:	7d7b      	ldrb	r3, [r7, #21]
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fc78 	bl	80003f4 <__aeabi_i2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b84      	ldr	r3, [pc, #528]	; (8001d1c <calibration_IMU+0x2e4>)
 8001b0a:	f7fe fe07 	bl	800071c <__aeabi_ddiv>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	460c      	mov	r4, r1
 8001b12:	4618      	mov	r0, r3
 8001b14:	4621      	mov	r1, r4
 8001b16:	f7fe ff87 	bl	8000a28 <__aeabi_d2f>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b82      	ldr	r3, [pc, #520]	; (8001d28 <calibration_IMU+0x2f0>)
 8001b1e:	601a      	str	r2, [r3, #0]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 8001b20:	7dbb      	ldrb	r3, [r7, #22]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f884 	bl	8000c3c <__aeabi_i2f>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <calibration_IMU+0x2f4>)
 8001b38:	601a      	str	r2, [r3, #0]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9])/gyro_factor;
 8001b3a:	7e3b      	ldrb	r3, [r7, #24]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	7e7b      	ldrb	r3, [r7, #25]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	4313      	orrs	r3, r2
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fc53 	bl	80003f4 <__aeabi_i2d>
 8001b4e:	a370      	add	r3, pc, #448	; (adr r3, 8001d10 <calibration_IMU+0x2d8>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fde2 	bl	800071c <__aeabi_ddiv>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	4621      	mov	r1, r4
 8001b60:	f7fe ff62 	bl	8000a28 <__aeabi_d2f>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <calibration_IMU+0x2f8>)
 8001b68:	601a      	str	r2, [r3, #0]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11])/gyro_factor;
 8001b6a:	7ebb      	ldrb	r3, [r7, #26]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7efb      	ldrb	r3, [r7, #27]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fc3b 	bl	80003f4 <__aeabi_i2d>
 8001b7e:	a364      	add	r3, pc, #400	; (adr r3, 8001d10 <calibration_IMU+0x2d8>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fdca 	bl	800071c <__aeabi_ddiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4621      	mov	r1, r4
 8001b90:	f7fe ff4a 	bl	8000a28 <__aeabi_d2f>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <calibration_IMU+0x2fc>)
 8001b98:	601a      	str	r2, [r3, #0]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13])/gyro_factor;
 8001b9a:	7f3b      	ldrb	r3, [r7, #28]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	7f7b      	ldrb	r3, [r7, #29]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fc23 	bl	80003f4 <__aeabi_i2d>
 8001bae:	a358      	add	r3, pc, #352	; (adr r3, 8001d10 <calibration_IMU+0x2d8>)
 8001bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb4:	f7fe fdb2 	bl	800071c <__aeabi_ddiv>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	f7fe ff32 	bl	8000a28 <__aeabi_d2f>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b5c      	ldr	r3, [pc, #368]	; (8001d38 <calibration_IMU+0x300>)
 8001bc8:	601a      	str	r2, [r3, #0]

	    bAx += Acc_x;
 8001bca:	4b55      	ldr	r3, [pc, #340]	; (8001d20 <calibration_IMU+0x2e8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc22 	bl	8000418 <__aeabi_f2d>
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <calibration_IMU+0x304>)
 8001bd6:	cb18      	ldmia	r3, {r3, r4}
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	f7fe fabe 	bl	800015c <__adddf3>
 8001be0:	4603      	mov	r3, r0
 8001be2:	460c      	mov	r4, r1
 8001be4:	4a55      	ldr	r2, [pc, #340]	; (8001d3c <calibration_IMU+0x304>)
 8001be6:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 8001bea:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <calibration_IMU+0x2ec>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc12 	bl	8000418 <__aeabi_f2d>
 8001bf4:	4b52      	ldr	r3, [pc, #328]	; (8001d40 <calibration_IMU+0x308>)
 8001bf6:	cb18      	ldmia	r3, {r3, r4}
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4623      	mov	r3, r4
 8001bfc:	f7fe faae 	bl	800015c <__adddf3>
 8001c00:	4603      	mov	r3, r0
 8001c02:	460c      	mov	r4, r1
 8001c04:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <calibration_IMU+0x308>)
 8001c06:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <calibration_IMU+0x2f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc02 	bl	8000418 <__aeabi_f2d>
 8001c14:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <calibration_IMU+0x30c>)
 8001c16:	cb18      	ldmia	r3, {r3, r4}
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	f7fe fa9e 	bl	800015c <__adddf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	460c      	mov	r4, r1
 8001c24:	4a47      	ldr	r2, [pc, #284]	; (8001d44 <calibration_IMU+0x30c>)
 8001c26:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 8001c2a:	4b41      	ldr	r3, [pc, #260]	; (8001d30 <calibration_IMU+0x2f8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fbf2 	bl	8000418 <__aeabi_f2d>
 8001c34:	4b44      	ldr	r3, [pc, #272]	; (8001d48 <calibration_IMU+0x310>)
 8001c36:	cb18      	ldmia	r3, {r3, r4}
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4623      	mov	r3, r4
 8001c3c:	f7fe fa8e 	bl	800015c <__adddf3>
 8001c40:	4603      	mov	r3, r0
 8001c42:	460c      	mov	r4, r1
 8001c44:	4a40      	ldr	r2, [pc, #256]	; (8001d48 <calibration_IMU+0x310>)
 8001c46:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <calibration_IMU+0x2fc>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fbe2 	bl	8000418 <__aeabi_f2d>
 8001c54:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <calibration_IMU+0x314>)
 8001c56:	cb18      	ldmia	r3, {r3, r4}
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	f7fe fa7e 	bl	800015c <__adddf3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <calibration_IMU+0x314>)
 8001c66:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 8001c6a:	4b33      	ldr	r3, [pc, #204]	; (8001d38 <calibration_IMU+0x300>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fbd2 	bl	8000418 <__aeabi_f2d>
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <calibration_IMU+0x318>)
 8001c76:	cb18      	ldmia	r3, {r3, r4}
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4623      	mov	r3, r4
 8001c7c:	f7fe fa6e 	bl	800015c <__adddf3>
 8001c80:	4603      	mov	r3, r0
 8001c82:	460c      	mov	r4, r1
 8001c84:	4a32      	ldr	r2, [pc, #200]	; (8001d50 <calibration_IMU+0x318>)
 8001c86:	e9c2 3400 	strd	r3, r4, [r2]
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4831      	ldr	r0, [pc, #196]	; (8001d54 <calibration_IMU+0x31c>)
 8001c90:	f001 fb89 	bl	80033a6 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c98:	482e      	ldr	r0, [pc, #184]	; (8001d54 <calibration_IMU+0x31c>)
 8001c9a:	f001 fb84 	bl	80033a6 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001c9e:	2104      	movs	r1, #4
 8001ca0:	482c      	ldr	r0, [pc, #176]	; (8001d54 <calibration_IMU+0x31c>)
 8001ca2:	f001 fb80 	bl	80033a6 <HAL_GPIO_TogglePin>
	    HAL_Delay(30);
 8001ca6:	201e      	movs	r0, #30
 8001ca8:	f001 f8c4 	bl	8002e34 <HAL_Delay>
        for(int i = 0; i<200; i++){
 8001cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cae:	3301      	adds	r3, #1
 8001cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8001cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb4:	2bc7      	cmp	r3, #199	; 0xc7
 8001cb6:	f77f aecb 	ble.w	8001a50 <calibration_IMU+0x18>
        }

     bAx /= 200;
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <calibration_IMU+0x304>)
 8001cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <calibration_IMU+0x320>)
 8001cc6:	f7fe fd29 	bl	800071c <__aeabi_ddiv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460c      	mov	r4, r1
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <calibration_IMU+0x304>)
 8001cd0:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 200;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <calibration_IMU+0x308>)
 8001cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <calibration_IMU+0x320>)
 8001ce0:	f7fe fd1c 	bl	800071c <__aeabi_ddiv>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <calibration_IMU+0x308>)
 8001cea:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 200;
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <calibration_IMU+0x30c>)
 8001cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf4:	f04f 0200 	mov.w	r2, #0
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <calibration_IMU+0x320>)
 8001cfa:	f7fe fd0f 	bl	800071c <__aeabi_ddiv>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460c      	mov	r4, r1
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <calibration_IMU+0x30c>)
 8001d04:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <calibration_IMU+0x304>)
 8001d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d0e:	e025      	b.n	8001d5c <calibration_IMU+0x324>
 8001d10:	66666666 	.word	0x66666666
 8001d14:	40306666 	.word	0x40306666
 8001d18:	20000110 	.word	0x20000110
 8001d1c:	40d00000 	.word	0x40d00000
 8001d20:	20000274 	.word	0x20000274
 8001d24:	20000194 	.word	0x20000194
 8001d28:	2000009c 	.word	0x2000009c
 8001d2c:	200001b8 	.word	0x200001b8
 8001d30:	200000fc 	.word	0x200000fc
 8001d34:	20000504 	.word	0x20000504
 8001d38:	20000224 	.word	0x20000224
 8001d3c:	200004a8 	.word	0x200004a8
 8001d40:	20000278 	.word	0x20000278
 8001d44:	20000518 	.word	0x20000518
 8001d48:	200002e8 	.word	0x200002e8
 8001d4c:	20000168 	.word	0x20000168
 8001d50:	20000520 	.word	0x20000520
 8001d54:	40010c00 	.word	0x40010c00
 8001d58:	40690000 	.word	0x40690000
 8001d5c:	4b78      	ldr	r3, [pc, #480]	; (8001f40 <calibration_IMU+0x508>)
 8001d5e:	cb18      	ldmia	r3, {r3, r4}
 8001d60:	461a      	mov	r2, r3
 8001d62:	4623      	mov	r3, r4
 8001d64:	f7fe fbb0 	bl	80004c8 <__aeabi_dmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	461d      	mov	r5, r3
 8001d6e:	4626      	mov	r6, r4
 8001d70:	4b74      	ldr	r3, [pc, #464]	; (8001f44 <calibration_IMU+0x50c>)
 8001d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <calibration_IMU+0x50c>)
 8001d78:	cb18      	ldmia	r3, {r3, r4}
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	f7fe fba3 	bl	80004c8 <__aeabi_dmul>
 8001d82:	4603      	mov	r3, r0
 8001d84:	460c      	mov	r4, r1
 8001d86:	461a      	mov	r2, r3
 8001d88:	4623      	mov	r3, r4
 8001d8a:	4628      	mov	r0, r5
 8001d8c:	4631      	mov	r1, r6
 8001d8e:	f7fe f9e5 	bl	800015c <__adddf3>
 8001d92:	4603      	mov	r3, r0
 8001d94:	460c      	mov	r4, r1
 8001d96:	461d      	mov	r5, r3
 8001d98:	4626      	mov	r6, r4
 8001d9a:	4b6b      	ldr	r3, [pc, #428]	; (8001f48 <calibration_IMU+0x510>)
 8001d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da0:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <calibration_IMU+0x510>)
 8001da2:	cb18      	ldmia	r3, {r3, r4}
 8001da4:	461a      	mov	r2, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	f7fe fb8e 	bl	80004c8 <__aeabi_dmul>
 8001dac:	4603      	mov	r3, r0
 8001dae:	460c      	mov	r4, r1
 8001db0:	461a      	mov	r2, r3
 8001db2:	4623      	mov	r3, r4
 8001db4:	4628      	mov	r0, r5
 8001db6:	4631      	mov	r1, r6
 8001db8:	f7fe f9d0 	bl	800015c <__adddf3>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	f004 f948 	bl	8006058 <sqrt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4a5f      	ldr	r2, [pc, #380]	; (8001f4c <calibration_IMU+0x514>)
 8001dce:	e9c2 3400 	strd	r3, r4, [r2]
     bAz = 1 - bAz;
 8001dd2:	4b5d      	ldr	r3, [pc, #372]	; (8001f48 <calibration_IMU+0x510>)
 8001dd4:	cb18      	ldmia	r3, {r3, r4}
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4623      	mov	r3, r4
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	495c      	ldr	r1, [pc, #368]	; (8001f50 <calibration_IMU+0x518>)
 8001de0:	f7fe f9ba 	bl	8000158 <__aeabi_dsub>
 8001de4:	4603      	mov	r3, r0
 8001de6:	460c      	mov	r4, r1
 8001de8:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <calibration_IMU+0x510>)
 8001dea:	e9c2 3400 	strd	r3, r4, [r2]
     bGx /= 200;
 8001dee:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <calibration_IMU+0x51c>)
 8001df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <calibration_IMU+0x520>)
 8001dfa:	f7fe fc8f 	bl	800071c <__aeabi_ddiv>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	4a54      	ldr	r2, [pc, #336]	; (8001f54 <calibration_IMU+0x51c>)
 8001e04:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 200;
 8001e08:	4b54      	ldr	r3, [pc, #336]	; (8001f5c <calibration_IMU+0x524>)
 8001e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <calibration_IMU+0x520>)
 8001e14:	f7fe fc82 	bl	800071c <__aeabi_ddiv>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	4a4f      	ldr	r2, [pc, #316]	; (8001f5c <calibration_IMU+0x524>)
 8001e1e:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 200;
 8001e22:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <calibration_IMU+0x528>)
 8001e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <calibration_IMU+0x520>)
 8001e2e:	f7fe fc75 	bl	800071c <__aeabi_ddiv>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4a4a      	ldr	r2, [pc, #296]	; (8001f60 <calibration_IMU+0x528>)
 8001e38:	e9c2 3400 	strd	r3, r4, [r2]

     data_.bAx = bAx;
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <calibration_IMU+0x508>)
 8001e3e:	cb18      	ldmia	r3, {r3, r4}
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	f7fe fdf0 	bl	8000a28 <__aeabi_d2f>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
     data_.bAy = bAy;
 8001e4c:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <calibration_IMU+0x50c>)
 8001e4e:	cb18      	ldmia	r3, {r3, r4}
 8001e50:	4618      	mov	r0, r3
 8001e52:	4621      	mov	r1, r4
 8001e54:	f7fe fde8 	bl	8000a28 <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
     data_.bAz = bAz;
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <calibration_IMU+0x510>)
 8001e5e:	cb18      	ldmia	r3, {r3, r4}
 8001e60:	4618      	mov	r0, r3
 8001e62:	4621      	mov	r1, r4
 8001e64:	f7fe fde0 	bl	8000a28 <__aeabi_d2f>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34

     data_.bGx = bGx;
 8001e6c:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <calibration_IMU+0x51c>)
 8001e6e:	cb18      	ldmia	r3, {r3, r4}
 8001e70:	4618      	mov	r0, r3
 8001e72:	4621      	mov	r1, r4
 8001e74:	f7fe fdd8 	bl	8000a28 <__aeabi_d2f>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	623b      	str	r3, [r7, #32]
     data_.bGy = bGy;
 8001e7c:	4b37      	ldr	r3, [pc, #220]	; (8001f5c <calibration_IMU+0x524>)
 8001e7e:	cb18      	ldmia	r3, {r3, r4}
 8001e80:	4618      	mov	r0, r3
 8001e82:	4621      	mov	r1, r4
 8001e84:	f7fe fdd0 	bl	8000a28 <__aeabi_d2f>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
     data_.bGz = bGz;
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <calibration_IMU+0x528>)
 8001e8e:	cb18      	ldmia	r3, {r3, r4}
 8001e90:	4618      	mov	r0, r3
 8001e92:	4621      	mov	r1, r4
 8001e94:	f7fe fdc8 	bl	8000a28 <__aeabi_d2f>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28

     data_.data[0] = bAx;
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <calibration_IMU+0x508>)
 8001e9e:	cb18      	ldmia	r3, {r3, r4}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	f7fe fdc0 	bl	8000a28 <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	63bb      	str	r3, [r7, #56]	; 0x38
     data_.data[1] = bAy;
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <calibration_IMU+0x50c>)
 8001eae:	cb18      	ldmia	r3, {r3, r4}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	f7fe fdb8 	bl	8000a28 <__aeabi_d2f>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
     data_.data[2] = bAz;
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <calibration_IMU+0x510>)
 8001ebe:	cb18      	ldmia	r3, {r3, r4}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	f7fe fdb0 	bl	8000a28 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	643b      	str	r3, [r7, #64]	; 0x40

     data_.data[3] = bGx;
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <calibration_IMU+0x51c>)
 8001ece:	cb18      	ldmia	r3, {r3, r4}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	f7fe fda8 	bl	8000a28 <__aeabi_d2f>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	647b      	str	r3, [r7, #68]	; 0x44
     data_.data[4] = bGy;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <calibration_IMU+0x524>)
 8001ede:	cb18      	ldmia	r3, {r3, r4}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	f7fe fda0 	bl	8000a28 <__aeabi_d2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
     data_.data[5] = bGz;
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <calibration_IMU+0x528>)
 8001eee:	cb18      	ldmia	r3, {r3, r4}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	f7fe fd98 	bl	8000a28 <__aeabi_d2f>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f02:	4818      	ldr	r0, [pc, #96]	; (8001f64 <calibration_IMU+0x52c>)
 8001f04:	f001 fa37 	bl	8003376 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0e:	4815      	ldr	r0, [pc, #84]	; (8001f64 <calibration_IMU+0x52c>)
 8001f10:	f001 fa31 	bl	8003376 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2104      	movs	r1, #4
 8001f18:	4812      	ldr	r0, [pc, #72]	; (8001f64 <calibration_IMU+0x52c>)
 8001f1a:	f001 fa2c 	bl	8003376 <HAL_GPIO_WritePin>
	 return data_;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	461d      	mov	r5, r3
 8001f22:	f107 0420 	add.w	r4, r7, #32
 8001f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	375c      	adds	r7, #92	; 0x5c
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200004a8 	.word	0x200004a8
 8001f44:	20000278 	.word	0x20000278
 8001f48:	20000518 	.word	0x20000518
 8001f4c:	20000188 	.word	0x20000188
 8001f50:	3ff00000 	.word	0x3ff00000
 8001f54:	200002e8 	.word	0x200002e8
 8001f58:	40690000 	.word	0x40690000
 8001f5c:	20000168 	.word	0x20000168
 8001f60:	20000520 	.word	0x20000520
 8001f64:	40010c00 	.word	0x40010c00

08001f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	; 0x30
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6e:	f000 feff 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f72:	f000 f8db 	bl	800212c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f76:	f000 fad1 	bl	800251c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001f7a:	f000 faa5 	bl	80024c8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001f7e:	f000 f91b 	bl	80021b8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001f82:	f000 f997 	bl	80022b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f86:	f000 f9ed 	bl	8002364 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001f8a:	f000 f943 	bl	8002214 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001f8e:	f000 fa4d 	bl	800242c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  init_MPU();
 8001f92:	f7ff f967 	bl	8001264 <init_MPU>

//  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f9c:	485b      	ldr	r0, [pc, #364]	; (800210c <main+0x1a4>)
 8001f9e:	f001 f9ea 	bl	8003376 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	4859      	ldr	r0, [pc, #356]	; (800210c <main+0x1a4>)
 8001fa8:	f001 f9e5 	bl	8003376 <HAL_GPIO_WritePin>
//
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8001fac:	210c      	movs	r1, #12
 8001fae:	4858      	ldr	r0, [pc, #352]	; (8002110 <main+0x1a8>)
 8001fb0:	f002 ff92 	bl	8004ed8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001fb4:	2108      	movs	r1, #8
 8001fb6:	4857      	ldr	r0, [pc, #348]	; (8002114 <main+0x1ac>)
 8001fb8:	f002 ff8e 	bl	8004ed8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4855      	ldr	r0, [pc, #340]	; (8002114 <main+0x1ac>)
 8001fc0:	f002 ff8a 	bl	8004ed8 <HAL_TIM_PWM_Start>
//
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1000);
//  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
  calibration_IMU();
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fd36 	bl	8001a38 <calibration_IMU>
  HAL_TIM_Base_Start_IT(&htim1);
 8001fcc:	4852      	ldr	r0, [pc, #328]	; (8002118 <main+0x1b0>)
 8001fce:	f002 ff34 	bl	8004e3a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001fd2:	4852      	ldr	r0, [pc, #328]	; (800211c <main+0x1b4>)
 8001fd4:	f002 ff31 	bl	8004e3a <HAL_TIM_Base_Start_IT>
//		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,1000);
//		  __HAL_TIM_SET_AUTORELOAD(&htim2,2000);
//
//		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,1000);
//		  __HAL_TIM_SET_AUTORELOAD(&htim3,2000);
	  if(com_angle_pitch < 0){
 8001fd8:	4b51      	ldr	r3, [pc, #324]	; (8002120 <main+0x1b8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f04f 0100 	mov.w	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f81d 	bl	8001020 <__aeabi_fcmplt>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d046      	beq.n	800207a <main+0x112>

		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	484c      	ldr	r0, [pc, #304]	; (8002124 <main+0x1bc>)
 8001ff2:	f001 f9c0 	bl	8003376 <HAL_GPIO_WritePin>
		 		 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ffc:	4843      	ldr	r0, [pc, #268]	; (800210c <main+0x1a4>)
 8001ffe:	f001 f9ba 	bl	8003376 <HAL_GPIO_WritePin>
		 		 		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8002002:	2200      	movs	r2, #0
 8002004:	2102      	movs	r1, #2
 8002006:	4841      	ldr	r0, [pc, #260]	; (800210c <main+0x1a4>)
 8002008:	f001 f9b5 	bl	8003376 <HAL_GPIO_WritePin>



		  P_part = 0x7FFF + (uint16_t) com_angle_pitch * 1000;
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <main+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f82d 	bl	8001070 <__aeabi_f2uiz>
 8002016:	4603      	mov	r3, r0
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	0152      	lsls	r2, r2, #5
 800201e:	1ad2      	subs	r2, r2, r3
 8002020:	0092      	lsls	r2, r2, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	b29b      	uxth	r3, r3
 8002028:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800202c:	337f      	adds	r3, #127	; 0x7f
 800202e:	b29a      	uxth	r2, r3
 8002030:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <main+0x1c0>)
 8002032:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, P_part);
 8002034:	4b3c      	ldr	r3, [pc, #240]	; (8002128 <main+0x1c0>)
 8002036:	881a      	ldrh	r2, [r3, #0]
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <main+0x1a8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_AUTORELOAD(&htim2,2*P_part);
 800203e:	4b3a      	ldr	r3, [pc, #232]	; (8002128 <main+0x1c0>)
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	005a      	lsls	r2, r3, #1
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <main+0x1a8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <main+0x1c0>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	461a      	mov	r2, r3
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <main+0x1a8>)
 8002054:	60da      	str	r2, [r3, #12]

		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, P_part);
 8002056:	4b34      	ldr	r3, [pc, #208]	; (8002128 <main+0x1c0>)
 8002058:	881a      	ldrh	r2, [r3, #0]
 800205a:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <main+0x1ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_AUTORELOAD(&htim3,2*P_part);
 8002060:	4b31      	ldr	r3, [pc, #196]	; (8002128 <main+0x1c0>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	005a      	lsls	r2, r3, #1
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <main+0x1ac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <main+0x1c0>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	461a      	mov	r2, r3
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <main+0x1ac>)
 8002076:	60da      	str	r2, [r3, #12]
 8002078:	e7ae      	b.n	8001fd8 <main+0x70>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	4829      	ldr	r0, [pc, #164]	; (8002124 <main+0x1bc>)
 8002080:	f001 f979 	bl	8003376 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208a:	4820      	ldr	r0, [pc, #128]	; (800210c <main+0x1a4>)
 800208c:	f001 f973 	bl	8003376 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8002090:	2201      	movs	r2, #1
 8002092:	2102      	movs	r1, #2
 8002094:	481d      	ldr	r0, [pc, #116]	; (800210c <main+0x1a4>)
 8002096:	f001 f96e 	bl	8003376 <HAL_GPIO_WritePin>

		 P_part = 0x7FFF - (uint16_t) com_angle_pitch * 1000;
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <main+0x1b8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe ffe6 	bl	8001070 <__aeabi_f2uiz>
 80020a4:	4603      	mov	r3, r0
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	0192      	lsls	r2, r2, #6
 80020ac:	1ad2      	subs	r2, r2, r3
 80020ae:	0192      	lsls	r2, r2, #6
 80020b0:	441a      	add	r2, r3
 80020b2:	0052      	lsls	r2, r2, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80020be:	337f      	adds	r3, #127	; 0x7f
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <main+0x1c0>)
 80020c4:	801a      	strh	r2, [r3, #0]
		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, P_part);
 80020c6:	4b18      	ldr	r3, [pc, #96]	; (8002128 <main+0x1c0>)
 80020c8:	881a      	ldrh	r2, [r3, #0]
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <main+0x1a8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
		 __HAL_TIM_SET_AUTORELOAD(&htim2,2*P_part);
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <main+0x1c0>)
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	005a      	lsls	r2, r3, #1
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <main+0x1a8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <main+0x1c0>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <main+0x1a8>)
 80020e6:	60da      	str	r2, [r3, #12]

		 __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, P_part);
 80020e8:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <main+0x1c0>)
 80020ea:	881a      	ldrh	r2, [r3, #0]
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <main+0x1ac>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SET_AUTORELOAD(&htim3,2*P_part);
 80020f2:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <main+0x1c0>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	005a      	lsls	r2, r3, #1
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <main+0x1ac>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <main+0x1c0>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	461a      	mov	r2, r3
 8002106:	4b03      	ldr	r3, [pc, #12]	; (8002114 <main+0x1ac>)
 8002108:	60da      	str	r2, [r3, #12]
	  if(com_angle_pitch < 0){
 800210a:	e765      	b.n	8001fd8 <main+0x70>
 800210c:	40010c00 	.word	0x40010c00
 8002110:	200004b8 	.word	0x200004b8
 8002114:	200001bc 	.word	0x200001bc
 8002118:	200002a8 	.word	0x200002a8
 800211c:	200000b0 	.word	0x200000b0
 8002120:	20000200 	.word	0x20000200
 8002124:	40010800 	.word	0x40010800
 8002128:	200004b0 	.word	0x200004b0

0800212c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b090      	sub	sp, #64	; 0x40
 8002130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002132:	f107 0318 	add.w	r3, r7, #24
 8002136:	2228      	movs	r2, #40	; 0x28
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f003 fdf4 	bl	8005d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
 800214c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800215c:	2301      	movs	r3, #1
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002160:	2302      	movs	r3, #2
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800216a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	4618      	mov	r0, r3
 8002176:	f002 fa19 	bl	80045ac <HAL_RCC_OscConfig>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002180:	f000 fb98 	bl	80028b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002184:	230f      	movs	r3, #15
 8002186:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002188:	2302      	movs	r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2102      	movs	r1, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 fc84 	bl	8004aac <HAL_RCC_ClockConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80021aa:	f000 fb83 	bl	80028b4 <Error_Handler>
  }
}
 80021ae:	bf00      	nop
 80021b0:	3740      	adds	r7, #64	; 0x40
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MX_I2C1_Init+0x50>)
 80021be:	4a13      	ldr	r2, [pc, #76]	; (800220c <MX_I2C1_Init+0x54>)
 80021c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_I2C1_Init+0x50>)
 80021c4:	4a12      	ldr	r2, [pc, #72]	; (8002210 <MX_I2C1_Init+0x58>)
 80021c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_I2C1_Init+0x50>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_I2C1_Init+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_I2C1_Init+0x50>)
 80021d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <MX_I2C1_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_I2C1_Init+0x50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <MX_I2C1_Init+0x50>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_I2C1_Init+0x50>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	; (8002208 <MX_I2C1_Init+0x50>)
 80021f6:	f001 f8ef 	bl	80033d8 <HAL_I2C_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002200:	f000 fb58 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000110 	.word	0x20000110
 800220c:	40005400 	.word	0x40005400
 8002210:	00061a80 	.word	0x00061a80

08002214 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <MX_TIM1_Init+0x98>)
 8002232:	4a1f      	ldr	r2, [pc, #124]	; (80022b0 <MX_TIM1_Init+0x9c>)
 8002234:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_TIM1_Init+0x98>)
 8002238:	2247      	movs	r2, #71	; 0x47
 800223a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_TIM1_Init+0x98>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_TIM1_Init+0x98>)
 8002244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002248:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_TIM1_Init+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <MX_TIM1_Init+0x98>)
 8002252:	2200      	movs	r2, #0
 8002254:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <MX_TIM1_Init+0x98>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800225c:	4813      	ldr	r0, [pc, #76]	; (80022ac <MX_TIM1_Init+0x98>)
 800225e:	f002 fdc1 	bl	8004de4 <HAL_TIM_Base_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002268:	f000 fb24 	bl	80028b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4619      	mov	r1, r3
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <MX_TIM1_Init+0x98>)
 800227a:	f003 f82d 	bl	80052d8 <HAL_TIM_ConfigClockSource>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002284:	f000 fb16 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002290:	463b      	mov	r3, r7
 8002292:	4619      	mov	r1, r3
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_TIM1_Init+0x98>)
 8002296:	f003 fb9f 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022a0:	f000 fb08 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200002a8 	.word	0x200002a8
 80022b0:	40012c00 	.word	0x40012c00

080022b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	; 0x28
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ba:	f107 0320 	add.w	r3, r7, #32
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	615a      	str	r2, [r3, #20]
 80022d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <MX_TIM2_Init+0xac>)
 80022d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <MX_TIM2_Init+0xac>)
 80022e0:	2208      	movs	r2, #8
 80022e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <MX_TIM2_Init+0xac>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <MX_TIM2_Init+0xac>)
 80022ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <MX_TIM2_Init+0xac>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <MX_TIM2_Init+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022fe:	4818      	ldr	r0, [pc, #96]	; (8002360 <MX_TIM2_Init+0xac>)
 8002300:	f002 fdbe 	bl	8004e80 <HAL_TIM_PWM_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800230a:	f000 fad3 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002316:	f107 0320 	add.w	r3, r7, #32
 800231a:	4619      	mov	r1, r3
 800231c:	4810      	ldr	r0, [pc, #64]	; (8002360 <MX_TIM2_Init+0xac>)
 800231e:	f003 fb5b 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002328:	f000 fac4 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800232c:	2360      	movs	r3, #96	; 0x60
 800232e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002334:	2300      	movs	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	220c      	movs	r2, #12
 8002340:	4619      	mov	r1, r3
 8002342:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM2_Init+0xac>)
 8002344:	f002 ff02 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800234e:	f000 fab1 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002352:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM2_Init+0xac>)
 8002354:	f000 fba8 	bl	8002aa8 <HAL_TIM_MspPostInit>

}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200004b8 	.word	0x200004b8

08002364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236a:	f107 0320 	add.w	r3, r7, #32
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	615a      	str	r2, [r3, #20]
 8002384:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <MX_TIM3_Init+0xc0>)
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <MX_TIM3_Init+0xc4>)
 800238a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800238c:	4b25      	ldr	r3, [pc, #148]	; (8002424 <MX_TIM3_Init+0xc0>)
 800238e:	2208      	movs	r2, #8
 8002390:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <MX_TIM3_Init+0xc0>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <MX_TIM3_Init+0xc0>)
 800239a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800239e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a0:	4b20      	ldr	r3, [pc, #128]	; (8002424 <MX_TIM3_Init+0xc0>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <MX_TIM3_Init+0xc0>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023ac:	481d      	ldr	r0, [pc, #116]	; (8002424 <MX_TIM3_Init+0xc0>)
 80023ae:	f002 fd67 	bl	8004e80 <HAL_TIM_PWM_Init>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80023b8:	f000 fa7c 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c4:	f107 0320 	add.w	r3, r7, #32
 80023c8:	4619      	mov	r1, r3
 80023ca:	4816      	ldr	r0, [pc, #88]	; (8002424 <MX_TIM3_Init+0xc0>)
 80023cc:	f003 fb04 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023d6:	f000 fa6d 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023da:	2360      	movs	r3, #96	; 0x60
 80023dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	4619      	mov	r1, r3
 80023f0:	480c      	ldr	r0, [pc, #48]	; (8002424 <MX_TIM3_Init+0xc0>)
 80023f2:	f002 feab 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023fc:	f000 fa5a 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	2208      	movs	r2, #8
 8002404:	4619      	mov	r1, r3
 8002406:	4807      	ldr	r0, [pc, #28]	; (8002424 <MX_TIM3_Init+0xc0>)
 8002408:	f002 fea0 	bl	800514c <HAL_TIM_PWM_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002412:	f000 fa4f 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002416:	4803      	ldr	r0, [pc, #12]	; (8002424 <MX_TIM3_Init+0xc0>)
 8002418:	f000 fb46 	bl	8002aa8 <HAL_TIM_MspPostInit>

}
 800241c:	bf00      	nop
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	200001bc 	.word	0x200001bc
 8002428:	40000400 	.word	0x40000400

0800242c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002432:	f107 0308 	add.w	r3, r7, #8
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002440:	463b      	mov	r3, r7
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <MX_TIM4_Init+0x94>)
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <MX_TIM4_Init+0x98>)
 800244c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800244e:	4b1c      	ldr	r3, [pc, #112]	; (80024c0 <MX_TIM4_Init+0x94>)
 8002450:	2247      	movs	r2, #71	; 0x47
 8002452:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <MX_TIM4_Init+0x94>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800245a:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <MX_TIM4_Init+0x94>)
 800245c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002460:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002462:	4b17      	ldr	r3, [pc, #92]	; (80024c0 <MX_TIM4_Init+0x94>)
 8002464:	2200      	movs	r2, #0
 8002466:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002468:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <MX_TIM4_Init+0x94>)
 800246a:	2200      	movs	r2, #0
 800246c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800246e:	4814      	ldr	r0, [pc, #80]	; (80024c0 <MX_TIM4_Init+0x94>)
 8002470:	f002 fcb8 	bl	8004de4 <HAL_TIM_Base_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800247a:	f000 fa1b 	bl	80028b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800247e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002482:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	4619      	mov	r1, r3
 800248a:	480d      	ldr	r0, [pc, #52]	; (80024c0 <MX_TIM4_Init+0x94>)
 800248c:	f002 ff24 	bl	80052d8 <HAL_TIM_ConfigClockSource>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002496:	f000 fa0d 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024a2:	463b      	mov	r3, r7
 80024a4:	4619      	mov	r1, r3
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <MX_TIM4_Init+0x94>)
 80024a8:	f003 fa96 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80024b2:	f000 f9ff 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200000b0 	.word	0x200000b0
 80024c4:	40000800 	.word	0x40000800

080024c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <MX_USART1_UART_Init+0x50>)
 80024d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024ee:	220c      	movs	r2, #12
 80024f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_USART1_UART_Init+0x4c>)
 8002500:	f003 fac0 	bl	8005a84 <HAL_UART_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800250a:	f000 f9d3 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000234 	.word	0x20000234
 8002518:	40013800 	.word	0x40013800

0800251c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002522:	f107 0310 	add.w	r3, r7, #16
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MX_GPIO_Init+0xb4>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <MX_GPIO_Init+0xb4>)
 8002536:	f043 0320 	orr.w	r3, r3, #32
 800253a:	6193      	str	r3, [r2, #24]
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <MX_GPIO_Init+0xb4>)
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <MX_GPIO_Init+0xb4>)
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <MX_GPIO_Init+0xb4>)
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	6193      	str	r3, [r2, #24]
 8002554:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <MX_GPIO_Init+0xb4>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <MX_GPIO_Init+0xb4>)
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	4a1a      	ldr	r2, [pc, #104]	; (80025d0 <MX_GPIO_Init+0xb4>)
 8002566:	f043 0308 	orr.w	r3, r3, #8
 800256a:	6193      	str	r3, [r2, #24]
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <MX_GPIO_Init+0xb4>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8002578:	2200      	movs	r2, #0
 800257a:	2180      	movs	r1, #128	; 0x80
 800257c:	4815      	ldr	r0, [pc, #84]	; (80025d4 <MX_GPIO_Init+0xb8>)
 800257e:	f000 fefa 	bl	8003376 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	f240 4102 	movw	r1, #1026	; 0x402
 8002588:	4813      	ldr	r0, [pc, #76]	; (80025d8 <MX_GPIO_Init+0xbc>)
 800258a:	f000 fef4 	bl	8003376 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	2301      	movs	r3, #1
 8002594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2302      	movs	r3, #2
 800259c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	4619      	mov	r1, r3
 80025a4:	480b      	ldr	r0, [pc, #44]	; (80025d4 <MX_GPIO_Init+0xb8>)
 80025a6:	f000 fd75 	bl	8003094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10;
 80025aa:	f240 4302 	movw	r3, #1026	; 0x402
 80025ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2302      	movs	r3, #2
 80025ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025bc:	f107 0310 	add.w	r3, r7, #16
 80025c0:	4619      	mov	r1, r3
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_GPIO_Init+0xbc>)
 80025c4:	f000 fd66 	bl	8003094 <HAL_GPIO_Init>

}
 80025c8:	bf00      	nop
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	00000000 	.word	0x00000000

080025e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	b089      	sub	sp, #36	; 0x24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	61f8      	str	r0, [r7, #28]
	if(htim->Instance == htim1.Instance){
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4baa      	ldr	r3, [pc, #680]	; (8002898 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	f040 813d 	bne.w	8002870 <HAL_TIM_PeriodElapsedCallback+0x290>
	  temp1 = process_MPU(0,0);
 80025f6:	4ca9      	ldr	r4, [pc, #676]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80025f8:	463b      	mov	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f84e 	bl	80016a0 <process_MPU>
 8002604:	4625      	mov	r5, r4
 8002606:	463c      	mov	r4, r7
 8002608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800260a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800260c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002610:	e885 0003 	stmia.w	r5, {r0, r1}
		  roll_acc = atan2(temp1.Acc_y,temp1.Acc_z)*RAD2DEC;
 8002614:	4ba1      	ldr	r3, [pc, #644]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd fefd 	bl	8000418 <__aeabi_f2d>
 800261e:	4604      	mov	r4, r0
 8002620:	460d      	mov	r5, r1
 8002622:	4b9e      	ldr	r3, [pc, #632]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd fef6 	bl	8000418 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f003 fd0e 	bl	8006054 <atan2>
 8002638:	a38f      	add	r3, pc, #572	; (adr r3, 8002878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd ff43 	bl	80004c8 <__aeabi_dmul>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	4618      	mov	r0, r3
 8002648:	4621      	mov	r1, r4
 800264a:	f7fe f9ed 	bl	8000a28 <__aeabi_d2f>
 800264e:	4602      	mov	r2, r0
 8002650:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002652:	601a      	str	r2, [r3, #0]
		  pitch_acc = atan(temp1.Acc_x/sqrt(temp1.Acc_y*temp1.Acc_y + temp1.Acc_z*temp1.Acc_z))*RAD2DEC;
 8002654:	4b91      	ldr	r3, [pc, #580]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fd fedd 	bl	8000418 <__aeabi_f2d>
 800265e:	4604      	mov	r4, r0
 8002660:	460d      	mov	r5, r1
 8002662:	4b8e      	ldr	r3, [pc, #568]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	4b8d      	ldr	r3, [pc, #564]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7fe fb39 	bl	8000ce4 <__aeabi_fmul>
 8002672:	4603      	mov	r3, r0
 8002674:	461e      	mov	r6, r3
 8002676:	4b89      	ldr	r3, [pc, #548]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	4b88      	ldr	r3, [pc, #544]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f7fe fb2f 	bl	8000ce4 <__aeabi_fmul>
 8002686:	4603      	mov	r3, r0
 8002688:	4619      	mov	r1, r3
 800268a:	4630      	mov	r0, r6
 800268c:	f7fe fa22 	bl	8000ad4 <__addsf3>
 8002690:	4603      	mov	r3, r0
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd fec0 	bl	8000418 <__aeabi_f2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f003 fcda 	bl	8006058 <sqrt>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4620      	mov	r0, r4
 80026aa:	4629      	mov	r1, r5
 80026ac:	f7fe f836 	bl	800071c <__aeabi_ddiv>
 80026b0:	4603      	mov	r3, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	4618      	mov	r0, r3
 80026b6:	4621      	mov	r1, r4
 80026b8:	f003 fb3e 	bl	8005d38 <atan>
 80026bc:	a36e      	add	r3, pc, #440	; (adr r3, 8002878 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd ff01 	bl	80004c8 <__aeabi_dmul>
 80026c6:	4603      	mov	r3, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	4618      	mov	r0, r3
 80026cc:	4621      	mov	r1, r4
 80026ce:	f7fe f9ab 	bl	8000a28 <__aeabi_d2f>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b73      	ldr	r3, [pc, #460]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80026d6:	601a      	str	r2, [r3, #0]
	      if(roll_acc > 0){
 80026d8:	4b71      	ldr	r3, [pc, #452]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fcbb 	bl	800105c <__aeabi_fcmpgt>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d042      	beq.n	8002772 <HAL_TIM_PeriodElapsedCallback+0x192>
		      com_angle_roll = 0.9*(com_angle_roll + 0.01*temp1.Gyro_x) + (1-0.9)*(180 - roll_acc);
 80026ec:	4b6e      	ldr	r3, [pc, #440]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd fe91 	bl	8000418 <__aeabi_f2d>
 80026f6:	4604      	mov	r4, r0
 80026f8:	460d      	mov	r5, r1
 80026fa:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd fe8a 	bl	8000418 <__aeabi_f2d>
 8002704:	a35e      	add	r3, pc, #376	; (adr r3, 8002880 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f7fd fedd 	bl	80004c8 <__aeabi_dmul>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd fd21 	bl	800015c <__adddf3>
 800271a:	4603      	mov	r3, r0
 800271c:	460c      	mov	r4, r1
 800271e:	4618      	mov	r0, r3
 8002720:	4621      	mov	r1, r4
 8002722:	a359      	add	r3, pc, #356	; (adr r3, 8002888 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fd fece 	bl	80004c8 <__aeabi_dmul>
 800272c:	4603      	mov	r3, r0
 800272e:	460c      	mov	r4, r1
 8002730:	4625      	mov	r5, r4
 8002732:	461c      	mov	r4, r3
 8002734:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	485c      	ldr	r0, [pc, #368]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800273c:	f7fe f9c8 	bl	8000ad0 <__aeabi_fsub>
 8002740:	4603      	mov	r3, r0
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd fe68 	bl	8000418 <__aeabi_f2d>
 8002748:	a351      	add	r3, pc, #324	; (adr r3, 8002890 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd febb 	bl	80004c8 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4620      	mov	r0, r4
 8002758:	4629      	mov	r1, r5
 800275a:	f7fd fcff 	bl	800015c <__adddf3>
 800275e:	4603      	mov	r3, r0
 8002760:	460c      	mov	r4, r1
 8002762:	4618      	mov	r0, r3
 8002764:	4621      	mov	r1, r4
 8002766:	f7fe f95f 	bl	8000a28 <__aeabi_d2f>
 800276a:	4602      	mov	r2, r0
 800276c:	4b4e      	ldr	r3, [pc, #312]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e041      	b.n	80027f6 <HAL_TIM_PeriodElapsedCallback+0x216>
	      }
	      else{
		      com_angle_roll = 0.9*(com_angle_roll + 0.01*temp1.Gyro_x) + (1-0.9)*(180 + roll_acc);
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fe4e 	bl	8000418 <__aeabi_f2d>
 800277c:	4604      	mov	r4, r0
 800277e:	460d      	mov	r5, r1
 8002780:	4b46      	ldr	r3, [pc, #280]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fe47 	bl	8000418 <__aeabi_f2d>
 800278a:	a33d      	add	r3, pc, #244	; (adr r3, 8002880 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fe9a 	bl	80004c8 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4620      	mov	r0, r4
 800279a:	4629      	mov	r1, r5
 800279c:	f7fd fcde 	bl	800015c <__adddf3>
 80027a0:	4603      	mov	r3, r0
 80027a2:	460c      	mov	r4, r1
 80027a4:	4618      	mov	r0, r3
 80027a6:	4621      	mov	r1, r4
 80027a8:	a337      	add	r3, pc, #220	; (adr r3, 8002888 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80027aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ae:	f7fd fe8b 	bl	80004c8 <__aeabi_dmul>
 80027b2:	4603      	mov	r3, r0
 80027b4:	460c      	mov	r4, r1
 80027b6:	4625      	mov	r5, r4
 80027b8:	461c      	mov	r4, r3
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	493b      	ldr	r1, [pc, #236]	; (80028ac <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe f987 	bl	8000ad4 <__addsf3>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fd fe25 	bl	8000418 <__aeabi_f2d>
 80027ce:	a330      	add	r3, pc, #192	; (adr r3, 8002890 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd fe78 	bl	80004c8 <__aeabi_dmul>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4620      	mov	r0, r4
 80027de:	4629      	mov	r1, r5
 80027e0:	f7fd fcbc 	bl	800015c <__adddf3>
 80027e4:	4603      	mov	r3, r0
 80027e6:	460c      	mov	r4, r1
 80027e8:	4618      	mov	r0, r3
 80027ea:	4621      	mov	r1, r4
 80027ec:	f7fe f91c 	bl	8000a28 <__aeabi_d2f>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80027f4:	601a      	str	r2, [r3, #0]
	      }
		  com_angle_pitch = 0.9*(com_angle_pitch + 0.01*temp1.Gyro_y) + (1-0.9)*pitch_acc;
 80027f6:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe0c 	bl	8000418 <__aeabi_f2d>
 8002800:	4604      	mov	r4, r0
 8002802:	460d      	mov	r5, r1
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe05 	bl	8000418 <__aeabi_f2d>
 800280e:	a31c      	add	r3, pc, #112	; (adr r3, 8002880 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd fe58 	bl	80004c8 <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4620      	mov	r0, r4
 800281e:	4629      	mov	r1, r5
 8002820:	f7fd fc9c 	bl	800015c <__adddf3>
 8002824:	4603      	mov	r3, r0
 8002826:	460c      	mov	r4, r1
 8002828:	4618      	mov	r0, r3
 800282a:	4621      	mov	r1, r4
 800282c:	a316      	add	r3, pc, #88	; (adr r3, 8002888 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd fe49 	bl	80004c8 <__aeabi_dmul>
 8002836:	4603      	mov	r3, r0
 8002838:	460c      	mov	r4, r1
 800283a:	4625      	mov	r5, r4
 800283c:	461c      	mov	r4, r3
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fde8 	bl	8000418 <__aeabi_f2d>
 8002848:	a311      	add	r3, pc, #68	; (adr r3, 8002890 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fe3b 	bl	80004c8 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fc7f 	bl	800015c <__adddf3>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	4618      	mov	r0, r3
 8002864:	4621      	mov	r1, r4
 8002866:	f7fe f8df 	bl	8000a28 <__aeabi_d2f>
 800286a:	4602      	mov	r2, r0
 800286c:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800286e:	601a      	str	r2, [r3, #0]
	}
}
 8002870:	bf00      	nop
 8002872:	3724      	adds	r7, #36	; 0x24
 8002874:	46bd      	mov	sp, r7
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002878:	1a5d2372 	.word	0x1a5d2372
 800287c:	404ca5dc 	.word	0x404ca5dc
 8002880:	47ae147b 	.word	0x47ae147b
 8002884:	3f847ae1 	.word	0x3f847ae1
 8002888:	cccccccd 	.word	0xcccccccd
 800288c:	3feccccc 	.word	0x3feccccc
 8002890:	99999998 	.word	0x99999998
 8002894:	3fb99999 	.word	0x3fb99999
 8002898:	200002a8 	.word	0x200002a8
 800289c:	20000208 	.word	0x20000208
 80028a0:	20000528 	.word	0x20000528
 80028a4:	2000052c 	.word	0x2000052c
 80028a8:	20000100 	.word	0x20000100
 80028ac:	43340000 	.word	0x43340000
 80028b0:	20000200 	.word	0x20000200

080028b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028b8:	bf00      	nop
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <HAL_MspInit+0x5c>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	4a14      	ldr	r2, [pc, #80]	; (800291c <HAL_MspInit+0x5c>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6193      	str	r3, [r2, #24]
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_MspInit+0x5c>)
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b0f      	ldr	r3, [pc, #60]	; (800291c <HAL_MspInit+0x5c>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <HAL_MspInit+0x5c>)
 80028e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_MspInit+0x5c>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_MspInit+0x60>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_MspInit+0x60>)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	40021000 	.word	0x40021000
 8002920:	40010000 	.word	0x40010000

08002924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292c:	f107 0314 	add.w	r3, r7, #20
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_I2C_MspInit+0x90>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d132      	bne.n	80029aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_I2C_MspInit+0x94>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_I2C_MspInit+0x94>)
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_I2C_MspInit+0x94>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800295c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002962:	2312      	movs	r3, #18
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002966:	2301      	movs	r3, #1
 8002968:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4812      	ldr	r0, [pc, #72]	; (80029bc <HAL_I2C_MspInit+0x98>)
 8002972:	f000 fb8f 	bl	8003094 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_I2C_MspInit+0x9c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	4a0c      	ldr	r2, [pc, #48]	; (80029c0 <HAL_I2C_MspInit+0x9c>)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_I2C_MspInit+0x94>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <HAL_I2C_MspInit+0x94>)
 8002998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800299c:	61d3      	str	r3, [r2, #28]
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_I2C_MspInit+0x94>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029aa:	bf00      	nop
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40005400 	.word	0x40005400
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010c00 	.word	0x40010c00
 80029c0:	40010000 	.word	0x40010000

080029c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_TIM_Base_MspInit+0x78>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d114      	bne.n	8002a00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_TIM_Base_MspInit+0x7c>)
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_TIM_Base_MspInit+0x7c>)
 80029dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e0:	6193      	str	r3, [r2, #24]
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <HAL_TIM_Base_MspInit+0x7c>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	2100      	movs	r1, #0
 80029f2:	2019      	movs	r0, #25
 80029f4:	f000 fb17 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80029f8:	2019      	movs	r0, #25
 80029fa:	f000 fb30 	bl	800305e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80029fe:	e018      	b.n	8002a32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	; (8002a44 <HAL_TIM_Base_MspInit+0x80>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d113      	bne.n	8002a32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_TIM_Base_MspInit+0x7c>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <HAL_TIM_Base_MspInit+0x7c>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_TIM_Base_MspInit+0x7c>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	201e      	movs	r0, #30
 8002a28:	f000 fafd 	bl	8003026 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a2c:	201e      	movs	r0, #30
 8002a2e:	f000 fb16 	bl	800305e <HAL_NVIC_EnableIRQ>
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40000800 	.word	0x40000800

08002a48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a5a:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x58>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4a10      	ldr	r2, [pc, #64]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x58>)
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	61d3      	str	r3, [r2, #28]
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x58>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a72:	e010      	b.n	8002a96 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x58>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x58>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	61d3      	str	r3, [r2, #28]
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x58>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	68bb      	ldr	r3, [r7, #8]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40000400 	.word	0x40000400

08002aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d12b      	bne.n	8002b20 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002ace:	f043 0308 	orr.w	r3, r3, #8
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	613b      	str	r3, [r7, #16]
 8002ade:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2302      	movs	r3, #2
 8002aec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4619      	mov	r1, r3
 8002af4:	4828      	ldr	r0, [pc, #160]	; (8002b98 <HAL_TIM_MspPostInit+0xf0>)
 8002af6:	f000 facd 	bl	8003094 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002afa:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_TIM_MspPostInit+0xf4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <HAL_TIM_MspPostInit+0xf4>)
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b1e:	e034      	b.n	8002b8a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1e      	ldr	r2, [pc, #120]	; (8002ba0 <HAL_TIM_MspPostInit+0xf8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d12f      	bne.n	8002b8a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	6193      	str	r3, [r2, #24]
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	6193      	str	r3, [r2, #24]
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_TIM_MspPostInit+0xec>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b5a:	2340      	movs	r3, #64	; 0x40
 8002b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b62:	2302      	movs	r3, #2
 8002b64:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <HAL_TIM_MspPostInit+0xfc>)
 8002b6e:	f000 fa91 	bl	8003094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f107 0314 	add.w	r3, r7, #20
 8002b82:	4619      	mov	r1, r3
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <HAL_TIM_MspPostInit+0xf0>)
 8002b86:	f000 fa85 	bl	8003094 <HAL_GPIO_Init>
}
 8002b8a:	bf00      	nop
 8002b8c:	3728      	adds	r7, #40	; 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010c00 	.word	0x40010c00
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40010800 	.word	0x40010800

08002ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	; (8002c34 <HAL_UART_MspInit+0x8c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d131      	bne.n	8002c2c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <HAL_UART_MspInit+0x90>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_UART_MspInit+0x90>)
 8002bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd2:	6193      	str	r3, [r2, #24]
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <HAL_UART_MspInit+0x90>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <HAL_UART_MspInit+0x90>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <HAL_UART_MspInit+0x90>)
 8002be6:	f043 0304 	orr.w	r3, r3, #4
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_UART_MspInit+0x90>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c06:	f107 0310 	add.w	r3, r7, #16
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480b      	ldr	r0, [pc, #44]	; (8002c3c <HAL_UART_MspInit+0x94>)
 8002c0e:	f000 fa41 	bl	8003094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	4619      	mov	r1, r3
 8002c26:	4805      	ldr	r0, [pc, #20]	; (8002c3c <HAL_UART_MspInit+0x94>)
 8002c28:	f000 fa34 	bl	8003094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c2c:	bf00      	nop
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40013800 	.word	0x40013800
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40010800 	.word	0x40010800

08002c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c50:	e7fe      	b.n	8002c50 <HardFault_Handler+0x4>

08002c52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c56:	e7fe      	b.n	8002c56 <MemManage_Handler+0x4>

08002c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <BusFault_Handler+0x4>

08002c5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c62:	e7fe      	b.n	8002c62 <UsageFault_Handler+0x4>

08002c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c8c:	f000 f8b6 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <TIM1_UP_IRQHandler+0x10>)
 8002c9a:	f002 f94f 	bl	8004f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200002a8 	.word	0x200002a8

08002ca8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <TIM4_IRQHandler+0x10>)
 8002cae:	f002 f945 	bl	8004f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200000b0 	.word	0x200000b0

08002cbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <SystemInit+0x5c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <SystemInit+0x5c>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <SystemInit+0x5c>)
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4911      	ldr	r1, [pc, #68]	; (8002d18 <SystemInit+0x5c>)
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <SystemInit+0x60>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <SystemInit+0x5c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <SystemInit+0x5c>)
 8002cde:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <SystemInit+0x5c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <SystemInit+0x5c>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <SystemInit+0x5c>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <SystemInit+0x5c>)
 8002cfa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002cfe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <SystemInit+0x5c>)
 8002d02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002d06:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <SystemInit+0x64>)
 8002d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d0e:	609a      	str	r2, [r3, #8]
#endif 
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	f8ff0000 	.word	0xf8ff0000
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002d24:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002d26:	e003      	b.n	8002d30 <LoopCopyDataInit>

08002d28 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d2a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d2c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d2e:	3104      	adds	r1, #4

08002d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d30:	480a      	ldr	r0, [pc, #40]	; (8002d5c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d34:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d36:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d38:	d3f6      	bcc.n	8002d28 <CopyDataInit>
  ldr r2, =_sbss
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d3c:	e002      	b.n	8002d44 <LoopFillZerobss>

08002d3e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d40:	f842 3b04 	str.w	r3, [r2], #4

08002d44 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d46:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d48:	d3f9      	bcc.n	8002d3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d4a:	f7ff ffb7 	bl	8002cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d4e:	f002 ffc7 	bl	8005ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d52:	f7ff f909 	bl	8001f68 <main>
  bx lr
 8002d56:	4770      	bx	lr
  ldr r3, =_sidata
 8002d58:	080064c8 	.word	0x080064c8
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d60:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002d64:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002d68:	2000054c 	.word	0x2000054c

08002d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <ADC1_2_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d74:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_Init+0x28>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <HAL_Init+0x28>)
 8002d7a:	f043 0310 	orr.w	r3, r3, #16
 8002d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d80:	2003      	movs	r0, #3
 8002d82:	f000 f945 	bl	8003010 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d86:	2000      	movs	r0, #0
 8002d88:	f000 f808 	bl	8002d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d8c:	f7ff fd98 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000

08002d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_InitTick+0x54>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <HAL_InitTick+0x58>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f95d 	bl	800307a <HAL_SYSTICK_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e00e      	b.n	8002de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d80a      	bhi.n	8002de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd8:	f000 f925 	bl	8003026 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ddc:	4a06      	ldr	r2, [pc, #24]	; (8002df8 <HAL_InitTick+0x5c>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000008 	.word	0x20000008
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_IncTick+0x1c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_IncTick+0x20>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	4a03      	ldr	r2, [pc, #12]	; (8002e1c <HAL_IncTick+0x20>)
 8002e0e:	6013      	str	r3, [r2, #0]
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	20000548 	.word	0x20000548

08002e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b02      	ldr	r3, [pc, #8]	; (8002e30 <HAL_GetTick+0x10>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	20000548 	.word	0x20000548

08002e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7ff fff0 	bl	8002e20 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4c:	d005      	beq.n	8002e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4e:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_Delay+0x40>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e5a:	bf00      	nop
 8002e5c:	f7ff ffe0 	bl	8002e20 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d8f7      	bhi.n	8002e5c <HAL_Delay+0x28>
  {
  }
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000008 	.word	0x20000008

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4906      	ldr	r1, [pc, #24]	; (8002f10 <__NVIC_EnableIRQ+0x34>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	e000e100 	.word	0xe000e100

08002f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db0a      	blt.n	8002f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	490c      	ldr	r1, [pc, #48]	; (8002f60 <__NVIC_SetPriority+0x4c>)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	0112      	lsls	r2, r2, #4
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f3c:	e00a      	b.n	8002f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4908      	ldr	r1, [pc, #32]	; (8002f64 <__NVIC_SetPriority+0x50>)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3b04      	subs	r3, #4
 8002f4c:	0112      	lsls	r2, r2, #4
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	440b      	add	r3, r1
 8002f52:	761a      	strb	r2, [r3, #24]
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f1c3 0307 	rsb	r3, r3, #7
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	bf28      	it	cs
 8002f86:	2304      	movcs	r3, #4
 8002f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	2b06      	cmp	r3, #6
 8002f90:	d902      	bls.n	8002f98 <NVIC_EncodePriority+0x30>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3b03      	subs	r3, #3
 8002f96:	e000      	b.n	8002f9a <NVIC_EncodePriority+0x32>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	401a      	ands	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	43d9      	mvns	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc0:	4313      	orrs	r3, r2
         );
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fdc:	d301      	bcc.n	8002fe2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e00f      	b.n	8003002 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fe2:	4a0a      	ldr	r2, [pc, #40]	; (800300c <SysTick_Config+0x40>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fea:	210f      	movs	r1, #15
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff0:	f7ff ff90 	bl	8002f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <SysTick_Config+0x40>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ffa:	4b04      	ldr	r3, [pc, #16]	; (800300c <SysTick_Config+0x40>)
 8002ffc:	2207      	movs	r2, #7
 8002ffe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000e010 	.word	0xe000e010

08003010 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ff2d 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
 8003032:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003038:	f7ff ff42 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 800303c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6978      	ldr	r0, [r7, #20]
 8003044:	f7ff ff90 	bl	8002f68 <NVIC_EncodePriority>
 8003048:	4602      	mov	r2, r0
 800304a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800304e:	4611      	mov	r1, r2
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff5f 	bl	8002f14 <__NVIC_SetPriority>
}
 8003056:	bf00      	nop
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff35 	bl	8002edc <__NVIC_EnableIRQ>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff ffa2 	bl	8002fcc <SysTick_Config>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003094:	b480      	push	{r7}
 8003096:	b08b      	sub	sp, #44	; 0x2c
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800309e:	2300      	movs	r3, #0
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a6:	e127      	b.n	80032f8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030a8:	2201      	movs	r2, #1
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	f040 8116 	bne.w	80032f2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b12      	cmp	r3, #18
 80030cc:	d034      	beq.n	8003138 <HAL_GPIO_Init+0xa4>
 80030ce:	2b12      	cmp	r3, #18
 80030d0:	d80d      	bhi.n	80030ee <HAL_GPIO_Init+0x5a>
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d02b      	beq.n	800312e <HAL_GPIO_Init+0x9a>
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d804      	bhi.n	80030e4 <HAL_GPIO_Init+0x50>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d031      	beq.n	8003142 <HAL_GPIO_Init+0xae>
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d01c      	beq.n	800311c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030e2:	e048      	b.n	8003176 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d043      	beq.n	8003170 <HAL_GPIO_Init+0xdc>
 80030e8:	2b11      	cmp	r3, #17
 80030ea:	d01b      	beq.n	8003124 <HAL_GPIO_Init+0x90>
          break;
 80030ec:	e043      	b.n	8003176 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80030ee:	4a89      	ldr	r2, [pc, #548]	; (8003314 <HAL_GPIO_Init+0x280>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d026      	beq.n	8003142 <HAL_GPIO_Init+0xae>
 80030f4:	4a87      	ldr	r2, [pc, #540]	; (8003314 <HAL_GPIO_Init+0x280>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d806      	bhi.n	8003108 <HAL_GPIO_Init+0x74>
 80030fa:	4a87      	ldr	r2, [pc, #540]	; (8003318 <HAL_GPIO_Init+0x284>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d020      	beq.n	8003142 <HAL_GPIO_Init+0xae>
 8003100:	4a86      	ldr	r2, [pc, #536]	; (800331c <HAL_GPIO_Init+0x288>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01d      	beq.n	8003142 <HAL_GPIO_Init+0xae>
          break;
 8003106:	e036      	b.n	8003176 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003108:	4a85      	ldr	r2, [pc, #532]	; (8003320 <HAL_GPIO_Init+0x28c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d019      	beq.n	8003142 <HAL_GPIO_Init+0xae>
 800310e:	4a85      	ldr	r2, [pc, #532]	; (8003324 <HAL_GPIO_Init+0x290>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d016      	beq.n	8003142 <HAL_GPIO_Init+0xae>
 8003114:	4a84      	ldr	r2, [pc, #528]	; (8003328 <HAL_GPIO_Init+0x294>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_GPIO_Init+0xae>
          break;
 800311a:	e02c      	b.n	8003176 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	623b      	str	r3, [r7, #32]
          break;
 8003122:	e028      	b.n	8003176 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	3304      	adds	r3, #4
 800312a:	623b      	str	r3, [r7, #32]
          break;
 800312c:	e023      	b.n	8003176 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	3308      	adds	r3, #8
 8003134:	623b      	str	r3, [r7, #32]
          break;
 8003136:	e01e      	b.n	8003176 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	330c      	adds	r3, #12
 800313e:	623b      	str	r3, [r7, #32]
          break;
 8003140:	e019      	b.n	8003176 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800314a:	2304      	movs	r3, #4
 800314c:	623b      	str	r3, [r7, #32]
          break;
 800314e:	e012      	b.n	8003176 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003158:	2308      	movs	r3, #8
 800315a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	611a      	str	r2, [r3, #16]
          break;
 8003162:	e008      	b.n	8003176 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003164:	2308      	movs	r3, #8
 8003166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	615a      	str	r2, [r3, #20]
          break;
 800316e:	e002      	b.n	8003176 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003170:	2300      	movs	r3, #0
 8003172:	623b      	str	r3, [r7, #32]
          break;
 8003174:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2bff      	cmp	r3, #255	; 0xff
 800317a:	d801      	bhi.n	8003180 <HAL_GPIO_Init+0xec>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	e001      	b.n	8003184 <HAL_GPIO_Init+0xf0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3304      	adds	r3, #4
 8003184:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2bff      	cmp	r3, #255	; 0xff
 800318a:	d802      	bhi.n	8003192 <HAL_GPIO_Init+0xfe>
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	e002      	b.n	8003198 <HAL_GPIO_Init+0x104>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	3b08      	subs	r3, #8
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	210f      	movs	r1, #15
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	401a      	ands	r2, r3
 80031aa:	6a39      	ldr	r1, [r7, #32]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	fa01 f303 	lsl.w	r3, r1, r3
 80031b2:	431a      	orrs	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8096 	beq.w	80032f2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031c6:	4b59      	ldr	r3, [pc, #356]	; (800332c <HAL_GPIO_Init+0x298>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	4a58      	ldr	r2, [pc, #352]	; (800332c <HAL_GPIO_Init+0x298>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6193      	str	r3, [r2, #24]
 80031d2:	4b56      	ldr	r3, [pc, #344]	; (800332c <HAL_GPIO_Init+0x298>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031de:	4a54      	ldr	r2, [pc, #336]	; (8003330 <HAL_GPIO_Init+0x29c>)
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3302      	adds	r3, #2
 80031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	220f      	movs	r2, #15
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4013      	ands	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_GPIO_Init+0x2a0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_GPIO_Init+0x19e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4a      	ldr	r2, [pc, #296]	; (8003338 <HAL_GPIO_Init+0x2a4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00d      	beq.n	800322e <HAL_GPIO_Init+0x19a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_GPIO_Init+0x2a8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <HAL_GPIO_Init+0x196>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2ac>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_GPIO_Init+0x192>
 8003222:	2303      	movs	r3, #3
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x1a0>
 8003226:	2304      	movs	r3, #4
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x1a0>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x1a0>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x1a0>
 8003232:	2300      	movs	r3, #0
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003244:	493a      	ldr	r1, [pc, #232]	; (8003330 <HAL_GPIO_Init+0x29c>)
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800325e:	4b39      	ldr	r3, [pc, #228]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4938      	ldr	r1, [pc, #224]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
 800326a:	e006      	b.n	800327a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800326c:	4b35      	ldr	r3, [pc, #212]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	43db      	mvns	r3, r3
 8003274:	4933      	ldr	r1, [pc, #204]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 8003276:	4013      	ands	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d006      	beq.n	8003294 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003286:	4b2f      	ldr	r3, [pc, #188]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	492e      	ldr	r1, [pc, #184]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
 8003292:	e006      	b.n	80032a2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003294:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	43db      	mvns	r3, r3
 800329c:	4929      	ldr	r1, [pc, #164]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 800329e:	4013      	ands	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d006      	beq.n	80032bc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032ae:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	4924      	ldr	r1, [pc, #144]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	608b      	str	r3, [r1, #8]
 80032ba:	e006      	b.n	80032ca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	491f      	ldr	r1, [pc, #124]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	491a      	ldr	r1, [pc, #104]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60cb      	str	r3, [r1, #12]
 80032e2:	e006      	b.n	80032f2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032e4:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	4915      	ldr	r1, [pc, #84]	; (8003344 <HAL_GPIO_Init+0x2b0>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	3301      	adds	r3, #1
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	f47f aed0 	bne.w	80030a8 <HAL_GPIO_Init+0x14>
  }
}
 8003308:	bf00      	nop
 800330a:	372c      	adds	r7, #44	; 0x2c
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	10210000 	.word	0x10210000
 8003318:	10110000 	.word	0x10110000
 800331c:	10120000 	.word	0x10120000
 8003320:	10310000 	.word	0x10310000
 8003324:	10320000 	.word	0x10320000
 8003328:	10220000 	.word	0x10220000
 800332c:	40021000 	.word	0x40021000
 8003330:	40010000 	.word	0x40010000
 8003334:	40010800 	.word	0x40010800
 8003338:	40010c00 	.word	0x40010c00
 800333c:	40011000 	.word	0x40011000
 8003340:	40011400 	.word	0x40011400
 8003344:	40010400 	.word	0x40010400

08003348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e001      	b.n	800336a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr

08003376 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	460b      	mov	r3, r1
 8003380:	807b      	strh	r3, [r7, #2]
 8003382:	4613      	mov	r3, r2
 8003384:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003386:	787b      	ldrb	r3, [r7, #1]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003392:	e003      	b.n	800339c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003394:	887b      	ldrh	r3, [r7, #2]
 8003396:	041a      	lsls	r2, r3, #16
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	611a      	str	r2, [r3, #16]
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	887b      	ldrh	r3, [r7, #2]
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80033c4:	e002      	b.n	80033cc <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c6:	887a      	ldrh	r2, [r7, #2]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	611a      	str	r2, [r3, #16]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr
	...

080033d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e11f      	b.n	800362a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fa90 	bl	8002924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800343a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800343c:	f001 fc8c 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 8003440:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	4a7b      	ldr	r2, [pc, #492]	; (8003634 <HAL_I2C_Init+0x25c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d807      	bhi.n	800345c <HAL_I2C_Init+0x84>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a7a      	ldr	r2, [pc, #488]	; (8003638 <HAL_I2C_Init+0x260>)
 8003450:	4293      	cmp	r3, r2
 8003452:	bf94      	ite	ls
 8003454:	2301      	movls	r3, #1
 8003456:	2300      	movhi	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	e006      	b.n	800346a <HAL_I2C_Init+0x92>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a77      	ldr	r2, [pc, #476]	; (800363c <HAL_I2C_Init+0x264>)
 8003460:	4293      	cmp	r3, r2
 8003462:	bf94      	ite	ls
 8003464:	2301      	movls	r3, #1
 8003466:	2300      	movhi	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0db      	b.n	800362a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4a72      	ldr	r2, [pc, #456]	; (8003640 <HAL_I2C_Init+0x268>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	0c9b      	lsrs	r3, r3, #18
 800347c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	430a      	orrs	r2, r1
 8003490:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	4a64      	ldr	r2, [pc, #400]	; (8003634 <HAL_I2C_Init+0x25c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d802      	bhi.n	80034ac <HAL_I2C_Init+0xd4>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3301      	adds	r3, #1
 80034aa:	e009      	b.n	80034c0 <HAL_I2C_Init+0xe8>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	4a63      	ldr	r2, [pc, #396]	; (8003644 <HAL_I2C_Init+0x26c>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	3301      	adds	r3, #1
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4956      	ldr	r1, [pc, #344]	; (8003634 <HAL_I2C_Init+0x25c>)
 80034dc:	428b      	cmp	r3, r1
 80034de:	d80d      	bhi.n	80034fc <HAL_I2C_Init+0x124>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e59      	subs	r1, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	bf38      	it	cc
 80034f8:	2304      	movcc	r3, #4
 80034fa:	e04f      	b.n	800359c <HAL_I2C_Init+0x1c4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d111      	bne.n	8003528 <HAL_I2C_Init+0x150>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e012      	b.n	800354e <HAL_I2C_Init+0x176>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	1e58      	subs	r0, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	0099      	lsls	r1, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	fbb0 f3f3 	udiv	r3, r0, r3
 800353e:	3301      	adds	r3, #1
 8003540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf0c      	ite	eq
 8003548:	2301      	moveq	r3, #1
 800354a:	2300      	movne	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Init+0x17e>
 8003552:	2301      	movs	r3, #1
 8003554:	e022      	b.n	800359c <HAL_I2C_Init+0x1c4>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10e      	bne.n	800357c <HAL_I2C_Init+0x1a4>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1e58      	subs	r0, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	440b      	add	r3, r1
 800356c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003570:	3301      	adds	r3, #1
 8003572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	e00f      	b.n	800359c <HAL_I2C_Init+0x1c4>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1e58      	subs	r0, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	0099      	lsls	r1, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	6809      	ldr	r1, [r1, #0]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6911      	ldr	r1, [r2, #16]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68d2      	ldr	r2, [r2, #12]
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	000186a0 	.word	0x000186a0
 8003638:	001e847f 	.word	0x001e847f
 800363c:	003d08ff 	.word	0x003d08ff
 8003640:	431bde83 	.word	0x431bde83
 8003644:	10624dd3 	.word	0x10624dd3

08003648 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	461a      	mov	r2, r3
 8003654:	460b      	mov	r3, r1
 8003656:	817b      	strh	r3, [r7, #10]
 8003658:	4613      	mov	r3, r2
 800365a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800365c:	f7ff fbe0 	bl	8002e20 <HAL_GetTick>
 8003660:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b20      	cmp	r3, #32
 800366c:	f040 80e0 	bne.w	8003830 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2319      	movs	r3, #25
 8003676:	2201      	movs	r2, #1
 8003678:	4970      	ldr	r1, [pc, #448]	; (800383c <HAL_I2C_Master_Transmit+0x1f4>)
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 fdba 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
 8003688:	e0d3      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_I2C_Master_Transmit+0x50>
 8003694:	2302      	movs	r3, #2
 8003696:	e0cc      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d007      	beq.n	80036be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0201 	orr.w	r2, r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2221      	movs	r2, #33	; 0x21
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2210      	movs	r2, #16
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	893a      	ldrh	r2, [r7, #8]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4a50      	ldr	r2, [pc, #320]	; (8003840 <HAL_I2C_Master_Transmit+0x1f8>)
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003700:	8979      	ldrh	r1, [r7, #10]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fc24 	bl	8003f54 <I2C_MasterRequestWrite>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e08d      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	613b      	str	r3, [r7, #16]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800372c:	e066      	b.n	80037fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fe34 	bl	80043a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	2b04      	cmp	r3, #4
 8003744:	d107      	bne.n	8003756 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003754:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06b      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b04      	cmp	r3, #4
 8003796:	d11b      	bne.n	80037d0 <HAL_I2C_Master_Transmit+0x188>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d017      	beq.n	80037d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	6a39      	ldr	r1, [r7, #32]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fe24 	bl	8004422 <I2C_WaitOnBTFFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e01a      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d194      	bne.n	800372e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800382c:	2300      	movs	r3, #0
 800382e:	e000      	b.n	8003832 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	00100002 	.word	0x00100002
 8003840:	ffff0000 	.word	0xffff0000

08003844 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08c      	sub	sp, #48	; 0x30
 8003848:	af02      	add	r7, sp, #8
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	461a      	mov	r2, r3
 8003850:	460b      	mov	r3, r1
 8003852:	817b      	strh	r3, [r7, #10]
 8003854:	4613      	mov	r3, r2
 8003856:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800385c:	f7ff fae0 	bl	8002e20 <HAL_GetTick>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	f040 8238 	bne.w	8003ce0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2319      	movs	r3, #25
 8003876:	2201      	movs	r2, #1
 8003878:	497e      	ldr	r1, [pc, #504]	; (8003a74 <HAL_I2C_Master_Receive+0x230>)
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fcba 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
 8003888:	e22b      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_I2C_Master_Receive+0x54>
 8003894:	2302      	movs	r3, #2
 8003896:	e224      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d007      	beq.n	80038be <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2222      	movs	r2, #34	; 0x22
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2210      	movs	r2, #16
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	893a      	ldrh	r2, [r7, #8]
 80038ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a5e      	ldr	r2, [pc, #376]	; (8003a78 <HAL_I2C_Master_Receive+0x234>)
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003900:	8979      	ldrh	r1, [r7, #10]
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fba6 	bl	8004058 <I2C_MasterRequestRead>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1e5      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	61fb      	str	r3, [r7, #28]
 8003932:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e1b9      	b.n	8003cba <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	2b01      	cmp	r3, #1
 800394c:	d11d      	bne.n	800398a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800395c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800395e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003986:	b662      	cpsie	i
 8003988:	e197      	b.n	8003cba <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398e:	2b02      	cmp	r3, #2
 8003990:	d11d      	bne.n	80039ce <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039a2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ca:	b662      	cpsie	i
 80039cc:	e175      	b.n	8003cba <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039f4:	e161      	b.n	8003cba <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	f200 811a 	bhi.w	8003c34 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d123      	bne.n	8003a50 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 fd49 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e162      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a4e:	e134      	b.n	8003cba <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d150      	bne.n	8003afa <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4906      	ldr	r1, [pc, #24]	; (8003a7c <HAL_I2C_Master_Receive+0x238>)
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 fbc6 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e137      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
 8003a72:	bf00      	nop
 8003a74:	00100002 	.word	0x00100002
 8003a78:	ffff0000 	.word	0xffff0000
 8003a7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a80:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ac4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003af8:	e0df      	b.n	8003cba <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2200      	movs	r2, #0
 8003b02:	497a      	ldr	r1, [pc, #488]	; (8003cec <HAL_I2C_Master_Receive+0x4a8>)
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 fb75 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0e6      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b24:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	691a      	ldr	r2, [r3, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b58:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_I2C_Master_Receive+0x4ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	08db      	lsrs	r3, r3, #3
 8003b5e:	4a65      	ldr	r2, [pc, #404]	; (8003cf4 <HAL_I2C_Master_Receive+0x4b0>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	0a1a      	lsrs	r2, r3, #8
 8003b66:	4613      	mov	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	00da      	lsls	r2, r3, #3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d117      	bne.n	8003bae <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e099      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d1da      	bne.n	8003b72 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691a      	ldr	r2, [r3, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bfe:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c32:	e042      	b.n	8003cba <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fc33 	bl	80044a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e04c      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d118      	bne.n	8003cba <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f47f ae99 	bne.w	80039f6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3728      	adds	r7, #40	; 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	00010004 	.word	0x00010004
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	14f8b589 	.word	0x14f8b589

08003cf8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b08a      	sub	sp, #40	; 0x28
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	460b      	mov	r3, r1
 8003d06:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d08:	f7ff f88a 	bl	8002e20 <HAL_GetTick>
 8003d0c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	f040 8111 	bne.w	8003f42 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2319      	movs	r3, #25
 8003d26:	2201      	movs	r2, #1
 8003d28:	4988      	ldr	r1, [pc, #544]	; (8003f4c <HAL_I2C_IsDeviceReady+0x254>)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fa62 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	e104      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_I2C_IsDeviceReady+0x50>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e0fd      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x24c>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d007      	beq.n	8003d6e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2224      	movs	r2, #36	; 0x24
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a70      	ldr	r2, [pc, #448]	; (8003f50 <HAL_I2C_IsDeviceReady+0x258>)
 8003d90:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fa20 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc8:	d103      	bne.n	8003dd2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e0b6      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003de4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003de6:	f7ff f81b 	bl	8002e20 <HAL_GetTick>
 8003dea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	bf0c      	ite	eq
 8003dfa:	2301      	moveq	r3, #1
 8003dfc:	2300      	movne	r3, #0
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	bf0c      	ite	eq
 8003e12:	2301      	moveq	r3, #1
 8003e14:	2300      	movne	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e1a:	e025      	b.n	8003e68 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e1c:	f7ff f800 	bl	8002e20 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <HAL_I2C_IsDeviceReady+0x13a>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	22a0      	movs	r2, #160	; 0xa0
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2ba0      	cmp	r3, #160	; 0xa0
 8003e72:	d005      	beq.n	8003e80 <HAL_I2C_IsDeviceReady+0x188>
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <HAL_I2C_IsDeviceReady+0x188>
 8003e7a:	7dbb      	ldrb	r3, [r7, #22]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0cd      	beq.n	8003e1c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d129      	bne.n	8003eea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	2319      	movs	r3, #25
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	4921      	ldr	r1, [pc, #132]	; (8003f4c <HAL_I2C_IsDeviceReady+0x254>)
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f994 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e036      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e02c      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f02:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2319      	movs	r3, #25
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	490f      	ldr	r1, [pc, #60]	; (8003f4c <HAL_I2C_IsDeviceReady+0x254>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f970 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e012      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	f4ff af32 	bcc.w	8003d92 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f42:	2302      	movs	r3, #2
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	00100002 	.word	0x00100002
 8003f50:	ffff0000 	.word	0xffff0000

08003f54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	607a      	str	r2, [r7, #4]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	460b      	mov	r3, r1
 8003f62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d006      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d003      	beq.n	8003f7e <I2C_MasterRequestWrite+0x2a>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f7c:	d108      	bne.n	8003f90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e00b      	b.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	2b12      	cmp	r3, #18
 8003f96:	d107      	bne.n	8003fa8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f91d 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00d      	beq.n	8003fdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fce:	d103      	bne.n	8003fd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e035      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fe4:	d108      	bne.n	8003ff8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e01b      	b.n	8004030 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	11db      	asrs	r3, r3, #7
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0306 	and.w	r3, r3, #6
 8004002:	b2db      	uxtb	r3, r3
 8004004:	f063 030f 	orn	r3, r3, #15
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	490e      	ldr	r1, [pc, #56]	; (8004050 <I2C_MasterRequestWrite+0xfc>)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f943 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e010      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	4907      	ldr	r1, [pc, #28]	; (8004054 <I2C_MasterRequestWrite+0x100>)
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 f933 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	00010008 	.word	0x00010008
 8004054:	00010002 	.word	0x00010002

08004058 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b088      	sub	sp, #32
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d006      	beq.n	8004092 <I2C_MasterRequestRead+0x3a>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d003      	beq.n	8004092 <I2C_MasterRequestRead+0x3a>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004090:	d108      	bne.n	80040a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e00b      	b.n	80040bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	2b11      	cmp	r3, #17
 80040aa:	d107      	bne.n	80040bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f893 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00d      	beq.n	80040f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040e2:	d103      	bne.n	80040ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e079      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f8:	d108      	bne.n	800410c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040fa:	897b      	ldrh	r3, [r7, #10]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	b2da      	uxtb	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	611a      	str	r2, [r3, #16]
 800410a:	e05f      	b.n	80041cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800410c:	897b      	ldrh	r3, [r7, #10]
 800410e:	11db      	asrs	r3, r3, #7
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f003 0306 	and.w	r3, r3, #6
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f063 030f 	orn	r3, r3, #15
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4930      	ldr	r1, [pc, #192]	; (80041ec <I2C_MasterRequestRead+0x194>)
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f8b9 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e054      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	4929      	ldr	r1, [pc, #164]	; (80041f0 <I2C_MasterRequestRead+0x198>)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f8a9 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e044      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	613b      	str	r3, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f831 	bl	80041f4 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a6:	d103      	bne.n	80041b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e017      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	11db      	asrs	r3, r3, #7
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	f003 0306 	and.w	r3, r3, #6
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f063 030e 	orn	r3, r3, #14
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4907      	ldr	r1, [pc, #28]	; (80041f0 <I2C_MasterRequestRead+0x198>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f865 	bl	80042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	00010008 	.word	0x00010008
 80041f0:	00010002 	.word	0x00010002

080041f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	4613      	mov	r3, r2
 8004202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004204:	e025      	b.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d021      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420e:	f7fe fe07 	bl	8002e20 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d302      	bcc.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x30>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2220      	movs	r2, #32
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f043 0220 	orr.w	r2, r3, #32
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e023      	b.n	800429a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10d      	bne.n	8004278 <I2C_WaitOnFlagUntilTimeout+0x84>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4013      	ands	r3, r2
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	bf0c      	ite	eq
 800426e:	2301      	moveq	r3, #1
 8004270:	2300      	movne	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	461a      	mov	r2, r3
 8004276:	e00c      	b.n	8004292 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	4013      	ands	r3, r2
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf0c      	ite	eq
 800428a:	2301      	moveq	r3, #1
 800428c:	2300      	movne	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	429a      	cmp	r2, r3
 8004296:	d0b6      	beq.n	8004206 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042b0:	e051      	b.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d123      	bne.n	800430a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e046      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d021      	beq.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004312:	f7fe fd85 	bl	8002e20 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d302      	bcc.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d116      	bne.n	8004356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f043 0220 	orr.w	r2, r3, #32
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e020      	b.n	8004398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b01      	cmp	r3, #1
 800435e:	d10c      	bne.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	43da      	mvns	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	bf14      	ite	ne
 8004372:	2301      	movne	r3, #1
 8004374:	2300      	moveq	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	e00b      	b.n	8004392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	43da      	mvns	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4013      	ands	r3, r2
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d18d      	bne.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043ac:	e02d      	b.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f8ce 	bl	8004550 <I2C_IsAcknowledgeFailed>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e02d      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d021      	beq.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fd2b 	bl	8002e20 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d116      	bne.n	800440a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f043 0220 	orr.w	r2, r3, #32
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e007      	b.n	800441a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b80      	cmp	r3, #128	; 0x80
 8004416:	d1ca      	bne.n	80043ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800442e:	e02d      	b.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f88d 	bl	8004550 <I2C_IsAcknowledgeFailed>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e02d      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004446:	d021      	beq.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004448:	f7fe fcea 	bl	8002e20 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	d302      	bcc.n	800445e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e007      	b.n	800449c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b04      	cmp	r3, #4
 8004498:	d1ca      	bne.n	8004430 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044b0:	e042      	b.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d119      	bne.n	80044f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0210 	mvn.w	r2, #16
 80044c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e029      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f4:	f7fe fc94 	bl	8002e20 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e007      	b.n	8004548 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d1b5      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004566:	d11b      	bne.n	80045a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004570:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e26c      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8087 	beq.w	80046da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045cc:	4b92      	ldr	r3, [pc, #584]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f003 030c 	and.w	r3, r3, #12
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d00c      	beq.n	80045f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f003 030c 	and.w	r3, r3, #12
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d112      	bne.n	800460a <HAL_RCC_OscConfig+0x5e>
 80045e4:	4b8c      	ldr	r3, [pc, #560]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f0:	d10b      	bne.n	800460a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f2:	4b89      	ldr	r3, [pc, #548]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d06c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x12c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d168      	bne.n	80046d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e246      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004612:	d106      	bne.n	8004622 <HAL_RCC_OscConfig+0x76>
 8004614:	4b80      	ldr	r3, [pc, #512]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7f      	ldr	r2, [pc, #508]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800461a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e02e      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0x98>
 800462a:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7a      	ldr	r2, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b78      	ldr	r3, [pc, #480]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a77      	ldr	r2, [pc, #476]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800463c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e01d      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800464c:	d10c      	bne.n	8004668 <HAL_RCC_OscConfig+0xbc>
 800464e:	4b72      	ldr	r3, [pc, #456]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a71      	ldr	r2, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b6f      	ldr	r3, [pc, #444]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6e      	ldr	r2, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	e00b      	b.n	8004680 <HAL_RCC_OscConfig+0xd4>
 8004668:	4b6b      	ldr	r3, [pc, #428]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6a      	ldr	r2, [pc, #424]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800466e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	4b68      	ldr	r3, [pc, #416]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a67      	ldr	r2, [pc, #412]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800467a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800467e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d013      	beq.n	80046b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004688:	f7fe fbca 	bl	8002e20 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004690:	f7fe fbc6 	bl	8002e20 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1fa      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a2:	4b5d      	ldr	r3, [pc, #372]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0xe4>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe fbb6 	bl	8002e20 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fbb2 	bl	8002e20 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1e6      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ca:	4b53      	ldr	r3, [pc, #332]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x10c>
 80046d6:	e000      	b.n	80046da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d063      	beq.n	80047ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046e6:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046f2:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d11c      	bne.n	8004738 <HAL_RCC_OscConfig+0x18c>
 80046fe:	4b46      	ldr	r3, [pc, #280]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d116      	bne.n	8004738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800470a:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <HAL_RCC_OscConfig+0x176>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e1ba      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004722:	4b3d      	ldr	r3, [pc, #244]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4939      	ldr	r1, [pc, #228]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004736:	e03a      	b.n	80047ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d020      	beq.n	8004782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004740:	4b36      	ldr	r3, [pc, #216]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004746:	f7fe fb6b 	bl	8002e20 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474e:	f7fe fb67 	bl	8002e20 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e19b      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	4b2a      	ldr	r3, [pc, #168]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	4927      	ldr	r1, [pc, #156]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]
 8004780:	e015      	b.n	80047ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <HAL_RCC_OscConfig+0x270>)
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004788:	f7fe fb4a 	bl	8002e20 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004790:	f7fe fb46 	bl	8002e20 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e17a      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047a2:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d03a      	beq.n	8004830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d019      	beq.n	80047f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <HAL_RCC_OscConfig+0x274>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c8:	f7fe fb2a 	bl	8002e20 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047d0:	f7fe fb26 	bl	8002e20 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e15a      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ee:	2001      	movs	r0, #1
 80047f0:	f000 fada 	bl	8004da8 <RCC_Delay>
 80047f4:	e01c      	b.n	8004830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_RCC_OscConfig+0x274>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047fc:	f7fe fb10 	bl	8002e20 <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004802:	e00f      	b.n	8004824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004804:	f7fe fb0c 	bl	8002e20 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d908      	bls.n	8004824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e140      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	42420000 	.word	0x42420000
 8004820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	4b9e      	ldr	r3, [pc, #632]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e9      	bne.n	8004804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a6 	beq.w	800498a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004842:	4b97      	ldr	r3, [pc, #604]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b94      	ldr	r3, [pc, #592]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4a93      	ldr	r2, [pc, #588]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004858:	61d3      	str	r3, [r2, #28]
 800485a:	4b91      	ldr	r3, [pc, #580]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486a:	4b8e      	ldr	r3, [pc, #568]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d118      	bne.n	80048a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004876:	4b8b      	ldr	r3, [pc, #556]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a8a      	ldr	r2, [pc, #552]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 800487c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004882:	f7fe facd 	bl	8002e20 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488a:	f7fe fac9 	bl	8002e20 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b64      	cmp	r3, #100	; 0x64
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0fd      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489c:	4b81      	ldr	r3, [pc, #516]	; (8004aa4 <HAL_RCC_OscConfig+0x4f8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0f0      	beq.n	800488a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d106      	bne.n	80048be <HAL_RCC_OscConfig+0x312>
 80048b0:	4b7b      	ldr	r3, [pc, #492]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4a7a      	ldr	r2, [pc, #488]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	e02d      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x334>
 80048c6:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	4a75      	ldr	r2, [pc, #468]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6213      	str	r3, [r2, #32]
 80048d2:	4b73      	ldr	r3, [pc, #460]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4a72      	ldr	r2, [pc, #456]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	6213      	str	r3, [r2, #32]
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x356>
 80048e8:	4b6d      	ldr	r3, [pc, #436]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	4a6c      	ldr	r2, [pc, #432]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6213      	str	r3, [r2, #32]
 80048f4:	4b6a      	ldr	r3, [pc, #424]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6213      	str	r3, [r2, #32]
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x36e>
 8004902:	4b67      	ldr	r3, [pc, #412]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4a66      	ldr	r2, [pc, #408]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6213      	str	r3, [r2, #32]
 800490e:	4b64      	ldr	r3, [pc, #400]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004922:	f7fe fa7d 	bl	8002e20 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fe fa79 	bl	8002e20 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0ab      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	4b57      	ldr	r3, [pc, #348]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x37e>
 800494c:	e014      	b.n	8004978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fe fa67 	bl	8002e20 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fe fa63 	bl	8002e20 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e095      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496c:	4b4c      	ldr	r3, [pc, #304]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b48      	ldr	r3, [pc, #288]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4a47      	ldr	r2, [pc, #284]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8081 	beq.w	8004a96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d061      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d146      	bne.n	8004a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCC_OscConfig+0x4fc>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fe fa37 	bl	8002e20 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe fa33 	bl	8002e20 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e067      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c8:	4b35      	ldr	r3, [pc, #212]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049dc:	d108      	bne.n	80049f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049de:	4b30      	ldr	r3, [pc, #192]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	492d      	ldr	r1, [pc, #180]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f0:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a19      	ldr	r1, [r3, #32]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	430b      	orrs	r3, r1
 8004a02:	4927      	ldr	r1, [pc, #156]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCC_OscConfig+0x4fc>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fe fa07 	bl	8002e20 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fe fa03 	bl	8002e20 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e037      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a28:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x46a>
 8004a34:	e02f      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <HAL_RCC_OscConfig+0x4fc>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3c:	f7fe f9f0 	bl	8002e20 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fe f9ec 	bl	8002e20 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e020      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x498>
 8004a62:	e018      	b.n	8004a96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e013      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_OscConfig+0x4f4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d001      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	42420060 	.word	0x42420060

08004aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0d0      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ac0:	4b6a      	ldr	r3, [pc, #424]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0307 	and.w	r3, r3, #7
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d910      	bls.n	8004af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ace:	4b67      	ldr	r3, [pc, #412]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 0207 	bic.w	r2, r3, #7
 8004ad6:	4965      	ldr	r1, [pc, #404]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b63      	ldr	r3, [pc, #396]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0b8      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d020      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d005      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b08:	4b59      	ldr	r3, [pc, #356]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a58      	ldr	r2, [pc, #352]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b20:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	4a52      	ldr	r2, [pc, #328]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b2c:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	494d      	ldr	r1, [pc, #308]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d040      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b52:	4b47      	ldr	r3, [pc, #284]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d115      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e07f      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d107      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b6a:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e073      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7a:	4b3d      	ldr	r3, [pc, #244]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e06b      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8a:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f023 0203 	bic.w	r2, r3, #3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	4936      	ldr	r1, [pc, #216]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b9c:	f7fe f940 	bl	8002e20 <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	f7fe f93c 	bl	8002e20 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e053      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f003 020c 	and.w	r2, r3, #12
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d1eb      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bcc:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d210      	bcs.n	8004bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bda:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 0207 	bic.w	r2, r3, #7
 8004be2:	4922      	ldr	r1, [pc, #136]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e032      	b.n	8004c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c08:	4b19      	ldr	r3, [pc, #100]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4916      	ldr	r1, [pc, #88]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	490e      	ldr	r1, [pc, #56]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c3a:	f000 f821 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c3e:	4601      	mov	r1, r0
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	091b      	lsrs	r3, r3, #4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_RCC_ClockConfig+0x1c8>)
 8004c4c:	5cd3      	ldrb	r3, [r2, r3]
 8004c4e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c52:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1cc>)
 8004c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_ClockConfig+0x1d0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe f89e 	bl	8002d9c <HAL_InitTick>

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40022000 	.word	0x40022000
 8004c70:	40021000 	.word	0x40021000
 8004c74:	0800645c 	.word	0x0800645c
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	20000004 	.word	0x20000004

08004c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	b490      	push	{r4, r7}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c86:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c88:	1d3c      	adds	r4, r7, #4
 8004c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c90:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004caa:	4b23      	ldr	r3, [pc, #140]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d002      	beq.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x46>
 8004cbe:	e02d      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cc2:	623b      	str	r3, [r7, #32]
      break;
 8004cc4:	e02d      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	0c9b      	lsrs	r3, r3, #18
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d013      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ce4:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c5b      	lsrs	r3, r3, #17
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004cf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	4a0f      	ldr	r2, [pc, #60]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cfe:	fb02 f203 	mul.w	r2, r2, r3
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
 8004d0a:	e004      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	4a0c      	ldr	r2, [pc, #48]	; (8004d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d10:	fb02 f303 	mul.w	r3, r2, r3
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	623b      	str	r3, [r7, #32]
      break;
 8004d1a:	e002      	b.n	8004d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d1e:	623b      	str	r3, [r7, #32]
      break;
 8004d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3728      	adds	r7, #40	; 0x28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc90      	pop	{r4, r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	08006448 	.word	0x08006448
 8004d34:	08006458 	.word	0x08006458
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	007a1200 	.word	0x007a1200
 8004d40:	003d0900 	.word	0x003d0900

08004d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d48:	4b02      	ldr	r3, [pc, #8]	; (8004d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000000 	.word	0x20000000

08004d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d5c:	f7ff fff2 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d60:	4601      	mov	r1, r0
 8004d62:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4a03      	ldr	r2, [pc, #12]	; (8004d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d6e:	5cd3      	ldrb	r3, [r2, r3]
 8004d70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	0800646c 	.word	0x0800646c

08004d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d84:	f7ff ffde 	bl	8004d44 <HAL_RCC_GetHCLKFreq>
 8004d88:	4601      	mov	r1, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	0adb      	lsrs	r3, r3, #11
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4a03      	ldr	r2, [pc, #12]	; (8004da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d96:	5cd3      	ldrb	r3, [r2, r3]
 8004d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40021000 	.word	0x40021000
 8004da4:	0800646c 	.word	0x0800646c

08004da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004db0:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <RCC_Delay+0x34>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <RCC_Delay+0x38>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	0a5b      	lsrs	r3, r3, #9
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004dc4:	bf00      	nop
  }
  while (Delay --);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1e5a      	subs	r2, r3, #1
 8004dca:	60fa      	str	r2, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f9      	bne.n	8004dc4 <RCC_Delay+0x1c>
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bc80      	pop	{r7}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000000 	.word	0x20000000
 8004de0:	10624dd3 	.word	0x10624dd3

08004de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e01d      	b.n	8004e32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d106      	bne.n	8004e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7fd fdda 	bl	80029c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	4619      	mov	r1, r3
 8004e22:	4610      	mov	r0, r2
 8004e24:	f000 fb34 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b085      	sub	sp, #20
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0201 	orr.w	r2, r2, #1
 8004e50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	d007      	beq.n	8004e74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e01d      	b.n	8004ece <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fdce 	bl	8002a48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f000 fae6 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fd50 	bl	8005990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a10      	ldr	r2, [pc, #64]	; (8004f38 <HAL_TIM_PWM_Start+0x60>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d107      	bne.n	8004f0a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b06      	cmp	r3, #6
 8004f1a:	d007      	beq.n	8004f2c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00

08004f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d122      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d11b      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0202 	mvn.w	r2, #2
 8004f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fa6a 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa5d 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fa6c 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d122      	bne.n	8004fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d11b      	bne.n	8004fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0204 	mvn.w	r2, #4
 8004fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa40 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 8004fd8:	e005      	b.n	8004fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa33 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fa42 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b08      	cmp	r3, #8
 8004ff8:	d122      	bne.n	8005040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0308 	and.w	r3, r3, #8
 8005004:	2b08      	cmp	r3, #8
 8005006:	d11b      	bne.n	8005040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0208 	mvn.w	r2, #8
 8005010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fa16 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 800502c:	e005      	b.n	800503a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fa09 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fa18 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b10      	cmp	r3, #16
 800504c:	d122      	bne.n	8005094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b10      	cmp	r3, #16
 800505a:	d11b      	bne.n	8005094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0210 	mvn.w	r2, #16
 8005064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2208      	movs	r2, #8
 800506a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f9ec 	bl	8005458 <HAL_TIM_IC_CaptureCallback>
 8005080:	e005      	b.n	800508e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f9df 	bl	8005446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f9ee 	bl	800546a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0201 	mvn.w	r2, #1
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fd fa90 	bl	80025e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ca:	2b80      	cmp	r3, #128	; 0x80
 80050cc:	d10e      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d107      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fcc3 	bl	8005a72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d10e      	bne.n	8005118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d107      	bne.n	8005118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f9b2 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b20      	cmp	r3, #32
 8005124:	d10e      	bne.n	8005144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b20      	cmp	r3, #32
 8005132:	d107      	bne.n	8005144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0220 	mvn.w	r2, #32
 800513c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fc8e 	bl	8005a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005162:	2302      	movs	r3, #2
 8005164:	e0b4      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	f200 809f 	bhi.w	80052bc <HAL_TIM_PWM_ConfigChannel+0x170>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080052bd 	.word	0x080052bd
 800518c:	080052bd 	.word	0x080052bd
 8005190:	080052bd 	.word	0x080052bd
 8005194:	080051f9 	.word	0x080051f9
 8005198:	080052bd 	.word	0x080052bd
 800519c:	080052bd 	.word	0x080052bd
 80051a0:	080052bd 	.word	0x080052bd
 80051a4:	0800523b 	.word	0x0800523b
 80051a8:	080052bd 	.word	0x080052bd
 80051ac:	080052bd 	.word	0x080052bd
 80051b0:	080052bd 	.word	0x080052bd
 80051b4:	0800527b 	.word	0x0800527b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f9c8 	bl	8005554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
      break;
 80051f6:	e062      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fa0e 	bl	8005620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
      break;
 8005238:	e041      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fa57 	bl	80056f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0208 	orr.w	r2, r2, #8
 8005254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0204 	bic.w	r2, r2, #4
 8005264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69d9      	ldr	r1, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	61da      	str	r2, [r3, #28]
      break;
 8005278:	e021      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 faa1 	bl	80057c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	021a      	lsls	r2, r3, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	61da      	str	r2, [r3, #28]
      break;
 80052ba:	e000      	b.n	80052be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80052bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d101      	bne.n	80052f0 <HAL_TIM_ConfigClockSource+0x18>
 80052ec:	2302      	movs	r3, #2
 80052ee:	e0a6      	b.n	800543e <HAL_TIM_ConfigClockSource+0x166>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800530e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005316:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b40      	cmp	r3, #64	; 0x40
 8005326:	d067      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0x120>
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d80b      	bhi.n	8005344 <HAL_TIM_ConfigClockSource+0x6c>
 800532c:	2b10      	cmp	r3, #16
 800532e:	d073      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
 8005330:	2b10      	cmp	r3, #16
 8005332:	d802      	bhi.n	800533a <HAL_TIM_ConfigClockSource+0x62>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d06f      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005338:	e078      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800533a:	2b20      	cmp	r3, #32
 800533c:	d06c      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
 800533e:	2b30      	cmp	r3, #48	; 0x30
 8005340:	d06a      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005342:	e073      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005344:	2b70      	cmp	r3, #112	; 0x70
 8005346:	d00d      	beq.n	8005364 <HAL_TIM_ConfigClockSource+0x8c>
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d804      	bhi.n	8005356 <HAL_TIM_ConfigClockSource+0x7e>
 800534c:	2b50      	cmp	r3, #80	; 0x50
 800534e:	d033      	beq.n	80053b8 <HAL_TIM_ConfigClockSource+0xe0>
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d041      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005354:	e06a      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535a:	d066      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x152>
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d017      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005362:	e063      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6899      	ldr	r1, [r3, #8]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f000 faed 	bl	8005952 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005386:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]
      break;
 8005390:	e04c      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6899      	ldr	r1, [r3, #8]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f000 fad6 	bl	8005952 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b4:	609a      	str	r2, [r3, #8]
      break;
 80053b6:	e039      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	6859      	ldr	r1, [r3, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	461a      	mov	r2, r3
 80053c6:	f000 fa4d 	bl	8005864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2150      	movs	r1, #80	; 0x50
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 faa4 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 80053d6:	e029      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	461a      	mov	r2, r3
 80053e6:	f000 fa6b 	bl	80058c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2160      	movs	r1, #96	; 0x60
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fa94 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 80053f6:	e019      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	461a      	mov	r2, r3
 8005406:	f000 fa2d 	bl	8005864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2140      	movs	r1, #64	; 0x40
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fa84 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 8005416:	e009      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fa7b 	bl	800591e <TIM_ITRx_SetConfig>
      break;
 8005428:	e000      	b.n	800542c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800542a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
	...

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a29      	ldr	r2, [pc, #164]	; (8005548 <TIM_Base_SetConfig+0xb8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <TIM_Base_SetConfig+0x30>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d007      	beq.n	80054c0 <TIM_Base_SetConfig+0x30>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a26      	ldr	r2, [pc, #152]	; (800554c <TIM_Base_SetConfig+0xbc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0x30>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a25      	ldr	r2, [pc, #148]	; (8005550 <TIM_Base_SetConfig+0xc0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d108      	bne.n	80054d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <TIM_Base_SetConfig+0xb8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00b      	beq.n	80054f2 <TIM_Base_SetConfig+0x62>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e0:	d007      	beq.n	80054f2 <TIM_Base_SetConfig+0x62>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a19      	ldr	r2, [pc, #100]	; (800554c <TIM_Base_SetConfig+0xbc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_Base_SetConfig+0x62>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a18      	ldr	r2, [pc, #96]	; (8005550 <TIM_Base_SetConfig+0xc0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a07      	ldr	r2, [pc, #28]	; (8005548 <TIM_Base_SetConfig+0xb8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	615a      	str	r2, [r3, #20]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40000400 	.word	0x40000400
 8005550:	40000800 	.word	0x40000800

08005554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f023 0302 	bic.w	r3, r3, #2
 800559c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a1c      	ldr	r2, [pc, #112]	; (800561c <TIM_OC1_SetConfig+0xc8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d10c      	bne.n	80055ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0308 	bic.w	r3, r3, #8
 80055b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 0304 	bic.w	r3, r3, #4
 80055c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <TIM_OC1_SetConfig+0xc8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	621a      	str	r2, [r3, #32]
}
 8005610:	bf00      	nop
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00

08005620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0210 	bic.w	r2, r3, #16
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f023 0320 	bic.w	r3, r3, #32
 800566a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <TIM_OC2_SetConfig+0xd0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d10d      	bne.n	800569c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800569a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <TIM_OC2_SetConfig+0xd0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d113      	bne.n	80056cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	4313      	orrs	r3, r2
 80056be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr
 80056f0:	40012c00 	.word	0x40012c00

080056f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	021b      	lsls	r3, r3, #8
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <TIM_OC3_SetConfig+0xd0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d10d      	bne.n	800576e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	021b      	lsls	r3, r3, #8
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800576c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <TIM_OC3_SetConfig+0xd0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d113      	bne.n	800579e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800577c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	621a      	str	r2, [r3, #32]
}
 80057b8:	bf00      	nop
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00

080057c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <TIM_OC4_SetConfig+0x98>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d109      	bne.n	800583c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800582e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	019b      	lsls	r3, r3, #6
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr
 8005860:	40012c00 	.word	0x40012c00

08005864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800588e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 030a 	bic.w	r3, r3, #10
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	621a      	str	r2, [r3, #32]
}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr

080058c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f023 0210 	bic.w	r2, r3, #16
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	031b      	lsls	r3, r3, #12
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	621a      	str	r2, [r3, #32]
}
 8005914:	bf00      	nop
 8005916:	371c      	adds	r7, #28
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	f043 0307 	orr.w	r3, r3, #7
 8005940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	609a      	str	r2, [r3, #8]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005952:	b480      	push	{r7}
 8005954:	b087      	sub	sp, #28
 8005956:	af00      	add	r7, sp, #0
 8005958:	60f8      	str	r0, [r7, #12]
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800596c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	021a      	lsls	r2, r3, #8
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	431a      	orrs	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4313      	orrs	r3, r2
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4313      	orrs	r3, r2
 800597e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	609a      	str	r2, [r3, #8]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2201      	movs	r2, #1
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1a      	ldr	r2, [r3, #32]
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	43db      	mvns	r3, r3
 80059b2:	401a      	ands	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1a      	ldr	r2, [r3, #32]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	fa01 f303 	lsl.w	r3, r1, r3
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
}
 80059ce:	bf00      	nop
 80059d0:	371c      	adds	r7, #28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bc80      	pop	{r7}
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e032      	b.n	8005a56 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a28:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr

08005a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e03f      	b.n	8005b16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fd f87c 	bl	8002ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2224      	movs	r2, #36	; 0x24
 8005ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f829 	bl	8005b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695a      	ldr	r2, [r3, #20]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b5a:	f023 030c 	bic.w	r3, r3, #12
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	430b      	orrs	r3, r1
 8005b66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a52      	ldr	r2, [pc, #328]	; (8005ccc <UART_SetConfig+0x1ac>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d14e      	bne.n	8005c26 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b88:	f7ff f8fa 	bl	8004d80 <HAL_RCC_GetPCLK2Freq>
 8005b8c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009a      	lsls	r2, r3, #2
 8005b98:	441a      	add	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	4a4a      	ldr	r2, [pc, #296]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	0119      	lsls	r1, r3, #4
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009a      	lsls	r2, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc4:	4b42      	ldr	r3, [pc, #264]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	2064      	movs	r0, #100	; 0x64
 8005bce:	fb00 f303 	mul.w	r3, r0, r3
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	3332      	adds	r3, #50	; 0x32
 8005bd8:	4a3d      	ldr	r2, [pc, #244]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005bda:	fba2 2303 	umull	r2, r3, r2, r3
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005be4:	4419      	add	r1, r3
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009a      	lsls	r2, r3, #2
 8005bf0:	441a      	add	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bfc:	4b34      	ldr	r3, [pc, #208]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	2064      	movs	r0, #100	; 0x64
 8005c06:	fb00 f303 	mul.w	r3, r0, r3
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	011b      	lsls	r3, r3, #4
 8005c0e:	3332      	adds	r3, #50	; 0x32
 8005c10:	4a2f      	ldr	r2, [pc, #188]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005c12:	fba2 2303 	umull	r2, r3, r2, r3
 8005c16:	095b      	lsrs	r3, r3, #5
 8005c18:	f003 020f 	and.w	r2, r3, #15
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	440a      	add	r2, r1
 8005c22:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005c24:	e04d      	b.n	8005cc2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c26:	f7ff f897 	bl	8004d58 <HAL_RCC_GetPCLK1Freq>
 8005c2a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009a      	lsls	r2, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c42:	4a23      	ldr	r2, [pc, #140]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	095b      	lsrs	r3, r3, #5
 8005c4a:	0119      	lsls	r1, r3, #4
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009a      	lsls	r2, r3, #2
 8005c56:	441a      	add	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c62:	4b1b      	ldr	r3, [pc, #108]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005c64:	fba3 0302 	umull	r0, r3, r3, r2
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	2064      	movs	r0, #100	; 0x64
 8005c6c:	fb00 f303 	mul.w	r3, r0, r3
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	3332      	adds	r3, #50	; 0x32
 8005c76:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005c78:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c82:	4419      	add	r1, r3
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009a      	lsls	r2, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005c9c:	fba3 0302 	umull	r0, r3, r3, r2
 8005ca0:	095b      	lsrs	r3, r3, #5
 8005ca2:	2064      	movs	r0, #100	; 0x64
 8005ca4:	fb00 f303 	mul.w	r3, r0, r3
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	3332      	adds	r3, #50	; 0x32
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <UART_SetConfig+0x1b0>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	f003 020f 	and.w	r2, r3, #15
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	440a      	add	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]
}
 8005cc2:	bf00      	nop
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	40013800 	.word	0x40013800
 8005cd0:	51eb851f 	.word	0x51eb851f

08005cd4 <__errno>:
 8005cd4:	4b01      	ldr	r3, [pc, #4]	; (8005cdc <__errno+0x8>)
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	2000000c 	.word	0x2000000c

08005ce0 <__libc_init_array>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	4e0c      	ldr	r6, [pc, #48]	; (8005d18 <__libc_init_array+0x38>)
 8005ce6:	4c0d      	ldr	r4, [pc, #52]	; (8005d1c <__libc_init_array+0x3c>)
 8005ce8:	1ba4      	subs	r4, r4, r6
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	42a5      	cmp	r5, r4
 8005cee:	d109      	bne.n	8005d04 <__libc_init_array+0x24>
 8005cf0:	f000 fb92 	bl	8006418 <_init>
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	4e0a      	ldr	r6, [pc, #40]	; (8005d20 <__libc_init_array+0x40>)
 8005cf8:	4c0a      	ldr	r4, [pc, #40]	; (8005d24 <__libc_init_array+0x44>)
 8005cfa:	1ba4      	subs	r4, r4, r6
 8005cfc:	10a4      	asrs	r4, r4, #2
 8005cfe:	42a5      	cmp	r5, r4
 8005d00:	d105      	bne.n	8005d0e <__libc_init_array+0x2e>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d08:	4798      	blx	r3
 8005d0a:	3501      	adds	r5, #1
 8005d0c:	e7ee      	b.n	8005cec <__libc_init_array+0xc>
 8005d0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d12:	4798      	blx	r3
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7f2      	b.n	8005cfe <__libc_init_array+0x1e>
 8005d18:	080064c0 	.word	0x080064c0
 8005d1c:	080064c0 	.word	0x080064c0
 8005d20:	080064c0 	.word	0x080064c0
 8005d24:	080064c4 	.word	0x080064c4

08005d28 <memset>:
 8005d28:	4603      	mov	r3, r0
 8005d2a:	4402      	add	r2, r0
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <memset+0xa>
 8005d30:	4770      	bx	lr
 8005d32:	f803 1b01 	strb.w	r1, [r3], #1
 8005d36:	e7f9      	b.n	8005d2c <memset+0x4>

08005d38 <atan>:
 8005d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	4bb6      	ldr	r3, [pc, #728]	; (8006018 <atan+0x2e0>)
 8005d3e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005d42:	429e      	cmp	r6, r3
 8005d44:	4604      	mov	r4, r0
 8005d46:	460d      	mov	r5, r1
 8005d48:	468b      	mov	fp, r1
 8005d4a:	dd17      	ble.n	8005d7c <atan+0x44>
 8005d4c:	4bb3      	ldr	r3, [pc, #716]	; (800601c <atan+0x2e4>)
 8005d4e:	429e      	cmp	r6, r3
 8005d50:	dc01      	bgt.n	8005d56 <atan+0x1e>
 8005d52:	d109      	bne.n	8005d68 <atan+0x30>
 8005d54:	b140      	cbz	r0, 8005d68 <atan+0x30>
 8005d56:	4622      	mov	r2, r4
 8005d58:	462b      	mov	r3, r5
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa f9fd 	bl	800015c <__adddf3>
 8005d62:	4604      	mov	r4, r0
 8005d64:	460d      	mov	r5, r1
 8005d66:	e005      	b.n	8005d74 <atan+0x3c>
 8005d68:	f1bb 0f00 	cmp.w	fp, #0
 8005d6c:	4cac      	ldr	r4, [pc, #688]	; (8006020 <atan+0x2e8>)
 8005d6e:	f340 8121 	ble.w	8005fb4 <atan+0x27c>
 8005d72:	4dac      	ldr	r5, [pc, #688]	; (8006024 <atan+0x2ec>)
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d7c:	4baa      	ldr	r3, [pc, #680]	; (8006028 <atan+0x2f0>)
 8005d7e:	429e      	cmp	r6, r3
 8005d80:	dc11      	bgt.n	8005da6 <atan+0x6e>
 8005d82:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005d86:	429e      	cmp	r6, r3
 8005d88:	dc0a      	bgt.n	8005da0 <atan+0x68>
 8005d8a:	a38b      	add	r3, pc, #556	; (adr r3, 8005fb8 <atan+0x280>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f7fa f9e4 	bl	800015c <__adddf3>
 8005d94:	2200      	movs	r2, #0
 8005d96:	4ba5      	ldr	r3, [pc, #660]	; (800602c <atan+0x2f4>)
 8005d98:	f7fa fe26 	bl	80009e8 <__aeabi_dcmpgt>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d1e9      	bne.n	8005d74 <atan+0x3c>
 8005da0:	f04f 3aff 	mov.w	sl, #4294967295
 8005da4:	e027      	b.n	8005df6 <atan+0xbe>
 8005da6:	f000 f951 	bl	800604c <fabs>
 8005daa:	4ba1      	ldr	r3, [pc, #644]	; (8006030 <atan+0x2f8>)
 8005dac:	4604      	mov	r4, r0
 8005dae:	429e      	cmp	r6, r3
 8005db0:	460d      	mov	r5, r1
 8005db2:	f300 80b8 	bgt.w	8005f26 <atan+0x1ee>
 8005db6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005dba:	429e      	cmp	r6, r3
 8005dbc:	f300 809c 	bgt.w	8005ef8 <atan+0x1c0>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	f7fa f9ca 	bl	800015c <__adddf3>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4b98      	ldr	r3, [pc, #608]	; (800602c <atan+0x2f4>)
 8005dcc:	f7fa f9c4 	bl	8000158 <__aeabi_dsub>
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f7fa f9bd 	bl	800015c <__adddf3>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4630      	mov	r0, r6
 8005de8:	4639      	mov	r1, r7
 8005dea:	f7fa fc97 	bl	800071c <__aeabi_ddiv>
 8005dee:	f04f 0a00 	mov.w	sl, #0
 8005df2:	4604      	mov	r4, r0
 8005df4:	460d      	mov	r5, r1
 8005df6:	4622      	mov	r2, r4
 8005df8:	462b      	mov	r3, r5
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	f7fa fb63 	bl	80004c8 <__aeabi_dmul>
 8005e02:	4602      	mov	r2, r0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4680      	mov	r8, r0
 8005e08:	4689      	mov	r9, r1
 8005e0a:	f7fa fb5d 	bl	80004c8 <__aeabi_dmul>
 8005e0e:	a36c      	add	r3, pc, #432	; (adr r3, 8005fc0 <atan+0x288>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	f7fa fb56 	bl	80004c8 <__aeabi_dmul>
 8005e1c:	a36a      	add	r3, pc, #424	; (adr r3, 8005fc8 <atan+0x290>)
 8005e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e22:	f7fa f99b 	bl	800015c <__adddf3>
 8005e26:	4632      	mov	r2, r6
 8005e28:	463b      	mov	r3, r7
 8005e2a:	f7fa fb4d 	bl	80004c8 <__aeabi_dmul>
 8005e2e:	a368      	add	r3, pc, #416	; (adr r3, 8005fd0 <atan+0x298>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa f992 	bl	800015c <__adddf3>
 8005e38:	4632      	mov	r2, r6
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	f7fa fb44 	bl	80004c8 <__aeabi_dmul>
 8005e40:	a365      	add	r3, pc, #404	; (adr r3, 8005fd8 <atan+0x2a0>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa f989 	bl	800015c <__adddf3>
 8005e4a:	4632      	mov	r2, r6
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	f7fa fb3b 	bl	80004c8 <__aeabi_dmul>
 8005e52:	a363      	add	r3, pc, #396	; (adr r3, 8005fe0 <atan+0x2a8>)
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	f7fa f980 	bl	800015c <__adddf3>
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	463b      	mov	r3, r7
 8005e60:	f7fa fb32 	bl	80004c8 <__aeabi_dmul>
 8005e64:	a360      	add	r3, pc, #384	; (adr r3, 8005fe8 <atan+0x2b0>)
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f7fa f977 	bl	800015c <__adddf3>
 8005e6e:	4642      	mov	r2, r8
 8005e70:	464b      	mov	r3, r9
 8005e72:	f7fa fb29 	bl	80004c8 <__aeabi_dmul>
 8005e76:	a35e      	add	r3, pc, #376	; (adr r3, 8005ff0 <atan+0x2b8>)
 8005e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	4689      	mov	r9, r1
 8005e80:	4630      	mov	r0, r6
 8005e82:	4639      	mov	r1, r7
 8005e84:	f7fa fb20 	bl	80004c8 <__aeabi_dmul>
 8005e88:	a35b      	add	r3, pc, #364	; (adr r3, 8005ff8 <atan+0x2c0>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa f963 	bl	8000158 <__aeabi_dsub>
 8005e92:	4632      	mov	r2, r6
 8005e94:	463b      	mov	r3, r7
 8005e96:	f7fa fb17 	bl	80004c8 <__aeabi_dmul>
 8005e9a:	a359      	add	r3, pc, #356	; (adr r3, 8006000 <atan+0x2c8>)
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f7fa f95a 	bl	8000158 <__aeabi_dsub>
 8005ea4:	4632      	mov	r2, r6
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	f7fa fb0e 	bl	80004c8 <__aeabi_dmul>
 8005eac:	a356      	add	r3, pc, #344	; (adr r3, 8006008 <atan+0x2d0>)
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	f7fa f951 	bl	8000158 <__aeabi_dsub>
 8005eb6:	4632      	mov	r2, r6
 8005eb8:	463b      	mov	r3, r7
 8005eba:	f7fa fb05 	bl	80004c8 <__aeabi_dmul>
 8005ebe:	a354      	add	r3, pc, #336	; (adr r3, 8006010 <atan+0x2d8>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f7fa f948 	bl	8000158 <__aeabi_dsub>
 8005ec8:	4632      	mov	r2, r6
 8005eca:	463b      	mov	r3, r7
 8005ecc:	f7fa fafc 	bl	80004c8 <__aeabi_dmul>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa f940 	bl	800015c <__adddf3>
 8005edc:	4622      	mov	r2, r4
 8005ede:	462b      	mov	r3, r5
 8005ee0:	f7fa faf2 	bl	80004c8 <__aeabi_dmul>
 8005ee4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	d144      	bne.n	8005f78 <atan+0x240>
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa f931 	bl	8000158 <__aeabi_dsub>
 8005ef6:	e734      	b.n	8005d62 <atan+0x2a>
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4b4c      	ldr	r3, [pc, #304]	; (800602c <atan+0x2f4>)
 8005efc:	f7fa f92c 	bl	8000158 <__aeabi_dsub>
 8005f00:	2200      	movs	r2, #0
 8005f02:	4606      	mov	r6, r0
 8005f04:	460f      	mov	r7, r1
 8005f06:	4b49      	ldr	r3, [pc, #292]	; (800602c <atan+0x2f4>)
 8005f08:	4620      	mov	r0, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	f7fa f926 	bl	800015c <__adddf3>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4630      	mov	r0, r6
 8005f16:	4639      	mov	r1, r7
 8005f18:	f7fa fc00 	bl	800071c <__aeabi_ddiv>
 8005f1c:	f04f 0a01 	mov.w	sl, #1
 8005f20:	4604      	mov	r4, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	e767      	b.n	8005df6 <atan+0xbe>
 8005f26:	4b43      	ldr	r3, [pc, #268]	; (8006034 <atan+0x2fc>)
 8005f28:	429e      	cmp	r6, r3
 8005f2a:	dc1a      	bgt.n	8005f62 <atan+0x22a>
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	4b42      	ldr	r3, [pc, #264]	; (8006038 <atan+0x300>)
 8005f30:	f7fa f912 	bl	8000158 <__aeabi_dsub>
 8005f34:	2200      	movs	r2, #0
 8005f36:	4606      	mov	r6, r0
 8005f38:	460f      	mov	r7, r1
 8005f3a:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <atan+0x300>)
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	4629      	mov	r1, r5
 8005f40:	f7fa fac2 	bl	80004c8 <__aeabi_dmul>
 8005f44:	2200      	movs	r2, #0
 8005f46:	4b39      	ldr	r3, [pc, #228]	; (800602c <atan+0x2f4>)
 8005f48:	f7fa f908 	bl	800015c <__adddf3>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4630      	mov	r0, r6
 8005f52:	4639      	mov	r1, r7
 8005f54:	f7fa fbe2 	bl	800071c <__aeabi_ddiv>
 8005f58:	f04f 0a02 	mov.w	sl, #2
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	460d      	mov	r5, r1
 8005f60:	e749      	b.n	8005df6 <atan+0xbe>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	2000      	movs	r0, #0
 8005f68:	4934      	ldr	r1, [pc, #208]	; (800603c <atan+0x304>)
 8005f6a:	f7fa fbd7 	bl	800071c <__aeabi_ddiv>
 8005f6e:	f04f 0a03 	mov.w	sl, #3
 8005f72:	4604      	mov	r4, r0
 8005f74:	460d      	mov	r5, r1
 8005f76:	e73e      	b.n	8005df6 <atan+0xbe>
 8005f78:	4b31      	ldr	r3, [pc, #196]	; (8006040 <atan+0x308>)
 8005f7a:	4e32      	ldr	r6, [pc, #200]	; (8006044 <atan+0x30c>)
 8005f7c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8005f80:	4456      	add	r6, sl
 8005f82:	449a      	add	sl, r3
 8005f84:	e9da 2300 	ldrd	r2, r3, [sl]
 8005f88:	f7fa f8e6 	bl	8000158 <__aeabi_dsub>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	f7fa f8e2 	bl	8000158 <__aeabi_dsub>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005f9c:	f7fa f8dc 	bl	8000158 <__aeabi_dsub>
 8005fa0:	f1bb 0f00 	cmp.w	fp, #0
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	460d      	mov	r5, r1
 8005fa8:	f6bf aee4 	bge.w	8005d74 <atan+0x3c>
 8005fac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fb0:	461d      	mov	r5, r3
 8005fb2:	e6df      	b.n	8005d74 <atan+0x3c>
 8005fb4:	4d24      	ldr	r5, [pc, #144]	; (8006048 <atan+0x310>)
 8005fb6:	e6dd      	b.n	8005d74 <atan+0x3c>
 8005fb8:	8800759c 	.word	0x8800759c
 8005fbc:	7e37e43c 	.word	0x7e37e43c
 8005fc0:	e322da11 	.word	0xe322da11
 8005fc4:	3f90ad3a 	.word	0x3f90ad3a
 8005fc8:	24760deb 	.word	0x24760deb
 8005fcc:	3fa97b4b 	.word	0x3fa97b4b
 8005fd0:	a0d03d51 	.word	0xa0d03d51
 8005fd4:	3fb10d66 	.word	0x3fb10d66
 8005fd8:	c54c206e 	.word	0xc54c206e
 8005fdc:	3fb745cd 	.word	0x3fb745cd
 8005fe0:	920083ff 	.word	0x920083ff
 8005fe4:	3fc24924 	.word	0x3fc24924
 8005fe8:	5555550d 	.word	0x5555550d
 8005fec:	3fd55555 	.word	0x3fd55555
 8005ff0:	2c6a6c2f 	.word	0x2c6a6c2f
 8005ff4:	bfa2b444 	.word	0xbfa2b444
 8005ff8:	52defd9a 	.word	0x52defd9a
 8005ffc:	3fadde2d 	.word	0x3fadde2d
 8006000:	af749a6d 	.word	0xaf749a6d
 8006004:	3fb3b0f2 	.word	0x3fb3b0f2
 8006008:	fe231671 	.word	0xfe231671
 800600c:	3fbc71c6 	.word	0x3fbc71c6
 8006010:	9998ebc4 	.word	0x9998ebc4
 8006014:	3fc99999 	.word	0x3fc99999
 8006018:	440fffff 	.word	0x440fffff
 800601c:	7ff00000 	.word	0x7ff00000
 8006020:	54442d18 	.word	0x54442d18
 8006024:	3ff921fb 	.word	0x3ff921fb
 8006028:	3fdbffff 	.word	0x3fdbffff
 800602c:	3ff00000 	.word	0x3ff00000
 8006030:	3ff2ffff 	.word	0x3ff2ffff
 8006034:	40037fff 	.word	0x40037fff
 8006038:	3ff80000 	.word	0x3ff80000
 800603c:	bff00000 	.word	0xbff00000
 8006040:	08006498 	.word	0x08006498
 8006044:	08006478 	.word	0x08006478
 8006048:	bff921fb 	.word	0xbff921fb

0800604c <fabs>:
 800604c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006050:	4619      	mov	r1, r3
 8006052:	4770      	bx	lr

08006054 <atan2>:
 8006054:	f000 b854 	b.w	8006100 <__ieee754_atan2>

08006058 <sqrt>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	b08b      	sub	sp, #44	; 0x2c
 800605e:	4604      	mov	r4, r0
 8006060:	460d      	mov	r5, r1
 8006062:	f000 f92b 	bl	80062bc <__ieee754_sqrt>
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <sqrt+0xa0>)
 8006068:	4680      	mov	r8, r0
 800606a:	f993 a000 	ldrsb.w	sl, [r3]
 800606e:	4689      	mov	r9, r1
 8006070:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006074:	d02b      	beq.n	80060ce <sqrt+0x76>
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	4620      	mov	r0, r4
 800607c:	4629      	mov	r1, r5
 800607e:	f7fa fcbd 	bl	80009fc <__aeabi_dcmpun>
 8006082:	4683      	mov	fp, r0
 8006084:	bb18      	cbnz	r0, 80060ce <sqrt+0x76>
 8006086:	2600      	movs	r6, #0
 8006088:	2700      	movs	r7, #0
 800608a:	4632      	mov	r2, r6
 800608c:	463b      	mov	r3, r7
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fc8b 	bl	80009ac <__aeabi_dcmplt>
 8006096:	b1d0      	cbz	r0, 80060ce <sqrt+0x76>
 8006098:	2301      	movs	r3, #1
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4b17      	ldr	r3, [pc, #92]	; (80060fc <sqrt+0xa4>)
 800609e:	f8cd b020 	str.w	fp, [sp, #32]
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80060a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80060ac:	f1ba 0f00 	cmp.w	sl, #0
 80060b0:	d112      	bne.n	80060d8 <sqrt+0x80>
 80060b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80060b6:	4668      	mov	r0, sp
 80060b8:	f000 f9ac 	bl	8006414 <matherr>
 80060bc:	b1b8      	cbz	r0, 80060ee <sqrt+0x96>
 80060be:	9b08      	ldr	r3, [sp, #32]
 80060c0:	b11b      	cbz	r3, 80060ca <sqrt+0x72>
 80060c2:	f7ff fe07 	bl	8005cd4 <__errno>
 80060c6:	9b08      	ldr	r3, [sp, #32]
 80060c8:	6003      	str	r3, [r0, #0]
 80060ca:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80060ce:	4640      	mov	r0, r8
 80060d0:	4649      	mov	r1, r9
 80060d2:	b00b      	add	sp, #44	; 0x2c
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	4632      	mov	r2, r6
 80060da:	463b      	mov	r3, r7
 80060dc:	4630      	mov	r0, r6
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa fb1c 	bl	800071c <__aeabi_ddiv>
 80060e4:	f1ba 0f02 	cmp.w	sl, #2
 80060e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80060ec:	d1e3      	bne.n	80060b6 <sqrt+0x5e>
 80060ee:	f7ff fdf1 	bl	8005cd4 <__errno>
 80060f2:	2321      	movs	r3, #33	; 0x21
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	e7e2      	b.n	80060be <sqrt+0x66>
 80060f8:	20000070 	.word	0x20000070
 80060fc:	080064b8 	.word	0x080064b8

08006100 <__ieee754_atan2>:
 8006100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	4256      	negs	r6, r2
 8006106:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800610a:	4316      	orrs	r6, r2
 800610c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80062b8 <__ieee754_atan2+0x1b8>
 8006110:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8006114:	454e      	cmp	r6, r9
 8006116:	4604      	mov	r4, r0
 8006118:	460d      	mov	r5, r1
 800611a:	469e      	mov	lr, r3
 800611c:	d808      	bhi.n	8006130 <__ieee754_atan2+0x30>
 800611e:	4246      	negs	r6, r0
 8006120:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006124:	4306      	orrs	r6, r0
 8006126:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800612a:	454e      	cmp	r6, r9
 800612c:	4688      	mov	r8, r1
 800612e:	d906      	bls.n	800613e <__ieee754_atan2+0x3e>
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	f7fa f812 	bl	800015c <__adddf3>
 8006138:	4604      	mov	r4, r0
 800613a:	460d      	mov	r5, r1
 800613c:	e030      	b.n	80061a0 <__ieee754_atan2+0xa0>
 800613e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006142:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006146:	4316      	orrs	r6, r2
 8006148:	d103      	bne.n	8006152 <__ieee754_atan2+0x52>
 800614a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614e:	f7ff bdf3 	b.w	8005d38 <atan>
 8006152:	179e      	asrs	r6, r3, #30
 8006154:	f006 0602 	and.w	r6, r6, #2
 8006158:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800615c:	ea57 0100 	orrs.w	r1, r7, r0
 8006160:	d107      	bne.n	8006172 <__ieee754_atan2+0x72>
 8006162:	2e02      	cmp	r6, #2
 8006164:	d079      	beq.n	800625a <__ieee754_atan2+0x15a>
 8006166:	2e03      	cmp	r6, #3
 8006168:	d11a      	bne.n	80061a0 <__ieee754_atan2+0xa0>
 800616a:	a541      	add	r5, pc, #260	; (adr r5, 8006270 <__ieee754_atan2+0x170>)
 800616c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006170:	e016      	b.n	80061a0 <__ieee754_atan2+0xa0>
 8006172:	ea5c 0102 	orrs.w	r1, ip, r2
 8006176:	d106      	bne.n	8006186 <__ieee754_atan2+0x86>
 8006178:	f1b8 0f00 	cmp.w	r8, #0
 800617c:	da71      	bge.n	8006262 <__ieee754_atan2+0x162>
 800617e:	a53e      	add	r5, pc, #248	; (adr r5, 8006278 <__ieee754_atan2+0x178>)
 8006180:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006184:	e00c      	b.n	80061a0 <__ieee754_atan2+0xa0>
 8006186:	45cc      	cmp	ip, r9
 8006188:	d123      	bne.n	80061d2 <__ieee754_atan2+0xd2>
 800618a:	4567      	cmp	r7, ip
 800618c:	d114      	bne.n	80061b8 <__ieee754_atan2+0xb8>
 800618e:	2e02      	cmp	r6, #2
 8006190:	d00a      	beq.n	80061a8 <__ieee754_atan2+0xa8>
 8006192:	2e03      	cmp	r6, #3
 8006194:	d00c      	beq.n	80061b0 <__ieee754_atan2+0xb0>
 8006196:	2e01      	cmp	r6, #1
 8006198:	d15b      	bne.n	8006252 <__ieee754_atan2+0x152>
 800619a:	a539      	add	r5, pc, #228	; (adr r5, 8006280 <__ieee754_atan2+0x180>)
 800619c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80061a0:	4620      	mov	r0, r4
 80061a2:	4629      	mov	r1, r5
 80061a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a8:	a537      	add	r5, pc, #220	; (adr r5, 8006288 <__ieee754_atan2+0x188>)
 80061aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80061ae:	e7f7      	b.n	80061a0 <__ieee754_atan2+0xa0>
 80061b0:	a537      	add	r5, pc, #220	; (adr r5, 8006290 <__ieee754_atan2+0x190>)
 80061b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80061b6:	e7f3      	b.n	80061a0 <__ieee754_atan2+0xa0>
 80061b8:	2e02      	cmp	r6, #2
 80061ba:	d04e      	beq.n	800625a <__ieee754_atan2+0x15a>
 80061bc:	2e03      	cmp	r6, #3
 80061be:	d0d4      	beq.n	800616a <__ieee754_atan2+0x6a>
 80061c0:	2e01      	cmp	r6, #1
 80061c2:	f04f 0400 	mov.w	r4, #0
 80061c6:	d102      	bne.n	80061ce <__ieee754_atan2+0xce>
 80061c8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80061cc:	e7e8      	b.n	80061a0 <__ieee754_atan2+0xa0>
 80061ce:	2500      	movs	r5, #0
 80061d0:	e7e6      	b.n	80061a0 <__ieee754_atan2+0xa0>
 80061d2:	454f      	cmp	r7, r9
 80061d4:	d0d0      	beq.n	8006178 <__ieee754_atan2+0x78>
 80061d6:	eba7 070c 	sub.w	r7, r7, ip
 80061da:	153f      	asrs	r7, r7, #20
 80061dc:	2f3c      	cmp	r7, #60	; 0x3c
 80061de:	dc1e      	bgt.n	800621e <__ieee754_atan2+0x11e>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da01      	bge.n	80061e8 <__ieee754_atan2+0xe8>
 80061e4:	373c      	adds	r7, #60	; 0x3c
 80061e6:	db1e      	blt.n	8006226 <__ieee754_atan2+0x126>
 80061e8:	4620      	mov	r0, r4
 80061ea:	4629      	mov	r1, r5
 80061ec:	f7fa fa96 	bl	800071c <__aeabi_ddiv>
 80061f0:	f7ff ff2c 	bl	800604c <fabs>
 80061f4:	f7ff fda0 	bl	8005d38 <atan>
 80061f8:	4604      	mov	r4, r0
 80061fa:	460d      	mov	r5, r1
 80061fc:	2e01      	cmp	r6, #1
 80061fe:	d015      	beq.n	800622c <__ieee754_atan2+0x12c>
 8006200:	2e02      	cmp	r6, #2
 8006202:	d017      	beq.n	8006234 <__ieee754_atan2+0x134>
 8006204:	2e00      	cmp	r6, #0
 8006206:	d0cb      	beq.n	80061a0 <__ieee754_atan2+0xa0>
 8006208:	a323      	add	r3, pc, #140	; (adr r3, 8006298 <__ieee754_atan2+0x198>)
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7f9 ffa1 	bl	8000158 <__aeabi_dsub>
 8006216:	a322      	add	r3, pc, #136	; (adr r3, 80062a0 <__ieee754_atan2+0x1a0>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	e016      	b.n	800624c <__ieee754_atan2+0x14c>
 800621e:	a522      	add	r5, pc, #136	; (adr r5, 80062a8 <__ieee754_atan2+0x1a8>)
 8006220:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006224:	e7ea      	b.n	80061fc <__ieee754_atan2+0xfc>
 8006226:	2400      	movs	r4, #0
 8006228:	2500      	movs	r5, #0
 800622a:	e7e7      	b.n	80061fc <__ieee754_atan2+0xfc>
 800622c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006230:	461d      	mov	r5, r3
 8006232:	e7b5      	b.n	80061a0 <__ieee754_atan2+0xa0>
 8006234:	a318      	add	r3, pc, #96	; (adr r3, 8006298 <__ieee754_atan2+0x198>)
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	4620      	mov	r0, r4
 800623c:	4629      	mov	r1, r5
 800623e:	f7f9 ff8b 	bl	8000158 <__aeabi_dsub>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	a116      	add	r1, pc, #88	; (adr r1, 80062a0 <__ieee754_atan2+0x1a0>)
 8006248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800624c:	f7f9 ff84 	bl	8000158 <__aeabi_dsub>
 8006250:	e772      	b.n	8006138 <__ieee754_atan2+0x38>
 8006252:	a517      	add	r5, pc, #92	; (adr r5, 80062b0 <__ieee754_atan2+0x1b0>)
 8006254:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006258:	e7a2      	b.n	80061a0 <__ieee754_atan2+0xa0>
 800625a:	a511      	add	r5, pc, #68	; (adr r5, 80062a0 <__ieee754_atan2+0x1a0>)
 800625c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006260:	e79e      	b.n	80061a0 <__ieee754_atan2+0xa0>
 8006262:	a511      	add	r5, pc, #68	; (adr r5, 80062a8 <__ieee754_atan2+0x1a8>)
 8006264:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006268:	e79a      	b.n	80061a0 <__ieee754_atan2+0xa0>
 800626a:	bf00      	nop
 800626c:	f3af 8000 	nop.w
 8006270:	54442d18 	.word	0x54442d18
 8006274:	c00921fb 	.word	0xc00921fb
 8006278:	54442d18 	.word	0x54442d18
 800627c:	bff921fb 	.word	0xbff921fb
 8006280:	54442d18 	.word	0x54442d18
 8006284:	bfe921fb 	.word	0xbfe921fb
 8006288:	7f3321d2 	.word	0x7f3321d2
 800628c:	4002d97c 	.word	0x4002d97c
 8006290:	7f3321d2 	.word	0x7f3321d2
 8006294:	c002d97c 	.word	0xc002d97c
 8006298:	33145c07 	.word	0x33145c07
 800629c:	3ca1a626 	.word	0x3ca1a626
 80062a0:	54442d18 	.word	0x54442d18
 80062a4:	400921fb 	.word	0x400921fb
 80062a8:	54442d18 	.word	0x54442d18
 80062ac:	3ff921fb 	.word	0x3ff921fb
 80062b0:	54442d18 	.word	0x54442d18
 80062b4:	3fe921fb 	.word	0x3fe921fb
 80062b8:	7ff00000 	.word	0x7ff00000

080062bc <__ieee754_sqrt>:
 80062bc:	4b54      	ldr	r3, [pc, #336]	; (8006410 <__ieee754_sqrt+0x154>)
 80062be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c2:	438b      	bics	r3, r1
 80062c4:	4606      	mov	r6, r0
 80062c6:	460d      	mov	r5, r1
 80062c8:	460a      	mov	r2, r1
 80062ca:	460c      	mov	r4, r1
 80062cc:	d10f      	bne.n	80062ee <__ieee754_sqrt+0x32>
 80062ce:	4602      	mov	r2, r0
 80062d0:	460b      	mov	r3, r1
 80062d2:	f7fa f8f9 	bl	80004c8 <__aeabi_dmul>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4630      	mov	r0, r6
 80062dc:	4629      	mov	r1, r5
 80062de:	f7f9 ff3d 	bl	800015c <__adddf3>
 80062e2:	4606      	mov	r6, r0
 80062e4:	460d      	mov	r5, r1
 80062e6:	4630      	mov	r0, r6
 80062e8:	4629      	mov	r1, r5
 80062ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ee:	2900      	cmp	r1, #0
 80062f0:	4607      	mov	r7, r0
 80062f2:	4603      	mov	r3, r0
 80062f4:	dc0e      	bgt.n	8006314 <__ieee754_sqrt+0x58>
 80062f6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80062fa:	ea5c 0707 	orrs.w	r7, ip, r7
 80062fe:	d0f2      	beq.n	80062e6 <__ieee754_sqrt+0x2a>
 8006300:	b141      	cbz	r1, 8006314 <__ieee754_sqrt+0x58>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	f7f9 ff27 	bl	8000158 <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	f7fa fa05 	bl	800071c <__aeabi_ddiv>
 8006312:	e7e6      	b.n	80062e2 <__ieee754_sqrt+0x26>
 8006314:	1512      	asrs	r2, r2, #20
 8006316:	d074      	beq.n	8006402 <__ieee754_sqrt+0x146>
 8006318:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800631c:	07d5      	lsls	r5, r2, #31
 800631e:	f04f 0500 	mov.w	r5, #0
 8006322:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006326:	bf48      	it	mi
 8006328:	0fd9      	lsrmi	r1, r3, #31
 800632a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800632e:	bf44      	itt	mi
 8006330:	005b      	lslmi	r3, r3, #1
 8006332:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006336:	1051      	asrs	r1, r2, #1
 8006338:	0fda      	lsrs	r2, r3, #31
 800633a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800633e:	4628      	mov	r0, r5
 8006340:	2216      	movs	r2, #22
 8006342:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	1987      	adds	r7, r0, r6
 800634a:	42a7      	cmp	r7, r4
 800634c:	bfde      	ittt	le
 800634e:	19b8      	addle	r0, r7, r6
 8006350:	1be4      	suble	r4, r4, r7
 8006352:	19ad      	addle	r5, r5, r6
 8006354:	0fdf      	lsrs	r7, r3, #31
 8006356:	3a01      	subs	r2, #1
 8006358:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800635c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006360:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006364:	d1f0      	bne.n	8006348 <__ieee754_sqrt+0x8c>
 8006366:	f04f 0c20 	mov.w	ip, #32
 800636a:	4696      	mov	lr, r2
 800636c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006370:	4284      	cmp	r4, r0
 8006372:	eb06 070e 	add.w	r7, r6, lr
 8006376:	dc02      	bgt.n	800637e <__ieee754_sqrt+0xc2>
 8006378:	d112      	bne.n	80063a0 <__ieee754_sqrt+0xe4>
 800637a:	429f      	cmp	r7, r3
 800637c:	d810      	bhi.n	80063a0 <__ieee754_sqrt+0xe4>
 800637e:	2f00      	cmp	r7, #0
 8006380:	eb07 0e06 	add.w	lr, r7, r6
 8006384:	da42      	bge.n	800640c <__ieee754_sqrt+0x150>
 8006386:	f1be 0f00 	cmp.w	lr, #0
 800638a:	db3f      	blt.n	800640c <__ieee754_sqrt+0x150>
 800638c:	f100 0801 	add.w	r8, r0, #1
 8006390:	1a24      	subs	r4, r4, r0
 8006392:	4640      	mov	r0, r8
 8006394:	429f      	cmp	r7, r3
 8006396:	bf88      	it	hi
 8006398:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800639c:	1bdb      	subs	r3, r3, r7
 800639e:	4432      	add	r2, r6
 80063a0:	0064      	lsls	r4, r4, #1
 80063a2:	f1bc 0c01 	subs.w	ip, ip, #1
 80063a6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80063aa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80063ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80063b2:	d1dd      	bne.n	8006370 <__ieee754_sqrt+0xb4>
 80063b4:	4323      	orrs	r3, r4
 80063b6:	d006      	beq.n	80063c6 <__ieee754_sqrt+0x10a>
 80063b8:	1c54      	adds	r4, r2, #1
 80063ba:	bf0b      	itete	eq
 80063bc:	4662      	moveq	r2, ip
 80063be:	3201      	addne	r2, #1
 80063c0:	3501      	addeq	r5, #1
 80063c2:	f022 0201 	bicne.w	r2, r2, #1
 80063c6:	106b      	asrs	r3, r5, #1
 80063c8:	0852      	lsrs	r2, r2, #1
 80063ca:	07e8      	lsls	r0, r5, #31
 80063cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80063d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80063d4:	bf48      	it	mi
 80063d6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80063da:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80063de:	4616      	mov	r6, r2
 80063e0:	e781      	b.n	80062e6 <__ieee754_sqrt+0x2a>
 80063e2:	0adc      	lsrs	r4, r3, #11
 80063e4:	3915      	subs	r1, #21
 80063e6:	055b      	lsls	r3, r3, #21
 80063e8:	2c00      	cmp	r4, #0
 80063ea:	d0fa      	beq.n	80063e2 <__ieee754_sqrt+0x126>
 80063ec:	02e6      	lsls	r6, r4, #11
 80063ee:	d50a      	bpl.n	8006406 <__ieee754_sqrt+0x14a>
 80063f0:	f1c2 0020 	rsb	r0, r2, #32
 80063f4:	fa23 f000 	lsr.w	r0, r3, r0
 80063f8:	1e55      	subs	r5, r2, #1
 80063fa:	4093      	lsls	r3, r2
 80063fc:	4304      	orrs	r4, r0
 80063fe:	1b4a      	subs	r2, r1, r5
 8006400:	e78a      	b.n	8006318 <__ieee754_sqrt+0x5c>
 8006402:	4611      	mov	r1, r2
 8006404:	e7f0      	b.n	80063e8 <__ieee754_sqrt+0x12c>
 8006406:	0064      	lsls	r4, r4, #1
 8006408:	3201      	adds	r2, #1
 800640a:	e7ef      	b.n	80063ec <__ieee754_sqrt+0x130>
 800640c:	4680      	mov	r8, r0
 800640e:	e7bf      	b.n	8006390 <__ieee754_sqrt+0xd4>
 8006410:	7ff00000 	.word	0x7ff00000

08006414 <matherr>:
 8006414:	2000      	movs	r0, #0
 8006416:	4770      	bx	lr

08006418 <_init>:
 8006418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641a:	bf00      	nop
 800641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800641e:	bc08      	pop	{r3}
 8006420:	469e      	mov	lr, r3
 8006422:	4770      	bx	lr

08006424 <_fini>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	bf00      	nop
 8006428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642a:	bc08      	pop	{r3}
 800642c:	469e      	mov	lr, r3
 800642e:	4770      	bx	lr
