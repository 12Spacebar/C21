
C21_HC05_MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001fa4  08001fa4  00011fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fd0  08001fd0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000010  08001fe4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08001fe4  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fdd  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001565  00000000  00000000  00029012  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002a578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  0002ae60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013c73  00000000  00000000  0002b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006ca5  00000000  00000000  0003f33b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006d6f4  00000000  00000000  00045fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b36d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f4  00000000  00000000  000b3750  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001f8c 	.word	0x08001f8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001f8c 	.word	0x08001f8c

0800014c <wait_for_gpio_state_timeout>:
#define I2C1_SCL_Pin       GPIO_PIN_8
#define I2C1_SDA_Pin       GPIO_PIN_9


static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin, GPIO_PinState state, uint32_t timeout)
 {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	460b      	mov	r3, r1
 8000158:	817b      	strh	r3, [r7, #10]
 800015a:	4613      	mov	r3, r2
 800015c:	727b      	strb	r3, [r7, #9]
    uint32_t Tickstart = HAL_GetTick();
 800015e:	f000 fb83 	bl	8000868 <HAL_GetTick>
 8000162:	6138      	str	r0, [r7, #16]
    uint8_t ret = 1;
 8000164:	2301      	movs	r3, #1
 8000166:	75fb      	strb	r3, [r7, #23]
    /* Wait until flag is set */
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 8000168:	e011      	b.n	800018e <wait_for_gpio_state_timeout+0x42>
    {
        /* Check for the timeout */
        if (timeout != HAL_MAX_DELAY)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000170:	d00c      	beq.n	800018c <wait_for_gpio_state_timeout+0x40>
        {
            if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b00      	cmp	r3, #0
 8000176:	d007      	beq.n	8000188 <wait_for_gpio_state_timeout+0x3c>
 8000178:	f000 fb76 	bl	8000868 <HAL_GetTick>
 800017c:	4602      	mov	r2, r0
 800017e:	693b      	ldr	r3, [r7, #16]
 8000180:	1ad3      	subs	r3, r2, r3
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	429a      	cmp	r2, r3
 8000186:	d201      	bcs.n	800018c <wait_for_gpio_state_timeout+0x40>
            {
                ret = 0;
 8000188:	2300      	movs	r3, #0
 800018a:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
            }
        }
        asm("nop");
 800018c:	bf00      	nop
    for(;(state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);)
 800018e:	897b      	ldrh	r3, [r7, #10]
 8000190:	4619      	mov	r1, r3
 8000192:	68f8      	ldr	r0, [r7, #12]
 8000194:	f000 fe6c 	bl	8000e70 <HAL_GPIO_ReadPin>
 8000198:	4603      	mov	r3, r0
 800019a:	461a      	mov	r2, r3
 800019c:	7a7b      	ldrb	r3, [r7, #9]
 800019e:	4293      	cmp	r3, r2
 80001a0:	d002      	beq.n	80001a8 <wait_for_gpio_state_timeout+0x5c>
 80001a2:	7dfb      	ldrb	r3, [r7, #23]
 80001a4:	2b01      	cmp	r3, #1
 80001a6:	d0e0      	beq.n	800016a <wait_for_gpio_state_timeout+0x1e>
    }
    return ret;
 80001a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3718      	adds	r7, #24
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
	...

080001b4 <I2C_ClearBusyFlagErratum>:


static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef* handle, uint32_t timeout)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	6039      	str	r1, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    // 1. Clear PE bit.
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_PE);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f022 0201 	bic.w	r2, r2, #1
 80001cc:	601a      	str	r2, [r3, #0]

    //  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_I2C_DeInit(handle);
 80001ce:	6878      	ldr	r0, [r7, #4]
 80001d0:	f000 ffb6 	bl	8001140 <HAL_I2C_DeInit>

    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80001d4:	2311      	movs	r3, #17
 80001d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80001d8:	2300      	movs	r3, #0
 80001da:	613b      	str	r3, [r7, #16]

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 80001dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001e0:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80001e2:	f107 0308 	add.w	r3, r7, #8
 80001e6:	4619      	mov	r1, r3
 80001e8:	4847      	ldr	r0, [pc, #284]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 80001ea:	f000 fc2b 	bl	8000a44 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 80001ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80001f2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 80001f4:	f107 0308 	add.w	r3, r7, #8
 80001f8:	4619      	mov	r1, r3
 80001fa:	4843      	ldr	r0, [pc, #268]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 80001fc:	f000 fc22 	bl	8000a44 <HAL_GPIO_Init>

    // 3. Check SCL and SDA High level in GPIOx_IDR.
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000206:	4840      	ldr	r0, [pc, #256]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000208:	f000 fe49 	bl	8000e9e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000212:	483d      	ldr	r0, [pc, #244]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000214:	f000 fe43 	bl	8000e9e <HAL_GPIO_WritePin>

    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000220:	4839      	ldr	r0, [pc, #228]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000222:	f7ff ff93 	bl	800014c <wait_for_gpio_state_timeout>
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800022e:	4836      	ldr	r0, [pc, #216]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000230:	f7ff ff8c 	bl	800014c <wait_for_gpio_state_timeout>

    // 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800023a:	4833      	ldr	r0, [pc, #204]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 800023c:	f000 fe2f 	bl	8000e9e <HAL_GPIO_WritePin>

    // 5. Check SDA Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_RESET, timeout);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000248:	482f      	ldr	r0, [pc, #188]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 800024a:	f7ff ff7f 	bl	800014c <wait_for_gpio_state_timeout>

    // 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000254:	482c      	ldr	r0, [pc, #176]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000256:	f000 fe22 	bl	8000e9e <HAL_GPIO_WritePin>

    // 7. Check SCL Low level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_RESET, timeout);
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000262:	4829      	ldr	r0, [pc, #164]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000264:	f7ff ff72 	bl	800014c <wait_for_gpio_state_timeout>

    // 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026e:	4826      	ldr	r0, [pc, #152]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000270:	f000 fe15 	bl	8000e9e <HAL_GPIO_WritePin>

    // 9. Check SCL High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin, GPIO_PIN_SET, timeout);
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	2201      	movs	r2, #1
 8000278:	f44f 7180 	mov.w	r1, #256	; 0x100
 800027c:	4822      	ldr	r0, [pc, #136]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 800027e:	f7ff ff65 	bl	800014c <wait_for_gpio_state_timeout>

    // 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
    HAL_GPIO_WritePin(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000288:	481f      	ldr	r0, [pc, #124]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 800028a:	f000 fe08 	bl	8000e9e <HAL_GPIO_WritePin>

    // 11. Check SDA High level in GPIOx_IDR.
    wait_for_gpio_state_timeout(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin, GPIO_PIN_SET, timeout);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000296:	481c      	ldr	r0, [pc, #112]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 8000298:	f7ff ff58 	bl	800014c <wait_for_gpio_state_timeout>

    // 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
    GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 800029c:	2312      	movs	r3, #18
 800029e:	60fb      	str	r3, [r7, #12]
//    GPIO_InitStructure.Alternate = GPIO_AF1_I2C1;

    GPIO_InitStructure.Pin = I2C1_SCL_Pin;
 80002a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002a4:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStructure);
 80002a6:	f107 0308 	add.w	r3, r7, #8
 80002aa:	4619      	mov	r1, r3
 80002ac:	4816      	ldr	r0, [pc, #88]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 80002ae:	f000 fbc9 	bl	8000a44 <HAL_GPIO_Init>

    GPIO_InitStructure.Pin = I2C1_SDA_Pin;
 80002b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80002b6:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStructure);
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	4619      	mov	r1, r3
 80002be:	4812      	ldr	r0, [pc, #72]	; (8000308 <I2C_ClearBusyFlagErratum+0x154>)
 80002c0:	f000 fbc0 	bl	8000a44 <HAL_GPIO_Init>

    // 13. Set SWRST bit in I2Cx_CR1 register.
    SET_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80002d2:	601a      	str	r2, [r3, #0]
    asm("nop");
 80002d4:	bf00      	nop

    /* 14. Clear SWRST bit in I2Cx_CR1 register. */
    CLEAR_BIT(handle->Instance->CR1, I2C_CR1_SWRST);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80002e4:	601a      	str	r2, [r3, #0]
    asm("nop");
 80002e6:	bf00      	nop

    /* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    SET_BIT(handle->Instance->CR1, I2C_CR1_PE);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f042 0201 	orr.w	r2, r2, #1
 80002f6:	601a      	str	r2, [r3, #0]
    asm("nop");
 80002f8:	bf00      	nop

    // Call initialization function.
    HAL_I2C_Init(handle);
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 fde8 	bl	8000ed0 <HAL_I2C_Init>
}
 8000300:	bf00      	nop
 8000302:	3718      	adds	r7, #24
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40010c00 	.word	0x40010c00

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000310:	f000 fa52 	bl	80007b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000314:	f000 f81e 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000318:	f000 f8b0 	bl	800047c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800031c:	f000 f884 	bl	8000428 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000320:	f000 f854 	bl	80003cc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  init_MPU();
  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8000324:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <main+0x44>)
 800032a:	f7ff ff43 	bl	80001b4 <I2C_ClearBusyFlagErratum>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		  while((HAL_I2C_IsDeviceReady(&hi2c1, 0xD0, 3, 200) != HAL_OK)){
 800032e:	e004      	b.n	800033a <main+0x2e>
			  I2C_ClearBusyFlagErratum(&hi2c1, 1000);
 8000330:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000334:	4806      	ldr	r0, [pc, #24]	; (8000350 <main+0x44>)
 8000336:	f7ff ff3d 	bl	80001b4 <I2C_ClearBusyFlagErratum>
		  while((HAL_I2C_IsDeviceReady(&hi2c1, 0xD0, 3, 200) != HAL_OK)){
 800033a:	23c8      	movs	r3, #200	; 0xc8
 800033c:	2203      	movs	r2, #3
 800033e:	21d0      	movs	r1, #208	; 0xd0
 8000340:	4803      	ldr	r0, [pc, #12]	; (8000350 <main+0x44>)
 8000342:	f000 ff2d 	bl	80011a0 <HAL_I2C_IsDeviceReady>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1f1      	bne.n	8000330 <main+0x24>
 800034c:	e7f5      	b.n	800033a <main+0x2e>
 800034e:	bf00      	nop
 8000350:	20000058 	.word	0x20000058

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	; 0x40
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f001 fe0a 	bl	8001f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000376:	2302      	movs	r3, #2
 8000378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037a:	2301      	movs	r3, #1
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	2310      	movs	r3, #16
 8000380:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000382:	2300      	movs	r3, #0
 8000384:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0318 	add.w	r3, r7, #24
 800038a:	4618      	mov	r0, r3
 800038c:	f001 f88e 	bl	80014ac <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000396:	f000 f893 	bl	80004c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800039e:	2300      	movs	r3, #0
 80003a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ae:	1d3b      	adds	r3, r7, #4
 80003b0:	2100      	movs	r1, #0
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 fafa 	bl	80019ac <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003be:	f000 f87f 	bl	80004c0 <Error_Handler>
  }
}
 80003c2:	bf00      	nop
 80003c4:	3740      	adds	r7, #64	; 0x40
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
	...

080003cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_I2C1_Init+0x50>)
 80003d2:	4a13      	ldr	r2, [pc, #76]	; (8000420 <MX_I2C1_Init+0x54>)
 80003d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003d6:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_I2C1_Init+0x50>)
 80003d8:	4a12      	ldr	r2, [pc, #72]	; (8000424 <MX_I2C1_Init+0x58>)
 80003da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_I2C1_Init+0x50>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_I2C1_Init+0x50>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_I2C1_Init+0x50>)
 80003ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_I2C1_Init+0x50>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_I2C1_Init+0x50>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_I2C1_Init+0x50>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_I2C1_Init+0x50>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_I2C1_Init+0x50>)
 800040a:	f000 fd61 	bl	8000ed0 <HAL_I2C_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000414:	f000 f854 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	20000058 	.word	0x20000058
 8000420:	40005400 	.word	0x40005400
 8000424:	00061a80 	.word	0x00061a80

08000428 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <MX_USART1_UART_Init+0x50>)
 8000430:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000432:	4b10      	ldr	r3, [pc, #64]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000434:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000438:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000446:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800044e:	220c      	movs	r2, #12
 8000450:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000454:	2200      	movs	r2, #0
 8000456:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000458:	4b06      	ldr	r3, [pc, #24]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 800045a:	2200      	movs	r2, #0
 800045c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <MX_USART1_UART_Init+0x4c>)
 8000460:	f001 fc40 	bl	8001ce4 <HAL_UART_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800046a:	f000 f829 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000120 	.word	0x20000120
 8000478:	40013800 	.word	0x40013800

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <MX_GPIO_Init+0x40>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a0d      	ldr	r2, [pc, #52]	; (80004bc <MX_GPIO_Init+0x40>)
 8000488:	f043 0304 	orr.w	r3, r3, #4
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MX_GPIO_Init+0x40>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0304 	and.w	r3, r3, #4
 8000496:	607b      	str	r3, [r7, #4]
 8000498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <MX_GPIO_Init+0x40>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a07      	ldr	r2, [pc, #28]	; (80004bc <MX_GPIO_Init+0x40>)
 80004a0:	f043 0308 	orr.w	r3, r3, #8
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b05      	ldr	r3, [pc, #20]	; (80004bc <MX_GPIO_Init+0x40>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0308 	and.w	r3, r3, #8
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	40021000 	.word	0x40021000

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x5c>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	4a14      	ldr	r2, [pc, #80]	; (8000528 <HAL_MspInit+0x5c>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6193      	str	r3, [r2, #24]
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x5c>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x5c>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x5c>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	61d3      	str	r3, [r2, #28]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x5c>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x60>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x60>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b08a      	sub	sp, #40	; 0x28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a1d      	ldr	r2, [pc, #116]	; (80005c0 <HAL_I2C_MspInit+0x90>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d132      	bne.n	80005b6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <HAL_I2C_MspInit+0x94>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <HAL_I2C_MspInit+0x94>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <HAL_I2C_MspInit+0x94>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000568:	f44f 7340 	mov.w	r3, #768	; 0x300
 800056c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800056e:	2312      	movs	r3, #18
 8000570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000572:	2301      	movs	r3, #1
 8000574:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	4619      	mov	r1, r3
 800057c:	4812      	ldr	r0, [pc, #72]	; (80005c8 <HAL_I2C_MspInit+0x98>)
 800057e:	f000 fa61 	bl	8000a44 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000582:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_I2C_MspInit+0x9c>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
 8000588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800058e:	627b      	str	r3, [r7, #36]	; 0x24
 8000590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000592:	f043 0302 	orr.w	r3, r3, #2
 8000596:	627b      	str	r3, [r7, #36]	; 0x24
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <HAL_I2C_MspInit+0x9c>)
 800059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_I2C_MspInit+0x94>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_I2C_MspInit+0x94>)
 80005a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_I2C_MspInit+0x94>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40005400 	.word	0x40005400
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40010c00 	.word	0x40010c00
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <HAL_I2C_MspDeInit+0x3c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d10f      	bne.n	8000602 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_I2C_MspDeInit+0x40>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_I2C_MspDeInit+0x40>)
 80005e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80005ec:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80005ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <HAL_I2C_MspDeInit+0x44>)
 80005f4:	f000 fb80 	bl	8000cf8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80005f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <HAL_I2C_MspDeInit+0x44>)
 80005fe:	f000 fb7b 	bl	8000cf8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40005400 	.word	0x40005400
 8000610:	40021000 	.word	0x40021000
 8000614:	40010c00 	.word	0x40010c00

08000618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <HAL_UART_MspInit+0x8c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d131      	bne.n	800069c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <HAL_UART_MspInit+0x90>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a1a      	ldr	r2, [pc, #104]	; (80006a8 <HAL_UART_MspInit+0x90>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <HAL_UART_MspInit+0x90>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_UART_MspInit+0x90>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <HAL_UART_MspInit+0x90>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_UART_MspInit+0x90>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800066c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <HAL_UART_MspInit+0x94>)
 800067e:	f000 f9e1 	bl	8000a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <HAL_UART_MspInit+0x94>)
 8000698:	f000 f9d4 	bl	8000a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800069c:	bf00      	nop
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40013800 	.word	0x40013800
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010800 	.word	0x40010800

080006b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <HardFault_Handler+0x4>

080006c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c6:	e7fe      	b.n	80006c6 <MemManage_Handler+0x4>

080006c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <BusFault_Handler+0x4>

080006ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <UsageFault_Handler+0x4>

080006d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006fc:	f000 f8a2 	bl	8000844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <SystemInit+0x5c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <SystemInit+0x5c>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <SystemInit+0x5c>)
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	4911      	ldr	r1, [pc, #68]	; (8000760 <SystemInit+0x5c>)
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <SystemInit+0x60>)
 800071c:	4013      	ands	r3, r2
 800071e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <SystemInit+0x5c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <SystemInit+0x5c>)
 8000726:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800072a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800072e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <SystemInit+0x5c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <SystemInit+0x5c>)
 8000736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <SystemInit+0x5c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a07      	ldr	r2, [pc, #28]	; (8000760 <SystemInit+0x5c>)
 8000742:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000746:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000748:	4b05      	ldr	r3, [pc, #20]	; (8000760 <SystemInit+0x5c>)
 800074a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800074e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SystemInit+0x64>)
 8000752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000756:	609a      	str	r2, [r3, #8]
#endif 
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	f8ff0000 	.word	0xf8ff0000
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800076c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800076e:	e003      	b.n	8000778 <LoopCopyDataInit>

08000770 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000772:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000774:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000776:	3104      	adds	r1, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800077c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800077e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000780:	d3f6      	bcc.n	8000770 <CopyDataInit>
  ldr r2, =_sbss
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000784:	e002      	b.n	800078c <LoopFillZerobss>

08000786 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000788:	f842 3b04 	str.w	r3, [r2], #4

0800078c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800078e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000790:	d3f9      	bcc.n	8000786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000792:	f7ff ffb7 	bl	8000704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000796:	f001 fbcd 	bl	8001f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079a:	f7ff fdb7 	bl	800030c <main>
  bx lr
 800079e:	4770      	bx	lr
  ldr r3, =_sidata
 80007a0:	08001fd8 	.word	0x08001fd8
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007ac:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80007b0:	200003ac 	.word	0x200003ac

080007b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b4:	e7fe      	b.n	80007b4 <ADC1_2_IRQHandler>
	...

080007b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_Init+0x28>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <HAL_Init+0x28>)
 80007c2:	f043 0310 	orr.w	r3, r3, #16
 80007c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f907 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 f808 	bl	80007e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff fe7a 	bl	80004cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40022000 	.word	0x40022000

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x54>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_InitTick+0x58>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f911 	bl	8000a2a <HAL_SYSTICK_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e00e      	b.n	8000830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d80a      	bhi.n	800082e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000818:	2200      	movs	r2, #0
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f000 f8e7 	bl	80009f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_InitTick+0x5c>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
 800082c:	e000      	b.n	8000830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
}
 8000830:	4618      	mov	r0, r3
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000000 	.word	0x20000000
 800083c:	20000008 	.word	0x20000008
 8000840:	20000004 	.word	0x20000004

08000844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x1c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_IncTick+0x20>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4413      	add	r3, r2
 8000854:	4a03      	ldr	r2, [pc, #12]	; (8000864 <HAL_IncTick+0x20>)
 8000856:	6013      	str	r3, [r2, #0]
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr
 8000860:	20000008 	.word	0x20000008
 8000864:	200003a8 	.word	0x200003a8

08000868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return uwTick;
 800086c:	4b02      	ldr	r3, [pc, #8]	; (8000878 <HAL_GetTick+0x10>)
 800086e:	681b      	ldr	r3, [r3, #0]
}
 8000870:	4618      	mov	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	200003a8 	.word	0x200003a8

0800087c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f003 0307 	and.w	r3, r3, #7
 800088a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000892:	68ba      	ldr	r2, [r7, #8]
 8000894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <__NVIC_SetPriorityGrouping+0x44>)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	60d3      	str	r3, [r2, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c8:	4b04      	ldr	r3, [pc, #16]	; (80008dc <__NVIC_GetPriorityGrouping+0x18>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	0a1b      	lsrs	r3, r3, #8
 80008ce:	f003 0307 	and.w	r3, r3, #7
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	; 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff90 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff49 	bl	800087c <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff5e 	bl	80008c4 <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff90 	bl	8000934 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ffb0 	bl	8000998 <SysTick_Config>
 8000a38:	4603      	mov	r3, r0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b08b      	sub	sp, #44	; 0x2c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a56:	e127      	b.n	8000ca8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f040 8116 	bne.w	8000ca2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b12      	cmp	r3, #18
 8000a7c:	d034      	beq.n	8000ae8 <HAL_GPIO_Init+0xa4>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d80d      	bhi.n	8000a9e <HAL_GPIO_Init+0x5a>
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	d02b      	beq.n	8000ade <HAL_GPIO_Init+0x9a>
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d804      	bhi.n	8000a94 <HAL_GPIO_Init+0x50>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d031      	beq.n	8000af2 <HAL_GPIO_Init+0xae>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d01c      	beq.n	8000acc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a92:	e048      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a94:	2b03      	cmp	r3, #3
 8000a96:	d043      	beq.n	8000b20 <HAL_GPIO_Init+0xdc>
 8000a98:	2b11      	cmp	r3, #17
 8000a9a:	d01b      	beq.n	8000ad4 <HAL_GPIO_Init+0x90>
          break;
 8000a9c:	e043      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000a9e:	4a89      	ldr	r2, [pc, #548]	; (8000cc4 <HAL_GPIO_Init+0x280>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d026      	beq.n	8000af2 <HAL_GPIO_Init+0xae>
 8000aa4:	4a87      	ldr	r2, [pc, #540]	; (8000cc4 <HAL_GPIO_Init+0x280>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d806      	bhi.n	8000ab8 <HAL_GPIO_Init+0x74>
 8000aaa:	4a87      	ldr	r2, [pc, #540]	; (8000cc8 <HAL_GPIO_Init+0x284>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d020      	beq.n	8000af2 <HAL_GPIO_Init+0xae>
 8000ab0:	4a86      	ldr	r2, [pc, #536]	; (8000ccc <HAL_GPIO_Init+0x288>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d01d      	beq.n	8000af2 <HAL_GPIO_Init+0xae>
          break;
 8000ab6:	e036      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ab8:	4a85      	ldr	r2, [pc, #532]	; (8000cd0 <HAL_GPIO_Init+0x28c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d019      	beq.n	8000af2 <HAL_GPIO_Init+0xae>
 8000abe:	4a85      	ldr	r2, [pc, #532]	; (8000cd4 <HAL_GPIO_Init+0x290>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d016      	beq.n	8000af2 <HAL_GPIO_Init+0xae>
 8000ac4:	4a84      	ldr	r2, [pc, #528]	; (8000cd8 <HAL_GPIO_Init+0x294>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d013      	beq.n	8000af2 <HAL_GPIO_Init+0xae>
          break;
 8000aca:	e02c      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	623b      	str	r3, [r7, #32]
          break;
 8000ad2:	e028      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	623b      	str	r3, [r7, #32]
          break;
 8000adc:	e023      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e01e      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	330c      	adds	r3, #12
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e019      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d102      	bne.n	8000b00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000afa:	2304      	movs	r3, #4
 8000afc:	623b      	str	r3, [r7, #32]
          break;
 8000afe:	e012      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d105      	bne.n	8000b14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	69fa      	ldr	r2, [r7, #28]
 8000b10:	611a      	str	r2, [r3, #16]
          break;
 8000b12:	e008      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b14:	2308      	movs	r3, #8
 8000b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	69fa      	ldr	r2, [r7, #28]
 8000b1c:	615a      	str	r2, [r3, #20]
          break;
 8000b1e:	e002      	b.n	8000b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
          break;
 8000b24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	2bff      	cmp	r3, #255	; 0xff
 8000b2a:	d801      	bhi.n	8000b30 <HAL_GPIO_Init+0xec>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	e001      	b.n	8000b34 <HAL_GPIO_Init+0xf0>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3304      	adds	r3, #4
 8000b34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	2bff      	cmp	r3, #255	; 0xff
 8000b3a:	d802      	bhi.n	8000b42 <HAL_GPIO_Init+0xfe>
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	e002      	b.n	8000b48 <HAL_GPIO_Init+0x104>
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	3b08      	subs	r3, #8
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	210f      	movs	r1, #15
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43db      	mvns	r3, r3
 8000b58:	401a      	ands	r2, r3
 8000b5a:	6a39      	ldr	r1, [r7, #32]
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	431a      	orrs	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f000 8096 	beq.w	8000ca2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b76:	4b59      	ldr	r3, [pc, #356]	; (8000cdc <HAL_GPIO_Init+0x298>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a58      	ldr	r2, [pc, #352]	; (8000cdc <HAL_GPIO_Init+0x298>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b56      	ldr	r3, [pc, #344]	; (8000cdc <HAL_GPIO_Init+0x298>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b8e:	4a54      	ldr	r2, [pc, #336]	; (8000ce0 <HAL_GPIO_Init+0x29c>)
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	3302      	adds	r3, #2
 8000b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	f003 0303 	and.w	r3, r3, #3
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43db      	mvns	r3, r3
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a4b      	ldr	r2, [pc, #300]	; (8000ce4 <HAL_GPIO_Init+0x2a0>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d013      	beq.n	8000be2 <HAL_GPIO_Init+0x19e>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ce8 <HAL_GPIO_Init+0x2a4>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d00d      	beq.n	8000bde <HAL_GPIO_Init+0x19a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a49      	ldr	r2, [pc, #292]	; (8000cec <HAL_GPIO_Init+0x2a8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d007      	beq.n	8000bda <HAL_GPIO_Init+0x196>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a48      	ldr	r2, [pc, #288]	; (8000cf0 <HAL_GPIO_Init+0x2ac>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d101      	bne.n	8000bd6 <HAL_GPIO_Init+0x192>
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x1a0>
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	e004      	b.n	8000be4 <HAL_GPIO_Init+0x1a0>
 8000bda:	2302      	movs	r3, #2
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_Init+0x1a0>
 8000bde:	2301      	movs	r3, #1
 8000be0:	e000      	b.n	8000be4 <HAL_GPIO_Init+0x1a0>
 8000be2:	2300      	movs	r3, #0
 8000be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be6:	f002 0203 	and.w	r2, r2, #3
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	4093      	lsls	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bf4:	493a      	ldr	r1, [pc, #232]	; (8000ce0 <HAL_GPIO_Init+0x29c>)
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d006      	beq.n	8000c1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c0e:	4b39      	ldr	r3, [pc, #228]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4938      	ldr	r1, [pc, #224]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
 8000c1a:	e006      	b.n	8000c2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c1c:	4b35      	ldr	r3, [pc, #212]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	4933      	ldr	r1, [pc, #204]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c36:	4b2f      	ldr	r3, [pc, #188]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	492e      	ldr	r1, [pc, #184]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	604b      	str	r3, [r1, #4]
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c44:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c46:	685a      	ldr	r2, [r3, #4]
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	4929      	ldr	r1, [pc, #164]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d006      	beq.n	8000c6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c5e:	4b25      	ldr	r3, [pc, #148]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4924      	ldr	r1, [pc, #144]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	608b      	str	r3, [r1, #8]
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	491f      	ldr	r1, [pc, #124]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d006      	beq.n	8000c94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	491a      	ldr	r1, [pc, #104]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60cb      	str	r3, [r1, #12]
 8000c92:	e006      	b.n	8000ca2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	4915      	ldr	r1, [pc, #84]	; (8000cf4 <HAL_GPIO_Init+0x2b0>)
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f47f aed0 	bne.w	8000a58 <HAL_GPIO_Init+0x14>
  }
}
 8000cb8:	bf00      	nop
 8000cba:	372c      	adds	r7, #44	; 0x2c
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	10210000 	.word	0x10210000
 8000cc8:	10110000 	.word	0x10110000
 8000ccc:	10120000 	.word	0x10120000
 8000cd0:	10310000 	.word	0x10310000
 8000cd4:	10320000 	.word	0x10320000
 8000cd8:	10220000 	.word	0x10220000
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	40010800 	.word	0x40010800
 8000ce8:	40010c00 	.word	0x40010c00
 8000cec:	40011000 	.word	0x40011000
 8000cf0:	40011400 	.word	0x40011400
 8000cf4:	40010400 	.word	0x40010400

08000cf8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8000d06:	e09a      	b.n	8000e3e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	f000 808d 	beq.w	8000e38 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8000d1e:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <HAL_GPIO_DeInit+0x160>)
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <HAL_GPIO_DeInit+0x164>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d013      	beq.n	8000d70 <HAL_GPIO_DeInit+0x78>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a45      	ldr	r2, [pc, #276]	; (8000e60 <HAL_GPIO_DeInit+0x168>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d00d      	beq.n	8000d6c <HAL_GPIO_DeInit+0x74>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <HAL_GPIO_DeInit+0x16c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d007      	beq.n	8000d68 <HAL_GPIO_DeInit+0x70>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <HAL_GPIO_DeInit+0x170>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d101      	bne.n	8000d64 <HAL_GPIO_DeInit+0x6c>
 8000d60:	2303      	movs	r3, #3
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_DeInit+0x7a>
 8000d64:	2304      	movs	r3, #4
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_DeInit+0x7a>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_DeInit+0x7a>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_DeInit+0x7a>
 8000d70:	2300      	movs	r3, #0
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d132      	bne.n	8000de8 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8000d92:	4a31      	ldr	r2, [pc, #196]	; (8000e58 <HAL_GPIO_DeInit+0x160>)
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	43da      	mvns	r2, r3
 8000da2:	482d      	ldr	r0, [pc, #180]	; (8000e58 <HAL_GPIO_DeInit+0x160>)
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	400a      	ands	r2, r1
 8000daa:	3302      	adds	r3, #2
 8000dac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8000db0:	4b2e      	ldr	r3, [pc, #184]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	492c      	ldr	r1, [pc, #176]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000dba:	4013      	ands	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	4929      	ldr	r1, [pc, #164]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8000dcc:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4925      	ldr	r1, [pc, #148]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4922      	ldr	r1, [pc, #136]	; (8000e6c <HAL_GPIO_DeInit+0x174>)
 8000de4:	4013      	ands	r3, r2
 8000de6:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	2bff      	cmp	r3, #255	; 0xff
 8000dec:	d801      	bhi.n	8000df2 <HAL_GPIO_DeInit+0xfa>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	e001      	b.n	8000df6 <HAL_GPIO_DeInit+0xfe>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3304      	adds	r3, #4
 8000df6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	2bff      	cmp	r3, #255	; 0xff
 8000dfc:	d802      	bhi.n	8000e04 <HAL_GPIO_DeInit+0x10c>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_DeInit+0x112>
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	3b08      	subs	r3, #8
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	210f      	movs	r1, #15
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	2104      	movs	r1, #4
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
 8000e24:	431a      	orrs	r2, r3
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	401a      	ands	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	60da      	str	r2, [r3, #12]
    }

    position++;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	fa22 f303 	lsr.w	r3, r2, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f47f af5e 	bne.w	8000d08 <HAL_GPIO_DeInit+0x10>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3724      	adds	r7, #36	; 0x24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40010000 	.word	0x40010000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40011400 	.word	0x40011400
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e001      	b.n	8000e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	807b      	strh	r3, [r7, #2]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eae:	787b      	ldrb	r3, [r7, #1]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb4:	887a      	ldrh	r2, [r7, #2]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000eba:	e003      	b.n	8000ec4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	041a      	lsls	r2, r3, #16
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	611a      	str	r2, [r3, #16]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e11f      	b.n	8001122 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d106      	bne.n	8000efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff fb1a 	bl	8000530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2224      	movs	r2, #36	; 0x24
 8000f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f34:	f000 fe90 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8000f38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a7b      	ldr	r2, [pc, #492]	; (800112c <HAL_I2C_Init+0x25c>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d807      	bhi.n	8000f54 <HAL_I2C_Init+0x84>
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4a7a      	ldr	r2, [pc, #488]	; (8001130 <HAL_I2C_Init+0x260>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	bf94      	ite	ls
 8000f4c:	2301      	movls	r3, #1
 8000f4e:	2300      	movhi	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	e006      	b.n	8000f62 <HAL_I2C_Init+0x92>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4a77      	ldr	r2, [pc, #476]	; (8001134 <HAL_I2C_Init+0x264>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	bf94      	ite	ls
 8000f5c:	2301      	movls	r3, #1
 8000f5e:	2300      	movhi	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0db      	b.n	8001122 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4a72      	ldr	r2, [pc, #456]	; (8001138 <HAL_I2C_Init+0x268>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0c9b      	lsrs	r3, r3, #18
 8000f74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	4a64      	ldr	r2, [pc, #400]	; (800112c <HAL_I2C_Init+0x25c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d802      	bhi.n	8000fa4 <HAL_I2C_Init+0xd4>
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	e009      	b.n	8000fb8 <HAL_I2C_Init+0xe8>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000faa:	fb02 f303 	mul.w	r3, r2, r3
 8000fae:	4a63      	ldr	r2, [pc, #396]	; (800113c <HAL_I2C_Init+0x26c>)
 8000fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb4:	099b      	lsrs	r3, r3, #6
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6812      	ldr	r2, [r2, #0]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	4956      	ldr	r1, [pc, #344]	; (800112c <HAL_I2C_Init+0x25c>)
 8000fd4:	428b      	cmp	r3, r1
 8000fd6:	d80d      	bhi.n	8000ff4 <HAL_I2C_Init+0x124>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1e59      	subs	r1, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	bf38      	it	cc
 8000ff0:	2304      	movcc	r3, #4
 8000ff2:	e04f      	b.n	8001094 <HAL_I2C_Init+0x1c4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d111      	bne.n	8001020 <HAL_I2C_Init+0x150>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1e58      	subs	r0, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	440b      	add	r3, r1
 800100a:	fbb0 f3f3 	udiv	r3, r0, r3
 800100e:	3301      	adds	r3, #1
 8001010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001014:	2b00      	cmp	r3, #0
 8001016:	bf0c      	ite	eq
 8001018:	2301      	moveq	r3, #1
 800101a:	2300      	movne	r3, #0
 800101c:	b2db      	uxtb	r3, r3
 800101e:	e012      	b.n	8001046 <HAL_I2C_Init+0x176>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1e58      	subs	r0, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	0099      	lsls	r1, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	fbb0 f3f3 	udiv	r3, r0, r3
 8001036:	3301      	adds	r3, #1
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103c:	2b00      	cmp	r3, #0
 800103e:	bf0c      	ite	eq
 8001040:	2301      	moveq	r3, #1
 8001042:	2300      	movne	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_I2C_Init+0x17e>
 800104a:	2301      	movs	r3, #1
 800104c:	e022      	b.n	8001094 <HAL_I2C_Init+0x1c4>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10e      	bne.n	8001074 <HAL_I2C_Init+0x1a4>
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1e58      	subs	r0, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6859      	ldr	r1, [r3, #4]
 800105e:	460b      	mov	r3, r1
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	440b      	add	r3, r1
 8001064:	fbb0 f3f3 	udiv	r3, r0, r3
 8001068:	3301      	adds	r3, #1
 800106a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800106e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001072:	e00f      	b.n	8001094 <HAL_I2C_Init+0x1c4>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1e58      	subs	r0, r3, #1
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	0099      	lsls	r1, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	fbb0 f3f3 	udiv	r3, r0, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	6809      	ldr	r1, [r1, #0]
 8001098:	4313      	orrs	r3, r2
 800109a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6911      	ldr	r1, [r2, #16]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68d2      	ldr	r2, [r2, #12]
 80010ce:	4311      	orrs	r1, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695a      	ldr	r2, [r3, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2220      	movs	r2, #32
 800110e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	000186a0 	.word	0x000186a0
 8001130:	001e847f 	.word	0x001e847f
 8001134:	003d08ff 	.word	0x003d08ff
 8001138:	431bde83 	.word	0x431bde83
 800113c:	10624dd3 	.word	0x10624dd3

08001140 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e021      	b.n	8001196 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2224      	movs	r2, #36	; 0x24
 8001156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0201 	bic.w	r2, r2, #1
 8001168:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fa30 	bl	80005d0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	460b      	mov	r3, r1
 80011ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff fb5a 	bl	8000868 <HAL_GetTick>
 80011b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80011b6:	2301      	movs	r3, #1
 80011b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b20      	cmp	r3, #32
 80011c4:	f040 8111 	bne.w	80013ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	2319      	movs	r3, #25
 80011ce:	2201      	movs	r2, #1
 80011d0:	4988      	ldr	r1, [pc, #544]	; (80013f4 <HAL_I2C_IsDeviceReady+0x254>)
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 f912 	bl	80013fc <I2C_WaitOnFlagUntilTimeout>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80011de:	2302      	movs	r3, #2
 80011e0:	e104      	b.n	80013ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_I2C_IsDeviceReady+0x50>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e0fd      	b.n	80013ec <HAL_I2C_IsDeviceReady+0x24c>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b01      	cmp	r3, #1
 8001204:	d007      	beq.n	8001216 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0201 	orr.w	r2, r2, #1
 8001214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001224:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2224      	movs	r2, #36	; 0x24
 800122a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a70      	ldr	r2, [pc, #448]	; (80013f8 <HAL_I2C_IsDeviceReady+0x258>)
 8001238:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001248:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2200      	movs	r2, #0
 8001252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001256:	68f8      	ldr	r0, [r7, #12]
 8001258:	f000 f8d0 	bl	80013fc <I2C_WaitOnFlagUntilTimeout>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00d      	beq.n	800127e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001270:	d103      	bne.n	800127a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e0b6      	b.n	80013ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800127e:	897b      	ldrh	r3, [r7, #10]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800128c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff faeb 	bl	8000868 <HAL_GetTick>
 8001292:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b02      	cmp	r3, #2
 80012a0:	bf0c      	ite	eq
 80012a2:	2301      	moveq	r3, #1
 80012a4:	2300      	movne	r3, #0
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b8:	bf0c      	ite	eq
 80012ba:	2301      	moveq	r3, #1
 80012bc:	2300      	movne	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80012c2:	e025      	b.n	8001310 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80012c4:	f7ff fad0 	bl	8000868 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d302      	bcc.n	80012da <HAL_I2C_IsDeviceReady+0x13a>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	22a0      	movs	r2, #160	; 0xa0
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001306:	bf0c      	ite	eq
 8001308:	2301      	moveq	r3, #1
 800130a:	2300      	movne	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2ba0      	cmp	r3, #160	; 0xa0
 800131a:	d005      	beq.n	8001328 <HAL_I2C_IsDeviceReady+0x188>
 800131c:	7dfb      	ldrb	r3, [r7, #23]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_I2C_IsDeviceReady+0x188>
 8001322:	7dbb      	ldrb	r3, [r7, #22]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0cd      	beq.n	80012c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2220      	movs	r2, #32
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	d129      	bne.n	8001392 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2319      	movs	r3, #25
 800136a:	2201      	movs	r2, #1
 800136c:	4921      	ldr	r1, [pc, #132]	; (80013f4 <HAL_I2C_IsDeviceReady+0x254>)
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f844 	bl	80013fc <I2C_WaitOnFlagUntilTimeout>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e036      	b.n	80013ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2220      	movs	r2, #32
 8001382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e02c      	b.n	80013ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80013aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2319      	movs	r3, #25
 80013b2:	2201      	movs	r2, #1
 80013b4:	490f      	ldr	r1, [pc, #60]	; (80013f4 <HAL_I2C_IsDeviceReady+0x254>)
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f820 	bl	80013fc <I2C_WaitOnFlagUntilTimeout>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e012      	b.n	80013ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	3301      	adds	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f4ff af32 	bcc.w	800123a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2220      	movs	r2, #32
 80013da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80013ea:	2302      	movs	r3, #2
  }
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3720      	adds	r7, #32
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	00100002 	.word	0x00100002
 80013f8:	ffff0000 	.word	0xffff0000

080013fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800140c:	e025      	b.n	800145a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d021      	beq.n	800145a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001416:	f7ff fa27 	bl	8000868 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d302      	bcc.n	800142c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d116      	bne.n	800145a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2220      	movs	r2, #32
 8001436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f043 0220 	orr.w	r2, r3, #32
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e023      	b.n	80014a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d10d      	bne.n	8001480 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4013      	ands	r3, r2
 8001470:	b29b      	uxth	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf0c      	ite	eq
 8001476:	2301      	moveq	r3, #1
 8001478:	2300      	movne	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	e00c      	b.n	800149a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4013      	ands	r3, r2
 800148c:	b29b      	uxth	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	bf0c      	ite	eq
 8001492:	2301      	moveq	r3, #1
 8001494:	2300      	movne	r3, #0
 8001496:	b2db      	uxtb	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	429a      	cmp	r2, r3
 800149e:	d0b6      	beq.n	800140e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e26c      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8087 	beq.w	80015da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014cc:	4b92      	ldr	r3, [pc, #584]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d00c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014d8:	4b8f      	ldr	r3, [pc, #572]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d112      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
 80014e4:	4b8c      	ldr	r3, [pc, #560]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f0:	d10b      	bne.n	800150a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f2:	4b89      	ldr	r3, [pc, #548]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d06c      	beq.n	80015d8 <HAL_RCC_OscConfig+0x12c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d168      	bne.n	80015d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e246      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x76>
 8001514:	4b80      	ldr	r3, [pc, #512]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a7f      	ldr	r2, [pc, #508]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800151a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e02e      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x98>
 800152a:	4b7b      	ldr	r3, [pc, #492]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7a      	ldr	r2, [pc, #488]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b78      	ldr	r3, [pc, #480]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a77      	ldr	r2, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0xbc>
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a71      	ldr	r2, [pc, #452]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b6f      	ldr	r3, [pc, #444]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6e      	ldr	r2, [pc, #440]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xd4>
 8001568:	4b6b      	ldr	r3, [pc, #428]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6a      	ldr	r2, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a67      	ldr	r2, [pc, #412]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff f96e 	bl	8000868 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff f96a 	bl	8000868 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1fa      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xe4>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff f95a 	bl	8000868 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff f956 	bl	8000868 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1e6      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x10c>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d063      	beq.n	80016ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015e6:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
 80015fe:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1ba      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4939      	ldr	r1, [pc, #228]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e03a      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_RCC_OscConfig+0x270>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff f90f 	bl	8000868 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff f90b 	bl	8000868 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e19b      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4927      	ldr	r1, [pc, #156]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x270>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff f8ee 	bl	8000868 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff f8ea 	bl	8000868 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e17a      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03a      	beq.n	8001730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d019      	beq.n	80016f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_RCC_OscConfig+0x274>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c8:	f7ff f8ce 	bl	8000868 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff f8ca 	bl	8000868 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e15a      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016ee:	2001      	movs	r0, #1
 80016f0:	f000 fada 	bl	8001ca8 <RCC_Delay>
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_RCC_OscConfig+0x274>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff f8b4 	bl	8000868 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	e00f      	b.n	8001724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff f8b0 	bl	8000868 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d908      	bls.n	8001724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e140      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	42420000 	.word	0x42420000
 8001720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b9e      	ldr	r3, [pc, #632]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1e9      	bne.n	8001704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a6 	beq.w	800188a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001742:	4b97      	ldr	r3, [pc, #604]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10d      	bne.n	800176a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b94      	ldr	r3, [pc, #592]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a93      	ldr	r2, [pc, #588]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b91      	ldr	r3, [pc, #580]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176a:	4b8e      	ldr	r3, [pc, #568]	; (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d118      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001776:	4b8b      	ldr	r3, [pc, #556]	; (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a8a      	ldr	r2, [pc, #552]	; (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001782:	f7ff f871 	bl	8000868 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178a:	f7ff f86d 	bl	8000868 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b64      	cmp	r3, #100	; 0x64
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0fd      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179c:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_OscConfig+0x312>
 80017b0:	4b7b      	ldr	r3, [pc, #492]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	4a7a      	ldr	r2, [pc, #488]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
 80017bc:	e02d      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x334>
 80017c6:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a75      	ldr	r2, [pc, #468]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a72      	ldr	r2, [pc, #456]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
 80017de:	e01c      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x356>
 80017e8:	4b6d      	ldr	r3, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a6c      	ldr	r2, [pc, #432]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a69      	ldr	r2, [pc, #420]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e00b      	b.n	800181a <HAL_RCC_OscConfig+0x36e>
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a66      	ldr	r2, [pc, #408]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	4b64      	ldr	r3, [pc, #400]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a63      	ldr	r2, [pc, #396]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d015      	beq.n	800184e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001822:	f7ff f821 	bl	8000868 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff f81d 	bl	8000868 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e0ab      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ee      	beq.n	800182a <HAL_RCC_OscConfig+0x37e>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff f80b 	bl	8000868 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff f807 	bl	8000868 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e095      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d105      	bne.n	800188a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187e:	4b48      	ldr	r3, [pc, #288]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a47      	ldr	r2, [pc, #284]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8081 	beq.w	8001996 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001894:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d061      	beq.n	8001964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d146      	bne.n	8001936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a8:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <HAL_RCC_OscConfig+0x4fc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7fe ffdb 	bl	8000868 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b6:	f7fe ffd7 	bl	8000868 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e067      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c8:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018dc:	d108      	bne.n	80018f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	492d      	ldr	r1, [pc, #180]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a19      	ldr	r1, [r3, #32]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	430b      	orrs	r3, r1
 8001902:	4927      	ldr	r1, [pc, #156]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x4fc>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7fe ffab 	bl	8000868 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001916:	f7fe ffa7 	bl	8000868 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e037      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x46a>
 8001934:	e02f      	b.n	8001996 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_RCC_OscConfig+0x4fc>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7fe ff94 	bl	8000868 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7fe ff90 	bl	8000868 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e020      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x498>
 8001962:	e018      	b.n	8001996 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e013      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_OscConfig+0x4f4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	429a      	cmp	r2, r3
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
 80019a8:	42420060 	.word	0x42420060

080019ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0d0      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b6a      	ldr	r3, [pc, #424]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d910      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 0207 	bic.w	r2, r3, #7
 80019d6:	4965      	ldr	r1, [pc, #404]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b63      	ldr	r3, [pc, #396]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0b8      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d020      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a08:	4b59      	ldr	r3, [pc, #356]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a58      	ldr	r2, [pc, #352]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0308 	and.w	r3, r3, #8
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	4a52      	ldr	r2, [pc, #328]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b50      	ldr	r3, [pc, #320]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	494d      	ldr	r1, [pc, #308]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d040      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d115      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e07f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e073      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e06b      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4936      	ldr	r1, [pc, #216]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7fe fee4 	bl	8000868 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7fe fee0 	bl	8000868 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e053      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d210      	bcs.n	8001afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 0207 	bic.w	r2, r3, #7
 8001ae2:	4922      	ldr	r1, [pc, #136]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e032      	b.n	8001b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	4916      	ldr	r1, [pc, #88]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b3a:	f000 f821 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001b3e:	4601      	mov	r1, r0
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <HAL_RCC_ClockConfig+0x1cc>)
 8001b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1d0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fe42 	bl	80007e4 <HAL_InitTick>

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08001fb8 	.word	0x08001fb8
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	20000004 	.word	0x20000004

08001b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	b490      	push	{r4, r7}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b88:	1d3c      	adds	r4, r7, #4
 8001b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001baa:	4b23      	ldr	r3, [pc, #140]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x46>
 8001bbe:	e02d      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc2:	623b      	str	r3, [r7, #32]
      break;
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	0c9b      	lsrs	r3, r3, #18
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c5b      	lsrs	r3, r3, #17
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bfe:	fb02 f203 	mul.w	r2, r2, r3
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0a:	e004      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c10:	fb02 f303 	mul.w	r3, r2, r3
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	623b      	str	r3, [r7, #32]
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c1e:	623b      	str	r3, [r7, #32]
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6a3b      	ldr	r3, [r7, #32]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc90      	pop	{r4, r7}
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	08001fa4 	.word	0x08001fa4
 8001c34:	08001fb4 	.word	0x08001fb4
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	007a1200 	.word	0x007a1200
 8001c40:	003d0900 	.word	0x003d0900

08001c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c48:	4b02      	ldr	r3, [pc, #8]	; (8001c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000000 	.word	0x20000000

08001c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	f7ff fff2 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c60:	4601      	mov	r1, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	08001fc8 	.word	0x08001fc8

08001c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_RCC_GetHCLKFreq>
 8001c88:	4601      	mov	r1, r0
 8001c8a:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	0adb      	lsrs	r3, r3, #11
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08001fc8 	.word	0x08001fc8

08001ca8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cb0:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <RCC_Delay+0x34>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <RCC_Delay+0x38>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a5b      	lsrs	r3, r3, #9
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	fb02 f303 	mul.w	r3, r2, r3
 8001cc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cc4:	bf00      	nop
  }
  while (Delay --);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1e5a      	subs	r2, r3, #1
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f9      	bne.n	8001cc4 <RCC_Delay+0x1c>
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	10624dd3 	.word	0x10624dd3

08001ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e03f      	b.n	8001d76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe fc84 	bl	8000618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2224      	movs	r2, #36	; 0x24
 8001d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f829 	bl	8001d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001dba:	f023 030c 	bic.w	r3, r3, #12
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6812      	ldr	r2, [r2, #0]
 8001dc2:	68f9      	ldr	r1, [r7, #12]
 8001dc4:	430b      	orrs	r3, r1
 8001dc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699a      	ldr	r2, [r3, #24]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <UART_SetConfig+0x1ac>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d14e      	bne.n	8001e86 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001de8:	f7ff ff4a 	bl	8001c80 <HAL_RCC_GetPCLK2Freq>
 8001dec:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	009a      	lsls	r2, r3, #2
 8001df8:	441a      	add	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001e06:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	0119      	lsls	r1, r3, #4
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4613      	mov	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	009a      	lsls	r2, r3, #2
 8001e18:	441a      	add	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001e26:	fba3 0302 	umull	r0, r3, r3, r2
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2064      	movs	r0, #100	; 0x64
 8001e2e:	fb00 f303 	mul.w	r3, r0, r3
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	3332      	adds	r3, #50	; 0x32
 8001e38:	4a3d      	ldr	r2, [pc, #244]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	095b      	lsrs	r3, r3, #5
 8001e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e44:	4419      	add	r1, r3
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009a      	lsls	r2, r3, #2
 8001e50:	441a      	add	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001e5e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	2064      	movs	r0, #100	; 0x64
 8001e66:	fb00 f303 	mul.w	r3, r0, r3
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	3332      	adds	r3, #50	; 0x32
 8001e70:	4a2f      	ldr	r2, [pc, #188]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	095b      	lsrs	r3, r3, #5
 8001e78:	f003 020f 	and.w	r2, r3, #15
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	440a      	add	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001e84:	e04d      	b.n	8001f22 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e86:	f7ff fee7 	bl	8001c58 <HAL_RCC_GetPCLK1Freq>
 8001e8a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	009a      	lsls	r2, r3, #2
 8001e96:	441a      	add	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea2:	4a23      	ldr	r2, [pc, #140]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	0119      	lsls	r1, r3, #4
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009a      	lsls	r2, r3, #2
 8001eb6:	441a      	add	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001ec4:	fba3 0302 	umull	r0, r3, r3, r2
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	2064      	movs	r0, #100	; 0x64
 8001ecc:	fb00 f303 	mul.w	r3, r0, r3
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	3332      	adds	r3, #50	; 0x32
 8001ed6:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee2:	4419      	add	r1, r3
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	009a      	lsls	r2, r3, #2
 8001eee:	441a      	add	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001efc:	fba3 0302 	umull	r0, r3, r3, r2
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	2064      	movs	r0, #100	; 0x64
 8001f04:	fb00 f303 	mul.w	r3, r0, r3
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	3332      	adds	r3, #50	; 0x32
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <UART_SetConfig+0x1b0>)
 8001f10:	fba2 2303 	umull	r2, r3, r2, r3
 8001f14:	095b      	lsrs	r3, r3, #5
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	440a      	add	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
}
 8001f22:	bf00      	nop
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	51eb851f 	.word	0x51eb851f

08001f34 <__libc_init_array>:
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	2500      	movs	r5, #0
 8001f38:	4e0c      	ldr	r6, [pc, #48]	; (8001f6c <__libc_init_array+0x38>)
 8001f3a:	4c0d      	ldr	r4, [pc, #52]	; (8001f70 <__libc_init_array+0x3c>)
 8001f3c:	1ba4      	subs	r4, r4, r6
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	42a5      	cmp	r5, r4
 8001f42:	d109      	bne.n	8001f58 <__libc_init_array+0x24>
 8001f44:	f000 f822 	bl	8001f8c <_init>
 8001f48:	2500      	movs	r5, #0
 8001f4a:	4e0a      	ldr	r6, [pc, #40]	; (8001f74 <__libc_init_array+0x40>)
 8001f4c:	4c0a      	ldr	r4, [pc, #40]	; (8001f78 <__libc_init_array+0x44>)
 8001f4e:	1ba4      	subs	r4, r4, r6
 8001f50:	10a4      	asrs	r4, r4, #2
 8001f52:	42a5      	cmp	r5, r4
 8001f54:	d105      	bne.n	8001f62 <__libc_init_array+0x2e>
 8001f56:	bd70      	pop	{r4, r5, r6, pc}
 8001f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f5c:	4798      	blx	r3
 8001f5e:	3501      	adds	r5, #1
 8001f60:	e7ee      	b.n	8001f40 <__libc_init_array+0xc>
 8001f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f66:	4798      	blx	r3
 8001f68:	3501      	adds	r5, #1
 8001f6a:	e7f2      	b.n	8001f52 <__libc_init_array+0x1e>
 8001f6c:	08001fd0 	.word	0x08001fd0
 8001f70:	08001fd0 	.word	0x08001fd0
 8001f74:	08001fd0 	.word	0x08001fd0
 8001f78:	08001fd4 	.word	0x08001fd4

08001f7c <memset>:
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4402      	add	r2, r0
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d100      	bne.n	8001f86 <memset+0xa>
 8001f84:	4770      	bx	lr
 8001f86:	f803 1b01 	strb.w	r1, [r3], #1
 8001f8a:	e7f9      	b.n	8001f80 <memset+0x4>

08001f8c <_init>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr

08001f98 <_fini>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	bf00      	nop
 8001f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9e:	bc08      	pop	{r3}
 8001fa0:	469e      	mov	lr, r3
 8001fa2:	4770      	bx	lr
