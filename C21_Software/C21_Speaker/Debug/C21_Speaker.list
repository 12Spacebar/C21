
C21_Speaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005d20  08005d20  00015d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d8c  08005d8c  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d8c  08005d8c  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d8c  08005d8c  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d90  08005d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08005d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  2000012c  08005ec0  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ac4  08005ec0  00020ac4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014625  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e90  00000000  00000000  0003477a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00037610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  000385b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016fe3  00000000  00000000  000393e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0f9  00000000  00000000  000503cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074a23  00000000  00000000  0005e4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d2ee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc8  00000000  00000000  000d2f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000012c 	.word	0x2000012c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005d08 	.word	0x08005d08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000130 	.word	0x20000130
 8000148:	08005d08 	.word	0x08005d08

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa30 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f807 	bl	8000166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8d6 	bl	8000308 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015c:	f000 f85e 	bl	800021c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000160:	f005 f992 	bl	8005488 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000164:	e7fe      	b.n	8000164 <main+0x18>

08000166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000166:	b580      	push	{r7, lr}
 8000168:	b094      	sub	sp, #80	; 0x50
 800016a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000170:	2228      	movs	r2, #40	; 0x28
 8000172:	2100      	movs	r1, #0
 8000174:	4618      	mov	r0, r3
 8000176:	f005 fdbf 	bl	8005cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800017a:	f107 0314 	add.w	r3, r7, #20
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
 8000182:	605a      	str	r2, [r3, #4]
 8000184:	609a      	str	r2, [r3, #8]
 8000186:	60da      	str	r2, [r3, #12]
 8000188:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 fba5 	bl	800190c <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001c8:	f000 f8c0 	bl	800034c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	f107 0314 	add.w	r3, r7, #20
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fe0f 	bl	8001e0c <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80001f4:	f000 f8aa 	bl	800034c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001f8:	2310      	movs	r3, #16
 80001fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80001fc:	2300      	movs	r3, #0
 80001fe:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	4618      	mov	r0, r3
 8000204:	f001 ff6c 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800020e:	f000 f89d 	bl	800034c <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3750      	adds	r7, #80	; 0x50
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08e      	sub	sp, #56	; 0x38
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000222:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000230:	f107 0320 	add.w	r3, r7, #32
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
 8000246:	611a      	str	r2, [r3, #16]
 8000248:	615a      	str	r2, [r3, #20]
 800024a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800024c:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <MX_TIM2_Init+0xe8>)
 800024e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000254:	4b2b      	ldr	r3, [pc, #172]	; (8000304 <MX_TIM2_Init+0xe8>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800025a:	4b2a      	ldr	r3, [pc, #168]	; (8000304 <MX_TIM2_Init+0xe8>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000260:	4b28      	ldr	r3, [pc, #160]	; (8000304 <MX_TIM2_Init+0xe8>)
 8000262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000266:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000268:	4b26      	ldr	r3, [pc, #152]	; (8000304 <MX_TIM2_Init+0xe8>)
 800026a:	2200      	movs	r2, #0
 800026c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800026e:	4b25      	ldr	r3, [pc, #148]	; (8000304 <MX_TIM2_Init+0xe8>)
 8000270:	2200      	movs	r2, #0
 8000272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000274:	4823      	ldr	r0, [pc, #140]	; (8000304 <MX_TIM2_Init+0xe8>)
 8000276:	f001 ffe9 	bl	800224c <HAL_TIM_Base_Init>
 800027a:	4603      	mov	r3, r0
 800027c:	2b00      	cmp	r3, #0
 800027e:	d001      	beq.n	8000284 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000280:	f000 f864 	bl	800034c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800028a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028e:	4619      	mov	r1, r3
 8000290:	481c      	ldr	r0, [pc, #112]	; (8000304 <MX_TIM2_Init+0xe8>)
 8000292:	f002 f901 	bl	8002498 <HAL_TIM_ConfigClockSource>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800029c:	f000 f856 	bl	800034c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002a0:	4818      	ldr	r0, [pc, #96]	; (8000304 <MX_TIM2_Init+0xe8>)
 80002a2:	f001 fffe 	bl	80022a2 <HAL_TIM_PWM_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80002ac:	f000 f84e 	bl	800034c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002b0:	2300      	movs	r3, #0
 80002b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002b8:	f107 0320 	add.w	r3, r7, #32
 80002bc:	4619      	mov	r1, r3
 80002be:	4811      	ldr	r0, [pc, #68]	; (8000304 <MX_TIM2_Init+0xe8>)
 80002c0:	f002 fc22 	bl	8002b08 <HAL_TIMEx_MasterConfigSynchronization>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80002ca:	f000 f83f 	bl	800034c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002ce:	2360      	movs	r3, #96	; 0x60
 80002d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2200      	movs	r2, #0
 80002e2:	4619      	mov	r1, r3
 80002e4:	4807      	ldr	r0, [pc, #28]	; (8000304 <MX_TIM2_Init+0xe8>)
 80002e6:	f002 f811 	bl	800230c <HAL_TIM_PWM_ConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80002f0:	f000 f82c 	bl	800034c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80002f4:	4803      	ldr	r0, [pc, #12]	; (8000304 <MX_TIM2_Init+0xe8>)
 80002f6:	f000 f87d 	bl	80003f4 <HAL_TIM_MspPostInit>

}
 80002fa:	bf00      	nop
 80002fc:	3738      	adds	r7, #56	; 0x38
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	2000034c 	.word	0x2000034c

08000308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <MX_GPIO_Init+0x40>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <MX_GPIO_Init+0x40>)
 8000314:	f043 0320 	orr.w	r3, r3, #32
 8000318:	6193      	str	r3, [r2, #24]
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <MX_GPIO_Init+0x40>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0320 	and.w	r3, r3, #32
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <MX_GPIO_Init+0x40>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a07      	ldr	r2, [pc, #28]	; (8000348 <MX_GPIO_Init+0x40>)
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <MX_GPIO_Init+0x40>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0304 	and.w	r3, r3, #4
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]

}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000

0800034c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <HAL_MspInit+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <HAL_MspInit+0x5c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_MspInit+0x5c>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <HAL_MspInit+0x5c>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000380:	61d3      	str	r3, [r2, #28]
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <HAL_MspInit+0x60>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_MspInit+0x60>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010000 	.word	0x40010000

080003bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003cc:	d10b      	bne.n	80003e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <HAL_TIM_Base_MspInit+0x34>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <HAL_TIM_Base_MspInit+0x34>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <HAL_TIM_Base_MspInit+0x34>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80003e6:	bf00      	nop
 80003e8:	3714      	adds	r7, #20
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000412:	d12a      	bne.n	800046a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b17      	ldr	r3, [pc, #92]	; (8000474 <HAL_TIM_MspPostInit+0x80>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <HAL_TIM_MspPostInit+0x80>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_TIM_MspPostInit+0x80>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800042c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000430:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000432:	2302      	movs	r3, #2
 8000434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2302      	movs	r3, #2
 8000438:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	4619      	mov	r1, r3
 8000440:	480d      	ldr	r0, [pc, #52]	; (8000478 <HAL_TIM_MspPostInit+0x84>)
 8000442:	f000 fa27 	bl	8000894 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000446:	4b0d      	ldr	r3, [pc, #52]	; (800047c <HAL_TIM_MspPostInit+0x88>)
 8000448:	685b      	ldr	r3, [r3, #4]
 800044a:	61fb      	str	r3, [r7, #28]
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000452:	61fb      	str	r3, [r7, #28]
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800045a:	61fb      	str	r3, [r7, #28]
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000462:	61fb      	str	r3, [r7, #28]
 8000464:	4a05      	ldr	r2, [pc, #20]	; (800047c <HAL_TIM_MspPostInit+0x88>)
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800046a:	bf00      	nop
 800046c:	3720      	adds	r7, #32
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	40010800 	.word	0x40010800
 800047c:	40010000 	.word	0x40010000

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <HardFault_Handler+0x4>

08000492 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <MemManage_Handler+0x4>

08000498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <BusFault_Handler+0x4>

0800049e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <UsageFault_Handler+0x4>

080004a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004cc:	f000 f8b8 	bl	8000640 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}

080004d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004d8:	4806      	ldr	r0, [pc, #24]	; (80004f4 <USB_LP_CAN1_RX0_IRQHandler+0x20>)
 80004da:	f000 fc3c 	bl	8000d56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
 size = USBD_LL_GetRxDataSize(&hUsbDeviceFS, 1);
 80004de:	2101      	movs	r1, #1
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <USB_LP_CAN1_RX0_IRQHandler+0x24>)
 80004e2:	f005 fb85 	bl	8005bf0 <USBD_LL_GetRxDataSize>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b04      	ldr	r3, [pc, #16]	; (80004fc <USB_LP_CAN1_RX0_IRQHandler+0x28>)
 80004ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000858 	.word	0x20000858
 80004f8:	20000394 	.word	0x20000394
 80004fc:	2000038c 	.word	0x2000038c

08000500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <SystemInit+0x5c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a14      	ldr	r2, [pc, #80]	; (800055c <SystemInit+0x5c>)
 800050a:	f043 0301 	orr.w	r3, r3, #1
 800050e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <SystemInit+0x5c>)
 8000512:	685a      	ldr	r2, [r3, #4]
 8000514:	4911      	ldr	r1, [pc, #68]	; (800055c <SystemInit+0x5c>)
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <SystemInit+0x60>)
 8000518:	4013      	ands	r3, r2
 800051a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <SystemInit+0x5c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <SystemInit+0x5c>)
 8000522:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <SystemInit+0x5c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a0a      	ldr	r2, [pc, #40]	; (800055c <SystemInit+0x5c>)
 8000532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000536:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <SystemInit+0x5c>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <SystemInit+0x5c>)
 800053e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000542:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000544:	4b05      	ldr	r3, [pc, #20]	; (800055c <SystemInit+0x5c>)
 8000546:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800054a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <SystemInit+0x64>)
 800054e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000552:	609a      	str	r2, [r3, #8]
#endif 
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	f8ff0000 	.word	0xf8ff0000
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000568:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800056a:	e003      	b.n	8000574 <LoopCopyDataInit>

0800056c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800056e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000570:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000572:	3104      	adds	r1, #4

08000574 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000578:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800057a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800057c:	d3f6      	bcc.n	800056c <CopyDataInit>
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000580:	e002      	b.n	8000588 <LoopFillZerobss>

08000582 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000584:	f842 3b04 	str.w	r3, [r2], #4

08000588 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800058a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800058c:	d3f9      	bcc.n	8000582 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800058e:	f7ff ffb7 	bl	8000500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000592:	f005 fb8d 	bl	8005cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000596:	f7ff fdd9 	bl	800014c <main>
  bx lr
 800059a:	4770      	bx	lr
  ldr r3, =_sidata
 800059c:	08005d94 	.word	0x08005d94
  ldr r0, =_sdata
 80005a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005a4:	2000012c 	.word	0x2000012c
  ldr r2, =_sbss
 80005a8:	2000012c 	.word	0x2000012c
  ldr r3, = _ebss
 80005ac:	20000ac4 	.word	0x20000ac4

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_Init+0x28>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_Init+0x28>)
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f923 	bl	8000810 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f808 	bl	80005e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d0:	f7ff fec2 	bl	8000358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40022000 	.word	0x40022000

080005e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_InitTick+0x54>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_InitTick+0x58>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4619      	mov	r1, r3
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 f93b 	bl	800087a <HAL_SYSTICK_Config>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060a:	2301      	movs	r3, #1
 800060c:	e00e      	b.n	800062c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d80a      	bhi.n	800062a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	2200      	movs	r2, #0
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f000 f903 	bl	8000826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <HAL_InitTick+0x5c>)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
}
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	20000008 	.word	0x20000008
 800063c:	20000004 	.word	0x20000004

08000640 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x1c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x20>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x20>)
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000008 	.word	0x20000008
 8000660:	20000390 	.word	0x20000390

08000664 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return uwTick;
 8000668:	4b02      	ldr	r3, [pc, #8]	; (8000674 <HAL_GetTick+0x10>)
 800066a:	681b      	ldr	r3, [r3, #0]
}
 800066c:	4618      	mov	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	20000390 	.word	0x20000390

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4906      	ldr	r1, [pc, #24]	; (8000710 <__NVIC_EnableIRQ+0x34>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007dc:	d301      	bcc.n	80007e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007de:	2301      	movs	r3, #1
 80007e0:	e00f      	b.n	8000802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <SysTick_Config+0x40>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ea:	210f      	movs	r1, #15
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	f7ff ff90 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <SysTick_Config+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fa:	4b04      	ldr	r3, [pc, #16]	; (800080c <SysTick_Config+0x40>)
 80007fc:	2207      	movs	r2, #7
 80007fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000800:	2300      	movs	r3, #0
}
 8000802:	4618      	mov	r0, r3
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	e000e010 	.word	0xe000e010

08000810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ff2d 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000826:	b580      	push	{r7, lr}
 8000828:	b086      	sub	sp, #24
 800082a:	af00      	add	r7, sp, #0
 800082c:	4603      	mov	r3, r0
 800082e:	60b9      	str	r1, [r7, #8]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000838:	f7ff ff42 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 800083c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	68b9      	ldr	r1, [r7, #8]
 8000842:	6978      	ldr	r0, [r7, #20]
 8000844:	f7ff ff90 	bl	8000768 <NVIC_EncodePriority>
 8000848:	4602      	mov	r2, r0
 800084a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff5f 	bl	8000714 <__NVIC_SetPriority>
}
 8000856:	bf00      	nop
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b082      	sub	sp, #8
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff ff35 	bl	80006dc <__NVIC_EnableIRQ>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffa2 	bl	80007cc <SysTick_Config>
 8000888:	4603      	mov	r3, r0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000894:	b480      	push	{r7}
 8000896:	b08b      	sub	sp, #44	; 0x2c
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008a6:	e127      	b.n	8000af8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008a8:	2201      	movs	r2, #1
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	4013      	ands	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	f040 8116 	bne.w	8000af2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d034      	beq.n	8000938 <HAL_GPIO_Init+0xa4>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d80d      	bhi.n	80008ee <HAL_GPIO_Init+0x5a>
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d02b      	beq.n	800092e <HAL_GPIO_Init+0x9a>
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d804      	bhi.n	80008e4 <HAL_GPIO_Init+0x50>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d031      	beq.n	8000942 <HAL_GPIO_Init+0xae>
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d01c      	beq.n	800091c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008e2:	e048      	b.n	8000976 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d043      	beq.n	8000970 <HAL_GPIO_Init+0xdc>
 80008e8:	2b11      	cmp	r3, #17
 80008ea:	d01b      	beq.n	8000924 <HAL_GPIO_Init+0x90>
          break;
 80008ec:	e043      	b.n	8000976 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008ee:	4a89      	ldr	r2, [pc, #548]	; (8000b14 <HAL_GPIO_Init+0x280>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d026      	beq.n	8000942 <HAL_GPIO_Init+0xae>
 80008f4:	4a87      	ldr	r2, [pc, #540]	; (8000b14 <HAL_GPIO_Init+0x280>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d806      	bhi.n	8000908 <HAL_GPIO_Init+0x74>
 80008fa:	4a87      	ldr	r2, [pc, #540]	; (8000b18 <HAL_GPIO_Init+0x284>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d020      	beq.n	8000942 <HAL_GPIO_Init+0xae>
 8000900:	4a86      	ldr	r2, [pc, #536]	; (8000b1c <HAL_GPIO_Init+0x288>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d01d      	beq.n	8000942 <HAL_GPIO_Init+0xae>
          break;
 8000906:	e036      	b.n	8000976 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000908:	4a85      	ldr	r2, [pc, #532]	; (8000b20 <HAL_GPIO_Init+0x28c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d019      	beq.n	8000942 <HAL_GPIO_Init+0xae>
 800090e:	4a85      	ldr	r2, [pc, #532]	; (8000b24 <HAL_GPIO_Init+0x290>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d016      	beq.n	8000942 <HAL_GPIO_Init+0xae>
 8000914:	4a84      	ldr	r2, [pc, #528]	; (8000b28 <HAL_GPIO_Init+0x294>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d013      	beq.n	8000942 <HAL_GPIO_Init+0xae>
          break;
 800091a:	e02c      	b.n	8000976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e028      	b.n	8000976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	3304      	adds	r3, #4
 800092a:	623b      	str	r3, [r7, #32]
          break;
 800092c:	e023      	b.n	8000976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	3308      	adds	r3, #8
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e01e      	b.n	8000976 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	330c      	adds	r3, #12
 800093e:	623b      	str	r3, [r7, #32]
          break;
 8000940:	e019      	b.n	8000976 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d102      	bne.n	8000950 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800094a:	2304      	movs	r3, #4
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e012      	b.n	8000976 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d105      	bne.n	8000964 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000958:	2308      	movs	r3, #8
 800095a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	69fa      	ldr	r2, [r7, #28]
 8000960:	611a      	str	r2, [r3, #16]
          break;
 8000962:	e008      	b.n	8000976 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000964:	2308      	movs	r3, #8
 8000966:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69fa      	ldr	r2, [r7, #28]
 800096c:	615a      	str	r2, [r3, #20]
          break;
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
          break;
 8000974:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	2bff      	cmp	r3, #255	; 0xff
 800097a:	d801      	bhi.n	8000980 <HAL_GPIO_Init+0xec>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	e001      	b.n	8000984 <HAL_GPIO_Init+0xf0>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3304      	adds	r3, #4
 8000984:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2bff      	cmp	r3, #255	; 0xff
 800098a:	d802      	bhi.n	8000992 <HAL_GPIO_Init+0xfe>
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	e002      	b.n	8000998 <HAL_GPIO_Init+0x104>
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	3b08      	subs	r3, #8
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	210f      	movs	r1, #15
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43db      	mvns	r3, r3
 80009a8:	401a      	ands	r2, r3
 80009aa:	6a39      	ldr	r1, [r7, #32]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	431a      	orrs	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f000 8096 	beq.w	8000af2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009c6:	4b59      	ldr	r3, [pc, #356]	; (8000b2c <HAL_GPIO_Init+0x298>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	4a58      	ldr	r2, [pc, #352]	; (8000b2c <HAL_GPIO_Init+0x298>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6193      	str	r3, [r2, #24]
 80009d2:	4b56      	ldr	r3, [pc, #344]	; (8000b2c <HAL_GPIO_Init+0x298>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009de:	4a54      	ldr	r2, [pc, #336]	; (8000b30 <HAL_GPIO_Init+0x29c>)
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	089b      	lsrs	r3, r3, #2
 80009e4:	3302      	adds	r3, #2
 80009e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	f003 0303 	and.w	r3, r3, #3
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	220f      	movs	r2, #15
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43db      	mvns	r3, r3
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4013      	ands	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4b      	ldr	r2, [pc, #300]	; (8000b34 <HAL_GPIO_Init+0x2a0>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0x19e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4a      	ldr	r2, [pc, #296]	; (8000b38 <HAL_GPIO_Init+0x2a4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00d      	beq.n	8000a2e <HAL_GPIO_Init+0x19a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a49      	ldr	r2, [pc, #292]	; (8000b3c <HAL_GPIO_Init+0x2a8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d007      	beq.n	8000a2a <HAL_GPIO_Init+0x196>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <HAL_GPIO_Init+0x2ac>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d101      	bne.n	8000a26 <HAL_GPIO_Init+0x192>
 8000a22:	2303      	movs	r3, #3
 8000a24:	e006      	b.n	8000a34 <HAL_GPIO_Init+0x1a0>
 8000a26:	2304      	movs	r3, #4
 8000a28:	e004      	b.n	8000a34 <HAL_GPIO_Init+0x1a0>
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	e002      	b.n	8000a34 <HAL_GPIO_Init+0x1a0>
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e000      	b.n	8000a34 <HAL_GPIO_Init+0x1a0>
 8000a32:	2300      	movs	r3, #0
 8000a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a36:	f002 0203 	and.w	r2, r2, #3
 8000a3a:	0092      	lsls	r2, r2, #2
 8000a3c:	4093      	lsls	r3, r2
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a44:	493a      	ldr	r1, [pc, #232]	; (8000b30 <HAL_GPIO_Init+0x29c>)
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a5e:	4b39      	ldr	r3, [pc, #228]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	4938      	ldr	r1, [pc, #224]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	600b      	str	r3, [r1, #0]
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a6c:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	4933      	ldr	r1, [pc, #204]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a76:	4013      	ands	r3, r2
 8000a78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a88:	685a      	ldr	r2, [r3, #4]
 8000a8a:	492e      	ldr	r1, [pc, #184]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	604b      	str	r3, [r1, #4]
 8000a92:	e006      	b.n	8000aa2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4929      	ldr	r1, [pc, #164]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d006      	beq.n	8000abc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	4924      	ldr	r1, [pc, #144]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	608b      	str	r3, [r1, #8]
 8000aba:	e006      	b.n	8000aca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000abc:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000abe:	689a      	ldr	r2, [r3, #8]
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	491f      	ldr	r1, [pc, #124]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	491a      	ldr	r1, [pc, #104]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60cb      	str	r3, [r1, #12]
 8000ae2:	e006      	b.n	8000af2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	4915      	ldr	r1, [pc, #84]	; (8000b44 <HAL_GPIO_Init+0x2b0>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	3301      	adds	r3, #1
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afe:	fa22 f303 	lsr.w	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f47f aed0 	bne.w	80008a8 <HAL_GPIO_Init+0x14>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	372c      	adds	r7, #44	; 0x2c
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	10210000 	.word	0x10210000
 8000b18:	10110000 	.word	0x10110000
 8000b1c:	10120000 	.word	0x10120000
 8000b20:	10310000 	.word	0x10310000
 8000b24:	10320000 	.word	0x10320000
 8000b28:	10220000 	.word	0x10220000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	40010800 	.word	0x40010800
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40011400 	.word	0x40011400
 8000b44:	40010400 	.word	0x40010400

08000b48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4a:	b08b      	sub	sp, #44	; 0x2c
 8000b4c:	af06      	add	r7, sp, #24
 8000b4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e0d3      	b.n	8000d02 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d106      	bne.n	8000b74 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f004 fe1a 	bl	80057a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2203      	movs	r2, #3
 8000b78:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 f82c 	bl	8002bde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	687e      	ldr	r6, [r7, #4]
 8000b8e:	466d      	mov	r5, sp
 8000b90:	f106 0410 	add.w	r4, r6, #16
 8000b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	602b      	str	r3, [r5, #0]
 8000b9c:	1d33      	adds	r3, r6, #4
 8000b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ba0:	6838      	ldr	r0, [r7, #0]
 8000ba2:	f001 fff5 	bl	8002b90 <USB_CoreInit>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2202      	movs	r2, #2
 8000bb0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e0a4      	b.n	8000d02 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 f829 	bl	8002c16 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
 8000bc8:	e035      	b.n	8000c36 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	015b      	lsls	r3, r3, #5
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3329      	adds	r3, #41	; 0x29
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	015b      	lsls	r3, r3, #5
 8000bde:	4413      	add	r3, r2
 8000be0:	3328      	adds	r3, #40	; 0x28
 8000be2:	7bfa      	ldrb	r2, [r7, #15]
 8000be4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	b291      	uxth	r1, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	015b      	lsls	r3, r3, #5
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3336      	adds	r3, #54	; 0x36
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	015b      	lsls	r3, r3, #5
 8000bfe:	4413      	add	r3, r2
 8000c00:	332b      	adds	r3, #43	; 0x2b
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	015b      	lsls	r3, r3, #5
 8000c0c:	4413      	add	r3, r2
 8000c0e:	3338      	adds	r3, #56	; 0x38
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	015b      	lsls	r3, r3, #5
 8000c1a:	4413      	add	r3, r2
 8000c1c:	333c      	adds	r3, #60	; 0x3c
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	3302      	adds	r3, #2
 8000c28:	015b      	lsls	r3, r3, #5
 8000c2a:	4413      	add	r3, r2
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	3301      	adds	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	7bfa      	ldrb	r2, [r7, #15]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d3c4      	bcc.n	8000bca <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e031      	b.n	8000caa <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	015b      	lsls	r3, r3, #5
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	015b      	lsls	r3, r3, #5
 8000c5c:	4413      	add	r3, r2
 8000c5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	015b      	lsls	r3, r3, #5
 8000c6c:	4413      	add	r3, r2
 8000c6e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	015b      	lsls	r3, r3, #5
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	015b      	lsls	r3, r3, #5
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	330a      	adds	r3, #10
 8000c9c:	015b      	lsls	r3, r3, #5
 8000c9e:	4413      	add	r3, r2
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	7bfa      	ldrb	r2, [r7, #15]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d3c8      	bcc.n	8000c46 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	687e      	ldr	r6, [r7, #4]
 8000cbc:	466d      	mov	r5, sp
 8000cbe:	f106 0410 	add.w	r4, r6, #16
 8000cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	602b      	str	r3, [r5, #0]
 8000cca:	1d33      	adds	r3, r6, #4
 8000ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cce:	6838      	ldr	r0, [r7, #0]
 8000cd0:	f001 ffad 	bl	8002c2e <USB_DevInit>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d005      	beq.n	8000ce6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2202      	movs	r2, #2
 8000cde:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00d      	b.n	8000d02 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 ffeb 	bl	8003cd6 <USB_DevDisconnect>

  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d101      	bne.n	8000d20 <HAL_PCD_Start+0x16>
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	e016      	b.n	8000d4e <HAL_PCD_Start+0x44>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2201      	movs	r2, #1
 8000d24:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d28:	2101      	movs	r1, #1
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f004 ff89 	bl	8005c42 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f002 ffc4 	bl	8003cc2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 ff36 	bl	8002bb0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 ffc1 	bl	8003cea <USB_ReadInterrupts>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d72:	d102      	bne.n	8000d7a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 faf3 	bl	8001360 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 ffb3 	bl	8003cea <USB_ReadInterrupts>
 8000d84:	4603      	mov	r3, r0
 8000d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d8e:	d112      	bne.n	8000db6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000da2:	b292      	uxth	r2, r2
 8000da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f004 fd72 	bl	8005892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dae:	2100      	movs	r1, #0
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f8de 	bl	8000f72 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 ff95 	bl	8003cea <USB_ReadInterrupts>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dca:	d10b      	bne.n	8000de4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dde:	b292      	uxth	r2, r2
 8000de0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 ff7e 	bl	8003cea <USB_ReadInterrupts>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000df8:	d10b      	bne.n	8000e12 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e0c:	b292      	uxth	r2, r2
 8000e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 ff67 	bl	8003cea <USB_ReadInterrupts>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e26:	d126      	bne.n	8000e76 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0204 	bic.w	r2, r2, #4
 8000e3a:	b292      	uxth	r2, r2
 8000e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 0208 	bic.w	r2, r2, #8
 8000e52:	b292      	uxth	r2, r2
 8000e54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f004 fd53 	bl	8005904 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e70:	b292      	uxth	r2, r2
 8000e72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 ff35 	bl	8003cea <USB_ReadInterrupts>
 8000e80:	4603      	mov	r3, r0
 8000e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e8a:	d13d      	bne.n	8000f08 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0208 	orr.w	r2, r2, #8
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0204 	orr.w	r2, r2, #4
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 ff06 	bl	8003cea <USB_ReadInterrupts>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee8:	d10b      	bne.n	8000f02 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000efc:	b292      	uxth	r2, r2
 8000efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f004 fce4 	bl	80058d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f002 feec 	bl	8003cea <USB_ReadInterrupts>
 8000f12:	4603      	mov	r3, r0
 8000f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f1c:	d10e      	bne.n	8000f3c <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f30:	b292      	uxth	r2, r2
 8000f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f004 fc9d 	bl	8005876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 fed2 	bl	8003cea <USB_ReadInterrupts>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f50:	d10b      	bne.n	8000f6a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f64:	b292      	uxth	r2, r2
 8000f66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b082      	sub	sp, #8
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d101      	bne.n	8000f8c <HAL_PCD_SetAddress+0x1a>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e013      	b.n	8000fb4 <HAL_PCD_SetAddress+0x42>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	78fa      	ldrb	r2, [r7, #3]
 8000f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fe79 	bl	8003c9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4603      	mov	r3, r0
 8000fcc:	70fb      	strb	r3, [r7, #3]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	803b      	strh	r3, [r7, #0]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	da0b      	bge.n	8000ffa <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	015b      	lsls	r3, r3, #5
 8000fea:	3328      	adds	r3, #40	; 0x28
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	705a      	strb	r2, [r3, #1]
 8000ff8:	e00b      	b.n	8001012 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	015b      	lsls	r3, r3, #5
 8001002:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2200      	movs	r2, #0
 8001010:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001012:	78fb      	ldrb	r3, [r7, #3]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	b2da      	uxtb	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800101e:	883a      	ldrh	r2, [r7, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	78ba      	ldrb	r2, [r7, #2]
 8001028:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b29a      	uxth	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800103c:	78bb      	ldrb	r3, [r7, #2]
 800103e:	2b02      	cmp	r3, #2
 8001040:	d102      	bne.n	8001048 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2200      	movs	r2, #0
 8001046:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_PCD_EP_Open+0x9a>
 8001052:	2302      	movs	r3, #2
 8001054:	e00e      	b.n	8001074 <HAL_PCD_EP_Open+0xb8>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68f9      	ldr	r1, [r7, #12]
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fe07 	bl	8002c78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001072:	7afb      	ldrb	r3, [r7, #11]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800108c:	2b00      	cmp	r3, #0
 800108e:	da0b      	bge.n	80010a8 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	3328      	adds	r3, #40	; 0x28
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	705a      	strb	r2, [r3, #1]
 80010a6:	e00b      	b.n	80010c0 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	015b      	lsls	r3, r3, #5
 80010b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2200      	movs	r2, #0
 80010be:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d101      	bne.n	80010da <HAL_PCD_EP_Close+0x5e>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e00e      	b.n	80010f8 <HAL_PCD_EP_Close+0x7c>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	68f9      	ldr	r1, [r7, #12]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 f8b3 	bl	8003254 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	460b      	mov	r3, r1
 800110e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001110:	7afb      	ldrb	r3, [r7, #11]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	015b      	lsls	r3, r3, #5
 8001118:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2200      	movs	r2, #0
 8001138:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	b2da      	uxtb	r2, r3
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001146:	7afb      	ldrb	r3, [r7, #11]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	2b00      	cmp	r3, #0
 800114e:	d106      	bne.n	800115e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6979      	ldr	r1, [r7, #20]
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fa12 	bl	8003580 <USB_EPStartXfer>
 800115c:	e005      	b.n	800116a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6979      	ldr	r1, [r7, #20]
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fa0b 	bl	8003580 <USB_EPStartXfer>
  }

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	330a      	adds	r3, #10
 800118a:	015b      	lsls	r3, r3, #5
 800118c:	4413      	add	r3, r2
 800118e:	3304      	adds	r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	460b      	mov	r3, r1
 80011aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	015b      	lsls	r3, r3, #5
 80011b4:	3328      	adds	r3, #40	; 0x28
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	4413      	add	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2201      	movs	r2, #1
 80011d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f002 f9c5 	bl	8003580 <USB_EPStartXfer>
 80011f6:	e005      	b.n	8001204 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6979      	ldr	r1, [r7, #20]
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 f9be 	bl	8003580 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	f003 0207 	and.w	r2, r3, #7
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	d901      	bls.n	800122c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e046      	b.n	80012ba <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800122c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	da0b      	bge.n	800124c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	015b      	lsls	r3, r3, #5
 800123c:	3328      	adds	r3, #40	; 0x28
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	4413      	add	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2201      	movs	r2, #1
 8001248:	705a      	strb	r2, [r3, #1]
 800124a:	e009      	b.n	8001260 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	015b      	lsls	r3, r3, #5
 8001250:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2201      	movs	r2, #1
 8001264:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b2da      	uxtb	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_PCD_EP_SetStall+0x72>
 800127c:	2302      	movs	r3, #2
 800127e:	e01c      	b.n	80012ba <HAL_PCD_EP_SetStall+0xac>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68f9      	ldr	r1, [r7, #12]
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fc2e 	bl	8003af0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80012a8:	4619      	mov	r1, r3
 80012aa:	4610      	mov	r0, r2
 80012ac:	f002 fd2c 	bl	8003d08 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f003 020f 	and.w	r2, r3, #15
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d901      	bls.n	80012e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e03a      	b.n	8001356 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80012e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	da0b      	bge.n	8001300 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	015b      	lsls	r3, r3, #5
 80012f0:	3328      	adds	r3, #40	; 0x28
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	705a      	strb	r2, [r3, #1]
 80012fe:	e00b      	b.n	8001318 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2200      	movs	r2, #0
 800131c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_PCD_EP_ClrStall+0x76>
 8001334:	2302      	movs	r3, #2
 8001336:	e00e      	b.n	8001356 <HAL_PCD_EP_ClrStall+0x94>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68f9      	ldr	r1, [r7, #12]
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fc14 	bl	8003b74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b089      	sub	sp, #36	; 0x24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001368:	e282      	b.n	8001870 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001372:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001374:	8afb      	ldrh	r3, [r7, #22]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800137e:	7d7b      	ldrb	r3, [r7, #21]
 8001380:	2b00      	cmp	r3, #0
 8001382:	f040 8142 	bne.w	800160a <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001386:	8afb      	ldrh	r3, [r7, #22]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	2b00      	cmp	r3, #0
 800138e:	d151      	bne.n	8001434 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800139c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013a0:	b29c      	uxth	r4, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80013aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3328      	adds	r3, #40	; 0x28
 80013b6:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	4413      	add	r3, r2
 80013cc:	3302      	adds	r3, #2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	441a      	add	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013f2:	2100      	movs	r1, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f004 fa27 	bl	8005848 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8234 	beq.w	8001870 <PCD_EP_ISR_Handler+0x510>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 822f 	bne.w	8001870 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141e:	b2da      	uxtb	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	b292      	uxth	r2, r2
 8001426:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001432:	e21d      	b.n	8001870 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800143a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001444:	8a7b      	ldrh	r3, [r7, #18]
 8001446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800144a:	2b00      	cmp	r3, #0
 800144c:	d033      	beq.n	80014b6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4413      	add	r3, r2
 8001462:	3306      	adds	r3, #6
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	4413      	add	r3, r2
 800146c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800148c:	b29b      	uxth	r3, r3
 800148e:	f002 fc8a 	bl	8003da6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29a      	uxth	r2, r3
 800149a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800149e:	4013      	ands	r3, r2
 80014a0:	b29c      	uxth	r4, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80014aa:	b292      	uxth	r2, r2
 80014ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f004 f9a0 	bl	80057f4 <HAL_PCD_SetupStageCallback>
 80014b4:	e1dc      	b.n	8001870 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f280 81d8 	bge.w	8001870 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014cc:	4013      	ands	r3, r2
 80014ce:	b29c      	uxth	r4, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80014d8:	b292      	uxth	r2, r2
 80014da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	4413      	add	r3, r2
 80014f0:	3306      	adds	r3, #6
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d019      	beq.n	8001544 <PCD_EP_ISR_Handler+0x1e4>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d015      	beq.n	8001544 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6959      	ldr	r1, [r3, #20]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001528:	b29b      	uxth	r3, r3
 800152a:	f002 fc3c 	bl	8003da6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	441a      	add	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800153c:	2100      	movs	r1, #0
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f004 f96a 	bl	8005818 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461c      	mov	r4, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001552:	b29b      	uxth	r3, r3
 8001554:	441c      	add	r4, r3
 8001556:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800155a:	461c      	mov	r4, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10e      	bne.n	8001582 <PCD_EP_ISR_Handler+0x222>
 8001564:	8823      	ldrh	r3, [r4, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800156c:	b29b      	uxth	r3, r3
 800156e:	8023      	strh	r3, [r4, #0]
 8001570:	8823      	ldrh	r3, [r4, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800157c:	b29b      	uxth	r3, r3
 800157e:	8023      	strh	r3, [r4, #0]
 8001580:	e02d      	b.n	80015de <PCD_EP_ISR_Handler+0x27e>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b3e      	cmp	r3, #62	; 0x3e
 8001588:	d812      	bhi.n	80015b0 <PCD_EP_ISR_Handler+0x250>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	085b      	lsrs	r3, r3, #1
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <PCD_EP_ISR_Handler+0x244>
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	8023      	strh	r3, [r4, #0]
 80015ae:	e016      	b.n	80015de <PCD_EP_ISR_Handler+0x27e>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	095b      	lsrs	r3, r3, #5
 80015b6:	61bb      	str	r3, [r7, #24]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	f003 031f 	and.w	r3, r3, #31
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <PCD_EP_ISR_Handler+0x26a>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	029b      	lsls	r3, r3, #10
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015da:	b29b      	uxth	r3, r3
 80015dc:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ee:	b29c      	uxth	r4, r3
 80015f0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80015f4:	b29c      	uxth	r4, r3
 80015f6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80015fa:	b29c      	uxth	r4, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4ba2      	ldr	r3, [pc, #648]	; (800188c <PCD_EP_ISR_Handler+0x52c>)
 8001602:	4323      	orrs	r3, r4
 8001604:	b29b      	uxth	r3, r3
 8001606:	8013      	strh	r3, [r2, #0]
 8001608:	e132      	b.n	8001870 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	461a      	mov	r2, r3
 8001610:	7d7b      	ldrb	r3, [r7, #21]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800161a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f280 80d1 	bge.w	80017c6 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	7d7b      	ldrb	r3, [r7, #21]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b29a      	uxth	r2, r3
 8001634:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001638:	4013      	ands	r3, r2
 800163a:	b29c      	uxth	r4, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	7d7b      	ldrb	r3, [r7, #21]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800164c:	b292      	uxth	r2, r2
 800164e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001650:	7d7b      	ldrb	r3, [r7, #21]
 8001652:	015b      	lsls	r3, r3, #5
 8001654:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	7b1b      	ldrb	r3, [r3, #12]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d121      	bne.n	80016aa <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	3306      	adds	r3, #6
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	4413      	add	r3, r2
 8001684:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001690:	8bfb      	ldrh	r3, [r7, #30]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d072      	beq.n	800177c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6959      	ldr	r1, [r3, #20]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	88da      	ldrh	r2, [r3, #6]
 80016a2:	8bfb      	ldrh	r3, [r7, #30]
 80016a4:	f002 fb7f 	bl	8003da6 <USB_ReadPMA>
 80016a8:	e068      	b.n	800177c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d021      	beq.n	8001708 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	3302      	adds	r3, #2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016ec:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80016ee:	8bfb      	ldrh	r3, [r7, #30]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d02a      	beq.n	800174a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6959      	ldr	r1, [r3, #20]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	891a      	ldrh	r2, [r3, #8]
 8001700:	8bfb      	ldrh	r3, [r7, #30]
 8001702:	f002 fb50 	bl	8003da6 <USB_ReadPMA>
 8001706:	e020      	b.n	800174a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001710:	b29b      	uxth	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	3306      	adds	r3, #6
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001730:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001732:	8bfb      	ldrh	r3, [r7, #30]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6818      	ldr	r0, [r3, #0]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6959      	ldr	r1, [r3, #20]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	895a      	ldrh	r2, [r3, #10]
 8001744:	8bfb      	ldrh	r3, [r7, #30]
 8001746:	f002 fb2e 	bl	8003da6 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001764:	b29c      	uxth	r4, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	441a      	add	r2, r3
 8001774:	4b46      	ldr	r3, [pc, #280]	; (8001890 <PCD_EP_ISR_Handler+0x530>)
 8001776:	4323      	orrs	r3, r4
 8001778:	b29b      	uxth	r3, r3
 800177a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	8bfb      	ldrh	r3, [r7, #30]
 8001782:	441a      	add	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	695a      	ldr	r2, [r3, #20]
 800178c:	8bfb      	ldrh	r3, [r7, #30]
 800178e:	441a      	add	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d004      	beq.n	80017a6 <PCD_EP_ISR_Handler+0x446>
 800179c:	8bfa      	ldrh	r2, [r7, #30]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d206      	bcs.n	80017b4 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f004 f833 	bl	8005818 <HAL_PCD_DataOutStageCallback>
 80017b2:	e008      	b.n	80017c6 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	7819      	ldrb	r1, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fc9d 	bl	8001100 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80017c6:	8a7b      	ldrh	r3, [r7, #18]
 80017c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d04f      	beq.n	8001870 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	3328      	adds	r3, #40	; 0x28
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f4:	b29c      	uxth	r4, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	7d7b      	ldrb	r3, [r7, #21]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	441a      	add	r2, r3
 8001802:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001806:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800180a:	b29b      	uxth	r3, r3
 800180c:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001816:	b29b      	uxth	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	4413      	add	r3, r2
 8001822:	3302      	adds	r3, #2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	4413      	add	r3, r2
 800182c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	441a      	add	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d106      	bne.n	800185e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f003 fff6 	bl	8005848 <HAL_PCD_DataInStageCallback>
 800185c:	e008      	b.n	8001870 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	7819      	ldrb	r1, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fc96 	bl	800119c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21b      	sxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	f6ff ad74 	blt.w	800136a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3724      	adds	r7, #36	; 0x24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	ffff8080 	.word	0xffff8080
 8001890:	ffff80c0 	.word	0xffff80c0

08001894 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	817b      	strh	r3, [r7, #10]
 80018a2:	4613      	mov	r3, r2
 80018a4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80018a6:	897b      	ldrh	r3, [r7, #10]
 80018a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b2:	897b      	ldrh	r3, [r7, #10]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	015b      	lsls	r3, r3, #5
 80018ba:	3328      	adds	r3, #40	; 0x28
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e006      	b.n	80018d2 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018c4:	897b      	ldrh	r3, [r7, #10]
 80018c6:	015b      	lsls	r3, r3, #5
 80018c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80018d2:	893b      	ldrh	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2200      	movs	r2, #0
 80018dc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	80da      	strh	r2, [r3, #6]
 80018e6:	e00b      	b.n	8001900 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2201      	movs	r2, #1
 80018ec:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0c1b      	lsrs	r3, r3, #16
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e26c      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8087 	beq.w	8001a3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800192c:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 030c 	and.w	r3, r3, #12
 8001934:	2b04      	cmp	r3, #4
 8001936:	d00c      	beq.n	8001952 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001938:	4b8f      	ldr	r3, [pc, #572]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b08      	cmp	r3, #8
 8001942:	d112      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
 8001944:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d10b      	bne.n	800196a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001952:	4b89      	ldr	r3, [pc, #548]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06c      	beq.n	8001a38 <HAL_RCC_OscConfig+0x12c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d168      	bne.n	8001a38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e246      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x76>
 8001974:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a7f      	ldr	r2, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	e02e      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x98>
 800198a:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 800199c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e01d      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ac:	d10c      	bne.n	80019c8 <HAL_RCC_OscConfig+0xbc>
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a71      	ldr	r2, [pc, #452]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a6e      	ldr	r2, [pc, #440]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e00b      	b.n	80019e0 <HAL_RCC_OscConfig+0xd4>
 80019c8:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a6a      	ldr	r2, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a67      	ldr	r2, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 80019da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d013      	beq.n	8001a10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7fe fe3c 	bl	8000664 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7fe fe38 	bl	8000664 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1fa      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a02:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0xe4>
 8001a0e:	e014      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a10:	f7fe fe28 	bl	8000664 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a18:	f7fe fe24 	bl	8000664 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b64      	cmp	r3, #100	; 0x64
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e1e6      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x10c>
 8001a36:	e000      	b.n	8001a3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d063      	beq.n	8001b0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d11c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d116      	bne.n	8001a98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e1ba      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4939      	ldr	r1, [pc, #228]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a96:	e03a      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d020      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7fe fddd 	bl	8000664 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aae:	f7fe fdd9 	bl	8000664 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e19b      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac0:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
 8001ae0:	e015      	b.n	8001b0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x270>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7fe fdbc 	bl	8000664 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af0:	f7fe fdb8 	bl	8000664 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e17a      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03a      	beq.n	8001b90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d019      	beq.n	8001b56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b22:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7fe fd9c 	bl	8000664 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7fe fd98 	bl	8000664 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e15a      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f000 faa8 	bl	80020a4 <RCC_Delay>
 8001b54:	e01c      	b.n	8001b90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_OscConfig+0x274>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5c:	f7fe fd82 	bl	8000664 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b62:	e00f      	b.n	8001b84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b64:	f7fe fd7e 	bl	8000664 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d908      	bls.n	8001b84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e140      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
 8001b76:	bf00      	nop
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	42420000 	.word	0x42420000
 8001b80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b84:	4b9e      	ldr	r3, [pc, #632]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e9      	bne.n	8001b64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80a6 	beq.w	8001cea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b97      	ldr	r3, [pc, #604]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b94      	ldr	r3, [pc, #592]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	4a93      	ldr	r2, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	61d3      	str	r3, [r2, #28]
 8001bba:	4b91      	ldr	r3, [pc, #580]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a8a      	ldr	r2, [pc, #552]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7fe fd3f 	bl	8000664 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7fe fd3b 	bl	8000664 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	; 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e0fd      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <HAL_RCC_OscConfig+0x4f8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x312>
 8001c10:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	4a7a      	ldr	r2, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6213      	str	r3, [r2, #32]
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x334>
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	4a75      	ldr	r2, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6213      	str	r3, [r2, #32]
 8001c32:	4b73      	ldr	r3, [pc, #460]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	4a72      	ldr	r2, [pc, #456]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6213      	str	r3, [r2, #32]
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x356>
 8001c48:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	4b6a      	ldr	r3, [pc, #424]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a69      	ldr	r2, [pc, #420]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x36e>
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	4a66      	ldr	r2, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6213      	str	r3, [r2, #32]
 8001c6e:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7fe fcef 	bl	8000664 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7fe fceb 	bl	8000664 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0ab      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b57      	ldr	r3, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x37e>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7fe fcd9 	bl	8000664 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7fe fcd5 	bl	8000664 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e095      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8081 	beq.w	8001df6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d061      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d146      	bne.n	8001d96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe fca9 	bl	8000664 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe fca5 	bl	8000664 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e067      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d28:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d108      	bne.n	8001d50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d3e:	4b30      	ldr	r3, [pc, #192]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	492d      	ldr	r1, [pc, #180]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a19      	ldr	r1, [r3, #32]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	430b      	orrs	r3, r1
 8001d62:	4927      	ldr	r1, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fc79 	bl	8000664 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7fe fc75 	bl	8000664 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e037      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46a>
 8001d94:	e02f      	b.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <HAL_RCC_OscConfig+0x4fc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7fe fc62 	bl	8000664 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da4:	f7fe fc5e 	bl	8000664 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e020      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x498>
 8001dc2:	e018      	b.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e013      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_OscConfig+0x4f4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3718      	adds	r7, #24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42420060 	.word	0x42420060

08001e0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0d0      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d910      	bls.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 0207 	bic.w	r2, r3, #7
 8001e36:	4965      	ldr	r1, [pc, #404]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0b8      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d020      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e68:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	494d      	ldr	r1, [pc, #308]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d040      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e07f      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e073      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e06b      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4936      	ldr	r1, [pc, #216]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fbb2 	bl	8000664 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f04:	f7fe fbae 	bl	8000664 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e053      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 020c 	and.w	r2, r3, #12
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1eb      	bne.n	8001f04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d210      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 0207 	bic.w	r2, r3, #7
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e032      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f68:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	490e      	ldr	r1, [pc, #56]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9a:	f000 f821 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fb10 	bl	80005e0 <HAL_InitTick>

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08005d7c 	.word	0x08005d7c
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b490      	push	{r4, r7}
 8001fe2:	b08a      	sub	sp, #40	; 0x28
 8001fe4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fe8:	1d3c      	adds	r4, r7, #4
 8001fea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff0:	4b28      	ldr	r3, [pc, #160]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800200a:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x40>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x46>
 800201e:	e02d      	b.n	800207c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002022:	623b      	str	r3, [r7, #32]
      break;
 8002024:	e02d      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002032:	4413      	add	r3, r2
 8002034:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002038:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002044:	4b14      	ldr	r3, [pc, #80]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0c5b      	lsrs	r3, r3, #17
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002052:	4413      	add	r3, r2
 8002054:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002058:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <HAL_RCC_GetSysClockFreq+0xbc>)
 800205e:	fb02 f203 	mul.w	r2, r2, r3
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	e004      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	623b      	str	r3, [r7, #32]
      break;
 800207a:	e002      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <HAL_RCC_GetSysClockFreq+0xbc>)
 800207e:	623b      	str	r3, [r7, #32]
      break;
 8002080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002082:	6a3b      	ldr	r3, [r7, #32]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bc90      	pop	{r4, r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	08005d20 	.word	0x08005d20
 8002094:	08005d30 	.word	0x08005d30
 8002098:	40021000 	.word	0x40021000
 800209c:	007a1200 	.word	0x007a1200
 80020a0:	003d0900 	.word	0x003d0900

080020a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <RCC_Delay+0x34>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <RCC_Delay+0x38>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0a5b      	lsrs	r3, r3, #9
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c0:	bf00      	nop
  }
  while (Delay --);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e5a      	subs	r2, r3, #1
 80020c6:	60fa      	str	r2, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <RCC_Delay+0x1c>
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000
 80020dc:	10624dd3 	.word	0x10624dd3

080020e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d07d      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a4b      	ldr	r2, [pc, #300]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	4b49      	ldr	r3, [pc, #292]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002124:	2301      	movs	r3, #1
 8002126:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d118      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002134:	4b43      	ldr	r3, [pc, #268]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a42      	ldr	r2, [pc, #264]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002140:	f7fe fa90 	bl	8000664 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe fa8c 	bl	8000664 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	; 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e06d      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02e      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d027      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002184:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218e:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800219a:	4a29      	ldr	r2, [pc, #164]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d014      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fa5b 	bl	8000664 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fa57 	bl	8000664 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e036      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4917      	ldr	r1, [pc, #92]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002204:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	490b      	ldr	r1, [pc, #44]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4904      	ldr	r1, [pc, #16]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	42420440 	.word	0x42420440

0800224c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01d      	b.n	800229a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe f8a2 	bl	80003bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3304      	adds	r3, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4610      	mov	r0, r2
 800228c:	f000 f9bc 	bl	8002608 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e01d      	b.n	80022f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d106      	bne.n	80022ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f815 	bl	80022f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f000 f991 	bl	8002608 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
	...

0800230c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002322:	2302      	movs	r3, #2
 8002324:	e0b4      	b.n	8002490 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0c      	cmp	r3, #12
 800233a:	f200 809f 	bhi.w	800247c <HAL_TIM_PWM_ConfigChannel+0x170>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	08002379 	.word	0x08002379
 8002348:	0800247d 	.word	0x0800247d
 800234c:	0800247d 	.word	0x0800247d
 8002350:	0800247d 	.word	0x0800247d
 8002354:	080023b9 	.word	0x080023b9
 8002358:	0800247d 	.word	0x0800247d
 800235c:	0800247d 	.word	0x0800247d
 8002360:	0800247d 	.word	0x0800247d
 8002364:	080023fb 	.word	0x080023fb
 8002368:	0800247d 	.word	0x0800247d
 800236c:	0800247d 	.word	0x0800247d
 8002370:	0800247d 	.word	0x0800247d
 8002374:	0800243b 	.word	0x0800243b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f9a4 	bl	80026cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0208 	orr.w	r2, r2, #8
 8002392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6999      	ldr	r1, [r3, #24]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	619a      	str	r2, [r3, #24]
      break;
 80023b6:	e062      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f9ea 	bl	8002798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699a      	ldr	r2, [r3, #24]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6999      	ldr	r1, [r3, #24]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	021a      	lsls	r2, r3, #8
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	619a      	str	r2, [r3, #24]
      break;
 80023f8:	e041      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fa33 	bl	800286c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	69da      	ldr	r2, [r3, #28]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0208 	orr.w	r2, r2, #8
 8002414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0204 	bic.w	r2, r2, #4
 8002424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	69d9      	ldr	r1, [r3, #28]
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	61da      	str	r2, [r3, #28]
      break;
 8002438:	e021      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fa7d 	bl	8002940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69da      	ldr	r2, [r3, #28]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69da      	ldr	r2, [r3, #28]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	69d9      	ldr	r1, [r3, #28]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	021a      	lsls	r2, r3, #8
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
      break;
 800247a:	e000      	b.n	800247e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800247c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIM_ConfigClockSource+0x18>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0a6      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x166>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d067      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x120>
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d80b      	bhi.n	8002504 <HAL_TIM_ConfigClockSource+0x6c>
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d073      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d802      	bhi.n	80024fa <HAL_TIM_ConfigClockSource+0x62>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d06f      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024f8:	e078      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d06c      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
 80024fe:	2b30      	cmp	r3, #48	; 0x30
 8002500:	d06a      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002502:	e073      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002504:	2b70      	cmp	r3, #112	; 0x70
 8002506:	d00d      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0x8c>
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d804      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x7e>
 800250c:	2b50      	cmp	r3, #80	; 0x50
 800250e:	d033      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0xe0>
 8002510:	2b60      	cmp	r3, #96	; 0x60
 8002512:	d041      	beq.n	8002598 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002514:	e06a      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d066      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x152>
 800251c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002520:	d017      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002522:	e063      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f000 fac9 	bl	8002aca <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002546:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]
      break;
 8002550:	e04c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f000 fab2 	bl	8002aca <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002574:	609a      	str	r2, [r3, #8]
      break;
 8002576:	e039      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	f000 fa29 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2150      	movs	r1, #80	; 0x50
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fa80 	bl	8002a96 <TIM_ITRx_SetConfig>
      break;
 8002596:	e029      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f000 fa47 	bl	8002a38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2160      	movs	r1, #96	; 0x60
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fa70 	bl	8002a96 <TIM_ITRx_SetConfig>
      break;
 80025b6:	e019      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f000 fa09 	bl	80029dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2140      	movs	r1, #64	; 0x40
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fa60 	bl	8002a96 <TIM_ITRx_SetConfig>
      break;
 80025d6:	e009      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fa57 	bl	8002a96 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e000      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <TIM_Base_SetConfig+0xb8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d00b      	beq.n	8002638 <TIM_Base_SetConfig+0x30>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002626:	d007      	beq.n	8002638 <TIM_Base_SetConfig+0x30>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a26      	ldr	r2, [pc, #152]	; (80026c4 <TIM_Base_SetConfig+0xbc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d003      	beq.n	8002638 <TIM_Base_SetConfig+0x30>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <TIM_Base_SetConfig+0xc0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d108      	bne.n	800264a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800263e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a1c      	ldr	r2, [pc, #112]	; (80026c0 <TIM_Base_SetConfig+0xb8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00b      	beq.n	800266a <TIM_Base_SetConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002658:	d007      	beq.n	800266a <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <TIM_Base_SetConfig+0xbc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d003      	beq.n	800266a <TIM_Base_SetConfig+0x62>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <TIM_Base_SetConfig+0xc0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <TIM_Base_SetConfig+0xb8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d103      	bne.n	80026b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	615a      	str	r2, [r3, #20]
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40000400 	.word	0x40000400
 80026c8:	40000800 	.word	0x40000800

080026cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	f023 0201 	bic.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f023 0302 	bic.w	r3, r3, #2
 8002714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <TIM_OC1_SetConfig+0xc8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d10c      	bne.n	8002742 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f023 0308 	bic.w	r3, r3, #8
 800272e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a13      	ldr	r2, [pc, #76]	; (8002794 <TIM_OC1_SetConfig+0xc8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d111      	bne.n	800276e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	621a      	str	r2, [r3, #32]
}
 8002788:	bf00      	nop
 800278a:	371c      	adds	r7, #28
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40012c00 	.word	0x40012c00

08002798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	f023 0210 	bic.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0320 	bic.w	r3, r3, #32
 80027e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <TIM_OC2_SetConfig+0xd0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d10d      	bne.n	8002814 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <TIM_OC2_SetConfig+0xd0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d113      	bne.n	8002844 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800282a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	40012c00 	.word	0x40012c00

0800286c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	021b      	lsls	r3, r3, #8
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a1d      	ldr	r2, [pc, #116]	; (800293c <TIM_OC3_SetConfig+0xd0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10d      	bne.n	80028e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a14      	ldr	r2, [pc, #80]	; (800293c <TIM_OC3_SetConfig+0xd0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d113      	bne.n	8002916 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	621a      	str	r2, [r3, #32]
}
 8002930:	bf00      	nop
 8002932:	371c      	adds	r7, #28
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00

08002940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002940:	b480      	push	{r7}
 8002942:	b087      	sub	sp, #28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800298a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	031b      	lsls	r3, r3, #12
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <TIM_OC4_SetConfig+0x98>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d109      	bne.n	80029b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	019b      	lsls	r3, r3, #6
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40012c00 	.word	0x40012c00

080029dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	f023 0201 	bic.w	r2, r3, #1
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f023 030a 	bic.w	r3, r3, #10
 8002a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 0210 	bic.w	r2, r3, #16
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	031b      	lsls	r3, r3, #12
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f043 0307 	orr.w	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	609a      	str	r2, [r3, #8]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	021a      	lsls	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	609a      	str	r2, [r3, #8]
}
 8002afe:	bf00      	nop
 8002b00:	371c      	adds	r7, #28
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e032      	b.n	8002b86 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b58:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b90:	b084      	sub	sp, #16
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	f107 0014 	add.w	r0, r7, #20
 8002b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	b004      	add	sp, #16
 8002bae:	4770      	bx	lr

08002bb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002bb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bbc:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	89fb      	ldrh	r3, [r7, #14]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002be6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bea:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr

08002c2e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c2e:	b084      	sub	sp, #16
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	f107 0014 	add.w	r0, r7, #20
 8002c3c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ffa5 	bl	8002bb0 <USB_EnableGlobalInt>

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c72:	b004      	add	sp, #16
 8002c74:	4770      	bx	lr
	...

08002c78 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c78:	b490      	push	{r4, r7}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	78db      	ldrb	r3, [r3, #3]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d819      	bhi.n	8002cda <USB_ActivateEndpoint+0x62>
 8002ca6:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <USB_ActivateEndpoint+0x34>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002cd1 	.word	0x08002cd1
 8002cb4:	08002ce1 	.word	0x08002ce1
 8002cb8:	08002cc7 	.word	0x08002cc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002cbc:	89bb      	ldrh	r3, [r7, #12]
 8002cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc2:	81bb      	strh	r3, [r7, #12]
      break;
 8002cc4:	e00d      	b.n	8002ce2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002cc6:	89bb      	ldrh	r3, [r7, #12]
 8002cc8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002ccc:	81bb      	strh	r3, [r7, #12]
      break;
 8002cce:	e008      	b.n	8002ce2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002cd0:	89bb      	ldrh	r3, [r7, #12]
 8002cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd6:	81bb      	strh	r3, [r7, #12]
      break;
 8002cd8:	e003      	b.n	8002ce2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cde:	e000      	b.n	8002ce2 <USB_ActivateEndpoint+0x6a>
      break;
 8002ce0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	441a      	add	r2, r3
 8002cec:	89bb      	ldrh	r3, [r7, #12]
 8002cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4313      	orrs	r3, r2
 8002d22:	b29c      	uxth	r4, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	4b8a      	ldr	r3, [pc, #552]	; (8002f58 <USB_ActivateEndpoint+0x2e0>)
 8002d30:	4323      	orrs	r3, r4
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	7b1b      	ldrb	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 8112 	bne.w	8002f64 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	785b      	ldrb	r3, [r3, #1]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d067      	beq.n	8002e18 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d48:	687c      	ldr	r4, [r7, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	441c      	add	r4, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4423      	add	r3, r4
 8002d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d60:	461c      	mov	r4, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	88db      	ldrh	r3, [r3, #6]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29c      	uxth	r4, r3
 8002d7e:	4623      	mov	r3, r4
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d014      	beq.n	8002db2 <USB_ActivateEndpoint+0x13a>
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	b29c      	uxth	r4, r3
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	441a      	add	r2, r3
 8002daa:	4b6c      	ldr	r3, [pc, #432]	; (8002f5c <USB_ActivateEndpoint+0x2e4>)
 8002dac:	4323      	orrs	r3, r4
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	78db      	ldrb	r3, [r3, #3]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d018      	beq.n	8002dec <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dd0:	b29c      	uxth	r4, r3
 8002dd2:	f084 0320 	eor.w	r3, r4, #32
 8002dd6:	b29c      	uxth	r4, r3
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	441a      	add	r2, r3
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <USB_ActivateEndpoint+0x2e0>)
 8002de4:	4323      	orrs	r3, r4
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8013      	strh	r3, [r2, #0]
 8002dea:	e22b      	b.n	8003244 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e02:	b29c      	uxth	r4, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	4b52      	ldr	r3, [pc, #328]	; (8002f58 <USB_ActivateEndpoint+0x2e0>)
 8002e10:	4323      	orrs	r3, r4
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	8013      	strh	r3, [r2, #0]
 8002e16:	e215      	b.n	8003244 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e18:	687c      	ldr	r4, [r7, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	441c      	add	r4, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	4423      	add	r3, r4
 8002e2c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e30:	461c      	mov	r4, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	88db      	ldrh	r3, [r3, #6]
 8002e36:	085b      	lsrs	r3, r3, #1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e40:	687c      	ldr	r4, [r7, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	441c      	add	r4, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4423      	add	r3, r4
 8002e54:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e58:	461c      	mov	r4, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10e      	bne.n	8002e80 <USB_ActivateEndpoint+0x208>
 8002e62:	8823      	ldrh	r3, [r4, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	8023      	strh	r3, [r4, #0]
 8002e6e:	8823      	ldrh	r3, [r4, #0]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	8023      	strh	r3, [r4, #0]
 8002e7e:	e02d      	b.n	8002edc <USB_ActivateEndpoint+0x264>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b3e      	cmp	r3, #62	; 0x3e
 8002e86:	d812      	bhi.n	8002eae <USB_ActivateEndpoint+0x236>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <USB_ActivateEndpoint+0x22a>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	8023      	strh	r3, [r4, #0]
 8002eac:	e016      	b.n	8002edc <USB_ActivateEndpoint+0x264>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <USB_ActivateEndpoint+0x250>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	60bb      	str	r3, [r7, #8]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29c      	uxth	r4, r3
 8002eea:	4623      	mov	r3, r4
 8002eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d014      	beq.n	8002f1e <USB_ActivateEndpoint+0x2a6>
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0a:	b29c      	uxth	r4, r3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <USB_ActivateEndpoint+0x2e8>)
 8002f18:	4323      	orrs	r3, r4
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	b29c      	uxth	r4, r3
 8002f36:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002f3a:	b29c      	uxth	r4, r3
 8002f3c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002f40:	b29c      	uxth	r4, r3
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <USB_ActivateEndpoint+0x2e0>)
 8002f4e:	4323      	orrs	r3, r4
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	8013      	strh	r3, [r2, #0]
 8002f54:	e176      	b.n	8003244 <USB_ActivateEndpoint+0x5cc>
 8002f56:	bf00      	nop
 8002f58:	ffff8080 	.word	0xffff8080
 8002f5c:	ffff80c0 	.word	0xffff80c0
 8002f60:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f7a:	b29c      	uxth	r4, r3
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	441a      	add	r2, r3
 8002f86:	4b96      	ldr	r3, [pc, #600]	; (80031e0 <USB_ActivateEndpoint+0x568>)
 8002f88:	4323      	orrs	r3, r4
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002f8e:	687c      	ldr	r4, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	441c      	add	r4, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	4423      	add	r3, r4
 8002fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fa6:	461c      	mov	r4, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	891b      	ldrh	r3, [r3, #8]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	8023      	strh	r3, [r4, #0]
 8002fb6:	687c      	ldr	r4, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	441c      	add	r4, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4423      	add	r3, r4
 8002fca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002fce:	461c      	mov	r4, r3
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	895b      	ldrh	r3, [r3, #10]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	785b      	ldrb	r3, [r3, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 8088 	bne.w	80030f8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29c      	uxth	r4, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d014      	beq.n	800302a <USB_ActivateEndpoint+0x3b2>
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	b29b      	uxth	r3, r3
 800300e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003016:	b29c      	uxth	r4, r3
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	441a      	add	r2, r3
 8003022:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <USB_ActivateEndpoint+0x56c>)
 8003024:	4323      	orrs	r3, r4
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29c      	uxth	r4, r3
 8003038:	4623      	mov	r3, r4
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d014      	beq.n	800306c <USB_ActivateEndpoint+0x3f4>
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	b29c      	uxth	r4, r3
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	441a      	add	r2, r3
 8003064:	4b60      	ldr	r3, [pc, #384]	; (80031e8 <USB_ActivateEndpoint+0x570>)
 8003066:	4323      	orrs	r3, r4
 8003068:	b29b      	uxth	r3, r3
 800306a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003082:	b29c      	uxth	r4, r3
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	4b56      	ldr	r3, [pc, #344]	; (80031e8 <USB_ActivateEndpoint+0x570>)
 8003090:	4323      	orrs	r3, r4
 8003092:	b29b      	uxth	r3, r3
 8003094:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ac:	b29c      	uxth	r4, r3
 80030ae:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80030b2:	b29c      	uxth	r4, r3
 80030b4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80030b8:	b29c      	uxth	r4, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	441a      	add	r2, r3
 80030c4:	4b49      	ldr	r3, [pc, #292]	; (80031ec <USB_ActivateEndpoint+0x574>)
 80030c6:	4323      	orrs	r3, r4
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e2:	b29c      	uxth	r4, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	4b3f      	ldr	r3, [pc, #252]	; (80031ec <USB_ActivateEndpoint+0x574>)
 80030f0:	4323      	orrs	r3, r4
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	8013      	strh	r3, [r2, #0]
 80030f6:	e0a5      	b.n	8003244 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29c      	uxth	r4, r3
 8003106:	4623      	mov	r3, r4
 8003108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d014      	beq.n	800313a <USB_ActivateEndpoint+0x4c2>
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003126:	b29c      	uxth	r4, r3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <USB_ActivateEndpoint+0x56c>)
 8003134:	4323      	orrs	r3, r4
 8003136:	b29b      	uxth	r3, r3
 8003138:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29c      	uxth	r4, r3
 8003148:	4623      	mov	r3, r4
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d014      	beq.n	800317c <USB_ActivateEndpoint+0x504>
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	b29c      	uxth	r4, r3
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	441a      	add	r2, r3
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <USB_ActivateEndpoint+0x570>)
 8003176:	4323      	orrs	r3, r4
 8003178:	b29b      	uxth	r3, r3
 800317a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003192:	b29c      	uxth	r4, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	441a      	add	r2, r3
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <USB_ActivateEndpoint+0x56c>)
 80031a0:	4323      	orrs	r3, r4
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	78db      	ldrb	r3, [r3, #3]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d020      	beq.n	80031f0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c4:	b29c      	uxth	r4, r3
 80031c6:	f084 0320 	eor.w	r3, r4, #32
 80031ca:	b29c      	uxth	r4, r3
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	441a      	add	r2, r3
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <USB_ActivateEndpoint+0x574>)
 80031d8:	4323      	orrs	r3, r4
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8013      	strh	r3, [r2, #0]
 80031de:	e01c      	b.n	800321a <USB_ActivateEndpoint+0x5a2>
 80031e0:	ffff8180 	.word	0xffff8180
 80031e4:	ffffc080 	.word	0xffffc080
 80031e8:	ffff80c0 	.word	0xffff80c0
 80031ec:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003206:	b29c      	uxth	r4, r3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	441a      	add	r2, r3
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <USB_ActivateEndpoint+0x5d8>)
 8003214:	4323      	orrs	r3, r4
 8003216:	b29b      	uxth	r3, r3
 8003218:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003230:	b29c      	uxth	r4, r3
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	441a      	add	r2, r3
 800323c:	4b04      	ldr	r3, [pc, #16]	; (8003250 <USB_ActivateEndpoint+0x5d8>)
 800323e:	4323      	orrs	r3, r4
 8003240:	b29b      	uxth	r3, r3
 8003242:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003244:	7bfb      	ldrb	r3, [r7, #15]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bc90      	pop	{r4, r7}
 800324e:	4770      	bx	lr
 8003250:	ffff8080 	.word	0xffff8080

08003254 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003254:	b490      	push	{r4, r7}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	7b1b      	ldrb	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d171      	bne.n	800334a <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	785b      	ldrb	r3, [r3, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d036      	beq.n	80032dc <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29c      	uxth	r4, r3
 800327c:	4623      	mov	r3, r4
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d014      	beq.n	80032b0 <USB_DeactivateEndpoint+0x5c>
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329c:	b29c      	uxth	r4, r3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <USB_DeactivateEndpoint+0x204>)
 80032aa:	4323      	orrs	r3, r4
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c6:	b29c      	uxth	r4, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	441a      	add	r2, r3
 80032d2:	4b62      	ldr	r3, [pc, #392]	; (800345c <USB_DeactivateEndpoint+0x208>)
 80032d4:	4323      	orrs	r3, r4
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	8013      	strh	r3, [r2, #0]
 80032da:	e144      	b.n	8003566 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29c      	uxth	r4, r3
 80032ea:	4623      	mov	r3, r4
 80032ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d014      	beq.n	800331e <USB_DeactivateEndpoint+0xca>
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	b29c      	uxth	r4, r3
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	441a      	add	r2, r3
 8003316:	4b52      	ldr	r3, [pc, #328]	; (8003460 <USB_DeactivateEndpoint+0x20c>)
 8003318:	4323      	orrs	r3, r4
 800331a:	b29b      	uxth	r3, r3
 800331c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	b29c      	uxth	r4, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	441a      	add	r2, r3
 8003340:	4b46      	ldr	r3, [pc, #280]	; (800345c <USB_DeactivateEndpoint+0x208>)
 8003342:	4323      	orrs	r3, r4
 8003344:	b29b      	uxth	r3, r3
 8003346:	8013      	strh	r3, [r2, #0]
 8003348:	e10d      	b.n	8003566 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 8088 	bne.w	8003464 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29c      	uxth	r4, r3
 8003362:	4623      	mov	r3, r4
 8003364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d014      	beq.n	8003396 <USB_DeactivateEndpoint+0x142>
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003382:	b29c      	uxth	r4, r3
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	441a      	add	r2, r3
 800338e:	4b34      	ldr	r3, [pc, #208]	; (8003460 <USB_DeactivateEndpoint+0x20c>)
 8003390:	4323      	orrs	r3, r4
 8003392:	b29b      	uxth	r3, r3
 8003394:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29c      	uxth	r4, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d014      	beq.n	80033d8 <USB_DeactivateEndpoint+0x184>
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	b29c      	uxth	r4, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	441a      	add	r2, r3
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <USB_DeactivateEndpoint+0x204>)
 80033d2:	4323      	orrs	r3, r4
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	b29c      	uxth	r4, r3
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	441a      	add	r2, r3
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <USB_DeactivateEndpoint+0x204>)
 80033fc:	4323      	orrs	r3, r4
 80033fe:	b29b      	uxth	r3, r3
 8003400:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003418:	b29c      	uxth	r4, r3
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	441a      	add	r2, r3
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <USB_DeactivateEndpoint+0x208>)
 8003426:	4323      	orrs	r3, r4
 8003428:	b29b      	uxth	r3, r3
 800342a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003442:	b29c      	uxth	r4, r3
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	441a      	add	r2, r3
 800344e:	4b03      	ldr	r3, [pc, #12]	; (800345c <USB_DeactivateEndpoint+0x208>)
 8003450:	4323      	orrs	r3, r4
 8003452:	b29b      	uxth	r3, r3
 8003454:	8013      	strh	r3, [r2, #0]
 8003456:	e086      	b.n	8003566 <USB_DeactivateEndpoint+0x312>
 8003458:	ffff80c0 	.word	0xffff80c0
 800345c:	ffff8080 	.word	0xffff8080
 8003460:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29c      	uxth	r4, r3
 8003472:	4623      	mov	r3, r4
 8003474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d014      	beq.n	80034a6 <USB_DeactivateEndpoint+0x252>
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	b29c      	uxth	r4, r3
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	441a      	add	r2, r3
 800349e:	4b35      	ldr	r3, [pc, #212]	; (8003574 <USB_DeactivateEndpoint+0x320>)
 80034a0:	4323      	orrs	r3, r4
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	b29c      	uxth	r4, r3
 80034b4:	4623      	mov	r3, r4
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d014      	beq.n	80034e8 <USB_DeactivateEndpoint+0x294>
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d4:	b29c      	uxth	r4, r3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <USB_DeactivateEndpoint+0x324>)
 80034e2:	4323      	orrs	r3, r4
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	b29c      	uxth	r4, r3
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	441a      	add	r2, r3
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <USB_DeactivateEndpoint+0x320>)
 800350c:	4323      	orrs	r3, r4
 800350e:	b29b      	uxth	r3, r3
 8003510:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003528:	b29c      	uxth	r4, r3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	441a      	add	r2, r3
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <USB_DeactivateEndpoint+0x328>)
 8003536:	4323      	orrs	r3, r4
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800354e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003552:	b29c      	uxth	r4, r3
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	4b07      	ldr	r3, [pc, #28]	; (800357c <USB_DeactivateEndpoint+0x328>)
 8003560:	4323      	orrs	r3, r4
 8003562:	b29b      	uxth	r3, r3
 8003564:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bc90      	pop	{r4, r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	ffffc080 	.word	0xffffc080
 8003578:	ffff80c0 	.word	0xffff80c0
 800357c:	ffff8080 	.word	0xffff8080

08003580 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b08d      	sub	sp, #52	; 0x34
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	785b      	ldrb	r3, [r3, #1]
 800358e:	2b01      	cmp	r3, #1
 8003590:	f040 8160 	bne.w	8003854 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	429a      	cmp	r2, r3
 800359e:	d909      	bls.n	80035b4 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	619a      	str	r2, [r3, #24]
 80035b2:	e005      	b.n	80035c0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	7b1b      	ldrb	r3, [r3, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d119      	bne.n	80035fc <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6959      	ldr	r1, [r3, #20]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	88da      	ldrh	r2, [r3, #6]
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fba2 	bl	8003d1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80035da:	687c      	ldr	r4, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	441c      	add	r4, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4423      	add	r3, r4
 80035ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80035f2:	461c      	mov	r4, r3
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	8023      	strh	r3, [r4, #0]
 80035fa:	e10f      	b.n	800381c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d065      	beq.n	80036de <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003612:	687c      	ldr	r4, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	785b      	ldrb	r3, [r3, #1]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d148      	bne.n	80036ae <USB_EPStartXfer+0x12e>
 800361c:	687c      	ldr	r4, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003624:	b29b      	uxth	r3, r3
 8003626:	441c      	add	r4, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	4423      	add	r3, r4
 8003630:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003634:	461c      	mov	r4, r3
 8003636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10e      	bne.n	800365a <USB_EPStartXfer+0xda>
 800363c:	8823      	ldrh	r3, [r4, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003644:	b29b      	uxth	r3, r3
 8003646:	8023      	strh	r3, [r4, #0]
 8003648:	8823      	ldrh	r3, [r4, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003654:	b29b      	uxth	r3, r3
 8003656:	8023      	strh	r3, [r4, #0]
 8003658:	e03d      	b.n	80036d6 <USB_EPStartXfer+0x156>
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	2b3e      	cmp	r3, #62	; 0x3e
 800365e:	d810      	bhi.n	8003682 <USB_EPStartXfer+0x102>
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <USB_EPStartXfer+0xf6>
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	3301      	adds	r3, #1
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	b29b      	uxth	r3, r3
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	b29b      	uxth	r3, r3
 800367e:	8023      	strh	r3, [r4, #0]
 8003680:	e029      	b.n	80036d6 <USB_EPStartXfer+0x156>
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	095b      	lsrs	r3, r3, #5
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <USB_EPStartXfer+0x118>
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	3b01      	subs	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	b29b      	uxth	r3, r3
 800369c:	029b      	lsls	r3, r3, #10
 800369e:	b29b      	uxth	r3, r3
 80036a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8023      	strh	r3, [r4, #0]
 80036ac:	e013      	b.n	80036d6 <USB_EPStartXfer+0x156>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	785b      	ldrb	r3, [r3, #1]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10f      	bne.n	80036d6 <USB_EPStartXfer+0x156>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036bc:	b29b      	uxth	r3, r3
 80036be:	441c      	add	r4, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4423      	add	r3, r4
 80036c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	895b      	ldrh	r3, [r3, #10]
 80036da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80036dc:	e063      	b.n	80037a6 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	785b      	ldrb	r3, [r3, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d148      	bne.n	8003778 <USB_EPStartXfer+0x1f8>
 80036e6:	687c      	ldr	r4, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	441c      	add	r4, r3
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	4423      	add	r3, r4
 80036fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80036fe:	461c      	mov	r4, r3
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <USB_EPStartXfer+0x1a4>
 8003706:	8823      	ldrh	r3, [r4, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800370e:	b29b      	uxth	r3, r3
 8003710:	8023      	strh	r3, [r4, #0]
 8003712:	8823      	ldrh	r3, [r4, #0]
 8003714:	b29b      	uxth	r3, r3
 8003716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800371e:	b29b      	uxth	r3, r3
 8003720:	8023      	strh	r3, [r4, #0]
 8003722:	e03d      	b.n	80037a0 <USB_EPStartXfer+0x220>
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	2b3e      	cmp	r3, #62	; 0x3e
 8003728:	d810      	bhi.n	800374c <USB_EPStartXfer+0x1cc>
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <USB_EPStartXfer+0x1c0>
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	3301      	adds	r3, #1
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	b29b      	uxth	r3, r3
 8003744:	029b      	lsls	r3, r3, #10
 8003746:	b29b      	uxth	r3, r3
 8003748:	8023      	strh	r3, [r4, #0]
 800374a:	e029      	b.n	80037a0 <USB_EPStartXfer+0x220>
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	623b      	str	r3, [r7, #32]
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	f003 031f 	and.w	r3, r3, #31
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <USB_EPStartXfer+0x1e2>
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	3b01      	subs	r3, #1
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	b29b      	uxth	r3, r3
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	b29b      	uxth	r3, r3
 800376a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800376e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003772:	b29b      	uxth	r3, r3
 8003774:	8023      	strh	r3, [r4, #0]
 8003776:	e013      	b.n	80037a0 <USB_EPStartXfer+0x220>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d10f      	bne.n	80037a0 <USB_EPStartXfer+0x220>
 8003780:	687c      	ldr	r4, [r7, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003788:	b29b      	uxth	r3, r3
 800378a:	441c      	add	r4, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4423      	add	r3, r4
 8003794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003798:	461c      	mov	r4, r3
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	b29b      	uxth	r3, r3
 800379e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	891b      	ldrh	r3, [r3, #8]
 80037a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6959      	ldr	r1, [r3, #20]
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fab4 	bl	8003d1e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	785b      	ldrb	r3, [r3, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d115      	bne.n	80037ea <USB_EPStartXfer+0x26a>
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d4:	b29c      	uxth	r4, r3
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	441a      	add	r2, r3
 80037e0:	4b9a      	ldr	r3, [pc, #616]	; (8003a4c <USB_EPStartXfer+0x4cc>)
 80037e2:	4323      	orrs	r3, r4
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	8013      	strh	r3, [r2, #0]
 80037e8:	e018      	b.n	800381c <USB_EPStartXfer+0x29c>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d114      	bne.n	800381c <USB_EPStartXfer+0x29c>
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003808:	b29c      	uxth	r4, r3
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	441a      	add	r2, r3
 8003814:	4b8e      	ldr	r3, [pc, #568]	; (8003a50 <USB_EPStartXfer+0x4d0>)
 8003816:	4323      	orrs	r3, r4
 8003818:	b29b      	uxth	r3, r3
 800381a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003832:	b29c      	uxth	r4, r3
 8003834:	f084 0310 	eor.w	r3, r4, #16
 8003838:	b29c      	uxth	r4, r3
 800383a:	f084 0320 	eor.w	r3, r4, #32
 800383e:	b29c      	uxth	r4, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	4b82      	ldr	r3, [pc, #520]	; (8003a54 <USB_EPStartXfer+0x4d4>)
 800384c:	4323      	orrs	r3, r4
 800384e:	b29b      	uxth	r3, r3
 8003850:	8013      	strh	r3, [r2, #0]
 8003852:	e146      	b.n	8003ae2 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	699a      	ldr	r2, [r3, #24]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d909      	bls.n	8003874 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	619a      	str	r2, [r3, #24]
 8003872:	e005      	b.n	8003880 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2200      	movs	r2, #0
 800387e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	7b1b      	ldrb	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d148      	bne.n	800391a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003888:	687c      	ldr	r4, [r7, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003890:	b29b      	uxth	r3, r3
 8003892:	441c      	add	r4, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	4423      	add	r3, r4
 800389c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038a0:	461c      	mov	r4, r3
 80038a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10e      	bne.n	80038c6 <USB_EPStartXfer+0x346>
 80038a8:	8823      	ldrh	r3, [r4, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	8023      	strh	r3, [r4, #0]
 80038b4:	8823      	ldrh	r3, [r4, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	8023      	strh	r3, [r4, #0]
 80038c4:	e0f2      	b.n	8003aac <USB_EPStartXfer+0x52c>
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2b3e      	cmp	r3, #62	; 0x3e
 80038ca:	d810      	bhi.n	80038ee <USB_EPStartXfer+0x36e>
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <USB_EPStartXfer+0x362>
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3301      	adds	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	8023      	strh	r3, [r4, #0]
 80038ec:	e0de      	b.n	8003aac <USB_EPStartXfer+0x52c>
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	61fb      	str	r3, [r7, #28]
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <USB_EPStartXfer+0x384>
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3b01      	subs	r3, #1
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	b29b      	uxth	r3, r3
 8003908:	029b      	lsls	r3, r3, #10
 800390a:	b29b      	uxth	r3, r3
 800390c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003914:	b29b      	uxth	r3, r3
 8003916:	8023      	strh	r3, [r4, #0]
 8003918:	e0c8      	b.n	8003aac <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d148      	bne.n	80039b4 <USB_EPStartXfer+0x434>
 8003922:	687c      	ldr	r4, [r7, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392a:	b29b      	uxth	r3, r3
 800392c:	441c      	add	r4, r3
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	4423      	add	r3, r4
 8003936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800393a:	461c      	mov	r4, r3
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10e      	bne.n	8003960 <USB_EPStartXfer+0x3e0>
 8003942:	8823      	ldrh	r3, [r4, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800394a:	b29b      	uxth	r3, r3
 800394c:	8023      	strh	r3, [r4, #0]
 800394e:	8823      	ldrh	r3, [r4, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800395a:	b29b      	uxth	r3, r3
 800395c:	8023      	strh	r3, [r4, #0]
 800395e:	e03d      	b.n	80039dc <USB_EPStartXfer+0x45c>
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2b3e      	cmp	r3, #62	; 0x3e
 8003964:	d810      	bhi.n	8003988 <USB_EPStartXfer+0x408>
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <USB_EPStartXfer+0x3fc>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	3301      	adds	r3, #1
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	b29b      	uxth	r3, r3
 8003980:	029b      	lsls	r3, r3, #10
 8003982:	b29b      	uxth	r3, r3
 8003984:	8023      	strh	r3, [r4, #0]
 8003986:	e029      	b.n	80039dc <USB_EPStartXfer+0x45c>
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <USB_EPStartXfer+0x41e>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	3b01      	subs	r3, #1
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	029b      	lsls	r3, r3, #10
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8023      	strh	r3, [r4, #0]
 80039b2:	e013      	b.n	80039dc <USB_EPStartXfer+0x45c>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10f      	bne.n	80039dc <USB_EPStartXfer+0x45c>
 80039bc:	687c      	ldr	r4, [r7, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	441c      	add	r4, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4423      	add	r3, r4
 80039d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d4:	461c      	mov	r4, r3
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8023      	strh	r3, [r4, #0]
 80039dc:	687c      	ldr	r4, [r7, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d14e      	bne.n	8003a84 <USB_EPStartXfer+0x504>
 80039e6:	687c      	ldr	r4, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	441c      	add	r4, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	4423      	add	r3, r4
 80039fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039fe:	461c      	mov	r4, r3
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10e      	bne.n	8003a24 <USB_EPStartXfer+0x4a4>
 8003a06:	8823      	ldrh	r3, [r4, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	8023      	strh	r3, [r4, #0]
 8003a12:	8823      	ldrh	r3, [r4, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	8023      	strh	r3, [r4, #0]
 8003a22:	e043      	b.n	8003aac <USB_EPStartXfer+0x52c>
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	2b3e      	cmp	r3, #62	; 0x3e
 8003a28:	d816      	bhi.n	8003a58 <USB_EPStartXfer+0x4d8>
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <USB_EPStartXfer+0x4c0>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	029b      	lsls	r3, r3, #10
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	8023      	strh	r3, [r4, #0]
 8003a4a:	e02f      	b.n	8003aac <USB_EPStartXfer+0x52c>
 8003a4c:	ffff80c0 	.word	0xffff80c0
 8003a50:	ffffc080 	.word	0xffffc080
 8003a54:	ffff8080 	.word	0xffff8080
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	f003 031f 	and.w	r3, r3, #31
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <USB_EPStartXfer+0x4ee>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	029b      	lsls	r3, r3, #10
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	8023      	strh	r3, [r4, #0]
 8003a82:	e013      	b.n	8003aac <USB_EPStartXfer+0x52c>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	785b      	ldrb	r3, [r3, #1]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10f      	bne.n	8003aac <USB_EPStartXfer+0x52c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	441c      	add	r4, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	4423      	add	r3, r4
 8003a9e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	b29c      	uxth	r4, r3
 8003ac4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003ac8:	b29c      	uxth	r4, r3
 8003aca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003ace:	b29c      	uxth	r4, r3
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <USB_EPStartXfer+0x56c>)
 8003adc:	4323      	orrs	r3, r4
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3734      	adds	r7, #52	; 0x34
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	ffff8080 	.word	0xffff8080

08003af0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003af0:	b490      	push	{r4, r7}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	785b      	ldrb	r3, [r3, #1]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d018      	beq.n	8003b34 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	881b      	ldrh	r3, [r3, #0]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b18:	b29c      	uxth	r4, r3
 8003b1a:	f084 0310 	eor.w	r3, r4, #16
 8003b1e:	b29c      	uxth	r4, r3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	441a      	add	r2, r3
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <USB_EPSetStall+0x80>)
 8003b2c:	4323      	orrs	r3, r4
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8013      	strh	r3, [r2, #0]
 8003b32:	e017      	b.n	8003b64 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	b29c      	uxth	r4, r3
 8003b4c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003b50:	b29c      	uxth	r4, r3
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	441a      	add	r2, r3
 8003b5c:	4b04      	ldr	r3, [pc, #16]	; (8003b70 <USB_EPSetStall+0x80>)
 8003b5e:	4323      	orrs	r3, r4
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc90      	pop	{r4, r7}
 8003b6e:	4770      	bx	lr
 8003b70:	ffff8080 	.word	0xffff8080

08003b74 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003b74:	b490      	push	{r4, r7}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	7b1b      	ldrb	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d17d      	bne.n	8003c82 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d03d      	beq.n	8003c0a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29c      	uxth	r4, r3
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <USB_EPClearStall+0x5c>
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	b29c      	uxth	r4, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <USB_EPClearStall+0x11c>)
 8003bca:	4323      	orrs	r3, r4
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	78db      	ldrb	r3, [r3, #3]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d054      	beq.n	8003c82 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bee:	b29c      	uxth	r4, r3
 8003bf0:	f084 0320 	eor.w	r3, r4, #32
 8003bf4:	b29c      	uxth	r4, r3
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <USB_EPClearStall+0x120>)
 8003c02:	4323      	orrs	r3, r4
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	8013      	strh	r3, [r2, #0]
 8003c08:	e03b      	b.n	8003c82 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	881b      	ldrh	r3, [r3, #0]
 8003c16:	b29c      	uxth	r4, r3
 8003c18:	4623      	mov	r3, r4
 8003c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d014      	beq.n	8003c4c <USB_EPClearStall+0xd8>
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	b29c      	uxth	r4, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	441a      	add	r2, r3
 8003c44:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <USB_EPClearStall+0x124>)
 8003c46:	4323      	orrs	r3, r4
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c62:	b29c      	uxth	r4, r3
 8003c64:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003c68:	b29c      	uxth	r4, r3
 8003c6a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c6e:	b29c      	uxth	r4, r3
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	441a      	add	r2, r3
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <USB_EPClearStall+0x120>)
 8003c7c:	4323      	orrs	r3, r4
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3708      	adds	r7, #8
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc90      	pop	{r4, r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	ffff80c0 	.word	0xffff80c0
 8003c94:	ffff8080 	.word	0xffff8080
 8003c98:	ffffc080 	.word	0xffffc080

08003c9c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr

08003cc2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bc80      	pop	{r7}
 8003ce8:	4770      	bx	lr

08003cea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr

08003d1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b08d      	sub	sp, #52	; 0x34
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	80fb      	strh	r3, [r7, #6]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003d34:	88bb      	ldrh	r3, [r7, #4]
 8003d36:	3301      	adds	r3, #1
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	005a      	lsls	r2, r3, #1
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d56:	e01e      	b.n	8003d96 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	3301      	adds	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d80:	3302      	adds	r3, #2
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8003d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d86:	3302      	adds	r3, #2
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	3b01      	subs	r3, #1
 8003d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1dd      	bne.n	8003d58 <USB_WritePMA+0x3a>
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3734      	adds	r7, #52	; 0x34
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b08b      	sub	sp, #44	; 0x2c
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	4611      	mov	r1, r2
 8003db2:	461a      	mov	r2, r3
 8003db4:	460b      	mov	r3, r1
 8003db6:	80fb      	strh	r3, [r7, #6]
 8003db8:	4613      	mov	r3, r2
 8003dba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003dbc:	88bb      	ldrh	r3, [r7, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	005a      	lsls	r2, r3, #1
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dd8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dde:	e01b      	b.n	8003e18 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	3302      	adds	r3, #2
 8003dec:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	3302      	adds	r3, #2
 8003e10:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	3b01      	subs	r3, #1
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e0      	bne.n	8003de0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003e1e:	88bb      	ldrh	r3, [r7, #4]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	881b      	ldrh	r3, [r3, #0]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	701a      	strb	r2, [r3, #0]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	372c      	adds	r7, #44	; 0x2c
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8003e50:	2358      	movs	r3, #88	; 0x58
 8003e52:	2201      	movs	r2, #1
 8003e54:	2101      	movs	r1, #1
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f001 fdbd 	bl	80059d6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Allocate Audio structure */
  pdev->pClassData = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8003e64:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8003e68:	f001 fed6 	bl	8005c18 <USBD_static_malloc>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <USBD_AUDIO_Init+0x3e>
  {
    return USBD_FAIL;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	e034      	b.n	8003eec <USBD_AUDIO_Init+0xa8>
  }
  else
  {
    haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e88:	60fb      	str	r3, [r7, #12]
    haudio->alt_setting = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
    haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8003e96:	3304      	adds	r3, #4
 8003e98:	2203      	movs	r2, #3
 8003e9a:	701a      	strb	r2, [r3, #0]
    haudio->wr_ptr = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	801a      	strh	r2, [r3, #0]
    haudio->rd_ptr = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8003eae:	3306      	adds	r3, #6
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	801a      	strh	r2, [r3, #0]
    haudio->rd_enable = 0U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8003eba:	3305      	adds	r3, #5
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	701a      	strb	r2, [r3, #0]

    /* Initialize the Audio output Hardware layer */
    if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2146      	movs	r1, #70	; 0x46
 8003ecc:	f245 6054 	movw	r0, #22100	; 0x5654
 8003ed0:	4798      	blx	r3
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <USBD_AUDIO_Init+0x98>
                                                         AUDIO_DEFAULT_VOLUME,
                                                         0U) != 0)
    {
      return USBD_FAIL;
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e007      	b.n	8003eec <USBD_AUDIO_Init+0xa8>
    }

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1d1a      	adds	r2, r3, #4
 8003ee0:	2358      	movs	r3, #88	; 0x58
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f001 fe60 	bl	8005baa <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <USBD_AUDIO_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev,
                                  uint8_t cfgidx)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8003f00:	2101      	movs	r1, #1
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f001 fd8d 	bl	8005a22 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00f      	beq.n	8003f3a <USBD_AUDIO_DeInit+0x46>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2000      	movs	r0, #0
 8003f24:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fe7f 	bl	8005c30 <USBD_static_free>
    pdev->pClassData = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                 USBD_SetupReqTypedef *req)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	813b      	strh	r3, [r7, #8]
  uint8_t ret = USBD_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f5c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01a      	beq.n	8003fa0 <USBD_AUDIO_Setup+0x5c>
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	f040 809c 	bne.w	80040a8 <USBD_AUDIO_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d006      	beq.n	8003f86 <USBD_AUDIO_Setup+0x42>
 8003f78:	2b81      	cmp	r3, #129	; 0x81
 8003f7a:	d109      	bne.n	8003f90 <USBD_AUDIO_Setup+0x4c>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8003f7c:	6839      	ldr	r1, [r7, #0]
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f980 	bl	8004284 <AUDIO_REQ_GetCurrent>
          break;
 8003f84:	e00b      	b.n	8003f9e <USBD_AUDIO_Setup+0x5a>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8003f86:	6839      	ldr	r1, [r7, #0]
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f99b 	bl	80042c4 <AUDIO_REQ_SetCurrent>
          break;
 8003f8e:	e006      	b.n	8003f9e <USBD_AUDIO_Setup+0x5a>

        default:
          USBD_CtlError(pdev, req);
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f001 f98a 	bl	80052ac <USBD_CtlError>
          ret = USBD_FAIL;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8003f9c:	bf00      	nop
      }
      break;
 8003f9e:	e08a      	b.n	80040b6 <USBD_AUDIO_Setup+0x172>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	785b      	ldrb	r3, [r3, #1]
 8003fa4:	2b0b      	cmp	r3, #11
 8003fa6:	d876      	bhi.n	8004096 <USBD_AUDIO_Setup+0x152>
 8003fa8:	a201      	add	r2, pc, #4	; (adr r2, 8003fb0 <USBD_AUDIO_Setup+0x6c>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08004097 	.word	0x08004097
 8003fb8:	08004097 	.word	0x08004097
 8003fbc:	08004097 	.word	0x08004097
 8003fc0:	08004097 	.word	0x08004097
 8003fc4:	08004097 	.word	0x08004097
 8003fc8:	08004009 	.word	0x08004009
 8003fcc:	08004097 	.word	0x08004097
 8003fd0:	08004097 	.word	0x08004097
 8003fd4:	08004097 	.word	0x08004097
 8003fd8:	08004033 	.word	0x08004033
 8003fdc:	08004059 	.word	0x08004059
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d107      	bne.n	8003ffa <USBD_AUDIO_Setup+0xb6>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	2202      	movs	r2, #2
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f001 f9c4 	bl	8005380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003ff8:	e055      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 f955 	bl	80052ac <USBD_CtlError>
            ret = USBD_FAIL;
 8004002:	2302      	movs	r3, #2
 8004004:	75fb      	strb	r3, [r7, #23]
          break;
 8004006:	e04e      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	885b      	ldrh	r3, [r3, #2]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b21      	cmp	r3, #33	; 0x21
 8004012:	d147      	bne.n	80040a4 <USBD_AUDIO_Setup+0x160>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8004014:	4b2a      	ldr	r3, [pc, #168]	; (80040c0 <USBD_AUDIO_Setup+0x17c>)
 8004016:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	88db      	ldrh	r3, [r3, #6]
 800401c:	2b09      	cmp	r3, #9
 800401e:	bf28      	it	cs
 8004020:	2309      	movcs	r3, #9
 8004022:	817b      	strh	r3, [r7, #10]

            USBD_CtlSendData(pdev, pbuf, len);
 8004024:	897b      	ldrh	r3, [r7, #10]
 8004026:	461a      	mov	r2, r3
 8004028:	68f9      	ldr	r1, [r7, #12]
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f001 f9a8 	bl	8005380 <USBD_CtlSendData>
          }
          break;
 8004030:	e038      	b.n	80040a4 <USBD_AUDIO_Setup+0x160>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004038:	2b03      	cmp	r3, #3
 800403a:	d106      	bne.n	800404a <USBD_AUDIO_Setup+0x106>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&haudio->alt_setting, 1U);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2201      	movs	r2, #1
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f001 f99c 	bl	8005380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004048:	e02d      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 800404a:	6839      	ldr	r1, [r7, #0]
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f001 f92d 	bl	80052ac <USBD_CtlError>
            ret = USBD_FAIL;
 8004052:	2302      	movs	r3, #2
 8004054:	75fb      	strb	r3, [r7, #23]
          break;
 8004056:	e026      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800405e:	2b03      	cmp	r3, #3
 8004060:	d112      	bne.n	8004088 <USBD_AUDIO_Setup+0x144>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	885b      	ldrh	r3, [r3, #2]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d806      	bhi.n	800407a <USBD_AUDIO_Setup+0x136>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	885b      	ldrh	r3, [r3, #2]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004078:	e015      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>
              USBD_CtlError(pdev, req);
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f001 f915 	bl	80052ac <USBD_CtlError>
              ret = USBD_FAIL;
 8004082:	2302      	movs	r3, #2
 8004084:	75fb      	strb	r3, [r7, #23]
          break;
 8004086:	e00e      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>
            USBD_CtlError(pdev, req);
 8004088:	6839      	ldr	r1, [r7, #0]
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f001 f90e 	bl	80052ac <USBD_CtlError>
            ret = USBD_FAIL;
 8004090:	2302      	movs	r3, #2
 8004092:	75fb      	strb	r3, [r7, #23]
          break;
 8004094:	e007      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>

        default:
          USBD_CtlError(pdev, req);
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f001 f907 	bl	80052ac <USBD_CtlError>
          ret = USBD_FAIL;
 800409e:	2302      	movs	r3, #2
 80040a0:	75fb      	strb	r3, [r7, #23]
          break;
 80040a2:	e000      	b.n	80040a6 <USBD_AUDIO_Setup+0x162>
          break;
 80040a4:	bf00      	nop
      }
      break;
 80040a6:	e006      	b.n	80040b6 <USBD_AUDIO_Setup+0x172>
    default:
      USBD_CtlError(pdev, req);
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f001 f8fe 	bl	80052ac <USBD_CtlError>
      ret = USBD_FAIL;
 80040b0:	2302      	movs	r3, #2
 80040b2:	75fb      	strb	r3, [r7, #23]
      break;
 80040b4:	bf00      	nop
  }

  return ret;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3718      	adds	r7, #24
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000056 	.word	0x20000056

080040c4 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_CfgDesc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	226d      	movs	r2, #109	; 0x6d
 80040d0:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80040d2:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000044 	.word	0x20000044

080040e4 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  /* Only OUT data are processed */
  return USBD_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800410a:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004112:	330a      	adds	r3, #10
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d11d      	bne.n	8004156 <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8004120:	330c      	adds	r3, #12
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d116      	bne.n	8004156 <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004136:	330b      	adds	r3, #11
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	4790      	blx	r2
      haudio->control.cmd = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004144:	330a      	adds	r3, #10
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8004150:	330b      	adds	r3, #11
 8004152:	2200      	movs	r2, #0
 8004154:	701a      	strb	r2, [r3, #0]
    }
  }

  return USBD_OK;
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr

08004188 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr

080041b8 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80041ca:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d153      	bne.n	800427a <USBD_AUDIO_DataOut+0xc2>
  {
    /* Increment the Buffer pointer or roll it back when all buffers are full */

    haudio->wr_ptr += AUDIO_OUT_PACKET;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80041d8:	3308      	adds	r3, #8
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	3358      	adds	r3, #88	; 0x58
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80041e6:	3308      	adds	r3, #8
 80041e8:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80041f0:	3308      	adds	r3, #8
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 80041f8:	d11c      	bne.n	8004234 <USBD_AUDIO_DataOut+0x7c>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004200:	3308      	adds	r3, #8
 8004202:	2200      	movs	r2, #0
 8004204:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800420c:	3304      	adds	r3, #4
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d10f      	bne.n	8004234 <USBD_AUDIO_DataOut+0x7c>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	1d10      	adds	r0, r2, #4
 8004220:	2201      	movs	r2, #1
 8004222:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8004226:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800422e:	3304      	adds	r3, #4
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800423a:	3305      	adds	r3, #5
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10d      	bne.n	800425e <USBD_AUDIO_DataOut+0xa6>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004248:	3308      	adds	r3, #8
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8004250:	d105      	bne.n	800425e <USBD_AUDIO_DataOut+0xa6>
      {
        haudio->rd_enable = 1U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004258:	3305      	adds	r3, #5
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, &haudio->buffer[haudio->wr_ptr],
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8004264:	3308      	adds	r3, #8
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	2358      	movs	r3, #88	; 0x58
 8004272:	2101      	movs	r1, #1
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f001 fc98 	bl	8005baa <USBD_LL_PrepareReceive>
                           AUDIO_OUT_PACKET);
  }

  return USBD_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004294:	60fb      	str	r3, [r7, #12]

  memset(haudio->control.data, 0, 64U);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800429c:	330b      	adds	r3, #11
 800429e:	2240      	movs	r2, #64	; 0x40
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 fd28 	bl	8005cf8 <memset>

  /* Send the current mute state */
  USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80042ae:	330b      	adds	r3, #11
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	88d2      	ldrh	r2, [r2, #6]
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f001 f862 	bl	8005380 <USBD_CtlSendData>
}
 80042bc:	bf00      	nop
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef   *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *) pdev->pClassData;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042d4:	60fb      	str	r3, [r7, #12]

  if (req->wLength)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	88db      	ldrh	r3, [r3, #6]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d021      	beq.n	8004322 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80042e4:	330b      	adds	r3, #11
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	88d2      	ldrh	r2, [r2, #6]
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f001 f875 	bl	80053dc <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80042f8:	330a      	adds	r3, #10
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	88db      	ldrh	r3, [r3, #6]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800430a:	330b      	adds	r3, #11
 800430c:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	889b      	ldrh	r3, [r3, #4]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	b29b      	uxth	r3, r3
 8004316:	b2da      	uxtb	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 800431e:	330c      	adds	r3, #12
 8004320:	701a      	strb	r2, [r3, #0]
  }
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	220a      	movs	r2, #10
 8004338:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800433a:	4b03      	ldr	r3, [pc, #12]	; (8004348 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bc80      	pop	{r7}
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	200000b4 	.word	0x200000b4

0800434c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t  USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                      USBD_AUDIO_ItfTypeDef *fops)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <USBD_AUDIO_RegisterInterface+0x18>
  {
    pdev->pUserData = fops;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004384:	2302      	movs	r3, #2
 8004386:	e01a      	b.n	80043be <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	79fa      	ldrb	r2, [r7, #7]
 80043b4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f001 fab2 	bl	8005920 <USBD_LL_Init>

  return USBD_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d006      	beq.n	80043e8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e001      	b.n	80043ec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80043e8:	2302      	movs	r3, #2
 80043ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f001 facd 	bl	80059a0 <USBD_LL_Start>

  return USBD_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004430:	2302      	movs	r3, #2
 8004432:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	4611      	mov	r1, r2
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	4611      	mov	r1, r2
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3

  return USBD_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 feca 	bl	8005234 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80044ae:	461a      	mov	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80044bc:	f003 031f 	and.w	r3, r3, #31
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d00c      	beq.n	80044de <USBD_LL_SetupStage+0x56>
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d302      	bcc.n	80044ce <USBD_LL_SetupStage+0x46>
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d010      	beq.n	80044ee <USBD_LL_SetupStage+0x66>
 80044cc:	e017      	b.n	80044fe <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f9ca 	bl	8004870 <USBD_StdDevReq>
      break;
 80044dc:	e01a      	b.n	8004514 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa2c 	bl	8004944 <USBD_StdItfReq>
      break;
 80044ec:	e012      	b.n	8004514 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80044f4:	4619      	mov	r1, r3
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa6a 	bl	80049d0 <USBD_StdEPReq>
      break;
 80044fc:	e00a      	b.n	8004514 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004504:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004508:	b2db      	uxtb	r3, r3
 800450a:	4619      	mov	r1, r3
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 faa7 	bl	8005a60 <USBD_LL_StallEP>
      break;
 8004512:	bf00      	nop
  }

  return USBD_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	460b      	mov	r3, r1
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d14b      	bne.n	80045ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004538:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004540:	2b03      	cmp	r3, #3
 8004542:	d134      	bne.n	80045ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	429a      	cmp	r2, r3
 800454e:	d919      	bls.n	8004584 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	1ad2      	subs	r2, r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004566:	429a      	cmp	r2, r3
 8004568:	d203      	bcs.n	8004572 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800456e:	b29b      	uxth	r3, r3
 8004570:	e002      	b.n	8004578 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004576:	b29b      	uxth	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 ff4b 	bl	8005418 <USBD_CtlContinueRx>
 8004582:	e038      	b.n	80045f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004596:	2b03      	cmp	r3, #3
 8004598:	d105      	bne.n	80045a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 ff48 	bl	800543c <USBD_CtlSendStatus>
 80045ac:	e023      	b.n	80045f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d11e      	bne.n	80045f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80045c0:	2100      	movs	r1, #0
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f001 fa4c 	bl	8005a60 <USBD_LL_StallEP>
 80045c8:	e015      	b.n	80045f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00d      	beq.n	80045f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d108      	bne.n	80045f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	7afa      	ldrb	r2, [r7, #11]
 80045ea:	4611      	mov	r1, r2
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	4798      	blx	r3
 80045f0:	e001      	b.n	80045f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80045f2:	2302      	movs	r3, #2
 80045f4:	e000      	b.n	80045f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	460b      	mov	r3, r1
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800460e:	7afb      	ldrb	r3, [r7, #11]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d17f      	bne.n	8004714 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3314      	adds	r3, #20
 8004618:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004620:	2b02      	cmp	r3, #2
 8004622:	d15c      	bne.n	80046de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	429a      	cmp	r2, r3
 800462e:	d915      	bls.n	800465c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	1ad2      	subs	r2, r2, r3
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	b29b      	uxth	r3, r3
 8004644:	461a      	mov	r2, r3
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 feb5 	bl	80053b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800464e:	2300      	movs	r3, #0
 8004650:	2200      	movs	r2, #0
 8004652:	2100      	movs	r1, #0
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f001 faa8 	bl	8005baa <USBD_LL_PrepareReceive>
 800465a:	e04e      	b.n	80046fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6912      	ldr	r2, [r2, #16]
 8004664:	fbb3 f1f2 	udiv	r1, r3, r2
 8004668:	fb02 f201 	mul.w	r2, r2, r1
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11c      	bne.n	80046ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800467a:	429a      	cmp	r2, r3
 800467c:	d316      	bcc.n	80046ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004688:	429a      	cmp	r2, r3
 800468a:	d20f      	bcs.n	80046ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800468c:	2200      	movs	r2, #0
 800468e:	2100      	movs	r1, #0
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 fe91 	bl	80053b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800469e:	2300      	movs	r3, #0
 80046a0:	2200      	movs	r2, #0
 80046a2:	2100      	movs	r1, #0
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f001 fa80 	bl	8005baa <USBD_LL_PrepareReceive>
 80046aa:	e026      	b.n	80046fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d105      	bne.n	80046ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80046ce:	2180      	movs	r1, #128	; 0x80
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f001 f9c5 	bl	8005a60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fec3 	bl	8005462 <USBD_CtlReceiveStatus>
 80046dc:	e00d      	b.n	80046fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d004      	beq.n	80046f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80046f2:	2180      	movs	r1, #128	; 0x80
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f001 f9b3 	bl	8005a60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004700:	2b01      	cmp	r3, #1
 8004702:	d11d      	bne.n	8004740 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff fe83 	bl	8004410 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004712:	e015      	b.n	8004740 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004726:	2b03      	cmp	r3, #3
 8004728:	d108      	bne.n	800473c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	7afa      	ldrb	r2, [r7, #11]
 8004734:	4611      	mov	r1, r2
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	4798      	blx	r3
 800473a:	e001      	b.n	8004740 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800473c:	2302      	movs	r3, #2
 800473e:	e000      	b.n	8004742 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004752:	2340      	movs	r3, #64	; 0x40
 8004754:	2200      	movs	r2, #0
 8004756:	2100      	movs	r1, #0
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f001 f93c 	bl	80059d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2240      	movs	r2, #64	; 0x40
 800476a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800476e:	2340      	movs	r3, #64	; 0x40
 8004770:	2200      	movs	r2, #0
 8004772:	2180      	movs	r1, #128	; 0x80
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f001 f92e 	bl	80059d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2240      	movs	r2, #64	; 0x40
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6852      	ldr	r2, [r2, #4]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	4611      	mov	r1, r2
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	4798      	blx	r3
  }

  return USBD_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr

080047ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2204      	movs	r2, #4
 8004802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr

08004812 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004820:	2b04      	cmp	r3, #4
 8004822:	d105      	bne.n	8004830 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800484a:	2b03      	cmp	r3, #3
 800484c:	d10b      	bne.n	8004866 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d005      	beq.n	8004866 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004886:	2b20      	cmp	r3, #32
 8004888:	d004      	beq.n	8004894 <USBD_StdDevReq+0x24>
 800488a:	2b40      	cmp	r3, #64	; 0x40
 800488c:	d002      	beq.n	8004894 <USBD_StdDevReq+0x24>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <USBD_StdDevReq+0x34>
 8004892:	e04c      	b.n	800492e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
      break;
 80048a2:	e049      	b.n	8004938 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b09      	cmp	r3, #9
 80048aa:	d83a      	bhi.n	8004922 <USBD_StdDevReq+0xb2>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <USBD_StdDevReq+0x44>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	08004905 	.word	0x08004905
 80048b8:	08004919 	.word	0x08004919
 80048bc:	08004923 	.word	0x08004923
 80048c0:	0800490f 	.word	0x0800490f
 80048c4:	08004923 	.word	0x08004923
 80048c8:	080048e7 	.word	0x080048e7
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	08004923 	.word	0x08004923
 80048d4:	080048fb 	.word	0x080048fb
 80048d8:	080048f1 	.word	0x080048f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80048dc:	6839      	ldr	r1, [r7, #0]
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9d4 	bl	8004c8c <USBD_GetDescriptor>
          break;
 80048e4:	e022      	b.n	800492c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fb37 	bl	8004f5c <USBD_SetAddress>
          break;
 80048ee:	e01d      	b.n	800492c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fb74 	bl	8004fe0 <USBD_SetConfig>
          break;
 80048f8:	e018      	b.n	800492c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fbfd 	bl	80050fc <USBD_GetConfig>
          break;
 8004902:	e013      	b.n	800492c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fc2c 	bl	8005164 <USBD_GetStatus>
          break;
 800490c:	e00e      	b.n	800492c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800490e:	6839      	ldr	r1, [r7, #0]
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fc5a 	bl	80051ca <USBD_SetFeature>
          break;
 8004916:	e009      	b.n	800492c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fc69 	bl	80051f2 <USBD_ClrFeature>
          break;
 8004920:	e004      	b.n	800492c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004922:	6839      	ldr	r1, [r7, #0]
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fcc1 	bl	80052ac <USBD_CtlError>
          break;
 800492a:	bf00      	nop
      }
      break;
 800492c:	e004      	b.n	8004938 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800492e:	6839      	ldr	r1, [r7, #0]
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fcbb 	bl	80052ac <USBD_CtlError>
      break;
 8004936:	bf00      	nop
  }

  return ret;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop

08004944 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800494e:	2300      	movs	r3, #0
 8004950:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800495a:	2b20      	cmp	r3, #32
 800495c:	d003      	beq.n	8004966 <USBD_StdItfReq+0x22>
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d001      	beq.n	8004966 <USBD_StdItfReq+0x22>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d12a      	bne.n	80049bc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800496c:	3b01      	subs	r3, #1
 800496e:	2b02      	cmp	r3, #2
 8004970:	d81d      	bhi.n	80049ae <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	889b      	ldrh	r3, [r3, #4]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b01      	cmp	r3, #1
 800497a:	d813      	bhi.n	80049a4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	6839      	ldr	r1, [r7, #0]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
 800498a:	4603      	mov	r3, r0
 800498c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	88db      	ldrh	r3, [r3, #6]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d110      	bne.n	80049b8 <USBD_StdItfReq+0x74>
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fd4d 	bl	800543c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80049a2:	e009      	b.n	80049b8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fc80 	bl	80052ac <USBD_CtlError>
          break;
 80049ac:	e004      	b.n	80049b8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fc7b 	bl	80052ac <USBD_CtlError>
          break;
 80049b6:	e000      	b.n	80049ba <USBD_StdItfReq+0x76>
          break;
 80049b8:	bf00      	nop
      }
      break;
 80049ba:	e004      	b.n	80049c6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fc74 	bl	80052ac <USBD_CtlError>
      break;
 80049c4:	bf00      	nop
  }

  return USBD_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	889b      	ldrh	r3, [r3, #4]
 80049e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d004      	beq.n	80049fa <USBD_StdEPReq+0x2a>
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d002      	beq.n	80049fa <USBD_StdEPReq+0x2a>
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <USBD_StdEPReq+0x3a>
 80049f8:	e13d      	b.n	8004c76 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	6839      	ldr	r1, [r7, #0]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	4798      	blx	r3
      break;
 8004a08:	e13a      	b.n	8004c80 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a12:	2b20      	cmp	r3, #32
 8004a14:	d10a      	bne.n	8004a2c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	e12a      	b.n	8004c82 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d03e      	beq.n	8004ab2 <USBD_StdEPReq+0xe2>
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d002      	beq.n	8004a3e <USBD_StdEPReq+0x6e>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d070      	beq.n	8004b1e <USBD_StdEPReq+0x14e>
 8004a3c:	e115      	b.n	8004c6a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d002      	beq.n	8004a4e <USBD_StdEPReq+0x7e>
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d015      	beq.n	8004a78 <USBD_StdEPReq+0xa8>
 8004a4c:	e02b      	b.n	8004aa6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a4e:	7bbb      	ldrb	r3, [r7, #14]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00c      	beq.n	8004a6e <USBD_StdEPReq+0x9e>
 8004a54:	7bbb      	ldrb	r3, [r7, #14]
 8004a56:	2b80      	cmp	r3, #128	; 0x80
 8004a58:	d009      	beq.n	8004a6e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004a5a:	7bbb      	ldrb	r3, [r7, #14]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fffe 	bl	8005a60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fffa 	bl	8005a60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004a6c:	e020      	b.n	8004ab0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fc1b 	bl	80052ac <USBD_CtlError>
              break;
 8004a76:	e01b      	b.n	8004ab0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	885b      	ldrh	r3, [r3, #2]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10e      	bne.n	8004a9e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004a80:	7bbb      	ldrb	r3, [r7, #14]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00b      	beq.n	8004a9e <USBD_StdEPReq+0xce>
 8004a86:	7bbb      	ldrb	r3, [r7, #14]
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	d008      	beq.n	8004a9e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	88db      	ldrh	r3, [r3, #6]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004a94:	7bbb      	ldrb	r3, [r7, #14]
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 ffe1 	bl	8005a60 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fccc 	bl	800543c <USBD_CtlSendStatus>

              break;
 8004aa4:	e004      	b.n	8004ab0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fbff 	bl	80052ac <USBD_CtlError>
              break;
 8004aae:	bf00      	nop
          }
          break;
 8004ab0:	e0e0      	b.n	8004c74 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d002      	beq.n	8004ac2 <USBD_StdEPReq+0xf2>
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d015      	beq.n	8004aec <USBD_StdEPReq+0x11c>
 8004ac0:	e026      	b.n	8004b10 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ac2:	7bbb      	ldrb	r3, [r7, #14]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00c      	beq.n	8004ae2 <USBD_StdEPReq+0x112>
 8004ac8:	7bbb      	ldrb	r3, [r7, #14]
 8004aca:	2b80      	cmp	r3, #128	; 0x80
 8004acc:	d009      	beq.n	8004ae2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004ace:	7bbb      	ldrb	r3, [r7, #14]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 ffc4 	bl	8005a60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 ffc0 	bl	8005a60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ae0:	e01c      	b.n	8004b1c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fbe1 	bl	80052ac <USBD_CtlError>
              break;
 8004aea:	e017      	b.n	8004b1c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	885b      	ldrh	r3, [r3, #2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d112      	bne.n	8004b1a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d004      	beq.n	8004b08 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004afe:	7bbb      	ldrb	r3, [r7, #14]
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 ffcb 	bl	8005a9e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fc97 	bl	800543c <USBD_CtlSendStatus>
              }
              break;
 8004b0e:	e004      	b.n	8004b1a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fbca 	bl	80052ac <USBD_CtlError>
              break;
 8004b18:	e000      	b.n	8004b1c <USBD_StdEPReq+0x14c>
              break;
 8004b1a:	bf00      	nop
          }
          break;
 8004b1c:	e0aa      	b.n	8004c74 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d002      	beq.n	8004b2e <USBD_StdEPReq+0x15e>
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d032      	beq.n	8004b92 <USBD_StdEPReq+0x1c2>
 8004b2c:	e097      	b.n	8004c5e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b2e:	7bbb      	ldrb	r3, [r7, #14]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <USBD_StdEPReq+0x174>
 8004b34:	7bbb      	ldrb	r3, [r7, #14]
 8004b36:	2b80      	cmp	r3, #128	; 0x80
 8004b38:	d004      	beq.n	8004b44 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fbb5 	bl	80052ac <USBD_CtlError>
                break;
 8004b42:	e091      	b.n	8004c68 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	da0b      	bge.n	8004b64 <USBD_StdEPReq+0x194>
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
 8004b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b52:	4613      	mov	r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	3310      	adds	r3, #16
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	4413      	add	r3, r2
 8004b60:	3304      	adds	r3, #4
 8004b62:	e00b      	b.n	8004b7c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004b64:	7bbb      	ldrb	r3, [r7, #14]
 8004b66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2202      	movs	r2, #2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fbf8 	bl	8005380 <USBD_CtlSendData>
              break;
 8004b90:	e06a      	b.n	8004c68 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004b92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da11      	bge.n	8004bbe <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004b9a:	7bbb      	ldrb	r3, [r7, #14]
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3318      	adds	r3, #24
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d117      	bne.n	8004be4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004bb4:	6839      	ldr	r1, [r7, #0]
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fb78 	bl	80052ac <USBD_CtlError>
                  break;
 8004bbc:	e054      	b.n	8004c68 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004bbe:	7bbb      	ldrb	r3, [r7, #14]
 8004bc0:	f003 020f 	and.w	r2, r3, #15
 8004bc4:	6879      	ldr	r1, [r7, #4]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d104      	bne.n	8004be4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004bda:	6839      	ldr	r1, [r7, #0]
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fb65 	bl	80052ac <USBD_CtlError>
                  break;
 8004be2:	e041      	b.n	8004c68 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da0b      	bge.n	8004c04 <USBD_StdEPReq+0x234>
 8004bec:	7bbb      	ldrb	r3, [r7, #14]
 8004bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	3310      	adds	r3, #16
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	3304      	adds	r3, #4
 8004c02:	e00b      	b.n	8004c1c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004c04:	7bbb      	ldrb	r3, [r7, #14]
 8004c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4413      	add	r3, r2
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c1e:	7bbb      	ldrb	r3, [r7, #14]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <USBD_StdEPReq+0x25a>
 8004c24:	7bbb      	ldrb	r3, [r7, #14]
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d103      	bne.n	8004c32 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e00e      	b.n	8004c50 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004c32:	7bbb      	ldrb	r3, [r7, #14]
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 ff50 	bl	8005adc <USBD_LL_IsStallEP>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e002      	b.n	8004c50 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2202      	movs	r2, #2
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fb92 	bl	8005380 <USBD_CtlSendData>
              break;
 8004c5c:	e004      	b.n	8004c68 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004c5e:	6839      	ldr	r1, [r7, #0]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fb23 	bl	80052ac <USBD_CtlError>
              break;
 8004c66:	bf00      	nop
          }
          break;
 8004c68:	e004      	b.n	8004c74 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004c6a:	6839      	ldr	r1, [r7, #0]
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fb1d 	bl	80052ac <USBD_CtlError>
          break;
 8004c72:	bf00      	nop
      }
      break;
 8004c74:	e004      	b.n	8004c80 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb17 	bl	80052ac <USBD_CtlError>
      break;
 8004c7e:	bf00      	nop
  }

  return ret;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	885b      	ldrh	r3, [r3, #2]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	2b06      	cmp	r3, #6
 8004cae:	f200 8128 	bhi.w	8004f02 <USBD_GetDescriptor+0x276>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <USBD_GetDescriptor+0x2c>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cd5 	.word	0x08004cd5
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004d2d 	.word	0x08004d2d
 8004cc4:	08004f03 	.word	0x08004f03
 8004cc8:	08004f03 	.word	0x08004f03
 8004ccc:	08004ea3 	.word	0x08004ea3
 8004cd0:	08004ecf 	.word	0x08004ecf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	7c12      	ldrb	r2, [r2, #16]
 8004ce0:	f107 0108 	add.w	r1, r7, #8
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4798      	blx	r3
 8004ce8:	60f8      	str	r0, [r7, #12]
      break;
 8004cea:	e112      	b.n	8004f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7c1b      	ldrb	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10d      	bne.n	8004d10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3
 8004d04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004d0e:	e100      	b.n	8004f12 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	f107 0208 	add.w	r2, r7, #8
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4798      	blx	r3
 8004d20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	2202      	movs	r2, #2
 8004d28:	701a      	strb	r2, [r3, #0]
      break;
 8004d2a:	e0f2      	b.n	8004f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	885b      	ldrh	r3, [r3, #2]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b05      	cmp	r3, #5
 8004d34:	f200 80ac 	bhi.w	8004e90 <USBD_GetDescriptor+0x204>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <USBD_GetDescriptor+0xb4>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d59 	.word	0x08004d59
 8004d44:	08004d8d 	.word	0x08004d8d
 8004d48:	08004dc1 	.word	0x08004dc1
 8004d4c:	08004df5 	.word	0x08004df5
 8004d50:	08004e29 	.word	0x08004e29
 8004d54:	08004e5d 	.word	0x08004e5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	7c12      	ldrb	r2, [r2, #16]
 8004d70:	f107 0108 	add.w	r1, r7, #8
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
 8004d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004d7a:	e091      	b.n	8004ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fa94 	bl	80052ac <USBD_CtlError>
            err++;
 8004d84:	7afb      	ldrb	r3, [r7, #11]
 8004d86:	3301      	adds	r3, #1
 8004d88:	72fb      	strb	r3, [r7, #11]
          break;
 8004d8a:	e089      	b.n	8004ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	7c12      	ldrb	r2, [r2, #16]
 8004da4:	f107 0108 	add.w	r1, r7, #8
 8004da8:	4610      	mov	r0, r2
 8004daa:	4798      	blx	r3
 8004dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004dae:	e077      	b.n	8004ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 fa7a 	bl	80052ac <USBD_CtlError>
            err++;
 8004db8:	7afb      	ldrb	r3, [r7, #11]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8004dbe:	e06f      	b.n	8004ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00b      	beq.n	8004de4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	7c12      	ldrb	r2, [r2, #16]
 8004dd8:	f107 0108 	add.w	r1, r7, #8
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4798      	blx	r3
 8004de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004de2:	e05d      	b.n	8004ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa60 	bl	80052ac <USBD_CtlError>
            err++;
 8004dec:	7afb      	ldrb	r3, [r7, #11]
 8004dee:	3301      	adds	r3, #1
 8004df0:	72fb      	strb	r3, [r7, #11]
          break;
 8004df2:	e055      	b.n	8004ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	7c12      	ldrb	r2, [r2, #16]
 8004e0c:	f107 0108 	add.w	r1, r7, #8
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
 8004e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e16:	e043      	b.n	8004ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa46 	bl	80052ac <USBD_CtlError>
            err++;
 8004e20:	7afb      	ldrb	r3, [r7, #11]
 8004e22:	3301      	adds	r3, #1
 8004e24:	72fb      	strb	r3, [r7, #11]
          break;
 8004e26:	e03b      	b.n	8004ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00b      	beq.n	8004e4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	7c12      	ldrb	r2, [r2, #16]
 8004e40:	f107 0108 	add.w	r1, r7, #8
 8004e44:	4610      	mov	r0, r2
 8004e46:	4798      	blx	r3
 8004e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e4a:	e029      	b.n	8004ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e4c:	6839      	ldr	r1, [r7, #0]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa2c 	bl	80052ac <USBD_CtlError>
            err++;
 8004e54:	7afb      	ldrb	r3, [r7, #11]
 8004e56:	3301      	adds	r3, #1
 8004e58:	72fb      	strb	r3, [r7, #11]
          break;
 8004e5a:	e021      	b.n	8004ea0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	7c12      	ldrb	r2, [r2, #16]
 8004e74:	f107 0108 	add.w	r1, r7, #8
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4798      	blx	r3
 8004e7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004e7e:	e00f      	b.n	8004ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa12 	bl	80052ac <USBD_CtlError>
            err++;
 8004e88:	7afb      	ldrb	r3, [r7, #11]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	72fb      	strb	r3, [r7, #11]
          break;
 8004e8e:	e007      	b.n	8004ea0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa0a 	bl	80052ac <USBD_CtlError>
          err++;
 8004e98:	7afb      	ldrb	r3, [r7, #11]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004e9e:	e038      	b.n	8004f12 <USBD_GetDescriptor+0x286>
 8004ea0:	e037      	b.n	8004f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7c1b      	ldrb	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	f107 0208 	add.w	r2, r7, #8
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4798      	blx	r3
 8004eba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004ebc:	e029      	b.n	8004f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f9f3 	bl	80052ac <USBD_CtlError>
        err++;
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	72fb      	strb	r3, [r7, #11]
      break;
 8004ecc:	e021      	b.n	8004f12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7c1b      	ldrb	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f107 0208 	add.w	r2, r7, #8
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	4798      	blx	r3
 8004ee6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	2207      	movs	r2, #7
 8004eee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004ef0:	e00f      	b.n	8004f12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f9d9 	bl	80052ac <USBD_CtlError>
        err++;
 8004efa:	7afb      	ldrb	r3, [r7, #11]
 8004efc:	3301      	adds	r3, #1
 8004efe:	72fb      	strb	r3, [r7, #11]
      break;
 8004f00:	e007      	b.n	8004f12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8004f02:	6839      	ldr	r1, [r7, #0]
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9d1 	bl	80052ac <USBD_CtlError>
      err++;
 8004f0a:	7afb      	ldrb	r3, [r7, #11]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	72fb      	strb	r3, [r7, #11]
      break;
 8004f10:	bf00      	nop
  }

  if (err != 0U)
 8004f12:	7afb      	ldrb	r3, [r7, #11]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11c      	bne.n	8004f52 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004f18:	893b      	ldrh	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d011      	beq.n	8004f42 <USBD_GetDescriptor+0x2b6>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	88db      	ldrh	r3, [r3, #6]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00d      	beq.n	8004f42 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	88da      	ldrh	r2, [r3, #6]
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	bf28      	it	cs
 8004f30:	4613      	movcs	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004f36:	893b      	ldrh	r3, [r7, #8]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	68f9      	ldr	r1, [r7, #12]
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fa1f 	bl	8005380 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	88db      	ldrh	r3, [r3, #6]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d104      	bne.n	8004f54 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa76 	bl	800543c <USBD_CtlSendStatus>
 8004f50:	e000      	b.n	8004f54 <USBD_GetDescriptor+0x2c8>
    return;
 8004f52:	bf00      	nop
    }
  }
}
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop

08004f5c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	889b      	ldrh	r3, [r3, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d130      	bne.n	8004fd0 <USBD_SetAddress+0x74>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	88db      	ldrh	r3, [r3, #6]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d12c      	bne.n	8004fd0 <USBD_SetAddress+0x74>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	885b      	ldrh	r3, [r3, #2]
 8004f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f7c:	d828      	bhi.n	8004fd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	885b      	ldrh	r3, [r3, #2]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d104      	bne.n	8004f9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f988 	bl	80052ac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9c:	e01c      	b.n	8004fd8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fdbb 	bl	8005b26 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fa43 	bl	800543c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004fb6:	7bfb      	ldrb	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc4:	e008      	b.n	8004fd8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fce:	e003      	b.n	8004fd8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004fd0:	6839      	ldr	r1, [r7, #0]
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f96a 	bl	80052ac <USBD_CtlError>
  }
}
 8004fd8:	bf00      	nop
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	885b      	ldrh	r3, [r3, #2]
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <USBD_SetConfig+0x118>)
 8004ff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004ff4:	4b40      	ldr	r3, [pc, #256]	; (80050f8 <USBD_SetConfig+0x118>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d904      	bls.n	8005006 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f954 	bl	80052ac <USBD_CtlError>
 8005004:	e075      	b.n	80050f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800500c:	2b02      	cmp	r3, #2
 800500e:	d002      	beq.n	8005016 <USBD_SetConfig+0x36>
 8005010:	2b03      	cmp	r3, #3
 8005012:	d023      	beq.n	800505c <USBD_SetConfig+0x7c>
 8005014:	e062      	b.n	80050dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005016:	4b38      	ldr	r3, [pc, #224]	; (80050f8 <USBD_SetConfig+0x118>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d01a      	beq.n	8005054 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800501e:	4b36      	ldr	r3, [pc, #216]	; (80050f8 <USBD_SetConfig+0x118>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2203      	movs	r2, #3
 800502c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005030:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <USBD_SetConfig+0x118>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff f9f4 	bl	8004424 <USBD_SetClassConfig>
 800503c:	4603      	mov	r3, r0
 800503e:	2b02      	cmp	r3, #2
 8005040:	d104      	bne.n	800504c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f931 	bl	80052ac <USBD_CtlError>
            return;
 800504a:	e052      	b.n	80050f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9f5 	bl	800543c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005052:	e04e      	b.n	80050f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f9f1 	bl	800543c <USBD_CtlSendStatus>
        break;
 800505a:	e04a      	b.n	80050f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800505c:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <USBD_SetConfig+0x118>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d112      	bne.n	800508a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2202      	movs	r2, #2
 8005068:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800506c:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <USBD_SetConfig+0x118>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <USBD_SetConfig+0x118>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff f9f0 	bl	8004462 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f9da 	bl	800543c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005088:	e033      	b.n	80050f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <USBD_SetConfig+0x118>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d01d      	beq.n	80050d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	4619      	mov	r1, r3
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff f9de 	bl	8004462 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <USBD_SetConfig+0x118>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <USBD_SetConfig+0x118>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff f9b4 	bl	8004424 <USBD_SetClassConfig>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d104      	bne.n	80050cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80050c2:	6839      	ldr	r1, [r7, #0]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8f1 	bl	80052ac <USBD_CtlError>
            return;
 80050ca:	e012      	b.n	80050f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f9b5 	bl	800543c <USBD_CtlSendStatus>
        break;
 80050d2:	e00e      	b.n	80050f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f9b1 	bl	800543c <USBD_CtlSendStatus>
        break;
 80050da:	e00a      	b.n	80050f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f8e4 	bl	80052ac <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80050e4:	4b04      	ldr	r3, [pc, #16]	; (80050f8 <USBD_SetConfig+0x118>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff f9b9 	bl	8004462 <USBD_ClrClassConfig>
        break;
 80050f0:	bf00      	nop
    }
  }
}
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000148 	.word	0x20000148

080050fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d004      	beq.n	8005118 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8cb 	bl	80052ac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005116:	e021      	b.n	800515c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800511e:	2b01      	cmp	r3, #1
 8005120:	db17      	blt.n	8005152 <USBD_GetConfig+0x56>
 8005122:	2b02      	cmp	r3, #2
 8005124:	dd02      	ble.n	800512c <USBD_GetConfig+0x30>
 8005126:	2b03      	cmp	r3, #3
 8005128:	d00b      	beq.n	8005142 <USBD_GetConfig+0x46>
 800512a:	e012      	b.n	8005152 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3308      	adds	r3, #8
 8005136:	2201      	movs	r2, #1
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f920 	bl	8005380 <USBD_CtlSendData>
        break;
 8005140:	e00c      	b.n	800515c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3304      	adds	r3, #4
 8005146:	2201      	movs	r2, #1
 8005148:	4619      	mov	r1, r3
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f918 	bl	8005380 <USBD_CtlSendData>
        break;
 8005150:	e004      	b.n	800515c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f8a9 	bl	80052ac <USBD_CtlError>
        break;
 800515a:	bf00      	nop
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005174:	3b01      	subs	r3, #1
 8005176:	2b02      	cmp	r3, #2
 8005178:	d81e      	bhi.n	80051b8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	88db      	ldrh	r3, [r3, #6]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d004      	beq.n	800518c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f891 	bl	80052ac <USBD_CtlError>
        break;
 800518a:	e01a      	b.n	80051c2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f043 0202 	orr.w	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	330c      	adds	r3, #12
 80051ac:	2202      	movs	r2, #2
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f8e5 	bl	8005380 <USBD_CtlSendData>
      break;
 80051b6:	e004      	b.n	80051c2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f876 	bl	80052ac <USBD_CtlError>
      break;
 80051c0:	bf00      	nop
  }
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	885b      	ldrh	r3, [r3, #2]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d106      	bne.n	80051ea <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f929 	bl	800543c <USBD_CtlSendStatus>
  }
}
 80051ea:	bf00      	nop
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005202:	3b01      	subs	r3, #1
 8005204:	2b02      	cmp	r3, #2
 8005206:	d80b      	bhi.n	8005220 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	885b      	ldrh	r3, [r3, #2]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10c      	bne.n	800522a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f90f 	bl	800543c <USBD_CtlSendStatus>
      }
      break;
 800521e:	e004      	b.n	800522a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f842 	bl	80052ac <USBD_CtlError>
      break;
 8005228:	e000      	b.n	800522c <USBD_ClrFeature+0x3a>
      break;
 800522a:	bf00      	nop
  }
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781a      	ldrb	r2, [r3, #0]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	785a      	ldrb	r2, [r3, #1]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	3302      	adds	r3, #2
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	b29a      	uxth	r2, r3
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	3303      	adds	r3, #3
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	b29b      	uxth	r3, r3
 8005262:	4413      	add	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3304      	adds	r3, #4
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	b29a      	uxth	r2, r3
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	3305      	adds	r3, #5
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	b29b      	uxth	r3, r3
 800527e:	4413      	add	r3, r2
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	3306      	adds	r3, #6
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	b29a      	uxth	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	3307      	adds	r3, #7
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	b29b      	uxth	r3, r3
 800529a:	4413      	add	r3, r2
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	80da      	strh	r2, [r3, #6]

}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fbd1 	bl	8005a60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80052be:	2100      	movs	r1, #0
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fbcd 	bl	8005a60 <USBD_LL_StallEP>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b086      	sub	sp, #24
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d032      	beq.n	800534a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f834 	bl	8005352 <USBD_GetLen>
 80052ea:	4603      	mov	r3, r0
 80052ec:	3301      	adds	r3, #1
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	75fa      	strb	r2, [r7, #23]
 80052fe:	461a      	mov	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4413      	add	r3, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	7812      	ldrb	r2, [r2, #0]
 8005308:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	75fa      	strb	r2, [r7, #23]
 8005310:	461a      	mov	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	2203      	movs	r2, #3
 8005318:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800531a:	e012      	b.n	8005342 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	60fa      	str	r2, [r7, #12]
 8005322:	7dfa      	ldrb	r2, [r7, #23]
 8005324:	1c51      	adds	r1, r2, #1
 8005326:	75f9      	strb	r1, [r7, #23]
 8005328:	4611      	mov	r1, r2
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	440a      	add	r2, r1
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	75fa      	strb	r2, [r7, #23]
 8005338:	461a      	mov	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e8      	bne.n	800531c <USBD_GetString+0x4e>
    }
  }
}
 800534a:	bf00      	nop
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800535e:	e005      	b.n	800536c <USBD_GetLen+0x1a>
  {
    len++;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	3301      	adds	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3301      	adds	r3, #1
 800536a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f5      	bne.n	8005360 <USBD_GetLen+0xe>
  }

  return len;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	4613      	mov	r3, r2
 800538c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2202      	movs	r2, #2
 8005392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005396:	88fa      	ldrh	r2, [r7, #6]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800539c:	88fa      	ldrh	r2, [r7, #6]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	2100      	movs	r1, #0
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fbdb 	bl	8005b64 <USBD_LL_Transmit>

  return USBD_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	2100      	movs	r1, #0
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fbc9 	bl	8005b64 <USBD_LL_Transmit>

  return USBD_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2203      	movs	r2, #3
 80053ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80053f2:	88fa      	ldrh	r2, [r7, #6]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80053fa:	88fa      	ldrh	r2, [r7, #6]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	2100      	movs	r1, #0
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fbce 	bl	8005baa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005426:	88fb      	ldrh	r3, [r7, #6]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	2100      	movs	r1, #0
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fbbc 	bl	8005baa <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2204      	movs	r2, #4
 8005448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800544c:	2300      	movs	r3, #0
 800544e:	2200      	movs	r2, #0
 8005450:	2100      	movs	r1, #0
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fb86 	bl	8005b64 <USBD_LL_Transmit>

  return USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2205      	movs	r2, #5
 800546e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005472:	2300      	movs	r3, #0
 8005474:	2200      	movs	r2, #0
 8005476:	2100      	movs	r1, #0
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fb96 	bl	8005baa <USBD_LL_PrepareReceive>

  return USBD_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800548c:	2200      	movs	r2, #0
 800548e:	4912      	ldr	r1, [pc, #72]	; (80054d8 <MX_USB_DEVICE_Init+0x50>)
 8005490:	4812      	ldr	r0, [pc, #72]	; (80054dc <MX_USB_DEVICE_Init+0x54>)
 8005492:	f7fe ff6d 	bl	8004370 <USBD_Init>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800549c:	f7fa ff56 	bl	800034c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 80054a0:	490f      	ldr	r1, [pc, #60]	; (80054e0 <MX_USB_DEVICE_Init+0x58>)
 80054a2:	480e      	ldr	r0, [pc, #56]	; (80054dc <MX_USB_DEVICE_Init+0x54>)
 80054a4:	f7fe ff8f 	bl	80043c6 <USBD_RegisterClass>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80054ae:	f7fa ff4d 	bl	800034c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 80054b2:	490c      	ldr	r1, [pc, #48]	; (80054e4 <MX_USB_DEVICE_Init+0x5c>)
 80054b4:	4809      	ldr	r0, [pc, #36]	; (80054dc <MX_USB_DEVICE_Init+0x54>)
 80054b6:	f7fe ff49 	bl	800434c <USBD_AUDIO_RegisterInterface>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80054c0:	f7fa ff44 	bl	800034c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80054c4:	4805      	ldr	r0, [pc, #20]	; (80054dc <MX_USB_DEVICE_Init+0x54>)
 80054c6:	f7fe ff97 	bl	80043f8 <USBD_Start>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80054d0:	f7fa ff3c 	bl	800034c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80054d4:	bf00      	nop
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	200000dc 	.word	0x200000dc
 80054dc:	20000394 	.word	0x20000394
 80054e0:	2000000c 	.word	0x2000000c
 80054e4:	200000c0 	.word	0x200000c0

080054e8 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80054f4:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8005508:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr

08005514 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d001      	beq.n	800552c <AUDIO_AudioCmd_FS+0x18>
 8005528:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800552a:	e000      	b.n	800552e <AUDIO_AudioCmd_FS+0x1a>
    break;
 800552c:	bf00      	nop
  }
  return (USBD_OK);
 800552e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr

0800553a <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	4603      	mov	r3, r0
 8005542:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8005544:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	bc80      	pop	{r7}
 800554e:	4770      	bx	lr

08005550 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800555a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800555c:	4618      	mov	r0, r3
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t cmd)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005570:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005572:	4618      	mov	r0, r3
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8005580:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr
	...

0800558c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	6039      	str	r1, [r7, #0]
 8005596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2212      	movs	r2, #18
 800559c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800559e:	4b03      	ldr	r3, [pc, #12]	; (80055ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	200000f8 	.word	0x200000f8

080055b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	4603      	mov	r3, r0
 80055b8:	6039      	str	r1, [r7, #0]
 80055ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2204      	movs	r2, #4
 80055c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80055c2:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	2000010c 	.word	0x2000010c

080055d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	6039      	str	r1, [r7, #0]
 80055de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4907      	ldr	r1, [pc, #28]	; (8005608 <USBD_FS_ProductStrDescriptor+0x34>)
 80055ea:	4808      	ldr	r0, [pc, #32]	; (800560c <USBD_FS_ProductStrDescriptor+0x38>)
 80055ec:	f7ff fe6f 	bl	80052ce <USBD_GetString>
 80055f0:	e004      	b.n	80055fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	4904      	ldr	r1, [pc, #16]	; (8005608 <USBD_FS_ProductStrDescriptor+0x34>)
 80055f6:	4805      	ldr	r0, [pc, #20]	; (800560c <USBD_FS_ProductStrDescriptor+0x38>)
 80055f8:	f7ff fe69 	bl	80052ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80055fc:	4b02      	ldr	r3, [pc, #8]	; (8005608 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000658 	.word	0x20000658
 800560c:	08005d34 	.word	0x08005d34

08005610 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	4904      	ldr	r1, [pc, #16]	; (8005630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005620:	4804      	ldr	r0, [pc, #16]	; (8005634 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005622:	f7ff fe54 	bl	80052ce <USBD_GetString>
  return USBD_StrDesc;
 8005626:	4b02      	ldr	r3, [pc, #8]	; (8005630 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000658 	.word	0x20000658
 8005634:	08005d48 	.word	0x08005d48

08005638 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	6039      	str	r1, [r7, #0]
 8005642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	221a      	movs	r2, #26
 8005648:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800564a:	f000 f843 	bl	80056d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800564e:	4b02      	ldr	r3, [pc, #8]	; (8005658 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20000110 	.word	0x20000110

0800565c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	4603      	mov	r3, r0
 8005664:	6039      	str	r1, [r7, #0]
 8005666:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d105      	bne.n	800567a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	4907      	ldr	r1, [pc, #28]	; (8005690 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005672:	4808      	ldr	r0, [pc, #32]	; (8005694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005674:	f7ff fe2b 	bl	80052ce <USBD_GetString>
 8005678:	e004      	b.n	8005684 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	4904      	ldr	r1, [pc, #16]	; (8005690 <USBD_FS_ConfigStrDescriptor+0x34>)
 800567e:	4805      	ldr	r0, [pc, #20]	; (8005694 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005680:	f7ff fe25 	bl	80052ce <USBD_GetString>
  }
  return USBD_StrDesc;
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000658 	.word	0x20000658
 8005694:	08005d5c 	.word	0x08005d5c

08005698 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	4603      	mov	r3, r0
 80056a0:	6039      	str	r1, [r7, #0]
 80056a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80056a4:	79fb      	ldrb	r3, [r7, #7]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4907      	ldr	r1, [pc, #28]	; (80056cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80056ae:	4808      	ldr	r0, [pc, #32]	; (80056d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80056b0:	f7ff fe0d 	bl	80052ce <USBD_GetString>
 80056b4:	e004      	b.n	80056c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	4904      	ldr	r1, [pc, #16]	; (80056cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80056ba:	4805      	ldr	r0, [pc, #20]	; (80056d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80056bc:	f7ff fe07 	bl	80052ce <USBD_GetString>
  }
  return USBD_StrDesc;
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000658 	.word	0x20000658
 80056d0:	08005d6c 	.word	0x08005d6c

080056d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <Get_SerialNum+0x44>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80056e0:	4b0e      	ldr	r3, [pc, #56]	; (800571c <Get_SerialNum+0x48>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <Get_SerialNum+0x4c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4413      	add	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d009      	beq.n	800570e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80056fa:	2208      	movs	r2, #8
 80056fc:	4909      	ldr	r1, [pc, #36]	; (8005724 <Get_SerialNum+0x50>)
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f000 f814 	bl	800572c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005704:	2204      	movs	r2, #4
 8005706:	4908      	ldr	r1, [pc, #32]	; (8005728 <Get_SerialNum+0x54>)
 8005708:	68b8      	ldr	r0, [r7, #8]
 800570a:	f000 f80f 	bl	800572c <IntToUnicode>
  }
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	1ffff7e8 	.word	0x1ffff7e8
 800571c:	1ffff7ec 	.word	0x1ffff7ec
 8005720:	1ffff7f0 	.word	0x1ffff7f0
 8005724:	20000112 	.word	0x20000112
 8005728:	20000122 	.word	0x20000122

0800572c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4613      	mov	r3, r2
 8005738:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]
 8005742:	e027      	b.n	8005794 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	0f1b      	lsrs	r3, r3, #28
 8005748:	2b09      	cmp	r3, #9
 800574a:	d80b      	bhi.n	8005764 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	0f1b      	lsrs	r3, r3, #28
 8005750:	b2da      	uxtb	r2, r3
 8005752:	7dfb      	ldrb	r3, [r7, #23]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4619      	mov	r1, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	440b      	add	r3, r1
 800575c:	3230      	adds	r2, #48	; 0x30
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e00a      	b.n	800577a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	0f1b      	lsrs	r3, r3, #28
 8005768:	b2da      	uxtb	r2, r3
 800576a:	7dfb      	ldrb	r3, [r7, #23]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	4619      	mov	r1, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	440b      	add	r3, r1
 8005774:	3237      	adds	r2, #55	; 0x37
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
 8005782:	005b      	lsls	r3, r3, #1
 8005784:	3301      	adds	r3, #1
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4413      	add	r3, r2
 800578a:	2200      	movs	r2, #0
 800578c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	3301      	adds	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
 8005794:	7dfa      	ldrb	r2, [r7, #23]
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	429a      	cmp	r2, r3
 800579a:	d3d3      	bcc.n	8005744 <IntToUnicode+0x18>
  }
}
 800579c:	bf00      	nop
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bc80      	pop	{r7}
 80057a4:	4770      	bx	lr
	...

080057a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0d      	ldr	r2, [pc, #52]	; (80057ec <HAL_PCD_MspInit+0x44>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d113      	bne.n	80057e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <HAL_PCD_MspInit+0x48>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	4a0c      	ldr	r2, [pc, #48]	; (80057f0 <HAL_PCD_MspInit+0x48>)
 80057c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057c4:	61d3      	str	r3, [r2, #28]
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <HAL_PCD_MspInit+0x48>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ce:	60fb      	str	r3, [r7, #12]
 80057d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80057d2:	2200      	movs	r2, #0
 80057d4:	2100      	movs	r1, #0
 80057d6:	2014      	movs	r0, #20
 80057d8:	f7fb f825 	bl	8000826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80057dc:	2014      	movs	r0, #20
 80057de:	f7fb f83e 	bl	800085e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40005c00 	.word	0x40005c00
 80057f0:	40021000 	.word	0x40021000

080057f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005808:	4619      	mov	r1, r3
 800580a:	4610      	mov	r0, r2
 800580c:	f7fe fe3c 	bl	8004488 <USBD_LL_SetupStage>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800582a:	78fb      	ldrb	r3, [r7, #3]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	015b      	lsls	r3, r3, #5
 8005830:	4413      	add	r3, r2
 8005832:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	4619      	mov	r1, r3
 800583c:	f7fe fe6f 	bl	800451e <USBD_LL_DataOutStage>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	015b      	lsls	r3, r3, #5
 8005860:	4413      	add	r3, r2
 8005862:	333c      	adds	r3, #60	; 0x3c
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	4619      	mov	r1, r3
 800586a:	f7fe fec9 	bl	8004600 <USBD_LL_DataInStage>
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe ffd9 	bl	800483c <USBD_LL_SOF>
}
 800588a:	bf00      	nop
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800589a:	2301      	movs	r3, #1
 800589c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d001      	beq.n	80058aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80058a6:	f7fa fd51 	bl	800034c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	4611      	mov	r1, r2
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe ff89 	bl	80047cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fe ff42 	bl	800474a <USBD_LL_Reset>
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe ff83 	bl	80047ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <HAL_PCD_SuspendCallback+0x30>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	4a03      	ldr	r2, [pc, #12]	; (8005900 <HAL_PCD_SuspendCallback+0x30>)
 80058f2:	f043 0306 	orr.w	r3, r3, #6
 80058f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80058f8:	bf00      	nop
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	e000ed00 	.word	0xe000ed00

08005904 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe ff7d 	bl	8004812 <USBD_LL_Resume>
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005928:	4a1b      	ldr	r2, [pc, #108]	; (8005998 <USBD_LL_Init+0x78>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a19      	ldr	r2, [pc, #100]	; (8005998 <USBD_LL_Init+0x78>)
 8005934:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005938:	4b17      	ldr	r3, [pc, #92]	; (8005998 <USBD_LL_Init+0x78>)
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <USBD_LL_Init+0x7c>)
 800593c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800593e:	4b16      	ldr	r3, [pc, #88]	; (8005998 <USBD_LL_Init+0x78>)
 8005940:	2208      	movs	r2, #8
 8005942:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005944:	4b14      	ldr	r3, [pc, #80]	; (8005998 <USBD_LL_Init+0x78>)
 8005946:	2202      	movs	r2, #2
 8005948:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800594a:	4b13      	ldr	r3, [pc, #76]	; (8005998 <USBD_LL_Init+0x78>)
 800594c:	2200      	movs	r2, #0
 800594e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005950:	4b11      	ldr	r3, [pc, #68]	; (8005998 <USBD_LL_Init+0x78>)
 8005952:	2200      	movs	r2, #0
 8005954:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005956:	4b10      	ldr	r3, [pc, #64]	; (8005998 <USBD_LL_Init+0x78>)
 8005958:	2200      	movs	r2, #0
 800595a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800595c:	480e      	ldr	r0, [pc, #56]	; (8005998 <USBD_LL_Init+0x78>)
 800595e:	f7fb f8f3 	bl	8000b48 <HAL_PCD_Init>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005968:	f7fa fcf0 	bl	800034c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005972:	2318      	movs	r3, #24
 8005974:	2200      	movs	r2, #0
 8005976:	2100      	movs	r1, #0
 8005978:	f7fb ff8c 	bl	8001894 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005982:	2358      	movs	r3, #88	; 0x58
 8005984:	2200      	movs	r2, #0
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	f7fb ff84 	bl	8001894 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000858 	.word	0x20000858
 800599c:	40005c00 	.word	0x40005c00

080059a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fb f9a7 	bl	8000d0a <HAL_PCD_Start>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f948 	bl	8005c58 <USBD_Get_USB_Status>
 80059c8:	4603      	mov	r3, r0
 80059ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	4608      	mov	r0, r1
 80059e0:	4611      	mov	r1, r2
 80059e2:	461a      	mov	r2, r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	70fb      	strb	r3, [r7, #3]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70bb      	strb	r3, [r7, #2]
 80059ec:	4613      	mov	r3, r2
 80059ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80059f4:	2300      	movs	r3, #0
 80059f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059fe:	78bb      	ldrb	r3, [r7, #2]
 8005a00:	883a      	ldrh	r2, [r7, #0]
 8005a02:	78f9      	ldrb	r1, [r7, #3]
 8005a04:	f7fb fada 	bl	8000fbc <HAL_PCD_EP_Open>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f922 	bl	8005c58 <USBD_Get_USB_Status>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3c:	78fa      	ldrb	r2, [r7, #3]
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fb fb1b 	bl	800107c <HAL_PCD_EP_Close>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f903 	bl	8005c58 <USBD_Get_USB_Status>
 8005a52:	4603      	mov	r3, r0
 8005a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a7a:	78fa      	ldrb	r2, [r7, #3]
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fb fbc5 	bl	800120e <HAL_PCD_EP_SetStall>
 8005a84:	4603      	mov	r3, r0
 8005a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f8e4 	bl	8005c58 <USBD_Get_USB_Status>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ab8:	78fa      	ldrb	r2, [r7, #3]
 8005aba:	4611      	mov	r1, r2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fb fc00 	bl	80012c2 <HAL_PCD_EP_ClrStall>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 f8c5 	bl	8005c58 <USBD_Get_USB_Status>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	da08      	bge.n	8005b0a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005af8:	78fb      	ldrb	r3, [r7, #3]
 8005afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	015b      	lsls	r3, r3, #5
 8005b02:	4413      	add	r3, r2
 8005b04:	332a      	adds	r3, #42	; 0x2a
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	e008      	b.n	8005b1c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005b0a:	78fb      	ldrb	r3, [r7, #3]
 8005b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	015b      	lsls	r3, r3, #5
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3714      	adds	r7, #20
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	4611      	mov	r1, r2
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fb fa14 	bl	8000f72 <HAL_PCD_SetAddress>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f881 	bl	8005c58 <USBD_Get_USB_Status>
 8005b56:	4603      	mov	r3, r0
 8005b58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	460b      	mov	r3, r1
 8005b72:	72fb      	strb	r3, [r7, #11]
 8005b74:	4613      	mov	r3, r2
 8005b76:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005b86:	893b      	ldrh	r3, [r7, #8]
 8005b88:	7af9      	ldrb	r1, [r7, #11]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	f7fb fb06 	bl	800119c <HAL_PCD_EP_Transmit>
 8005b90:	4603      	mov	r3, r0
 8005b92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f85e 	bl	8005c58 <USBD_Get_USB_Status>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005ba0:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	72fb      	strb	r3, [r7, #11]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005bcc:	893b      	ldrh	r3, [r7, #8]
 8005bce:	7af9      	ldrb	r1, [r7, #11]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	f7fb fa95 	bl	8001100 <HAL_PCD_EP_Receive>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005bda:	7dfb      	ldrb	r3, [r7, #23]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 f83b 	bl	8005c58 <USBD_Get_USB_Status>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005be6:	7dbb      	ldrb	r3, [r7, #22]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fb fab4 	bl	8001174 <HAL_PCD_EP_GetRxCount>
 8005c0c:	4603      	mov	r3, r0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  static uint8_t mem[512];
  /* USER CODE END 4 */
  return mem;
 8005c20:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <USBD_static_malloc+0x14>)
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr
 8005c2c:	2000014c 	.word	0x2000014c

08005c30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr

08005c42 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bc80      	pop	{r7}
 8005c56:	4770      	bx	lr

08005c58 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d817      	bhi.n	8005c9c <USBD_Get_USB_Status+0x44>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <USBD_Get_USB_Status+0x1c>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005c85 	.word	0x08005c85
 8005c78:	08005c8b 	.word	0x08005c8b
 8005c7c:	08005c91 	.word	0x08005c91
 8005c80:	08005c97 	.word	0x08005c97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]
    break;
 8005c88:	e00b      	b.n	8005ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8005c8e:	e008      	b.n	8005ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
    break;
 8005c94:	e005      	b.n	8005ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005c96:	2302      	movs	r3, #2
 8005c98:	73fb      	strb	r3, [r7, #15]
    break;
 8005c9a:	e002      	b.n	8005ca2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8005ca0:	bf00      	nop
  }
  return usb_status;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3714      	adds	r7, #20
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop

08005cb0 <__libc_init_array>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	2500      	movs	r5, #0
 8005cb4:	4e0c      	ldr	r6, [pc, #48]	; (8005ce8 <__libc_init_array+0x38>)
 8005cb6:	4c0d      	ldr	r4, [pc, #52]	; (8005cec <__libc_init_array+0x3c>)
 8005cb8:	1ba4      	subs	r4, r4, r6
 8005cba:	10a4      	asrs	r4, r4, #2
 8005cbc:	42a5      	cmp	r5, r4
 8005cbe:	d109      	bne.n	8005cd4 <__libc_init_array+0x24>
 8005cc0:	f000 f822 	bl	8005d08 <_init>
 8005cc4:	2500      	movs	r5, #0
 8005cc6:	4e0a      	ldr	r6, [pc, #40]	; (8005cf0 <__libc_init_array+0x40>)
 8005cc8:	4c0a      	ldr	r4, [pc, #40]	; (8005cf4 <__libc_init_array+0x44>)
 8005cca:	1ba4      	subs	r4, r4, r6
 8005ccc:	10a4      	asrs	r4, r4, #2
 8005cce:	42a5      	cmp	r5, r4
 8005cd0:	d105      	bne.n	8005cde <__libc_init_array+0x2e>
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005cd8:	4798      	blx	r3
 8005cda:	3501      	adds	r5, #1
 8005cdc:	e7ee      	b.n	8005cbc <__libc_init_array+0xc>
 8005cde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ce2:	4798      	blx	r3
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	e7f2      	b.n	8005cce <__libc_init_array+0x1e>
 8005ce8:	08005d8c 	.word	0x08005d8c
 8005cec:	08005d8c 	.word	0x08005d8c
 8005cf0:	08005d8c 	.word	0x08005d8c
 8005cf4:	08005d90 	.word	0x08005d90

08005cf8 <memset>:
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4402      	add	r2, r0
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d100      	bne.n	8005d02 <memset+0xa>
 8005d00:	4770      	bx	lr
 8005d02:	f803 1b01 	strb.w	r1, [r3], #1
 8005d06:	e7f9      	b.n	8005cfc <memset+0x4>

08005d08 <_init>:
 8005d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0a:	bf00      	nop
 8005d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0e:	bc08      	pop	{r3}
 8005d10:	469e      	mov	lr, r3
 8005d12:	4770      	bx	lr

08005d14 <_fini>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr
