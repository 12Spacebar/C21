
C21_Robot_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000763c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b4  080077b4  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  080077b4  080077b4  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077b4  080077b4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b4  080077b4  000177b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080077bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000164  08007920  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  08007920  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013039  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b6c  00000000  00000000  000331c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  00035d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00036c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169a7  00000000  00000000  00037a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d620  00000000  00000000  0004e3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074399  00000000  00000000  0005b9c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfd60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d78  00000000  00000000  000cfddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08007730 	.word	0x08007730

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08007730 	.word	0x08007730

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc45 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f885 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa55 	bl	8000608 <MX_GPIO_Init>
  MX_TIM3_Init();
 800015e:	f000 f9b7 	bl	80004d0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000162:	f000 f929 	bl	80003b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000166:	f000 f8d7 	bl	8000318 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800016a:	f006 fefb 	bl	8006f64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800016e:	2100      	movs	r1, #0
 8000170:	483a      	ldr	r0, [pc, #232]	; (800025c <main+0x110>)
 8000172:	f002 ffa5 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000176:	2108      	movs	r1, #8
 8000178:	4838      	ldr	r0, [pc, #224]	; (800025c <main+0x110>)
 800017a:	f002 ffa1 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 800017e:	210c      	movs	r1, #12
 8000180:	4836      	ldr	r0, [pc, #216]	; (800025c <main+0x110>)
 8000182:	f002 ff9d 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000186:	2100      	movs	r1, #0
 8000188:	4835      	ldr	r0, [pc, #212]	; (8000260 <main+0x114>)
 800018a:	f002 ff99 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800018e:	2104      	movs	r1, #4
 8000190:	4833      	ldr	r0, [pc, #204]	; (8000260 <main+0x114>)
 8000192:	f002 ff95 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000196:	2108      	movs	r1, #8
 8000198:	4831      	ldr	r0, [pc, #196]	; (8000260 <main+0x114>)
 800019a:	f002 ff91 	bl	80030c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 800019e:	210c      	movs	r1, #12
 80001a0:	482f      	ldr	r0, [pc, #188]	; (8000260 <main+0x114>)
 80001a2:	f002 ff8d 	bl	80030c0 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 80001a6:	4b2d      	ldr	r3, [pc, #180]	; (800025c <main+0x110>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001ae:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1500);
 80001b0:	4b2a      	ldr	r3, [pc, #168]	; (800025c <main+0x110>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001b8:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 80001ba:	4b28      	ldr	r3, [pc, #160]	; (800025c <main+0x110>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001c2:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 80001c4:	4b26      	ldr	r3, [pc, #152]	; (8000260 <main+0x114>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001cc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 80001ce:	4b24      	ldr	r3, [pc, #144]	; (8000260 <main+0x114>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001d6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 80001d8:	4b21      	ldr	r3, [pc, #132]	; (8000260 <main+0x114>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001e0:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 80001e2:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <main+0x114>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80001ea:	641a      	str	r2, [r3, #64]	; 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 1500; i< 1700;i++ ){
 80001ec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e011      	b.n	8000218 <main+0xcc>
	      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, i);
 80001f4:	4b19      	ldr	r3, [pc, #100]	; (800025c <main+0x110>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	687a      	ldr	r2, [r7, #4]
 80001fa:	63da      	str	r2, [r3, #60]	; 0x3c
	      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 80001fc:	4b17      	ldr	r3, [pc, #92]	; (800025c <main+0x110>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	641a      	str	r2, [r3, #64]	; 0x40
	      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <main+0x114>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	635a      	str	r2, [r3, #52]	; 0x34
	     HAL_Delay(2);
 800020c:	2002      	movs	r0, #2
 800020e:	f000 fc49 	bl	8000aa4 <HAL_Delay>
	  for(int i = 1500; i< 1700;i++ ){
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	3301      	adds	r3, #1
 8000216:	607b      	str	r3, [r7, #4]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800021e:	4293      	cmp	r3, r2
 8000220:	dde8      	ble.n	80001f4 <main+0xa8>
	  }
	  for(int i = 1700; i> 1500;i-- ){
 8000222:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	e011      	b.n	800024e <main+0x102>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, i);
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <main+0x110>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 8000232:	4b0a      	ldr	r3, [pc, #40]	; (800025c <main+0x110>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	683a      	ldr	r2, [r7, #0]
 8000238:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);
 800023a:	4b09      	ldr	r3, [pc, #36]	; (8000260 <main+0x114>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	683a      	ldr	r2, [r7, #0]
 8000240:	635a      	str	r2, [r3, #52]	; 0x34
	     HAL_Delay(2);
 8000242:	2002      	movs	r0, #2
 8000244:	f000 fc2e 	bl	8000aa4 <HAL_Delay>
	  for(int i = 1700; i> 1500;i-- ){
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	3b01      	subs	r3, #1
 800024c:	603b      	str	r3, [r7, #0]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000254:	4293      	cmp	r3, r2
 8000256:	dce8      	bgt.n	800022a <main+0xde>
	  for(int i = 1500; i< 1700;i++ ){
 8000258:	e7c8      	b.n	80001ec <main+0xa0>
 800025a:	bf00      	nop
 800025c:	20000218 	.word	0x20000218
 8000260:	20000198 	.word	0x20000198

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	; 0x50
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f007 fa54 	bl	8007720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	2301      	movs	r3, #1
 8000296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fa00 	bl	80026c0 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002c6:	f000 f9e9 	bl	800069c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fc6a 	bl	8002bc0 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002f2:	f000 f9d3 	bl	800069c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002f6:	2310      	movs	r3, #16
 80002f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f002 fdc7 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800030c:	f000 f9c6 	bl	800069c <Error_Handler>
  }
}
 8000310:	bf00      	nop
 8000312:	3750      	adds	r7, #80	; 0x50
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000334:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000336:	4a1f      	ldr	r2, [pc, #124]	; (80003b4 <MX_TIM1_Init+0x9c>)
 8000338:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <MX_TIM1_Init+0x98>)
 800033c:	2247      	movs	r2, #71	; 0x47
 800033e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000346:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000348:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800034c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <MX_TIM1_Init+0x98>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000360:	4813      	ldr	r0, [pc, #76]	; (80003b0 <MX_TIM1_Init+0x98>)
 8000362:	f002 fe4d 	bl	8003000 <HAL_TIM_Base_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800036c:	f000 f996 	bl	800069c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000376:	f107 0308 	add.w	r3, r7, #8
 800037a:	4619      	mov	r1, r3
 800037c:	480c      	ldr	r0, [pc, #48]	; (80003b0 <MX_TIM1_Init+0x98>)
 800037e:	f002 ff97 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000388:	f000 f988 	bl	800069c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038c:	2300      	movs	r3, #0
 800038e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000390:	2300      	movs	r3, #0
 8000392:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000394:	463b      	mov	r3, r7
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <MX_TIM1_Init+0x98>)
 800039a:	f003 fae5 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80003a4:	f000 f97a 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	200001d8 	.word	0x200001d8
 80003b4:	40012c00 	.word	0x40012c00

080003b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08e      	sub	sp, #56	; 0x38
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	f107 0320 	add.w	r3, r7, #32
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
 80003d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
 80003e4:	615a      	str	r2, [r3, #20]
 80003e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003e8:	4b38      	ldr	r3, [pc, #224]	; (80004cc <MX_TIM2_Init+0x114>)
 80003ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80003f0:	4b36      	ldr	r3, [pc, #216]	; (80004cc <MX_TIM2_Init+0x114>)
 80003f2:	2247      	movs	r2, #71	; 0x47
 80003f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f6:	4b35      	ldr	r3, [pc, #212]	; (80004cc <MX_TIM2_Init+0x114>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80003fc:	4b33      	ldr	r3, [pc, #204]	; (80004cc <MX_TIM2_Init+0x114>)
 80003fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000404:	4b31      	ldr	r3, [pc, #196]	; (80004cc <MX_TIM2_Init+0x114>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040a:	4b30      	ldr	r3, [pc, #192]	; (80004cc <MX_TIM2_Init+0x114>)
 800040c:	2200      	movs	r2, #0
 800040e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000410:	482e      	ldr	r0, [pc, #184]	; (80004cc <MX_TIM2_Init+0x114>)
 8000412:	f002 fdf5 	bl	8003000 <HAL_TIM_Base_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800041c:	f000 f93e 	bl	800069c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000424:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800042a:	4619      	mov	r1, r3
 800042c:	4827      	ldr	r0, [pc, #156]	; (80004cc <MX_TIM2_Init+0x114>)
 800042e:	f002 ff3f 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000438:	f000 f930 	bl	800069c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800043c:	4823      	ldr	r0, [pc, #140]	; (80004cc <MX_TIM2_Init+0x114>)
 800043e:	f002 fe0a 	bl	8003056 <HAL_TIM_PWM_Init>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000448:	f000 f928 	bl	800069c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000450:	2300      	movs	r3, #0
 8000452:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000454:	f107 0320 	add.w	r3, r7, #32
 8000458:	4619      	mov	r1, r3
 800045a:	481c      	ldr	r0, [pc, #112]	; (80004cc <MX_TIM2_Init+0x114>)
 800045c:	f003 fa84 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000466:	f000 f919 	bl	800069c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800046a:	2360      	movs	r3, #96	; 0x60
 800046c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	4619      	mov	r1, r3
 8000480:	4812      	ldr	r0, [pc, #72]	; (80004cc <MX_TIM2_Init+0x114>)
 8000482:	f002 fe4f 	bl	8003124 <HAL_TIM_PWM_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800048c:	f000 f906 	bl	800069c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2208      	movs	r2, #8
 8000494:	4619      	mov	r1, r3
 8000496:	480d      	ldr	r0, [pc, #52]	; (80004cc <MX_TIM2_Init+0x114>)
 8000498:	f002 fe44 	bl	8003124 <HAL_TIM_PWM_ConfigChannel>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80004a2:	f000 f8fb 	bl	800069c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	220c      	movs	r2, #12
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <MX_TIM2_Init+0x114>)
 80004ae:	f002 fe39 	bl	8003124 <HAL_TIM_PWM_ConfigChannel>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80004b8:	f000 f8f0 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004bc:	4803      	ldr	r0, [pc, #12]	; (80004cc <MX_TIM2_Init+0x114>)
 80004be:	f000 f969 	bl	8000794 <HAL_TIM_MspPostInit>

}
 80004c2:	bf00      	nop
 80004c4:	3738      	adds	r7, #56	; 0x38
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000218 	.word	0x20000218

080004d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08e      	sub	sp, #56	; 0x38
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e4:	f107 0320 	add.w	r3, r7, #32
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
 80004fc:	615a      	str	r2, [r3, #20]
 80004fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000500:	4b3f      	ldr	r3, [pc, #252]	; (8000600 <MX_TIM3_Init+0x130>)
 8000502:	4a40      	ldr	r2, [pc, #256]	; (8000604 <MX_TIM3_Init+0x134>)
 8000504:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000506:	4b3e      	ldr	r3, [pc, #248]	; (8000600 <MX_TIM3_Init+0x130>)
 8000508:	2247      	movs	r2, #71	; 0x47
 800050a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050c:	4b3c      	ldr	r3, [pc, #240]	; (8000600 <MX_TIM3_Init+0x130>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000512:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <MX_TIM3_Init+0x130>)
 8000514:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000518:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051a:	4b39      	ldr	r3, [pc, #228]	; (8000600 <MX_TIM3_Init+0x130>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000520:	4b37      	ldr	r3, [pc, #220]	; (8000600 <MX_TIM3_Init+0x130>)
 8000522:	2200      	movs	r2, #0
 8000524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000526:	4836      	ldr	r0, [pc, #216]	; (8000600 <MX_TIM3_Init+0x130>)
 8000528:	f002 fd6a 	bl	8003000 <HAL_TIM_Base_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000532:	f000 f8b3 	bl	800069c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800053c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000540:	4619      	mov	r1, r3
 8000542:	482f      	ldr	r0, [pc, #188]	; (8000600 <MX_TIM3_Init+0x130>)
 8000544:	f002 feb4 	bl	80032b0 <HAL_TIM_ConfigClockSource>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800054e:	f000 f8a5 	bl	800069c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000552:	482b      	ldr	r0, [pc, #172]	; (8000600 <MX_TIM3_Init+0x130>)
 8000554:	f002 fd7f 	bl	8003056 <HAL_TIM_PWM_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800055e:	f000 f89d 	bl	800069c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000566:	2300      	movs	r3, #0
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	4619      	mov	r1, r3
 8000570:	4823      	ldr	r0, [pc, #140]	; (8000600 <MX_TIM3_Init+0x130>)
 8000572:	f003 f9f9 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800057c:	f000 f88e 	bl	800069c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000580:	2360      	movs	r3, #96	; 0x60
 8000582:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	4619      	mov	r1, r3
 8000596:	481a      	ldr	r0, [pc, #104]	; (8000600 <MX_TIM3_Init+0x130>)
 8000598:	f002 fdc4 	bl	8003124 <HAL_TIM_PWM_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80005a2:	f000 f87b 	bl	800069c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2204      	movs	r2, #4
 80005aa:	4619      	mov	r1, r3
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <MX_TIM3_Init+0x130>)
 80005ae:	f002 fdb9 	bl	8003124 <HAL_TIM_PWM_ConfigChannel>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80005b8:	f000 f870 	bl	800069c <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 80005bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2208      	movs	r2, #8
 80005c6:	4619      	mov	r1, r3
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <MX_TIM3_Init+0x130>)
 80005ca:	f002 fdab 	bl	8003124 <HAL_TIM_PWM_ConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80005d4:	f000 f862 	bl	800069c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	220c      	movs	r2, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	4807      	ldr	r0, [pc, #28]	; (8000600 <MX_TIM3_Init+0x130>)
 80005e4:	f002 fd9e 	bl	8003124 <HAL_TIM_PWM_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 80005ee:	f000 f855 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005f2:	4803      	ldr	r0, [pc, #12]	; (8000600 <MX_TIM3_Init+0x130>)
 80005f4:	f000 f8ce 	bl	8000794 <HAL_TIM_MspPostInit>

}
 80005f8:	bf00      	nop
 80005fa:	3738      	adds	r7, #56	; 0x38
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000198 	.word	0x20000198
 8000604:	40000400 	.word	0x40000400

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_GPIO_Init+0x8c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_GPIO_Init+0x8c>)
 8000622:	f043 0320 	orr.w	r3, r3, #32
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_GPIO_Init+0x8c>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0320 	and.w	r3, r3, #32
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_GPIO_Init+0x8c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a16      	ldr	r2, [pc, #88]	; (8000694 <MX_GPIO_Init+0x8c>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_GPIO_Init+0x8c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_GPIO_Init+0x8c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <MX_GPIO_Init+0x8c>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_GPIO_Init+0x8c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2130      	movs	r1, #48	; 0x30
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <MX_GPIO_Init+0x90>)
 800066a:	f000 fca5 	bl	8000fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800066e:	2330      	movs	r3, #48	; 0x30
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_GPIO_Init+0x90>)
 8000686:	f000 fb3d 	bl	8000d04 <HAL_GPIO_Init>

}
 800068a:	bf00      	nop
 800068c:	3720      	adds	r7, #32
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40010800 	.word	0x40010800

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <HAL_MspInit+0x5c>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	4a14      	ldr	r2, [pc, #80]	; (8000704 <HAL_MspInit+0x5c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6193      	str	r3, [r2, #24]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_MspInit+0x5c>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <HAL_MspInit+0x5c>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_MspInit+0x5c>)
 80006cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <HAL_MspInit+0x5c>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <HAL_MspInit+0x60>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <HAL_MspInit+0x60>)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	40021000 	.word	0x40021000
 8000708:	40010000 	.word	0x40010000

0800070c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800070c:	b480      	push	{r7}
 800070e:	b087      	sub	sp, #28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a1b      	ldr	r2, [pc, #108]	; (8000788 <HAL_TIM_Base_MspInit+0x7c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d10c      	bne.n	8000738 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a1a      	ldr	r2, [pc, #104]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 8000724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000736:	e022      	b.n	800077e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000740:	d10c      	bne.n	800075c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a11      	ldr	r2, [pc, #68]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
}
 800075a:	e010      	b.n	800077e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <HAL_TIM_Base_MspInit+0x84>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d10b      	bne.n	800077e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	61d3      	str	r3, [r2, #28]
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_TIM_Base_MspInit+0x80>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
}
 800077e:	bf00      	nop
 8000780:	371c      	adds	r7, #28
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	40012c00 	.word	0x40012c00
 800078c:	40021000 	.word	0x40021000
 8000790:	40000400 	.word	0x40000400

08000794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007b2:	d144      	bne.n	800083e <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	61bb      	str	r3, [r7, #24]
 80007ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 80007d2:	f043 0304 	orr.w	r3, r3, #4
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b35      	ldr	r3, [pc, #212]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0304 	and.w	r3, r3, #4
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2302      	movs	r3, #2
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	482e      	ldr	r0, [pc, #184]	; (80008b4 <HAL_TIM_MspPostInit+0x120>)
 80007fa:	f000 fa83 	bl	8000d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2302      	movs	r3, #2
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4829      	ldr	r0, [pc, #164]	; (80008b8 <HAL_TIM_MspPostInit+0x124>)
 8000814:	f000 fa76 	bl	8000d04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <HAL_TIM_MspPostInit+0x128>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000836:	4a21      	ldr	r2, [pc, #132]	; (80008bc <HAL_TIM_MspPostInit+0x128>)
 8000838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800083a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800083c:	e034      	b.n	80008a8 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a1f      	ldr	r2, [pc, #124]	; (80008c0 <HAL_TIM_MspPostInit+0x12c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d12f      	bne.n	80008a8 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a18      	ldr	r2, [pc, #96]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a12      	ldr	r2, [pc, #72]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_TIM_MspPostInit+0x11c>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0308 	and.w	r3, r3, #8
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000878:	23c0      	movs	r3, #192	; 0xc0
 800087a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2302      	movs	r3, #2
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <HAL_TIM_MspPostInit+0x124>)
 800088c:	f000 fa3a 	bl	8000d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000890:	2303      	movs	r3, #3
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2302      	movs	r3, #2
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4804      	ldr	r0, [pc, #16]	; (80008b4 <HAL_TIM_MspPostInit+0x120>)
 80008a4:	f000 fa2e 	bl	8000d04 <HAL_GPIO_Init>
}
 80008a8:	bf00      	nop
 80008aa:	3730      	adds	r7, #48	; 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40010c00 	.word	0x40010c00
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40010000 	.word	0x40010000
 80008c0:	40000400 	.word	0x40000400

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <HardFault_Handler+0x4>

080008d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <BusFault_Handler+0x4>

080008e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f8ac 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800091e:	f000 fc94 	bl	800124a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000720 	.word	0x20000720

0800092c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <SystemInit+0x5c>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <SystemInit+0x5c>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SystemInit+0x5c>)
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	4911      	ldr	r1, [pc, #68]	; (8000988 <SystemInit+0x5c>)
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <SystemInit+0x60>)
 8000944:	4013      	ands	r3, r2
 8000946:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <SystemInit+0x5c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <SystemInit+0x5c>)
 800094e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000956:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <SystemInit+0x5c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <SystemInit+0x5c>)
 800095e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000962:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <SystemInit+0x5c>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <SystemInit+0x5c>)
 800096a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800096e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SystemInit+0x5c>)
 8000972:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000976:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SystemInit+0x64>)
 800097a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000
 800098c:	f8ff0000 	.word	0xf8ff0000
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000994:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000996:	e003      	b.n	80009a0 <LoopCopyDataInit>

08000998 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800099a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800099c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800099e:	3104      	adds	r1, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a0:	480a      	ldr	r0, [pc, #40]	; (80009cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009a8:	d3f6      	bcc.n	8000998 <CopyDataInit>
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009ac:	e002      	b.n	80009b4 <LoopFillZerobss>

080009ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009b0:	f842 3b04 	str.w	r3, [r2], #4

080009b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009b8:	d3f9      	bcc.n	80009ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ba:	f7ff ffb7 	bl	800092c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009be:	f006 fe8b 	bl	80076d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c2:	f7ff fbc3 	bl	800014c <main>
  bx lr
 80009c6:	4770      	bx	lr
  ldr r3, =_sidata
 80009c8:	080077bc 	.word	0x080077bc
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009d0:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 80009d4:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 80009d8:	20000a0c 	.word	0x20000a0c

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x28>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x28>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f945 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff fe54 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40022000 	.word	0x40022000

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f95d 	bl	8000cea <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f925 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_IncTick+0x1c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_IncTick+0x20>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a03      	ldr	r2, [pc, #12]	; (8000a8c <HAL_IncTick+0x20>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	20000008 	.word	0x20000008
 8000a8c:	20000258 	.word	0x20000258

08000a90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return uwTick;
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <HAL_GetTick+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20000258 	.word	0x20000258

08000aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aac:	f7ff fff0 	bl	8000a90 <HAL_GetTick>
 8000ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abc:	d005      	beq.n	8000aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_Delay+0x40>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aca:	bf00      	nop
 8000acc:	f7ff ffe0 	bl	8000a90 <HAL_GetTick>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d8f7      	bhi.n	8000acc <HAL_Delay+0x28>
  {
  }
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000008 	.word	0x20000008

08000ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b04:	4013      	ands	r3, r2
 8000b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <__NVIC_SetPriorityGrouping+0x44>)
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	60d3      	str	r3, [r2, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <__NVIC_GetPriorityGrouping+0x18>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	f003 0307 	and.w	r3, r3, #7
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	db0b      	blt.n	8000b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	f003 021f 	and.w	r2, r3, #31
 8000b64:	4906      	ldr	r1, [pc, #24]	; (8000b80 <__NVIC_EnableIRQ+0x34>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	095b      	lsrs	r3, r3, #5
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100

08000b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	6039      	str	r1, [r7, #0]
 8000b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	db0a      	blt.n	8000bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <__NVIC_SetPriority+0x4c>)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	0112      	lsls	r2, r2, #4
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	440b      	add	r3, r1
 8000ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bac:	e00a      	b.n	8000bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4908      	ldr	r1, [pc, #32]	; (8000bd4 <__NVIC_SetPriority+0x50>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	f003 030f 	and.w	r3, r3, #15
 8000bba:	3b04      	subs	r3, #4
 8000bbc:	0112      	lsls	r2, r2, #4
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	761a      	strb	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f1c3 0307 	rsb	r3, r3, #7
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	bf28      	it	cs
 8000bf6:	2304      	movcs	r3, #4
 8000bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	d902      	bls.n	8000c08 <NVIC_EncodePriority+0x30>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3b03      	subs	r3, #3
 8000c06:	e000      	b.n	8000c0a <NVIC_EncodePriority+0x32>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43da      	mvns	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	fa01 f303 	lsl.w	r3, r1, r3
 8000c2a:	43d9      	mvns	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	4313      	orrs	r3, r2
         );
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3724      	adds	r7, #36	; 0x24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff90 	bl	8000b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff2d 	bl	8000ae8 <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff42 	bl	8000b30 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff90 	bl	8000bd8 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5f 	bl	8000b84 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff35 	bl	8000b4c <__NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffa2 	bl	8000c3c <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b08b      	sub	sp, #44	; 0x2c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	e127      	b.n	8000f68 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8116 	bne.w	8000f62 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d034      	beq.n	8000da8 <HAL_GPIO_Init+0xa4>
 8000d3e:	2b12      	cmp	r3, #18
 8000d40:	d80d      	bhi.n	8000d5e <HAL_GPIO_Init+0x5a>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d02b      	beq.n	8000d9e <HAL_GPIO_Init+0x9a>
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d804      	bhi.n	8000d54 <HAL_GPIO_Init+0x50>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d031      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d01c      	beq.n	8000d8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d52:	e048      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d043      	beq.n	8000de0 <HAL_GPIO_Init+0xdc>
 8000d58:	2b11      	cmp	r3, #17
 8000d5a:	d01b      	beq.n	8000d94 <HAL_GPIO_Init+0x90>
          break;
 8000d5c:	e043      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d5e:	4a89      	ldr	r2, [pc, #548]	; (8000f84 <HAL_GPIO_Init+0x280>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d026      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d64:	4a87      	ldr	r2, [pc, #540]	; (8000f84 <HAL_GPIO_Init+0x280>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d806      	bhi.n	8000d78 <HAL_GPIO_Init+0x74>
 8000d6a:	4a87      	ldr	r2, [pc, #540]	; (8000f88 <HAL_GPIO_Init+0x284>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d020      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d70:	4a86      	ldr	r2, [pc, #536]	; (8000f8c <HAL_GPIO_Init+0x288>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d01d      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
          break;
 8000d76:	e036      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d78:	4a85      	ldr	r2, [pc, #532]	; (8000f90 <HAL_GPIO_Init+0x28c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d019      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d7e:	4a85      	ldr	r2, [pc, #532]	; (8000f94 <HAL_GPIO_Init+0x290>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d016      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
 8000d84:	4a84      	ldr	r2, [pc, #528]	; (8000f98 <HAL_GPIO_Init+0x294>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0xae>
          break;
 8000d8a:	e02c      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	623b      	str	r3, [r7, #32]
          break;
 8000d92:	e028      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e023      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	3308      	adds	r3, #8
 8000da4:	623b      	str	r3, [r7, #32]
          break;
 8000da6:	e01e      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	330c      	adds	r3, #12
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	e019      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	623b      	str	r3, [r7, #32]
          break;
 8000dbe:	e012      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d105      	bne.n	8000dd4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69fa      	ldr	r2, [r7, #28]
 8000dd0:	611a      	str	r2, [r3, #16]
          break;
 8000dd2:	e008      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69fa      	ldr	r2, [r7, #28]
 8000ddc:	615a      	str	r2, [r3, #20]
          break;
 8000dde:	e002      	b.n	8000de6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
          break;
 8000de4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d801      	bhi.n	8000df0 <HAL_GPIO_Init+0xec>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	e001      	b.n	8000df4 <HAL_GPIO_Init+0xf0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3304      	adds	r3, #4
 8000df4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2bff      	cmp	r3, #255	; 0xff
 8000dfa:	d802      	bhi.n	8000e02 <HAL_GPIO_Init+0xfe>
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	e002      	b.n	8000e08 <HAL_GPIO_Init+0x104>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	3b08      	subs	r3, #8
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	210f      	movs	r1, #15
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	fa01 f303 	lsl.w	r3, r1, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	6a39      	ldr	r1, [r7, #32]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	431a      	orrs	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 8096 	beq.w	8000f62 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e36:	4b59      	ldr	r3, [pc, #356]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6193      	str	r3, [r2, #24]
 8000e42:	4b56      	ldr	r3, [pc, #344]	; (8000f9c <HAL_GPIO_Init+0x298>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e4e:	4a54      	ldr	r2, [pc, #336]	; (8000fa0 <HAL_GPIO_Init+0x29c>)
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4b      	ldr	r2, [pc, #300]	; (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d013      	beq.n	8000ea2 <HAL_GPIO_Init+0x19e>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4a      	ldr	r2, [pc, #296]	; (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d00d      	beq.n	8000e9e <HAL_GPIO_Init+0x19a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a49      	ldr	r2, [pc, #292]	; (8000fac <HAL_GPIO_Init+0x2a8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d007      	beq.n	8000e9a <HAL_GPIO_Init+0x196>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	; (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_GPIO_Init+0x192>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e004      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	e002      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x1a0>
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ea6:	f002 0203 	and.w	r2, r2, #3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4093      	lsls	r3, r2
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eb4:	493a      	ldr	r1, [pc, #232]	; (8000fa0 <HAL_GPIO_Init+0x29c>)
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	089b      	lsrs	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ece:	4b39      	ldr	r3, [pc, #228]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
 8000eda:	e006      	b.n	8000eea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	4933      	ldr	r1, [pc, #204]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	492e      	ldr	r1, [pc, #184]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
 8000f02:	e006      	b.n	8000f12 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f04:	4b2b      	ldr	r3, [pc, #172]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	4929      	ldr	r1, [pc, #164]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f0e:	4013      	ands	r3, r2
 8000f10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d006      	beq.n	8000f2c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	4924      	ldr	r1, [pc, #144]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	608b      	str	r3, [r1, #8]
 8000f2a:	e006      	b.n	8000f3a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	491f      	ldr	r1, [pc, #124]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f36:	4013      	ands	r3, r2
 8000f38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f48:	68da      	ldr	r2, [r3, #12]
 8000f4a:	491a      	ldr	r1, [pc, #104]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60cb      	str	r3, [r1, #12]
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f56:	68da      	ldr	r2, [r3, #12]
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4915      	ldr	r1, [pc, #84]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	3301      	adds	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f47f aed0 	bne.w	8000d18 <HAL_GPIO_Init+0x14>
  }
}
 8000f78:	bf00      	nop
 8000f7a:	372c      	adds	r7, #44	; 0x2c
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	10210000 	.word	0x10210000
 8000f88:	10110000 	.word	0x10110000
 8000f8c:	10120000 	.word	0x10120000
 8000f90:	10310000 	.word	0x10310000
 8000f94:	10320000 	.word	0x10320000
 8000f98:	10220000 	.word	0x10220000
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	40010c00 	.word	0x40010c00
 8000fac:	40011000 	.word	0x40011000
 8000fb0:	40011400 	.word	0x40011400
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fd4:	e003      	b.n	8000fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	041a      	lsls	r2, r3, #16
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	611a      	str	r2, [r3, #16]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af06      	add	r7, sp, #24
 8000fee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e0fd      	b.n	80011f6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f006 f8dc 	bl	80071cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f002 fd0b 	bl	8003a3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	687e      	ldr	r6, [r7, #4]
 800102e:	466d      	mov	r5, sp
 8001030:	f106 0410 	add.w	r4, r6, #16
 8001034:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001036:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	602b      	str	r3, [r5, #0]
 800103c:	1d33      	adds	r3, r6, #4
 800103e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f002 fcd5 	bl	80039f0 <USB_CoreInit>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2202      	movs	r2, #2
 8001050:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0ce      	b.n	80011f6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fd06 	bl	8003a70 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e04c      	b.n	8001104 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3301      	adds	r3, #1
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	b298      	uxth	r0, r3
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	3336      	adds	r3, #54	; 0x36
 80010a8:	4602      	mov	r2, r0
 80010aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	1c5a      	adds	r2, r3, #1
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	3303      	adds	r3, #3
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010c2:	7bfa      	ldrb	r2, [r7, #15]
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	4613      	mov	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	3338      	adds	r3, #56	; 0x38
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	333c      	adds	r3, #60	; 0x3c
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	3340      	adds	r3, #64	; 0x40
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	429a      	cmp	r2, r3
 800110c:	d3ad      	bcc.n	800106a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e044      	b.n	800119e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800113c:	7bfa      	ldrb	r2, [r7, #15]
 800113e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001152:	2200      	movs	r2, #0
 8001154:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001156:	7bfa      	ldrb	r2, [r7, #15]
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	440b      	add	r3, r1
 800117a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001182:	7bfa      	ldrb	r2, [r7, #15]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	3301      	adds	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d3b5      	bcc.n	8001114 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	687e      	ldr	r6, [r7, #4]
 80011b0:	466d      	mov	r5, sp
 80011b2:	f106 0410 	add.w	r4, r6, #16
 80011b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	602b      	str	r3, [r5, #0]
 80011be:	1d33      	adds	r3, r6, #4
 80011c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011c2:	6838      	ldr	r0, [r7, #0]
 80011c4:	f002 fc60 	bl	8003a88 <USB_DevInit>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2202      	movs	r2, #2
 80011d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00d      	b.n	80011f6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 fbfa 	bl	80059e8 <USB_DevDisconnect>

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800120c:	2b01      	cmp	r3, #1
 800120e:	d101      	bne.n	8001214 <HAL_PCD_Start+0x16>
 8001210:	2302      	movs	r3, #2
 8001212:	e016      	b.n	8001242 <HAL_PCD_Start+0x44>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f002 fbf5 	bl	8003a10 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001226:	2101      	movs	r1, #1
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f006 fa1e 	bl	800766a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f004 fbce 	bl	80059d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b088      	sub	sp, #32
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fbd0 	bl	80059fc <USB_ReadInterrupts>
 800125c:	4603      	mov	r3, r0
 800125e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001266:	d102      	bne.n	800126e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fb4a 	bl	8001902 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f004 fbc2 	bl	80059fc <USB_ReadInterrupts>
 8001278:	4603      	mov	r3, r0
 800127a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001282:	d112      	bne.n	80012aa <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800128c:	b29a      	uxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001296:	b292      	uxth	r2, r2
 8001298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f006 f810 	bl	80072c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80012a2:	2100      	movs	r1, #0
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f925 	bl	80014f4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f004 fba4 	bl	80059fc <USB_ReadInterrupts>
 80012b4:	4603      	mov	r3, r0
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012be:	d10b      	bne.n	80012d8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012d2:	b292      	uxth	r2, r2
 80012d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 fb8d 	bl	80059fc <USB_ReadInterrupts>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ec:	d10b      	bne.n	8001306 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001300:	b292      	uxth	r2, r2
 8001302:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f004 fb76 	bl	80059fc <USB_ReadInterrupts>
 8001310:	4603      	mov	r3, r0
 8001312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800131a:	d126      	bne.n	800136a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0204 	bic.w	r2, r2, #4
 800132e:	b292      	uxth	r2, r2
 8001330:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0208 	bic.w	r2, r2, #8
 8001346:	b292      	uxth	r2, r2
 8001348:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f005 fff1 	bl	8007334 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135a:	b29a      	uxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001364:	b292      	uxth	r2, r2
 8001366:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f004 fb44 	bl	80059fc <USB_ReadInterrupts>
 8001374:	4603      	mov	r3, r0
 8001376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800137e:	f040 8084 	bne.w	800148a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	77fb      	strb	r3, [r7, #31]
 8001386:	e011      	b.n	80013ac <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	7ffb      	ldrb	r3, [r7, #31]
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	441a      	add	r2, r3
 8001394:	7ffb      	ldrb	r3, [r7, #31]
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	b292      	uxth	r2, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	f107 0120 	add.w	r1, r7, #32
 80013a0:	440b      	add	r3, r1
 80013a2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	3301      	adds	r3, #1
 80013aa:	77fb      	strb	r3, [r7, #31]
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d9ea      	bls.n	8001388 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0201 	orr.w	r2, r2, #1
 80013c4:	b292      	uxth	r2, r2
 80013c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0201 	bic.w	r2, r2, #1
 80013dc:	b292      	uxth	r2, r2
 80013de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80013e2:	bf00      	nop
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f6      	beq.n	80013e4 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001408:	b292      	uxth	r2, r2
 800140a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800140e:	2300      	movs	r3, #0
 8001410:	77fb      	strb	r3, [r7, #31]
 8001412:	e010      	b.n	8001436 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	4611      	mov	r1, r2
 800141c:	7ffa      	ldrb	r2, [r7, #31]
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	440a      	add	r2, r1
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	f107 0120 	add.w	r1, r7, #32
 8001428:	440b      	add	r3, r1
 800142a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800142e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001430:	7ffb      	ldrb	r3, [r7, #31]
 8001432:	3301      	adds	r3, #1
 8001434:	77fb      	strb	r3, [r7, #31]
 8001436:	7ffb      	ldrb	r3, [r7, #31]
 8001438:	2b07      	cmp	r3, #7
 800143a:	d9eb      	bls.n	8001414 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001444:	b29a      	uxth	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0208 	orr.w	r2, r2, #8
 800144e:	b292      	uxth	r2, r2
 8001450:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001466:	b292      	uxth	r2, r2
 8001468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001474:	b29a      	uxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0204 	orr.w	r2, r2, #4
 800147e:	b292      	uxth	r2, r2
 8001480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f005 ff3b 	bl	8007300 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f004 fab4 	bl	80059fc <USB_ReadInterrupts>
 8001494:	4603      	mov	r3, r0
 8001496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800149a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800149e:	d10e      	bne.n	80014be <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b2:	b292      	uxth	r2, r2
 80014b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f005 fef4 	bl	80072a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fa9a 	bl	80059fc <USB_ReadInterrupts>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d2:	d10b      	bne.n	80014ec <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e6:	b292      	uxth	r2, r2
 80014e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_PCD_SetAddress+0x1a>
 800150a:	2302      	movs	r3, #2
 800150c:	e013      	b.n	8001536 <HAL_PCD_SetAddress+0x42>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	78fa      	ldrb	r2, [r7, #3]
 800151a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fa41 	bl	80059ae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	4608      	mov	r0, r1
 8001548:	4611      	mov	r1, r2
 800154a:	461a      	mov	r2, r3
 800154c:	4603      	mov	r3, r0
 800154e:	70fb      	strb	r3, [r7, #3]
 8001550:	460b      	mov	r3, r1
 8001552:	803b      	strh	r3, [r7, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800155c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001560:	2b00      	cmp	r3, #0
 8001562:	da0e      	bge.n	8001582 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001564:	78fb      	ldrb	r3, [r7, #3]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	705a      	strb	r2, [r3, #1]
 8001580:	e00e      	b.n	80015a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	f003 0207 	and.w	r2, r3, #7
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80015ac:	883a      	ldrh	r2, [r7, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	78ba      	ldrb	r2, [r7, #2]
 80015b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80015ca:	78bb      	ldrb	r3, [r7, #2]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d102      	bne.n	80015d6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_PCD_EP_Open+0xa6>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e00e      	b.n	8001602 <HAL_PCD_EP_Open+0xc4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68f9      	ldr	r1, [r7, #12]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fa68 	bl	8003ac8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001600:	7afb      	ldrb	r3, [r7, #11]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001616:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da0e      	bge.n	800163c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	f003 0307 	and.w	r3, r3, #7
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	705a      	strb	r2, [r3, #1]
 800163a:	e00e      	b.n	800165a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	f003 0207 	and.w	r2, r3, #7
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	b2da      	uxtb	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_PCD_EP_Close+0x6a>
 8001670:	2302      	movs	r3, #2
 8001672:	e00e      	b.n	8001692 <HAL_PCD_EP_Close+0x88>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68f9      	ldr	r1, [r7, #12]
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fd8a 	bl	800419c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	460b      	mov	r3, r1
 80016a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016aa:	7afb      	ldrb	r3, [r7, #11]
 80016ac:	f003 0207 	and.w	r2, r3, #7
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2200      	movs	r2, #0
 80016d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016da:	7afb      	ldrb	r3, [r7, #11]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016e6:	7afb      	ldrb	r3, [r7, #11]
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6979      	ldr	r1, [r7, #20]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 ff3c 	bl	8004574 <USB_EPStartXfer>
 80016fc:	e005      	b.n	800170a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 ff35 	bl	8004574 <USB_EPStartXfer>
  }

  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	603b      	str	r3, [r7, #0]
 8001720:	460b      	mov	r3, r1
 8001722:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001724:	7afb      	ldrb	r3, [r7, #11]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4413      	add	r3, r2
 8001738:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2201      	movs	r2, #1
 800175e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	b2da      	uxtb	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6979      	ldr	r1, [r7, #20]
 800177c:	4618      	mov	r0, r3
 800177e:	f002 fef9 	bl	8004574 <USB_EPStartXfer>
 8001782:	e005      	b.n	8001790 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6979      	ldr	r1, [r7, #20]
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fef2 	bl	8004574 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	460b      	mov	r3, r1
 80017a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	f003 0207 	and.w	r2, r3, #7
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d901      	bls.n	80017b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e04c      	b.n	8001852 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da0e      	bge.n	80017de <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	705a      	strb	r2, [r3, #1]
 80017dc:	e00c      	b.n	80017f8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_PCD_EP_SetStall+0x7e>
 8001814:	2302      	movs	r3, #2
 8001816:	e01c      	b.n	8001852 <HAL_PCD_EP_SetStall+0xb8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68f9      	ldr	r1, [r7, #12]
 8001826:	4618      	mov	r0, r3
 8001828:	f003 ffc4 	bl	80057b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	2b00      	cmp	r3, #0
 8001834:	d108      	bne.n	8001848 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f004 f8e9 	bl	8005a1a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 020f 	and.w	r2, r3, #15
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d901      	bls.n	8001878 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e040      	b.n	80018fa <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001878:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187c:	2b00      	cmp	r3, #0
 800187e:	da0e      	bge.n	800189e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2201      	movs	r2, #1
 800189a:	705a      	strb	r2, [r3, #1]
 800189c:	e00e      	b.n	80018bc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	f003 0207 	and.w	r2, r3, #7
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_PCD_EP_ClrStall+0x82>
 80018d8:	2302      	movs	r3, #2
 80018da:	e00e      	b.n	80018fa <HAL_PCD_EP_ClrStall+0xa0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 ffb2 	bl	8005854 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b08e      	sub	sp, #56	; 0x38
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800190a:	e2df      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001914:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001922:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 8158 	bne.w	8001bdc <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800192c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800192e:	f003 0310 	and.w	r3, r3, #16
 8001932:	2b00      	cmp	r3, #0
 8001934:	d152      	bne.n	80019dc <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001946:	81fb      	strh	r3, [r7, #14]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001956:	b29b      	uxth	r3, r3
 8001958:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3328      	adds	r3, #40	; 0x28
 800195e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001968:	b29b      	uxth	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	3302      	adds	r3, #2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4413      	add	r3, r2
 800197e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	695a      	ldr	r2, [r3, #20]
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	441a      	add	r2, r3
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800199a:	2100      	movs	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f005 fc68 	bl	8007272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 828e 	beq.w	8001ecc <PCD_EP_ISR_Handler+0x5ca>
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 8289 	bne.w	8001ecc <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b292      	uxth	r2, r2
 80019ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80019da:	e277      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80019ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d034      	beq.n	8001a60 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f004 f83f 	bl	8005ab8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a46:	4013      	ands	r3, r2
 8001a48:	823b      	strh	r3, [r7, #16]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	8a3a      	ldrh	r2, [r7, #16]
 8001a50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a54:	b292      	uxth	r2, r2
 8001a56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f005 fbdd 	bl	8007218 <HAL_PCD_SetupStageCallback>
 8001a5e:	e235      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f280 8231 	bge.w	8001ecc <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001a76:	4013      	ands	r3, r2
 8001a78:	83bb      	strh	r3, [r7, #28]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	8bba      	ldrh	r2, [r7, #28]
 8001a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a84:	b292      	uxth	r2, r2
 8001a86:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3306      	adds	r3, #6
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d019      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x1ee>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6818      	ldr	r0, [r3, #0]
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	6959      	ldr	r1, [r3, #20]
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f003 ffef 	bl	8005ab8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	441a      	add	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ae8:	2100      	movs	r1, #0
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f005 fba6 	bl	800723c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4413      	add	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b0e:	617b      	str	r3, [r7, #20]
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d112      	bne.n	8001b3e <PCD_EP_ISR_Handler+0x23c>
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	801a      	strh	r2, [r3, #0]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	801a      	strh	r2, [r3, #0]
 8001b3c:	e02f      	b.n	8001b9e <PCD_EP_ISR_Handler+0x29c>
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b3e      	cmp	r3, #62	; 0x3e
 8001b44:	d813      	bhi.n	8001b6e <PCD_EP_ISR_Handler+0x26c>
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <PCD_EP_ISR_Handler+0x25e>
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	029b      	lsls	r3, r3, #10
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	801a      	strh	r2, [r3, #0]
 8001b6c:	e017      	b.n	8001b9e <PCD_EP_ISR_Handler+0x29c>
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <PCD_EP_ISR_Handler+0x286>
 8001b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b84:	3b01      	subs	r3, #1
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
 8001b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	029b      	lsls	r3, r3, #10
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bae:	827b      	strh	r3, [r7, #18]
 8001bb0:	8a7b      	ldrh	r3, [r7, #18]
 8001bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001bb6:	827b      	strh	r3, [r7, #18]
 8001bb8:	8a7b      	ldrh	r3, [r7, #18]
 8001bba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bbe:	827b      	strh	r3, [r7, #18]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	8a7b      	ldrh	r3, [r7, #18]
 8001bc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8013      	strh	r3, [r2, #0]
 8001bda:	e177      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f280 80ea 	bge.w	8001dcc <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c0e:	4013      	ands	r3, r2
 8001c10:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c26:	b292      	uxth	r2, r2
 8001c28:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c2a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	7b1b      	ldrb	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d122      	bne.n	8001c8e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3306      	adds	r3, #6
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	4413      	add	r3, r2
 8001c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c70:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001c72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8087 	beq.w	8001d88 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	6959      	ldr	r1, [r3, #20]
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	88da      	ldrh	r2, [r3, #6]
 8001c86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001c88:	f003 ff16 	bl	8005ab8 <USB_ReadPMA>
 8001c8c:	e07c      	b.n	8001d88 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	78db      	ldrb	r3, [r3, #3]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d108      	bne.n	8001ca8 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f923 	bl	8001ee8 <HAL_PCD_EP_DB_Receive>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ca6:	e06f      	b.n	8001d88 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	441a      	add	r2, r3
 8001cd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d021      	beq.n	8001d46 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	3302      	adds	r3, #2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6812      	ldr	r2, [r2, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d2a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d02a      	beq.n	8001d88 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	6959      	ldr	r1, [r3, #20]
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	891a      	ldrh	r2, [r3, #8]
 8001d3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d40:	f003 feba 	bl	8005ab8 <USB_ReadPMA>
 8001d44:	e020      	b.n	8001d88 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	461a      	mov	r2, r3
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	3306      	adds	r3, #6
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d6e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001d70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	6959      	ldr	r1, [r3, #20]
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	895a      	ldrh	r2, [r3, #10]
 8001d82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d84:	f003 fe98 	bl	8005ab8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d8e:	441a      	add	r2, r3
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d9a:	441a      	add	r2, r3
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <PCD_EP_ISR_Handler+0x4b0>
 8001da8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d206      	bcs.n	8001dc0 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f005 fa3f 	bl	800723c <HAL_PCD_DataOutStageCallback>
 8001dbe:	e005      	b.n	8001dcc <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fbd4 	bl	8004574 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001dcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d07a      	beq.n	8001ecc <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dda:	1c5a      	adds	r2, r3, #1
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e04:	843b      	strh	r3, [r7, #32]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	441a      	add	r2, r3
 8001e14:	8c3b      	ldrh	r3, [r7, #32]
 8001e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	78db      	ldrb	r3, [r3, #3]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d108      	bne.n	8001e3c <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d146      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d141      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3302      	adds	r3, #2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e64:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	8bfb      	ldrh	r3, [r7, #30]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d906      	bls.n	8001e7e <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	8bfb      	ldrh	r3, [r7, #30]
 8001e76:	1ad2      	subs	r2, r2, r3
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	619a      	str	r2, [r3, #24]
 8001e7c:	e002      	b.n	8001e84 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d106      	bne.n	8001e9a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f005 f9ed 	bl	8007272 <HAL_PCD_DataInStageCallback>
 8001e98:	e018      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	8bfb      	ldrh	r3, [r7, #30]
 8001ea0:	441a      	add	r2, r3
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	8bfb      	ldrh	r3, [r7, #30]
 8001eac:	441a      	add	r2, r3
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 fb5b 	bl	8004574 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ebe:	e005      	b.n	8001ecc <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ec0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f91b 	bl	8002102 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b21b      	sxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f6ff ad17 	blt.w	800190c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3738      	adds	r7, #56	; 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d07e      	beq.n	8001ffe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	3302      	adds	r3, #2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	8b7b      	ldrh	r3, [r7, #26]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d306      	bcc.n	8001f42 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	8b7b      	ldrh	r3, [r7, #26]
 8001f3a:	1ad2      	subs	r2, r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	619a      	str	r2, [r3, #24]
 8001f40:	e002      	b.n	8001f48 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d123      	bne.n	8001f98 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	881b      	ldrh	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6a:	833b      	strh	r3, [r7, #24]
 8001f6c:	8b3b      	ldrh	r3, [r7, #24]
 8001f6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f72:	833b      	strh	r3, [r7, #24]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	441a      	add	r2, r3
 8001f82:	8b3b      	ldrh	r3, [r7, #24]
 8001f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01f      	beq.n	8001fe2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbc:	82fb      	strh	r3, [r7, #22]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	441a      	add	r2, r3
 8001fcc:	8afb      	ldrh	r3, [r7, #22]
 8001fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fe2:	8b7b      	ldrh	r3, [r7, #26]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 8087 	beq.w	80020f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6959      	ldr	r1, [r3, #20]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	891a      	ldrh	r2, [r3, #8]
 8001ff6:	8b7b      	ldrh	r3, [r7, #26]
 8001ff8:	f003 fd5e 	bl	8005ab8 <USB_ReadPMA>
 8001ffc:	e07c      	b.n	80020f8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	4413      	add	r3, r2
 8002012:	3306      	adds	r3, #6
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002026:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	8b7b      	ldrh	r3, [r7, #26]
 800202e:	429a      	cmp	r2, r3
 8002030:	d306      	bcc.n	8002040 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	8b7b      	ldrh	r3, [r7, #26]
 8002038:	1ad2      	subs	r2, r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	619a      	str	r2, [r3, #24]
 800203e:	e002      	b.n	8002046 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d123      	bne.n	8002096 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002068:	83fb      	strh	r3, [r7, #30]
 800206a:	8bfb      	ldrh	r3, [r7, #30]
 800206c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002070:	83fb      	strh	r3, [r7, #30]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	441a      	add	r2, r3
 8002080:	8bfb      	ldrh	r3, [r7, #30]
 8002082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800208a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800208e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002092:	b29b      	uxth	r3, r3
 8002094:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d11f      	bne.n	80020e0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ba:	83bb      	strh	r3, [r7, #28]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	441a      	add	r2, r3
 80020ca:	8bbb      	ldrh	r3, [r7, #28]
 80020cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020dc:	b29b      	uxth	r3, r3
 80020de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020e0:	8b7b      	ldrh	r3, [r7, #26]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6959      	ldr	r1, [r3, #20]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	895a      	ldrh	r2, [r3, #10]
 80020f2:	8b7b      	ldrh	r3, [r7, #26]
 80020f4:	f003 fce0 	bl	8005ab8 <USB_ReadPMA>
    }
  }

  return count;
 80020f8:	8b7b      	ldrh	r3, [r7, #26]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b092      	sub	sp, #72	; 0x48
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	4613      	mov	r3, r2
 800210e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 8132 	beq.w	8002380 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4413      	add	r3, r2
 8002130:	3302      	adds	r3, #2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002144:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800214c:	429a      	cmp	r2, r3
 800214e:	d906      	bls.n	800215e <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	699a      	ldr	r2, [r3, #24]
 8002154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002156:	1ad2      	subs	r2, r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	619a      	str	r2, [r3, #24]
 800215c:	e002      	b.n	8002164 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d12c      	bne.n	80021c6 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f005 f87d 	bl	8007272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 822f 	beq.w	80025e2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	827b      	strh	r3, [r7, #18]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	441a      	add	r2, r3
 80021ae:	8a7b      	ldrh	r3, [r7, #18]
 80021b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	8013      	strh	r3, [r2, #0]
 80021c4:	e20d      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021c6:	88fb      	ldrh	r3, [r7, #6]
 80021c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01f      	beq.n	8002210 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002204:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	b29b      	uxth	r3, r3
 800220e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002216:	2b01      	cmp	r3, #1
 8002218:	f040 81e3 	bne.w	80025e2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002222:	441a      	add	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800222e:	441a      	add	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	6a1a      	ldr	r2, [r3, #32]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d309      	bcc.n	8002254 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6a1a      	ldr	r2, [r3, #32]
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	1ad2      	subs	r2, r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	621a      	str	r2, [r3, #32]
 8002252:	e014      	b.n	800227e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 800225c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800225e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002268:	e009      	b.n	800227e <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d155      	bne.n	8002332 <HAL_PCD_EP_DB_Transmit+0x230>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	4413      	add	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	011a      	lsls	r2, r3, #4
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	4413      	add	r3, r2
 80022a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d112      	bne.n	80022da <HAL_PCD_EP_DB_Transmit+0x1d8>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022be:	b29a      	uxth	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	801a      	strh	r2, [r3, #0]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	e047      	b.n	800236a <HAL_PCD_EP_DB_Transmit+0x268>
 80022da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022dc:	2b3e      	cmp	r3, #62	; 0x3e
 80022de:	d811      	bhi.n	8002304 <HAL_PCD_EP_DB_Transmit+0x202>
 80022e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_PCD_EP_DB_Transmit+0x1f4>
 80022f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f2:	3301      	adds	r3, #1
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	029b      	lsls	r3, r3, #10
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	e032      	b.n	800236a <HAL_PCD_EP_DB_Transmit+0x268>
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <HAL_PCD_EP_DB_Transmit+0x218>
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	b29b      	uxth	r3, r3
 800231e:	029b      	lsls	r3, r3, #10
 8002320:	b29b      	uxth	r3, r3
 8002322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800232a:	b29a      	uxth	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	801a      	strh	r2, [r3, #0]
 8002330:	e01b      	b.n	800236a <HAL_PCD_EP_DB_Transmit+0x268>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	785b      	ldrb	r3, [r3, #1]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d117      	bne.n	800236a <HAL_PCD_EP_DB_Transmit+0x268>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	4413      	add	r3, r2
 8002350:	623b      	str	r3, [r7, #32]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	011a      	lsls	r2, r3, #4
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	4413      	add	r3, r2
 800235c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	b29a      	uxth	r2, r3
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	6959      	ldr	r1, [r3, #20]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	891a      	ldrh	r2, [r3, #8]
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	b29b      	uxth	r3, r3
 800237a:	f003 fb59 	bl	8005a30 <USB_WritePMA>
 800237e:	e130      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002388:	b29b      	uxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	3306      	adds	r3, #6
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	4413      	add	r3, r2
 800239e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023a8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d306      	bcc.n	80023c2 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	619a      	str	r2, [r3, #24]
 80023c0:	e002      	b.n	80023c8 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d12c      	bne.n	800242a <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f004 ff4b 	bl	8007272 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f040 80fd 	bne.w	80025e2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002424:	b29b      	uxth	r3, r3
 8002426:	8013      	strh	r3, [r2, #0]
 8002428:	e0db      	b.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d11f      	bne.n	8002474 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	b29b      	uxth	r3, r3
 8002472:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800247a:	2b01      	cmp	r3, #1
 800247c:	f040 80b1 	bne.w	80025e2 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002486:	441a      	add	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002492:	441a      	add	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d309      	bcc.n	80024b8 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6a1a      	ldr	r2, [r3, #32]
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	1ad2      	subs	r2, r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	621a      	str	r2, [r3, #32]
 80024b6:	e014      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d106      	bne.n	80024ce <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80024c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024cc:	e009      	b.n	80024e2 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	785b      	ldrb	r3, [r3, #1]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d155      	bne.n	800259c <HAL_PCD_EP_DB_Transmit+0x49a>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	647b      	str	r3, [r7, #68]	; 0x44
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fe:	b29b      	uxth	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002504:	4413      	add	r3, r2
 8002506:	647b      	str	r3, [r7, #68]	; 0x44
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	011a      	lsls	r2, r3, #4
 800250e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002510:	4413      	add	r3, r2
 8002512:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002516:	643b      	str	r3, [r7, #64]	; 0x40
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	2b00      	cmp	r3, #0
 800251c:	d112      	bne.n	8002544 <HAL_PCD_EP_DB_Transmit+0x442>
 800251e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002528:	b29a      	uxth	r2, r3
 800252a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002538:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253c:	b29a      	uxth	r2, r3
 800253e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	e044      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002546:	2b3e      	cmp	r3, #62	; 0x3e
 8002548:	d811      	bhi.n	800256e <HAL_PCD_EP_DB_Transmit+0x46c>
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_PCD_EP_DB_Transmit+0x45e>
 800255a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255c:	3301      	adds	r3, #1
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002562:	b29b      	uxth	r3, r3
 8002564:	029b      	lsls	r3, r3, #10
 8002566:	b29a      	uxth	r2, r3
 8002568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256a:	801a      	strh	r2, [r3, #0]
 800256c:	e02f      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x4cc>
 800256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002570:	095b      	lsrs	r3, r3, #5
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_PCD_EP_DB_Transmit+0x482>
 800257e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002580:	3b01      	subs	r3, #1
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002586:	b29b      	uxth	r3, r3
 8002588:	029b      	lsls	r3, r3, #10
 800258a:	b29b      	uxth	r3, r3
 800258c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002594:	b29a      	uxth	r2, r3
 8002596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	e018      	b.n	80025ce <HAL_PCD_EP_DB_Transmit+0x4cc>
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d114      	bne.n	80025ce <HAL_PCD_EP_DB_Transmit+0x4cc>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	4413      	add	r3, r2
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	011a      	lsls	r2, r3, #4
 80025bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025be:	4413      	add	r3, r2
 80025c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025c4:	633b      	str	r3, [r7, #48]	; 0x30
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6959      	ldr	r1, [r3, #20]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	895a      	ldrh	r2, [r3, #10]
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	b29b      	uxth	r3, r3
 80025de:	f003 fa27 	bl	8005a30 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025fc:	823b      	strh	r3, [r7, #16]
 80025fe:	8a3b      	ldrh	r3, [r7, #16]
 8002600:	f083 0310 	eor.w	r3, r3, #16
 8002604:	823b      	strh	r3, [r7, #16]
 8002606:	8a3b      	ldrh	r3, [r7, #16]
 8002608:	f083 0320 	eor.w	r3, r3, #32
 800260c:	823b      	strh	r3, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	441a      	add	r2, r3
 800261c:	8a3b      	ldrh	r3, [r7, #16]
 800261e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262e:	b29b      	uxth	r3, r3
 8002630:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3748      	adds	r7, #72	; 0x48
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800263c:	b480      	push	{r7}
 800263e:	b087      	sub	sp, #28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	817b      	strh	r3, [r7, #10]
 800264a:	4613      	mov	r3, r2
 800264c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00b      	beq.n	8002672 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4413      	add	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e009      	b.n	8002686 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002672:	897a      	ldrh	r2, [r7, #10]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4413      	add	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002686:	893b      	ldrh	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2200      	movs	r2, #0
 8002690:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	80da      	strh	r2, [r3, #6]
 800269a:	e00b      	b.n	80026b4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2201      	movs	r2, #1
 80026a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e26c      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8087 	beq.w	80027ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026e0:	4b92      	ldr	r3, [pc, #584]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d00c      	beq.n	8002706 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026ec:	4b8f      	ldr	r3, [pc, #572]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d112      	bne.n	800271e <HAL_RCC_OscConfig+0x5e>
 80026f8:	4b8c      	ldr	r3, [pc, #560]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002704:	d10b      	bne.n	800271e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002706:	4b89      	ldr	r3, [pc, #548]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d06c      	beq.n	80027ec <HAL_RCC_OscConfig+0x12c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d168      	bne.n	80027ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e246      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x76>
 8002728:	4b80      	ldr	r3, [pc, #512]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a7f      	ldr	r2, [pc, #508]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e02e      	b.n	8002794 <HAL_RCC_OscConfig+0xd4>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x98>
 800273e:	4b7b      	ldr	r3, [pc, #492]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a7a      	ldr	r2, [pc, #488]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b78      	ldr	r3, [pc, #480]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a77      	ldr	r2, [pc, #476]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0xd4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0xbc>
 8002762:	4b72      	ldr	r3, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a71      	ldr	r2, [pc, #452]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6e      	ldr	r2, [pc, #440]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xd4>
 800277c:	4b6b      	ldr	r3, [pc, #428]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a6a      	ldr	r2, [pc, #424]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b68      	ldr	r3, [pc, #416]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a67      	ldr	r2, [pc, #412]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002792:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe f978 	bl	8000a90 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fe f974 	bl	8000a90 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	; 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1fa      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0xe4>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe f964 	bl	8000a90 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe f960 	bl	8000a90 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1e6      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x10c>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fa:	4b4c      	ldr	r3, [pc, #304]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002806:	4b49      	ldr	r3, [pc, #292]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b08      	cmp	r3, #8
 8002810:	d11c      	bne.n	800284c <HAL_RCC_OscConfig+0x18c>
 8002812:	4b46      	ldr	r3, [pc, #280]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d116      	bne.n	800284c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x176>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1ba      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4939      	ldr	r1, [pc, #228]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e03a      	b.n	80028c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285a:	f7fe f919 	bl	8000a90 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002862:	f7fe f915 	bl	8000a90 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e19b      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b2a      	ldr	r3, [pc, #168]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4927      	ldr	r1, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCC_OscConfig+0x270>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe f8f8 	bl	8000a90 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fe f8f4 	bl	8000a90 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e17a      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	4b1d      	ldr	r3, [pc, #116]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d03a      	beq.n	8002944 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d019      	beq.n	800290a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <HAL_RCC_OscConfig+0x274>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7fe f8d8 	bl	8000a90 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e4:	f7fe f8d4 	bl	8000a90 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e15a      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002902:	2001      	movs	r0, #1
 8002904:	f000 faa8 	bl	8002e58 <RCC_Delay>
 8002908:	e01c      	b.n	8002944 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_RCC_OscConfig+0x274>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002910:	f7fe f8be 	bl	8000a90 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002916:	e00f      	b.n	8002938 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe f8ba 	bl	8000a90 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d908      	bls.n	8002938 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e140      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	42420000 	.word	0x42420000
 8002934:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002938:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1e9      	bne.n	8002918 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80a6 	beq.w	8002a9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002952:	2300      	movs	r3, #0
 8002954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002956:	4b97      	ldr	r3, [pc, #604]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10d      	bne.n	800297e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b94      	ldr	r3, [pc, #592]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4a93      	ldr	r2, [pc, #588]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	61d3      	str	r3, [r2, #28]
 800296e:	4b91      	ldr	r3, [pc, #580]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	4b8e      	ldr	r3, [pc, #568]	; (8002bb8 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298a:	4b8b      	ldr	r3, [pc, #556]	; (8002bb8 <HAL_RCC_OscConfig+0x4f8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a8a      	ldr	r2, [pc, #552]	; (8002bb8 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002996:	f7fe f87b 	bl	8000a90 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fe f877 	bl	8000a90 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b64      	cmp	r3, #100	; 0x64
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e0fd      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	4b81      	ldr	r3, [pc, #516]	; (8002bb8 <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x312>
 80029c4:	4b7b      	ldr	r3, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	4a7a      	ldr	r2, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6213      	str	r3, [r2, #32]
 80029d0:	e02d      	b.n	8002a2e <HAL_RCC_OscConfig+0x36e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x334>
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4a75      	ldr	r2, [pc, #468]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	6213      	str	r3, [r2, #32]
 80029e6:	4b73      	ldr	r3, [pc, #460]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	4a72      	ldr	r2, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	6213      	str	r3, [r2, #32]
 80029f2:	e01c      	b.n	8002a2e <HAL_RCC_OscConfig+0x36e>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCC_OscConfig+0x356>
 80029fc:	4b6d      	ldr	r3, [pc, #436]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	4a6c      	ldr	r2, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	6213      	str	r3, [r2, #32]
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	6213      	str	r3, [r2, #32]
 8002a14:	e00b      	b.n	8002a2e <HAL_RCC_OscConfig+0x36e>
 8002a16:	4b67      	ldr	r3, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a66      	ldr	r2, [pc, #408]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6213      	str	r3, [r2, #32]
 8002a22:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a63      	ldr	r2, [pc, #396]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d015      	beq.n	8002a62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a36:	f7fe f82b 	bl	8000a90 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	e00a      	b.n	8002a54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe f827 	bl	8000a90 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0ab      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	4b57      	ldr	r3, [pc, #348]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ee      	beq.n	8002a3e <HAL_RCC_OscConfig+0x37e>
 8002a60:	e014      	b.n	8002a8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe f815 	bl	8000a90 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe f811 	bl	8000a90 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e095      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a80:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ee      	bne.n	8002a6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d105      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a92:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4a47      	ldr	r2, [pc, #284]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8081 	beq.w	8002baa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa8:	4b42      	ldr	r3, [pc, #264]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d061      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d146      	bne.n	8002b4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_RCC_OscConfig+0x4fc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fd ffe5 	bl	8000a90 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fd ffe1 	bl	8000a90 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e067      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d108      	bne.n	8002b04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002af2:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	492d      	ldr	r1, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a19      	ldr	r1, [r3, #32]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	430b      	orrs	r3, r1
 8002b16:	4927      	ldr	r1, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1c:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <HAL_RCC_OscConfig+0x4fc>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b22:	f7fd ffb5 	bl	8000a90 <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2a:	f7fd ffb1 	bl	8000a90 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e037      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x46a>
 8002b48:	e02f      	b.n	8002baa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_RCC_OscConfig+0x4fc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fd ff9e 	bl	8000a90 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fd ff9a 	bl	8000a90 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e020      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x498>
 8002b76:	e018      	b.n	8002baa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e013      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d106      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d001      	beq.n	8002baa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40007000 	.word	0x40007000
 8002bbc:	42420060 	.word	0x42420060

08002bc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0d0      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d910      	bls.n	8002c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be2:	4b67      	ldr	r3, [pc, #412]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 0207 	bic.w	r2, r3, #7
 8002bea:	4965      	ldr	r1, [pc, #404]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b63      	ldr	r3, [pc, #396]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0b8      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d020      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1c:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0308 	and.w	r3, r3, #8
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c40:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	494d      	ldr	r1, [pc, #308]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d040      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d107      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d115      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e07f      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e073      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06b      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9e:	4b39      	ldr	r3, [pc, #228]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f023 0203 	bic.w	r2, r3, #3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4936      	ldr	r1, [pc, #216]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb0:	f7fd feee 	bl	8000a90 <HAL_GetTick>
 8002cb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb8:	f7fd feea 	bl	8000a90 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e053      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 020c 	and.w	r2, r3, #12
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d1eb      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d210      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 0207 	bic.w	r2, r3, #7
 8002cf6:	4922      	ldr	r1, [pc, #136]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCC_ClockConfig+0x1c0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e032      	b.n	8002d76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4916      	ldr	r1, [pc, #88]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d009      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	490e      	ldr	r1, [pc, #56]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4e:	f000 f821 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002d52:	4601      	mov	r1, r0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	5cd3      	ldrb	r3, [r2, r3]
 8002d62:	fa21 f303 	lsr.w	r3, r1, r3
 8002d66:	4a09      	ldr	r2, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1cc>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fe4c 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40021000 	.word	0x40021000
 8002d88:	080077a4 	.word	0x080077a4
 8002d8c:	20000000 	.word	0x20000000
 8002d90:	20000004 	.word	0x20000004

08002d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d94:	b490      	push	{r4, r7}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002d9c:	1d3c      	adds	r4, r7, #4
 8002d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002da4:	4b28      	ldr	r3, [pc, #160]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x46>
 8002dd2:	e02d      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dd4:	4b1e      	ldr	r3, [pc, #120]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd6:	623b      	str	r3, [r7, #32]
      break;
 8002dd8:	e02d      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	0c9b      	lsrs	r3, r3, #18
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002de6:	4413      	add	r3, r2
 8002de8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	0c5b      	lsrs	r3, r3, #17
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e06:	4413      	add	r3, r2
 8002e08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e12:	fb02 f203 	mul.w	r2, r2, r3
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	e004      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	4a0c      	ldr	r2, [pc, #48]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e24:	fb02 f303 	mul.w	r3, r2, r3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	623b      	str	r3, [r7, #32]
      break;
 8002e2e:	e002      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e32:	623b      	str	r3, [r7, #32]
      break;
 8002e34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e36:	6a3b      	ldr	r3, [r7, #32]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc90      	pop	{r4, r7}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	08007748 	.word	0x08007748
 8002e48:	08007758 	.word	0x08007758
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	003d0900 	.word	0x003d0900

08002e58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <RCC_Delay+0x34>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <RCC_Delay+0x38>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	0a5b      	lsrs	r3, r3, #9
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e74:	bf00      	nop
  }
  while (Delay --);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e5a      	subs	r2, r3, #1
 8002e7a:	60fa      	str	r2, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <RCC_Delay+0x1c>
}
 8002e80:	bf00      	nop
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000000 	.word	0x20000000
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d07d      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb4:	4b4f      	ldr	r3, [pc, #316]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec0:	4b4c      	ldr	r3, [pc, #304]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	4a4b      	ldr	r2, [pc, #300]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eca:	61d3      	str	r3, [r2, #28]
 8002ecc:	4b49      	ldr	r3, [pc, #292]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d118      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee8:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a42      	ldr	r2, [pc, #264]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef4:	f7fd fdcc 	bl	8000a90 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	e008      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efc:	f7fd fdc8 	bl	8000a90 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e06d      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0e:	4b3a      	ldr	r3, [pc, #232]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f1a:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02e      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d027      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f48:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f4e:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5e:	f7fd fd97 	bl	8000a90 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fd fd93 	bl	8000a90 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e036      	b.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4917      	ldr	r1, [pc, #92]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d105      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa2:	69db      	ldr	r3, [r3, #28]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002faa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	490b      	ldr	r1, [pc, #44]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0310 	and.w	r3, r3, #16
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fd6:	4b07      	ldr	r3, [pc, #28]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40007000 	.word	0x40007000
 8002ffc:	42420440 	.word	0x42420440

08003000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e01d      	b.n	800304e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd fb70 	bl	800070c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 f9ee 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e01d      	b.n	80030a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f815 	bl	80030ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3304      	adds	r3, #4
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f000 f9c3 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr
	...

080030c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2201      	movs	r2, #1
 80030d0:	6839      	ldr	r1, [r7, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fc24 	bl	8003920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_TIM_PWM_Start+0x60>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d107      	bne.n	80030f2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b06      	cmp	r3, #6
 8003102:	d007      	beq.n	8003114 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00

08003124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800313a:	2302      	movs	r3, #2
 800313c:	e0b4      	b.n	80032a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b0c      	cmp	r3, #12
 8003152:	f200 809f 	bhi.w	8003294 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003156:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	08003191 	.word	0x08003191
 8003160:	08003295 	.word	0x08003295
 8003164:	08003295 	.word	0x08003295
 8003168:	08003295 	.word	0x08003295
 800316c:	080031d1 	.word	0x080031d1
 8003170:	08003295 	.word	0x08003295
 8003174:	08003295 	.word	0x08003295
 8003178:	08003295 	.word	0x08003295
 800317c:	08003213 	.word	0x08003213
 8003180:	08003295 	.word	0x08003295
 8003184:	08003295 	.word	0x08003295
 8003188:	08003295 	.word	0x08003295
 800318c:	08003253 	.word	0x08003253
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f9a4 	bl	80034e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699a      	ldr	r2, [r3, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0208 	orr.w	r2, r2, #8
 80031aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0204 	bic.w	r2, r2, #4
 80031ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6999      	ldr	r1, [r3, #24]
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	619a      	str	r2, [r3, #24]
      break;
 80031ce:	e062      	b.n	8003296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f9ea 	bl	80035b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699a      	ldr	r2, [r3, #24]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6999      	ldr	r1, [r3, #24]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	021a      	lsls	r2, r3, #8
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	619a      	str	r2, [r3, #24]
      break;
 8003210:	e041      	b.n	8003296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa33 	bl	8003684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0208 	orr.w	r2, r2, #8
 800322c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	69da      	ldr	r2, [r3, #28]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0204 	bic.w	r2, r2, #4
 800323c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69d9      	ldr	r1, [r3, #28]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
      break;
 8003250:	e021      	b.n	8003296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fa7d 	bl	8003758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69da      	ldr	r2, [r3, #28]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	69d9      	ldr	r1, [r3, #28]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	021a      	lsls	r2, r3, #8
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	61da      	str	r2, [r3, #28]
      break;
 8003292:	e000      	b.n	8003296 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003294:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIM_ConfigClockSource+0x18>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e0a6      	b.n	8003416 <HAL_TIM_ConfigClockSource+0x166>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d067      	beq.n	80033d0 <HAL_TIM_ConfigClockSource+0x120>
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d80b      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x6c>
 8003304:	2b10      	cmp	r3, #16
 8003306:	d073      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x140>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d802      	bhi.n	8003312 <HAL_TIM_ConfigClockSource+0x62>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d06f      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003310:	e078      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003312:	2b20      	cmp	r3, #32
 8003314:	d06c      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x140>
 8003316:	2b30      	cmp	r3, #48	; 0x30
 8003318:	d06a      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800331a:	e073      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d00d      	beq.n	800333c <HAL_TIM_ConfigClockSource+0x8c>
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d804      	bhi.n	800332e <HAL_TIM_ConfigClockSource+0x7e>
 8003324:	2b50      	cmp	r3, #80	; 0x50
 8003326:	d033      	beq.n	8003390 <HAL_TIM_ConfigClockSource+0xe0>
 8003328:	2b60      	cmp	r3, #96	; 0x60
 800332a:	d041      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800332c:	e06a      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800332e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003332:	d066      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x152>
 8003334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003338:	d017      	beq.n	800336a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800333a:	e063      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	6899      	ldr	r1, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f000 fac9 	bl	80038e2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800335e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	609a      	str	r2, [r3, #8]
      break;
 8003368:	e04c      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f000 fab2 	bl	80038e2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800338c:	609a      	str	r2, [r3, #8]
      break;
 800338e:	e039      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	461a      	mov	r2, r3
 800339e:	f000 fa29 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2150      	movs	r1, #80	; 0x50
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fa80 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 80033ae:	e029      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	461a      	mov	r2, r3
 80033be:	f000 fa47 	bl	8003850 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2160      	movs	r1, #96	; 0x60
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fa70 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 80033ce:	e019      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6818      	ldr	r0, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	461a      	mov	r2, r3
 80033de:	f000 fa09 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2140      	movs	r1, #64	; 0x40
 80033e8:	4618      	mov	r0, r3
 80033ea:	f000 fa60 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 80033ee:	e009      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4619      	mov	r1, r3
 80033fa:	4610      	mov	r0, r2
 80033fc:	f000 fa57 	bl	80038ae <TIM_ITRx_SetConfig>
      break;
 8003400:	e000      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <TIM_Base_SetConfig+0xb8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x30>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x30>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a26      	ldr	r2, [pc, #152]	; (80034dc <TIM_Base_SetConfig+0xbc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x30>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <TIM_Base_SetConfig+0xc0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <TIM_Base_SetConfig+0xb8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00b      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d007      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a19      	ldr	r2, [pc, #100]	; (80034dc <TIM_Base_SetConfig+0xbc>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d003      	beq.n	8003482 <TIM_Base_SetConfig+0x62>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a18      	ldr	r2, [pc, #96]	; (80034e0 <TIM_Base_SetConfig+0xc0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d108      	bne.n	8003494 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a07      	ldr	r2, [pc, #28]	; (80034d8 <TIM_Base_SetConfig+0xb8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	615a      	str	r2, [r3, #20]
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800

080034e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0303 	bic.w	r3, r3, #3
 800351a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 0302 	bic.w	r3, r3, #2
 800352c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <TIM_OC1_SetConfig+0xc8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10c      	bne.n	800355a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0308 	bic.w	r3, r3, #8
 8003546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 0304 	bic.w	r3, r3, #4
 8003558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <TIM_OC1_SetConfig+0xc8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d111      	bne.n	8003586 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	40012c00 	.word	0x40012c00

080035b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f023 0210 	bic.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f023 0320 	bic.w	r3, r3, #32
 80035fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <TIM_OC2_SetConfig+0xd0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10d      	bne.n	800362c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800362a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a14      	ldr	r2, [pc, #80]	; (8003680 <TIM_OC2_SetConfig+0xd0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d113      	bne.n	800365c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800363a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00

08003684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1d      	ldr	r2, [pc, #116]	; (8003754 <TIM_OC3_SetConfig+0xd0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10d      	bne.n	80036fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a14      	ldr	r2, [pc, #80]	; (8003754 <TIM_OC3_SetConfig+0xd0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800370c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	621a      	str	r2, [r3, #32]
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	40012c00 	.word	0x40012c00

08003758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	031b      	lsls	r3, r3, #12
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <TIM_OC4_SetConfig+0x98>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d109      	bne.n	80037cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	019b      	lsls	r3, r3, #6
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	621a      	str	r2, [r3, #32]
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr
 80037f0:	40012c00 	.word	0x40012c00

080037f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800381e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 030a 	bic.w	r3, r3, #10
 8003830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	f023 0210 	bic.w	r2, r3, #16
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800387a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	031b      	lsls	r3, r3, #12
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800388c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	621a      	str	r2, [r3, #32]
}
 80038a4:	bf00      	nop
 80038a6:	371c      	adds	r7, #28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b085      	sub	sp, #20
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f043 0307 	orr.w	r3, r3, #7
 80038d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	bf00      	nop
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b087      	sub	sp, #28
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	021a      	lsls	r2, r3, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	431a      	orrs	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4313      	orrs	r3, r2
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	609a      	str	r2, [r3, #8]
}
 8003916:	bf00      	nop
 8003918:	371c      	adds	r7, #28
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	2201      	movs	r2, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	43db      	mvns	r3, r3
 8003942:	401a      	ands	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a1a      	ldr	r2, [r3, #32]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 031f 	and.w	r3, r3, #31
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e032      	b.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039f0:	b084      	sub	sp, #16
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	f107 0014 	add.w	r0, r7, #20
 80039fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	b004      	add	sp, #16
 8003a0e:	4770      	bx	lr

08003a10 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003a44:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a48:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a88:	b084      	sub	sp, #16
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	f107 0014 	add.w	r0, r7, #20
 8003a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	b004      	add	sp, #16
 8003ac6:	4770      	bx	lr

08003ac8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b09b      	sub	sp, #108	; 0x6c
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aee:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d81f      	bhi.n	8003b3a <USB_ActivateEndpoint+0x72>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <USB_ActivateEndpoint+0x38>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b11 	.word	0x08003b11
 8003b04:	08003b2d 	.word	0x08003b2d
 8003b08:	08003b43 	.word	0x08003b43
 8003b0c:	08003b1f 	.word	0x08003b1f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003b10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b18:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003b1c:	e012      	b.n	8003b44 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b22:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003b26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003b2a:	e00b      	b.n	8003b44 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b2c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b34:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003b38:	e004      	b.n	8003b44 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003b40:	e000      	b.n	8003b44 <USB_ActivateEndpoint+0x7c>
      break;
 8003b42:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003b52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	881b      	ldrh	r3, [r3, #0]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	7b1b      	ldrb	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f040 8149 	bne.w	8003e48 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8084 	beq.w	8003cc8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	011a      	lsls	r2, r3, #4
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	88db      	ldrh	r3, [r3, #6]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	81fb      	strh	r3, [r7, #14]
 8003c02:	89fb      	ldrh	r3, [r7, #14]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <USB_ActivateEndpoint+0x17c>
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	81bb      	strh	r3, [r7, #12]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	89bb      	ldrh	r3, [r7, #12]
 8003c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d020      	beq.n	8003c8e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c62:	813b      	strh	r3, [r7, #8]
 8003c64:	893b      	ldrh	r3, [r7, #8]
 8003c66:	f083 0320 	eor.w	r3, r3, #32
 8003c6a:	813b      	strh	r3, [r7, #8]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	8013      	strh	r3, [r2, #0]
 8003c8c:	e27f      	b.n	800418e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca4:	817b      	strh	r3, [r7, #10]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	441a      	add	r2, r3
 8003cb0:	897b      	ldrh	r3, [r7, #10]
 8003cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8013      	strh	r3, [r2, #0]
 8003cc6:	e262      	b.n	800418e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	4413      	add	r3, r2
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	011a      	lsls	r2, r3, #4
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	88db      	ldrh	r3, [r3, #6]
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	4413      	add	r3, r2
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	011a      	lsls	r2, r3, #4
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	4413      	add	r3, r2
 8003d1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d1e:	623b      	str	r3, [r7, #32]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d112      	bne.n	8003d4e <USB_ActivateEndpoint+0x286>
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	801a      	strh	r2, [r3, #0]
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	e02f      	b.n	8003dae <USB_ActivateEndpoint+0x2e6>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b3e      	cmp	r3, #62	; 0x3e
 8003d54:	d813      	bhi.n	8003d7e <USB_ActivateEndpoint+0x2b6>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <USB_ActivateEndpoint+0x2a8>
 8003d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	029b      	lsls	r3, r3, #10
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e017      	b.n	8003dae <USB_ActivateEndpoint+0x2e6>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	095b      	lsrs	r3, r3, #5
 8003d84:	663b      	str	r3, [r7, #96]	; 0x60
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d102      	bne.n	8003d98 <USB_ActivateEndpoint+0x2d0>
 8003d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d94:	3b01      	subs	r3, #1
 8003d96:	663b      	str	r3, [r7, #96]	; 0x60
 8003d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	83fb      	strh	r3, [r7, #30]
 8003dbc:	8bfb      	ldrh	r3, [r7, #30]
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01b      	beq.n	8003dfe <USB_ActivateEndpoint+0x336>
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ddc:	83bb      	strh	r3, [r7, #28]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	441a      	add	r2, r3
 8003de8:	8bbb      	ldrh	r3, [r7, #28]
 8003dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e14:	837b      	strh	r3, [r7, #26]
 8003e16:	8b7b      	ldrh	r3, [r7, #26]
 8003e18:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e1c:	837b      	strh	r3, [r7, #26]
 8003e1e:	8b7b      	ldrh	r3, [r7, #26]
 8003e20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e24:	837b      	strh	r3, [r7, #26]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	441a      	add	r2, r3
 8003e30:	8b7b      	ldrh	r3, [r7, #26]
 8003e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	8013      	strh	r3, [r2, #0]
 8003e46:	e1a2      	b.n	800418e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	441a      	add	r2, r3
 8003e6c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e78:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e94:	4413      	add	r3, r2
 8003e96:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	011a      	lsls	r2, r3, #4
 8003e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	891b      	ldrh	r3, [r3, #8]
 8003eac:	085b      	lsrs	r3, r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	653b      	str	r3, [r7, #80]	; 0x50
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec8:	4413      	add	r3, r2
 8003eca:	653b      	str	r3, [r7, #80]	; 0x50
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	011a      	lsls	r2, r3, #4
 8003ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	895b      	ldrh	r3, [r3, #10]
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	785b      	ldrb	r3, [r3, #1]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 8091 	bne.w	8004018 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003f04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01b      	beq.n	8003f46 <USB_ActivateEndpoint+0x47e>
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f24:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	873b      	strh	r3, [r7, #56]	; 0x38
 8003f54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01b      	beq.n	8003f96 <USB_ActivateEndpoint+0x4ce>
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	441a      	add	r2, r3
 8003f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003fae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003fb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003fb4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003fb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003fb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003fbc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	441a      	add	r2, r3
 8003fc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff4:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	441a      	add	r2, r3
 8004000:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004002:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004006:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	b29b      	uxth	r3, r3
 8004014:	8013      	strh	r3, [r2, #0]
 8004016:	e0ba      	b.n	800418e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800402c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01d      	beq.n	8004070 <USB_ActivateEndpoint+0x5a8>
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	b29b      	uxth	r3, r3
 8004042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800405c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406c:	b29b      	uxth	r3, r3
 800406e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004080:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01d      	beq.n	80040c8 <USB_ActivateEndpoint+0x600>
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80040b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	78db      	ldrb	r3, [r3, #3]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d024      	beq.n	800411a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80040ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040ee:	f083 0320 	eor.w	r3, r3, #32
 80040f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	441a      	add	r2, r3
 8004100:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800410c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004114:	b29b      	uxth	r3, r3
 8004116:	8013      	strh	r3, [r2, #0]
 8004118:	e01d      	b.n	8004156 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004130:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	441a      	add	r2, r3
 8004178:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800417a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418a:	b29b      	uxth	r3, r3
 800418c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800418e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004192:	4618      	mov	r0, r3
 8004194:	376c      	adds	r7, #108	; 0x6c
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800419c:	b480      	push	{r7}
 800419e:	b08d      	sub	sp, #52	; 0x34
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	7b1b      	ldrb	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 808e 	bne.w	80042cc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d044      	beq.n	8004242 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	81bb      	strh	r3, [r7, #12]
 80041c6:	89bb      	ldrh	r3, [r7, #12]
 80041c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01b      	beq.n	8004208 <USB_DeactivateEndpoint+0x6c>
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	817b      	strh	r3, [r7, #10]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	441a      	add	r2, r3
 80041f2:	897b      	ldrh	r3, [r7, #10]
 80041f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004204:	b29b      	uxth	r3, r3
 8004206:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421e:	813b      	strh	r3, [r7, #8]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	441a      	add	r2, r3
 800422a:	893b      	ldrh	r3, [r7, #8]
 800422c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800423c:	b29b      	uxth	r3, r3
 800423e:	8013      	strh	r3, [r2, #0]
 8004240:	e192      	b.n	8004568 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	827b      	strh	r3, [r7, #18]
 8004250:	8a7b      	ldrh	r3, [r7, #18]
 8004252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01b      	beq.n	8004292 <USB_DeactivateEndpoint+0xf6>
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004270:	823b      	strh	r3, [r7, #16]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	441a      	add	r2, r3
 800427c:	8a3b      	ldrh	r3, [r7, #16]
 800427e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800428a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800428e:	b29b      	uxth	r3, r3
 8004290:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a8:	81fb      	strh	r3, [r7, #14]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	441a      	add	r2, r3
 80042b4:	89fb      	ldrh	r3, [r7, #14]
 80042b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	8013      	strh	r3, [r2, #0]
 80042ca:	e14d      	b.n	8004568 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	785b      	ldrb	r3, [r3, #1]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f040 80a5 	bne.w	8004420 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	843b      	strh	r3, [r7, #32]
 80042e4:	8c3b      	ldrh	r3, [r7, #32]
 80042e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01b      	beq.n	8004326 <USB_DeactivateEndpoint+0x18a>
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004304:	83fb      	strh	r3, [r7, #30]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	441a      	add	r2, r3
 8004310:	8bfb      	ldrh	r3, [r7, #30]
 8004312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	b29b      	uxth	r3, r3
 8004324:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	83bb      	strh	r3, [r7, #28]
 8004334:	8bbb      	ldrh	r3, [r7, #28]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01b      	beq.n	8004376 <USB_DeactivateEndpoint+0x1da>
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004354:	837b      	strh	r3, [r7, #26]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	441a      	add	r2, r3
 8004360:	8b7b      	ldrh	r3, [r7, #26]
 8004362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800436e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004372:	b29b      	uxth	r3, r3
 8004374:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438c:	833b      	strh	r3, [r7, #24]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	441a      	add	r2, r3
 8004398:	8b3b      	ldrh	r3, [r7, #24]
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c4:	82fb      	strh	r3, [r7, #22]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	441a      	add	r2, r3
 80043d0:	8afb      	ldrh	r3, [r7, #22]
 80043d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fc:	82bb      	strh	r3, [r7, #20]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	441a      	add	r2, r3
 8004408:	8abb      	ldrh	r3, [r7, #20]
 800440a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	b29b      	uxth	r3, r3
 800441c:	8013      	strh	r3, [r2, #0]
 800441e:	e0a3      	b.n	8004568 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800442e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01b      	beq.n	8004470 <USB_DeactivateEndpoint+0x2d4>
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	b29b      	uxth	r3, r3
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	441a      	add	r2, r3
 800445a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800445c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800446c:	b29b      	uxth	r3, r3
 800446e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800447e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01b      	beq.n	80044c0 <USB_DeactivateEndpoint+0x324>
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800449a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449e:	853b      	strh	r3, [r7, #40]	; 0x28
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	441a      	add	r2, r3
 80044aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044bc:	b29b      	uxth	r3, r3
 80044be:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	b29b      	uxth	r3, r3
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800451c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800452c:	b29b      	uxth	r3, r3
 800452e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004546:	847b      	strh	r3, [r7, #34]	; 0x22
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004554:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004558:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004564:	b29b      	uxth	r3, r3
 8004566:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3734      	adds	r7, #52	; 0x34
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b0c4      	sub	sp, #272	; 0x110
 8004578:	af00      	add	r7, sp, #0
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	6018      	str	r0, [r3, #0]
 800457e:	463b      	mov	r3, r7
 8004580:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004582:	463b      	mov	r3, r7
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 8557 	bne.w	800503c <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800458e:	463b      	mov	r3, r7
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	699a      	ldr	r2, [r3, #24]
 8004594:	463b      	mov	r3, r7
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	429a      	cmp	r2, r3
 800459c:	d905      	bls.n	80045aa <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800459e:	463b      	mov	r3, r7
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80045a8:	e004      	b.n	80045b4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80045aa:	463b      	mov	r3, r7
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80045b4:	463b      	mov	r3, r7
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	7b1b      	ldrb	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d12c      	bne.n	8004618 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80045be:	463b      	mov	r3, r7
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6959      	ldr	r1, [r3, #20]
 80045c4:	463b      	mov	r3, r7
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	88da      	ldrh	r2, [r3, #6]
 80045ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	1d38      	adds	r0, r7, #4
 80045d2:	6800      	ldr	r0, [r0, #0]
 80045d4:	f001 fa2c 	bl	8005a30 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80045d8:	1d3b      	adds	r3, r7, #4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	4413      	add	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	011a      	lsls	r2, r3, #4
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	4413      	add	r3, r2
 80045fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004600:	f107 0310 	add.w	r3, r7, #16
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800460a:	b29a      	uxth	r2, r3
 800460c:	f107 0310 	add.w	r3, r7, #16
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	801a      	strh	r2, [r3, #0]
 8004614:	f000 bcdd 	b.w	8004fd2 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004618:	463b      	mov	r3, r7
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	2b02      	cmp	r3, #2
 8004620:	f040 8347 	bne.w	8004cb2 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004624:	463b      	mov	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	463b      	mov	r3, r7
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	429a      	cmp	r2, r3
 8004632:	f240 82eb 	bls.w	8004c0c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	463b      	mov	r3, r7
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	441a      	add	r2, r3
 8004662:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800466a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004676:	b29b      	uxth	r3, r3
 8004678:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004684:	1ad2      	subs	r2, r2, r3
 8004686:	463b      	mov	r3, r7
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800468c:	1d3b      	adds	r3, r7, #4
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	463b      	mov	r3, r7
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 8159 	beq.w	800495a <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046a8:	1d3b      	adds	r3, r7, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	637b      	str	r3, [r7, #52]	; 0x34
 80046ae:	463b      	mov	r3, r7
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d164      	bne.n	8004782 <USB_EPStartXfer+0x20e>
 80046b8:	1d3b      	adds	r3, r7, #4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046cc:	4413      	add	r3, r2
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	011a      	lsls	r2, r3, #4
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	4413      	add	r3, r2
 80046dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d112      	bne.n	8004710 <USB_EPStartXfer+0x19c>
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	801a      	strh	r2, [r3, #0]
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004708:	b29a      	uxth	r2, r3
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	801a      	strh	r2, [r3, #0]
 800470e:	e054      	b.n	80047ba <USB_EPStartXfer+0x246>
 8004710:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004714:	2b3e      	cmp	r3, #62	; 0x3e
 8004716:	d817      	bhi.n	8004748 <USB_EPStartXfer+0x1d4>
 8004718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004722:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <USB_EPStartXfer+0x1c4>
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004732:	3301      	adds	r3, #1
 8004734:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800473c:	b29b      	uxth	r3, r3
 800473e:	029b      	lsls	r3, r3, #10
 8004740:	b29a      	uxth	r2, r3
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	801a      	strh	r2, [r3, #0]
 8004746:	e038      	b.n	80047ba <USB_EPStartXfer+0x246>
 8004748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2b00      	cmp	r3, #0
 800475c:	d104      	bne.n	8004768 <USB_EPStartXfer+0x1f4>
 800475e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004762:	3b01      	subs	r3, #1
 8004764:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800476c:	b29b      	uxth	r3, r3
 800476e:	029b      	lsls	r3, r3, #10
 8004770:	b29b      	uxth	r3, r3
 8004772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477a:	b29a      	uxth	r2, r3
 800477c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	e01b      	b.n	80047ba <USB_EPStartXfer+0x246>
 8004782:	463b      	mov	r3, r7
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d116      	bne.n	80047ba <USB_EPStartXfer+0x246>
 800478c:	1d3b      	adds	r3, r7, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004794:	b29b      	uxth	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	4413      	add	r3, r2
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	463b      	mov	r3, r7
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	011a      	lsls	r2, r3, #4
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	4413      	add	r3, r2
 80047aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
 80047b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80047ba:	463b      	mov	r3, r7
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	895b      	ldrh	r3, [r3, #10]
 80047c0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047c4:	463b      	mov	r3, r7
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6959      	ldr	r1, [r3, #20]
 80047ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80047d4:	1d38      	adds	r0, r7, #4
 80047d6:	6800      	ldr	r0, [r0, #0]
 80047d8:	f001 f92a 	bl	8005a30 <USB_WritePMA>
            ep->xfer_buff += len;
 80047dc:	463b      	mov	r3, r7
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e6:	441a      	add	r2, r3
 80047e8:	463b      	mov	r3, r7
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047ee:	463b      	mov	r3, r7
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6a1a      	ldr	r2, [r3, #32]
 80047f4:	463b      	mov	r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d909      	bls.n	8004812 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80047fe:	463b      	mov	r3, r7
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004808:	1ad2      	subs	r2, r2, r3
 800480a:	463b      	mov	r3, r7
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	621a      	str	r2, [r3, #32]
 8004810:	e008      	b.n	8004824 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8004812:	463b      	mov	r3, r7
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800481c:	463b      	mov	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2200      	movs	r2, #0
 8004822:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004824:	463b      	mov	r3, r7
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d164      	bne.n	80048f8 <USB_EPStartXfer+0x384>
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	1d3b      	adds	r3, r7, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800483c:	b29b      	uxth	r3, r3
 800483e:	461a      	mov	r2, r3
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	4413      	add	r3, r2
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	463b      	mov	r3, r7
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	011a      	lsls	r2, r3, #4
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d112      	bne.n	8004886 <USB_EPStartXfer+0x312>
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800486a:	b29a      	uxth	r2, r3
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	881b      	ldrh	r3, [r3, #0]
 8004874:	b29b      	uxth	r3, r3
 8004876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800487e:	b29a      	uxth	r2, r3
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	801a      	strh	r2, [r3, #0]
 8004884:	e057      	b.n	8004936 <USB_EPStartXfer+0x3c2>
 8004886:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488a:	2b3e      	cmp	r3, #62	; 0x3e
 800488c:	d817      	bhi.n	80048be <USB_EPStartXfer+0x34a>
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <USB_EPStartXfer+0x33a>
 80048a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048a8:	3301      	adds	r3, #1
 80048aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	029b      	lsls	r3, r3, #10
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	801a      	strh	r2, [r3, #0]
 80048bc:	e03b      	b.n	8004936 <USB_EPStartXfer+0x3c2>
 80048be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048cc:	f003 031f 	and.w	r3, r3, #31
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d104      	bne.n	80048de <USB_EPStartXfer+0x36a>
 80048d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048d8:	3b01      	subs	r3, #1
 80048da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	029b      	lsls	r3, r3, #10
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	e01e      	b.n	8004936 <USB_EPStartXfer+0x3c2>
 80048f8:	463b      	mov	r3, r7
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	785b      	ldrb	r3, [r3, #1]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d119      	bne.n	8004936 <USB_EPStartXfer+0x3c2>
 8004902:	1d3b      	adds	r3, r7, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
 8004908:	1d3b      	adds	r3, r7, #4
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004910:	b29b      	uxth	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	4413      	add	r3, r2
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	463b      	mov	r3, r7
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	011a      	lsls	r2, r3, #4
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	4413      	add	r3, r2
 8004926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004930:	b29a      	uxth	r2, r3
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004936:	463b      	mov	r3, r7
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	891b      	ldrh	r3, [r3, #8]
 800493c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004940:	463b      	mov	r3, r7
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6959      	ldr	r1, [r3, #20]
 8004946:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494a:	b29b      	uxth	r3, r3
 800494c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004950:	1d38      	adds	r0, r7, #4
 8004952:	6800      	ldr	r0, [r0, #0]
 8004954:	f001 f86c 	bl	8005a30 <USB_WritePMA>
 8004958:	e33b      	b.n	8004fd2 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800495a:	463b      	mov	r3, r7
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	785b      	ldrb	r3, [r3, #1]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d164      	bne.n	8004a2e <USB_EPStartXfer+0x4ba>
 8004964:	1d3b      	adds	r3, r7, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004978:	4413      	add	r3, r2
 800497a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800497c:	463b      	mov	r3, r7
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	011a      	lsls	r2, r3, #4
 8004984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004986:	4413      	add	r3, r2
 8004988:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800498c:	64bb      	str	r3, [r7, #72]	; 0x48
 800498e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d112      	bne.n	80049bc <USB_EPStartXfer+0x448>
 8004996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b8:	801a      	strh	r2, [r3, #0]
 80049ba:	e057      	b.n	8004a6c <USB_EPStartXfer+0x4f8>
 80049bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c0:	2b3e      	cmp	r3, #62	; 0x3e
 80049c2:	d817      	bhi.n	80049f4 <USB_EPStartXfer+0x480>
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d004      	beq.n	80049e4 <USB_EPStartXfer+0x470>
 80049da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049de:	3301      	adds	r3, #1
 80049e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	029b      	lsls	r3, r3, #10
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f0:	801a      	strh	r2, [r3, #0]
 80049f2:	e03b      	b.n	8004a6c <USB_EPStartXfer+0x4f8>
 80049f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <USB_EPStartXfer+0x4a0>
 8004a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	029b      	lsls	r3, r3, #10
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2a:	801a      	strh	r2, [r3, #0]
 8004a2c:	e01e      	b.n	8004a6c <USB_EPStartXfer+0x4f8>
 8004a2e:	463b      	mov	r3, r7
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d119      	bne.n	8004a6c <USB_EPStartXfer+0x4f8>
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4c:	4413      	add	r3, r2
 8004a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a50:	463b      	mov	r3, r7
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	011a      	lsls	r2, r3, #4
 8004a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a60:	653b      	str	r3, [r7, #80]	; 0x50
 8004a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a6c:	463b      	mov	r3, r7
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	891b      	ldrh	r3, [r3, #8]
 8004a72:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a76:	463b      	mov	r3, r7
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6959      	ldr	r1, [r3, #20]
 8004a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004a86:	1d38      	adds	r0, r7, #4
 8004a88:	6800      	ldr	r0, [r0, #0]
 8004a8a:	f000 ffd1 	bl	8005a30 <USB_WritePMA>
            ep->xfer_buff += len;
 8004a8e:	463b      	mov	r3, r7
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a98:	441a      	add	r2, r3
 8004a9a:	463b      	mov	r3, r7
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004aa0:	463b      	mov	r3, r7
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6a1a      	ldr	r2, [r3, #32]
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d909      	bls.n	8004ac4 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aba:	1ad2      	subs	r2, r2, r3
 8004abc:	463b      	mov	r3, r7
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	621a      	str	r2, [r3, #32]
 8004ac2:	e008      	b.n	8004ad6 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8004ac4:	463b      	mov	r3, r7
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8004ace:	463b      	mov	r3, r7
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	647b      	str	r3, [r7, #68]	; 0x44
 8004adc:	463b      	mov	r3, r7
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d164      	bne.n	8004bb0 <USB_EPStartXfer+0x63c>
 8004ae6:	1d3b      	adds	r3, r7, #4
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aec:	1d3b      	adds	r3, r7, #4
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afa:	4413      	add	r3, r2
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afe:	463b      	mov	r3, r7
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	011a      	lsls	r2, r3, #4
 8004b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b08:	4413      	add	r3, r2
 8004b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d112      	bne.n	8004b3e <USB_EPStartXfer+0x5ca>
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	e054      	b.n	8004be8 <USB_EPStartXfer+0x674>
 8004b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b42:	2b3e      	cmp	r3, #62	; 0x3e
 8004b44:	d817      	bhi.n	8004b76 <USB_EPStartXfer+0x602>
 8004b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <USB_EPStartXfer+0x5f2>
 8004b5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b60:	3301      	adds	r3, #1
 8004b62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	e038      	b.n	8004be8 <USB_EPStartXfer+0x674>
 8004b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b7a:	095b      	lsrs	r3, r3, #5
 8004b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <USB_EPStartXfer+0x622>
 8004b8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b90:	3b01      	subs	r3, #1
 8004b92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	e01b      	b.n	8004be8 <USB_EPStartXfer+0x674>
 8004bb0:	463b      	mov	r3, r7
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	785b      	ldrb	r3, [r3, #1]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d116      	bne.n	8004be8 <USB_EPStartXfer+0x674>
 8004bba:	1d3b      	adds	r3, r7, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bc8:	4413      	add	r3, r2
 8004bca:	647b      	str	r3, [r7, #68]	; 0x44
 8004bcc:	463b      	mov	r3, r7
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	011a      	lsls	r2, r3, #4
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004be6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004be8:	463b      	mov	r3, r7
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	895b      	ldrh	r3, [r3, #10]
 8004bee:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bf2:	463b      	mov	r3, r7
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6959      	ldr	r1, [r3, #20]
 8004bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004c02:	1d38      	adds	r0, r7, #4
 8004c04:	6800      	ldr	r0, [r0, #0]
 8004c06:	f000 ff13 	bl	8005a30 <USB_WritePMA>
 8004c0a:	e1e2      	b.n	8004fd2 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	463b      	mov	r3, r7
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c30:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	463b      	mov	r3, r7
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	441a      	add	r2, r3
 8004c42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004c46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c5a:	1d3b      	adds	r3, r7, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004c60:	1d3b      	adds	r3, r7, #4
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c6e:	4413      	add	r3, r2
 8004c70:	663b      	str	r3, [r7, #96]	; 0x60
 8004c72:	463b      	mov	r3, r7
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	011a      	lsls	r2, r3, #4
 8004c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c8e:	463b      	mov	r3, r7
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	891b      	ldrh	r3, [r3, #8]
 8004c94:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c98:	463b      	mov	r3, r7
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	6959      	ldr	r1, [r3, #20]
 8004c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004ca8:	1d38      	adds	r0, r7, #4
 8004caa:	6800      	ldr	r0, [r0, #0]
 8004cac:	f000 fec0 	bl	8005a30 <USB_WritePMA>
 8004cb0:	e18f      	b.n	8004fd2 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004cb2:	1d3b      	adds	r3, r7, #4
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	463b      	mov	r3, r7
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 808f 	beq.w	8004dec <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004cce:	1d3b      	adds	r3, r7, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d164      	bne.n	8004da8 <USB_EPStartXfer+0x834>
 8004cde:	1d3b      	adds	r3, r7, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ce4:	1d3b      	adds	r3, r7, #4
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	461a      	mov	r2, r3
 8004cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf2:	4413      	add	r3, r2
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
 8004cf6:	463b      	mov	r3, r7
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	011a      	lsls	r2, r3, #4
 8004cfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d00:	4413      	add	r3, r2
 8004d02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d112      	bne.n	8004d36 <USB_EPStartXfer+0x7c2>
 8004d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	e054      	b.n	8004de0 <USB_EPStartXfer+0x86c>
 8004d36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004d3c:	d817      	bhi.n	8004d6e <USB_EPStartXfer+0x7fa>
 8004d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d42:	085b      	lsrs	r3, r3, #1
 8004d44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <USB_EPStartXfer+0x7ea>
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	029b      	lsls	r3, r3, #10
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e038      	b.n	8004de0 <USB_EPStartXfer+0x86c>
 8004d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <USB_EPStartXfer+0x81a>
 8004d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e01b      	b.n	8004de0 <USB_EPStartXfer+0x86c>
 8004da8:	463b      	mov	r3, r7
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d116      	bne.n	8004de0 <USB_EPStartXfer+0x86c>
 8004db2:	1d3b      	adds	r3, r7, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc0:	4413      	add	r3, r2
 8004dc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	011a      	lsls	r2, r3, #4
 8004dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dce:	4413      	add	r3, r2
 8004dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd4:	677b      	str	r3, [r7, #116]	; 0x74
 8004dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004de0:	463b      	mov	r3, r7
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	895b      	ldrh	r3, [r3, #10]
 8004de6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004dea:	e097      	b.n	8004f1c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dec:	463b      	mov	r3, r7
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d168      	bne.n	8004ec8 <USB_EPStartXfer+0x954>
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e0e:	4413      	add	r3, r2
 8004e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e14:	463b      	mov	r3, r7
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	011a      	lsls	r2, r3, #4
 8004e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e20:	4413      	add	r3, r2
 8004e22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d112      	bne.n	8004e56 <USB_EPStartXfer+0x8e2>
 8004e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e3e:	801a      	strh	r2, [r3, #0]
 8004e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	e05d      	b.n	8004f12 <USB_EPStartXfer+0x99e>
 8004e56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e5c:	d817      	bhi.n	8004e8e <USB_EPStartXfer+0x91a>
 8004e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <USB_EPStartXfer+0x90a>
 8004e74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	029b      	lsls	r3, r3, #10
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e8a:	801a      	strh	r2, [r3, #0]
 8004e8c:	e041      	b.n	8004f12 <USB_EPStartXfer+0x99e>
 8004e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <USB_EPStartXfer+0x93a>
 8004ea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004eae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	029b      	lsls	r3, r3, #10
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	e024      	b.n	8004f12 <USB_EPStartXfer+0x99e>
 8004ec8:	463b      	mov	r3, r7
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d11f      	bne.n	8004f12 <USB_EPStartXfer+0x99e>
 8004ed2:	1d3b      	adds	r3, r7, #4
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eda:	1d3b      	adds	r3, r7, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eea:	4413      	add	r3, r2
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	011a      	lsls	r2, r3, #4
 8004ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004efc:	4413      	add	r3, r2
 8004efe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f12:	463b      	mov	r3, r7
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	891b      	ldrh	r3, [r3, #8]
 8004f18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f1c:	463b      	mov	r3, r7
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6959      	ldr	r1, [r3, #20]
 8004f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004f2c:	1d38      	adds	r0, r7, #4
 8004f2e:	6800      	ldr	r0, [r0, #0]
 8004f30:	f000 fd7e 	bl	8005a30 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d122      	bne.n	8004f84 <USB_EPStartXfer+0xa10>
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	463b      	mov	r3, r7
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	4413      	add	r3, r2
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f58:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	463b      	mov	r3, r7
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	441a      	add	r2, r3
 8004f6a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8013      	strh	r3, [r2, #0]
 8004f82:	e026      	b.n	8004fd2 <USB_EPStartXfer+0xa5e>
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d121      	bne.n	8004fd2 <USB_EPStartXfer+0xa5e>
 8004f8e:	1d3b      	adds	r3, r7, #4
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	463b      	mov	r3, r7
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	463b      	mov	r3, r7
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004fd2:	1d3b      	adds	r3, r7, #4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	f107 020e 	add.w	r2, r7, #14
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff0:	8013      	strh	r3, [r2, #0]
 8004ff2:	f107 030e 	add.w	r3, r7, #14
 8004ff6:	f107 020e 	add.w	r2, r7, #14
 8004ffa:	8812      	ldrh	r2, [r2, #0]
 8004ffc:	f082 0210 	eor.w	r2, r2, #16
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	f107 030e 	add.w	r3, r7, #14
 8005006:	f107 020e 	add.w	r2, r7, #14
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	f082 0220 	eor.w	r2, r2, #32
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	1d3b      	adds	r3, r7, #4
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	463b      	mov	r3, r7
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	441a      	add	r2, r3
 8005020:	f107 030e 	add.w	r3, r7, #14
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800502a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800502e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005036:	b29b      	uxth	r3, r3
 8005038:	8013      	strh	r3, [r2, #0]
 800503a:	e3b5      	b.n	80057a8 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800503c:	463b      	mov	r3, r7
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	7b1b      	ldrb	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f040 8090 	bne.w	8005168 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699a      	ldr	r2, [r3, #24]
 800504e:	463b      	mov	r3, r7
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	429a      	cmp	r2, r3
 8005056:	d90e      	bls.n	8005076 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8005058:	463b      	mov	r3, r7
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8005062:	463b      	mov	r3, r7
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800506c:	1ad2      	subs	r2, r2, r3
 800506e:	463b      	mov	r3, r7
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	619a      	str	r2, [r3, #24]
 8005074:	e008      	b.n	8005088 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8005076:	463b      	mov	r3, r7
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8005080:	463b      	mov	r3, r7
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005088:	1d3b      	adds	r3, r7, #4
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005090:	1d3b      	adds	r3, r7, #4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005098:	b29b      	uxth	r3, r3
 800509a:	461a      	mov	r2, r3
 800509c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050a0:	4413      	add	r3, r2
 80050a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80050a6:	463b      	mov	r3, r7
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	011a      	lsls	r2, r3, #4
 80050ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050b2:	4413      	add	r3, r2
 80050b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <USB_EPStartXfer+0xb7e>
 80050c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	e32c      	b.n	800574c <USB_EPStartXfer+0x11d8>
 80050f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050f6:	2b3e      	cmp	r3, #62	; 0x3e
 80050f8:	d818      	bhi.n	800512c <USB_EPStartXfer+0xbb8>
 80050fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80050fe:	085b      	lsrs	r3, r3, #1
 8005100:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <USB_EPStartXfer+0xba6>
 8005110:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005114:	3301      	adds	r3, #1
 8005116:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800511a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800511e:	b29b      	uxth	r3, r3
 8005120:	029b      	lsls	r3, r3, #10
 8005122:	b29a      	uxth	r2, r3
 8005124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	e30f      	b.n	800574c <USB_EPStartXfer+0x11d8>
 800512c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	2b00      	cmp	r3, #0
 8005140:	d104      	bne.n	800514c <USB_EPStartXfer+0xbd8>
 8005142:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005146:	3b01      	subs	r3, #1
 8005148:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800514c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005150:	b29b      	uxth	r3, r3
 8005152:	029b      	lsls	r3, r3, #10
 8005154:	b29b      	uxth	r3, r3
 8005156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800515a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800515e:	b29a      	uxth	r2, r3
 8005160:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	e2f1      	b.n	800574c <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005168:	463b      	mov	r3, r7
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	78db      	ldrb	r3, [r3, #3]
 800516e:	2b02      	cmp	r3, #2
 8005170:	f040 818f 	bne.w	8005492 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005174:	463b      	mov	r3, r7
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d175      	bne.n	800526a <USB_EPStartXfer+0xcf6>
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005186:	1d3b      	adds	r3, r7, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518e:	b29b      	uxth	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005196:	4413      	add	r3, r2
 8005198:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800519c:	463b      	mov	r3, r7
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	011a      	lsls	r2, r3, #4
 80051a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80051a8:	4413      	add	r3, r2
 80051aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051b2:	463b      	mov	r3, r7
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d116      	bne.n	80051ea <USB_EPStartXfer+0xc76>
 80051bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051ce:	801a      	strh	r2, [r3, #0]
 80051d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051e6:	801a      	strh	r2, [r3, #0]
 80051e8:	e065      	b.n	80052b6 <USB_EPStartXfer+0xd42>
 80051ea:	463b      	mov	r3, r7
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	2b3e      	cmp	r3, #62	; 0x3e
 80051f2:	d81a      	bhi.n	800522a <USB_EPStartXfer+0xcb6>
 80051f4:	463b      	mov	r3, r7
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	085b      	lsrs	r3, r3, #1
 80051fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005200:	463b      	mov	r3, r7
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <USB_EPStartXfer+0xca4>
 800520e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005212:	3301      	adds	r3, #1
 8005214:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005218:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800521c:	b29b      	uxth	r3, r3
 800521e:	029b      	lsls	r3, r3, #10
 8005220:	b29a      	uxth	r2, r3
 8005222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005226:	801a      	strh	r2, [r3, #0]
 8005228:	e045      	b.n	80052b6 <USB_EPStartXfer+0xd42>
 800522a:	463b      	mov	r3, r7
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005236:	463b      	mov	r3, r7
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <USB_EPStartXfer+0xcda>
 8005244:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005248:	3b01      	subs	r3, #1
 800524a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800524e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005252:	b29b      	uxth	r3, r3
 8005254:	029b      	lsls	r3, r3, #10
 8005256:	b29b      	uxth	r3, r3
 8005258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800525c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005260:	b29a      	uxth	r2, r3
 8005262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005266:	801a      	strh	r2, [r3, #0]
 8005268:	e025      	b.n	80052b6 <USB_EPStartXfer+0xd42>
 800526a:	463b      	mov	r3, r7
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d120      	bne.n	80052b6 <USB_EPStartXfer+0xd42>
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005284:	b29b      	uxth	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800528c:	4413      	add	r3, r2
 800528e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005292:	463b      	mov	r3, r7
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	011a      	lsls	r2, r3, #4
 800529a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800529e:	4413      	add	r3, r2
 80052a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a8:	463b      	mov	r3, r7
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80052b4:	801a      	strh	r2, [r3, #0]
 80052b6:	1d3b      	adds	r3, r7, #4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052be:	463b      	mov	r3, r7
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d175      	bne.n	80053b4 <USB_EPStartXfer+0xe40>
 80052c8:	1d3b      	adds	r3, r7, #4
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052d0:	1d3b      	adds	r3, r7, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d8:	b29b      	uxth	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052e0:	4413      	add	r3, r2
 80052e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052e6:	463b      	mov	r3, r7
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	011a      	lsls	r2, r3, #4
 80052ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052f2:	4413      	add	r3, r2
 80052f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052fc:	463b      	mov	r3, r7
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d116      	bne.n	8005334 <USB_EPStartXfer+0xdc0>
 8005306:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005312:	b29a      	uxth	r2, r3
 8005314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	b29b      	uxth	r3, r3
 8005322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800532a:	b29a      	uxth	r2, r3
 800532c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e061      	b.n	80053f8 <USB_EPStartXfer+0xe84>
 8005334:	463b      	mov	r3, r7
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b3e      	cmp	r3, #62	; 0x3e
 800533c:	d81a      	bhi.n	8005374 <USB_EPStartXfer+0xe00>
 800533e:	463b      	mov	r3, r7
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800534a:	463b      	mov	r3, r7
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <USB_EPStartXfer+0xdee>
 8005358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535c:	3301      	adds	r3, #1
 800535e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	b29b      	uxth	r3, r3
 8005368:	029b      	lsls	r3, r3, #10
 800536a:	b29a      	uxth	r2, r3
 800536c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	e041      	b.n	80053f8 <USB_EPStartXfer+0xe84>
 8005374:	463b      	mov	r3, r7
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005380:	463b      	mov	r3, r7
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 031f 	and.w	r3, r3, #31
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <USB_EPStartXfer+0xe24>
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	3b01      	subs	r3, #1
 8005394:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539c:	b29b      	uxth	r3, r3
 800539e:	029b      	lsls	r3, r3, #10
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e021      	b.n	80053f8 <USB_EPStartXfer+0xe84>
 80053b4:	463b      	mov	r3, r7
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d11c      	bne.n	80053f8 <USB_EPStartXfer+0xe84>
 80053be:	1d3b      	adds	r3, r7, #4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053ce:	4413      	add	r3, r2
 80053d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053d4:	463b      	mov	r3, r7
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	011a      	lsls	r2, r3, #4
 80053dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053e0:	4413      	add	r3, r2
 80053e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053ea:	463b      	mov	r3, r7
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 81a4 	beq.w	800574c <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005404:	1d3b      	adds	r3, r7, #4
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	463b      	mov	r3, r7
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005418:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800541c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <USB_EPStartXfer+0xebc>
 8005424:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10d      	bne.n	800544c <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005430:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005434:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 8187 	bne.w	800574c <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800543e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8180 	bne.w	800574c <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800544c:	1d3b      	adds	r3, r7, #4
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	463b      	mov	r3, r7
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005466:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	463b      	mov	r3, r7
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	441a      	add	r2, r3
 8005478:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800547c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800548c:	b29b      	uxth	r3, r3
 800548e:	8013      	strh	r3, [r2, #0]
 8005490:	e15c      	b.n	800574c <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005492:	463b      	mov	r3, r7
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	78db      	ldrb	r3, [r3, #3]
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 8155 	bne.w	8005748 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800549e:	463b      	mov	r3, r7
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	463b      	mov	r3, r7
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d90e      	bls.n	80054cc <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80054ae:	463b      	mov	r3, r7
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80054b8:	463b      	mov	r3, r7
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054c2:	1ad2      	subs	r2, r2, r3
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	619a      	str	r2, [r3, #24]
 80054ca:	e008      	b.n	80054de <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80054cc:	463b      	mov	r3, r7
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80054d6:	463b      	mov	r3, r7
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2200      	movs	r2, #0
 80054dc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80054de:	463b      	mov	r3, r7
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d16f      	bne.n	80055c8 <USB_EPStartXfer+0x1054>
 80054e8:	1d3b      	adds	r3, r7, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054f0:	1d3b      	adds	r3, r7, #4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005500:	4413      	add	r3, r2
 8005502:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005506:	463b      	mov	r3, r7
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	011a      	lsls	r2, r3, #4
 800550e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005512:	4413      	add	r3, r2
 8005514:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005518:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800551c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d116      	bne.n	8005552 <USB_EPStartXfer+0xfde>
 8005524:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005530:	b29a      	uxth	r2, r3
 8005532:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29b      	uxth	r3, r3
 8005540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005548:	b29a      	uxth	r2, r3
 800554a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	e05f      	b.n	8005612 <USB_EPStartXfer+0x109e>
 8005552:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005556:	2b3e      	cmp	r3, #62	; 0x3e
 8005558:	d818      	bhi.n	800558c <USB_EPStartXfer+0x1018>
 800555a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800555e:	085b      	lsrs	r3, r3, #1
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005564:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <USB_EPStartXfer+0x1006>
 8005570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005574:	3301      	adds	r3, #1
 8005576:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557e:	b29b      	uxth	r3, r3
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	b29a      	uxth	r2, r3
 8005584:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005588:	801a      	strh	r2, [r3, #0]
 800558a:	e042      	b.n	8005612 <USB_EPStartXfer+0x109e>
 800558c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <USB_EPStartXfer+0x1038>
 80055a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a6:	3b01      	subs	r3, #1
 80055a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	029b      	lsls	r3, r3, #10
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	e024      	b.n	8005612 <USB_EPStartXfer+0x109e>
 80055c8:	463b      	mov	r3, r7
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d11f      	bne.n	8005612 <USB_EPStartXfer+0x109e>
 80055d2:	1d3b      	adds	r3, r7, #4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055ea:	4413      	add	r3, r2
 80055ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055f0:	463b      	mov	r3, r7
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	011a      	lsls	r2, r3, #4
 80055f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055fc:	4413      	add	r3, r2
 80055fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800560a:	b29a      	uxth	r2, r3
 800560c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800561a:	463b      	mov	r3, r7
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d16f      	bne.n	8005704 <USB_EPStartXfer+0x1190>
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005634:	b29b      	uxth	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800563c:	4413      	add	r3, r2
 800563e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005642:	463b      	mov	r3, r7
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	011a      	lsls	r2, r3, #4
 800564a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800564e:	4413      	add	r3, r2
 8005650:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005654:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005658:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d116      	bne.n	800568e <USB_EPStartXfer+0x111a>
 8005660:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005664:	881b      	ldrh	r3, [r3, #0]
 8005666:	b29b      	uxth	r3, r3
 8005668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800566c:	b29a      	uxth	r2, r3
 800566e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005672:	801a      	strh	r2, [r3, #0]
 8005674:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e05e      	b.n	800574c <USB_EPStartXfer+0x11d8>
 800568e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005692:	2b3e      	cmp	r3, #62	; 0x3e
 8005694:	d818      	bhi.n	80056c8 <USB_EPStartXfer+0x1154>
 8005696:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d004      	beq.n	80056b6 <USB_EPStartXfer+0x1142>
 80056ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b0:	3301      	adds	r3, #1
 80056b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	029b      	lsls	r3, r3, #10
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056c4:	801a      	strh	r2, [r3, #0]
 80056c6:	e041      	b.n	800574c <USB_EPStartXfer+0x11d8>
 80056c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <USB_EPStartXfer+0x1174>
 80056de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e023      	b.n	800574c <USB_EPStartXfer+0x11d8>
 8005704:	463b      	mov	r3, r7
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d11e      	bne.n	800574c <USB_EPStartXfer+0x11d8>
 800570e:	1d3b      	adds	r3, r7, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005716:	b29b      	uxth	r3, r3
 8005718:	461a      	mov	r2, r3
 800571a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800571e:	4413      	add	r3, r2
 8005720:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	011a      	lsls	r2, r3, #4
 800572c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005730:	4413      	add	r3, r2
 8005732:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800573a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800573e:	b29a      	uxth	r2, r3
 8005740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005744:	801a      	strh	r2, [r3, #0]
 8005746:	e001      	b.n	800574c <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e02e      	b.n	80057aa <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800574c:	1d3b      	adds	r3, r7, #4
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	463b      	mov	r3, r7
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800576a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800576e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005772:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005776:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800577a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800577e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005782:	1d3b      	adds	r3, r7, #4
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	441a      	add	r2, r3
 8005790:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800579c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d020      	beq.n	8005808 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057dc:	81bb      	strh	r3, [r7, #12]
 80057de:	89bb      	ldrh	r3, [r7, #12]
 80057e0:	f083 0310 	eor.w	r3, r3, #16
 80057e4:	81bb      	strh	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	441a      	add	r2, r3
 80057f0:	89bb      	ldrh	r3, [r7, #12]
 80057f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005802:	b29b      	uxth	r3, r3
 8005804:	8013      	strh	r3, [r2, #0]
 8005806:	e01f      	b.n	8005848 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	81fb      	strh	r3, [r7, #14]
 8005820:	89fb      	ldrh	r3, [r7, #14]
 8005822:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005826:	81fb      	strh	r3, [r7, #14]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	89fb      	ldrh	r3, [r7, #14]
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	7b1b      	ldrb	r3, [r3, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 809d 	bne.w	80059a2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	785b      	ldrb	r3, [r3, #1]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d04c      	beq.n	800590a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	823b      	strh	r3, [r7, #16]
 800587e:	8a3b      	ldrh	r3, [r7, #16]
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01b      	beq.n	80058c0 <USB_EPClearStall+0x6c>
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800589a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589e:	81fb      	strh	r3, [r7, #14]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	89fb      	ldrh	r3, [r7, #14]
 80058ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058bc:	b29b      	uxth	r3, r3
 80058be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	78db      	ldrb	r3, [r3, #3]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d06c      	beq.n	80059a2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058de:	81bb      	strh	r3, [r7, #12]
 80058e0:	89bb      	ldrh	r3, [r7, #12]
 80058e2:	f083 0320 	eor.w	r3, r3, #32
 80058e6:	81bb      	strh	r3, [r7, #12]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	441a      	add	r2, r3
 80058f2:	89bb      	ldrh	r3, [r7, #12]
 80058f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005904:	b29b      	uxth	r3, r3
 8005906:	8013      	strh	r3, [r2, #0]
 8005908:	e04b      	b.n	80059a2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	82fb      	strh	r3, [r7, #22]
 8005918:	8afb      	ldrh	r3, [r7, #22]
 800591a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01b      	beq.n	800595a <USB_EPClearStall+0x106>
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005938:	82bb      	strh	r3, [r7, #20]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	441a      	add	r2, r3
 8005944:	8abb      	ldrh	r3, [r7, #20]
 8005946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800594a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800594e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	b29b      	uxth	r3, r3
 8005958:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	827b      	strh	r3, [r7, #18]
 8005972:	8a7b      	ldrh	r3, [r7, #18]
 8005974:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005978:	827b      	strh	r3, [r7, #18]
 800597a:	8a7b      	ldrh	r3, [r7, #18]
 800597c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005980:	827b      	strh	r3, [r7, #18]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	8a7b      	ldrh	r3, [r7, #18]
 800598e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr

080059ae <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	460b      	mov	r3, r1
 80059b8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2280      	movs	r2, #128	; 0x80
 80059c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr

080059e8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr

08005a30 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b08d      	sub	sp, #52	; 0x34
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	460b      	mov	r3, r1
 8005a40:	80fb      	strh	r3, [r7, #6]
 8005a42:	4613      	mov	r3, r2
 8005a44:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a46:	88bb      	ldrh	r3, [r7, #4]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	005a      	lsls	r2, r3, #1
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a62:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a68:	e01e      	b.n	8005aa8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	3301      	adds	r3, #1
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	021b      	lsls	r3, r3, #8
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	461a      	mov	r2, r3
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	3302      	adds	r3, #2
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	3302      	adds	r3, #2
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1dd      	bne.n	8005a6a <USB_WritePMA+0x3a>
  }
}
 8005aae:	bf00      	nop
 8005ab0:	3734      	adds	r7, #52	; 0x34
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bc80      	pop	{r7}
 8005ab6:	4770      	bx	lr

08005ab8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b08b      	sub	sp, #44	; 0x2c
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	80fb      	strh	r3, [r7, #6]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ace:	88bb      	ldrh	r3, [r7, #4]
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	005a      	lsls	r2, r3, #1
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
 8005af0:	e01b      	b.n	8005b2a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	3302      	adds	r3, #2
 8005afe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	0a1b      	lsrs	r3, r3, #8
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	3302      	adds	r3, #2
 8005b22:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	3b01      	subs	r3, #1
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e0      	bne.n	8005af2 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b30:	88bb      	ldrh	r3, [r7, #4]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	701a      	strb	r2, [r3, #0]
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	372c      	adds	r7, #44	; 0x2c
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bc80      	pop	{r7}
 8005b54:	4770      	bx	lr

08005b56 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005b62:	2304      	movs	r3, #4
 8005b64:	2203      	movs	r2, #3
 8005b66:	2181      	movs	r1, #129	; 0x81
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 fc54 	bl	8007416 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005b74:	2010      	movs	r0, #16
 8005b76:	f001 fd63 	bl	8007640 <USBD_static_malloc>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e005      	b.n	8005b9c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b96:	2200      	movs	r2, #0
 8005b98:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8005bb0:	2181      	movs	r1, #129	; 0x81
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 fc55 	bl	8007462 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 fd42 	bl	8007658 <USBD_static_free>
    pdev->pClassData = NULL;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
	...

08005be8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d045      	beq.n	8005ca2 <USBD_HID_Setup+0xba>
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	f040 80d3 	bne.w	8005dc2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	3b02      	subs	r3, #2
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	d835      	bhi.n	8005c92 <USBD_HID_Setup+0xaa>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <USBD_HID_Setup+0x44>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c83 	.word	0x08005c83
 8005c30:	08005c63 	.word	0x08005c63
 8005c34:	08005c93 	.word	0x08005c93
 8005c38:	08005c93 	.word	0x08005c93
 8005c3c:	08005c93 	.word	0x08005c93
 8005c40:	08005c93 	.word	0x08005c93
 8005c44:	08005c93 	.word	0x08005c93
 8005c48:	08005c93 	.word	0x08005c93
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c55 	.word	0x08005c55
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	885b      	ldrh	r3, [r3, #2]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	601a      	str	r2, [r3, #0]
          break;
 8005c60:	e01e      	b.n	8005ca0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	2201      	movs	r2, #1
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f001 f915 	bl	8006e98 <USBD_CtlSendData>
          break;
 8005c6e:	e017      	b.n	8005ca0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	885b      	ldrh	r3, [r3, #2]
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	605a      	str	r2, [r3, #4]
          break;
 8005c80:	e00e      	b.n	8005ca0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	3304      	adds	r3, #4
 8005c86:	2201      	movs	r2, #1
 8005c88:	4619      	mov	r1, r3
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 f904 	bl	8006e98 <USBD_CtlSendData>
          break;
 8005c90:	e006      	b.n	8005ca0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 f895 	bl	8006dc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c9e:	bf00      	nop
      }
      break;
 8005ca0:	e096      	b.n	8005dd0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b0b      	cmp	r3, #11
 8005ca8:	f200 8083 	bhi.w	8005db2 <USBD_HID_Setup+0x1ca>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBD_HID_Setup+0xcc>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005db3 	.word	0x08005db3
 8005cbc:	08005db3 	.word	0x08005db3
 8005cc0:	08005db3 	.word	0x08005db3
 8005cc4:	08005db3 	.word	0x08005db3
 8005cc8:	08005db3 	.word	0x08005db3
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005db3 	.word	0x08005db3
 8005cd4:	08005db3 	.word	0x08005db3
 8005cd8:	08005db3 	.word	0x08005db3
 8005cdc:	08005d65 	.word	0x08005d65
 8005ce0:	08005d8d 	.word	0x08005d8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d107      	bne.n	8005cfe <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005cee:	f107 030e 	add.w	r3, r7, #14
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 f8ce 	bl	8006e98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cfc:	e060      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 f85f 	bl	8006dc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d06:	2302      	movs	r3, #2
 8005d08:	75fb      	strb	r3, [r7, #23]
          break;
 8005d0a:	e059      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	885b      	ldrh	r3, [r3, #2]
 8005d10:	0a1b      	lsrs	r3, r3, #8
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b22      	cmp	r3, #34	; 0x22
 8005d16:	d108      	bne.n	8005d2a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	88db      	ldrh	r3, [r3, #6]
 8005d1c:	2b4a      	cmp	r3, #74	; 0x4a
 8005d1e:	bf28      	it	cs
 8005d20:	234a      	movcs	r3, #74	; 0x4a
 8005d22:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8005d24:	4b2d      	ldr	r3, [pc, #180]	; (8005ddc <USBD_HID_Setup+0x1f4>)
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e015      	b.n	8005d56 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	885b      	ldrh	r3, [r3, #2]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b21      	cmp	r3, #33	; 0x21
 8005d34:	d108      	bne.n	8005d48 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8005d36:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <USBD_HID_Setup+0x1f8>)
 8005d38:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	88db      	ldrh	r3, [r3, #6]
 8005d3e:	2b09      	cmp	r3, #9
 8005d40:	bf28      	it	cs
 8005d42:	2309      	movcs	r3, #9
 8005d44:	83fb      	strh	r3, [r7, #30]
 8005d46:	e006      	b.n	8005d56 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 f83a 	bl	8006dc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d50:	2302      	movs	r3, #2
 8005d52:	75fb      	strb	r3, [r7, #23]
            break;
 8005d54:	e034      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005d56:	8bfb      	ldrh	r3, [r7, #30]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	69b9      	ldr	r1, [r7, #24]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 f89b 	bl	8006e98 <USBD_CtlSendData>
          break;
 8005d62:	e02d      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d107      	bne.n	8005d7e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3308      	adds	r3, #8
 8005d72:	2201      	movs	r2, #1
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 f88e 	bl	8006e98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d7c:	e020      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f001 f81f 	bl	8006dc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d86:	2302      	movs	r3, #2
 8005d88:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8a:	e019      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d106      	bne.n	8005da4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	885b      	ldrh	r3, [r3, #2]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005da2:	e00d      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 f80c 	bl	8006dc4 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dac:	2302      	movs	r3, #2
 8005dae:	75fb      	strb	r3, [r7, #23]
          break;
 8005db0:	e006      	b.n	8005dc0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 f805 	bl	8006dc4 <USBD_CtlError>
          ret = USBD_FAIL;
 8005dba:	2302      	movs	r3, #2
 8005dbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005dbe:	bf00      	nop
      }
      break;
 8005dc0:	e006      	b.n	8005dd0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fffd 	bl	8006dc4 <USBD_CtlError>
      ret = USBD_FAIL;
 8005dca:	2302      	movs	r3, #2
 8005dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005dce:	bf00      	nop
  }

  return ret;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200000c8 	.word	0x200000c8
 8005de0:	200000b0 	.word	0x200000b0

08005de4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2222      	movs	r2, #34	; 0x22
 8005df0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005df2:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20000044 	.word	0x20000044

08005e04 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2222      	movs	r2, #34	; 0x22
 8005e10:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005e12:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000068 	.word	0x20000068

08005e24 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2222      	movs	r2, #34	; 0x22
 8005e30:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005e32:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bc80      	pop	{r7}
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	2000008c 	.word	0x2000008c

08005e44 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	2200      	movs	r2, #0
 8005e58:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
	...

08005e68 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	220a      	movs	r2, #10
 8005e74:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	200000bc 	.word	0x200000bc

08005e88 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e01a      	b.n	8005ed6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	79fa      	ldrb	r2, [r7, #7]
 8005ecc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f001 fa3e 	bl	8007350 <USBD_LL_Init>

  return USBD_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d006      	beq.n	8005f00 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
 8005efe:	e001      	b.n	8005f04 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005f00:	2302      	movs	r3, #2
 8005f02:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr

08005f10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fa61 	bl	80073e0 <USBD_LL_Start>

  return USBD_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00c      	beq.n	8005f70 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	78fa      	ldrb	r2, [r7, #3]
 8005f60:	4611      	mov	r1, r2
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	78fa      	ldrb	r2, [r7, #3]
 8005f90:	4611      	mov	r1, r2
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005fb0:	6839      	ldr	r1, [r7, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 feca 	bl	8006d4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fd4:	f003 031f 	and.w	r3, r3, #31
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d00c      	beq.n	8005ff6 <USBD_LL_SetupStage+0x56>
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d302      	bcc.n	8005fe6 <USBD_LL_SetupStage+0x46>
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d010      	beq.n	8006006 <USBD_LL_SetupStage+0x66>
 8005fe4:	e017      	b.n	8006016 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f9ca 	bl	8006388 <USBD_StdDevReq>
      break;
 8005ff4:	e01a      	b.n	800602c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fa2c 	bl	800645c <USBD_StdItfReq>
      break;
 8006004:	e012      	b.n	800602c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa6a 	bl	80064e8 <USBD_StdEPReq>
      break;
 8006014:	e00a      	b.n	800602c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800601c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006020:	b2db      	uxtb	r3, r3
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fa3b 	bl	80074a0 <USBD_LL_StallEP>
      break;
 800602a:	bf00      	nop
  }

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	460b      	mov	r3, r1
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d14b      	bne.n	80060e2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006050:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006058:	2b03      	cmp	r3, #3
 800605a:	d134      	bne.n	80060c6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	429a      	cmp	r2, r3
 8006066:	d919      	bls.n	800609c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	1ad2      	subs	r2, r2, r3
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800607e:	429a      	cmp	r2, r3
 8006080:	d203      	bcs.n	800608a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006086:	b29b      	uxth	r3, r3
 8006088:	e002      	b.n	8006090 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 ff2d 	bl	8006ef4 <USBD_CtlContinueRx>
 800609a:	e038      	b.n	800610e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d105      	bne.n	80060be <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 ff2a 	bl	8006f18 <USBD_CtlSendStatus>
 80060c4:	e023      	b.n	800610e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060cc:	2b05      	cmp	r3, #5
 80060ce:	d11e      	bne.n	800610e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80060d8:	2100      	movs	r1, #0
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f001 f9e0 	bl	80074a0 <USBD_LL_StallEP>
 80060e0:	e015      	b.n	800610e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00d      	beq.n	800610a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d108      	bne.n	800610a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	7afa      	ldrb	r2, [r7, #11]
 8006102:	4611      	mov	r1, r2
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	4798      	blx	r3
 8006108:	e001      	b.n	800610e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800610a:	2302      	movs	r3, #2
 800610c:	e000      	b.n	8006110 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	460b      	mov	r3, r1
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d17f      	bne.n	800622c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3314      	adds	r3, #20
 8006130:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006138:	2b02      	cmp	r3, #2
 800613a:	d15c      	bne.n	80061f6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	429a      	cmp	r2, r3
 8006146:	d915      	bls.n	8006174 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	1ad2      	subs	r2, r2, r3
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	b29b      	uxth	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 feb5 	bl	8006ed0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006166:	2300      	movs	r3, #0
 8006168:	2200      	movs	r2, #0
 800616a:	2100      	movs	r1, #0
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f001 fa43 	bl	80075f8 <USBD_LL_PrepareReceive>
 8006172:	e04e      	b.n	8006212 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	6912      	ldr	r2, [r2, #16]
 800617c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006180:	fb02 f201 	mul.w	r2, r2, r1
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d11c      	bne.n	80061c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006192:	429a      	cmp	r2, r3
 8006194:	d316      	bcc.n	80061c4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d20f      	bcs.n	80061c4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061a4:	2200      	movs	r2, #0
 80061a6:	2100      	movs	r1, #0
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fe91 	bl	8006ed0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061b6:	2300      	movs	r3, #0
 80061b8:	2200      	movs	r2, #0
 80061ba:	2100      	movs	r1, #0
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f001 fa1b 	bl	80075f8 <USBD_LL_PrepareReceive>
 80061c2:	e026      	b.n	8006212 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d105      	bne.n	80061e6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80061e6:	2180      	movs	r1, #128	; 0x80
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f001 f959 	bl	80074a0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fea5 	bl	8006f3e <USBD_CtlReceiveStatus>
 80061f4:	e00d      	b.n	8006212 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061fc:	2b04      	cmp	r3, #4
 80061fe:	d004      	beq.n	800620a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f001 f947 	bl	80074a0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006218:	2b01      	cmp	r3, #1
 800621a:	d11d      	bne.n	8006258 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7ff fe83 	bl	8005f28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800622a:	e015      	b.n	8006258 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00d      	beq.n	8006254 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800623e:	2b03      	cmp	r3, #3
 8006240:	d108      	bne.n	8006254 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	7afa      	ldrb	r2, [r7, #11]
 800624c:	4611      	mov	r1, r2
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	4798      	blx	r3
 8006252:	e001      	b.n	8006258 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006254:	2302      	movs	r3, #2
 8006256:	e000      	b.n	800625a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800626a:	2340      	movs	r3, #64	; 0x40
 800626c:	2200      	movs	r2, #0
 800626e:	2100      	movs	r1, #0
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f001 f8d0 	bl	8007416 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2240      	movs	r2, #64	; 0x40
 8006282:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006286:	2340      	movs	r3, #64	; 0x40
 8006288:	2200      	movs	r2, #0
 800628a:	2180      	movs	r1, #128	; 0x80
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f8c2 	bl	8007416 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2240      	movs	r2, #64	; 0x40
 800629c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d009      	beq.n	80062da <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6852      	ldr	r2, [r2, #4]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	4611      	mov	r1, r2
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
  }

  return USBD_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2204      	movs	r2, #4
 800631a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006338:	2b04      	cmp	r3, #4
 800633a:	d105      	bne.n	8006348 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	bc80      	pop	{r7}
 8006352:	4770      	bx	lr

08006354 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006362:	2b03      	cmp	r3, #3
 8006364:	d10b      	bne.n	800637e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d005      	beq.n	800637e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d004      	beq.n	80063ac <USBD_StdDevReq+0x24>
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d002      	beq.n	80063ac <USBD_StdDevReq+0x24>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <USBD_StdDevReq+0x34>
 80063aa:	e04c      	b.n	8006446 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	6839      	ldr	r1, [r7, #0]
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
      break;
 80063ba:	e049      	b.n	8006450 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b09      	cmp	r3, #9
 80063c2:	d83a      	bhi.n	800643a <USBD_StdDevReq+0xb2>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <USBD_StdDevReq+0x44>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	0800641d 	.word	0x0800641d
 80063d0:	08006431 	.word	0x08006431
 80063d4:	0800643b 	.word	0x0800643b
 80063d8:	08006427 	.word	0x08006427
 80063dc:	0800643b 	.word	0x0800643b
 80063e0:	080063ff 	.word	0x080063ff
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	0800643b 	.word	0x0800643b
 80063ec:	08006413 	.word	0x08006413
 80063f0:	08006409 	.word	0x08006409
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80063f4:	6839      	ldr	r1, [r7, #0]
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f9d4 	bl	80067a4 <USBD_GetDescriptor>
          break;
 80063fc:	e022      	b.n	8006444 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fb37 	bl	8006a74 <USBD_SetAddress>
          break;
 8006406:	e01d      	b.n	8006444 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fb74 	bl	8006af8 <USBD_SetConfig>
          break;
 8006410:	e018      	b.n	8006444 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fbfd 	bl	8006c14 <USBD_GetConfig>
          break;
 800641a:	e013      	b.n	8006444 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fc2c 	bl	8006c7c <USBD_GetStatus>
          break;
 8006424:	e00e      	b.n	8006444 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fc5a 	bl	8006ce2 <USBD_SetFeature>
          break;
 800642e:	e009      	b.n	8006444 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fc69 	bl	8006d0a <USBD_ClrFeature>
          break;
 8006438:	e004      	b.n	8006444 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fcc1 	bl	8006dc4 <USBD_CtlError>
          break;
 8006442:	bf00      	nop
      }
      break;
 8006444:	e004      	b.n	8006450 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fcbb 	bl	8006dc4 <USBD_CtlError>
      break;
 800644e:	bf00      	nop
  }

  return ret;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop

0800645c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006472:	2b20      	cmp	r3, #32
 8006474:	d003      	beq.n	800647e <USBD_StdItfReq+0x22>
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d001      	beq.n	800647e <USBD_StdItfReq+0x22>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d12a      	bne.n	80064d4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006484:	3b01      	subs	r3, #1
 8006486:	2b02      	cmp	r3, #2
 8006488:	d81d      	bhi.n	80064c6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	889b      	ldrh	r3, [r3, #4]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	d813      	bhi.n	80064bc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	88db      	ldrh	r3, [r3, #6]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d110      	bne.n	80064d0 <USBD_StdItfReq+0x74>
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fd2f 	bl	8006f18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064ba:	e009      	b.n	80064d0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fc80 	bl	8006dc4 <USBD_CtlError>
          break;
 80064c4:	e004      	b.n	80064d0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fc7b 	bl	8006dc4 <USBD_CtlError>
          break;
 80064ce:	e000      	b.n	80064d2 <USBD_StdItfReq+0x76>
          break;
 80064d0:	bf00      	nop
      }
      break;
 80064d2:	e004      	b.n	80064de <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fc74 	bl	8006dc4 <USBD_CtlError>
      break;
 80064dc:	bf00      	nop
  }

  return USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	889b      	ldrh	r3, [r3, #4]
 80064fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006504:	2b20      	cmp	r3, #32
 8006506:	d004      	beq.n	8006512 <USBD_StdEPReq+0x2a>
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d002      	beq.n	8006512 <USBD_StdEPReq+0x2a>
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <USBD_StdEPReq+0x3a>
 8006510:	e13d      	b.n	800678e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
      break;
 8006520:	e13a      	b.n	8006798 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800652a:	2b20      	cmp	r3, #32
 800652c:	d10a      	bne.n	8006544 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	e12a      	b.n	800679a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	785b      	ldrb	r3, [r3, #1]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d03e      	beq.n	80065ca <USBD_StdEPReq+0xe2>
 800654c:	2b03      	cmp	r3, #3
 800654e:	d002      	beq.n	8006556 <USBD_StdEPReq+0x6e>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d070      	beq.n	8006636 <USBD_StdEPReq+0x14e>
 8006554:	e115      	b.n	8006782 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655c:	2b02      	cmp	r3, #2
 800655e:	d002      	beq.n	8006566 <USBD_StdEPReq+0x7e>
 8006560:	2b03      	cmp	r3, #3
 8006562:	d015      	beq.n	8006590 <USBD_StdEPReq+0xa8>
 8006564:	e02b      	b.n	80065be <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00c      	beq.n	8006586 <USBD_StdEPReq+0x9e>
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b80      	cmp	r3, #128	; 0x80
 8006570:	d009      	beq.n	8006586 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 ff92 	bl	80074a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800657c:	2180      	movs	r1, #128	; 0x80
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 ff8e 	bl	80074a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006584:	e020      	b.n	80065c8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fc1b 	bl	8006dc4 <USBD_CtlError>
              break;
 800658e:	e01b      	b.n	80065c8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	885b      	ldrh	r3, [r3, #2]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10e      	bne.n	80065b6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <USBD_StdEPReq+0xce>
 800659e:	7bbb      	ldrb	r3, [r7, #14]
 80065a0:	2b80      	cmp	r3, #128	; 0x80
 80065a2:	d008      	beq.n	80065b6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	88db      	ldrh	r3, [r3, #6]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 ff75 	bl	80074a0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fcae 	bl	8006f18 <USBD_CtlSendStatus>

              break;
 80065bc:	e004      	b.n	80065c8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 fbff 	bl	8006dc4 <USBD_CtlError>
              break;
 80065c6:	bf00      	nop
          }
          break;
 80065c8:	e0e0      	b.n	800678c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d002      	beq.n	80065da <USBD_StdEPReq+0xf2>
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d015      	beq.n	8006604 <USBD_StdEPReq+0x11c>
 80065d8:	e026      	b.n	8006628 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00c      	beq.n	80065fa <USBD_StdEPReq+0x112>
 80065e0:	7bbb      	ldrb	r3, [r7, #14]
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d009      	beq.n	80065fa <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 ff58 	bl	80074a0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065f0:	2180      	movs	r1, #128	; 0x80
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 ff54 	bl	80074a0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065f8:	e01c      	b.n	8006634 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80065fa:	6839      	ldr	r1, [r7, #0]
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fbe1 	bl	8006dc4 <USBD_CtlError>
              break;
 8006602:	e017      	b.n	8006634 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	885b      	ldrh	r3, [r3, #2]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d112      	bne.n	8006632 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 ff5f 	bl	80074de <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fc79 	bl	8006f18 <USBD_CtlSendStatus>
              }
              break;
 8006626:	e004      	b.n	8006632 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fbca 	bl	8006dc4 <USBD_CtlError>
              break;
 8006630:	e000      	b.n	8006634 <USBD_StdEPReq+0x14c>
              break;
 8006632:	bf00      	nop
          }
          break;
 8006634:	e0aa      	b.n	800678c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800663c:	2b02      	cmp	r3, #2
 800663e:	d002      	beq.n	8006646 <USBD_StdEPReq+0x15e>
 8006640:	2b03      	cmp	r3, #3
 8006642:	d032      	beq.n	80066aa <USBD_StdEPReq+0x1c2>
 8006644:	e097      	b.n	8006776 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <USBD_StdEPReq+0x174>
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d004      	beq.n	800665c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fbb5 	bl	8006dc4 <USBD_CtlError>
                break;
 800665a:	e091      	b.n	8006780 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800665c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	da0b      	bge.n	800667c <USBD_StdEPReq+0x194>
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	3310      	adds	r3, #16
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	3304      	adds	r3, #4
 800667a:	e00b      	b.n	8006694 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006682:	4613      	mov	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	3304      	adds	r3, #4
 8006694:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2202      	movs	r2, #2
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fbf8 	bl	8006e98 <USBD_CtlSendData>
              break;
 80066a8:	e06a      	b.n	8006780 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	da11      	bge.n	80066d6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	3318      	adds	r3, #24
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d117      	bne.n	80066fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fb78 	bl	8006dc4 <USBD_CtlError>
                  break;
 80066d4:	e054      	b.n	8006780 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	f003 020f 	and.w	r2, r3, #15
 80066dc:	6879      	ldr	r1, [r7, #4]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb65 	bl	8006dc4 <USBD_CtlError>
                  break;
 80066fa:	e041      	b.n	8006780 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	da0b      	bge.n	800671c <USBD_StdEPReq+0x234>
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	3310      	adds	r3, #16
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4413      	add	r3, r2
 8006718:	3304      	adds	r3, #4
 800671a:	e00b      	b.n	8006734 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800671c:	7bbb      	ldrb	r3, [r7, #14]
 800671e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	4413      	add	r3, r2
 8006732:	3304      	adds	r3, #4
 8006734:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <USBD_StdEPReq+0x25a>
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d103      	bne.n	800674a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e00e      	b.n	8006768 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800674a:	7bbb      	ldrb	r3, [r7, #14]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fee4 	bl	800751c <USBD_LL_IsStallEP>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2201      	movs	r2, #1
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e002      	b.n	8006768 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2202      	movs	r2, #2
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb92 	bl	8006e98 <USBD_CtlSendData>
              break;
 8006774:	e004      	b.n	8006780 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fb23 	bl	8006dc4 <USBD_CtlError>
              break;
 800677e:	bf00      	nop
          }
          break;
 8006780:	e004      	b.n	800678c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb1d 	bl	8006dc4 <USBD_CtlError>
          break;
 800678a:	bf00      	nop
      }
      break;
 800678c:	e004      	b.n	8006798 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fb17 	bl	8006dc4 <USBD_CtlError>
      break;
 8006796:	bf00      	nop
  }

  return ret;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	885b      	ldrh	r3, [r3, #2]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	2b06      	cmp	r3, #6
 80067c6:	f200 8128 	bhi.w	8006a1a <USBD_GetDescriptor+0x276>
 80067ca:	a201      	add	r2, pc, #4	; (adr r2, 80067d0 <USBD_GetDescriptor+0x2c>)
 80067cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d0:	080067ed 	.word	0x080067ed
 80067d4:	08006805 	.word	0x08006805
 80067d8:	08006845 	.word	0x08006845
 80067dc:	08006a1b 	.word	0x08006a1b
 80067e0:	08006a1b 	.word	0x08006a1b
 80067e4:	080069bb 	.word	0x080069bb
 80067e8:	080069e7 	.word	0x080069e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	7c12      	ldrb	r2, [r2, #16]
 80067f8:	f107 0108 	add.w	r1, r7, #8
 80067fc:	4610      	mov	r0, r2
 80067fe:	4798      	blx	r3
 8006800:	60f8      	str	r0, [r7, #12]
      break;
 8006802:	e112      	b.n	8006a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	7c1b      	ldrb	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10d      	bne.n	8006828 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	f107 0208 	add.w	r2, r7, #8
 8006818:	4610      	mov	r0, r2
 800681a:	4798      	blx	r3
 800681c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	2202      	movs	r2, #2
 8006824:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006826:	e100      	b.n	8006a2a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	f107 0208 	add.w	r2, r7, #8
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
 8006838:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	2202      	movs	r2, #2
 8006840:	701a      	strb	r2, [r3, #0]
      break;
 8006842:	e0f2      	b.n	8006a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	885b      	ldrh	r3, [r3, #2]
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b05      	cmp	r3, #5
 800684c:	f200 80ac 	bhi.w	80069a8 <USBD_GetDescriptor+0x204>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <USBD_GetDescriptor+0xb4>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	08006871 	.word	0x08006871
 800685c:	080068a5 	.word	0x080068a5
 8006860:	080068d9 	.word	0x080068d9
 8006864:	0800690d 	.word	0x0800690d
 8006868:	08006941 	.word	0x08006941
 800686c:	08006975 	.word	0x08006975
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	7c12      	ldrb	r2, [r2, #16]
 8006888:	f107 0108 	add.w	r1, r7, #8
 800688c:	4610      	mov	r0, r2
 800688e:	4798      	blx	r3
 8006890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006892:	e091      	b.n	80069b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fa94 	bl	8006dc4 <USBD_CtlError>
            err++;
 800689c:	7afb      	ldrb	r3, [r7, #11]
 800689e:	3301      	adds	r3, #1
 80068a0:	72fb      	strb	r3, [r7, #11]
          break;
 80068a2:	e089      	b.n	80069b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00b      	beq.n	80068c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	7c12      	ldrb	r2, [r2, #16]
 80068bc:	f107 0108 	add.w	r1, r7, #8
 80068c0:	4610      	mov	r0, r2
 80068c2:	4798      	blx	r3
 80068c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068c6:	e077      	b.n	80069b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa7a 	bl	8006dc4 <USBD_CtlError>
            err++;
 80068d0:	7afb      	ldrb	r3, [r7, #11]
 80068d2:	3301      	adds	r3, #1
 80068d4:	72fb      	strb	r3, [r7, #11]
          break;
 80068d6:	e06f      	b.n	80069b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	7c12      	ldrb	r2, [r2, #16]
 80068f0:	f107 0108 	add.w	r1, r7, #8
 80068f4:	4610      	mov	r0, r2
 80068f6:	4798      	blx	r3
 80068f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068fa:	e05d      	b.n	80069b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fa60 	bl	8006dc4 <USBD_CtlError>
            err++;
 8006904:	7afb      	ldrb	r3, [r7, #11]
 8006906:	3301      	adds	r3, #1
 8006908:	72fb      	strb	r3, [r7, #11]
          break;
 800690a:	e055      	b.n	80069b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	7c12      	ldrb	r2, [r2, #16]
 8006924:	f107 0108 	add.w	r1, r7, #8
 8006928:	4610      	mov	r0, r2
 800692a:	4798      	blx	r3
 800692c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800692e:	e043      	b.n	80069b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fa46 	bl	8006dc4 <USBD_CtlError>
            err++;
 8006938:	7afb      	ldrb	r3, [r7, #11]
 800693a:	3301      	adds	r3, #1
 800693c:	72fb      	strb	r3, [r7, #11]
          break;
 800693e:	e03b      	b.n	80069b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00b      	beq.n	8006964 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	7c12      	ldrb	r2, [r2, #16]
 8006958:	f107 0108 	add.w	r1, r7, #8
 800695c:	4610      	mov	r0, r2
 800695e:	4798      	blx	r3
 8006960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006962:	e029      	b.n	80069b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa2c 	bl	8006dc4 <USBD_CtlError>
            err++;
 800696c:	7afb      	ldrb	r3, [r7, #11]
 800696e:	3301      	adds	r3, #1
 8006970:	72fb      	strb	r3, [r7, #11]
          break;
 8006972:	e021      	b.n	80069b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	7c12      	ldrb	r2, [r2, #16]
 800698c:	f107 0108 	add.w	r1, r7, #8
 8006990:	4610      	mov	r0, r2
 8006992:	4798      	blx	r3
 8006994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006996:	e00f      	b.n	80069b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa12 	bl	8006dc4 <USBD_CtlError>
            err++;
 80069a0:	7afb      	ldrb	r3, [r7, #11]
 80069a2:	3301      	adds	r3, #1
 80069a4:	72fb      	strb	r3, [r7, #11]
          break;
 80069a6:	e007      	b.n	80069b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa0a 	bl	8006dc4 <USBD_CtlError>
          err++;
 80069b0:	7afb      	ldrb	r3, [r7, #11]
 80069b2:	3301      	adds	r3, #1
 80069b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80069b6:	e038      	b.n	8006a2a <USBD_GetDescriptor+0x286>
 80069b8:	e037      	b.n	8006a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	7c1b      	ldrb	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ca:	f107 0208 	add.w	r2, r7, #8
 80069ce:	4610      	mov	r0, r2
 80069d0:	4798      	blx	r3
 80069d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069d4:	e029      	b.n	8006a2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f9f3 	bl	8006dc4 <USBD_CtlError>
        err++;
 80069de:	7afb      	ldrb	r3, [r7, #11]
 80069e0:	3301      	adds	r3, #1
 80069e2:	72fb      	strb	r3, [r7, #11]
      break;
 80069e4:	e021      	b.n	8006a2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7c1b      	ldrb	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10d      	bne.n	8006a0a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f6:	f107 0208 	add.w	r2, r7, #8
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
 80069fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3301      	adds	r3, #1
 8006a04:	2207      	movs	r2, #7
 8006a06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a08:	e00f      	b.n	8006a2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f9d9 	bl	8006dc4 <USBD_CtlError>
        err++;
 8006a12:	7afb      	ldrb	r3, [r7, #11]
 8006a14:	3301      	adds	r3, #1
 8006a16:	72fb      	strb	r3, [r7, #11]
      break;
 8006a18:	e007      	b.n	8006a2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f9d1 	bl	8006dc4 <USBD_CtlError>
      err++;
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	3301      	adds	r3, #1
 8006a26:	72fb      	strb	r3, [r7, #11]
      break;
 8006a28:	bf00      	nop
  }

  if (err != 0U)
 8006a2a:	7afb      	ldrb	r3, [r7, #11]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d11c      	bne.n	8006a6a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006a30:	893b      	ldrh	r3, [r7, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d011      	beq.n	8006a5a <USBD_GetDescriptor+0x2b6>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	88db      	ldrh	r3, [r3, #6]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00d      	beq.n	8006a5a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	88da      	ldrh	r2, [r3, #6]
 8006a42:	893b      	ldrh	r3, [r7, #8]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	bf28      	it	cs
 8006a48:	4613      	movcs	r3, r2
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a4e:	893b      	ldrh	r3, [r7, #8]
 8006a50:	461a      	mov	r2, r3
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fa1f 	bl	8006e98 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	88db      	ldrh	r3, [r3, #6]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d104      	bne.n	8006a6c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa58 	bl	8006f18 <USBD_CtlSendStatus>
 8006a68:	e000      	b.n	8006a6c <USBD_GetDescriptor+0x2c8>
    return;
 8006a6a:	bf00      	nop
    }
  }
}
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop

08006a74 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	889b      	ldrh	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d130      	bne.n	8006ae8 <USBD_SetAddress+0x74>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	88db      	ldrh	r3, [r3, #6]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d12c      	bne.n	8006ae8 <USBD_SetAddress+0x74>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	885b      	ldrh	r3, [r3, #2]
 8006a92:	2b7f      	cmp	r3, #127	; 0x7f
 8006a94:	d828      	bhi.n	8006ae8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	885b      	ldrh	r3, [r3, #2]
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d104      	bne.n	8006ab6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f988 	bl	8006dc4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab4:	e01c      	b.n	8006af0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	7bfa      	ldrb	r2, [r7, #15]
 8006aba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006abe:	7bfb      	ldrb	r3, [r7, #15]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fd56 	bl	8007574 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fa25 	bl	8006f18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006adc:	e008      	b.n	8006af0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae6:	e003      	b.n	8006af0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f96a 	bl	8006dc4 <USBD_CtlError>
  }
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	4b41      	ldr	r3, [pc, #260]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b0c:	4b40      	ldr	r3, [pc, #256]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d904      	bls.n	8006b1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f954 	bl	8006dc4 <USBD_CtlError>
 8006b1c:	e075      	b.n	8006c0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d002      	beq.n	8006b2e <USBD_SetConfig+0x36>
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d023      	beq.n	8006b74 <USBD_SetConfig+0x7c>
 8006b2c:	e062      	b.n	8006bf4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006b2e:	4b38      	ldr	r3, [pc, #224]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01a      	beq.n	8006b6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006b36:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2203      	movs	r2, #3
 8006b44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b48:	4b31      	ldr	r3, [pc, #196]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff f9f4 	bl	8005f3c <USBD_SetClassConfig>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d104      	bne.n	8006b64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f931 	bl	8006dc4 <USBD_CtlError>
            return;
 8006b62:	e052      	b.n	8006c0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f9d7 	bl	8006f18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006b6a:	e04e      	b.n	8006c0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f9d3 	bl	8006f18 <USBD_CtlSendStatus>
        break;
 8006b72:	e04a      	b.n	8006c0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006b74:	4b26      	ldr	r3, [pc, #152]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d112      	bne.n	8006ba2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006b84:	4b22      	ldr	r3, [pc, #136]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006b8e:	4b20      	ldr	r3, [pc, #128]	; (8006c10 <USBD_SetConfig+0x118>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff f9f0 	bl	8005f7a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9bc 	bl	8006f18 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006ba0:	e033      	b.n	8006c0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006ba2:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <USBD_SetConfig+0x118>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d01d      	beq.n	8006bec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff f9de 	bl	8005f7a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006bbe:	4b14      	ldr	r3, [pc, #80]	; (8006c10 <USBD_SetConfig+0x118>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bc8:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <USBD_SetConfig+0x118>)
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff f9b4 	bl	8005f3c <USBD_SetClassConfig>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d104      	bne.n	8006be4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f8f1 	bl	8006dc4 <USBD_CtlError>
            return;
 8006be2:	e012      	b.n	8006c0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f997 	bl	8006f18 <USBD_CtlSendStatus>
        break;
 8006bea:	e00e      	b.n	8006c0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f993 	bl	8006f18 <USBD_CtlSendStatus>
        break;
 8006bf2:	e00a      	b.n	8006c0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8e4 	bl	8006dc4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006bfc:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <USBD_SetConfig+0x118>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f9b9 	bl	8005f7a <USBD_ClrClassConfig>
        break;
 8006c08:	bf00      	nop
    }
  }
}
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000180 	.word	0x20000180

08006c14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	88db      	ldrh	r3, [r3, #6]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d004      	beq.n	8006c30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8cb 	bl	8006dc4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c2e:	e021      	b.n	8006c74 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	db17      	blt.n	8006c6a <USBD_GetConfig+0x56>
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	dd02      	ble.n	8006c44 <USBD_GetConfig+0x30>
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d00b      	beq.n	8006c5a <USBD_GetConfig+0x46>
 8006c42:	e012      	b.n	8006c6a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4619      	mov	r1, r3
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f920 	bl	8006e98 <USBD_CtlSendData>
        break;
 8006c58:	e00c      	b.n	8006c74 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4619      	mov	r1, r3
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f918 	bl	8006e98 <USBD_CtlSendData>
        break;
 8006c68:	e004      	b.n	8006c74 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f8a9 	bl	8006dc4 <USBD_CtlError>
        break;
 8006c72:	bf00      	nop
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d81e      	bhi.n	8006cd0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	88db      	ldrh	r3, [r3, #6]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d004      	beq.n	8006ca4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f891 	bl	8006dc4 <USBD_CtlError>
        break;
 8006ca2:	e01a      	b.n	8006cda <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f043 0202 	orr.w	r2, r3, #2
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	330c      	adds	r3, #12
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f8e5 	bl	8006e98 <USBD_CtlSendData>
      break;
 8006cce:	e004      	b.n	8006cda <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f876 	bl	8006dc4 <USBD_CtlError>
      break;
 8006cd8:	bf00      	nop
  }
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	885b      	ldrh	r3, [r3, #2]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d106      	bne.n	8006d02 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f90b 	bl	8006f18 <USBD_CtlSendStatus>
  }
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d80b      	bhi.n	8006d38 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	885b      	ldrh	r3, [r3, #2]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d10c      	bne.n	8006d42 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f8f1 	bl	8006f18 <USBD_CtlSendStatus>
      }
      break;
 8006d36:	e004      	b.n	8006d42 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f842 	bl	8006dc4 <USBD_CtlError>
      break;
 8006d40:	e000      	b.n	8006d44 <USBD_ClrFeature+0x3a>
      break;
 8006d42:	bf00      	nop
  }
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	785a      	ldrb	r2, [r3, #1]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	3302      	adds	r3, #2
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	3303      	adds	r3, #3
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	3304      	adds	r3, #4
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	3305      	adds	r3, #5
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3306      	adds	r3, #6
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	3307      	adds	r3, #7
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4413      	add	r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	80da      	strh	r2, [r3, #6]

}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bc80      	pop	{r7}
 8006dc2:	4770      	bx	lr

08006dc4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006dce:	2180      	movs	r1, #128	; 0x80
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fb65 	bl	80074a0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fb61 	bl	80074a0 <USBD_LL_StallEP>
}
 8006dde:	bf00      	nop
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b086      	sub	sp, #24
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d032      	beq.n	8006e62 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f000 f834 	bl	8006e6a <USBD_GetLen>
 8006e02:	4603      	mov	r3, r0
 8006e04:	3301      	adds	r3, #1
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	75fa      	strb	r2, [r7, #23]
 8006e16:	461a      	mov	r2, r3
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7812      	ldrb	r2, [r2, #0]
 8006e20:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	75fa      	strb	r2, [r7, #23]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	2203      	movs	r2, #3
 8006e30:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006e32:	e012      	b.n	8006e5a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	60fa      	str	r2, [r7, #12]
 8006e3a:	7dfa      	ldrb	r2, [r7, #23]
 8006e3c:	1c51      	adds	r1, r2, #1
 8006e3e:	75f9      	strb	r1, [r7, #23]
 8006e40:	4611      	mov	r1, r2
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	440a      	add	r2, r1
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	75fa      	strb	r2, [r7, #23]
 8006e50:	461a      	mov	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4413      	add	r3, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e8      	bne.n	8006e34 <USBD_GetString+0x4e>
    }
  }
}
 8006e62:	bf00      	nop
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b085      	sub	sp, #20
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006e76:	e005      	b.n	8006e84 <USBD_GetLen+0x1a>
  {
    len++;
 8006e78:	7bfb      	ldrb	r3, [r7, #15]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3301      	adds	r3, #1
 8006e82:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1f5      	bne.n	8006e78 <USBD_GetLen+0xe>
  }

  return len;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 fb76 	bl	80075b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fb64 	bl	80075b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f02:	88fb      	ldrh	r3, [r7, #6]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	2100      	movs	r1, #0
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 fb75 	bl	80075f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2204      	movs	r2, #4
 8006f24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f28:	2300      	movs	r3, #0
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fb3f 	bl	80075b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b082      	sub	sp, #8
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2205      	movs	r2, #5
 8006f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2200      	movs	r2, #0
 8006f52:	2100      	movs	r1, #0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fb4f 	bl	80075f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f68:	2200      	movs	r2, #0
 8006f6a:	490e      	ldr	r1, [pc, #56]	; (8006fa4 <MX_USB_DEVICE_Init+0x40>)
 8006f6c:	480e      	ldr	r0, [pc, #56]	; (8006fa8 <MX_USB_DEVICE_Init+0x44>)
 8006f6e:	f7fe ff8b 	bl	8005e88 <USBD_Init>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f78:	f7f9 fb90 	bl	800069c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006f7c:	490b      	ldr	r1, [pc, #44]	; (8006fac <MX_USB_DEVICE_Init+0x48>)
 8006f7e:	480a      	ldr	r0, [pc, #40]	; (8006fa8 <MX_USB_DEVICE_Init+0x44>)
 8006f80:	f7fe ffad 	bl	8005ede <USBD_RegisterClass>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f8a:	f7f9 fb87 	bl	800069c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f8e:	4806      	ldr	r0, [pc, #24]	; (8006fa8 <MX_USB_DEVICE_Init+0x44>)
 8006f90:	f7fe ffbe 	bl	8005f10 <USBD_Start>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006f9a:	f7f9 fb7f 	bl	800069c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f9e:	bf00      	nop
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000114 	.word	0x20000114
 8006fa8:	2000025c 	.word	0x2000025c
 8006fac:	2000000c 	.word	0x2000000c

08006fb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2212      	movs	r2, #18
 8006fc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000130 	.word	0x20000130

08006fd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fe6:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	20000144 	.word	0x20000144

08006ff8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d105      	bne.n	8007016 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4907      	ldr	r1, [pc, #28]	; (800702c <USBD_FS_ProductStrDescriptor+0x34>)
 800700e:	4808      	ldr	r0, [pc, #32]	; (8007030 <USBD_FS_ProductStrDescriptor+0x38>)
 8007010:	f7ff fee9 	bl	8006de6 <USBD_GetString>
 8007014:	e004      	b.n	8007020 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	4904      	ldr	r1, [pc, #16]	; (800702c <USBD_FS_ProductStrDescriptor+0x34>)
 800701a:	4805      	ldr	r0, [pc, #20]	; (8007030 <USBD_FS_ProductStrDescriptor+0x38>)
 800701c:	f7ff fee3 	bl	8006de6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007020:	4b02      	ldr	r3, [pc, #8]	; (800702c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20000520 	.word	0x20000520
 8007030:	0800775c 	.word	0x0800775c

08007034 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	4904      	ldr	r1, [pc, #16]	; (8007054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007044:	4804      	ldr	r0, [pc, #16]	; (8007058 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007046:	f7ff fece 	bl	8006de6 <USBD_GetString>
  return USBD_StrDesc;
 800704a:	4b02      	ldr	r3, [pc, #8]	; (8007054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20000520 	.word	0x20000520
 8007058:	08007774 	.word	0x08007774

0800705c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	221a      	movs	r2, #26
 800706c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800706e:	f000 f843 	bl	80070f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007072:	4b02      	ldr	r3, [pc, #8]	; (800707c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000148 	.word	0x20000148

08007080 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d105      	bne.n	800709e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4907      	ldr	r1, [pc, #28]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007096:	4808      	ldr	r0, [pc, #32]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007098:	f7ff fea5 	bl	8006de6 <USBD_GetString>
 800709c:	e004      	b.n	80070a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	4904      	ldr	r1, [pc, #16]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070a2:	4805      	ldr	r0, [pc, #20]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070a4:	f7ff fe9f 	bl	8006de6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070a8:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000520 	.word	0x20000520
 80070b8:	08007788 	.word	0x08007788

080070bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4907      	ldr	r1, [pc, #28]	; (80070f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070d2:	4808      	ldr	r0, [pc, #32]	; (80070f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070d4:	f7ff fe87 	bl	8006de6 <USBD_GetString>
 80070d8:	e004      	b.n	80070e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4904      	ldr	r1, [pc, #16]	; (80070f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070e0:	f7ff fe81 	bl	8006de6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e4:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000520 	.word	0x20000520
 80070f4:	08007794 	.word	0x08007794

080070f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <Get_SerialNum+0x44>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <Get_SerialNum+0x48>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <Get_SerialNum+0x4c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800711e:	2208      	movs	r2, #8
 8007120:	4909      	ldr	r1, [pc, #36]	; (8007148 <Get_SerialNum+0x50>)
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f814 	bl	8007150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007128:	2204      	movs	r2, #4
 800712a:	4908      	ldr	r1, [pc, #32]	; (800714c <Get_SerialNum+0x54>)
 800712c:	68b8      	ldr	r0, [r7, #8]
 800712e:	f000 f80f 	bl	8007150 <IntToUnicode>
  }
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	1ffff7e8 	.word	0x1ffff7e8
 8007140:	1ffff7ec 	.word	0x1ffff7ec
 8007144:	1ffff7f0 	.word	0x1ffff7f0
 8007148:	2000014a 	.word	0x2000014a
 800714c:	2000015a 	.word	0x2000015a

08007150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007162:	2300      	movs	r3, #0
 8007164:	75fb      	strb	r3, [r7, #23]
 8007166:	e027      	b.n	80071b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	0f1b      	lsrs	r3, r3, #28
 800716c:	2b09      	cmp	r3, #9
 800716e:	d80b      	bhi.n	8007188 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	0f1b      	lsrs	r3, r3, #28
 8007174:	b2da      	uxtb	r2, r3
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4619      	mov	r1, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	440b      	add	r3, r1
 8007180:	3230      	adds	r2, #48	; 0x30
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e00a      	b.n	800719e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	0f1b      	lsrs	r3, r3, #28
 800718c:	b2da      	uxtb	r2, r3
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4619      	mov	r1, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	440b      	add	r3, r1
 8007198:	3237      	adds	r2, #55	; 0x37
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	3301      	adds	r3, #1
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4413      	add	r3, r2
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	3301      	adds	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
 80071b8:	7dfa      	ldrb	r2, [r7, #23]
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d3d3      	bcc.n	8007168 <IntToUnicode+0x18>
  }
}
 80071c0:	bf00      	nop
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr
	...

080071cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a0d      	ldr	r2, [pc, #52]	; (8007210 <HAL_PCD_MspInit+0x44>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d113      	bne.n	8007206 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80071de:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <HAL_PCD_MspInit+0x48>)
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	4a0c      	ldr	r2, [pc, #48]	; (8007214 <HAL_PCD_MspInit+0x48>)
 80071e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80071e8:	61d3      	str	r3, [r2, #28]
 80071ea:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <HAL_PCD_MspInit+0x48>)
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80071f6:	2200      	movs	r2, #0
 80071f8:	2100      	movs	r1, #0
 80071fa:	2014      	movs	r0, #20
 80071fc:	f7f9 fd4b 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007200:	2014      	movs	r0, #20
 8007202:	f7f9 fd64 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007206:	bf00      	nop
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	40005c00 	.word	0x40005c00
 8007214:	40021000 	.word	0x40021000

08007218 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f7fe feb6 	bl	8005fa0 <USBD_LL_SetupStage>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800724e:	78fa      	ldrb	r2, [r7, #3]
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	440b      	add	r3, r1
 800725c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	4619      	mov	r1, r3
 8007266:	f7fe fee6 	bl	8006036 <USBD_LL_DataOutStage>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007284:	78fa      	ldrb	r2, [r7, #3]
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	440b      	add	r3, r1
 8007292:	333c      	adds	r3, #60	; 0x3c
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	4619      	mov	r1, r3
 800729a:	f7fe ff3d 	bl	8006118 <USBD_LL_DataInStage>
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b082      	sub	sp, #8
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff f84d 	bl	8006354 <USBD_LL_SOF>
}
 80072ba:	bf00      	nop
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072ca:	2301      	movs	r3, #1
 80072cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d001      	beq.n	80072da <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80072d6:	f7f9 f9e1 	bl	800069c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072e0:	7bfa      	ldrb	r2, [r7, #15]
 80072e2:	4611      	mov	r1, r2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fffd 	bl	80062e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe ffb6 	bl	8006262 <USBD_LL_Reset>
}
 80072f6:	bf00      	nop
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fff7 	bl	8006302 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <HAL_PCD_SuspendCallback+0x30>)
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	4a03      	ldr	r2, [pc, #12]	; (8007330 <HAL_PCD_SuspendCallback+0x30>)
 8007322:	f043 0306 	orr.w	r3, r3, #6
 8007326:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	e000ed00 	.word	0xe000ed00

08007334 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007342:	4618      	mov	r0, r3
 8007344:	f7fe fff1 	bl	800632a <USBD_LL_Resume>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007358:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <USBD_LL_Init+0x88>)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a1d      	ldr	r2, [pc, #116]	; (80073d8 <USBD_LL_Init+0x88>)
 8007364:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007368:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <USBD_LL_Init+0x88>)
 800736a:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <USBD_LL_Init+0x8c>)
 800736c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800736e:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <USBD_LL_Init+0x88>)
 8007370:	2208      	movs	r2, #8
 8007372:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007374:	4b18      	ldr	r3, [pc, #96]	; (80073d8 <USBD_LL_Init+0x88>)
 8007376:	2202      	movs	r2, #2
 8007378:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800737a:	4b17      	ldr	r3, [pc, #92]	; (80073d8 <USBD_LL_Init+0x88>)
 800737c:	2200      	movs	r2, #0
 800737e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007380:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <USBD_LL_Init+0x88>)
 8007382:	2200      	movs	r2, #0
 8007384:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007386:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <USBD_LL_Init+0x88>)
 8007388:	2200      	movs	r2, #0
 800738a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800738c:	4812      	ldr	r0, [pc, #72]	; (80073d8 <USBD_LL_Init+0x88>)
 800738e:	f7f9 fe2b 	bl	8000fe8 <HAL_PCD_Init>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007398:	f7f9 f980 	bl	800069c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073a2:	2318      	movs	r3, #24
 80073a4:	2200      	movs	r2, #0
 80073a6:	2100      	movs	r1, #0
 80073a8:	f7fb f948 	bl	800263c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073b2:	2358      	movs	r3, #88	; 0x58
 80073b4:	2200      	movs	r2, #0
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	f7fb f940 	bl	800263c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80073c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c6:	2200      	movs	r2, #0
 80073c8:	2181      	movs	r1, #129	; 0x81
 80073ca:	f7fb f937 	bl	800263c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000720 	.word	0x20000720
 80073dc:	40005c00 	.word	0x40005c00

080073e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7f9 ff01 	bl	80011fe <HAL_PCD_Start>
 80073fc:	4603      	mov	r3, r0
 80073fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	4618      	mov	r0, r3
 8007404:	f000 f93c 	bl	8007680 <USBD_Get_USB_Status>
 8007408:	4603      	mov	r3, r0
 800740a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800740c:	7bbb      	ldrb	r3, [r7, #14]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	461a      	mov	r2, r3
 8007424:	4603      	mov	r3, r0
 8007426:	70fb      	strb	r3, [r7, #3]
 8007428:	460b      	mov	r3, r1
 800742a:	70bb      	strb	r3, [r7, #2]
 800742c:	4613      	mov	r3, r2
 800742e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800743e:	78bb      	ldrb	r3, [r7, #2]
 8007440:	883a      	ldrh	r2, [r7, #0]
 8007442:	78f9      	ldrb	r1, [r7, #3]
 8007444:	f7fa f87b 	bl	800153e <HAL_PCD_EP_Open>
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 f916 	bl	8007680 <USBD_Get_USB_Status>
 8007454:	4603      	mov	r3, r0
 8007456:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007458:	7bbb      	ldrb	r3, [r7, #14]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	4611      	mov	r1, r2
 8007480:	4618      	mov	r0, r3
 8007482:	f7fa f8c2 	bl	800160a <HAL_PCD_EP_Close>
 8007486:	4603      	mov	r3, r0
 8007488:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	4618      	mov	r0, r3
 800748e:	f000 f8f7 	bl	8007680 <USBD_Get_USB_Status>
 8007492:	4603      	mov	r3, r0
 8007494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007496:	7bbb      	ldrb	r3, [r7, #14]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ba:	78fa      	ldrb	r2, [r7, #3]
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fa f96b 	bl	800179a <HAL_PCD_EP_SetStall>
 80074c4:	4603      	mov	r3, r0
 80074c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 f8d8 	bl	8007680 <USBD_Get_USB_Status>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b084      	sub	sp, #16
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074f8:	78fa      	ldrb	r2, [r7, #3]
 80074fa:	4611      	mov	r1, r2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fa f9ac 	bl	800185a <HAL_PCD_EP_ClrStall>
 8007502:	4603      	mov	r3, r0
 8007504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	4618      	mov	r0, r3
 800750a:	f000 f8b9 	bl	8007680 <USBD_Get_USB_Status>
 800750e:	4603      	mov	r3, r0
 8007510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007512:	7bbb      	ldrb	r3, [r7, #14]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800752e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007534:	2b00      	cmp	r3, #0
 8007536:	da0c      	bge.n	8007552 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	1c5a      	adds	r2, r3, #1
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	440b      	add	r3, r1
 800754c:	3302      	adds	r3, #2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	e00b      	b.n	800756a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007558:	68f9      	ldr	r1, [r7, #12]
 800755a:	4613      	mov	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	440b      	add	r3, r1
 8007564:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007568:	781b      	ldrb	r3, [r3, #0]
  }
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr

08007574 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007584:	2300      	movs	r3, #0
 8007586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800758e:	78fa      	ldrb	r2, [r7, #3]
 8007590:	4611      	mov	r1, r2
 8007592:	4618      	mov	r0, r3
 8007594:	f7f9 ffae 	bl	80014f4 <HAL_PCD_SetAddress>
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f86e 	bl	8007680 <USBD_Get_USB_Status>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b086      	sub	sp, #24
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	461a      	mov	r2, r3
 80075be:	460b      	mov	r3, r1
 80075c0:	72fb      	strb	r3, [r7, #11]
 80075c2:	4613      	mov	r3, r2
 80075c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80075d4:	893b      	ldrh	r3, [r7, #8]
 80075d6:	7af9      	ldrb	r1, [r7, #11]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	f7fa f89b 	bl	8001714 <HAL_PCD_EP_Transmit>
 80075de:	4603      	mov	r3, r0
 80075e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 f84b 	bl	8007680 <USBD_Get_USB_Status>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80075ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	607a      	str	r2, [r7, #4]
 8007602:	461a      	mov	r2, r3
 8007604:	460b      	mov	r3, r1
 8007606:	72fb      	strb	r3, [r7, #11]
 8007608:	4613      	mov	r3, r2
 800760a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800761a:	893b      	ldrh	r3, [r7, #8]
 800761c:	7af9      	ldrb	r1, [r7, #11]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	f7fa f83b 	bl	800169a <HAL_PCD_EP_Receive>
 8007624:	4603      	mov	r3, r0
 8007626:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007628:	7dfb      	ldrb	r3, [r7, #23]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 f828 	bl	8007680 <USBD_Get_USB_Status>
 8007630:	4603      	mov	r3, r0
 8007632:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007634:	7dbb      	ldrb	r3, [r7, #22]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007648:	4b02      	ldr	r3, [pc, #8]	; (8007654 <USBD_static_malloc+0x14>)
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	bc80      	pop	{r7}
 8007652:	4770      	bx	lr
 8007654:	20000184 	.word	0x20000184

08007658 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]

}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	460b      	mov	r3, r1
 8007674:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800768a:	2300      	movs	r3, #0
 800768c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d817      	bhi.n	80076c4 <USBD_Get_USB_Status+0x44>
 8007694:	a201      	add	r2, pc, #4	; (adr r2, 800769c <USBD_Get_USB_Status+0x1c>)
 8007696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769a:	bf00      	nop
 800769c:	080076ad 	.word	0x080076ad
 80076a0:	080076b3 	.word	0x080076b3
 80076a4:	080076b9 	.word	0x080076b9
 80076a8:	080076bf 	.word	0x080076bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
    break;
 80076b0:	e00b      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076b2:	2302      	movs	r3, #2
 80076b4:	73fb      	strb	r3, [r7, #15]
    break;
 80076b6:	e008      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076b8:	2301      	movs	r3, #1
 80076ba:	73fb      	strb	r3, [r7, #15]
    break;
 80076bc:	e005      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076be:	2302      	movs	r3, #2
 80076c0:	73fb      	strb	r3, [r7, #15]
    break;
 80076c2:	e002      	b.n	80076ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076c4:	2302      	movs	r3, #2
 80076c6:	73fb      	strb	r3, [r7, #15]
    break;
 80076c8:	bf00      	nop
  }
  return usb_status;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3714      	adds	r7, #20
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop

080076d8 <__libc_init_array>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	2500      	movs	r5, #0
 80076dc:	4e0c      	ldr	r6, [pc, #48]	; (8007710 <__libc_init_array+0x38>)
 80076de:	4c0d      	ldr	r4, [pc, #52]	; (8007714 <__libc_init_array+0x3c>)
 80076e0:	1ba4      	subs	r4, r4, r6
 80076e2:	10a4      	asrs	r4, r4, #2
 80076e4:	42a5      	cmp	r5, r4
 80076e6:	d109      	bne.n	80076fc <__libc_init_array+0x24>
 80076e8:	f000 f822 	bl	8007730 <_init>
 80076ec:	2500      	movs	r5, #0
 80076ee:	4e0a      	ldr	r6, [pc, #40]	; (8007718 <__libc_init_array+0x40>)
 80076f0:	4c0a      	ldr	r4, [pc, #40]	; (800771c <__libc_init_array+0x44>)
 80076f2:	1ba4      	subs	r4, r4, r6
 80076f4:	10a4      	asrs	r4, r4, #2
 80076f6:	42a5      	cmp	r5, r4
 80076f8:	d105      	bne.n	8007706 <__libc_init_array+0x2e>
 80076fa:	bd70      	pop	{r4, r5, r6, pc}
 80076fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007700:	4798      	blx	r3
 8007702:	3501      	adds	r5, #1
 8007704:	e7ee      	b.n	80076e4 <__libc_init_array+0xc>
 8007706:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800770a:	4798      	blx	r3
 800770c:	3501      	adds	r5, #1
 800770e:	e7f2      	b.n	80076f6 <__libc_init_array+0x1e>
 8007710:	080077b4 	.word	0x080077b4
 8007714:	080077b4 	.word	0x080077b4
 8007718:	080077b4 	.word	0x080077b4
 800771c:	080077b8 	.word	0x080077b8

08007720 <memset>:
 8007720:	4603      	mov	r3, r0
 8007722:	4402      	add	r2, r0
 8007724:	4293      	cmp	r3, r2
 8007726:	d100      	bne.n	800772a <memset+0xa>
 8007728:	4770      	bx	lr
 800772a:	f803 1b01 	strb.w	r1, [r3], #1
 800772e:	e7f9      	b.n	8007724 <memset+0x4>

08007730 <_init>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

0800773c <_fini>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr
