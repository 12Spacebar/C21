
C21_Robot_ARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080095d0  080095d0  000195d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800963c  0800963c  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  0800963c  0800963c  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800963c  0800963c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009640  08009640  00019640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08009644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  20000164  080097a8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b2c  080097a8  00020b2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150c7  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000303d  00000000  00000000  00035254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00038298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00039370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017523  00000000  00000000  0003a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f35b  00000000  00000000  000517f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079599  00000000  00000000  00060b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da0e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  000da164  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000164 	.word	0x20000164
 800012c:	00000000 	.word	0x00000000
 8000130:	080095b8 	.word	0x080095b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000168 	.word	0x20000168
 800014c:	080095b8 	.word	0x080095b8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2f>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a04:	bf24      	itt	cs
 8000a06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a0e:	d90d      	bls.n	8000a2c <__aeabi_d2f+0x30>
 8000a10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a30:	d121      	bne.n	8000a76 <__aeabi_d2f+0x7a>
 8000a32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a36:	bfbc      	itt	lt
 8000a38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	4770      	bxlt	lr
 8000a3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a46:	f1c2 0218 	rsb	r2, r2, #24
 8000a4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a52:	fa20 f002 	lsr.w	r0, r0, r2
 8000a56:	bf18      	it	ne
 8000a58:	f040 0001 	orrne.w	r0, r0, #1
 8000a5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a68:	ea40 000c 	orr.w	r0, r0, ip
 8000a6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a74:	e7cc      	b.n	8000a10 <__aeabi_d2f+0x14>
 8000a76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a7a:	d107      	bne.n	8000a8c <__aeabi_d2f+0x90>
 8000a7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a80:	bf1e      	ittt	ne
 8000a82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bxne	lr
 8000a8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fmul>:
 8000a9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aa0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000aa4:	bf1e      	ittt	ne
 8000aa6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aaa:	ea92 0f0c 	teqne	r2, ip
 8000aae:	ea93 0f0c 	teqne	r3, ip
 8000ab2:	d06f      	beq.n	8000b94 <__aeabi_fmul+0xf8>
 8000ab4:	441a      	add	r2, r3
 8000ab6:	ea80 0c01 	eor.w	ip, r0, r1
 8000aba:	0240      	lsls	r0, r0, #9
 8000abc:	bf18      	it	ne
 8000abe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ac2:	d01e      	beq.n	8000b02 <__aeabi_fmul+0x66>
 8000ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ac8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000acc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ad0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ad4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ad8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000adc:	bf3e      	ittt	cc
 8000ade:	0049      	lslcc	r1, r1, #1
 8000ae0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ae4:	005b      	lslcc	r3, r3, #1
 8000ae6:	ea40 0001 	orr.w	r0, r0, r1
 8000aea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aee:	2afd      	cmp	r2, #253	; 0xfd
 8000af0:	d81d      	bhi.n	8000b2e <__aeabi_fmul+0x92>
 8000af2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000af6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000afa:	bf08      	it	eq
 8000afc:	f020 0001 	biceq.w	r0, r0, #1
 8000b00:	4770      	bx	lr
 8000b02:	f090 0f00 	teq	r0, #0
 8000b06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b0a:	bf08      	it	eq
 8000b0c:	0249      	lsleq	r1, r1, #9
 8000b0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b16:	3a7f      	subs	r2, #127	; 0x7f
 8000b18:	bfc2      	ittt	gt
 8000b1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b22:	4770      	bxgt	lr
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	dc5d      	bgt.n	8000bec <__aeabi_fmul+0x150>
 8000b30:	f112 0f19 	cmn.w	r2, #25
 8000b34:	bfdc      	itt	le
 8000b36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000b3a:	4770      	bxle	lr
 8000b3c:	f1c2 0200 	rsb	r2, r2, #0
 8000b40:	0041      	lsls	r1, r0, #1
 8000b42:	fa21 f102 	lsr.w	r1, r1, r2
 8000b46:	f1c2 0220 	rsb	r2, r2, #32
 8000b4a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b4e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b52:	f140 0000 	adc.w	r0, r0, #0
 8000b56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b5a:	bf08      	it	eq
 8000b5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b60:	4770      	bx	lr
 8000b62:	f092 0f00 	teq	r2, #0
 8000b66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b6a:	bf02      	ittt	eq
 8000b6c:	0040      	lsleq	r0, r0, #1
 8000b6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b72:	3a01      	subeq	r2, #1
 8000b74:	d0f9      	beq.n	8000b6a <__aeabi_fmul+0xce>
 8000b76:	ea40 000c 	orr.w	r0, r0, ip
 8000b7a:	f093 0f00 	teq	r3, #0
 8000b7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b82:	bf02      	ittt	eq
 8000b84:	0049      	lsleq	r1, r1, #1
 8000b86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b8a:	3b01      	subeq	r3, #1
 8000b8c:	d0f9      	beq.n	8000b82 <__aeabi_fmul+0xe6>
 8000b8e:	ea41 010c 	orr.w	r1, r1, ip
 8000b92:	e78f      	b.n	8000ab4 <__aeabi_fmul+0x18>
 8000b94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b98:	ea92 0f0c 	teq	r2, ip
 8000b9c:	bf18      	it	ne
 8000b9e:	ea93 0f0c 	teqne	r3, ip
 8000ba2:	d00a      	beq.n	8000bba <__aeabi_fmul+0x11e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	d1d8      	bne.n	8000b62 <__aeabi_fmul+0xc6>
 8000bb0:	ea80 0001 	eor.w	r0, r0, r1
 8000bb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f090 0f00 	teq	r0, #0
 8000bbe:	bf17      	itett	ne
 8000bc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000bc4:	4608      	moveq	r0, r1
 8000bc6:	f091 0f00 	teqne	r1, #0
 8000bca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000bce:	d014      	beq.n	8000bfa <__aeabi_fmul+0x15e>
 8000bd0:	ea92 0f0c 	teq	r2, ip
 8000bd4:	d101      	bne.n	8000bda <__aeabi_fmul+0x13e>
 8000bd6:	0242      	lsls	r2, r0, #9
 8000bd8:	d10f      	bne.n	8000bfa <__aeabi_fmul+0x15e>
 8000bda:	ea93 0f0c 	teq	r3, ip
 8000bde:	d103      	bne.n	8000be8 <__aeabi_fmul+0x14c>
 8000be0:	024b      	lsls	r3, r1, #9
 8000be2:	bf18      	it	ne
 8000be4:	4608      	movne	r0, r1
 8000be6:	d108      	bne.n	8000bfa <__aeabi_fmul+0x15e>
 8000be8:	ea80 0001 	eor.w	r0, r0, r1
 8000bec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c02:	4770      	bx	lr

08000c04 <__aeabi_fdiv>:
 8000c04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c12:	ea92 0f0c 	teqne	r2, ip
 8000c16:	ea93 0f0c 	teqne	r3, ip
 8000c1a:	d069      	beq.n	8000cf0 <__aeabi_fdiv+0xec>
 8000c1c:	eba2 0203 	sub.w	r2, r2, r3
 8000c20:	ea80 0c01 	eor.w	ip, r0, r1
 8000c24:	0249      	lsls	r1, r1, #9
 8000c26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c2a:	d037      	beq.n	8000c9c <__aeabi_fdiv+0x98>
 8000c2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	bf38      	it	cc
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000c46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	bf24      	itt	cs
 8000c4e:	1a5b      	subcs	r3, r3, r1
 8000c50:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c58:	bf24      	itt	cs
 8000c5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c66:	bf24      	itt	cs
 8000c68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c74:	bf24      	itt	cs
 8000c76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	bf18      	it	ne
 8000c82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c86:	d1e0      	bne.n	8000c4a <__aeabi_fdiv+0x46>
 8000c88:	2afd      	cmp	r2, #253	; 0xfd
 8000c8a:	f63f af50 	bhi.w	8000b2e <__aeabi_fmul+0x92>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c94:	bf08      	it	eq
 8000c96:	f020 0001 	biceq.w	r0, r0, #1
 8000c9a:	4770      	bx	lr
 8000c9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ca0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca4:	327f      	adds	r2, #127	; 0x7f
 8000ca6:	bfc2      	ittt	gt
 8000ca8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cb0:	4770      	bxgt	lr
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	f04f 0300 	mov.w	r3, #0
 8000cba:	3a01      	subs	r2, #1
 8000cbc:	e737      	b.n	8000b2e <__aeabi_fmul+0x92>
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fdiv+0xc2>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fdiv+0xda>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e795      	b.n	8000c1c <__aeabi_fdiv+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	d108      	bne.n	8000d0c <__aeabi_fdiv+0x108>
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	f47f af7d 	bne.w	8000bfa <__aeabi_fmul+0x15e>
 8000d00:	ea93 0f0c 	teq	r3, ip
 8000d04:	f47f af70 	bne.w	8000be8 <__aeabi_fmul+0x14c>
 8000d08:	4608      	mov	r0, r1
 8000d0a:	e776      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d0c:	ea93 0f0c 	teq	r3, ip
 8000d10:	d104      	bne.n	8000d1c <__aeabi_fdiv+0x118>
 8000d12:	024b      	lsls	r3, r1, #9
 8000d14:	f43f af4c 	beq.w	8000bb0 <__aeabi_fmul+0x114>
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e76e      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d20:	bf18      	it	ne
 8000d22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d26:	d1ca      	bne.n	8000cbe <__aeabi_fdiv+0xba>
 8000d28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d2c:	f47f af5c 	bne.w	8000be8 <__aeabi_fmul+0x14c>
 8000d30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	f47f af3c 	bne.w	8000bb0 <__aeabi_fmul+0x114>
 8000d38:	e75f      	b.n	8000bfa <__aeabi_fmul+0x15e>
 8000d3a:	bf00      	nop

08000d3c <__aeabi_f2uiz>:
 8000d3c:	0042      	lsls	r2, r0, #1
 8000d3e:	d20e      	bcs.n	8000d5e <__aeabi_f2uiz+0x22>
 8000d40:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d44:	d30b      	bcc.n	8000d5e <__aeabi_f2uiz+0x22>
 8000d46:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d4a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d4e:	d409      	bmi.n	8000d64 <__aeabi_f2uiz+0x28>
 8000d50:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d58:	fa23 f002 	lsr.w	r0, r3, r2
 8000d5c:	4770      	bx	lr
 8000d5e:	f04f 0000 	mov.w	r0, #0
 8000d62:	4770      	bx	lr
 8000d64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d68:	d101      	bne.n	8000d6e <__aeabi_f2uiz+0x32>
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	d102      	bne.n	8000d74 <__aeabi_f2uiz+0x38>
 8000d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d72:	4770      	bx	lr
 8000d74:	f04f 0000 	mov.w	r0, #0
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	0000      	movs	r0, r0
	...

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d86:	f000 ff41 	bl	8001c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8a:	f000 f981 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8e:	f000 fc69 	bl	8001664 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d92:	f000 fc49 	bl	8001628 <MX_DMA_Init>
  MX_TIM3_Init();
 8000d96:	f000 fb5d 	bl	8001454 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d9a:	f000 facf 	bl	800133c <MX_TIM2_Init>
  MX_TIM1_Init();
 8000d9e:	f000 fa7d 	bl	800129c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000da2:	f007 ff9f 	bl	8008ce4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000da6:	f000 f9d1 	bl	800114c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000daa:	f000 fa39 	bl	8001220 <MX_ADC2_Init>
  MX_TIM4_Init();
 8000dae:	f000 fbed 	bl	800158c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000db2:	2100      	movs	r1, #0
 8000db4:	48ae      	ldr	r0, [pc, #696]	; (8001070 <main+0x2f0>)
 8000db6:	f004 f843 	bl	8004e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000dba:	2108      	movs	r1, #8
 8000dbc:	48ac      	ldr	r0, [pc, #688]	; (8001070 <main+0x2f0>)
 8000dbe:	f004 f83f 	bl	8004e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000dc2:	210c      	movs	r1, #12
 8000dc4:	48aa      	ldr	r0, [pc, #680]	; (8001070 <main+0x2f0>)
 8000dc6:	f004 f83b 	bl	8004e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	48a9      	ldr	r0, [pc, #676]	; (8001074 <main+0x2f4>)
 8000dce:	f004 f837 	bl	8004e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	48a7      	ldr	r0, [pc, #668]	; (8001074 <main+0x2f4>)
 8000dd6:	f004 f833 	bl	8004e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000dda:	2108      	movs	r1, #8
 8000ddc:	48a5      	ldr	r0, [pc, #660]	; (8001074 <main+0x2f4>)
 8000dde:	f004 f82f 	bl	8004e40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8000de2:	210c      	movs	r1, #12
 8000de4:	48a3      	ldr	r0, [pc, #652]	; (8001074 <main+0x2f4>)
 8000de6:	f004 f82b 	bl	8004e40 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
 8000dea:	4ba1      	ldr	r3, [pc, #644]	; (8001070 <main+0x2f0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1500);
 8000df4:	4b9e      	ldr	r3, [pc, #632]	; (8001070 <main+0x2f0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1500);
 8000dfe:	4b9c      	ldr	r3, [pc, #624]	; (8001070 <main+0x2f0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e06:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
 8000e08:	4b9a      	ldr	r3, [pc, #616]	; (8001074 <main+0x2f4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1500);
 8000e12:	4b98      	ldr	r3, [pc, #608]	; (8001074 <main+0x2f4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e1a:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1500);
 8000e1c:	4b95      	ldr	r3, [pc, #596]	; (8001074 <main+0x2f4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e24:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1500);
 8000e26:	4b93      	ldr	r3, [pc, #588]	; (8001074 <main+0x2f4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000e2e:	641a      	str	r2, [r3, #64]	; 0x40



  HAL_ADC_Start_DMA(&hadc1,a,4);
 8000e30:	2204      	movs	r2, #4
 8000e32:	4991      	ldr	r1, [pc, #580]	; (8001078 <main+0x2f8>)
 8000e34:	4891      	ldr	r0, [pc, #580]	; (800107c <main+0x2fc>)
 8000e36:	f001 f845 	bl	8001ec4 <HAL_ADC_Start_DMA>
   float temp1,temp2;
   for(int i = 0 ; i < 100; i++){
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e3e:	e05d      	b.n	8000efc <main+0x17c>
       temp1 += floor(a[0]/4096.0*255);
 8000e40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e42:	f7ff fae9 	bl	8000418 <__aeabi_f2d>
 8000e46:	4604      	mov	r4, r0
 8000e48:	460d      	mov	r5, r1
 8000e4a:	4b8b      	ldr	r3, [pc, #556]	; (8001078 <main+0x2f8>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fad0 	bl	80003f4 <__aeabi_i2d>
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b89      	ldr	r3, [pc, #548]	; (8001080 <main+0x300>)
 8000e5a:	f7ff fc5f 	bl	800071c <__aeabi_ddiv>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	a380      	add	r3, pc, #512	; (adr r3, 8001068 <main+0x2e8>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fb2c 	bl	80004c8 <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	4610      	mov	r0, r2
 8000e76:	4619      	mov	r1, r3
 8000e78:	f008 fb1a 	bl	80094b0 <floor>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	460b      	mov	r3, r1
 8000e80:	4620      	mov	r0, r4
 8000e82:	4629      	mov	r1, r5
 8000e84:	f7ff f96a 	bl	800015c <__adddf3>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	460c      	mov	r4, r1
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	4621      	mov	r1, r4
 8000e90:	f7ff fdb4 	bl	80009fc <__aeabi_d2f>
 8000e94:	4603      	mov	r3, r0
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
       temp2 += floor(a[1]/4096.0*255);
 8000e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e9a:	f7ff fabd 	bl	8000418 <__aeabi_f2d>
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	460d      	mov	r5, r1
 8000ea2:	4b75      	ldr	r3, [pc, #468]	; (8001078 <main+0x2f8>)
 8000ea4:	885b      	ldrh	r3, [r3, #2]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff faa4 	bl	80003f4 <__aeabi_i2d>
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	4b73      	ldr	r3, [pc, #460]	; (8001080 <main+0x300>)
 8000eb2:	f7ff fc33 	bl	800071c <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	a36a      	add	r3, pc, #424	; (adr r3, 8001068 <main+0x2e8>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	f7ff fb00 	bl	80004c8 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f008 faee 	bl	80094b0 <floor>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4620      	mov	r0, r4
 8000eda:	4629      	mov	r1, r5
 8000edc:	f7ff f93e 	bl	800015c <__adddf3>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	460c      	mov	r4, r1
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	f7ff fd88 	bl	80009fc <__aeabi_d2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	633b      	str	r3, [r7, #48]	; 0x30
       HAL_Delay(2);
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f000 feed 	bl	8001cd0 <HAL_Delay>
   for(int i = 0 ; i < 100; i++){
 8000ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef8:	3301      	adds	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	2b63      	cmp	r3, #99	; 0x63
 8000f00:	dd9e      	ble.n	8000e40 <main+0xc0>
   }
   temp1/=100;
 8000f02:	4960      	ldr	r1, [pc, #384]	; (8001084 <main+0x304>)
 8000f04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f06:	f7ff fe7d 	bl	8000c04 <__aeabi_fdiv>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
   temp2/=100;
 8000f0e:	495d      	ldr	r1, [pc, #372]	; (8001084 <main+0x304>)
 8000f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f12:	f7ff fe77 	bl	8000c04 <__aeabi_fdiv>
 8000f16:	4603      	mov	r3, r0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30

   calib1 = (uint8_t) temp1;
 8000f1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f1c:	f7ff ff0e 	bl	8000d3c <__aeabi_f2uiz>
 8000f20:	4603      	mov	r3, r0
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b58      	ldr	r3, [pc, #352]	; (8001088 <main+0x308>)
 8000f26:	701a      	strb	r2, [r3, #0]
   calib2 = (uint8_t) temp2;
 8000f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f2a:	f7ff ff07 	bl	8000d3c <__aeabi_f2uiz>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b56      	ldr	r3, [pc, #344]	; (800108c <main+0x30c>)
 8000f34:	701a      	strb	r2, [r3, #0]

   uint16_t theta[6];
   for(int i = 0; i<6; i++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f3a:	e00b      	b.n	8000f54 <main+0x1d4>
	   theta[i] = 1500;
 8000f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000f44:	4413      	add	r3, r2
 8000f46:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f4a:	f823 2c1c 	strh.w	r2, [r3, #-28]
   for(int i = 0; i<6; i++){
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	3301      	adds	r3, #1
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	ddf0      	ble.n	8000f3c <main+0x1bc>
//
//	  for(float angle = 45; angle > -45; angle -=0.1){
//		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, convert_angle(angle));
//		  HAL_Delay(10);
//	  }
	  if(a[0] < 1000){
 8000f5a:	4b47      	ldr	r3, [pc, #284]	; (8001078 <main+0x2f8>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f62:	d207      	bcs.n	8000f74 <main+0x1f4>
		  if(theta[3] > 1000){
 8000f64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f6a:	d903      	bls.n	8000f74 <main+0x1f4>
	      theta[3]--;
 8000f6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	847b      	strh	r3, [r7, #34]	; 0x22
		  }


	  }

	  if(a[0] > 3000){
 8000f74:	4b40      	ldr	r3, [pc, #256]	; (8001078 <main+0x2f8>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d907      	bls.n	8000f90 <main+0x210>
	 		  if(theta[3] < 2000){
 8000f80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f82:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f86:	d203      	bcs.n	8000f90 <main+0x210>
	 	      theta[3]++;
 8000f88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	847b      	strh	r3, [r7, #34]	; 0x22
	 		  }


	 	  }

	  if(a[1] < 1000){
 8000f90:	4b39      	ldr	r3, [pc, #228]	; (8001078 <main+0x2f8>)
 8000f92:	885b      	ldrh	r3, [r3, #2]
 8000f94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f98:	d207      	bcs.n	8000faa <main+0x22a>
			  if(theta[4] > 1000){
 8000f9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fa0:	d903      	bls.n	8000faa <main+0x22a>
		      theta[4]--;
 8000fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fa4:	3b01      	subs	r3, #1
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
			  }


		  }

		  if(a[1] > 3000){
 8000faa:	4b33      	ldr	r3, [pc, #204]	; (8001078 <main+0x2f8>)
 8000fac:	885b      	ldrh	r3, [r3, #2]
 8000fae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d907      	bls.n	8000fc6 <main+0x246>
		 		  if(theta[4] < 2000){
 8000fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fbc:	d203      	bcs.n	8000fc6 <main+0x246>
		 	      theta[4]++;
 8000fbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		 		  }


		 	  }

		  if(a[3] < 1000){
 8000fc6:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <main+0x2f8>)
 8000fc8:	88db      	ldrh	r3, [r3, #6]
 8000fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fce:	d207      	bcs.n	8000fe0 <main+0x260>
					  if(theta[2] > 1000){
 8000fd0:	8c3b      	ldrh	r3, [r7, #32]
 8000fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fd6:	d903      	bls.n	8000fe0 <main+0x260>
				      theta[2]--;
 8000fd8:	8c3b      	ldrh	r3, [r7, #32]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	843b      	strh	r3, [r7, #32]
					  }


				  }

				  if(a[3] > 3000){
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <main+0x2f8>)
 8000fe2:	88db      	ldrh	r3, [r3, #6]
 8000fe4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d907      	bls.n	8000ffc <main+0x27c>
				 		  if(theta[2] < 2000){
 8000fec:	8c3b      	ldrh	r3, [r7, #32]
 8000fee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ff2:	d203      	bcs.n	8000ffc <main+0x27c>
				 	      theta[2]++;
 8000ff4:	8c3b      	ldrh	r3, [r7, #32]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	843b      	strh	r3, [r7, #32]
				 		  }


		 	  }

				  if(a[2] < 1000){
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <main+0x2f8>)
 8000ffe:	889b      	ldrh	r3, [r3, #4]
 8001000:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001004:	d207      	bcs.n	8001016 <main+0x296>
							  if(theta[1] > 800){
 8001006:	8bfb      	ldrh	r3, [r7, #30]
 8001008:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800100c:	d903      	bls.n	8001016 <main+0x296>
						      theta[1]--;
 800100e:	8bfb      	ldrh	r3, [r7, #30]
 8001010:	3b01      	subs	r3, #1
 8001012:	b29b      	uxth	r3, r3
 8001014:	83fb      	strh	r3, [r7, #30]
							  }


						  }

						  if(a[2] > 3000){
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <main+0x2f8>)
 8001018:	889b      	ldrh	r3, [r3, #4]
 800101a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800101e:	4293      	cmp	r3, r2
 8001020:	d908      	bls.n	8001034 <main+0x2b4>
						 		  if(theta[1] < 2200){
 8001022:	8bfb      	ldrh	r3, [r7, #30]
 8001024:	f640 0297 	movw	r2, #2199	; 0x897
 8001028:	4293      	cmp	r3, r2
 800102a:	d803      	bhi.n	8001034 <main+0x2b4>
						 	      theta[1]++;
 800102c:	8bfb      	ldrh	r3, [r7, #30]
 800102e:	3301      	adds	r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	83fb      	strh	r3, [r7, #30]
					//	 	      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, theta[5]);
						 		  }


				 	  }
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, theta[2]);
 8001034:	8c3a      	ldrh	r2, [r7, #32]
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <main+0x2f0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, theta[1]);
 800103c:	8bfa      	ldrh	r2, [r7, #30]
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <main+0x2f0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
//	  for(uint16_t i = 1100; i > 1000; i--){
//		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, i);
//		  HAL_Delay(5);
//	  }

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, theta[3]);
 8001044:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <main+0x2f4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, theta[4]);
 800104c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <main+0x2f4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, theta[5]);
 8001054:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <main+0x2f4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
      HAL_Delay(5);
 800105c:	2005      	movs	r0, #5
 800105e:	f000 fe37 	bl	8001cd0 <HAL_Delay>
	  if(a[0] < 1000){
 8001062:	e77a      	b.n	8000f5a <main+0x1da>
 8001064:	f3af 8000 	nop.w
 8001068:	00000000 	.word	0x00000000
 800106c:	406fe000 	.word	0x406fe000
 8001070:	20000328 	.word	0x20000328
 8001074:	20000224 	.word	0x20000224
 8001078:	20000368 	.word	0x20000368
 800107c:	20000264 	.word	0x20000264
 8001080:	40b00000 	.word	0x40b00000
 8001084:	42c80000 	.word	0x42c80000
 8001088:	2000031a 	.word	0x2000031a
 800108c:	20000198 	.word	0x20000198

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f008 f9fe 	bl	80094a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 f9aa 	bl	8004440 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010f2:	f000 fb1f 	bl	8001734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001106:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2102      	movs	r1, #2
 8001112:	4618      	mov	r0, r3
 8001114:	f003 fc14 	bl	8004940 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800111e:	f000 fb09 	bl	8001734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001122:	2312      	movs	r3, #18
 8001124:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001126:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800112a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fd6e 	bl	8004c14 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800113e:	f000 faf9 	bl	8001734 <Error_Handler>
  }
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	; 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <MX_ADC1_Init+0xcc>)
 800115e:	4a2f      	ldr	r2, [pc, #188]	; (800121c <MX_ADC1_Init+0xd0>)
 8001160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <MX_ADC1_Init+0xcc>)
 8001164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_ADC1_Init+0xcc>)
 800116c:	2201      	movs	r2, #1
 800116e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <MX_ADC1_Init+0xcc>)
 8001172:	2200      	movs	r2, #0
 8001174:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <MX_ADC1_Init+0xcc>)
 8001178:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800117c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <MX_ADC1_Init+0xcc>)
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <MX_ADC1_Init+0xcc>)
 8001186:	2204      	movs	r2, #4
 8001188:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <MX_ADC1_Init+0xcc>)
 800118c:	f000 fdc2 	bl	8001d14 <HAL_ADC_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001196:	f000 facd 	bl	8001734 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119e:	2301      	movs	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011a2:	2307      	movs	r3, #7
 80011a4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	481b      	ldr	r0, [pc, #108]	; (8001218 <MX_ADC1_Init+0xcc>)
 80011ac:	f000 ff84 	bl	80020b8 <HAL_ADC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011b6:	f000 fabd 	bl	8001734 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011be:	2302      	movs	r3, #2
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <MX_ADC1_Init+0xcc>)
 80011c8:	f000 ff76 	bl	80020b8 <HAL_ADC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80011d2:	f000 faaf 	bl	8001734 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011d6:	2304      	movs	r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011da:	2303      	movs	r3, #3
 80011dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_ADC1_Init+0xcc>)
 80011e4:	f000 ff68 	bl	80020b8 <HAL_ADC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80011ee:	f000 faa1 	bl	8001734 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011f2:	2305      	movs	r3, #5
 80011f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80011f6:	2304      	movs	r3, #4
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <MX_ADC1_Init+0xcc>)
 8001200:	f000 ff5a 	bl	80020b8 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800120a:	f000 fa93 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000264 	.word	0x20000264
 800121c:	40012400 	.word	0x40012400

08001220 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8001230:	4b18      	ldr	r3, [pc, #96]	; (8001294 <MX_ADC2_Init+0x74>)
 8001232:	4a19      	ldr	r2, [pc, #100]	; (8001298 <MX_ADC2_Init+0x78>)
 8001234:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <MX_ADC2_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <MX_ADC2_Init+0x74>)
 800123e:	2200      	movs	r2, #0
 8001240:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <MX_ADC2_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_ADC2_Init+0x74>)
 800124a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800124e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_ADC2_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_ADC2_Init+0x74>)
 8001258:	2201      	movs	r2, #1
 800125a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_ADC2_Init+0x74>)
 800125e:	f000 fd59 	bl	8001d14 <HAL_ADC_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 fa64 	bl	8001734 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800126c:	2302      	movs	r3, #2
 800126e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001270:	2301      	movs	r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_ADC2_Init+0x74>)
 800127e:	f000 ff1b 	bl	80020b8 <HAL_ADC_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001288:	f000 fa54 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200001dc 	.word	0x200001dc
 8001298:	40012800 	.word	0x40012800

0800129c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	463b      	mov	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b8:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MX_TIM1_Init+0x98>)
 80012ba:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <MX_TIM1_Init+0x9c>)
 80012bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <MX_TIM1_Init+0x98>)
 80012c0:	2247      	movs	r2, #71	; 0x47
 80012c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_TIM1_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_TIM1_Init+0x98>)
 80012cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_TIM1_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MX_TIM1_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_TIM1_Init+0x98>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012e4:	4813      	ldr	r0, [pc, #76]	; (8001334 <MX_TIM1_Init+0x98>)
 80012e6:	f003 fd4b 	bl	8004d80 <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80012f0:	f000 fa20 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_TIM1_Init+0x98>)
 8001302:	f003 fe95 	bl	8005030 <HAL_TIM_ConfigClockSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800130c:	f000 fa12 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM1_Init+0x98>)
 800131e:	f004 f9e3 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001328:	f000 fa04 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200002d8 	.word	0x200002d8
 8001338:	40012c00 	.word	0x40012c00

0800133c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
 8001368:	615a      	str	r2, [r3, #20]
 800136a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <MX_TIM2_Init+0x114>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <MX_TIM2_Init+0x114>)
 8001376:	2247      	movs	r2, #71	; 0x47
 8001378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <MX_TIM2_Init+0x114>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <MX_TIM2_Init+0x114>)
 8001382:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001386:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <MX_TIM2_Init+0x114>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b30      	ldr	r3, [pc, #192]	; (8001450 <MX_TIM2_Init+0x114>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001394:	482e      	ldr	r0, [pc, #184]	; (8001450 <MX_TIM2_Init+0x114>)
 8001396:	f003 fcf3 	bl	8004d80 <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013a0:	f000 f9c8 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4827      	ldr	r0, [pc, #156]	; (8001450 <MX_TIM2_Init+0x114>)
 80013b2:	f003 fe3d 	bl	8005030 <HAL_TIM_ConfigClockSource>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80013bc:	f000 f9ba 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c0:	4823      	ldr	r0, [pc, #140]	; (8001450 <MX_TIM2_Init+0x114>)
 80013c2:	f003 fd08 	bl	8004dd6 <HAL_TIM_PWM_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80013cc:	f000 f9b2 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4619      	mov	r1, r3
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <MX_TIM2_Init+0x114>)
 80013e0:	f004 f982 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80013ea:	f000 f9a3 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ee:	2360      	movs	r3, #96	; 0x60
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	4619      	mov	r1, r3
 8001404:	4812      	ldr	r0, [pc, #72]	; (8001450 <MX_TIM2_Init+0x114>)
 8001406:	f003 fd4d 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001410:	f000 f990 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	2208      	movs	r2, #8
 8001418:	4619      	mov	r1, r3
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_TIM2_Init+0x114>)
 800141c:	f003 fd42 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001426:	f000 f985 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	220c      	movs	r2, #12
 800142e:	4619      	mov	r1, r3
 8001430:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_TIM2_Init+0x114>)
 8001432:	f003 fd37 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800143c:	f000 f97a 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001440:	4803      	ldr	r0, [pc, #12]	; (8001450 <MX_TIM2_Init+0x114>)
 8001442:	f000 fa99 	bl	8001978 <HAL_TIM_MspPostInit>

}
 8001446:	bf00      	nop
 8001448:	3738      	adds	r7, #56	; 0x38
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000328 	.word	0x20000328

08001454 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001484:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <MX_TIM3_Init+0x130>)
 8001486:	4a40      	ldr	r2, [pc, #256]	; (8001588 <MX_TIM3_Init+0x134>)
 8001488:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <MX_TIM3_Init+0x130>)
 800148c:	2247      	movs	r2, #71	; 0x47
 800148e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <MX_TIM3_Init+0x130>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <MX_TIM3_Init+0x130>)
 8001498:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800149c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <MX_TIM3_Init+0x130>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b37      	ldr	r3, [pc, #220]	; (8001584 <MX_TIM3_Init+0x130>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014aa:	4836      	ldr	r0, [pc, #216]	; (8001584 <MX_TIM3_Init+0x130>)
 80014ac:	f003 fc68 	bl	8004d80 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014b6:	f000 f93d 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c4:	4619      	mov	r1, r3
 80014c6:	482f      	ldr	r0, [pc, #188]	; (8001584 <MX_TIM3_Init+0x130>)
 80014c8:	f003 fdb2 	bl	8005030 <HAL_TIM_ConfigClockSource>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80014d2:	f000 f92f 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014d6:	482b      	ldr	r0, [pc, #172]	; (8001584 <MX_TIM3_Init+0x130>)
 80014d8:	f003 fc7d 	bl	8004dd6 <HAL_TIM_PWM_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80014e2:	f000 f927 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ee:	f107 0320 	add.w	r3, r7, #32
 80014f2:	4619      	mov	r1, r3
 80014f4:	4823      	ldr	r0, [pc, #140]	; (8001584 <MX_TIM3_Init+0x130>)
 80014f6:	f004 f8f7 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001500:	f000 f918 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001504:	2360      	movs	r3, #96	; 0x60
 8001506:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	481a      	ldr	r0, [pc, #104]	; (8001584 <MX_TIM3_Init+0x130>)
 800151c:	f003 fcc2 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001526:	f000 f905 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2204      	movs	r2, #4
 800152e:	4619      	mov	r1, r3
 8001530:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_TIM3_Init+0x130>)
 8001532:	f003 fcb7 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800153c:	f000 f8fa 	bl	8001734 <Error_Handler>
  }
  sConfigOC.Pulse = 1000;
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2208      	movs	r2, #8
 800154a:	4619      	mov	r1, r3
 800154c:	480d      	ldr	r0, [pc, #52]	; (8001584 <MX_TIM3_Init+0x130>)
 800154e:	f003 fca9 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8001558:	f000 f8ec 	bl	8001734 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	220c      	movs	r2, #12
 8001564:	4619      	mov	r1, r3
 8001566:	4807      	ldr	r0, [pc, #28]	; (8001584 <MX_TIM3_Init+0x130>)
 8001568:	f003 fc9c 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 8001572:	f000 f8df 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001576:	4803      	ldr	r0, [pc, #12]	; (8001584 <MX_TIM3_Init+0x130>)
 8001578:	f000 f9fe 	bl	8001978 <HAL_TIM_MspPostInit>

}
 800157c:	bf00      	nop
 800157e:	3738      	adds	r7, #56	; 0x38
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000224 	.word	0x20000224
 8001588:	40000400 	.word	0x40000400

0800158c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <MX_TIM4_Init+0x94>)
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <MX_TIM4_Init+0x98>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <MX_TIM4_Init+0x94>)
 80015b0:	2247      	movs	r2, #71	; 0x47
 80015b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_TIM4_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_TIM4_Init+0x94>)
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_TIM4_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_TIM4_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015ce:	4814      	ldr	r0, [pc, #80]	; (8001620 <MX_TIM4_Init+0x94>)
 80015d0:	f003 fbd6 	bl	8004d80 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80015da:	f000 f8ab 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4619      	mov	r1, r3
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <MX_TIM4_Init+0x94>)
 80015ec:	f003 fd20 	bl	8005030 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80015f6:	f000 f89d 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001602:	463b      	mov	r3, r7
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	; (8001620 <MX_TIM4_Init+0x94>)
 8001608:	f004 f86e 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001612:	f000 f88f 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	2000019c 	.word	0x2000019c
 8001624:	40000800 	.word	0x40000800

08001628 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_DMA_Init+0x38>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <MX_DMA_Init+0x38>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6153      	str	r3, [r2, #20]
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_DMA_Init+0x38>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	200b      	movs	r0, #11
 800164c:	f000 fff5 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001650:	200b      	movs	r0, #11
 8001652:	f001 f80e 	bl	8002672 <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000

08001664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MX_GPIO_Init+0xc0>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	4a29      	ldr	r2, [pc, #164]	; (8001724 <MX_GPIO_Init+0xc0>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6193      	str	r3, [r2, #24]
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_GPIO_Init+0xc0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_GPIO_Init+0xc0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	4a23      	ldr	r2, [pc, #140]	; (8001724 <MX_GPIO_Init+0xc0>)
 8001696:	f043 0320 	orr.w	r3, r3, #32
 800169a:	6193      	str	r3, [r2, #24]
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_GPIO_Init+0xc0>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f003 0320 	and.w	r3, r3, #32
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_GPIO_Init+0xc0>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <MX_GPIO_Init+0xc0>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_GPIO_Init+0xc0>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_GPIO_Init+0xc0>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a17      	ldr	r2, [pc, #92]	; (8001724 <MX_GPIO_Init+0xc0>)
 80016c6:	f043 0308 	orr.w	r3, r3, #8
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_GPIO_Init+0xc0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_GPIO_Init+0xc4>)
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	480f      	ldr	r0, [pc, #60]	; (800172c <MX_GPIO_Init+0xc8>)
 80016ee:	f001 f9c9 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <MX_GPIO_Init+0xcc>)
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <MX_GPIO_Init+0xc8>)
 8001708:	f001 f9bc 	bl	8002a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	2028      	movs	r0, #40	; 0x28
 8001712:	f000 ff92 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001716:	2028      	movs	r0, #40	; 0x28
 8001718:	f000 ffab 	bl	8002672 <HAL_NVIC_EnableIRQ>

}
 800171c:	bf00      	nop
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40021000 	.word	0x40021000
 8001728:	10310000 	.word	0x10310000
 800172c:	40011000 	.word	0x40011000
 8001730:	10110000 	.word	0x10110000

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0318 	add.w	r3, r7, #24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a3c      	ldr	r2, [pc, #240]	; (80018b0 <HAL_ADC_MspInit+0x10c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d14a      	bne.n	800185a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c4:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a3a      	ldr	r2, [pc, #232]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a34      	ldr	r2, [pc, #208]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80017f4:	233e      	movs	r3, #62	; 0x3e
 80017f6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f8:	2303      	movs	r3, #3
 80017fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0318 	add.w	r3, r7, #24
 8001800:	4619      	mov	r1, r3
 8001802:	482d      	ldr	r0, [pc, #180]	; (80018b8 <HAL_ADC_MspInit+0x114>)
 8001804:	f001 f93e 	bl	8002a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001808:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_ADC_MspInit+0x118>)
 800180a:	4a2d      	ldr	r2, [pc, #180]	; (80018c0 <HAL_ADC_MspInit+0x11c>)
 800180c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_ADC_MspInit+0x118>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_ADC_MspInit+0x118>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <HAL_ADC_MspInit+0x118>)
 800181c:	2280      	movs	r2, #128	; 0x80
 800181e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <HAL_ADC_MspInit+0x118>)
 8001822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001826:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <HAL_ADC_MspInit+0x118>)
 800182a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <HAL_ADC_MspInit+0x118>)
 8001832:	2220      	movs	r2, #32
 8001834:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_ADC_MspInit+0x118>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800183c:	481f      	ldr	r0, [pc, #124]	; (80018bc <HAL_ADC_MspInit+0x118>)
 800183e:	f000 ff33 	bl	80026a8 <HAL_DMA_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001848:	f7ff ff74 	bl	8001734 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_ADC_MspInit+0x118>)
 8001850:	621a      	str	r2, [r3, #32]
 8001852:	4a1a      	ldr	r2, [pc, #104]	; (80018bc <HAL_ADC_MspInit+0x118>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001858:	e026      	b.n	80018a8 <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_ADC_MspInit+0x120>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d121      	bne.n	80018a8 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 800186a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_ADC_MspInit+0x110>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001894:	2304      	movs	r3, #4
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001898:	2303      	movs	r3, #3
 800189a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0318 	add.w	r3, r7, #24
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_ADC_MspInit+0x114>)
 80018a4:	f001 f8ee 	bl	8002a84 <HAL_GPIO_Init>
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40012400 	.word	0x40012400
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010800 	.word	0x40010800
 80018bc:	20000294 	.word	0x20000294
 80018c0:	40020008 	.word	0x40020008
 80018c4:	40012800 	.word	0x40012800

080018c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a24      	ldr	r2, [pc, #144]	; (8001968 <HAL_TIM_Base_MspInit+0xa0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d10c      	bne.n	80018f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	4a23      	ldr	r2, [pc, #140]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 80018e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018e4:	6193      	str	r3, [r2, #24]
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018f2:	e034      	b.n	800195e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fc:	d10c      	bne.n	8001918 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	4a1a      	ldr	r2, [pc, #104]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	61d3      	str	r3, [r2, #28]
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
}
 8001916:	e022      	b.n	800195e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_TIM_Base_MspInit+0xa8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10c      	bne.n	800193c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	61d3      	str	r3, [r2, #28]
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
}
 800193a:	e010      	b.n	800195e <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <HAL_TIM_Base_MspInit+0xac>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d10b      	bne.n	800195e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_TIM_Base_MspInit+0xa4>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr
 8001968:	40012c00 	.word	0x40012c00
 800196c:	40021000 	.word	0x40021000
 8001970:	40000400 	.word	0x40000400
 8001974:	40000800 	.word	0x40000800

08001978 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	; 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001996:	d144      	bne.n	8001a22 <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001998:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a3d      	ldr	r2, [pc, #244]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2302      	movs	r3, #2
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	482e      	ldr	r0, [pc, #184]	; (8001a98 <HAL_TIM_MspPostInit+0x120>)
 80019de:	f001 f851 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2302      	movs	r3, #2
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4829      	ldr	r0, [pc, #164]	; (8001a9c <HAL_TIM_MspPostInit+0x124>)
 80019f8:	f001 f844 	bl	8002a84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_TIM_MspPostInit+0x128>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a1a:	4a21      	ldr	r2, [pc, #132]	; (8001aa0 <HAL_TIM_MspPostInit+0x128>)
 8001a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a20:	e034      	b.n	8001a8c <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM3)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <HAL_TIM_MspPostInit+0x12c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d12f      	bne.n	8001a8c <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	6193      	str	r3, [r2, #24]
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_TIM_MspPostInit+0x11c>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480b      	ldr	r0, [pc, #44]	; (8001a9c <HAL_TIM_MspPostInit+0x124>)
 8001a70:	f001 f808 	bl	8002a84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a74:	2303      	movs	r3, #3
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4804      	ldr	r0, [pc, #16]	; (8001a98 <HAL_TIM_MspPostInit+0x120>)
 8001a88:	f000 fffc 	bl	8002a84 <HAL_GPIO_Init>
}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40010800 	.word	0x40010800
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40000400 	.word	0x40000400

08001aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr

08001ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <HardFault_Handler+0x4>

08001aba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <MemManage_Handler+0x4>

08001ac0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <BusFault_Handler+0x4>

08001ac6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <UsageFault_Handler+0x4>

08001acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001af4:	f000 f8d0 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <DMA1_Channel1_IRQHandler+0x10>)
 8001b02:	f000 fe8b 	bl	800281c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000294 	.word	0x20000294

08001b10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001b16:	f001 fa58 	bl	8002fca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000840 	.word	0x20000840

08001b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b2c:	f001 f904 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b34:	f001 f900 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001b38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001b3c:	f001 f8fc 	bl	8002d38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]

  //   	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
          }


}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <SystemInit+0x5c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <SystemInit+0x5c>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <SystemInit+0x5c>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4911      	ldr	r1, [pc, #68]	; (8001bb4 <SystemInit+0x5c>)
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <SystemInit+0x60>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <SystemInit+0x5c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <SystemInit+0x5c>)
 8001b7a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b82:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <SystemInit+0x5c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <SystemInit+0x5c>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <SystemInit+0x5c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <SystemInit+0x5c>)
 8001b96:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b9a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <SystemInit+0x5c>)
 8001b9e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ba2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <SystemInit+0x64>)
 8001ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001baa:	609a      	str	r2, [r3, #8]
#endif 
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	f8ff0000 	.word	0xf8ff0000
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001bc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001bc2:	e003      	b.n	8001bcc <LoopCopyDataInit>

08001bc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001bc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bca:	3104      	adds	r1, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bcc:	480a      	ldr	r0, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bd4:	d3f6      	bcc.n	8001bc4 <CopyDataInit>
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bd8:	e002      	b.n	8001be0 <LoopFillZerobss>

08001bda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bdc:	f842 3b04 	str.w	r3, [r2], #4

08001be0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001be2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001be4:	d3f9      	bcc.n	8001bda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001be6:	f7ff ffb7 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bea:	f007 fc35 	bl	8009458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff f8c7 	bl	8000d80 <main>
  bx lr
 8001bf2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bf4:	08009644 	.word	0x08009644
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bfc:	20000164 	.word	0x20000164
  ldr r2, =_sbss
 8001c00:	20000164 	.word	0x20000164
  ldr r3, = _ebss
 8001c04:	20000b2c 	.word	0x20000b2c

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>
	...

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_Init+0x28>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_Init+0x28>)
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 fd01 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	2000      	movs	r0, #0
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fd8a 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fd19 	bl	800268e <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 fce1 	bl	800263a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	; (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000378 	.word	0x20000378

08001cbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000378 	.word	0x20000378

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_Delay+0x40>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000008 	.word	0x20000008

08001d14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0be      	b.n	8001eb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fd26 	bl	80017a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 faf7 	bl	800234c <ADC_ConversionStop_Disable>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	f003 0310 	and.w	r3, r3, #16
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f040 8099 	bne.w	8001ea2 <HAL_ADC_Init+0x18e>
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 8095 	bne.w	8001ea2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d80:	f023 0302 	bic.w	r3, r3, #2
 8001d84:	f043 0202 	orr.w	r2, r3, #2
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7b1b      	ldrb	r3, [r3, #12]
 8001d9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dac:	d003      	beq.n	8001db6 <HAL_ADC_Init+0xa2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_ADC_Init+0xa8>
 8001db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dba:	e000      	b.n	8001dbe <HAL_ADC_Init+0xaa>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7d1b      	ldrb	r3, [r3, #20]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d119      	bne.n	8001e00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7b1b      	ldrb	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	035a      	lsls	r2, r3, #13
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e00b      	b.n	8001e00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f043 0220 	orr.w	r2, r3, #32
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_ADC_Init+0x1a8>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6812      	ldr	r2, [r2, #0]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e30:	d003      	beq.n	8001e3a <HAL_ADC_Init+0x126>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d104      	bne.n	8001e44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	051b      	lsls	r3, r3, #20
 8001e42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	4b18      	ldr	r3, [pc, #96]	; (8001ec0 <HAL_ADC_Init+0x1ac>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d10b      	bne.n	8001e80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e7e:	e018      	b.n	8001eb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e84:	f023 0312 	bic.w	r3, r3, #18
 8001e88:	f043 0210 	orr.w	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ea0:	e007      	b.n	8001eb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f043 0210 	orr.w	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	ffe1f7fd 	.word	0xffe1f7fd
 8001ec0:	ff1f0efe 	.word	0xff1f0efe

08001ec4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a64      	ldr	r2, [pc, #400]	; (800206c <HAL_ADC_Start_DMA+0x1a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_ADC_Start_DMA+0x24>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a63      	ldr	r2, [pc, #396]	; (8002070 <HAL_ADC_Start_DMA+0x1ac>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_Start_DMA+0x32>
 8001ee8:	4b60      	ldr	r3, [pc, #384]	; (800206c <HAL_ADC_Start_DMA+0x1a8>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f040 80b3 	bne.w	800205c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_ADC_Start_DMA+0x40>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0ae      	b.n	8002062 <HAL_ADC_Start_DMA+0x19e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f9cb 	bl	80022a8 <ADC_Enable>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f040 809a 	bne.w	8002052 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a4e      	ldr	r2, [pc, #312]	; (8002070 <HAL_ADC_Start_DMA+0x1ac>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_Start_DMA+0x84>
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_ADC_Start_DMA+0x1a8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d115      	bne.n	8001f74 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d026      	beq.n	8001fb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f72:	e01d      	b.n	8001fb0 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a39      	ldr	r2, [pc, #228]	; (800206c <HAL_ADC_Start_DMA+0x1a8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d004      	beq.n	8001f94 <HAL_ADC_Start_DMA+0xd0>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a38      	ldr	r2, [pc, #224]	; (8002070 <HAL_ADC_Start_DMA+0x1ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10d      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0xec>
 8001f94:	4b35      	ldr	r3, [pc, #212]	; (800206c <HAL_ADC_Start_DMA+0x1a8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f023 0206 	bic.w	r2, r3, #6
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fc8:	e002      	b.n	8001fd0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_ADC_Start_DMA+0x1b0>)
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_ADC_Start_DMA+0x1b4>)
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <HAL_ADC_Start_DMA+0x1b8>)
 8001fee:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0202 	mvn.w	r2, #2
 8001ff8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002008:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a18      	ldr	r0, [r3, #32]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	334c      	adds	r3, #76	; 0x4c
 8002014:	4619      	mov	r1, r3
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f000 fb9f 	bl	800275c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002028:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800202c:	d108      	bne.n	8002040 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800203c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800203e:	e00f      	b.n	8002060 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800204e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002050:	e006      	b.n	8002060 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800205a:	e001      	b.n	8002060 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002060:	7dfb      	ldrb	r3, [r7, #23]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40012400 	.word	0x40012400
 8002070:	40012800 	.word	0x40012800
 8002074:	080023c1 	.word	0x080023c1
 8002078:	0800243d 	.word	0x0800243d
 800207c:	08002459 	.word	0x08002459

08002080 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x20>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0dc      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1da>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b06      	cmp	r3, #6
 80020e6:	d81c      	bhi.n	8002122 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b05      	subs	r3, #5
 80020fa:	221f      	movs	r2, #31
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	4019      	ands	r1, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b05      	subs	r3, #5
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
 8002120:	e03c      	b.n	800219c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d81c      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	3b23      	subs	r3, #35	; 0x23
 800213c:	221f      	movs	r2, #31
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	4019      	ands	r1, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b23      	subs	r3, #35	; 0x23
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
 8002162:	e01b      	b.n	800219c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b41      	subs	r3, #65	; 0x41
 8002176:	221f      	movs	r2, #31
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	3b41      	subs	r3, #65	; 0x41
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b09      	cmp	r3, #9
 80021a2:	d91c      	bls.n	80021de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68d9      	ldr	r1, [r3, #12]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	3b1e      	subs	r3, #30
 80021b6:	2207      	movs	r2, #7
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	4019      	ands	r1, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6898      	ldr	r0, [r3, #8]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	3b1e      	subs	r3, #30
 80021d0:	fa00 f203 	lsl.w	r2, r0, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	e019      	b.n	8002212 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6919      	ldr	r1, [r3, #16]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	2207      	movs	r2, #7
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	4019      	ands	r1, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	6898      	ldr	r0, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	fa00 f203 	lsl.w	r2, r0, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b10      	cmp	r3, #16
 8002218:	d003      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800221e:	2b11      	cmp	r3, #17
 8002220:	d132      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_ADC_ConfigChannel+0x1e4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d125      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d126      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002248:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b10      	cmp	r3, #16
 8002250:	d11a      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	0c9a      	lsrs	r2, r3, #18
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002268:	e002      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3b01      	subs	r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f9      	bne.n	800226a <HAL_ADC_ConfigChannel+0x1b2>
 8002276:	e007      	b.n	8002288 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227c:	f043 0220 	orr.w	r2, r3, #32
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40012400 	.word	0x40012400
 80022a0:	20000000 	.word	0x20000000
 80022a4:	431bde83 	.word	0x431bde83

080022a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d039      	beq.n	800233a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <ADC_Enable+0x9c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1b      	ldr	r2, [pc, #108]	; (8002348 <ADC_Enable+0xa0>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	0c9b      	lsrs	r3, r3, #18
 80022e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022e4:	e002      	b.n	80022ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f9      	bne.n	80022e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022f2:	f7ff fce3 	bl	8001cbc <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022f8:	e018      	b.n	800232c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022fa:	f7ff fcdf 	bl	8001cbc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d911      	bls.n	800232c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f043 0210 	orr.w	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	f043 0201 	orr.w	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e007      	b.n	800233c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b01      	cmp	r3, #1
 8002338:	d1df      	bne.n	80022fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000000 	.word	0x20000000
 8002348:	431bde83 	.word	0x431bde83

0800234c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d127      	bne.n	80023b6 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0201 	bic.w	r2, r2, #1
 8002374:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002376:	f7ff fca1 	bl	8001cbc <HAL_GetTick>
 800237a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800237c:	e014      	b.n	80023a8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800237e:	f7ff fc9d 	bl	8001cbc <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d90d      	bls.n	80023a8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	f043 0210 	orr.w	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e007      	b.n	80023b8 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d0e3      	beq.n	800237e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d127      	bne.n	800242a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023f4:	d115      	bne.n	8002422 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d111      	bne.n	8002422 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff fe2c 	bl	8002080 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002428:	e004      	b.n	8002434 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f7ff fe21 	bl	8002092 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f043 0204 	orr.w	r2, r3, #4
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff fe10 	bl	80020a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4906      	ldr	r1, [pc, #24]	; (8002524 <__NVIC_EnableIRQ+0x34>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	e000e100 	.word	0xe000e100

08002528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db0a      	blt.n	8002552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	b2da      	uxtb	r2, r3
 8002540:	490c      	ldr	r1, [pc, #48]	; (8002574 <__NVIC_SetPriority+0x4c>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	0112      	lsls	r2, r2, #4
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	440b      	add	r3, r1
 800254c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002550:	e00a      	b.n	8002568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4908      	ldr	r1, [pc, #32]	; (8002578 <__NVIC_SetPriority+0x50>)
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	3b04      	subs	r3, #4
 8002560:	0112      	lsls	r2, r2, #4
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	440b      	add	r3, r1
 8002566:	761a      	strb	r2, [r3, #24]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	2b04      	cmp	r3, #4
 8002598:	bf28      	it	cs
 800259a:	2304      	movcs	r3, #4
 800259c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3304      	adds	r3, #4
 80025a2:	2b06      	cmp	r3, #6
 80025a4:	d902      	bls.n	80025ac <NVIC_EncodePriority+0x30>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3b03      	subs	r3, #3
 80025aa:	e000      	b.n	80025ae <NVIC_EncodePriority+0x32>
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	f04f 32ff 	mov.w	r2, #4294967295
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43da      	mvns	r2, r3
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	401a      	ands	r2, r3
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c4:	f04f 31ff 	mov.w	r1, #4294967295
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa01 f303 	lsl.w	r3, r1, r3
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d4:	4313      	orrs	r3, r2
         );
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3724      	adds	r7, #36	; 0x24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	210f      	movs	r1, #15
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f7ff ff90 	bl	8002528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff2d 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff42 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff90 	bl	800257c <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5f 	bl	8002528 <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff35 	bl	80024f0 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffa2 	bl	80025e0 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e043      	b.n	8002746 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_DMA_Init+0xa8>)
 80026c6:	4413      	add	r3, r2
 80026c8:	4a22      	ldr	r2, [pc, #136]	; (8002754 <HAL_DMA_Init+0xac>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	009a      	lsls	r2, r3, #2
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <HAL_DMA_Init+0xb0>)
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	bffdfff8 	.word	0xbffdfff8
 8002754:	cccccccd 	.word	0xcccccccd
 8002758:	40020000 	.word	0x40020000

0800275c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_DMA_Start_IT+0x20>
 8002778:	2302      	movs	r3, #2
 800277a:	e04a      	b.n	8002812 <HAL_DMA_Start_IT+0xb6>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278a:	2b01      	cmp	r3, #1
 800278c:	d13a      	bne.n	8002804 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2202      	movs	r2, #2
 8002792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f938 	bl	8002a28 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 020e 	orr.w	r2, r2, #14
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e00f      	b.n	80027f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0204 	bic.w	r2, r2, #4
 80027e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 020a 	orr.w	r2, r2, #10
 80027f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0201 	orr.w	r2, r2, #1
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e005      	b.n	8002810 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800280c:	2302      	movs	r3, #2
 800280e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002810:	7dfb      	ldrb	r3, [r7, #23]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	2204      	movs	r2, #4
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d04f      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xc8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04a      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0204 	bic.w	r2, r2, #4
 800286a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_DMA_IRQHandler+0x1f0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d029      	beq.n	80028ca <HAL_DMA_IRQHandler+0xae>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_DMA_IRQHandler+0x1f4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d022      	beq.n	80028c6 <HAL_DMA_IRQHandler+0xaa>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a63      	ldr	r2, [pc, #396]	; (8002a14 <HAL_DMA_IRQHandler+0x1f8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01a      	beq.n	80028c0 <HAL_DMA_IRQHandler+0xa4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a62      	ldr	r2, [pc, #392]	; (8002a18 <HAL_DMA_IRQHandler+0x1fc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d012      	beq.n	80028ba <HAL_DMA_IRQHandler+0x9e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a60      	ldr	r2, [pc, #384]	; (8002a1c <HAL_DMA_IRQHandler+0x200>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d00a      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x98>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5f      	ldr	r2, [pc, #380]	; (8002a20 <HAL_DMA_IRQHandler+0x204>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d102      	bne.n	80028ae <HAL_DMA_IRQHandler+0x92>
 80028a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028ac:	e00e      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028b2:	e00b      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028b8:	e008      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028be:	e005      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028c4:	e002      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028c6:	2340      	movs	r3, #64	; 0x40
 80028c8:	e000      	b.n	80028cc <HAL_DMA_IRQHandler+0xb0>
 80028ca:	2304      	movs	r3, #4
 80028cc:	4a55      	ldr	r2, [pc, #340]	; (8002a24 <HAL_DMA_IRQHandler+0x208>)
 80028ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8094 	beq.w	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028e2:	e08e      	b.n	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	2202      	movs	r2, #2
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d056      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x186>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d051      	beq.n	80029a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10b      	bne.n	8002924 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 020a 	bic.w	r2, r2, #10
 800291a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a38      	ldr	r2, [pc, #224]	; (8002a0c <HAL_DMA_IRQHandler+0x1f0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d029      	beq.n	8002982 <HAL_DMA_IRQHandler+0x166>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a37      	ldr	r2, [pc, #220]	; (8002a10 <HAL_DMA_IRQHandler+0x1f4>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_IRQHandler+0x162>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a35      	ldr	r2, [pc, #212]	; (8002a14 <HAL_DMA_IRQHandler+0x1f8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01a      	beq.n	8002978 <HAL_DMA_IRQHandler+0x15c>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a34      	ldr	r2, [pc, #208]	; (8002a18 <HAL_DMA_IRQHandler+0x1fc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d012      	beq.n	8002972 <HAL_DMA_IRQHandler+0x156>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a32      	ldr	r2, [pc, #200]	; (8002a1c <HAL_DMA_IRQHandler+0x200>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00a      	beq.n	800296c <HAL_DMA_IRQHandler+0x150>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <HAL_DMA_IRQHandler+0x204>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d102      	bne.n	8002966 <HAL_DMA_IRQHandler+0x14a>
 8002960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002964:	e00e      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296a:	e00b      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 800296c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002970:	e008      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002976:	e005      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297c:	e002      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 800297e:	2320      	movs	r3, #32
 8002980:	e000      	b.n	8002984 <HAL_DMA_IRQHandler+0x168>
 8002982:	2302      	movs	r3, #2
 8002984:	4a27      	ldr	r2, [pc, #156]	; (8002a24 <HAL_DMA_IRQHandler+0x208>)
 8002986:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d034      	beq.n	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029a0:	e02f      	b.n	8002a02 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2208      	movs	r2, #8
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d028      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x1e8>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 020e 	bic.w	r2, r2, #14
 80029ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d004      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	4798      	blx	r3
    }
  }
  return;
 8002a02:	bf00      	nop
 8002a04:	bf00      	nop
}
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40020008 	.word	0x40020008
 8002a10:	4002001c 	.word	0x4002001c
 8002a14:	40020030 	.word	0x40020030
 8002a18:	40020044 	.word	0x40020044
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	4002006c 	.word	0x4002006c
 8002a24:	40020000 	.word	0x40020000

08002a28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3e:	2101      	movs	r1, #1
 8002a40:	fa01 f202 	lsl.w	r2, r1, r2
 8002a44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d108      	bne.n	8002a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a66:	e007      	b.n	8002a78 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	60da      	str	r2, [r3, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b08b      	sub	sp, #44	; 0x2c
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a92:	2300      	movs	r3, #0
 8002a94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a96:	e127      	b.n	8002ce8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	f040 8116 	bne.w	8002ce2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b12      	cmp	r3, #18
 8002abc:	d034      	beq.n	8002b28 <HAL_GPIO_Init+0xa4>
 8002abe:	2b12      	cmp	r3, #18
 8002ac0:	d80d      	bhi.n	8002ade <HAL_GPIO_Init+0x5a>
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d02b      	beq.n	8002b1e <HAL_GPIO_Init+0x9a>
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d804      	bhi.n	8002ad4 <HAL_GPIO_Init+0x50>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d031      	beq.n	8002b32 <HAL_GPIO_Init+0xae>
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d01c      	beq.n	8002b0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ad2:	e048      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d043      	beq.n	8002b60 <HAL_GPIO_Init+0xdc>
 8002ad8:	2b11      	cmp	r3, #17
 8002ada:	d01b      	beq.n	8002b14 <HAL_GPIO_Init+0x90>
          break;
 8002adc:	e043      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ade:	4a89      	ldr	r2, [pc, #548]	; (8002d04 <HAL_GPIO_Init+0x280>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d026      	beq.n	8002b32 <HAL_GPIO_Init+0xae>
 8002ae4:	4a87      	ldr	r2, [pc, #540]	; (8002d04 <HAL_GPIO_Init+0x280>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d806      	bhi.n	8002af8 <HAL_GPIO_Init+0x74>
 8002aea:	4a87      	ldr	r2, [pc, #540]	; (8002d08 <HAL_GPIO_Init+0x284>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d020      	beq.n	8002b32 <HAL_GPIO_Init+0xae>
 8002af0:	4a86      	ldr	r2, [pc, #536]	; (8002d0c <HAL_GPIO_Init+0x288>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01d      	beq.n	8002b32 <HAL_GPIO_Init+0xae>
          break;
 8002af6:	e036      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002af8:	4a85      	ldr	r2, [pc, #532]	; (8002d10 <HAL_GPIO_Init+0x28c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0xae>
 8002afe:	4a85      	ldr	r2, [pc, #532]	; (8002d14 <HAL_GPIO_Init+0x290>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d016      	beq.n	8002b32 <HAL_GPIO_Init+0xae>
 8002b04:	4a84      	ldr	r2, [pc, #528]	; (8002d18 <HAL_GPIO_Init+0x294>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0xae>
          break;
 8002b0a:	e02c      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	623b      	str	r3, [r7, #32]
          break;
 8002b12:	e028      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	623b      	str	r3, [r7, #32]
          break;
 8002b1c:	e023      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	3308      	adds	r3, #8
 8002b24:	623b      	str	r3, [r7, #32]
          break;
 8002b26:	e01e      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	623b      	str	r3, [r7, #32]
          break;
 8002b30:	e019      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	623b      	str	r3, [r7, #32]
          break;
 8002b3e:	e012      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b48:	2308      	movs	r3, #8
 8002b4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	611a      	str	r2, [r3, #16]
          break;
 8002b52:	e008      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b54:	2308      	movs	r3, #8
 8002b56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	615a      	str	r2, [r3, #20]
          break;
 8002b5e:	e002      	b.n	8002b66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
          break;
 8002b64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2bff      	cmp	r3, #255	; 0xff
 8002b6a:	d801      	bhi.n	8002b70 <HAL_GPIO_Init+0xec>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	e001      	b.n	8002b74 <HAL_GPIO_Init+0xf0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3304      	adds	r3, #4
 8002b74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2bff      	cmp	r3, #255	; 0xff
 8002b7a:	d802      	bhi.n	8002b82 <HAL_GPIO_Init+0xfe>
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	e002      	b.n	8002b88 <HAL_GPIO_Init+0x104>
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3b08      	subs	r3, #8
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	210f      	movs	r1, #15
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	43db      	mvns	r3, r3
 8002b98:	401a      	ands	r2, r3
 8002b9a:	6a39      	ldr	r1, [r7, #32]
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 8096 	beq.w	8002ce2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bb6:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_GPIO_Init+0x298>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_GPIO_Init+0x298>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6193      	str	r3, [r2, #24]
 8002bc2:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <HAL_GPIO_Init+0x298>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bce:	4a54      	ldr	r2, [pc, #336]	; (8002d20 <HAL_GPIO_Init+0x29c>)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bda:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	; (8002d24 <HAL_GPIO_Init+0x2a0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_GPIO_Init+0x19e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4a      	ldr	r2, [pc, #296]	; (8002d28 <HAL_GPIO_Init+0x2a4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00d      	beq.n	8002c1e <HAL_GPIO_Init+0x19a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a49      	ldr	r2, [pc, #292]	; (8002d2c <HAL_GPIO_Init+0x2a8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <HAL_GPIO_Init+0x196>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a48      	ldr	r2, [pc, #288]	; (8002d30 <HAL_GPIO_Init+0x2ac>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_GPIO_Init+0x192>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x1a0>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x1a0>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x1a0>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x1a0>
 8002c22:	2300      	movs	r3, #0
 8002c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c34:	493a      	ldr	r1, [pc, #232]	; (8002d20 <HAL_GPIO_Init+0x29c>)
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c4e:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4938      	ldr	r1, [pc, #224]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	600b      	str	r3, [r1, #0]
 8002c5a:	e006      	b.n	8002c6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c5c:	4b35      	ldr	r3, [pc, #212]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	4933      	ldr	r1, [pc, #204]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c76:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	492e      	ldr	r1, [pc, #184]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]
 8002c82:	e006      	b.n	8002c92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c84:	4b2b      	ldr	r3, [pc, #172]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4929      	ldr	r1, [pc, #164]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c9e:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	4924      	ldr	r1, [pc, #144]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
 8002caa:	e006      	b.n	8002cba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cac:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	491f      	ldr	r1, [pc, #124]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	491a      	ldr	r1, [pc, #104]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60cb      	str	r3, [r1, #12]
 8002cd2:	e006      	b.n	8002ce2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	4915      	ldr	r1, [pc, #84]	; (8002d34 <HAL_GPIO_Init+0x2b0>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f47f aed0 	bne.w	8002a98 <HAL_GPIO_Init+0x14>
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	372c      	adds	r7, #44	; 0x2c
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	10210000 	.word	0x10210000
 8002d08:	10110000 	.word	0x10110000
 8002d0c:	10120000 	.word	0x10120000
 8002d10:	10310000 	.word	0x10310000
 8002d14:	10320000 	.word	0x10320000
 8002d18:	10220000 	.word	0x10220000
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40010800 	.word	0x40010800
 8002d28:	40010c00 	.word	0x40010c00
 8002d2c:	40011000 	.word	0x40011000
 8002d30:	40011400 	.word	0x40011400
 8002d34:	40010400 	.word	0x40010400

08002d38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d42:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d006      	beq.n	8002d5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4e:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fef4 	bl	8001b44 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40010400 	.word	0x40010400

08002d68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	b08b      	sub	sp, #44	; 0x2c
 8002d6c:	af06      	add	r7, sp, #24
 8002d6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0fd      	b.n	8002f76 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f006 f8dc 	bl	8008f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2203      	movs	r2, #3
 8002d98:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fd0b 	bl	80057bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	687e      	ldr	r6, [r7, #4]
 8002dae:	466d      	mov	r5, sp
 8002db0:	f106 0410 	add.w	r4, r6, #16
 8002db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002db6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	602b      	str	r3, [r5, #0]
 8002dbc:	1d33      	adds	r3, r6, #4
 8002dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dc0:	6838      	ldr	r0, [r7, #0]
 8002dc2:	f002 fcd5 	bl	8005770 <USB_CoreInit>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e0ce      	b.n	8002f76 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fd06 	bl	80057f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	e04c      	b.n	8002e84 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	b298      	uxth	r0, r3
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3336      	adds	r3, #54	; 0x36
 8002e28:	4602      	mov	r2, r0
 8002e2a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3303      	adds	r3, #3
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	3338      	adds	r3, #56	; 0x38
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	440b      	add	r3, r1
 8002e64:	333c      	adds	r3, #60	; 0x3c
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	440b      	add	r3, r1
 8002e78:	3340      	adds	r3, #64	; 0x40
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	3301      	adds	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d3ad      	bcc.n	8002dea <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e044      	b.n	8002f1e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3b5      	bcc.n	8002e94 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	603b      	str	r3, [r7, #0]
 8002f2e:	687e      	ldr	r6, [r7, #4]
 8002f30:	466d      	mov	r5, sp
 8002f32:	f106 0410 	add.w	r4, r6, #16
 8002f36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	1d33      	adds	r3, r6, #4
 8002f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f42:	6838      	ldr	r0, [r7, #0]
 8002f44:	f002 fc60 	bl	8005808 <USB_DevInit>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00d      	b.n	8002f76 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 fbfa 	bl	8007768 <USB_DevDisconnect>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_Start+0x16>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e016      	b.n	8002fc2 <HAL_PCD_Start+0x44>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f002 fbf5 	bl	8005790 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f006 fa1e 	bl	80093ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 fbce 	bl	8007754 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b088      	sub	sp, #32
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 fbd0 	bl	800777c <USB_ReadInterrupts>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe6:	d102      	bne.n	8002fee <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 fb4a 	bl	8003682 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fbc2 	bl	800777c <USB_ReadInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003002:	d112      	bne.n	800302a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800300c:	b29a      	uxth	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	b292      	uxth	r2, r2
 8003018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f006 f810 	bl	8009042 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003022:	2100      	movs	r1, #0
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f925 	bl	8003274 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f004 fba4 	bl	800777c <USB_ReadInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303e:	d10b      	bne.n	8003058 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003052:	b292      	uxth	r2, r2
 8003054:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f004 fb8d 	bl	800777c <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003068:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306c:	d10b      	bne.n	8003086 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003080:	b292      	uxth	r2, r2
 8003082:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fb76 	bl	800777c <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	d126      	bne.n	80030ea <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0204 	bic.w	r2, r2, #4
 80030ae:	b292      	uxth	r2, r2
 80030b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0208 	bic.w	r2, r2, #8
 80030c6:	b292      	uxth	r2, r2
 80030c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f005 fff1 	bl	80090b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030e4:	b292      	uxth	r2, r2
 80030e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f004 fb44 	bl	800777c <USB_ReadInterrupts>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fe:	f040 8084 	bne.w	800320a <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003102:	2300      	movs	r3, #0
 8003104:	77fb      	strb	r3, [r7, #31]
 8003106:	e011      	b.n	800312c <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	7ffb      	ldrb	r3, [r7, #31]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	441a      	add	r2, r3
 8003114:	7ffb      	ldrb	r3, [r7, #31]
 8003116:	8812      	ldrh	r2, [r2, #0]
 8003118:	b292      	uxth	r2, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	f107 0120 	add.w	r1, r7, #32
 8003120:	440b      	add	r3, r1
 8003122:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	3301      	adds	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	7ffb      	ldrb	r3, [r7, #31]
 800312e:	2b07      	cmp	r3, #7
 8003130:	d9ea      	bls.n	8003108 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	b292      	uxth	r2, r2
 8003146:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	b292      	uxth	r2, r2
 800315e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003162:	bf00      	nop
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800316c:	b29b      	uxth	r3, r3
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f6      	beq.n	8003164 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	b292      	uxth	r2, r2
 800318a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800318e:	2300      	movs	r3, #0
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e010      	b.n	80031b6 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003194:	7ffb      	ldrb	r3, [r7, #31]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6812      	ldr	r2, [r2, #0]
 800319a:	4611      	mov	r1, r2
 800319c:	7ffa      	ldrb	r2, [r7, #31]
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	440a      	add	r2, r1
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	f107 0120 	add.w	r1, r7, #32
 80031a8:	440b      	add	r3, r1
 80031aa:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80031ae:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
 80031b2:	3301      	adds	r3, #1
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d9eb      	bls.n	8003194 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0208 	orr.w	r2, r2, #8
 80031ce:	b292      	uxth	r2, r2
 80031d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031e6:	b292      	uxth	r2, r2
 80031e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0204 	orr.w	r2, r2, #4
 80031fe:	b292      	uxth	r2, r2
 8003200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f005 ff3b 	bl	8009080 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fab4 	bl	800777c <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800321a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800321e:	d10e      	bne.n	800323e <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003228:	b29a      	uxth	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003232:	b292      	uxth	r2, r2
 8003234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f005 fef4 	bl	8009026 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 fa9a 	bl	800777c <USB_ReadInterrupts>
 8003248:	4603      	mov	r3, r0
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003252:	d10b      	bne.n	800326c <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800325c:	b29a      	uxth	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003266:	b292      	uxth	r2, r2
 8003268:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800326c:	bf00      	nop
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_PCD_SetAddress+0x1a>
 800328a:	2302      	movs	r3, #2
 800328c:	e013      	b.n	80032b6 <HAL_PCD_SetAddress+0x42>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fa41 	bl	800772e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b084      	sub	sp, #16
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
 80032c6:	4608      	mov	r0, r1
 80032c8:	4611      	mov	r1, r2
 80032ca:	461a      	mov	r2, r3
 80032cc:	4603      	mov	r3, r0
 80032ce:	70fb      	strb	r3, [r7, #3]
 80032d0:	460b      	mov	r3, r1
 80032d2:	803b      	strh	r3, [r7, #0]
 80032d4:	4613      	mov	r3, r2
 80032d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da0e      	bge.n	8003302 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	705a      	strb	r2, [r3, #1]
 8003300:	e00e      	b.n	8003320 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0207 	and.w	r2, r3, #7
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800332c:	883a      	ldrh	r2, [r7, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	78ba      	ldrb	r2, [r7, #2]
 8003336:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d004      	beq.n	800334a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800334a:	78bb      	ldrb	r3, [r7, #2]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d102      	bne.n	8003356 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_PCD_EP_Open+0xa6>
 8003360:	2302      	movs	r3, #2
 8003362:	e00e      	b.n	8003382 <HAL_PCD_EP_Open+0xc4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	4618      	mov	r0, r3
 8003374:	f002 fa68 	bl	8005848 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003380:	7afb      	ldrb	r3, [r7, #11]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	460b      	mov	r3, r1
 8003394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339a:	2b00      	cmp	r3, #0
 800339c:	da0e      	bge.n	80033bc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	705a      	strb	r2, [r3, #1]
 80033ba:	e00e      	b.n	80033da <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_PCD_EP_Close+0x6a>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e00e      	b.n	8003412 <HAL_PCD_EP_Close+0x88>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68f9      	ldr	r1, [r7, #12]
 8003402:	4618      	mov	r0, r3
 8003404:	f002 fd8a 	bl	8005f1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
 8003426:	460b      	mov	r3, r1
 8003428:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	f003 0207 	and.w	r2, r3, #7
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2200      	movs	r2, #0
 8003458:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800345a:	7afb      	ldrb	r3, [r7, #11]
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	b2da      	uxtb	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6979      	ldr	r1, [r7, #20]
 8003476:	4618      	mov	r0, r3
 8003478:	f002 ff3c 	bl	80062f4 <USB_EPStartXfer>
 800347c:	e005      	b.n	800348a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6979      	ldr	r1, [r7, #20]
 8003484:	4618      	mov	r0, r3
 8003486:	f002 ff35 	bl	80062f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	460b      	mov	r3, r1
 80034a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	7afb      	ldrb	r3, [r7, #11]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	4413      	add	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2201      	movs	r2, #1
 80034de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e0:	7afb      	ldrb	r3, [r7, #11]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034ec:	7afb      	ldrb	r3, [r7, #11]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6979      	ldr	r1, [r7, #20]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f002 fef9 	bl	80062f4 <USB_EPStartXfer>
 8003502:	e005      	b.n	8003510 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6979      	ldr	r1, [r7, #20]
 800350a:	4618      	mov	r0, r3
 800350c:	f002 fef2 	bl	80062f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b084      	sub	sp, #16
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	f003 0207 	and.w	r2, r3, #7
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d901      	bls.n	8003538 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e04c      	b.n	80035d2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353c:	2b00      	cmp	r3, #0
 800353e:	da0e      	bge.n	800355e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	705a      	strb	r2, [r3, #1]
 800355c:	e00c      	b.n	8003578 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_PCD_EP_SetStall+0x7e>
 8003594:	2302      	movs	r3, #2
 8003596:	e01c      	b.n	80035d2 <HAL_PCD_EP_SetStall+0xb8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68f9      	ldr	r1, [r7, #12]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f003 ffc4 	bl	8007534 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f004 f8e9 	bl	800779a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d901      	bls.n	80035f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e040      	b.n	800367a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	da0e      	bge.n	800361e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2201      	movs	r2, #1
 800361a:	705a      	strb	r2, [r3, #1]
 800361c:	e00e      	b.n	800363c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	f003 0207 	and.w	r2, r3, #7
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	b2da      	uxtb	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_EP_ClrStall+0x82>
 8003658:	2302      	movs	r3, #2
 800365a:	e00e      	b.n	800367a <HAL_PCD_EP_ClrStall+0xa0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68f9      	ldr	r1, [r7, #12]
 800366a:	4618      	mov	r0, r3
 800366c:	f003 ffb2 	bl	80075d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08e      	sub	sp, #56	; 0x38
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800368a:	e2df      	b.n	8003c4c <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003694:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80036a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 8158 	bne.w	800395c <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80036ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d152      	bne.n	800375c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80036c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c6:	81fb      	strh	r3, [r7, #14]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	89fb      	ldrh	r3, [r7, #14]
 80036ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3328      	adds	r3, #40	; 0x28
 80036de:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4413      	add	r3, r2
 80036f4:	3302      	adds	r3, #2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	441a      	add	r2, r3
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f005 fc68 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 828e 	beq.w	8003c4c <PCD_EP_ISR_Handler+0x5ca>
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	f040 8289 	bne.w	8003c4c <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003746:	b2da      	uxtb	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	b292      	uxth	r2, r2
 800374e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800375a:	e277      	b.n	8003c4c <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800376c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003772:	2b00      	cmp	r3, #0
 8003774:	d034      	beq.n	80037e0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800377e:	b29b      	uxth	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	3306      	adds	r3, #6
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	4413      	add	r3, r2
 8003794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f004 f83f 	bl	8007838 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037c6:	4013      	ands	r3, r2
 80037c8:	823b      	strh	r3, [r7, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	8a3a      	ldrh	r2, [r7, #16]
 80037d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037d4:	b292      	uxth	r2, r2
 80037d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f005 fbdd 	bl	8008f98 <HAL_PCD_SetupStageCallback>
 80037de:	e235      	b.n	8003c4c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037e0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f280 8231 	bge.w	8003c4c <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037f6:	4013      	ands	r3, r2
 80037f8:	83bb      	strh	r3, [r7, #28]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	8bba      	ldrh	r2, [r7, #28]
 8003800:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003804:	b292      	uxth	r2, r2
 8003806:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003810:	b29b      	uxth	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	3306      	adds	r3, #6
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d019      	beq.n	8003870 <PCD_EP_ISR_Handler+0x1ee>
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d015      	beq.n	8003870 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	6959      	ldr	r1, [r3, #20]
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003854:	b29b      	uxth	r3, r3
 8003856:	f003 ffef 	bl	8007838 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	441a      	add	r2, r3
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003868:	2100      	movs	r1, #0
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f005 fba6 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4413      	add	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d112      	bne.n	80038be <PCD_EP_ISR_Handler+0x23c>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	801a      	strh	r2, [r3, #0]
 80038bc:	e02f      	b.n	800391e <PCD_EP_ISR_Handler+0x29c>
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b3e      	cmp	r3, #62	; 0x3e
 80038c4:	d813      	bhi.n	80038ee <PCD_EP_ISR_Handler+0x26c>
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <PCD_EP_ISR_Handler+0x25e>
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038dc:	3301      	adds	r3, #1
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	029b      	lsls	r3, r3, #10
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	801a      	strh	r2, [r3, #0]
 80038ec:	e017      	b.n	800391e <PCD_EP_ISR_Handler+0x29c>
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 031f 	and.w	r3, r3, #31
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <PCD_EP_ISR_Handler+0x286>
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	3b01      	subs	r3, #1
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	b29b      	uxth	r3, r3
 800390c:	029b      	lsls	r3, r3, #10
 800390e:	b29b      	uxth	r3, r3
 8003910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003918:	b29a      	uxth	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	827b      	strh	r3, [r7, #18]
 8003930:	8a7b      	ldrh	r3, [r7, #18]
 8003932:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003936:	827b      	strh	r3, [r7, #18]
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800393e:	827b      	strh	r3, [r7, #18]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	8a7b      	ldrh	r3, [r7, #18]
 8003946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800394a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800394e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003956:	b29b      	uxth	r3, r3
 8003958:	8013      	strh	r3, [r2, #0]
 800395a:	e177      	b.n	8003c4c <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800396e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003972:	2b00      	cmp	r3, #0
 8003974:	f280 80ea 	bge.w	8003b4c <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b29a      	uxth	r2, r3
 800398a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800398e:	4013      	ands	r3, r2
 8003990:	853b      	strh	r3, [r7, #40]	; 0x28
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039a6:	b292      	uxth	r2, r2
 80039a8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80039aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	7b1b      	ldrb	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d122      	bne.n	8003a0e <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	461a      	mov	r2, r3
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	3306      	adds	r3, #6
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039f0:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80039f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8087 	beq.w	8003b08 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	6959      	ldr	r1, [r3, #20]
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	88da      	ldrh	r2, [r3, #6]
 8003a06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a08:	f003 ff16 	bl	8007838 <USB_ReadPMA>
 8003a0c:	e07c      	b.n	8003b08 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	78db      	ldrb	r3, [r3, #3]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d108      	bne.n	8003a28 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a18:	461a      	mov	r2, r3
 8003a1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f923 	bl	8003c68 <HAL_PCD_EP_DB_Receive>
 8003a22:	4603      	mov	r3, r0
 8003a24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003a26:	e06f      	b.n	8003b08 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	847b      	strh	r3, [r7, #34]	; 0x22
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d021      	beq.n	8003ac6 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	3302      	adds	r3, #2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aaa:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003aac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d02a      	beq.n	8003b08 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	6959      	ldr	r1, [r3, #20]
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	891a      	ldrh	r2, [r3, #8]
 8003abe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ac0:	f003 feba 	bl	8007838 <USB_ReadPMA>
 8003ac4:	e020      	b.n	8003b08 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3306      	adds	r3, #6
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003af0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	6959      	ldr	r1, [r3, #20]
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	895a      	ldrh	r2, [r3, #10]
 8003b02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b04:	f003 fe98 	bl	8007838 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b0e:	441a      	add	r2, r3
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b1a:	441a      	add	r2, r3
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <PCD_EP_ISR_Handler+0x4b0>
 8003b28:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d206      	bcs.n	8003b40 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	4619      	mov	r1, r3
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f005 fa3f 	bl	8008fbc <HAL_PCD_DataOutStageCallback>
 8003b3e:	e005      	b.n	8003b4c <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 fbd4 	bl	80062f4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d07a      	beq.n	8003c4c <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	4413      	add	r3, r2
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b84:	843b      	strh	r3, [r7, #32]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	8c3b      	ldrh	r3, [r7, #32]
 8003b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	78db      	ldrb	r3, [r3, #3]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d108      	bne.n	8003bbc <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d146      	bne.n	8003c40 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003bb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d141      	bne.n	8003c40 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be4:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	8bfb      	ldrh	r3, [r7, #30]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d906      	bls.n	8003bfe <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	8bfb      	ldrh	r3, [r7, #30]
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	619a      	str	r2, [r3, #24]
 8003bfc:	e002      	b.n	8003c04 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d106      	bne.n	8003c1a <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f005 f9ed 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
 8003c18:	e018      	b.n	8003c4c <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	695a      	ldr	r2, [r3, #20]
 8003c1e:	8bfb      	ldrh	r3, [r7, #30]
 8003c20:	441a      	add	r2, r3
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	8bfb      	ldrh	r3, [r7, #30]
 8003c2c:	441a      	add	r2, r3
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f002 fb5b 	bl	80062f4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003c3e:	e005      	b.n	8003c4c <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003c40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c42:	461a      	mov	r2, r3
 8003c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f91b 	bl	8003e82 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	b21b      	sxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f6ff ad17 	blt.w	800368c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3738      	adds	r7, #56	; 0x38
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	4613      	mov	r3, r2
 8003c74:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d07e      	beq.n	8003d7e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	3302      	adds	r3, #2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	699a      	ldr	r2, [r3, #24]
 8003cae:	8b7b      	ldrh	r3, [r7, #26]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d306      	bcc.n	8003cc2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	619a      	str	r2, [r3, #24]
 8003cc0:	e002      	b.n	8003cc8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d123      	bne.n	8003d18 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cea:	833b      	strh	r3, [r7, #24]
 8003cec:	8b3b      	ldrh	r3, [r7, #24]
 8003cee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cf2:	833b      	strh	r3, [r7, #24]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	441a      	add	r2, r3
 8003d02:	8b3b      	ldrh	r3, [r7, #24]
 8003d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01f      	beq.n	8003d62 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3c:	82fb      	strh	r3, [r7, #22]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	441a      	add	r2, r3
 8003d4c:	8afb      	ldrh	r3, [r7, #22]
 8003d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d62:	8b7b      	ldrh	r3, [r7, #26]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8087 	beq.w	8003e78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6959      	ldr	r1, [r3, #20]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	891a      	ldrh	r2, [r3, #8]
 8003d76:	8b7b      	ldrh	r3, [r7, #26]
 8003d78:	f003 fd5e 	bl	8007838 <USB_ReadPMA>
 8003d7c:	e07c      	b.n	8003e78 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	3306      	adds	r3, #6
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	699a      	ldr	r2, [r3, #24]
 8003dac:	8b7b      	ldrh	r3, [r7, #26]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d306      	bcc.n	8003dc0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	8b7b      	ldrh	r3, [r7, #26]
 8003db8:	1ad2      	subs	r2, r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	619a      	str	r2, [r3, #24]
 8003dbe:	e002      	b.n	8003dc6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d123      	bne.n	8003e16 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de8:	83fb      	strh	r3, [r7, #30]
 8003dea:	8bfb      	ldrh	r3, [r7, #30]
 8003dec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003df0:	83fb      	strh	r3, [r7, #30]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	8bfb      	ldrh	r3, [r7, #30]
 8003e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11f      	bne.n	8003e60 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	83bb      	strh	r3, [r7, #28]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	8bbb      	ldrh	r3, [r7, #28]
 8003e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003e60:	8b7b      	ldrh	r3, [r7, #26]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6959      	ldr	r1, [r3, #20]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	895a      	ldrh	r2, [r3, #10]
 8003e72:	8b7b      	ldrh	r3, [r7, #26]
 8003e74:	f003 fce0 	bl	8007838 <USB_ReadPMA>
    }
  }

  return count;
 8003e78:	8b7b      	ldrh	r3, [r7, #26]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3720      	adds	r7, #32
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b092      	sub	sp, #72	; 0x48
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8132 	beq.w	8004100 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d906      	bls.n	8003ede <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003ed6:	1ad2      	subs	r2, r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	619a      	str	r2, [r3, #24]
 8003edc:	e002      	b.n	8003ee4 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d12c      	bne.n	8003f46 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f005 f87d 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 822f 	beq.w	8004362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f1e:	827b      	strh	r3, [r7, #18]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	441a      	add	r2, r3
 8003f2e:	8a7b      	ldrh	r3, [r7, #18]
 8003f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]
 8003f44:	e20d      	b.n	8004362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f46:	88fb      	ldrh	r3, [r7, #6]
 8003f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01f      	beq.n	8003f90 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	441a      	add	r2, r3
 8003f7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	f040 81e3 	bne.w	8004362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	69da      	ldr	r2, [r3, #28]
 8003fac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fae:	441a      	add	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d309      	bcc.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6a1a      	ldr	r2, [r3, #32]
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	621a      	str	r2, [r3, #32]
 8003fd2:	e014      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8003fdc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003fe8:	e009      	b.n	8003ffe <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	785b      	ldrb	r3, [r3, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d155      	bne.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x230>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004014:	b29b      	uxth	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	4413      	add	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	011a      	lsls	r2, r3, #4
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	4413      	add	r3, r2
 8004028:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d112      	bne.n	800405a <HAL_PCD_EP_DB_Transmit+0x1d8>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800403e:	b29a      	uxth	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	801a      	strh	r2, [r3, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004052:	b29a      	uxth	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	e047      	b.n	80040ea <HAL_PCD_EP_DB_Transmit+0x268>
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b3e      	cmp	r3, #62	; 0x3e
 800405e:	d811      	bhi.n	8004084 <HAL_PCD_EP_DB_Transmit+0x202>
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	3301      	adds	r3, #1
 8004074:	62bb      	str	r3, [r7, #40]	; 0x28
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	b29b      	uxth	r3, r3
 800407a:	029b      	lsls	r3, r3, #10
 800407c:	b29a      	uxth	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	e032      	b.n	80040ea <HAL_PCD_EP_DB_Transmit+0x268>
 8004084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
 800408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_PCD_EP_DB_Transmit+0x218>
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	3b01      	subs	r3, #1
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	b29b      	uxth	r3, r3
 800409e:	029b      	lsls	r3, r3, #10
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	e01b      	b.n	80040ea <HAL_PCD_EP_DB_Transmit+0x268>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d117      	bne.n	80040ea <HAL_PCD_EP_DB_Transmit+0x268>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	623b      	str	r3, [r7, #32]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	4413      	add	r3, r2
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	011a      	lsls	r2, r3, #4
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	4413      	add	r3, r2
 80040dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6959      	ldr	r1, [r3, #20]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	891a      	ldrh	r2, [r3, #8]
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f003 fb59 	bl	80077b0 <USB_WritePMA>
 80040fe:	e130      	b.n	8004362 <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	4413      	add	r3, r2
 8004114:	3306      	adds	r3, #6
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004128:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004130:	429a      	cmp	r2, r3
 8004132:	d306      	bcc.n	8004142 <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800413a:	1ad2      	subs	r2, r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	619a      	str	r2, [r3, #24]
 8004140:	e002      	b.n	8004148 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2200      	movs	r2, #0
 8004146:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d12c      	bne.n	80041aa <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f004 ff4b 	bl	8008ff2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004162:	2b00      	cmp	r3, #0
 8004164:	f040 80fd 	bne.w	8004362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004182:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	441a      	add	r2, r3
 8004192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	8013      	strh	r3, [r2, #0]
 80041a8:	e0db      	b.n	8004362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d11f      	bne.n	80041f4 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80041e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	f040 80b1 	bne.w	8004362 <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	695a      	ldr	r2, [r3, #20]
 8004204:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004206:	441a      	add	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004212:	441a      	add	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a1a      	ldr	r2, [r3, #32]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d309      	bcc.n	8004238 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	1ad2      	subs	r2, r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	621a      	str	r2, [r3, #32]
 8004236:	e014      	b.n	8004262 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d106      	bne.n	800424e <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8004240:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004242:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800424c:	e009      	b.n	8004262 <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2200      	movs	r2, #0
 8004258:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	637b      	str	r3, [r7, #52]	; 0x34
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d155      	bne.n	800431c <HAL_PCD_EP_DB_Transmit+0x49a>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	647b      	str	r3, [r7, #68]	; 0x44
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004284:	4413      	add	r3, r2
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	011a      	lsls	r2, r3, #4
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004290:	4413      	add	r3, r2
 8004292:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	2b00      	cmp	r3, #0
 800429c:	d112      	bne.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x442>
 800429e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ac:	801a      	strh	r2, [r3, #0]
 80042ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	e044      	b.n	800434e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80042c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c6:	2b3e      	cmp	r3, #62	; 0x3e
 80042c8:	d811      	bhi.n	80042ee <HAL_PCD_EP_DB_Transmit+0x46c>
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <HAL_PCD_EP_DB_Transmit+0x45e>
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	3301      	adds	r3, #1
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	029b      	lsls	r3, r3, #10
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	e02f      	b.n	800434e <HAL_PCD_EP_DB_Transmit+0x4cc>
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <HAL_PCD_EP_DB_Transmit+0x482>
 80042fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004300:	3b01      	subs	r3, #1
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004306:	b29b      	uxth	r3, r3
 8004308:	029b      	lsls	r3, r3, #10
 800430a:	b29b      	uxth	r3, r3
 800430c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004314:	b29a      	uxth	r2, r3
 8004316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	e018      	b.n	800434e <HAL_PCD_EP_DB_Transmit+0x4cc>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	785b      	ldrb	r3, [r3, #1]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d114      	bne.n	800434e <HAL_PCD_EP_DB_Transmit+0x4cc>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	4413      	add	r3, r2
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	011a      	lsls	r2, r3, #4
 800433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433e:	4413      	add	r3, r2
 8004340:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004344:	633b      	str	r3, [r7, #48]	; 0x30
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	b29a      	uxth	r2, r3
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6959      	ldr	r1, [r3, #20]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	895a      	ldrh	r2, [r3, #10]
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	b29b      	uxth	r3, r3
 800435e:	f003 fa27 	bl	80077b0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29b      	uxth	r3, r3
 8004374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437c:	823b      	strh	r3, [r7, #16]
 800437e:	8a3b      	ldrh	r3, [r7, #16]
 8004380:	f083 0310 	eor.w	r3, r3, #16
 8004384:	823b      	strh	r3, [r7, #16]
 8004386:	8a3b      	ldrh	r3, [r7, #16]
 8004388:	f083 0320 	eor.w	r3, r3, #32
 800438c:	823b      	strh	r3, [r7, #16]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	441a      	add	r2, r3
 800439c:	8a3b      	ldrh	r3, [r7, #16]
 800439e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3748      	adds	r7, #72	; 0x48
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	460b      	mov	r3, r1
 80043c8:	817b      	strh	r3, [r7, #10]
 80043ca:	4613      	mov	r3, r2
 80043cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043ce:	897b      	ldrh	r3, [r7, #10]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043da:	897b      	ldrh	r3, [r7, #10]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e009      	b.n	8004406 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043f2:	897a      	ldrh	r2, [r7, #10]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004406:	893b      	ldrh	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d107      	bne.n	800441c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2200      	movs	r2, #0
 8004410:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	b29a      	uxth	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	80da      	strh	r2, [r3, #6]
 800441a:	e00b      	b.n	8004434 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2201      	movs	r2, #1
 8004420:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	b29a      	uxth	r2, r3
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0c1b      	lsrs	r3, r3, #16
 800442e:	b29a      	uxth	r2, r3
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e26c      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8087 	beq.w	800456e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004460:	4b92      	ldr	r3, [pc, #584]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b04      	cmp	r3, #4
 800446a:	d00c      	beq.n	8004486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800446c:	4b8f      	ldr	r3, [pc, #572]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b08      	cmp	r3, #8
 8004476:	d112      	bne.n	800449e <HAL_RCC_OscConfig+0x5e>
 8004478:	4b8c      	ldr	r3, [pc, #560]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d10b      	bne.n	800449e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004486:	4b89      	ldr	r3, [pc, #548]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d06c      	beq.n	800456c <HAL_RCC_OscConfig+0x12c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d168      	bne.n	800456c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e246      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x76>
 80044a8:	4b80      	ldr	r3, [pc, #512]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7f      	ldr	r2, [pc, #508]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e02e      	b.n	8004514 <HAL_RCC_OscConfig+0xd4>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x98>
 80044be:	4b7b      	ldr	r3, [pc, #492]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a7a      	ldr	r2, [pc, #488]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	4b78      	ldr	r3, [pc, #480]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a77      	ldr	r2, [pc, #476]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	e01d      	b.n	8004514 <HAL_RCC_OscConfig+0xd4>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e0:	d10c      	bne.n	80044fc <HAL_RCC_OscConfig+0xbc>
 80044e2:	4b72      	ldr	r3, [pc, #456]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a71      	ldr	r2, [pc, #452]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	4b6f      	ldr	r3, [pc, #444]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a6e      	ldr	r2, [pc, #440]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	e00b      	b.n	8004514 <HAL_RCC_OscConfig+0xd4>
 80044fc:	4b6b      	ldr	r3, [pc, #428]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a6a      	ldr	r2, [pc, #424]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	4b68      	ldr	r3, [pc, #416]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a67      	ldr	r2, [pc, #412]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 800450e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fd fbce 	bl	8001cbc <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd fbca 	bl	8001cbc <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e1fa      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b5d      	ldr	r3, [pc, #372]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0xe4>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fd fbba 	bl	8001cbc <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800454c:	f7fd fbb6 	bl	8001cbc <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e1e6      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455e:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1f0      	bne.n	800454c <HAL_RCC_OscConfig+0x10c>
 800456a:	e000      	b.n	800456e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d063      	beq.n	8004642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800457a:	4b4c      	ldr	r3, [pc, #304]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004586:	4b49      	ldr	r3, [pc, #292]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b08      	cmp	r3, #8
 8004590:	d11c      	bne.n	80045cc <HAL_RCC_OscConfig+0x18c>
 8004592:	4b46      	ldr	r3, [pc, #280]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d116      	bne.n	80045cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	4b43      	ldr	r3, [pc, #268]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <HAL_RCC_OscConfig+0x176>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e1ba      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b6:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4939      	ldr	r1, [pc, #228]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	e03a      	b.n	8004642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d4:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x270>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fd fb6f 	bl	8001cbc <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e2:	f7fd fb6b 	bl	8001cbc <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e19b      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004600:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4927      	ldr	r1, [pc, #156]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]
 8004614:	e015      	b.n	8004642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <HAL_RCC_OscConfig+0x270>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fd fb4e 	bl	8001cbc <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004624:	f7fd fb4a 	bl	8001cbc <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e17a      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d03a      	beq.n	80046c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d019      	beq.n	800468a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004656:	4b17      	ldr	r3, [pc, #92]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 8004658:	2201      	movs	r2, #1
 800465a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465c:	f7fd fb2e 	bl	8001cbc <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004664:	f7fd fb2a 	bl	8001cbc <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e15a      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <HAL_RCC_OscConfig+0x26c>)
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004682:	2001      	movs	r0, #1
 8004684:	f000 faa8 	bl	8004bd8 <RCC_Delay>
 8004688:	e01c      	b.n	80046c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_OscConfig+0x274>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004690:	f7fd fb14 	bl	8001cbc <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004696:	e00f      	b.n	80046b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004698:	f7fd fb10 	bl	8001cbc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d908      	bls.n	80046b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e140      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000
 80046b0:	42420000 	.word	0x42420000
 80046b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	4b9e      	ldr	r3, [pc, #632]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e9      	bne.n	8004698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80a6 	beq.w	800481e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d6:	4b97      	ldr	r3, [pc, #604]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	4b94      	ldr	r3, [pc, #592]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	4a93      	ldr	r2, [pc, #588]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80046e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ec:	61d3      	str	r3, [r2, #28]
 80046ee:	4b91      	ldr	r3, [pc, #580]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f6:	60bb      	str	r3, [r7, #8]
 80046f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fa:	2301      	movs	r3, #1
 80046fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fe:	4b8e      	ldr	r3, [pc, #568]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004706:	2b00      	cmp	r3, #0
 8004708:	d118      	bne.n	800473c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470a:	4b8b      	ldr	r3, [pc, #556]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a8a      	ldr	r2, [pc, #552]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004716:	f7fd fad1 	bl	8001cbc <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471e:	f7fd facd 	bl	8001cbc <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b64      	cmp	r3, #100	; 0x64
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0fd      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	4b81      	ldr	r3, [pc, #516]	; (8004938 <HAL_RCC_OscConfig+0x4f8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d106      	bne.n	8004752 <HAL_RCC_OscConfig+0x312>
 8004744:	4b7b      	ldr	r3, [pc, #492]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4a7a      	ldr	r2, [pc, #488]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800474a:	f043 0301 	orr.w	r3, r3, #1
 800474e:	6213      	str	r3, [r2, #32]
 8004750:	e02d      	b.n	80047ae <HAL_RCC_OscConfig+0x36e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x334>
 800475a:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	4a75      	ldr	r2, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	6213      	str	r3, [r2, #32]
 8004766:	4b73      	ldr	r3, [pc, #460]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a72      	ldr	r2, [pc, #456]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800476c:	f023 0304 	bic.w	r3, r3, #4
 8004770:	6213      	str	r3, [r2, #32]
 8004772:	e01c      	b.n	80047ae <HAL_RCC_OscConfig+0x36e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	2b05      	cmp	r3, #5
 800477a:	d10c      	bne.n	8004796 <HAL_RCC_OscConfig+0x356>
 800477c:	4b6d      	ldr	r3, [pc, #436]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	4a6c      	ldr	r2, [pc, #432]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004782:	f043 0304 	orr.w	r3, r3, #4
 8004786:	6213      	str	r3, [r2, #32]
 8004788:	4b6a      	ldr	r3, [pc, #424]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4a69      	ldr	r2, [pc, #420]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	6213      	str	r3, [r2, #32]
 8004794:	e00b      	b.n	80047ae <HAL_RCC_OscConfig+0x36e>
 8004796:	4b67      	ldr	r3, [pc, #412]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	4a66      	ldr	r2, [pc, #408]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	6213      	str	r3, [r2, #32]
 80047a2:	4b64      	ldr	r3, [pc, #400]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a63      	ldr	r2, [pc, #396]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d015      	beq.n	80047e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b6:	f7fd fa81 	bl	8001cbc <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fd fa7d 	bl	8001cbc <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e0ab      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	4b57      	ldr	r3, [pc, #348]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ee      	beq.n	80047be <HAL_RCC_OscConfig+0x37e>
 80047e0:	e014      	b.n	800480c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e2:	f7fd fa6b 	bl	8001cbc <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd fa67 	bl	8001cbc <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e095      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004800:	4b4c      	ldr	r3, [pc, #304]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ee      	bne.n	80047ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004812:	4b48      	ldr	r3, [pc, #288]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4a47      	ldr	r2, [pc, #284]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800481c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8081 	beq.w	800492a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004828:	4b42      	ldr	r3, [pc, #264]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b08      	cmp	r3, #8
 8004832:	d061      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d146      	bne.n	80048ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483c:	4b3f      	ldr	r3, [pc, #252]	; (800493c <HAL_RCC_OscConfig+0x4fc>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004842:	f7fd fa3b 	bl	8001cbc <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484a:	f7fd fa37 	bl	8001cbc <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e067      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f0      	bne.n	800484a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004870:	d108      	bne.n	8004884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004872:	4b30      	ldr	r3, [pc, #192]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	492d      	ldr	r1, [pc, #180]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a19      	ldr	r1, [r3, #32]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	430b      	orrs	r3, r1
 8004896:	4927      	ldr	r1, [pc, #156]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <HAL_RCC_OscConfig+0x4fc>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fd fa0b 	bl	8001cbc <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048aa:	f7fd fa07 	bl	8001cbc <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e037      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048bc:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x46a>
 80048c8:	e02f      	b.n	800492a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b1c      	ldr	r3, [pc, #112]	; (800493c <HAL_RCC_OscConfig+0x4fc>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d0:	f7fd f9f4 	bl	8001cbc <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d8:	f7fd f9f0 	bl	8001cbc <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e020      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x498>
 80048f6:	e018      	b.n	800492a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e013      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_RCC_OscConfig+0x4f4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	429a      	cmp	r2, r3
 8004916:	d106      	bne.n	8004926 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d001      	beq.n	800492a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40021000 	.word	0x40021000
 8004938:	40007000 	.word	0x40007000
 800493c:	42420060 	.word	0x42420060

08004940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e0d0      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004954:	4b6a      	ldr	r3, [pc, #424]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0307 	and.w	r3, r3, #7
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	429a      	cmp	r2, r3
 8004960:	d910      	bls.n	8004984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004962:	4b67      	ldr	r3, [pc, #412]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 0207 	bic.w	r2, r3, #7
 800496a:	4965      	ldr	r1, [pc, #404]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004972:	4b63      	ldr	r3, [pc, #396]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d001      	beq.n	8004984 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0b8      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d020      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800499c:	4b59      	ldr	r3, [pc, #356]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4a58      	ldr	r2, [pc, #352]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049b4:	4b53      	ldr	r3, [pc, #332]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a52      	ldr	r2, [pc, #328]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 80049ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049c0:	4b50      	ldr	r3, [pc, #320]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	494d      	ldr	r1, [pc, #308]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d040      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d107      	bne.n	80049f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e6:	4b47      	ldr	r3, [pc, #284]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d115      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e07f      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d107      	bne.n	8004a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fe:	4b41      	ldr	r3, [pc, #260]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d109      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e073      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e06b      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1e:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f023 0203 	bic.w	r2, r3, #3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4936      	ldr	r1, [pc, #216]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a30:	f7fd f944 	bl	8001cbc <HAL_GetTick>
 8004a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a38:	f7fd f940 	bl	8001cbc <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e053      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4e:	4b2d      	ldr	r3, [pc, #180]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f003 020c 	and.w	r2, r3, #12
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d1eb      	bne.n	8004a38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a60:	4b27      	ldr	r3, [pc, #156]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d210      	bcs.n	8004a90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6e:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f023 0207 	bic.w	r2, r3, #7
 8004a76:	4922      	ldr	r1, [pc, #136]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e032      	b.n	8004af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a9c:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	4916      	ldr	r1, [pc, #88]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d009      	beq.n	8004ace <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	490e      	ldr	r1, [pc, #56]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ace:	f000 f821 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	091b      	lsrs	r3, r3, #4
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	5cd3      	ldrb	r3, [r2, r3]
 8004ae2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <HAL_RCC_ClockConfig+0x1cc>)
 8004ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004aea:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_ClockConfig+0x1d0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fd f8a2 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40022000 	.word	0x40022000
 8004b04:	40021000 	.word	0x40021000
 8004b08:	0800962c 	.word	0x0800962c
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	20000004 	.word	0x20000004

08004b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b14:	b490      	push	{r4, r7}
 8004b16:	b08a      	sub	sp, #40	; 0x28
 8004b18:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b1a:	4b2a      	ldr	r3, [pc, #168]	; (8004bc4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b1c:	1d3c      	adds	r4, r7, #4
 8004b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b24:	4b28      	ldr	r3, [pc, #160]	; (8004bc8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b3e:	4b23      	ldr	r3, [pc, #140]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d002      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0x40>
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d003      	beq.n	8004b5a <HAL_RCC_GetSysClockFreq+0x46>
 8004b52:	e02d      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b54:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b56:	623b      	str	r3, [r7, #32]
      break;
 8004b58:	e02d      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	0c9b      	lsrs	r3, r3, #18
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b66:	4413      	add	r3, r2
 8004b68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b6c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b78:	4b14      	ldr	r3, [pc, #80]	; (8004bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	0c5b      	lsrs	r3, r3, #17
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b86:	4413      	add	r3, r2
 8004b88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4a0f      	ldr	r2, [pc, #60]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b92:	fb02 f203 	mul.w	r2, r2, r3
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9e:	e004      	b.n	8004baa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	623b      	str	r3, [r7, #32]
      break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb2:	623b      	str	r3, [r7, #32]
      break;
 8004bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3728      	adds	r7, #40	; 0x28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc90      	pop	{r4, r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	080095d0 	.word	0x080095d0
 8004bc8:	080095e0 	.word	0x080095e0
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	007a1200 	.word	0x007a1200
 8004bd4:	003d0900 	.word	0x003d0900

08004bd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <RCC_Delay+0x34>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a0a      	ldr	r2, [pc, #40]	; (8004c10 <RCC_Delay+0x38>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	0a5b      	lsrs	r3, r3, #9
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	fb02 f303 	mul.w	r3, r2, r3
 8004bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bf4:	bf00      	nop
  }
  while (Delay --);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	60fa      	str	r2, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1f9      	bne.n	8004bf4 <RCC_Delay+0x1c>
}
 8004c00:	bf00      	nop
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000000 	.word	0x20000000
 8004c10:	10624dd3 	.word	0x10624dd3

08004c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d07d      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c34:	4b4f      	ldr	r3, [pc, #316]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10d      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c40:	4b4c      	ldr	r3, [pc, #304]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	4a4b      	ldr	r2, [pc, #300]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	61d3      	str	r3, [r2, #28]
 8004c4c:	4b49      	ldr	r3, [pc, #292]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c5c:	4b46      	ldr	r3, [pc, #280]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d118      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c68:	4b43      	ldr	r3, [pc, #268]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a42      	ldr	r2, [pc, #264]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c74:	f7fd f822 	bl	8001cbc <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7a:	e008      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7c:	f7fd f81e 	bl	8001cbc <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e06d      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	4b3a      	ldr	r3, [pc, #232]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c9a:	4b36      	ldr	r3, [pc, #216]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d02e      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d027      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb8:	4b2e      	ldr	r3, [pc, #184]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cc2:	4b2e      	ldr	r3, [pc, #184]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc8:	4b2c      	ldr	r3, [pc, #176]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cce:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d014      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cde:	f7fc ffed 	bl	8001cbc <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fc ffe9 	bl	8001cbc <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e036      	b.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0ee      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d08:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	4917      	ldr	r1, [pc, #92]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d105      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d20:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	4a13      	ldr	r2, [pc, #76]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d38:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	490b      	ldr	r1, [pc, #44]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d56:	4b07      	ldr	r3, [pc, #28]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4904      	ldr	r1, [pc, #16]	; (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	42420440 	.word	0x42420440

08004d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01d      	b.n	8004dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d106      	bne.n	8004dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fc fd8e 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4610      	mov	r0, r2
 8004dc0:	f000 f9ee 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e01d      	b.n	8004e24 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f815 	bl	8004e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	3304      	adds	r3, #4
 8004e12:	4619      	mov	r1, r3
 8004e14:	4610      	mov	r0, r2
 8004e16:	f000 f9c3 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fc24 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a10      	ldr	r2, [pc, #64]	; (8004ea0 <HAL_TIM_PWM_Start+0x60>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40012c00 	.word	0x40012c00

08004ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e0b4      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	f200 809f 	bhi.w	8005014 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004ed6:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f11 	.word	0x08004f11
 8004ee0:	08005015 	.word	0x08005015
 8004ee4:	08005015 	.word	0x08005015
 8004ee8:	08005015 	.word	0x08005015
 8004eec:	08004f51 	.word	0x08004f51
 8004ef0:	08005015 	.word	0x08005015
 8004ef4:	08005015 	.word	0x08005015
 8004ef8:	08005015 	.word	0x08005015
 8004efc:	08004f93 	.word	0x08004f93
 8004f00:	08005015 	.word	0x08005015
 8004f04:	08005015 	.word	0x08005015
 8004f08:	08005015 	.word	0x08005015
 8004f0c:	08004fd3 	.word	0x08004fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f9a4 	bl	8005264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0208 	orr.w	r2, r2, #8
 8004f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0204 	bic.w	r2, r2, #4
 8004f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6999      	ldr	r1, [r3, #24]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	619a      	str	r2, [r3, #24]
      break;
 8004f4e:	e062      	b.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f9ea 	bl	8005330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699a      	ldr	r2, [r3, #24]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6999      	ldr	r1, [r3, #24]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	021a      	lsls	r2, r3, #8
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	619a      	str	r2, [r3, #24]
      break;
 8004f90:	e041      	b.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fa33 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0208 	orr.w	r2, r2, #8
 8004fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	69da      	ldr	r2, [r3, #28]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0204 	bic.w	r2, r2, #4
 8004fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69d9      	ldr	r1, [r3, #28]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	61da      	str	r2, [r3, #28]
      break;
 8004fd0:	e021      	b.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fa7d 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	69da      	ldr	r2, [r3, #28]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69d9      	ldr	r1, [r3, #28]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	021a      	lsls	r2, r3, #8
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	61da      	str	r2, [r3, #28]
      break;
 8005012:	e000      	b.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005014:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_TIM_ConfigClockSource+0x18>
 8005044:	2302      	movs	r3, #2
 8005046:	e0a6      	b.n	8005196 <HAL_TIM_ConfigClockSource+0x166>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800506e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d067      	beq.n	8005150 <HAL_TIM_ConfigClockSource+0x120>
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d80b      	bhi.n	800509c <HAL_TIM_ConfigClockSource+0x6c>
 8005084:	2b10      	cmp	r3, #16
 8005086:	d073      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0x140>
 8005088:	2b10      	cmp	r3, #16
 800508a:	d802      	bhi.n	8005092 <HAL_TIM_ConfigClockSource+0x62>
 800508c:	2b00      	cmp	r3, #0
 800508e:	d06f      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005090:	e078      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005092:	2b20      	cmp	r3, #32
 8005094:	d06c      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0x140>
 8005096:	2b30      	cmp	r3, #48	; 0x30
 8005098:	d06a      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800509a:	e073      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800509c:	2b70      	cmp	r3, #112	; 0x70
 800509e:	d00d      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0x8c>
 80050a0:	2b70      	cmp	r3, #112	; 0x70
 80050a2:	d804      	bhi.n	80050ae <HAL_TIM_ConfigClockSource+0x7e>
 80050a4:	2b50      	cmp	r3, #80	; 0x50
 80050a6:	d033      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0xe0>
 80050a8:	2b60      	cmp	r3, #96	; 0x60
 80050aa:	d041      	beq.n	8005130 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050ac:	e06a      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b2:	d066      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x152>
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b8:	d017      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80050ba:	e063      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6899      	ldr	r1, [r3, #8]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f000 fac9 	bl	8005662 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	609a      	str	r2, [r3, #8]
      break;
 80050e8:	e04c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6899      	ldr	r1, [r3, #8]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f000 fab2 	bl	8005662 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800510c:	609a      	str	r2, [r3, #8]
      break;
 800510e:	e039      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	461a      	mov	r2, r3
 800511e:	f000 fa29 	bl	8005574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2150      	movs	r1, #80	; 0x50
 8005128:	4618      	mov	r0, r3
 800512a:	f000 fa80 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 800512e:	e029      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6818      	ldr	r0, [r3, #0]
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	6859      	ldr	r1, [r3, #4]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	461a      	mov	r2, r3
 800513e:	f000 fa47 	bl	80055d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2160      	movs	r1, #96	; 0x60
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fa70 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 800514e:	e019      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6818      	ldr	r0, [r3, #0]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	461a      	mov	r2, r3
 800515e:	f000 fa09 	bl	8005574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2140      	movs	r1, #64	; 0x40
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fa60 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 800516e:	e009      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4619      	mov	r1, r3
 800517a:	4610      	mov	r0, r2
 800517c:	f000 fa57 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 8005180:	e000      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a29      	ldr	r2, [pc, #164]	; (8005258 <TIM_Base_SetConfig+0xb8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0x30>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0x30>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a26      	ldr	r2, [pc, #152]	; (800525c <TIM_Base_SetConfig+0xbc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0x30>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a25      	ldr	r2, [pc, #148]	; (8005260 <TIM_Base_SetConfig+0xc0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <TIM_Base_SetConfig+0xb8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00b      	beq.n	8005202 <TIM_Base_SetConfig+0x62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051f0:	d007      	beq.n	8005202 <TIM_Base_SetConfig+0x62>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <TIM_Base_SetConfig+0xbc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_Base_SetConfig+0x62>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a18      	ldr	r2, [pc, #96]	; (8005260 <TIM_Base_SetConfig+0xc0>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d108      	bne.n	8005214 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a07      	ldr	r2, [pc, #28]	; (8005258 <TIM_Base_SetConfig+0xb8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800

08005264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	f023 0201 	bic.w	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0303 	bic.w	r3, r3, #3
 800529a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f023 0302 	bic.w	r3, r3, #2
 80052ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a1c      	ldr	r2, [pc, #112]	; (800532c <TIM_OC1_SetConfig+0xc8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d10c      	bne.n	80052da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0308 	bic.w	r3, r3, #8
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f023 0304 	bic.w	r3, r3, #4
 80052d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a13      	ldr	r2, [pc, #76]	; (800532c <TIM_OC1_SetConfig+0xc8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d111      	bne.n	8005306 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	40012c00 	.word	0x40012c00

08005330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	f023 0210 	bic.w	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f023 0320 	bic.w	r3, r3, #32
 800537a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <TIM_OC2_SetConfig+0xd0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d10d      	bne.n	80053ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a14      	ldr	r2, [pc, #80]	; (8005400 <TIM_OC2_SetConfig+0xd0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d113      	bne.n	80053dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4313      	orrs	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10d      	bne.n	800547e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC3_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d113      	bne.n	80054ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bc80      	pop	{r7}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40012c00 	.word	0x40012c00

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <TIM_OC4_SetConfig+0x98>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d109      	bne.n	800554c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00

08005574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0201 	bic.w	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f023 030a 	bic.w	r3, r3, #10
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f023 0210 	bic.w	r2, r3, #16
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	031b      	lsls	r3, r3, #12
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800560c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	f043 0307 	orr.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	021a      	lsls	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	431a      	orrs	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	609a      	str	r2, [r3, #8]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2201      	movs	r2, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e032      	b.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005738:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4313      	orrs	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005770:	b084      	sub	sp, #16
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	f107 0014 	add.w	r0, r7, #20
 800577e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	b004      	add	sp, #16
 800578e:	4770      	bx	lr

08005790 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057c4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	43db      	mvns	r3, r3
 80057d8:	b29b      	uxth	r3, r3
 80057da:	4013      	ands	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr

080057f0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr

08005808 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005808:	b084      	sub	sp, #16
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	f107 0014 	add.w	r0, r7, #20
 8005816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	b004      	add	sp, #16
 8005846:	4770      	bx	lr

08005848 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005848:	b480      	push	{r7}
 800584a:	b09b      	sub	sp, #108	; 0x6c
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	78db      	ldrb	r3, [r3, #3]
 8005876:	2b03      	cmp	r3, #3
 8005878:	d81f      	bhi.n	80058ba <USB_ActivateEndpoint+0x72>
 800587a:	a201      	add	r2, pc, #4	; (adr r2, 8005880 <USB_ActivateEndpoint+0x38>)
 800587c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005880:	08005891 	.word	0x08005891
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058c3 	.word	0x080058c3
 800588c:	0800589f 	.word	0x0800589f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005890:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005894:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005898:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800589c:	e012      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800589e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058a2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80058a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058aa:	e00b      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058b8:	e004      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80058c0:	e000      	b.n	80058c4 <USB_ActivateEndpoint+0x7c>
      break;
 80058c2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	441a      	add	r2, r3
 80058ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	4313      	orrs	r3, r2
 8005906:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	441a      	add	r2, r3
 8005914:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800591c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005928:	b29b      	uxth	r3, r3
 800592a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	7b1b      	ldrb	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 8149 	bne.w	8005bc8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8084 	beq.w	8005a48 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	88db      	ldrh	r3, [r3, #6]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	b29b      	uxth	r3, r3
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	81fb      	strh	r3, [r7, #14]
 8005982:	89fb      	ldrh	r3, [r7, #14]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01b      	beq.n	80059c4 <USB_ActivateEndpoint+0x17c>
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	b29b      	uxth	r3, r3
 800599a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	81bb      	strh	r3, [r7, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	441a      	add	r2, r3
 80059ae:	89bb      	ldrh	r3, [r7, #12]
 80059b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	78db      	ldrb	r3, [r3, #3]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d020      	beq.n	8005a0e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e2:	813b      	strh	r3, [r7, #8]
 80059e4:	893b      	ldrh	r3, [r7, #8]
 80059e6:	f083 0320 	eor.w	r3, r3, #32
 80059ea:	813b      	strh	r3, [r7, #8]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	441a      	add	r2, r3
 80059f6:	893b      	ldrh	r3, [r7, #8]
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]
 8005a0c:	e27f      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a24:	817b      	strh	r3, [r7, #10]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	441a      	add	r2, r3
 8005a30:	897b      	ldrh	r3, [r7, #10]
 8005a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	8013      	strh	r3, [r2, #0]
 8005a46:	e262      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	4413      	add	r3, r2
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	011a      	lsls	r2, r3, #4
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	085b      	lsrs	r3, r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	4413      	add	r3, r2
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	011a      	lsls	r2, r3, #4
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	4413      	add	r3, r2
 8005a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d112      	bne.n	8005ace <USB_ActivateEndpoint+0x286>
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	801a      	strh	r2, [r3, #0]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	801a      	strh	r2, [r3, #0]
 8005acc:	e02f      	b.n	8005b2e <USB_ActivateEndpoint+0x2e6>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ad4:	d813      	bhi.n	8005afe <USB_ActivateEndpoint+0x2b6>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	085b      	lsrs	r3, r3, #1
 8005adc:	663b      	str	r3, [r7, #96]	; 0x60
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <USB_ActivateEndpoint+0x2a8>
 8005aea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005aec:	3301      	adds	r3, #1
 8005aee:	663b      	str	r3, [r7, #96]	; 0x60
 8005af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e017      	b.n	8005b2e <USB_ActivateEndpoint+0x2e6>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	663b      	str	r3, [r7, #96]	; 0x60
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d102      	bne.n	8005b18 <USB_ActivateEndpoint+0x2d0>
 8005b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b14:	3b01      	subs	r3, #1
 8005b16:	663b      	str	r3, [r7, #96]	; 0x60
 8005b18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	83fb      	strh	r3, [r7, #30]
 8005b3c:	8bfb      	ldrh	r3, [r7, #30]
 8005b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01b      	beq.n	8005b7e <USB_ActivateEndpoint+0x336>
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5c:	83bb      	strh	r3, [r7, #28]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	8bbb      	ldrh	r3, [r7, #28]
 8005b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b94:	837b      	strh	r3, [r7, #26]
 8005b96:	8b7b      	ldrh	r3, [r7, #26]
 8005b98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b9c:	837b      	strh	r3, [r7, #26]
 8005b9e:	8b7b      	ldrh	r3, [r7, #26]
 8005ba0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ba4:	837b      	strh	r3, [r7, #26]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	441a      	add	r2, r3
 8005bb0:	8b7b      	ldrh	r3, [r7, #26]
 8005bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8013      	strh	r3, [r2, #0]
 8005bc6:	e1a2      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bde:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c14:	4413      	add	r3, r2
 8005c16:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	011a      	lsls	r2, r3, #4
 8005c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c26:	657b      	str	r3, [r7, #84]	; 0x54
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	891b      	ldrh	r3, [r3, #8]
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c48:	4413      	add	r3, r2
 8005c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	011a      	lsls	r2, r3, #4
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	895b      	ldrh	r3, [r3, #10]
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	785b      	ldrb	r3, [r3, #1]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8091 	bne.w	8005d98 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c84:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d01b      	beq.n	8005cc6 <USB_ActivateEndpoint+0x47e>
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <USB_ActivateEndpoint+0x4ce>
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	441a      	add	r2, r3
 8005d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	4413      	add	r3, r2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d2e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d3c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d74:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	441a      	add	r2, r3
 8005d80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	8013      	strh	r3, [r2, #0]
 8005d96:	e0ba      	b.n	8005f0e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005da8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01d      	beq.n	8005df0 <USB_ActivateEndpoint+0x5a8>
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	441a      	add	r2, r3
 8005dd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005e00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01d      	beq.n	8005e48 <USB_ActivateEndpoint+0x600>
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	441a      	add	r2, r3
 8005e30:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	78db      	ldrb	r3, [r3, #3]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d024      	beq.n	8005e9a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e6e:	f083 0320 	eor.w	r3, r3, #32
 8005e72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	8013      	strh	r3, [r2, #0]
 8005e98:	e01d      	b.n	8005ed6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	441a      	add	r2, r3
 8005ef8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	376c      	adds	r7, #108	; 0x6c
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr

08005f1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b08d      	sub	sp, #52	; 0x34
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	7b1b      	ldrb	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 808e 	bne.w	800604c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d044      	beq.n	8005fc2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	81bb      	strh	r3, [r7, #12]
 8005f46:	89bb      	ldrh	r3, [r7, #12]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <USB_DeactivateEndpoint+0x6c>
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f66:	817b      	strh	r3, [r7, #10]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9e:	813b      	strh	r3, [r7, #8]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	893b      	ldrh	r3, [r7, #8]
 8005fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	8013      	strh	r3, [r2, #0]
 8005fc0:	e192      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	827b      	strh	r3, [r7, #18]
 8005fd0:	8a7b      	ldrh	r3, [r7, #18]
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01b      	beq.n	8006012 <USB_DeactivateEndpoint+0xf6>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff0:	823b      	strh	r3, [r7, #16]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	8a3b      	ldrh	r3, [r7, #16]
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006028:	81fb      	strh	r3, [r7, #14]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	441a      	add	r2, r3
 8006034:	89fb      	ldrh	r3, [r7, #14]
 8006036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800603a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800603e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006046:	b29b      	uxth	r3, r3
 8006048:	8013      	strh	r3, [r2, #0]
 800604a:	e14d      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 80a5 	bne.w	80061a0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	843b      	strh	r3, [r7, #32]
 8006064:	8c3b      	ldrh	r3, [r7, #32]
 8006066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01b      	beq.n	80060a6 <USB_DeactivateEndpoint+0x18a>
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006084:	83fb      	strh	r3, [r7, #30]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	441a      	add	r2, r3
 8006090:	8bfb      	ldrh	r3, [r7, #30]
 8006092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800609a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800609e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	83bb      	strh	r3, [r7, #28]
 80060b4:	8bbb      	ldrh	r3, [r7, #28]
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d01b      	beq.n	80060f6 <USB_DeactivateEndpoint+0x1da>
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	881b      	ldrh	r3, [r3, #0]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060d4:	837b      	strh	r3, [r7, #26]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	441a      	add	r2, r3
 80060e0:	8b7b      	ldrh	r3, [r7, #26]
 80060e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	b29b      	uxth	r3, r3
 8006104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610c:	833b      	strh	r3, [r7, #24]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	441a      	add	r2, r3
 8006118:	8b3b      	ldrh	r3, [r7, #24]
 800611a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800611e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006126:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800612a:	b29b      	uxth	r3, r3
 800612c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006144:	82fb      	strh	r3, [r7, #22]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	8afb      	ldrh	r3, [r7, #22]
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800615a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800615e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800617c:	82bb      	strh	r3, [r7, #20]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	8abb      	ldrh	r3, [r7, #20]
 800618a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800618e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]
 800619e:	e0a3      	b.n	80062e8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01b      	beq.n	80061f0 <USB_DeactivateEndpoint+0x2d4>
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	441a      	add	r2, r3
 80061da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01b      	beq.n	8006240 <USB_DeactivateEndpoint+0x324>
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	441a      	add	r2, r3
 800622a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800622c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006256:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006274:	b29b      	uxth	r3, r3
 8006276:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800628a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800628e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3734      	adds	r7, #52	; 0x34
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b0c4      	sub	sp, #272	; 0x110
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	1d3b      	adds	r3, r7, #4
 80062fc:	6018      	str	r0, [r3, #0]
 80062fe:	463b      	mov	r3, r7
 8006300:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006302:	463b      	mov	r3, r7
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b01      	cmp	r3, #1
 800630a:	f040 8557 	bne.w	8006dbc <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	463b      	mov	r3, r7
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	429a      	cmp	r2, r3
 800631c:	d905      	bls.n	800632a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800631e:	463b      	mov	r3, r7
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006328:	e004      	b.n	8006334 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800632a:	463b      	mov	r3, r7
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006334:	463b      	mov	r3, r7
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	7b1b      	ldrb	r3, [r3, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d12c      	bne.n	8006398 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800633e:	463b      	mov	r3, r7
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6959      	ldr	r1, [r3, #20]
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	88da      	ldrh	r2, [r3, #6]
 800634a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800634e:	b29b      	uxth	r3, r3
 8006350:	1d38      	adds	r0, r7, #4
 8006352:	6800      	ldr	r0, [r0, #0]
 8006354:	f001 fa2c 	bl	80077b0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	617b      	str	r3, [r7, #20]
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4413      	add	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	463b      	mov	r3, r7
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	011a      	lsls	r2, r3, #4
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	4413      	add	r3, r2
 800637c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006380:	f107 0310 	add.w	r3, r7, #16
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800638a:	b29a      	uxth	r2, r3
 800638c:	f107 0310 	add.w	r3, r7, #16
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	f000 bcdd 	b.w	8006d52 <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006398:	463b      	mov	r3, r7
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	78db      	ldrb	r3, [r3, #3]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	f040 8347 	bne.w	8006a32 <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80063a4:	463b      	mov	r3, r7
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6a1a      	ldr	r2, [r3, #32]
 80063aa:	463b      	mov	r3, r7
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	f240 82eb 	bls.w	800698c <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	463b      	mov	r3, r7
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80063d4:	1d3b      	adds	r3, r7, #4
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	463b      	mov	r3, r7
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80063e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063fa:	463b      	mov	r3, r7
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006404:	1ad2      	subs	r2, r2, r3
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800640c:	1d3b      	adds	r3, r7, #4
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	463b      	mov	r3, r7
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8159 	beq.w	80066da <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006428:	1d3b      	adds	r3, r7, #4
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
 800642e:	463b      	mov	r3, r7
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d164      	bne.n	8006502 <USB_EPStartXfer+0x20e>
 8006438:	1d3b      	adds	r3, r7, #4
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006446:	b29b      	uxth	r3, r3
 8006448:	461a      	mov	r2, r3
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	4413      	add	r3, r2
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006450:	463b      	mov	r3, r7
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	011a      	lsls	r2, r3, #4
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	4413      	add	r3, r2
 800645c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
 8006462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006466:	2b00      	cmp	r3, #0
 8006468:	d112      	bne.n	8006490 <USB_EPStartXfer+0x19c>
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	881b      	ldrh	r3, [r3, #0]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006474:	b29a      	uxth	r2, r3
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	801a      	strh	r2, [r3, #0]
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	b29b      	uxth	r3, r3
 8006480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006488:	b29a      	uxth	r2, r3
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	801a      	strh	r2, [r3, #0]
 800648e:	e054      	b.n	800653a <USB_EPStartXfer+0x246>
 8006490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006494:	2b3e      	cmp	r3, #62	; 0x3e
 8006496:	d817      	bhi.n	80064c8 <USB_EPStartXfer+0x1d4>
 8006498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800649c:	085b      	lsrs	r3, r3, #1
 800649e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <USB_EPStartXfer+0x1c4>
 80064ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b2:	3301      	adds	r3, #1
 80064b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064bc:	b29b      	uxth	r3, r3
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e038      	b.n	800653a <USB_EPStartXfer+0x246>
 80064c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064cc:	095b      	lsrs	r3, r3, #5
 80064ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d104      	bne.n	80064e8 <USB_EPStartXfer+0x1f4>
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e2:	3b01      	subs	r3, #1
 80064e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	029b      	lsls	r3, r3, #10
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fe:	801a      	strh	r2, [r3, #0]
 8006500:	e01b      	b.n	800653a <USB_EPStartXfer+0x246>
 8006502:	463b      	mov	r3, r7
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	785b      	ldrb	r3, [r3, #1]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d116      	bne.n	800653a <USB_EPStartXfer+0x246>
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006514:	b29b      	uxth	r3, r3
 8006516:	461a      	mov	r2, r3
 8006518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651a:	4413      	add	r3, r2
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	463b      	mov	r3, r7
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	011a      	lsls	r2, r3, #4
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006528:	4413      	add	r3, r2
 800652a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
 8006530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006534:	b29a      	uxth	r2, r3
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800653a:	463b      	mov	r3, r7
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	895b      	ldrh	r3, [r3, #10]
 8006540:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006544:	463b      	mov	r3, r7
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6959      	ldr	r1, [r3, #20]
 800654a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800654e:	b29b      	uxth	r3, r3
 8006550:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006554:	1d38      	adds	r0, r7, #4
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	f001 f92a 	bl	80077b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800655c:	463b      	mov	r3, r7
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006566:	441a      	add	r2, r3
 8006568:	463b      	mov	r3, r7
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800656e:	463b      	mov	r3, r7
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6a1a      	ldr	r2, [r3, #32]
 8006574:	463b      	mov	r3, r7
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	429a      	cmp	r2, r3
 800657c:	d909      	bls.n	8006592 <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 800657e:	463b      	mov	r3, r7
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6a1a      	ldr	r2, [r3, #32]
 8006584:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006588:	1ad2      	subs	r2, r2, r3
 800658a:	463b      	mov	r3, r7
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	621a      	str	r2, [r3, #32]
 8006590:	e008      	b.n	80065a4 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006592:	463b      	mov	r3, r7
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2200      	movs	r2, #0
 80065a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065a4:	463b      	mov	r3, r7
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d164      	bne.n	8006678 <USB_EPStartXfer+0x384>
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	1d3b      	adds	r3, r7, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	011a      	lsls	r2, r3, #4
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d112      	bne.n	8006606 <USB_EPStartXfer+0x312>
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fe:	b29a      	uxth	r2, r3
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e057      	b.n	80066b6 <USB_EPStartXfer+0x3c2>
 8006606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800660a:	2b3e      	cmp	r3, #62	; 0x3e
 800660c:	d817      	bhi.n	800663e <USB_EPStartXfer+0x34a>
 800660e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <USB_EPStartXfer+0x33a>
 8006624:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006628:	3301      	adds	r3, #1
 800662a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800662e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006632:	b29b      	uxth	r3, r3
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	b29a      	uxth	r2, r3
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	e03b      	b.n	80066b6 <USB_EPStartXfer+0x3c2>
 800663e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2b00      	cmp	r3, #0
 8006652:	d104      	bne.n	800665e <USB_EPStartXfer+0x36a>
 8006654:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006658:	3b01      	subs	r3, #1
 800665a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800665e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006662:	b29b      	uxth	r3, r3
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	b29b      	uxth	r3, r3
 8006668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006670:	b29a      	uxth	r2, r3
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e01e      	b.n	80066b6 <USB_EPStartXfer+0x3c2>
 8006678:	463b      	mov	r3, r7
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	785b      	ldrb	r3, [r3, #1]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d119      	bne.n	80066b6 <USB_EPStartXfer+0x3c2>
 8006682:	1d3b      	adds	r3, r7, #4
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006690:	b29b      	uxth	r3, r3
 8006692:	461a      	mov	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	4413      	add	r3, r2
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
 800669a:	463b      	mov	r3, r7
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	011a      	lsls	r2, r3, #4
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	4413      	add	r3, r2
 80066a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066aa:	623b      	str	r3, [r7, #32]
 80066ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066b6:	463b      	mov	r3, r7
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	891b      	ldrh	r3, [r3, #8]
 80066bc:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066c0:	463b      	mov	r3, r7
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6959      	ldr	r1, [r3, #20]
 80066c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80066d0:	1d38      	adds	r0, r7, #4
 80066d2:	6800      	ldr	r0, [r0, #0]
 80066d4:	f001 f86c 	bl	80077b0 <USB_WritePMA>
 80066d8:	e33b      	b.n	8006d52 <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066da:	463b      	mov	r3, r7
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d164      	bne.n	80067ae <USB_EPStartXfer+0x4ba>
 80066e4:	1d3b      	adds	r3, r7, #4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ea:	1d3b      	adds	r3, r7, #4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f8:	4413      	add	r3, r2
 80066fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066fc:	463b      	mov	r3, r7
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	011a      	lsls	r2, r3, #4
 8006704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006706:	4413      	add	r3, r2
 8006708:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800670c:	64bb      	str	r3, [r7, #72]	; 0x48
 800670e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d112      	bne.n	800673c <USB_EPStartXfer+0x448>
 8006716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006720:	b29a      	uxth	r2, r3
 8006722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006724:	801a      	strh	r2, [r3, #0]
 8006726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006734:	b29a      	uxth	r2, r3
 8006736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006738:	801a      	strh	r2, [r3, #0]
 800673a:	e057      	b.n	80067ec <USB_EPStartXfer+0x4f8>
 800673c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006740:	2b3e      	cmp	r3, #62	; 0x3e
 8006742:	d817      	bhi.n	8006774 <USB_EPStartXfer+0x480>
 8006744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006748:	085b      	lsrs	r3, r3, #1
 800674a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800674e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <USB_EPStartXfer+0x470>
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675e:	3301      	adds	r3, #1
 8006760:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006768:	b29b      	uxth	r3, r3
 800676a:	029b      	lsls	r3, r3, #10
 800676c:	b29a      	uxth	r2, r3
 800676e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	e03b      	b.n	80067ec <USB_EPStartXfer+0x4f8>
 8006774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800677e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006782:	f003 031f 	and.w	r3, r3, #31
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <USB_EPStartXfer+0x4a0>
 800678a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678e:	3b01      	subs	r3, #1
 8006790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006798:	b29b      	uxth	r3, r3
 800679a:	029b      	lsls	r3, r3, #10
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e01e      	b.n	80067ec <USB_EPStartXfer+0x4f8>
 80067ae:	463b      	mov	r3, r7
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	785b      	ldrb	r3, [r3, #1]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d119      	bne.n	80067ec <USB_EPStartXfer+0x4f8>
 80067b8:	1d3b      	adds	r3, r7, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	657b      	str	r3, [r7, #84]	; 0x54
 80067be:	1d3b      	adds	r3, r7, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067cc:	4413      	add	r3, r2
 80067ce:	657b      	str	r3, [r7, #84]	; 0x54
 80067d0:	463b      	mov	r3, r7
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	011a      	lsls	r2, r3, #4
 80067d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067da:	4413      	add	r3, r2
 80067dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067e0:	653b      	str	r3, [r7, #80]	; 0x50
 80067e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067ec:	463b      	mov	r3, r7
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	891b      	ldrh	r3, [r3, #8]
 80067f2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067f6:	463b      	mov	r3, r7
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6959      	ldr	r1, [r3, #20]
 80067fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006800:	b29b      	uxth	r3, r3
 8006802:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006806:	1d38      	adds	r0, r7, #4
 8006808:	6800      	ldr	r0, [r0, #0]
 800680a:	f000 ffd1 	bl	80077b0 <USB_WritePMA>
            ep->xfer_buff += len;
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006818:	441a      	add	r2, r3
 800681a:	463b      	mov	r3, r7
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006820:	463b      	mov	r3, r7
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6a1a      	ldr	r2, [r3, #32]
 8006826:	463b      	mov	r3, r7
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	429a      	cmp	r2, r3
 800682e:	d909      	bls.n	8006844 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8006830:	463b      	mov	r3, r7
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6a1a      	ldr	r2, [r3, #32]
 8006836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800683a:	1ad2      	subs	r2, r2, r3
 800683c:	463b      	mov	r3, r7
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	621a      	str	r2, [r3, #32]
 8006842:	e008      	b.n	8006856 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8006844:	463b      	mov	r3, r7
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 800684e:	463b      	mov	r3, r7
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2200      	movs	r2, #0
 8006854:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	647b      	str	r3, [r7, #68]	; 0x44
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d164      	bne.n	8006930 <USB_EPStartXfer+0x63c>
 8006866:	1d3b      	adds	r3, r7, #4
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686c:	1d3b      	adds	r3, r7, #4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006874:	b29b      	uxth	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687a:	4413      	add	r3, r2
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687e:	463b      	mov	r3, r7
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	011a      	lsls	r2, r3, #4
 8006886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006888:	4413      	add	r3, r2
 800688a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800688e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d112      	bne.n	80068be <USB_EPStartXfer+0x5ca>
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	b29b      	uxth	r3, r3
 800689e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	881b      	ldrh	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	801a      	strh	r2, [r3, #0]
 80068bc:	e054      	b.n	8006968 <USB_EPStartXfer+0x674>
 80068be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068c2:	2b3e      	cmp	r3, #62	; 0x3e
 80068c4:	d817      	bhi.n	80068f6 <USB_EPStartXfer+0x602>
 80068c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <USB_EPStartXfer+0x5f2>
 80068dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068e0:	3301      	adds	r3, #1
 80068e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	029b      	lsls	r3, r3, #10
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e038      	b.n	8006968 <USB_EPStartXfer+0x674>
 80068f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2b00      	cmp	r3, #0
 800690a:	d104      	bne.n	8006916 <USB_EPStartXfer+0x622>
 800690c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006910:	3b01      	subs	r3, #1
 8006912:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800691a:	b29b      	uxth	r3, r3
 800691c:	029b      	lsls	r3, r3, #10
 800691e:	b29b      	uxth	r3, r3
 8006920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006928:	b29a      	uxth	r2, r3
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	801a      	strh	r2, [r3, #0]
 800692e:	e01b      	b.n	8006968 <USB_EPStartXfer+0x674>
 8006930:	463b      	mov	r3, r7
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	785b      	ldrb	r3, [r3, #1]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d116      	bne.n	8006968 <USB_EPStartXfer+0x674>
 800693a:	1d3b      	adds	r3, r7, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006948:	4413      	add	r3, r2
 800694a:	647b      	str	r3, [r7, #68]	; 0x44
 800694c:	463b      	mov	r3, r7
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	011a      	lsls	r2, r3, #4
 8006954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006956:	4413      	add	r3, r2
 8006958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800695c:	643b      	str	r3, [r7, #64]	; 0x40
 800695e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006962:	b29a      	uxth	r2, r3
 8006964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006966:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006968:	463b      	mov	r3, r7
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	895b      	ldrh	r3, [r3, #10]
 800696e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006972:	463b      	mov	r3, r7
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6959      	ldr	r1, [r3, #20]
 8006978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800697c:	b29b      	uxth	r3, r3
 800697e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006982:	1d38      	adds	r0, r7, #4
 8006984:	6800      	ldr	r0, [r0, #0]
 8006986:	f000 ff13 	bl	80077b0 <USB_WritePMA>
 800698a:	e1e2      	b.n	8006d52 <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800698c:	463b      	mov	r3, r7
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006996:	1d3b      	adds	r3, r7, #4
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	463b      	mov	r3, r7
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069b0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80069b4:	1d3b      	adds	r3, r7, #4
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	463b      	mov	r3, r7
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	441a      	add	r2, r3
 80069c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80069c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	663b      	str	r3, [r7, #96]	; 0x60
 80069e0:	1d3b      	adds	r3, r7, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ee:	4413      	add	r3, r2
 80069f0:	663b      	str	r3, [r7, #96]	; 0x60
 80069f2:	463b      	mov	r3, r7
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	011a      	lsls	r2, r3, #4
 80069fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069fc:	4413      	add	r3, r2
 80069fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a0e:	463b      	mov	r3, r7
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	891b      	ldrh	r3, [r3, #8]
 8006a14:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a18:	463b      	mov	r3, r7
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6959      	ldr	r1, [r3, #20]
 8006a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006a28:	1d38      	adds	r0, r7, #4
 8006a2a:	6800      	ldr	r0, [r0, #0]
 8006a2c:	f000 fec0 	bl	80077b0 <USB_WritePMA>
 8006a30:	e18f      	b.n	8006d52 <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	463b      	mov	r3, r7
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 808f 	beq.w	8006b6c <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a4e:	1d3b      	adds	r3, r7, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a54:	463b      	mov	r3, r7
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d164      	bne.n	8006b28 <USB_EPStartXfer+0x834>
 8006a5e:	1d3b      	adds	r3, r7, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	673b      	str	r3, [r7, #112]	; 0x70
 8006a64:	1d3b      	adds	r3, r7, #4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a72:	4413      	add	r3, r2
 8006a74:	673b      	str	r3, [r7, #112]	; 0x70
 8006a76:	463b      	mov	r3, r7
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	011a      	lsls	r2, r3, #4
 8006a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d112      	bne.n	8006ab6 <USB_EPStartXfer+0x7c2>
 8006a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9e:	801a      	strh	r2, [r3, #0]
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	e054      	b.n	8006b60 <USB_EPStartXfer+0x86c>
 8006ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006aba:	2b3e      	cmp	r3, #62	; 0x3e
 8006abc:	d817      	bhi.n	8006aee <USB_EPStartXfer+0x7fa>
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d004      	beq.n	8006ade <USB_EPStartXfer+0x7ea>
 8006ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	029b      	lsls	r3, r3, #10
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	e038      	b.n	8006b60 <USB_EPStartXfer+0x86c>
 8006aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006af2:	095b      	lsrs	r3, r3, #5
 8006af4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <USB_EPStartXfer+0x81a>
 8006b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	029b      	lsls	r3, r3, #10
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b24:	801a      	strh	r2, [r3, #0]
 8006b26:	e01b      	b.n	8006b60 <USB_EPStartXfer+0x86c>
 8006b28:	463b      	mov	r3, r7
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	785b      	ldrb	r3, [r3, #1]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d116      	bne.n	8006b60 <USB_EPStartXfer+0x86c>
 8006b32:	1d3b      	adds	r3, r7, #4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b40:	4413      	add	r3, r2
 8006b42:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b44:	463b      	mov	r3, r7
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	011a      	lsls	r2, r3, #4
 8006b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b4e:	4413      	add	r3, r2
 8006b50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b54:	677b      	str	r3, [r7, #116]	; 0x74
 8006b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b5e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b60:	463b      	mov	r3, r7
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	895b      	ldrh	r3, [r3, #10]
 8006b66:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8006b6a:	e097      	b.n	8006c9c <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b6c:	463b      	mov	r3, r7
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d168      	bne.n	8006c48 <USB_EPStartXfer+0x954>
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b8e:	4413      	add	r3, r2
 8006b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b94:	463b      	mov	r3, r7
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	011a      	lsls	r2, r3, #4
 8006b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d112      	bne.n	8006bd6 <USB_EPStartXfer+0x8e2>
 8006bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	e05d      	b.n	8006c92 <USB_EPStartXfer+0x99e>
 8006bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bda:	2b3e      	cmp	r3, #62	; 0x3e
 8006bdc:	d817      	bhi.n	8006c0e <USB_EPStartXfer+0x91a>
 8006bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <USB_EPStartXfer+0x90a>
 8006bf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006bfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	029b      	lsls	r3, r3, #10
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e041      	b.n	8006c92 <USB_EPStartXfer+0x99e>
 8006c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c1c:	f003 031f 	and.w	r3, r3, #31
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d104      	bne.n	8006c2e <USB_EPStartXfer+0x93a>
 8006c24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	029b      	lsls	r3, r3, #10
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	e024      	b.n	8006c92 <USB_EPStartXfer+0x99e>
 8006c48:	463b      	mov	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d11f      	bne.n	8006c92 <USB_EPStartXfer+0x99e>
 8006c52:	1d3b      	adds	r3, r7, #4
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c5a:	1d3b      	adds	r3, r7, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c70:	463b      	mov	r3, r7
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	011a      	lsls	r2, r3, #4
 8006c78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c92:	463b      	mov	r3, r7
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	891b      	ldrh	r3, [r3, #8]
 8006c98:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6959      	ldr	r1, [r3, #20]
 8006ca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006cac:	1d38      	adds	r0, r7, #4
 8006cae:	6800      	ldr	r0, [r0, #0]
 8006cb0:	f000 fd7e 	bl	80077b0 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	785b      	ldrb	r3, [r3, #1]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d122      	bne.n	8006d04 <USB_EPStartXfer+0xa10>
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	463b      	mov	r3, r7
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006cdc:	1d3b      	adds	r3, r7, #4
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	441a      	add	r2, r3
 8006cea:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	8013      	strh	r3, [r2, #0]
 8006d02:	e026      	b.n	8006d52 <USB_EPStartXfer+0xa5e>
 8006d04:	463b      	mov	r3, r7
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d121      	bne.n	8006d52 <USB_EPStartXfer+0xa5e>
 8006d0e:	1d3b      	adds	r3, r7, #4
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	463b      	mov	r3, r7
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d2c:	1d3b      	adds	r3, r7, #4
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	463b      	mov	r3, r7
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d52:	1d3b      	adds	r3, r7, #4
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	463b      	mov	r3, r7
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f107 020e 	add.w	r2, r7, #14
 8006d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d70:	8013      	strh	r3, [r2, #0]
 8006d72:	f107 030e 	add.w	r3, r7, #14
 8006d76:	f107 020e 	add.w	r2, r7, #14
 8006d7a:	8812      	ldrh	r2, [r2, #0]
 8006d7c:	f082 0210 	eor.w	r2, r2, #16
 8006d80:	801a      	strh	r2, [r3, #0]
 8006d82:	f107 030e 	add.w	r3, r7, #14
 8006d86:	f107 020e 	add.w	r2, r7, #14
 8006d8a:	8812      	ldrh	r2, [r2, #0]
 8006d8c:	f082 0220 	eor.w	r2, r2, #32
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	1d3b      	adds	r3, r7, #4
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	463b      	mov	r3, r7
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	441a      	add	r2, r3
 8006da0:	f107 030e 	add.w	r3, r7, #14
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8013      	strh	r3, [r2, #0]
 8006dba:	e3b5      	b.n	8007528 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	7b1b      	ldrb	r3, [r3, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f040 8090 	bne.w	8006ee8 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006dc8:	463b      	mov	r3, r7
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	699a      	ldr	r2, [r3, #24]
 8006dce:	463b      	mov	r3, r7
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d90e      	bls.n	8006df6 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006dd8:	463b      	mov	r3, r7
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 8006de2:	463b      	mov	r3, r7
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dec:	1ad2      	subs	r2, r2, r3
 8006dee:	463b      	mov	r3, r7
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	619a      	str	r2, [r3, #24]
 8006df4:	e008      	b.n	8006e08 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006df6:	463b      	mov	r3, r7
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8006e00:	463b      	mov	r3, r7
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e08:	1d3b      	adds	r3, r7, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e10:	1d3b      	adds	r3, r7, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e20:	4413      	add	r3, r2
 8006e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e26:	463b      	mov	r3, r7
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	011a      	lsls	r2, r3, #4
 8006e2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e32:	4413      	add	r3, r2
 8006e34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d116      	bne.n	8006e72 <USB_EPStartXfer+0xb7e>
 8006e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e56:	801a      	strh	r2, [r3, #0]
 8006e58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e6e:	801a      	strh	r2, [r3, #0]
 8006e70:	e32c      	b.n	80074cc <USB_EPStartXfer+0x11d8>
 8006e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e76:	2b3e      	cmp	r3, #62	; 0x3e
 8006e78:	d818      	bhi.n	8006eac <USB_EPStartXfer+0xbb8>
 8006e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <USB_EPStartXfer+0xba6>
 8006e90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e94:	3301      	adds	r3, #1
 8006e96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	029b      	lsls	r3, r3, #10
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ea8:	801a      	strh	r2, [r3, #0]
 8006eaa:	e30f      	b.n	80074cc <USB_EPStartXfer+0x11d8>
 8006eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d104      	bne.n	8006ecc <USB_EPStartXfer+0xbd8>
 8006ec2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ecc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	029b      	lsls	r3, r3, #10
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	e2f1      	b.n	80074cc <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ee8:	463b      	mov	r3, r7
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	78db      	ldrb	r3, [r3, #3]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	f040 818f 	bne.w	8007212 <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ef4:	463b      	mov	r3, r7
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d175      	bne.n	8006fea <USB_EPStartXfer+0xcf6>
 8006efe:	1d3b      	adds	r3, r7, #4
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f06:	1d3b      	adds	r3, r7, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f16:	4413      	add	r3, r2
 8006f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f1c:	463b      	mov	r3, r7
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	011a      	lsls	r2, r3, #4
 8006f24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f28:	4413      	add	r3, r2
 8006f2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f32:	463b      	mov	r3, r7
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d116      	bne.n	8006f6a <USB_EPStartXfer+0xc76>
 8006f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f4e:	801a      	strh	r2, [r3, #0]
 8006f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	e065      	b.n	8007036 <USB_EPStartXfer+0xd42>
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b3e      	cmp	r3, #62	; 0x3e
 8006f72:	d81a      	bhi.n	8006faa <USB_EPStartXfer+0xcb6>
 8006f74:	463b      	mov	r3, r7
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f80:	463b      	mov	r3, r7
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d004      	beq.n	8006f98 <USB_EPStartXfer+0xca4>
 8006f8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f92:	3301      	adds	r3, #1
 8006f94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	029b      	lsls	r3, r3, #10
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	e045      	b.n	8007036 <USB_EPStartXfer+0xd42>
 8006faa:	463b      	mov	r3, r7
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fb6:	463b      	mov	r3, r7
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <USB_EPStartXfer+0xcda>
 8006fc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	029b      	lsls	r3, r3, #10
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e025      	b.n	8007036 <USB_EPStartXfer+0xd42>
 8006fea:	463b      	mov	r3, r7
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d120      	bne.n	8007036 <USB_EPStartXfer+0xd42>
 8006ff4:	1d3b      	adds	r3, r7, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ffc:	1d3b      	adds	r3, r7, #4
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007004:	b29b      	uxth	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800700c:	4413      	add	r3, r2
 800700e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007012:	463b      	mov	r3, r7
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	011a      	lsls	r2, r3, #4
 800701a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800701e:	4413      	add	r3, r2
 8007020:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007028:	463b      	mov	r3, r7
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	b29a      	uxth	r2, r3
 8007030:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007034:	801a      	strh	r2, [r3, #0]
 8007036:	1d3b      	adds	r3, r7, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800703e:	463b      	mov	r3, r7
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	785b      	ldrb	r3, [r3, #1]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d175      	bne.n	8007134 <USB_EPStartXfer+0xe40>
 8007048:	1d3b      	adds	r3, r7, #4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007050:	1d3b      	adds	r3, r7, #4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007058:	b29b      	uxth	r3, r3
 800705a:	461a      	mov	r2, r3
 800705c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007060:	4413      	add	r3, r2
 8007062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007066:	463b      	mov	r3, r7
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	011a      	lsls	r2, r3, #4
 800706e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007072:	4413      	add	r3, r2
 8007074:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007078:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800707c:	463b      	mov	r3, r7
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d116      	bne.n	80070b4 <USB_EPStartXfer+0xdc0>
 8007086:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007092:	b29a      	uxth	r2, r3
 8007094:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007098:	801a      	strh	r2, [r3, #0]
 800709a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e061      	b.n	8007178 <USB_EPStartXfer+0xe84>
 80070b4:	463b      	mov	r3, r7
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b3e      	cmp	r3, #62	; 0x3e
 80070bc:	d81a      	bhi.n	80070f4 <USB_EPStartXfer+0xe00>
 80070be:	463b      	mov	r3, r7
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070ca:	463b      	mov	r3, r7
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <USB_EPStartXfer+0xdee>
 80070d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070dc:	3301      	adds	r3, #1
 80070de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	029b      	lsls	r3, r3, #10
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	e041      	b.n	8007178 <USB_EPStartXfer+0xe84>
 80070f4:	463b      	mov	r3, r7
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007100:	463b      	mov	r3, r7
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <USB_EPStartXfer+0xe24>
 800710e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007112:	3b01      	subs	r3, #1
 8007114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711c:	b29b      	uxth	r3, r3
 800711e:	029b      	lsls	r3, r3, #10
 8007120:	b29b      	uxth	r3, r3
 8007122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	e021      	b.n	8007178 <USB_EPStartXfer+0xe84>
 8007134:	463b      	mov	r3, r7
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	785b      	ldrb	r3, [r3, #1]
 800713a:	2b01      	cmp	r3, #1
 800713c:	d11c      	bne.n	8007178 <USB_EPStartXfer+0xe84>
 800713e:	1d3b      	adds	r3, r7, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007146:	b29b      	uxth	r3, r3
 8007148:	461a      	mov	r2, r3
 800714a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800714e:	4413      	add	r3, r2
 8007150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007154:	463b      	mov	r3, r7
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	011a      	lsls	r2, r3, #4
 800715c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007160:	4413      	add	r3, r2
 8007162:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800716a:	463b      	mov	r3, r7
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	b29a      	uxth	r2, r3
 8007172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007176:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007178:	463b      	mov	r3, r7
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 81a4 	beq.w	80074cc <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	463b      	mov	r3, r7
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007198:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800719c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d005      	beq.n	80071b0 <USB_EPStartXfer+0xebc>
 80071a4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10d      	bne.n	80071cc <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f040 8187 	bne.w	80074cc <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f040 8180 	bne.w	80074cc <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071cc:	1d3b      	adds	r3, r7, #4
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	463b      	mov	r3, r7
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80071ea:	1d3b      	adds	r3, r7, #4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	463b      	mov	r3, r7
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80071fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007200:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007208:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800720c:	b29b      	uxth	r3, r3
 800720e:	8013      	strh	r3, [r2, #0]
 8007210:	e15c      	b.n	80074cc <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007212:	463b      	mov	r3, r7
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	78db      	ldrb	r3, [r3, #3]
 8007218:	2b01      	cmp	r3, #1
 800721a:	f040 8155 	bne.w	80074c8 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800721e:	463b      	mov	r3, r7
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	463b      	mov	r3, r7
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d90e      	bls.n	800724c <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800722e:	463b      	mov	r3, r7
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8007238:	463b      	mov	r3, r7
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007242:	1ad2      	subs	r2, r2, r3
 8007244:	463b      	mov	r3, r7
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	619a      	str	r2, [r3, #24]
 800724a:	e008      	b.n	800725e <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 800724c:	463b      	mov	r3, r7
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8007256:	463b      	mov	r3, r7
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2200      	movs	r2, #0
 800725c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800725e:	463b      	mov	r3, r7
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d16f      	bne.n	8007348 <USB_EPStartXfer+0x1054>
 8007268:	1d3b      	adds	r3, r7, #4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007270:	1d3b      	adds	r3, r7, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007278:	b29b      	uxth	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007280:	4413      	add	r3, r2
 8007282:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007286:	463b      	mov	r3, r7
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	011a      	lsls	r2, r3, #4
 800728e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007292:	4413      	add	r3, r2
 8007294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d116      	bne.n	80072d2 <USB_EPStartXfer+0xfde>
 80072a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072b6:	801a      	strh	r2, [r3, #0]
 80072b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	e05f      	b.n	8007392 <USB_EPStartXfer+0x109e>
 80072d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072d6:	2b3e      	cmp	r3, #62	; 0x3e
 80072d8:	d818      	bhi.n	800730c <USB_EPStartXfer+0x1018>
 80072da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d004      	beq.n	80072fa <USB_EPStartXfer+0x1006>
 80072f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f4:	3301      	adds	r3, #1
 80072f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fe:	b29b      	uxth	r3, r3
 8007300:	029b      	lsls	r3, r3, #10
 8007302:	b29a      	uxth	r2, r3
 8007304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007308:	801a      	strh	r2, [r3, #0]
 800730a:	e042      	b.n	8007392 <USB_EPStartXfer+0x109e>
 800730c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007310:	095b      	lsrs	r3, r3, #5
 8007312:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007316:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800731a:	f003 031f 	and.w	r3, r3, #31
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <USB_EPStartXfer+0x1038>
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007326:	3b01      	subs	r3, #1
 8007328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007330:	b29b      	uxth	r3, r3
 8007332:	029b      	lsls	r3, r3, #10
 8007334:	b29b      	uxth	r3, r3
 8007336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e024      	b.n	8007392 <USB_EPStartXfer+0x109e>
 8007348:	463b      	mov	r3, r7
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d11f      	bne.n	8007392 <USB_EPStartXfer+0x109e>
 8007352:	1d3b      	adds	r3, r7, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800735a:	1d3b      	adds	r3, r7, #4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007362:	b29b      	uxth	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800736a:	4413      	add	r3, r2
 800736c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007370:	463b      	mov	r3, r7
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	011a      	lsls	r2, r3, #4
 8007378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800737c:	4413      	add	r3, r2
 800737e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007382:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007386:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800738a:	b29a      	uxth	r2, r3
 800738c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	1d3b      	adds	r3, r7, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800739a:	463b      	mov	r3, r7
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	785b      	ldrb	r3, [r3, #1]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d16f      	bne.n	8007484 <USB_EPStartXfer+0x1190>
 80073a4:	1d3b      	adds	r3, r7, #4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	461a      	mov	r2, r3
 80073b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073bc:	4413      	add	r3, r2
 80073be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073c2:	463b      	mov	r3, r7
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	011a      	lsls	r2, r3, #4
 80073ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073ce:	4413      	add	r3, r2
 80073d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d116      	bne.n	800740e <USB_EPStartXfer+0x111a>
 80073e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073f2:	801a      	strh	r2, [r3, #0]
 80073f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	e05e      	b.n	80074cc <USB_EPStartXfer+0x11d8>
 800740e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007412:	2b3e      	cmp	r3, #62	; 0x3e
 8007414:	d818      	bhi.n	8007448 <USB_EPStartXfer+0x1154>
 8007416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800741a:	085b      	lsrs	r3, r3, #1
 800741c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d004      	beq.n	8007436 <USB_EPStartXfer+0x1142>
 800742c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007430:	3301      	adds	r3, #1
 8007432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800743a:	b29b      	uxth	r3, r3
 800743c:	029b      	lsls	r3, r3, #10
 800743e:	b29a      	uxth	r2, r3
 8007440:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	e041      	b.n	80074cc <USB_EPStartXfer+0x11d8>
 8007448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007452:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007456:	f003 031f 	and.w	r3, r3, #31
 800745a:	2b00      	cmp	r3, #0
 800745c:	d104      	bne.n	8007468 <USB_EPStartXfer+0x1174>
 800745e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007462:	3b01      	subs	r3, #1
 8007464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800746c:	b29b      	uxth	r3, r3
 800746e:	029b      	lsls	r3, r3, #10
 8007470:	b29b      	uxth	r3, r3
 8007472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747a:	b29a      	uxth	r2, r3
 800747c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007480:	801a      	strh	r2, [r3, #0]
 8007482:	e023      	b.n	80074cc <USB_EPStartXfer+0x11d8>
 8007484:	463b      	mov	r3, r7
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d11e      	bne.n	80074cc <USB_EPStartXfer+0x11d8>
 800748e:	1d3b      	adds	r3, r7, #4
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007496:	b29b      	uxth	r3, r3
 8007498:	461a      	mov	r2, r3
 800749a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800749e:	4413      	add	r3, r2
 80074a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074a4:	463b      	mov	r3, r7
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	011a      	lsls	r2, r3, #4
 80074ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074b0:	4413      	add	r3, r2
 80074b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80074b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	e001      	b.n	80074cc <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e02e      	b.n	800752a <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	463b      	mov	r3, r7
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074ea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80074f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80074fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007502:	1d3b      	adds	r3, r7, #4
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	463b      	mov	r3, r7
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	441a      	add	r2, r3
 8007510:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800751c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007524:	b29b      	uxth	r3, r3
 8007526:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d020      	beq.n	8007588 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	4413      	add	r3, r2
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755c:	81bb      	strh	r3, [r7, #12]
 800755e:	89bb      	ldrh	r3, [r7, #12]
 8007560:	f083 0310 	eor.w	r3, r3, #16
 8007564:	81bb      	strh	r3, [r7, #12]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	441a      	add	r2, r3
 8007570:	89bb      	ldrh	r3, [r7, #12]
 8007572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800757a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800757e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007582:	b29b      	uxth	r3, r3
 8007584:	8013      	strh	r3, [r2, #0]
 8007586:	e01f      	b.n	80075c8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800759a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759e:	81fb      	strh	r3, [r7, #14]
 80075a0:	89fb      	ldrh	r3, [r7, #14]
 80075a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075a6:	81fb      	strh	r3, [r7, #14]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	441a      	add	r2, r3
 80075b2:	89fb      	ldrh	r3, [r7, #14]
 80075b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr

080075d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	7b1b      	ldrb	r3, [r3, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 809d 	bne.w	8007722 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	785b      	ldrb	r3, [r3, #1]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d04c      	beq.n	800768a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	823b      	strh	r3, [r7, #16]
 80075fe:	8a3b      	ldrh	r3, [r7, #16]
 8007600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01b      	beq.n	8007640 <USB_EPClearStall+0x6c>
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29b      	uxth	r3, r3
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761e:	81fb      	strh	r3, [r7, #14]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	441a      	add	r2, r3
 800762a:	89fb      	ldrh	r3, [r7, #14]
 800762c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800763c:	b29b      	uxth	r3, r3
 800763e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	78db      	ldrb	r3, [r3, #3]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d06c      	beq.n	8007722 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800765a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800765e:	81bb      	strh	r3, [r7, #12]
 8007660:	89bb      	ldrh	r3, [r7, #12]
 8007662:	f083 0320 	eor.w	r3, r3, #32
 8007666:	81bb      	strh	r3, [r7, #12]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	441a      	add	r2, r3
 8007672:	89bb      	ldrh	r3, [r7, #12]
 8007674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800767c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007684:	b29b      	uxth	r3, r3
 8007686:	8013      	strh	r3, [r2, #0]
 8007688:	e04b      	b.n	8007722 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	82fb      	strh	r3, [r7, #22]
 8007698:	8afb      	ldrh	r3, [r7, #22]
 800769a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01b      	beq.n	80076da <USB_EPClearStall+0x106>
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b8:	82bb      	strh	r3, [r7, #20]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	441a      	add	r2, r3
 80076c4:	8abb      	ldrh	r3, [r7, #20]
 80076c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4413      	add	r3, r2
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f0:	827b      	strh	r3, [r7, #18]
 80076f2:	8a7b      	ldrh	r3, [r7, #18]
 80076f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076f8:	827b      	strh	r3, [r7, #18]
 80076fa:	8a7b      	ldrh	r3, [r7, #18]
 80076fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007700:	827b      	strh	r3, [r7, #18]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	441a      	add	r2, r3
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007712:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800771a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771e:	b29b      	uxth	r3, r3
 8007720:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	371c      	adds	r7, #28
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr

0800772e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800773a:	78fb      	ldrb	r3, [r7, #3]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d103      	bne.n	8007748 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2280      	movs	r2, #128	; 0x80
 8007744:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	bc80      	pop	{r7}
 8007752:	4770      	bx	lr

08007754 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	bc80      	pop	{r7}
 8007766:	4770      	bx	lr

08007768 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr

0800777c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800778a:	b29b      	uxth	r3, r3
 800778c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800778e:	68fb      	ldr	r3, [r7, #12]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b08d      	sub	sp, #52	; 0x34
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	4611      	mov	r1, r2
 80077bc:	461a      	mov	r2, r3
 80077be:	460b      	mov	r3, r1
 80077c0:	80fb      	strh	r3, [r7, #6]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80077c6:	88bb      	ldrh	r3, [r7, #4]
 80077c8:	3301      	adds	r3, #1
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	005a      	lsls	r2, r3, #1
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077e8:	e01e      	b.n	8007828 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	3301      	adds	r3, #1
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	021b      	lsls	r3, r3, #8
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	b29a      	uxth	r2, r3
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	3302      	adds	r3, #2
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	3302      	adds	r3, #2
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	3301      	adds	r3, #1
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007824:	3b01      	subs	r3, #1
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1dd      	bne.n	80077ea <USB_WritePMA+0x3a>
  }
}
 800782e:	bf00      	nop
 8007830:	3734      	adds	r7, #52	; 0x34
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007838:	b480      	push	{r7}
 800783a:	b08b      	sub	sp, #44	; 0x2c
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	4611      	mov	r1, r2
 8007844:	461a      	mov	r2, r3
 8007846:	460b      	mov	r3, r1
 8007848:	80fb      	strh	r3, [r7, #6]
 800784a:	4613      	mov	r3, r2
 800784c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800784e:	88bb      	ldrh	r3, [r7, #4]
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	b29b      	uxth	r3, r3
 8007854:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800785e:	88fb      	ldrh	r3, [r7, #6]
 8007860:	005a      	lsls	r2, r3, #1
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800786a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
 8007870:	e01b      	b.n	80078aa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	3302      	adds	r3, #2
 800787e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	b2da      	uxtb	r2, r3
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	3301      	adds	r3, #1
 800788c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	0a1b      	lsrs	r3, r3, #8
 8007892:	b2da      	uxtb	r2, r3
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	3301      	adds	r3, #1
 800789c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	3302      	adds	r3, #2
 80078a2:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	3b01      	subs	r3, #1
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e0      	bne.n	8007872 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078b0:	88bb      	ldrh	r3, [r7, #4]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d007      	beq.n	80078cc <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	701a      	strb	r2, [r3, #0]
  }
}
 80078cc:	bf00      	nop
 80078ce:	372c      	adds	r7, #44	; 0x2c
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr

080078d6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80078e2:	2304      	movs	r3, #4
 80078e4:	2203      	movs	r2, #3
 80078e6:	2181      	movs	r1, #129	; 0x81
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 fc54 	bl	8009196 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80078f4:	2010      	movs	r0, #16
 80078f6:	f001 fd63 	bl	80093c0 <USBD_static_malloc>
 80078fa:	4602      	mov	r2, r0
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 800790c:	2302      	movs	r3, #2
 800790e:	e005      	b.n	800791c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007916:	2200      	movs	r2, #0
 8007918:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007930:	2181      	movs	r1, #129	; 0x81
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 fc55 	bl	80091e2 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	4618      	mov	r0, r3
 8007950:	f001 fd42 	bl	80093d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
	...

08007968 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007978:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007992:	2b00      	cmp	r3, #0
 8007994:	d045      	beq.n	8007a22 <USBD_HID_Setup+0xba>
 8007996:	2b20      	cmp	r3, #32
 8007998:	f040 80d3 	bne.w	8007b42 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	3b02      	subs	r3, #2
 80079a2:	2b09      	cmp	r3, #9
 80079a4:	d835      	bhi.n	8007a12 <USBD_HID_Setup+0xaa>
 80079a6:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <USBD_HID_Setup+0x44>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	08007a03 	.word	0x08007a03
 80079b0:	080079e3 	.word	0x080079e3
 80079b4:	08007a13 	.word	0x08007a13
 80079b8:	08007a13 	.word	0x08007a13
 80079bc:	08007a13 	.word	0x08007a13
 80079c0:	08007a13 	.word	0x08007a13
 80079c4:	08007a13 	.word	0x08007a13
 80079c8:	08007a13 	.word	0x08007a13
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079d5 	.word	0x080079d5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	461a      	mov	r2, r3
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	601a      	str	r2, [r3, #0]
          break;
 80079e0:	e01e      	b.n	8007a20 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2201      	movs	r2, #1
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 f915 	bl	8008c18 <USBD_CtlSendData>
          break;
 80079ee:	e017      	b.n	8007a20 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	885b      	ldrh	r3, [r3, #2]
 80079f4:	0a1b      	lsrs	r3, r3, #8
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	605a      	str	r2, [r3, #4]
          break;
 8007a00:	e00e      	b.n	8007a20 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	3304      	adds	r3, #4
 8007a06:	2201      	movs	r2, #1
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 f904 	bl	8008c18 <USBD_CtlSendData>
          break;
 8007a10:	e006      	b.n	8007a20 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f001 f895 	bl	8008b44 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8007a1e:	bf00      	nop
      }
      break;
 8007a20:	e096      	b.n	8007b50 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b0b      	cmp	r3, #11
 8007a28:	f200 8083 	bhi.w	8007b32 <USBD_HID_Setup+0x1ca>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBD_HID_Setup+0xcc>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a65 	.word	0x08007a65
 8007a38:	08007b33 	.word	0x08007b33
 8007a3c:	08007b33 	.word	0x08007b33
 8007a40:	08007b33 	.word	0x08007b33
 8007a44:	08007b33 	.word	0x08007b33
 8007a48:	08007b33 	.word	0x08007b33
 8007a4c:	08007a8d 	.word	0x08007a8d
 8007a50:	08007b33 	.word	0x08007b33
 8007a54:	08007b33 	.word	0x08007b33
 8007a58:	08007b33 	.word	0x08007b33
 8007a5c:	08007ae5 	.word	0x08007ae5
 8007a60:	08007b0d 	.word	0x08007b0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d107      	bne.n	8007a7e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007a6e:	f107 030e 	add.w	r3, r7, #14
 8007a72:	2202      	movs	r2, #2
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f8ce 	bl	8008c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a7c:	e060      	b.n	8007b40 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f85f 	bl	8008b44 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a86:	2302      	movs	r3, #2
 8007a88:	75fb      	strb	r3, [r7, #23]
          break;
 8007a8a:	e059      	b.n	8007b40 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	0a1b      	lsrs	r3, r3, #8
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b22      	cmp	r3, #34	; 0x22
 8007a96:	d108      	bne.n	8007aaa <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	88db      	ldrh	r3, [r3, #6]
 8007a9c:	2b4a      	cmp	r3, #74	; 0x4a
 8007a9e:	bf28      	it	cs
 8007aa0:	234a      	movcs	r3, #74	; 0x4a
 8007aa2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007aa4:	4b2d      	ldr	r3, [pc, #180]	; (8007b5c <USBD_HID_Setup+0x1f4>)
 8007aa6:	61bb      	str	r3, [r7, #24]
 8007aa8:	e015      	b.n	8007ad6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	885b      	ldrh	r3, [r3, #2]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	2b21      	cmp	r3, #33	; 0x21
 8007ab4:	d108      	bne.n	8007ac8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007ab6:	4b2a      	ldr	r3, [pc, #168]	; (8007b60 <USBD_HID_Setup+0x1f8>)
 8007ab8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	bf28      	it	cs
 8007ac2:	2309      	movcs	r3, #9
 8007ac4:	83fb      	strh	r3, [r7, #30]
 8007ac6:	e006      	b.n	8007ad6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 f83a 	bl	8008b44 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	75fb      	strb	r3, [r7, #23]
            break;
 8007ad4:	e034      	b.n	8007b40 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007ad6:	8bfb      	ldrh	r3, [r7, #30]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	69b9      	ldr	r1, [r7, #24]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 f89b 	bl	8008c18 <USBD_CtlSendData>
          break;
 8007ae2:	e02d      	b.n	8007b40 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aea:	2b03      	cmp	r3, #3
 8007aec:	d107      	bne.n	8007afe <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	3308      	adds	r3, #8
 8007af2:	2201      	movs	r2, #1
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f88e 	bl	8008c18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007afc:	e020      	b.n	8007b40 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 f81f 	bl	8008b44 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b06:	2302      	movs	r3, #2
 8007b08:	75fb      	strb	r3, [r7, #23]
          break;
 8007b0a:	e019      	b.n	8007b40 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d106      	bne.n	8007b24 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b22:	e00d      	b.n	8007b40 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f80c 	bl	8008b44 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	75fb      	strb	r3, [r7, #23]
          break;
 8007b30:	e006      	b.n	8007b40 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f805 	bl	8008b44 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b3e:	bf00      	nop
      }
      break;
 8007b40:	e006      	b.n	8007b50 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fffd 	bl	8008b44 <USBD_CtlError>
      ret = USBD_FAIL;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b4e:	bf00      	nop
  }

  return ret;
 8007b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	200000c8 	.word	0x200000c8
 8007b60:	200000b0 	.word	0x200000b0

08007b64 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2222      	movs	r2, #34	; 0x22
 8007b70:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007b72:	4b03      	ldr	r3, [pc, #12]	; (8007b80 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bc80      	pop	{r7}
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	20000044 	.word	0x20000044

08007b84 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2222      	movs	r2, #34	; 0x22
 8007b90:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007b92:	4b03      	ldr	r3, [pc, #12]	; (8007ba0 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20000068 	.word	0x20000068

08007ba4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2222      	movs	r2, #34	; 0x22
 8007bb0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007bb2:	4b03      	ldr	r3, [pc, #12]	; (8007bc0 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	2000008c 	.word	0x2000008c

08007bc4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr
	...

08007be8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	220a      	movs	r2, #10
 8007bf4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007bf6:	4b03      	ldr	r3, [pc, #12]	; (8007c04 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bc80      	pop	{r7}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	200000bc 	.word	0x200000bc

08007c08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	4613      	mov	r3, r2
 8007c14:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e01a      	b.n	8007c56 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d003      	beq.n	8007c40 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	79fa      	ldrb	r2, [r7, #7]
 8007c4c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f001 fa3e 	bl	80090d0 <USBD_LL_Init>

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d006      	beq.n	8007c80 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	73fb      	strb	r3, [r7, #15]
 8007c7e:	e001      	b.n	8007c84 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c80:	2302      	movs	r3, #2
 8007c82:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bc80      	pop	{r7}
 8007c8e:	4770      	bx	lr

08007c90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fa61 	bl	8009160 <USBD_LL_Start>

  return USBD_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00c      	beq.n	8007cf0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	78fa      	ldrb	r2, [r7, #3]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	4798      	blx	r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	4611      	mov	r1, r2
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 feca 	bl	8008acc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d46:	461a      	mov	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d54:	f003 031f 	and.w	r3, r3, #31
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d00c      	beq.n	8007d76 <USBD_LL_SetupStage+0x56>
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d302      	bcc.n	8007d66 <USBD_LL_SetupStage+0x46>
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d010      	beq.n	8007d86 <USBD_LL_SetupStage+0x66>
 8007d64:	e017      	b.n	8007d96 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9ca 	bl	8008108 <USBD_StdDevReq>
      break;
 8007d74:	e01a      	b.n	8007dac <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa2c 	bl	80081dc <USBD_StdItfReq>
      break;
 8007d84:	e012      	b.n	8007dac <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa6a 	bl	8008268 <USBD_StdEPReq>
      break;
 8007d94:	e00a      	b.n	8007dac <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fa3b 	bl	8009220 <USBD_LL_StallEP>
      break;
 8007daa:	bf00      	nop
  }

  return USBD_OK;
 8007dac:	2300      	movs	r3, #0
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d14b      	bne.n	8007e62 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007dd0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d134      	bne.n	8007e46 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d919      	bls.n	8007e1c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	1ad2      	subs	r2, r2, r3
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d203      	bcs.n	8007e0a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	e002      	b.n	8007e10 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	461a      	mov	r2, r3
 8007e12:	6879      	ldr	r1, [r7, #4]
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f000 ff2d 	bl	8008c74 <USBD_CtlContinueRx>
 8007e1a:	e038      	b.n	8007e8e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d105      	bne.n	8007e3e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 ff2a 	bl	8008c98 <USBD_CtlSendStatus>
 8007e44:	e023      	b.n	8007e8e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d11e      	bne.n	8007e8e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e58:	2100      	movs	r1, #0
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f001 f9e0 	bl	8009220 <USBD_LL_StallEP>
 8007e60:	e015      	b.n	8007e8e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00d      	beq.n	8007e8a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d108      	bne.n	8007e8a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	7afa      	ldrb	r2, [r7, #11]
 8007e82:	4611      	mov	r1, r2
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	4798      	blx	r3
 8007e88:	e001      	b.n	8007e8e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e000      	b.n	8007e90 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ea6:	7afb      	ldrb	r3, [r7, #11]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d17f      	bne.n	8007fac <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3314      	adds	r3, #20
 8007eb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d15c      	bne.n	8007f76 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d915      	bls.n	8007ef4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	691b      	ldr	r3, [r3, #16]
 8007ed0:	1ad2      	subs	r2, r2, r3
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	461a      	mov	r2, r3
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 feb5 	bl	8008c50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2100      	movs	r1, #0
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f001 fa43 	bl	8009378 <USBD_LL_PrepareReceive>
 8007ef2:	e04e      	b.n	8007f92 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	6912      	ldr	r2, [r2, #16]
 8007efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f00:	fb02 f201 	mul.w	r2, r2, r1
 8007f04:	1a9b      	subs	r3, r3, r2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d11c      	bne.n	8007f44 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	689a      	ldr	r2, [r3, #8]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d316      	bcc.n	8007f44 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d20f      	bcs.n	8007f44 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fe91 	bl	8008c50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f36:	2300      	movs	r3, #0
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2100      	movs	r1, #0
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f001 fa1b 	bl	8009378 <USBD_LL_PrepareReceive>
 8007f42:	e026      	b.n	8007f92 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00a      	beq.n	8007f66 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d105      	bne.n	8007f66 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f66:	2180      	movs	r1, #128	; 0x80
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f001 f959 	bl	8009220 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 fea5 	bl	8008cbe <USBD_CtlReceiveStatus>
 8007f74:	e00d      	b.n	8007f92 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d004      	beq.n	8007f8a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d103      	bne.n	8007f92 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f001 f947 	bl	8009220 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d11d      	bne.n	8007fd8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fe83 	bl	8007ca8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007faa:	e015      	b.n	8007fd8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00d      	beq.n	8007fd4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d108      	bne.n	8007fd4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	7afa      	ldrb	r2, [r7, #11]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	4798      	blx	r3
 8007fd2:	e001      	b.n	8007fd8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e000      	b.n	8007fda <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fea:	2340      	movs	r3, #64	; 0x40
 8007fec:	2200      	movs	r2, #0
 8007fee:	2100      	movs	r1, #0
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 f8d0 	bl	8009196 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2240      	movs	r2, #64	; 0x40
 8008002:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008006:	2340      	movs	r3, #64	; 0x40
 8008008:	2200      	movs	r2, #0
 800800a:	2180      	movs	r1, #128	; 0x80
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f8c2 	bl	8009196 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2240      	movs	r2, #64	; 0x40
 800801c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d009      	beq.n	800805a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	6852      	ldr	r2, [r2, #4]
 8008052:	b2d2      	uxtb	r2, r2
 8008054:	4611      	mov	r1, r2
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
  }

  return USBD_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	78fa      	ldrb	r2, [r7, #3]
 8008074:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bc80      	pop	{r7}
 80080a8:	4770      	bx	lr

080080aa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	2b04      	cmp	r3, #4
 80080ba:	d105      	bne.n	80080c8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bc80      	pop	{r7}
 80080d2:	4770      	bx	lr

080080d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d10b      	bne.n	80080fe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800811e:	2b20      	cmp	r3, #32
 8008120:	d004      	beq.n	800812c <USBD_StdDevReq+0x24>
 8008122:	2b40      	cmp	r3, #64	; 0x40
 8008124:	d002      	beq.n	800812c <USBD_StdDevReq+0x24>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d008      	beq.n	800813c <USBD_StdDevReq+0x34>
 800812a:	e04c      	b.n	80081c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
      break;
 800813a:	e049      	b.n	80081d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	785b      	ldrb	r3, [r3, #1]
 8008140:	2b09      	cmp	r3, #9
 8008142:	d83a      	bhi.n	80081ba <USBD_StdDevReq+0xb2>
 8008144:	a201      	add	r2, pc, #4	; (adr r2, 800814c <USBD_StdDevReq+0x44>)
 8008146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800814a:	bf00      	nop
 800814c:	0800819d 	.word	0x0800819d
 8008150:	080081b1 	.word	0x080081b1
 8008154:	080081bb 	.word	0x080081bb
 8008158:	080081a7 	.word	0x080081a7
 800815c:	080081bb 	.word	0x080081bb
 8008160:	0800817f 	.word	0x0800817f
 8008164:	08008175 	.word	0x08008175
 8008168:	080081bb 	.word	0x080081bb
 800816c:	08008193 	.word	0x08008193
 8008170:	08008189 	.word	0x08008189
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008174:	6839      	ldr	r1, [r7, #0]
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f9d4 	bl	8008524 <USBD_GetDescriptor>
          break;
 800817c:	e022      	b.n	80081c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fb37 	bl	80087f4 <USBD_SetAddress>
          break;
 8008186:	e01d      	b.n	80081c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fb74 	bl	8008878 <USBD_SetConfig>
          break;
 8008190:	e018      	b.n	80081c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fbfd 	bl	8008994 <USBD_GetConfig>
          break;
 800819a:	e013      	b.n	80081c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fc2c 	bl	80089fc <USBD_GetStatus>
          break;
 80081a4:	e00e      	b.n	80081c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fc5a 	bl	8008a62 <USBD_SetFeature>
          break;
 80081ae:	e009      	b.n	80081c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 fc69 	bl	8008a8a <USBD_ClrFeature>
          break;
 80081b8:	e004      	b.n	80081c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fcc1 	bl	8008b44 <USBD_CtlError>
          break;
 80081c2:	bf00      	nop
      }
      break;
 80081c4:	e004      	b.n	80081d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fcbb 	bl	8008b44 <USBD_CtlError>
      break;
 80081ce:	bf00      	nop
  }

  return ret;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop

080081dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f2:	2b20      	cmp	r3, #32
 80081f4:	d003      	beq.n	80081fe <USBD_StdItfReq+0x22>
 80081f6:	2b40      	cmp	r3, #64	; 0x40
 80081f8:	d001      	beq.n	80081fe <USBD_StdItfReq+0x22>
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d12a      	bne.n	8008254 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008204:	3b01      	subs	r3, #1
 8008206:	2b02      	cmp	r3, #2
 8008208:	d81d      	bhi.n	8008246 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	889b      	ldrh	r3, [r3, #4]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	d813      	bhi.n	800823c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	88db      	ldrh	r3, [r3, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d110      	bne.n	8008250 <USBD_StdItfReq+0x74>
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10d      	bne.n	8008250 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fd2f 	bl	8008c98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800823a:	e009      	b.n	8008250 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc80 	bl	8008b44 <USBD_CtlError>
          break;
 8008244:	e004      	b.n	8008250 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc7b 	bl	8008b44 <USBD_CtlError>
          break;
 800824e:	e000      	b.n	8008252 <USBD_StdItfReq+0x76>
          break;
 8008250:	bf00      	nop
      }
      break;
 8008252:	e004      	b.n	800825e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fc74 	bl	8008b44 <USBD_CtlError>
      break;
 800825c:	bf00      	nop
  }

  return USBD_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	889b      	ldrh	r3, [r3, #4]
 800827a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008284:	2b20      	cmp	r3, #32
 8008286:	d004      	beq.n	8008292 <USBD_StdEPReq+0x2a>
 8008288:	2b40      	cmp	r3, #64	; 0x40
 800828a:	d002      	beq.n	8008292 <USBD_StdEPReq+0x2a>
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <USBD_StdEPReq+0x3a>
 8008290:	e13d      	b.n	800850e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	4798      	blx	r3
      break;
 80082a0:	e13a      	b.n	8008518 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082aa:	2b20      	cmp	r3, #32
 80082ac:	d10a      	bne.n	80082c4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]

        return ret;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	e12a      	b.n	800851a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d03e      	beq.n	800834a <USBD_StdEPReq+0xe2>
 80082cc:	2b03      	cmp	r3, #3
 80082ce:	d002      	beq.n	80082d6 <USBD_StdEPReq+0x6e>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d070      	beq.n	80083b6 <USBD_StdEPReq+0x14e>
 80082d4:	e115      	b.n	8008502 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d002      	beq.n	80082e6 <USBD_StdEPReq+0x7e>
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d015      	beq.n	8008310 <USBD_StdEPReq+0xa8>
 80082e4:	e02b      	b.n	800833e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <USBD_StdEPReq+0x9e>
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	2b80      	cmp	r3, #128	; 0x80
 80082f0:	d009      	beq.n	8008306 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082f2:	7bbb      	ldrb	r3, [r7, #14]
 80082f4:	4619      	mov	r1, r3
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 ff92 	bl	8009220 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082fc:	2180      	movs	r1, #128	; 0x80
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 ff8e 	bl	8009220 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008304:	e020      	b.n	8008348 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fc1b 	bl	8008b44 <USBD_CtlError>
              break;
 800830e:	e01b      	b.n	8008348 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	885b      	ldrh	r3, [r3, #2]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10e      	bne.n	8008336 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <USBD_StdEPReq+0xce>
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b80      	cmp	r3, #128	; 0x80
 8008322:	d008      	beq.n	8008336 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	88db      	ldrh	r3, [r3, #6]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800832c:	7bbb      	ldrb	r3, [r7, #14]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 ff75 	bl	8009220 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fcae 	bl	8008c98 <USBD_CtlSendStatus>

              break;
 800833c:	e004      	b.n	8008348 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fbff 	bl	8008b44 <USBD_CtlError>
              break;
 8008346:	bf00      	nop
          }
          break;
 8008348:	e0e0      	b.n	800850c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008350:	2b02      	cmp	r3, #2
 8008352:	d002      	beq.n	800835a <USBD_StdEPReq+0xf2>
 8008354:	2b03      	cmp	r3, #3
 8008356:	d015      	beq.n	8008384 <USBD_StdEPReq+0x11c>
 8008358:	e026      	b.n	80083a8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00c      	beq.n	800837a <USBD_StdEPReq+0x112>
 8008360:	7bbb      	ldrb	r3, [r7, #14]
 8008362:	2b80      	cmp	r3, #128	; 0x80
 8008364:	d009      	beq.n	800837a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 ff58 	bl	8009220 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008370:	2180      	movs	r1, #128	; 0x80
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 ff54 	bl	8009220 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008378:	e01c      	b.n	80083b4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fbe1 	bl	8008b44 <USBD_CtlError>
              break;
 8008382:	e017      	b.n	80083b4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	885b      	ldrh	r3, [r3, #2]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d112      	bne.n	80083b2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800838c:	7bbb      	ldrb	r3, [r7, #14]
 800838e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 ff5f 	bl	800925e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 fc79 	bl	8008c98 <USBD_CtlSendStatus>
              }
              break;
 80083a6:	e004      	b.n	80083b2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fbca 	bl	8008b44 <USBD_CtlError>
              break;
 80083b0:	e000      	b.n	80083b4 <USBD_StdEPReq+0x14c>
              break;
 80083b2:	bf00      	nop
          }
          break;
 80083b4:	e0aa      	b.n	800850c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d002      	beq.n	80083c6 <USBD_StdEPReq+0x15e>
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	d032      	beq.n	800842a <USBD_StdEPReq+0x1c2>
 80083c4:	e097      	b.n	80084f6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083c6:	7bbb      	ldrb	r3, [r7, #14]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <USBD_StdEPReq+0x174>
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
 80083ce:	2b80      	cmp	r3, #128	; 0x80
 80083d0:	d004      	beq.n	80083dc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80083d2:	6839      	ldr	r1, [r7, #0]
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fbb5 	bl	8008b44 <USBD_CtlError>
                break;
 80083da:	e091      	b.n	8008500 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	da0b      	bge.n	80083fc <USBD_StdEPReq+0x194>
 80083e4:	7bbb      	ldrb	r3, [r7, #14]
 80083e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083ea:	4613      	mov	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4413      	add	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	3310      	adds	r3, #16
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	3304      	adds	r3, #4
 80083fa:	e00b      	b.n	8008414 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083fc:	7bbb      	ldrb	r3, [r7, #14]
 80083fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	3304      	adds	r3, #4
 8008414:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2202      	movs	r2, #2
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fbf8 	bl	8008c18 <USBD_CtlSendData>
              break;
 8008428:	e06a      	b.n	8008500 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800842a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800842e:	2b00      	cmp	r3, #0
 8008430:	da11      	bge.n	8008456 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008432:	7bbb      	ldrb	r3, [r7, #14]
 8008434:	f003 020f 	and.w	r2, r3, #15
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	4613      	mov	r3, r2
 800843c:	009b      	lsls	r3, r3, #2
 800843e:	4413      	add	r3, r2
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	440b      	add	r3, r1
 8008444:	3318      	adds	r3, #24
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d117      	bne.n	800847c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb78 	bl	8008b44 <USBD_CtlError>
                  break;
 8008454:	e054      	b.n	8008500 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	f003 020f 	and.w	r2, r3, #15
 800845c:	6879      	ldr	r1, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	440b      	add	r3, r1
 8008468:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d104      	bne.n	800847c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fb65 	bl	8008b44 <USBD_CtlError>
                  break;
 800847a:	e041      	b.n	8008500 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800847c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008480:	2b00      	cmp	r3, #0
 8008482:	da0b      	bge.n	800849c <USBD_StdEPReq+0x234>
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800848a:	4613      	mov	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	3310      	adds	r3, #16
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	3304      	adds	r3, #4
 800849a:	e00b      	b.n	80084b4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	3304      	adds	r3, #4
 80084b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <USBD_StdEPReq+0x25a>
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b80      	cmp	r3, #128	; 0x80
 80084c0:	d103      	bne.n	80084ca <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	e00e      	b.n	80084e8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fee4 	bl	800929c <USBD_LL_IsStallEP>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2201      	movs	r2, #1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	e002      	b.n	80084e8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2202      	movs	r2, #2
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fb92 	bl	8008c18 <USBD_CtlSendData>
              break;
 80084f4:	e004      	b.n	8008500 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fb23 	bl	8008b44 <USBD_CtlError>
              break;
 80084fe:	bf00      	nop
          }
          break;
 8008500:	e004      	b.n	800850c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fb1d 	bl	8008b44 <USBD_CtlError>
          break;
 800850a:	bf00      	nop
      }
      break;
 800850c:	e004      	b.n	8008518 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fb17 	bl	8008b44 <USBD_CtlError>
      break;
 8008516:	bf00      	nop
  }

  return ret;
 8008518:	7bfb      	ldrb	r3, [r7, #15]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	885b      	ldrh	r3, [r3, #2]
 800853e:	0a1b      	lsrs	r3, r3, #8
 8008540:	b29b      	uxth	r3, r3
 8008542:	3b01      	subs	r3, #1
 8008544:	2b06      	cmp	r3, #6
 8008546:	f200 8128 	bhi.w	800879a <USBD_GetDescriptor+0x276>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <USBD_GetDescriptor+0x2c>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	0800856d 	.word	0x0800856d
 8008554:	08008585 	.word	0x08008585
 8008558:	080085c5 	.word	0x080085c5
 800855c:	0800879b 	.word	0x0800879b
 8008560:	0800879b 	.word	0x0800879b
 8008564:	0800873b 	.word	0x0800873b
 8008568:	08008767 	.word	0x08008767
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	7c12      	ldrb	r2, [r2, #16]
 8008578:	f107 0108 	add.w	r1, r7, #8
 800857c:	4610      	mov	r0, r2
 800857e:	4798      	blx	r3
 8008580:	60f8      	str	r0, [r7, #12]
      break;
 8008582:	e112      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	7c1b      	ldrb	r3, [r3, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10d      	bne.n	80085a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f107 0208 	add.w	r2, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	2202      	movs	r2, #2
 80085a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80085a6:	e100      	b.n	80087aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	f107 0208 	add.w	r2, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3301      	adds	r3, #1
 80085be:	2202      	movs	r2, #2
 80085c0:	701a      	strb	r2, [r3, #0]
      break;
 80085c2:	e0f2      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	885b      	ldrh	r3, [r3, #2]
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b05      	cmp	r3, #5
 80085cc:	f200 80ac 	bhi.w	8008728 <USBD_GetDescriptor+0x204>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <USBD_GetDescriptor+0xb4>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085f1 	.word	0x080085f1
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008659 	.word	0x08008659
 80085e4:	0800868d 	.word	0x0800868d
 80085e8:	080086c1 	.word	0x080086c1
 80085ec:	080086f5 	.word	0x080086f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	7c12      	ldrb	r2, [r2, #16]
 8008608:	f107 0108 	add.w	r1, r7, #8
 800860c:	4610      	mov	r0, r2
 800860e:	4798      	blx	r3
 8008610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008612:	e091      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fa94 	bl	8008b44 <USBD_CtlError>
            err++;
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	3301      	adds	r3, #1
 8008620:	72fb      	strb	r3, [r7, #11]
          break;
 8008622:	e089      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00b      	beq.n	8008648 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	7c12      	ldrb	r2, [r2, #16]
 800863c:	f107 0108 	add.w	r1, r7, #8
 8008640:	4610      	mov	r0, r2
 8008642:	4798      	blx	r3
 8008644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008646:	e077      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa7a 	bl	8008b44 <USBD_CtlError>
            err++;
 8008650:	7afb      	ldrb	r3, [r7, #11]
 8008652:	3301      	adds	r3, #1
 8008654:	72fb      	strb	r3, [r7, #11]
          break;
 8008656:	e06f      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00b      	beq.n	800867c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	7c12      	ldrb	r2, [r2, #16]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800867a:	e05d      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa60 	bl	8008b44 <USBD_CtlError>
            err++;
 8008684:	7afb      	ldrb	r3, [r7, #11]
 8008686:	3301      	adds	r3, #1
 8008688:	72fb      	strb	r3, [r7, #11]
          break;
 800868a:	e055      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	7c12      	ldrb	r2, [r2, #16]
 80086a4:	f107 0108 	add.w	r1, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ae:	e043      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fa46 	bl	8008b44 <USBD_CtlError>
            err++;
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	3301      	adds	r3, #1
 80086bc:	72fb      	strb	r3, [r7, #11]
          break;
 80086be:	e03b      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	7c12      	ldrb	r2, [r2, #16]
 80086d8:	f107 0108 	add.w	r1, r7, #8
 80086dc:	4610      	mov	r0, r2
 80086de:	4798      	blx	r3
 80086e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086e2:	e029      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fa2c 	bl	8008b44 <USBD_CtlError>
            err++;
 80086ec:	7afb      	ldrb	r3, [r7, #11]
 80086ee:	3301      	adds	r3, #1
 80086f0:	72fb      	strb	r3, [r7, #11]
          break;
 80086f2:	e021      	b.n	8008738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008716:	e00f      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa12 	bl	8008b44 <USBD_CtlError>
            err++;
 8008720:	7afb      	ldrb	r3, [r7, #11]
 8008722:	3301      	adds	r3, #1
 8008724:	72fb      	strb	r3, [r7, #11]
          break;
 8008726:	e007      	b.n	8008738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa0a 	bl	8008b44 <USBD_CtlError>
          err++;
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	3301      	adds	r3, #1
 8008734:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008736:	e038      	b.n	80087aa <USBD_GetDescriptor+0x286>
 8008738:	e037      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	7c1b      	ldrb	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874a:	f107 0208 	add.w	r2, r7, #8
 800874e:	4610      	mov	r0, r2
 8008750:	4798      	blx	r3
 8008752:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008754:	e029      	b.n	80087aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008756:	6839      	ldr	r1, [r7, #0]
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9f3 	bl	8008b44 <USBD_CtlError>
        err++;
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	3301      	adds	r3, #1
 8008762:	72fb      	strb	r3, [r7, #11]
      break;
 8008764:	e021      	b.n	80087aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7c1b      	ldrb	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10d      	bne.n	800878a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	f107 0208 	add.w	r2, r7, #8
 800877a:	4610      	mov	r0, r2
 800877c:	4798      	blx	r3
 800877e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3301      	adds	r3, #1
 8008784:	2207      	movs	r2, #7
 8008786:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008788:	e00f      	b.n	80087aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f9d9 	bl	8008b44 <USBD_CtlError>
        err++;
 8008792:	7afb      	ldrb	r3, [r7, #11]
 8008794:	3301      	adds	r3, #1
 8008796:	72fb      	strb	r3, [r7, #11]
      break;
 8008798:	e007      	b.n	80087aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f9d1 	bl	8008b44 <USBD_CtlError>
      err++;
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	3301      	adds	r3, #1
 80087a6:	72fb      	strb	r3, [r7, #11]
      break;
 80087a8:	bf00      	nop
  }

  if (err != 0U)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d11c      	bne.n	80087ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087b0:	893b      	ldrh	r3, [r7, #8]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d011      	beq.n	80087da <USBD_GetDescriptor+0x2b6>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88db      	ldrh	r3, [r3, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00d      	beq.n	80087da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	88da      	ldrh	r2, [r3, #6]
 80087c2:	893b      	ldrh	r3, [r7, #8]
 80087c4:	4293      	cmp	r3, r2
 80087c6:	bf28      	it	cs
 80087c8:	4613      	movcs	r3, r2
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087ce:	893b      	ldrh	r3, [r7, #8]
 80087d0:	461a      	mov	r2, r3
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fa1f 	bl	8008c18 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	88db      	ldrh	r3, [r3, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa58 	bl	8008c98 <USBD_CtlSendStatus>
 80087e8:	e000      	b.n	80087ec <USBD_GetDescriptor+0x2c8>
    return;
 80087ea:	bf00      	nop
    }
  }
}
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop

080087f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	889b      	ldrh	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d130      	bne.n	8008868 <USBD_SetAddress+0x74>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	88db      	ldrh	r3, [r3, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d12c      	bne.n	8008868 <USBD_SetAddress+0x74>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	885b      	ldrh	r3, [r3, #2]
 8008812:	2b7f      	cmp	r3, #127	; 0x7f
 8008814:	d828      	bhi.n	8008868 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	885b      	ldrh	r3, [r3, #2]
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008820:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008828:	2b03      	cmp	r3, #3
 800882a:	d104      	bne.n	8008836 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f988 	bl	8008b44 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008834:	e01c      	b.n	8008870 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	7bfa      	ldrb	r2, [r7, #15]
 800883a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fd56 	bl	80092f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fa25 	bl	8008c98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800884e:	7bfb      	ldrb	r3, [r7, #15]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885c:	e008      	b.n	8008870 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008866:	e003      	b.n	8008870 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f96a 	bl	8008b44 <USBD_CtlError>
  }
}
 8008870:	bf00      	nop
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	885b      	ldrh	r3, [r3, #2]
 8008886:	b2da      	uxtb	r2, r3
 8008888:	4b41      	ldr	r3, [pc, #260]	; (8008990 <USBD_SetConfig+0x118>)
 800888a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800888c:	4b40      	ldr	r3, [pc, #256]	; (8008990 <USBD_SetConfig+0x118>)
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d904      	bls.n	800889e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f954 	bl	8008b44 <USBD_CtlError>
 800889c:	e075      	b.n	800898a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d002      	beq.n	80088ae <USBD_SetConfig+0x36>
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	d023      	beq.n	80088f4 <USBD_SetConfig+0x7c>
 80088ac:	e062      	b.n	8008974 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088ae:	4b38      	ldr	r3, [pc, #224]	; (8008990 <USBD_SetConfig+0x118>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d01a      	beq.n	80088ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80088b6:	4b36      	ldr	r3, [pc, #216]	; (8008990 <USBD_SetConfig+0x118>)
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2203      	movs	r2, #3
 80088c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088c8:	4b31      	ldr	r3, [pc, #196]	; (8008990 <USBD_SetConfig+0x118>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff f9f4 	bl	8007cbc <USBD_SetClassConfig>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d104      	bne.n	80088e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f931 	bl	8008b44 <USBD_CtlError>
            return;
 80088e2:	e052      	b.n	800898a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f9d7 	bl	8008c98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088ea:	e04e      	b.n	800898a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9d3 	bl	8008c98 <USBD_CtlSendStatus>
        break;
 80088f2:	e04a      	b.n	800898a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088f4:	4b26      	ldr	r3, [pc, #152]	; (8008990 <USBD_SetConfig+0x118>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d112      	bne.n	8008922 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008904:	4b22      	ldr	r3, [pc, #136]	; (8008990 <USBD_SetConfig+0x118>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800890e:	4b20      	ldr	r3, [pc, #128]	; (8008990 <USBD_SetConfig+0x118>)
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff f9f0 	bl	8007cfa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f9bc 	bl	8008c98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008920:	e033      	b.n	800898a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008922:	4b1b      	ldr	r3, [pc, #108]	; (8008990 <USBD_SetConfig+0x118>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	429a      	cmp	r2, r3
 800892e:	d01d      	beq.n	800896c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	b2db      	uxtb	r3, r3
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff f9de 	bl	8007cfa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800893e:	4b14      	ldr	r3, [pc, #80]	; (8008990 <USBD_SetConfig+0x118>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008948:	4b11      	ldr	r3, [pc, #68]	; (8008990 <USBD_SetConfig+0x118>)
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff f9b4 	bl	8007cbc <USBD_SetClassConfig>
 8008954:	4603      	mov	r3, r0
 8008956:	2b02      	cmp	r3, #2
 8008958:	d104      	bne.n	8008964 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 f8f1 	bl	8008b44 <USBD_CtlError>
            return;
 8008962:	e012      	b.n	800898a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f997 	bl	8008c98 <USBD_CtlSendStatus>
        break;
 800896a:	e00e      	b.n	800898a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f993 	bl	8008c98 <USBD_CtlSendStatus>
        break;
 8008972:	e00a      	b.n	800898a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008974:	6839      	ldr	r1, [r7, #0]
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f8e4 	bl	8008b44 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800897c:	4b04      	ldr	r3, [pc, #16]	; (8008990 <USBD_SetConfig+0x118>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff f9b9 	bl	8007cfa <USBD_ClrClassConfig>
        break;
 8008988:	bf00      	nop
    }
  }
}
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000180 	.word	0x20000180

08008994 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d004      	beq.n	80089b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f8cb 	bl	8008b44 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089ae:	e021      	b.n	80089f4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	db17      	blt.n	80089ea <USBD_GetConfig+0x56>
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	dd02      	ble.n	80089c4 <USBD_GetConfig+0x30>
 80089be:	2b03      	cmp	r3, #3
 80089c0:	d00b      	beq.n	80089da <USBD_GetConfig+0x46>
 80089c2:	e012      	b.n	80089ea <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3308      	adds	r3, #8
 80089ce:	2201      	movs	r2, #1
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f920 	bl	8008c18 <USBD_CtlSendData>
        break;
 80089d8:	e00c      	b.n	80089f4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	3304      	adds	r3, #4
 80089de:	2201      	movs	r2, #1
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 f918 	bl	8008c18 <USBD_CtlSendData>
        break;
 80089e8:	e004      	b.n	80089f4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f8a9 	bl	8008b44 <USBD_CtlError>
        break;
 80089f2:	bf00      	nop
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d81e      	bhi.n	8008a50 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	88db      	ldrh	r3, [r3, #6]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d004      	beq.n	8008a24 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a1a:	6839      	ldr	r1, [r7, #0]
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 f891 	bl	8008b44 <USBD_CtlError>
        break;
 8008a22:	e01a      	b.n	8008a5a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f043 0202 	orr.w	r2, r3, #2
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	330c      	adds	r3, #12
 8008a44:	2202      	movs	r2, #2
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f8e5 	bl	8008c18 <USBD_CtlSendData>
      break;
 8008a4e:	e004      	b.n	8008a5a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f876 	bl	8008b44 <USBD_CtlError>
      break;
 8008a58:	bf00      	nop
  }
}
 8008a5a:	bf00      	nop
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	885b      	ldrh	r3, [r3, #2]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d106      	bne.n	8008a82 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f90b 	bl	8008c98 <USBD_CtlSendStatus>
  }
}
 8008a82:	bf00      	nop
 8008a84:	3708      	adds	r7, #8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d80b      	bhi.n	8008ab8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	885b      	ldrh	r3, [r3, #2]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d10c      	bne.n	8008ac2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f8f1 	bl	8008c98 <USBD_CtlSendStatus>
      }
      break;
 8008ab6:	e004      	b.n	8008ac2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f842 	bl	8008b44 <USBD_CtlError>
      break;
 8008ac0:	e000      	b.n	8008ac4 <USBD_ClrFeature+0x3a>
      break;
 8008ac2:	bf00      	nop
  }
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	781a      	ldrb	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	785a      	ldrb	r2, [r3, #1]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	3302      	adds	r3, #2
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	3303      	adds	r3, #3
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4413      	add	r3, r2
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	3304      	adds	r3, #4
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	3305      	adds	r3, #5
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	3306      	adds	r3, #6
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	3307      	adds	r3, #7
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	021b      	lsls	r3, r3, #8
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	80da      	strh	r2, [r3, #6]

}
 8008b3a:	bf00      	nop
 8008b3c:	370c      	adds	r7, #12
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bc80      	pop	{r7}
 8008b42:	4770      	bx	lr

08008b44 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b4e:	2180      	movs	r1, #128	; 0x80
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fb65 	bl	8009220 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b56:	2100      	movs	r1, #0
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fb61 	bl	8009220 <USBD_LL_StallEP>
}
 8008b5e:	bf00      	nop
 8008b60:	3708      	adds	r7, #8
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d032      	beq.n	8008be2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f834 	bl	8008bea <USBD_GetLen>
 8008b82:	4603      	mov	r3, r0
 8008b84:	3301      	adds	r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	005b      	lsls	r3, r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	1c5a      	adds	r2, r3, #1
 8008b94:	75fa      	strb	r2, [r7, #23]
 8008b96:	461a      	mov	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	7812      	ldrb	r2, [r2, #0]
 8008ba0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	1c5a      	adds	r2, r3, #1
 8008ba6:	75fa      	strb	r2, [r7, #23]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	2203      	movs	r2, #3
 8008bb0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bb2:	e012      	b.n	8008bda <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	60fa      	str	r2, [r7, #12]
 8008bba:	7dfa      	ldrb	r2, [r7, #23]
 8008bbc:	1c51      	adds	r1, r2, #1
 8008bbe:	75f9      	strb	r1, [r7, #23]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	75fa      	strb	r2, [r7, #23]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e8      	bne.n	8008bb4 <USBD_GetString+0x4e>
    }
  }
}
 8008be2:	bf00      	nop
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008bf6:	e005      	b.n	8008c04 <USBD_GetLen+0x1a>
  {
    len++;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3301      	adds	r3, #1
 8008c02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1f5      	bne.n	8008bf8 <USBD_GetLen+0xe>
  }

  return len;
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c2e:	88fa      	ldrh	r2, [r7, #6]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c34:	88fa      	ldrh	r2, [r7, #6]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c3a:	88fb      	ldrh	r3, [r7, #6]
 8008c3c:	68ba      	ldr	r2, [r7, #8]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fb76 	bl	8009332 <USBD_LL_Transmit>

  return USBD_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c5e:	88fb      	ldrh	r3, [r7, #6]
 8008c60:	68ba      	ldr	r2, [r7, #8]
 8008c62:	2100      	movs	r1, #0
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fb64 	bl	8009332 <USBD_LL_Transmit>

  return USBD_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c82:	88fb      	ldrh	r3, [r7, #6]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	2100      	movs	r1, #0
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	f000 fb75 	bl	8009378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ca8:	2300      	movs	r3, #0
 8008caa:	2200      	movs	r2, #0
 8008cac:	2100      	movs	r1, #0
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fb3f 	bl	8009332 <USBD_LL_Transmit>

  return USBD_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b082      	sub	sp, #8
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2205      	movs	r2, #5
 8008cca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb4f 	bl	8009378 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	490e      	ldr	r1, [pc, #56]	; (8008d24 <MX_USB_DEVICE_Init+0x40>)
 8008cec:	480e      	ldr	r0, [pc, #56]	; (8008d28 <MX_USB_DEVICE_Init+0x44>)
 8008cee:	f7fe ff8b 	bl	8007c08 <USBD_Init>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cf8:	f7f8 fd1c 	bl	8001734 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008cfc:	490b      	ldr	r1, [pc, #44]	; (8008d2c <MX_USB_DEVICE_Init+0x48>)
 8008cfe:	480a      	ldr	r0, [pc, #40]	; (8008d28 <MX_USB_DEVICE_Init+0x44>)
 8008d00:	f7fe ffad 	bl	8007c5e <USBD_RegisterClass>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d0a:	f7f8 fd13 	bl	8001734 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d0e:	4806      	ldr	r0, [pc, #24]	; (8008d28 <MX_USB_DEVICE_Init+0x44>)
 8008d10:	f7fe ffbe 	bl	8007c90 <USBD_Start>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008d1a:	f7f8 fd0b 	bl	8001734 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000114 	.word	0x20000114
 8008d28:	2000037c 	.word	0x2000037c
 8008d2c:	2000000c 	.word	0x2000000c

08008d30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	6039      	str	r1, [r7, #0]
 8008d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2212      	movs	r2, #18
 8008d40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d42:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	20000130 	.word	0x20000130

08008d54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	6039      	str	r1, [r7, #0]
 8008d5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2204      	movs	r2, #4
 8008d64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d66:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bc80      	pop	{r7}
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000144 	.word	0x20000144

08008d78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	6039      	str	r1, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d84:	79fb      	ldrb	r3, [r7, #7]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d105      	bne.n	8008d96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	4907      	ldr	r1, [pc, #28]	; (8008dac <USBD_FS_ProductStrDescriptor+0x34>)
 8008d8e:	4808      	ldr	r0, [pc, #32]	; (8008db0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d90:	f7ff fee9 	bl	8008b66 <USBD_GetString>
 8008d94:	e004      	b.n	8008da0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4904      	ldr	r1, [pc, #16]	; (8008dac <USBD_FS_ProductStrDescriptor+0x34>)
 8008d9a:	4805      	ldr	r0, [pc, #20]	; (8008db0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d9c:	f7ff fee3 	bl	8008b66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000640 	.word	0x20000640
 8008db0:	080095e4 	.word	0x080095e4

08008db4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	4904      	ldr	r1, [pc, #16]	; (8008dd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008dc4:	4804      	ldr	r0, [pc, #16]	; (8008dd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008dc6:	f7ff fece 	bl	8008b66 <USBD_GetString>
  return USBD_StrDesc;
 8008dca:	4b02      	ldr	r3, [pc, #8]	; (8008dd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000640 	.word	0x20000640
 8008dd8:	080095fc 	.word	0x080095fc

08008ddc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	6039      	str	r1, [r7, #0]
 8008de6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	221a      	movs	r2, #26
 8008dec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008dee:	f000 f843 	bl	8008e78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008df2:	4b02      	ldr	r3, [pc, #8]	; (8008dfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	20000148 	.word	0x20000148

08008e00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	6039      	str	r1, [r7, #0]
 8008e0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	4907      	ldr	r1, [pc, #28]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e16:	4808      	ldr	r0, [pc, #32]	; (8008e38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e18:	f7ff fea5 	bl	8008b66 <USBD_GetString>
 8008e1c:	e004      	b.n	8008e28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	4904      	ldr	r1, [pc, #16]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e22:	4805      	ldr	r0, [pc, #20]	; (8008e38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e24:	f7ff fe9f 	bl	8008b66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e28:	4b02      	ldr	r3, [pc, #8]	; (8008e34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000640 	.word	0x20000640
 8008e38:	08009610 	.word	0x08009610

08008e3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	6039      	str	r1, [r7, #0]
 8008e46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	4907      	ldr	r1, [pc, #28]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e52:	4808      	ldr	r0, [pc, #32]	; (8008e74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e54:	f7ff fe87 	bl	8008b66 <USBD_GetString>
 8008e58:	e004      	b.n	8008e64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	4904      	ldr	r1, [pc, #16]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e5e:	4805      	ldr	r0, [pc, #20]	; (8008e74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e60:	f7ff fe81 	bl	8008b66 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e64:	4b02      	ldr	r3, [pc, #8]	; (8008e70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000640 	.word	0x20000640
 8008e74:	0800961c 	.word	0x0800961c

08008e78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e7e:	4b0f      	ldr	r3, [pc, #60]	; (8008ebc <Get_SerialNum+0x44>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e84:	4b0e      	ldr	r3, [pc, #56]	; (8008ec0 <Get_SerialNum+0x48>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e8a:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <Get_SerialNum+0x4c>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d009      	beq.n	8008eb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e9e:	2208      	movs	r2, #8
 8008ea0:	4909      	ldr	r1, [pc, #36]	; (8008ec8 <Get_SerialNum+0x50>)
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f814 	bl	8008ed0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	4908      	ldr	r1, [pc, #32]	; (8008ecc <Get_SerialNum+0x54>)
 8008eac:	68b8      	ldr	r0, [r7, #8]
 8008eae:	f000 f80f 	bl	8008ed0 <IntToUnicode>
  }
}
 8008eb2:	bf00      	nop
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	1ffff7e8 	.word	0x1ffff7e8
 8008ec0:	1ffff7ec 	.word	0x1ffff7ec
 8008ec4:	1ffff7f0 	.word	0x1ffff7f0
 8008ec8:	2000014a 	.word	0x2000014a
 8008ecc:	2000015a 	.word	0x2000015a

08008ed0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b087      	sub	sp, #28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	60f8      	str	r0, [r7, #12]
 8008ed8:	60b9      	str	r1, [r7, #8]
 8008eda:	4613      	mov	r3, r2
 8008edc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
 8008ee6:	e027      	b.n	8008f38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	0f1b      	lsrs	r3, r3, #28
 8008eec:	2b09      	cmp	r3, #9
 8008eee:	d80b      	bhi.n	8008f08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	0f1b      	lsrs	r3, r3, #28
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	4619      	mov	r1, r3
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	440b      	add	r3, r1
 8008f00:	3230      	adds	r2, #48	; 0x30
 8008f02:	b2d2      	uxtb	r2, r2
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e00a      	b.n	8008f1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	0f1b      	lsrs	r3, r3, #28
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
 8008f10:	005b      	lsls	r3, r3, #1
 8008f12:	4619      	mov	r1, r3
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	440b      	add	r3, r1
 8008f18:	3237      	adds	r2, #55	; 0x37
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	3301      	adds	r3, #1
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f32:	7dfb      	ldrb	r3, [r7, #23]
 8008f34:	3301      	adds	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
 8008f38:	7dfa      	ldrb	r2, [r7, #23]
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d3d3      	bcc.n	8008ee8 <IntToUnicode+0x18>
  }
}
 8008f40:	bf00      	nop
 8008f42:	371c      	adds	r7, #28
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bc80      	pop	{r7}
 8008f48:	4770      	bx	lr
	...

08008f4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a0d      	ldr	r2, [pc, #52]	; (8008f90 <HAL_PCD_MspInit+0x44>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d113      	bne.n	8008f86 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <HAL_PCD_MspInit+0x48>)
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	4a0c      	ldr	r2, [pc, #48]	; (8008f94 <HAL_PCD_MspInit+0x48>)
 8008f64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f68:	61d3      	str	r3, [r2, #28]
 8008f6a:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <HAL_PCD_MspInit+0x48>)
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008f76:	2200      	movs	r2, #0
 8008f78:	2100      	movs	r1, #0
 8008f7a:	2014      	movs	r0, #20
 8008f7c:	f7f9 fb5d 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008f80:	2014      	movs	r0, #20
 8008f82:	f7f9 fb76 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	40005c00 	.word	0x40005c00
 8008f94:	40021000 	.word	0x40021000

08008f98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fe feb6 	bl	8007d20 <USBD_LL_SetupStage>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008fce:	78fa      	ldrb	r2, [r7, #3]
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	440b      	add	r3, r1
 8008fdc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	78fb      	ldrb	r3, [r7, #3]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	f7fe fee6 	bl	8007db6 <USBD_LL_DataOutStage>
}
 8008fea:	bf00      	nop
 8008fec:	3708      	adds	r7, #8
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	00db      	lsls	r3, r3, #3
 8009010:	440b      	add	r3, r1
 8009012:	333c      	adds	r3, #60	; 0x3c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	4619      	mov	r1, r3
 800901a:	f7fe ff3d 	bl	8007e98 <USBD_LL_DataInStage>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff f84d 	bl	80080d4 <USBD_LL_SOF>
}
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}

08009042 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800904a:	2301      	movs	r3, #1
 800904c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d001      	beq.n	800905a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009056:	f7f8 fb6d 	bl	8001734 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009060:	7bfa      	ldrb	r2, [r7, #15]
 8009062:	4611      	mov	r1, r2
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fffd 	bl	8008064 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009070:	4618      	mov	r0, r3
 8009072:	f7fe ffb6 	bl	8007fe2 <USBD_LL_Reset>
}
 8009076:	bf00      	nop
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
	...

08009080 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800908e:	4618      	mov	r0, r3
 8009090:	f7fe fff7 	bl	8008082 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <HAL_PCD_SuspendCallback+0x30>)
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	4a03      	ldr	r2, [pc, #12]	; (80090b0 <HAL_PCD_SuspendCallback+0x30>)
 80090a2:	f043 0306 	orr.w	r3, r3, #6
 80090a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090a8:	bf00      	nop
 80090aa:	3708      	adds	r7, #8
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	e000ed00 	.word	0xe000ed00

080090b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe fff1 	bl	80080aa <USBD_LL_Resume>
}
 80090c8:	bf00      	nop
 80090ca:	3708      	adds	r7, #8
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80090d8:	4a1f      	ldr	r2, [pc, #124]	; (8009158 <USBD_LL_Init+0x88>)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a1d      	ldr	r2, [pc, #116]	; (8009158 <USBD_LL_Init+0x88>)
 80090e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80090e8:	4b1b      	ldr	r3, [pc, #108]	; (8009158 <USBD_LL_Init+0x88>)
 80090ea:	4a1c      	ldr	r2, [pc, #112]	; (800915c <USBD_LL_Init+0x8c>)
 80090ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80090ee:	4b1a      	ldr	r3, [pc, #104]	; (8009158 <USBD_LL_Init+0x88>)
 80090f0:	2208      	movs	r2, #8
 80090f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80090f4:	4b18      	ldr	r3, [pc, #96]	; (8009158 <USBD_LL_Init+0x88>)
 80090f6:	2202      	movs	r2, #2
 80090f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80090fa:	4b17      	ldr	r3, [pc, #92]	; (8009158 <USBD_LL_Init+0x88>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009100:	4b15      	ldr	r3, [pc, #84]	; (8009158 <USBD_LL_Init+0x88>)
 8009102:	2200      	movs	r2, #0
 8009104:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009106:	4b14      	ldr	r3, [pc, #80]	; (8009158 <USBD_LL_Init+0x88>)
 8009108:	2200      	movs	r2, #0
 800910a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800910c:	4812      	ldr	r0, [pc, #72]	; (8009158 <USBD_LL_Init+0x88>)
 800910e:	f7f9 fe2b 	bl	8002d68 <HAL_PCD_Init>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009118:	f7f8 fb0c 	bl	8001734 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009122:	2318      	movs	r3, #24
 8009124:	2200      	movs	r2, #0
 8009126:	2100      	movs	r1, #0
 8009128:	f7fb f948 	bl	80043bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009132:	2358      	movs	r3, #88	; 0x58
 8009134:	2200      	movs	r2, #0
 8009136:	2180      	movs	r1, #128	; 0x80
 8009138:	f7fb f940 	bl	80043bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009142:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009146:	2200      	movs	r2, #0
 8009148:	2181      	movs	r1, #129	; 0x81
 800914a:	f7fb f937 	bl	80043bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	20000840 	.word	0x20000840
 800915c:	40005c00 	.word	0x40005c00

08009160 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009168:	2300      	movs	r3, #0
 800916a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009176:	4618      	mov	r0, r3
 8009178:	f7f9 ff01 	bl	8002f7e <HAL_PCD_Start>
 800917c:	4603      	mov	r3, r0
 800917e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f93c 	bl	8009400 <USBD_Get_USB_Status>
 8009188:	4603      	mov	r3, r0
 800918a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800918c:	7bbb      	ldrb	r3, [r7, #14]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b084      	sub	sp, #16
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	4608      	mov	r0, r1
 80091a0:	4611      	mov	r1, r2
 80091a2:	461a      	mov	r2, r3
 80091a4:	4603      	mov	r3, r0
 80091a6:	70fb      	strb	r3, [r7, #3]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70bb      	strb	r3, [r7, #2]
 80091ac:	4613      	mov	r3, r2
 80091ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b4:	2300      	movs	r3, #0
 80091b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091be:	78bb      	ldrb	r3, [r7, #2]
 80091c0:	883a      	ldrh	r2, [r7, #0]
 80091c2:	78f9      	ldrb	r1, [r7, #3]
 80091c4:	f7fa f87b 	bl	80032be <HAL_PCD_EP_Open>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 f916 	bl	8009400 <USBD_Get_USB_Status>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	4611      	mov	r1, r2
 8009200:	4618      	mov	r0, r3
 8009202:	f7fa f8c2 	bl	800338a <HAL_PCD_EP_Close>
 8009206:	4603      	mov	r3, r0
 8009208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800920a:	7bfb      	ldrb	r3, [r7, #15]
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8f7 	bl	8009400 <USBD_Get_USB_Status>
 8009212:	4603      	mov	r3, r0
 8009214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009216:	7bbb      	ldrb	r3, [r7, #14]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	460b      	mov	r3, r1
 800922a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7fa f96b 	bl	800351a <HAL_PCD_EP_SetStall>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f8d8 	bl	8009400 <USBD_Get_USB_Status>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009254:	7bbb      	ldrb	r3, [r7, #14]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7fa f9ac 	bl	80035da <HAL_PCD_EP_ClrStall>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 f8b9 	bl	8009400 <USBD_Get_USB_Status>
 800928e:	4603      	mov	r3, r0
 8009290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009292:	7bbb      	ldrb	r3, [r7, #14]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80092b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	da0c      	bge.n	80092d2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	4613      	mov	r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	440b      	add	r3, r1
 80092cc:	3302      	adds	r3, #2
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	e00b      	b.n	80092ea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092d8:	68f9      	ldr	r1, [r7, #12]
 80092da:	4613      	mov	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	440b      	add	r3, r1
 80092e4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80092e8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bc80      	pop	{r7}
 80092f2:	4770      	bx	lr

080092f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009304:	2300      	movs	r3, #0
 8009306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800930e:	78fa      	ldrb	r2, [r7, #3]
 8009310:	4611      	mov	r1, r2
 8009312:	4618      	mov	r0, r3
 8009314:	f7f9 ffae 	bl	8003274 <HAL_PCD_SetAddress>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f86e 	bl	8009400 <USBD_Get_USB_Status>
 8009324:	4603      	mov	r3, r0
 8009326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009328:	7bbb      	ldrb	r3, [r7, #14]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b086      	sub	sp, #24
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	461a      	mov	r2, r3
 800933e:	460b      	mov	r3, r1
 8009340:	72fb      	strb	r3, [r7, #11]
 8009342:	4613      	mov	r3, r2
 8009344:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009354:	893b      	ldrh	r3, [r7, #8]
 8009356:	7af9      	ldrb	r1, [r7, #11]
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	f7fa f89b 	bl	8003494 <HAL_PCD_EP_Transmit>
 800935e:	4603      	mov	r3, r0
 8009360:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f84b 	bl	8009400 <USBD_Get_USB_Status>
 800936a:	4603      	mov	r3, r0
 800936c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800936e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	607a      	str	r2, [r7, #4]
 8009382:	461a      	mov	r2, r3
 8009384:	460b      	mov	r3, r1
 8009386:	72fb      	strb	r3, [r7, #11]
 8009388:	4613      	mov	r3, r2
 800938a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800939a:	893b      	ldrh	r3, [r7, #8]
 800939c:	7af9      	ldrb	r1, [r7, #11]
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	f7fa f83b 	bl	800341a <HAL_PCD_EP_Receive>
 80093a4:	4603      	mov	r3, r0
 80093a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f828 	bl	8009400 <USBD_Get_USB_Status>
 80093b0:	4603      	mov	r3, r0
 80093b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
	...

080093c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <USBD_static_malloc+0x14>)
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr
 80093d4:	20000184 	.word	0x20000184

080093d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]

}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bc80      	pop	{r7}
 80093e8:	4770      	bx	lr

080093ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ea:	b480      	push	{r7}
 80093ec:	b083      	sub	sp, #12
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	460b      	mov	r3, r1
 80093f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80093f6:	bf00      	nop
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc80      	pop	{r7}
 80093fe:	4770      	bx	lr

08009400 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	2b03      	cmp	r3, #3
 8009412:	d817      	bhi.n	8009444 <USBD_Get_USB_Status+0x44>
 8009414:	a201      	add	r2, pc, #4	; (adr r2, 800941c <USBD_Get_USB_Status+0x1c>)
 8009416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941a:	bf00      	nop
 800941c:	0800942d 	.word	0x0800942d
 8009420:	08009433 	.word	0x08009433
 8009424:	08009439 	.word	0x08009439
 8009428:	0800943f 	.word	0x0800943f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	73fb      	strb	r3, [r7, #15]
    break;
 8009430:	e00b      	b.n	800944a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009432:	2302      	movs	r3, #2
 8009434:	73fb      	strb	r3, [r7, #15]
    break;
 8009436:	e008      	b.n	800944a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009438:	2301      	movs	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]
    break;
 800943c:	e005      	b.n	800944a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800943e:	2302      	movs	r3, #2
 8009440:	73fb      	strb	r3, [r7, #15]
    break;
 8009442:	e002      	b.n	800944a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009444:	2302      	movs	r3, #2
 8009446:	73fb      	strb	r3, [r7, #15]
    break;
 8009448:	bf00      	nop
  }
  return usb_status;
 800944a:	7bfb      	ldrb	r3, [r7, #15]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	bc80      	pop	{r7}
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop

08009458 <__libc_init_array>:
 8009458:	b570      	push	{r4, r5, r6, lr}
 800945a:	2500      	movs	r5, #0
 800945c:	4e0c      	ldr	r6, [pc, #48]	; (8009490 <__libc_init_array+0x38>)
 800945e:	4c0d      	ldr	r4, [pc, #52]	; (8009494 <__libc_init_array+0x3c>)
 8009460:	1ba4      	subs	r4, r4, r6
 8009462:	10a4      	asrs	r4, r4, #2
 8009464:	42a5      	cmp	r5, r4
 8009466:	d109      	bne.n	800947c <__libc_init_array+0x24>
 8009468:	f000 f8a6 	bl	80095b8 <_init>
 800946c:	2500      	movs	r5, #0
 800946e:	4e0a      	ldr	r6, [pc, #40]	; (8009498 <__libc_init_array+0x40>)
 8009470:	4c0a      	ldr	r4, [pc, #40]	; (800949c <__libc_init_array+0x44>)
 8009472:	1ba4      	subs	r4, r4, r6
 8009474:	10a4      	asrs	r4, r4, #2
 8009476:	42a5      	cmp	r5, r4
 8009478:	d105      	bne.n	8009486 <__libc_init_array+0x2e>
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009480:	4798      	blx	r3
 8009482:	3501      	adds	r5, #1
 8009484:	e7ee      	b.n	8009464 <__libc_init_array+0xc>
 8009486:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800948a:	4798      	blx	r3
 800948c:	3501      	adds	r5, #1
 800948e:	e7f2      	b.n	8009476 <__libc_init_array+0x1e>
 8009490:	0800963c 	.word	0x0800963c
 8009494:	0800963c 	.word	0x0800963c
 8009498:	0800963c 	.word	0x0800963c
 800949c:	08009640 	.word	0x08009640

080094a0 <memset>:
 80094a0:	4603      	mov	r3, r0
 80094a2:	4402      	add	r2, r0
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d100      	bne.n	80094aa <memset+0xa>
 80094a8:	4770      	bx	lr
 80094aa:	f803 1b01 	strb.w	r1, [r3], #1
 80094ae:	e7f9      	b.n	80094a4 <memset+0x4>

080094b0 <floor>:
 80094b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80094b8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80094bc:	2e13      	cmp	r6, #19
 80094be:	4607      	mov	r7, r0
 80094c0:	460b      	mov	r3, r1
 80094c2:	460c      	mov	r4, r1
 80094c4:	4605      	mov	r5, r0
 80094c6:	dc35      	bgt.n	8009534 <floor+0x84>
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	da16      	bge.n	80094fa <floor+0x4a>
 80094cc:	a336      	add	r3, pc, #216	; (adr r3, 80095a8 <floor+0xf8>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f6 fe43 	bl	800015c <__adddf3>
 80094d6:	2200      	movs	r2, #0
 80094d8:	2300      	movs	r3, #0
 80094da:	f7f7 fa85 	bl	80009e8 <__aeabi_dcmpgt>
 80094de:	b148      	cbz	r0, 80094f4 <floor+0x44>
 80094e0:	2c00      	cmp	r4, #0
 80094e2:	da5b      	bge.n	800959c <floor+0xec>
 80094e4:	2500      	movs	r5, #0
 80094e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80094ea:	4a31      	ldr	r2, [pc, #196]	; (80095b0 <floor+0x100>)
 80094ec:	433b      	orrs	r3, r7
 80094ee:	42ab      	cmp	r3, r5
 80094f0:	bf18      	it	ne
 80094f2:	4614      	movne	r4, r2
 80094f4:	4623      	mov	r3, r4
 80094f6:	462f      	mov	r7, r5
 80094f8:	e026      	b.n	8009548 <floor+0x98>
 80094fa:	4a2e      	ldr	r2, [pc, #184]	; (80095b4 <floor+0x104>)
 80094fc:	fa42 f806 	asr.w	r8, r2, r6
 8009500:	ea01 0208 	and.w	r2, r1, r8
 8009504:	4302      	orrs	r2, r0
 8009506:	d01f      	beq.n	8009548 <floor+0x98>
 8009508:	a327      	add	r3, pc, #156	; (adr r3, 80095a8 <floor+0xf8>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f6 fe25 	bl	800015c <__adddf3>
 8009512:	2200      	movs	r2, #0
 8009514:	2300      	movs	r3, #0
 8009516:	f7f7 fa67 	bl	80009e8 <__aeabi_dcmpgt>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0ea      	beq.n	80094f4 <floor+0x44>
 800951e:	2c00      	cmp	r4, #0
 8009520:	bfbe      	ittt	lt
 8009522:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009526:	fa43 f606 	asrlt.w	r6, r3, r6
 800952a:	19a4      	addlt	r4, r4, r6
 800952c:	ea24 0408 	bic.w	r4, r4, r8
 8009530:	2500      	movs	r5, #0
 8009532:	e7df      	b.n	80094f4 <floor+0x44>
 8009534:	2e33      	cmp	r6, #51	; 0x33
 8009536:	dd0b      	ble.n	8009550 <floor+0xa0>
 8009538:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800953c:	d104      	bne.n	8009548 <floor+0x98>
 800953e:	4602      	mov	r2, r0
 8009540:	f7f6 fe0c 	bl	800015c <__adddf3>
 8009544:	4607      	mov	r7, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4638      	mov	r0, r7
 800954a:	4619      	mov	r1, r3
 800954c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009550:	f04f 32ff 	mov.w	r2, #4294967295
 8009554:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009558:	fa22 f808 	lsr.w	r8, r2, r8
 800955c:	ea18 0f00 	tst.w	r8, r0
 8009560:	d0f2      	beq.n	8009548 <floor+0x98>
 8009562:	a311      	add	r3, pc, #68	; (adr r3, 80095a8 <floor+0xf8>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f6 fdf8 	bl	800015c <__adddf3>
 800956c:	2200      	movs	r2, #0
 800956e:	2300      	movs	r3, #0
 8009570:	f7f7 fa3a 	bl	80009e8 <__aeabi_dcmpgt>
 8009574:	2800      	cmp	r0, #0
 8009576:	d0bd      	beq.n	80094f4 <floor+0x44>
 8009578:	2c00      	cmp	r4, #0
 800957a:	da02      	bge.n	8009582 <floor+0xd2>
 800957c:	2e14      	cmp	r6, #20
 800957e:	d103      	bne.n	8009588 <floor+0xd8>
 8009580:	3401      	adds	r4, #1
 8009582:	ea25 0508 	bic.w	r5, r5, r8
 8009586:	e7b5      	b.n	80094f4 <floor+0x44>
 8009588:	2301      	movs	r3, #1
 800958a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800958e:	fa03 f606 	lsl.w	r6, r3, r6
 8009592:	4435      	add	r5, r6
 8009594:	42bd      	cmp	r5, r7
 8009596:	bf38      	it	cc
 8009598:	18e4      	addcc	r4, r4, r3
 800959a:	e7f2      	b.n	8009582 <floor+0xd2>
 800959c:	2500      	movs	r5, #0
 800959e:	462c      	mov	r4, r5
 80095a0:	e7a8      	b.n	80094f4 <floor+0x44>
 80095a2:	bf00      	nop
 80095a4:	f3af 8000 	nop.w
 80095a8:	8800759c 	.word	0x8800759c
 80095ac:	7e37e43c 	.word	0x7e37e43c
 80095b0:	bff00000 	.word	0xbff00000
 80095b4:	000fffff 	.word	0x000fffff

080095b8 <_init>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr

080095c4 <_fini>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	bf00      	nop
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr
